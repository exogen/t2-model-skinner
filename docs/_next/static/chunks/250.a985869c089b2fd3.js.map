{"version":3,"file":"static/chunks/250.a985869c089b2fd3.js","mappings":"qMA6CA,SAASA,wBAAwBC,CAWd,KAXc,CAC/BC,SAAAA,CAAQ,CACRC,oBAAAA,CAAmB,CACnBC,gBAAAA,EAAkB,EAAK,CACvBC,SAAAA,EAAW,CAAC,CACZC,cAAAA,CAAa,CACbC,gBAAAA,EAAkB,EAAK,CACvBC,YAAAA,CAAW,CACXC,aAAAA,CAAY,CACZC,YAAAA,CAAW,CACXC,SAAAA,CAAQ,CACS,CAXcV,EAYzB,CAACW,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EACpC,MAEI,CAACC,EAAUC,EAAU,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAEjCG,EAAUC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IACtB,GAAqBH,GAAaH,EAAYO,KAAK,CAG5C,CACLP,YAAAA,EACAO,MAAOP,EAAYO,KAAK,CACxBJ,SAAAA,CACF,EANS,KAOR,CAACH,EAAaG,EAAS,EAiD1B,MAjGAK,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KAkDGR,GAhDTA,CAAAA,EAAYS,SAAS,CAAG,GAE5B,EAAG,CA8CUT,EA9CG,EAgDhBQ,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAI,CAACR,EACH,OAEF,IAAIU,EAAQ,GAENC,WAAa,KACZD,GACHN,EAAU,GAEd,EAGA,OAFAJ,EAAYY,gBAAgB,CAAC,OAAQD,YAE9B,KACLD,EAAQ,GACRV,EAAYa,mBAAmB,CAAC,OAAQF,WAC1C,CACF,EAAG,CAACX,EAAaV,EAAS,EAE1BkB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACHR,GAGDA,EAAYc,MAAM,EACpBV,EAAU,GAEd,EAAG,CAACJ,EAAaV,EAAS,EAE1BkB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACHR,GAAgBG,IAGjBR,EACFK,EAAYe,KAAK,GAEjBf,EAAYgB,IAAI,GAEpB,EAAG,CAAChB,EAAaG,EAAUR,EAAgB,EAE3Ca,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJR,GAAeG,GAAYL,GAC7BE,EAAYiB,YAAY,CAAC,gBAAiBnB,EAE9C,EAAG,CAACE,EAAaG,EAAUL,EAAY,EAGrC,GAAAoB,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAACC,eAAAA,CACCC,IAAKtB,EACLuB,IAAI,iBACJC,IAAKnC,EACLoC,kBAAe,GACfC,eAAc/B,EACdgC,mBACErC,GAAuBC,EAAkB,kBAAoBqC,KAAAA,EAE/DC,gBAAejC,EACfkC,oBAAkB,QAClBC,oBAAkB,QAClBC,iBAAgBvC,MAAAA,EAAAA,EAAiBmC,KAAAA,EACjCK,SAAUxC,EAAgB,OAAS,QACnCyC,eAAa,QACb1C,SAAUA,EACV2C,oBAAmB7C,MAAAA,EAAAA,EAAuBsC,KAAAA,EAC1CQ,eACE9C,GAAuBC,EACnBD,EACAsC,KAAAA,EAENS,gBAAc,OACdC,mBAAkBhD,GAAuBC,EAAkB,EAAI,EAC/DgD,MAAO,CAAEC,MAAO,OAAQC,OAAQ,MAAO,IAExCvC,EACC,GAAAe,EAAAG,GAAA,EAACsB,EAAAA,CAAkBA,CAACC,QAAQ,EAACC,MAAOxC,WACjCN,IAED,OAGV,CAEe,SAAS+C,YAAYC,CAAuB,EACzD,MAAO,GAAA7B,EAAAG,GAAA,EAACjC,wBAAAA,CAA8C,GAAG2D,CAAK,EAAzBA,EAAMzD,QAAQ,CACrD","sources":["webpack://_N_E/./src/ModelViewer.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { CSSProperties, ReactNode, useEffect, useMemo, useState } from \"react\";\r\nimport \"@google/model-viewer\";\r\nimport type { ModelViewerElement } from \"@google/model-viewer\";\r\nimport { ModelViewerContext } from \"./useModelViewer\";\r\n\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      \"model-viewer\": ModelViewerAttributes;\r\n    }\r\n    interface ModelViewerAttributes {\r\n      alt: string;\r\n      src: string;\r\n      ref: (modelViewer: ModelViewerElement | null) => void;\r\n      exposure: number;\r\n      autoplay: \"true\" | \"false\";\r\n      scale?: string;\r\n      style: CSSProperties;\r\n    }\r\n  }\r\n}\r\n\r\nfunction useTimeScale(modelViewer: ModelViewerElement | null) {\r\n  useEffect(() => {\r\n    if (modelViewer) {\r\n      modelViewer.timeScale = 0.5;\r\n    }\r\n  }, [modelViewer]);\r\n}\r\n\r\ninterface ModelViewerProps {\r\n  modelUrl: string;\r\n  environmentImageUrl: string | null;\r\n  showEnvironment?: boolean;\r\n  exposure?: number;\r\n  colorImageUrl?: string;\r\n  metallicImageUrl?: string;\r\n  animationName: string | null;\r\n  animationPaused?: boolean;\r\n  cameraOrbit?: string;\r\n  cameraTarget?: string;\r\n  fieldOfView?: string;\r\n  children?: ReactNode;\r\n}\r\n\r\nfunction ModelViewerKeyedByModel({\r\n  modelUrl,\r\n  environmentImageUrl,\r\n  showEnvironment = false,\r\n  exposure = 1,\r\n  animationName,\r\n  animationPaused = false,\r\n  cameraOrbit,\r\n  cameraTarget,\r\n  fieldOfView,\r\n  children,\r\n}: ModelViewerProps) {\r\n  const [modelViewer, setModelViewer] = useState<ModelViewerElement | null>(\r\n    null\r\n  );\r\n  const [isLoaded, setLoaded] = useState(false);\r\n\r\n  const context = useMemo(() => {\r\n    if (!modelViewer || !isLoaded || !modelViewer.model) {\r\n      return null;\r\n    }\r\n    return {\r\n      modelViewer,\r\n      model: modelViewer.model,\r\n      isLoaded,\r\n    };\r\n  }, [modelViewer, isLoaded]);\r\n\r\n  useTimeScale(modelViewer);\r\n\r\n  useEffect(() => {\r\n    if (!modelViewer) {\r\n      return;\r\n    }\r\n    let stale = false;\r\n\r\n    const handleLoad = () => {\r\n      if (!stale) {\r\n        setLoaded(true);\r\n      }\r\n    };\r\n    modelViewer.addEventListener(\"load\", handleLoad);\r\n\r\n    return () => {\r\n      stale = true;\r\n      modelViewer.removeEventListener(\"load\", handleLoad);\r\n    };\r\n  }, [modelViewer, modelUrl]);\r\n\r\n  useEffect(() => {\r\n    if (!modelViewer) {\r\n      return;\r\n    }\r\n    if (modelViewer.loaded) {\r\n      setLoaded(true);\r\n    }\r\n  }, [modelViewer, modelUrl]);\r\n\r\n  useEffect(() => {\r\n    if (!modelViewer || !isLoaded) {\r\n      return;\r\n    }\r\n    if (animationPaused) {\r\n      modelViewer.pause();\r\n    } else {\r\n      modelViewer.play();\r\n    }\r\n  }, [modelViewer, isLoaded, animationPaused]);\r\n\r\n  useEffect(() => {\r\n    if (modelViewer && isLoaded && fieldOfView) {\r\n      modelViewer.setAttribute(\"field-of-view\", fieldOfView);\r\n    }\r\n  }, [modelViewer, isLoaded, fieldOfView]);\r\n\r\n  return (\r\n    <>\r\n      <model-viewer\r\n        ref={setModelViewer}\r\n        alt=\"Tribes 2 Model\"\r\n        src={modelUrl}\r\n        camera-controls\r\n        camera-orbit={cameraOrbit}\r\n        max-camera-orbit={\r\n          environmentImageUrl && showEnvironment ? \"auto 90deg auto\" : undefined\r\n        }\r\n        camera-target={cameraTarget}\r\n        min-field-of-view=\"10deg\"\r\n        max-field-of-view=\"45deg\"\r\n        animation-name={animationName ?? undefined}\r\n        autoplay={animationName ? \"true\" : \"false\"}\r\n        touch-action=\"pan-y\"\r\n        exposure={exposure}\r\n        environment-image={environmentImageUrl ?? undefined}\r\n        skybox-image={\r\n          environmentImageUrl && showEnvironment\r\n            ? environmentImageUrl\r\n            : undefined\r\n        }\r\n        skybox-height=\"1.5m\"\r\n        shadow-intensity={environmentImageUrl && showEnvironment ? 1 : 0}\r\n        style={{ width: \"100%\", height: \"100%\" }}\r\n      />\r\n      {isLoaded ? (\r\n        <ModelViewerContext.Provider value={context}>\r\n          {children}\r\n        </ModelViewerContext.Provider>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function ModelViewer(props: ModelViewerProps) {\r\n  return <ModelViewerKeyedByModel key={props.modelUrl} {...props} />;\r\n}\r\n"],"names":["ModelViewerKeyedByModel","param","modelUrl","environmentImageUrl","showEnvironment","exposure","animationName","animationPaused","cameraOrbit","cameraTarget","fieldOfView","children","modelViewer","setModelViewer","useState","isLoaded","setLoaded","context","useMemo","model","useEffect","timeScale","stale","handleLoad","addEventListener","removeEventListener","loaded","pause","play","setAttribute","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","jsx","model-viewer","ref","alt","src","camera-controls","camera-orbit","max-camera-orbit","undefined","camera-target","min-field-of-view","max-field-of-view","animation-name","autoplay","touch-action","environment-image","skybox-image","skybox-height","shadow-intensity","style","width","height","ModelViewerContext","Provider","value","ModelViewer","props"],"sourceRoot":""}