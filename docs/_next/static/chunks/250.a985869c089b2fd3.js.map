{"version":3,"file":"static/chunks/250.a985869c089b2fd3.js","mappings":"qMA6CA,SAASA,wBAAwBC,CAWd,KAXc,CAC/BC,SAAAA,CAAQ,CACRC,oBAAAA,CAAmB,CACnBC,gBAAAA,EAAkB,EAAK,CACvBC,SAAAA,EAAW,CAAC,CACZC,cAAAA,CAAa,CACbC,gBAAAA,EAAkB,EAAK,CACvBC,YAAAA,CAAW,CACXC,aAAAA,CAAY,CACZC,YAAAA,CAAW,CACXC,SAAAA,CAAQ,CACS,CAXcV,EAYzB,CAACW,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EACpC,MAEI,CAACC,EAAUC,EAAU,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,EAAS,IAEjCG,EAAUC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,IACtB,GAAqBH,GAAaH,EAAYO,KAAK,CAG5C,CACLP,YAAAA,EACAO,MAAOP,EAAYO,KAAK,CACxBJ,SAAAA,CACF,EANS,KAOR,CAACH,EAAaG,EAAS,EAiD1B,MAjGAK,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KAkDGR,GAhDTA,CAAAA,EAAYS,SAAS,CAAG,GAE5B,EAAG,CA8CUT,EA9CG,EAgDhBQ,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACR,GAAI,CAACR,EACH,OAEF,IAAIU,EAAQ,GAENC,WAAa,KACZD,GACHN,EAAU,GAEd,EAGA,OAFAJ,EAAYY,gBAAgB,CAAC,OAAQD,YAE9B,KACLD,EAAQ,GACRV,EAAYa,mBAAmB,CAAC,OAAQF,WAC1C,CACF,EAAG,CAACX,EAAaV,EAAS,EAE1BkB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACHR,GAGDA,EAAYc,MAAM,EACpBV,EAAU,GAEd,EAAG,CAACJ,EAAaV,EAAS,EAE1BkB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACHR,GAAgBG,IAGjBR,EACFK,EAAYe,KAAK,GAEjBf,EAAYgB,IAAI,GAEpB,EAAG,CAAChB,EAAaG,EAAUR,EAAgB,EAE3Ca,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,KACJR,GAAeG,GAAYL,GAC7BE,EAAYiB,YAAY,CAAC,gBAAiBnB,EAE9C,EAAG,CAACE,EAAaG,EAAUL,EAAY,EAGrC,GAAAoB,EAAAC,IAAA,EAAAD,EAAAE,QAAA,YACE,GAAAF,EAAAG,GAAA,EAACC,eAAAA,CACCC,IAAKtB,EACLuB,IAAI,iBACJC,IAAKnC,EACLoC,kBAAe,GACfC,eAAc/B,EACdgC,mBACErC,GAAuBC,EAAkB,kBAAoBqC,KAAAA,EAE/DC,gBAAejC,EACfkC,oBAAkB,QAClBC,oBAAkB,QAClBC,iBAAgBvC,MAAAA,EAAAA,EAAiBmC,KAAAA,EACjCK,SAAUxC,EAAgB,OAAS,QACnCyC,eAAa,QACb1C,SAAUA,EACV2C,oBAAmB7C,MAAAA,EAAAA,EAAuBsC,KAAAA,EAC1CQ,eACE9C,GAAuBC,EACnBD,EACAsC,KAAAA,EAENS,gBAAc,OACdC,mBAAkBhD,GAAuBC,EAAkB,EAAI,EAC/DgD,MAAO,CAAEC,MAAO,OAAQC,OAAQ,MAAO,IAExCvC,EACC,GAAAe,EAAAG,GAAA,EAACsB,EAAAA,CAAkBA,CAACC,QAAQ,EAACC,MAAOxC,WACjCN,IAED,OAGV,CAEe,SAAS+C,YAAYC,CAAuB,EACzD,MAAO,GAAA7B,EAAAG,GAAA,EAACjC,wBAAAA,CAA8C,GAAG2D,CAAK,EAAzBA,EAAMzD,QAAQ,CACrD","sources":["webpack://_N_E/./src/ModelViewer.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { CSSProperties, ReactNode, useEffect, useMemo, useState } from \"react\";\nimport \"@google/model-viewer\";\nimport type { ModelViewerElement } from \"@google/model-viewer\";\nimport { ModelViewerContext } from \"./useModelViewer\";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"model-viewer\": ModelViewerAttributes;\n    }\n    interface ModelViewerAttributes {\n      alt: string;\n      src: string;\n      ref: (modelViewer: ModelViewerElement | null) => void;\n      exposure: number;\n      autoplay: \"true\" | \"false\";\n      scale?: string;\n      style: CSSProperties;\n    }\n  }\n}\n\nfunction useTimeScale(modelViewer: ModelViewerElement | null) {\n  useEffect(() => {\n    if (modelViewer) {\n      modelViewer.timeScale = 0.5;\n    }\n  }, [modelViewer]);\n}\n\ninterface ModelViewerProps {\n  modelUrl: string;\n  environmentImageUrl: string | null;\n  showEnvironment?: boolean;\n  exposure?: number;\n  colorImageUrl?: string;\n  metallicImageUrl?: string;\n  animationName: string | null;\n  animationPaused?: boolean;\n  cameraOrbit?: string;\n  cameraTarget?: string;\n  fieldOfView?: string;\n  children?: ReactNode;\n}\n\nfunction ModelViewerKeyedByModel({\n  modelUrl,\n  environmentImageUrl,\n  showEnvironment = false,\n  exposure = 1,\n  animationName,\n  animationPaused = false,\n  cameraOrbit,\n  cameraTarget,\n  fieldOfView,\n  children,\n}: ModelViewerProps) {\n  const [modelViewer, setModelViewer] = useState<ModelViewerElement | null>(\n    null\n  );\n  const [isLoaded, setLoaded] = useState(false);\n\n  const context = useMemo(() => {\n    if (!modelViewer || !isLoaded || !modelViewer.model) {\n      return null;\n    }\n    return {\n      modelViewer,\n      model: modelViewer.model,\n      isLoaded,\n    };\n  }, [modelViewer, isLoaded]);\n\n  useTimeScale(modelViewer);\n\n  useEffect(() => {\n    if (!modelViewer) {\n      return;\n    }\n    let stale = false;\n\n    const handleLoad = () => {\n      if (!stale) {\n        setLoaded(true);\n      }\n    };\n    modelViewer.addEventListener(\"load\", handleLoad);\n\n    return () => {\n      stale = true;\n      modelViewer.removeEventListener(\"load\", handleLoad);\n    };\n  }, [modelViewer, modelUrl]);\n\n  useEffect(() => {\n    if (!modelViewer) {\n      return;\n    }\n    if (modelViewer.loaded) {\n      setLoaded(true);\n    }\n  }, [modelViewer, modelUrl]);\n\n  useEffect(() => {\n    if (!modelViewer || !isLoaded) {\n      return;\n    }\n    if (animationPaused) {\n      modelViewer.pause();\n    } else {\n      modelViewer.play();\n    }\n  }, [modelViewer, isLoaded, animationPaused]);\n\n  useEffect(() => {\n    if (modelViewer && isLoaded && fieldOfView) {\n      modelViewer.setAttribute(\"field-of-view\", fieldOfView);\n    }\n  }, [modelViewer, isLoaded, fieldOfView]);\n\n  return (\n    <>\n      <model-viewer\n        ref={setModelViewer}\n        alt=\"Tribes 2 Model\"\n        src={modelUrl}\n        camera-controls\n        camera-orbit={cameraOrbit}\n        max-camera-orbit={\n          environmentImageUrl && showEnvironment ? \"auto 90deg auto\" : undefined\n        }\n        camera-target={cameraTarget}\n        min-field-of-view=\"10deg\"\n        max-field-of-view=\"45deg\"\n        animation-name={animationName ?? undefined}\n        autoplay={animationName ? \"true\" : \"false\"}\n        touch-action=\"pan-y\"\n        exposure={exposure}\n        environment-image={environmentImageUrl ?? undefined}\n        skybox-image={\n          environmentImageUrl && showEnvironment\n            ? environmentImageUrl\n            : undefined\n        }\n        skybox-height=\"1.5m\"\n        shadow-intensity={environmentImageUrl && showEnvironment ? 1 : 0}\n        style={{ width: \"100%\", height: \"100%\" }}\n      />\n      {isLoaded ? (\n        <ModelViewerContext.Provider value={context}>\n          {children}\n        </ModelViewerContext.Provider>\n      ) : null}\n    </>\n  );\n}\n\nexport default function ModelViewer(props: ModelViewerProps) {\n  return <ModelViewerKeyedByModel key={props.modelUrl} {...props} />;\n}\n"],"names":["ModelViewerKeyedByModel","param","modelUrl","environmentImageUrl","showEnvironment","exposure","animationName","animationPaused","cameraOrbit","cameraTarget","fieldOfView","children","modelViewer","setModelViewer","useState","isLoaded","setLoaded","context","useMemo","model","useEffect","timeScale","stale","handleLoad","addEventListener","removeEventListener","loaded","pause","play","setAttribute","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","jsx","model-viewer","ref","alt","src","camera-controls","camera-orbit","max-camera-orbit","undefined","camera-target","min-field-of-view","max-field-of-view","animation-name","autoplay","touch-action","environment-image","skybox-image","skybox-height","shadow-intensity","style","width","height","ModelViewerContext","Provider","value","ModelViewer","props"],"sourceRoot":""}