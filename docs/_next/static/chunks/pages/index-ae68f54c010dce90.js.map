{"version":3,"file":"static/chunks/pages/index-ae68f54c010dce90.js","mappings":"AuCACA,CAAAA,KAAK,gBAAmB,CAAGA,KAAK,gBAAmB,EAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAElE,KACC,SAASC,CAAuB,CAAEC,CAAwB,CAAEC,CAAmB,CAAE,CvCDxF,CAAAC,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAL,IAAA,EACA,IACA,UAAe,CACf,OAAAG,EAAA,KACA,EACA,CAKA,gBAAAF,CAAA,CAAAK,CAAA,CAAAH,CAAA,eAAAA,EAAAI,CAAA,CAAAD,GAAAH,EAAAK,CAAA,CAAAF,EAAA,2BAAAG,EAAA,QAAAC,EAAAP,EAAA,MAAAQ,EAAAR,EAAA,MAAAS,EAAAT,EAAAU,CAAA,CAAAF,GAAAG,EAAAX,EAAA,MCSA,IAAAY,EAAcD,EAAcE,aAAA,MAEHD,CAAAA,EAAAE,WAAA,iBAmBA,IAAAC,EAdoB,SACrCC,CAAU,MASdC,EARF,IAAKC,EAAS,GAAAP,EAAAQ,UAAA,EAAAP,GAAA,GACZ,CAAAM,EACD,gDACoC,KAC5B,IAAAF,EACEE,EACFF,IAAC,EAADA,EACF,GAEN,OAAAC,CAAAA,EAAAC,EAAAE,QAAA,CAAAJ,EAAA,GAAAC,KAAA,IAAAA,EAAAA,EAAA,ICCH,IAAAI,EAAaV,EAAcE,aAAA,OAIQ,SACjCS,GAAgB,CAChB,IAAKJ,EAAS,GAAAP,EAAAQ,UAAA,EAAAE,GAAA,GACZ,CAAAH,EACD,wCAEF,OAAAA,CAAA,CARuBG,EAAAP,WAAA,gBAQvB,IAAAS,EAAAvB,EAAA,MAAAwB,EAAAxB,EAAA,MAAAyB,EAAAzB,EAAA,MAAA0B,EAAA1B,EAAA,MAAA2B,EAAA3B,EAAA,MAAA4B,EAAA5B,EAAA,MAAA6B,EAAA7B,EAAA,MAAA8B,EAAA9B,EAAA,MCtCqC,SACpC+B,GAAM,CACN,IAAMC,EAAe,GAAArB,EAAAsB,MAAA,EAAgC,IAAI,EACnDC,EAAc,GAAAvB,EAAAsB,MAAM,EAA2B,IAAI,EACnDE,EACJ,CAAY,EACZxB,EAAAsB,MAAA,MACA,EAqBI,CAAEG,aAAAA,CAAA,CAAaC,gBAAAA,CAAE,CAAgBC,mBAAAA,CAAa,CAAAC,gBAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAAC,UAAAA,CAAA,CAAAC,WAAAA,CAAA,EAAAnC,IAEpD,CAAAoC,cAAAA,CAAc,CAAAC,eAAAA,CAAA,EAAA5C,EAAAqB,GAIR,CAACwB,EAAeC,EAAoB,IAAAlD,EAAAmD,QAAiC,QACrE,CAACC,EAAcC,EAAgB,CAAG,GAAArD,EAAAmD,QAA6B,MAAI,EACnE,CAACG,EAAAC,EAAkB,IAAkBvD,EAAGmD,QAAA,QACxC,CAAAK,EAAUC,EAAe,IAAAzD,EAAAmD,QAAS,EAAC,IACvC,CAAAO,OAAAA,CAAA,CAAWC,WAAAA,CAAA,KAAA/C,EAAAgD,CAAA,EAAAX,EAAAG,EAAA,CAAAS,UACT,EAAiBC,KAAA,QAASC,QAAE,CAAsBC,QAAAV,CAAE,CACpD,GAEEQ,KAAA,SAASC,QACP,CAAQE,OAAC,CAAG,EAAG,GACjB,CAEH,EACH,GAMMC,EAAAtC,EAAAA,EACHuC,MAAU,EAAAvC,EAAAwC,KAAA,IAAAvC,EAAAwC,GAAA,CAAAC,IACTC,EAAgC,GAAK,CACvC5C,EAAA6C,EAAAC,MAAA,CAAAC,KAAA,CAEF,EAOG,MAPa,GAAA1E,EACV2E,SAAA,MAAe,CACjBvB,GACDA,EAAAwB,KAAA,EACA,GAAexB,EAElB,EACiB,GAAAxD,EAAAiF,IAAA,SAAAC,UAAA,cAAAC,SAAA,CACR,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,wBAAAC,SAAA,CAEX,CAAU,EAAAnF,EAAAoF,GAAA,WACVF,UAAK,cACLG,KAAK,QACLnB,KAAG,kBACHoB,GAAA,6BACAR,MAAA,QACAS,QAAAzD,UAAAA,EAAU0D,SAAAb,CAAA,GAEG,GAAA3E,EAAAoF,GAAA,WAAAK,QAAA,6BACZN,SAAe,GAAAnF,EAAAoF,GAAA,UAAAF,UAAc,cAAAC,SAAA,YAG9B,CAAU,EAAAnF,EAAAoF,GAAA,WACVF,UAAK,cACLG,KAAK,QACLnB,KAAG,kBACHoB,GAAA,+BACAR,MAAA,UACAS,QAAAzD,YAAAA,EAAU0D,SAAAb,CAAA,GAEG,GAAA3E,EAAAoF,GAAA,WAAAK,QAAA,+BACZN,SAAe,GAAAnF,EAAAoF,GAAA,UAAAF,UAAc,cAAAC,SAAA,cAG9B,CAAU,EAAAnF,EAAAoF,GAAA,WACVF,UAAK,cACLG,KAAK,QACLnB,KAAG,kBACHoB,GAAA,6BACAR,MAAA,QACAS,QAAAzD,UAAAA,EAAU0D,SAAAb,CAAA,GAEG,GAAA3E,EAAAoF,GAAA,WAAAK,QAAA,6BACZN,SAAe,GAAAnF,EAAAoF,GAAA,UAAAF,UAAc,cAAAC,SAAA,eAG7B,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,UAAAC,SACZ,CACCnC,UAAAA,EAAA,GAAAhD,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SAAA,CAES,GAAAnF,EAAAoF,GAAA,WACLO,IAAAhE,EACQ,MADmB6D,SACnBZ,EAAW,CACM,IAAAgB,EACD,UAAAC,QAAA,CAAAC,EAAAC,IAAA,CAAlB,IAAAC,EACA,IAAIC,EAAW,OAAAD,CAAAA,EAAApB,EAAAC,MAAA,CAAAqB,KAAA,GAAAF,KAAA,IAAAA,EAAA,OAAAA,CAAA,OACbC,EAAM,CACN,IAAAE,EAAO,IAAAC,WAAoCD,EAAAE,gBACjC,YAAR,IAAAC,EACFR,EAAA,OAAAQ,CAAAA,EAAA1B,EAAAC,MAAA,GAAAyB,KAAA,IAAAA,EAAA,OAAAA,EAAAC,MAAA,CACA,GACFJ,EAAOK,aAAA,CAAAP,EAAA,MAENF,EAAA,iCACH,GAEQ9C,EAAC,CAAS2C,EACtB,CACA,EACAP,KAAA,OACAoB,OAAM,kBAAAC,OAAA,KAGD,GAAA1G,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,YACNsB,MAAA,YACM,UACFhF,EAAaiF,OAAO,EACrBjF,EAAAiF,OAAA,CAAAC,KAAA,EACH,EAEO1B,SAAQ,GAAAnF,EAAAoF,GAAA,EAAA7D,EAAAuF,GAAA,EAAAC,MAAE,CAAaC,SAAA,QAGzB,GAAAhH,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAOf,EAAoB,SAAe,OAC1CqC,MAAArC,EAAS,aAAoB,UAAkB,CAC/C2C,QAAA3C,EAAanC,EAAyBD,CAAS,eAE9CoC,EAAA,GAAA4C,KAAAA,CACC,CAAS/B,SAACb,EAAO,GAAAtE,EAAAoF,GAAA,EAAAjE,EAAAgG,GAAA,EAAAJ,MAAE,CAAaC,SAAA,GAEzB,GAAQ,GAAAhH,EAAAoF,GAAA,EAAAjE,EAAAiG,GAAA,EAAAL,MAAE,CAAaC,SAAA,EAC/B,MAGI,GAAAhH,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,gBACNsB,MAAA,oBAASM,QAAA7E,EAEC+C,SAAQ,GAAAnF,EAAAoF,GAAA,EAAAhE,EAAAiG,GAAA,EAAAN,MAAE,CAAaC,SAAA,QAG5B,GAAAhH,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,gBACNsB,MAAA,oBAASM,QAAA5E,EAEG8C,SAAQ,GAAAnF,EAAAoF,GAAA,EAAAhE,EAAAkG,GAAA,EAAAP,MAAE,CAAaC,SAAA,QAG9B,GAAAhH,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,YACNsB,MAAA,gBAASM,QAAA3E,EAEM6C,SAAA,GAAAnF,EAAAoF,GAAA,EAAAlE,EAAAqG,GAAA,OAGV,GAAAvH,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,SACNsB,MAAA,qBACAM,QAAA1E,EAAUiF,SAEVlD,EAAWa,SAAA,GAAAnF,EAAAoF,GAAA,EAAAjE,EAAAsG,GAAA,OAGN,GAAAzH,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,OACNsB,MAAA,gBACAM,QAAAzE,EAAWgF,SAEX,CAAA9E,EAAQyC,SAAA,GAAAnF,EAAAoF,GAAA,EAAA7D,EAAAmG,GAAA,OAGH,GAAA1H,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,OACNsB,MAAA,gBACAM,QAAAxE,EAAW+E,SAEX,CAAA7E,EAAQwC,SAAA,GAAAnF,EAAAoF,GAAA,EAAA7D,EAAAoG,GAAA,OAGV,GAEH,KACC3E,aAAAA,EAAA,GAAAhD,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SAAA,CAES,GAAAnF,EAAAoF,GAAA,YACLC,KAAA,SACA,cAAWlC,EAAA+D,KAAAA,EAAA,GACX,aAAM,SACNP,MAAA,aACE,UACFvD,EAAA,KAEc+B,SAAA,GAAAnF,EAAAoF,GAAA,EAAA/D,EAAAuG,GAAA,OAGT,GAAA5H,EAAAoF,GAAA,YACLC,KAAK,SACLM,IAAArC,EACA,cAAWH,EAAA,GAAA+D,KAAAA,CAAA,CACX,aAAM,QACNP,MAAA,YACE,UACAvD,EAAA,IACFS,EAAA,IAAAgE,EAAA,EAEU1C,SAAA,GAAAnF,EAAAoF,GAAA,EAAA9D,EAAAwG,GAAA,IAGX,GACElE,EACW,GAAA5D,EAAAiF,IAAA,SACVC,UAAK,kBACLS,IAAAlC,EACAsD,MAAAjD,EAAWiE,MAAA,CACXC,SAAS,GACP,OAAApD,EAAM,CACN,IAAMqD,EACHrD,EAAAsD,aACD,CACEC,EAAgB,CAAAF,GAAA,CAAArD,EAAAwD,aAAA,CAAAC,QAAA,CAAAJ,GAClBE,GACDtE,EAAA,GAEF,EAAoB,GAAAE,EAAAgE,MAAA,CAAA5C,SAAA,CAEhB,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,SAAAC,SAAA,CACR,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,QAAAC,SAAA,CACN,GAAAnF,EAAAoF,GAAA,WAAAD,SAAA,oBACF,CAAU,EAAAnF,EAAAoF,GAAA,SAAAF,UACb,kBAAOC,SACA,GAAAnF,EAAAoF,GAAA,EAAAnE,EAAAqH,CAAA,EACLC,IAAK,EACLC,IAAA,IAAYC,WACV,CACFC,QAAA,MACA,EACA5D,MAAAlC,EACM,SAAAkC,EAAM,CACR6D,MAAAC,OAAa,CAAC9D,IACfA,CAAAA,EAAAA,CAAA,KAEHjC,EAAAiC,EACA,EAAa+D,YACJ,CACPC,MAAA,GACAC,OAAA,GACAC,UAAA,GACAC,YAAY,oBACZC,WAAS,OAAAC,MAAA,CAAAvG,EAAA,MAAAuG,MAAA,CAAAvG,EAAA,MAAAuG,MAAA,CAAAvG,EAAA,KACXwG,QAAA,CACA,EAAWC,UACT,CACAN,OAAQ,EACRO,OAAA,iBAEFJ,WAAA,0DAKD,CAAU,EAAAlJ,EAAAiF,IAAA,SAAAC,UAAA,QAAAC,SAAA,CACN,GAAAnF,EAAAoF,GAAA,WAAAD,SAAA,eACF,CAAU,EAAAnF,EAAAoF,GAAA,SAAAF,UACb,kBAAOC,SACA,GAAAnF,EAAAoF,GAAA,EAAAnE,EAAAqH,CAAA,EACLC,IAAK,EACLC,IAAA,GAAYC,WACF,CACRM,OAAA,EACFG,WAAA,SACA,EACApE,MAAAhC,EACM,SAAAgC,EAAM,CACR6D,MAAAC,OAAa,CAAC9D,IACfA,CAAAA,EAAAA,CAAA,KAEH/B,EAAA+B,EACA,EAAa+D,YACJ,CACPC,MAAA,GACAC,OAAA,GACAC,UAAA,GACAC,YAAY,UACZC,WAAA,iBAEFE,QAAA,CACA,EAAWC,UACT,CACAN,OAAQ,EACRO,OAAA,iBACFJ,WAAA,sCAON,CAAU,EAAAlJ,EAAAoF,GAAA,SACVF,UAAK,aACLS,IAAAhC,EAAmBoD,MAAAjD,EAAAyF,KAAA,GAGrB,GAAI,KAER,GAAI,QAEL,CAAU,EAAAvJ,EAAAiF,IAAA,SAAAC,UAAA,SAAAC,SAAA,CAEN,GAAAnF,EAAAoF,GAAA,WACLO,IAAAlE,EACA4D,KAAK,OACLnB,KAAA,iBACAsF,YAAM,YAAAC,KAAA,KAGD,GAAAzJ,EAAAoF,GAAA,YACLC,KAAA,SACE,SAAM,CACN,IAAMnB,EAAAzC,EAASmF,OAAY,CAAOnF,EAClBmF,OAAO,CAAC9B,KAAK,CACzB,GACJ4E,EAAW9H,EAAAgF,OAAA,CAAAhF,EAAAgF,OAAA,CAAA9B,KAAA,QAAA5B,EAAE,CAAMgB,KAAAA,EAAOwF,OAAAA,CAC5B,IACDvE,SAAA,WAGY,GAAAnF,EAAAiF,IAAA,YAAAU,IAAA/D,EAAAuD,SAAA,CACG,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,MAAMK,SAAA,SACN,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,MAAMK,SAAA,iBAK7B,KAAAwE,EAAAlK,EAAA,MAAAmK,EAAAnK,EAAAU,CAAA,CAAAwJ,GAAAE,EAAApK,EAAA,MCxVD,IAAAqK,EAAe1J,EAAcE,aAAA,OAIQ,SACnCyJ,GAAgB,CAChB,IAAKpJ,EAAS,GAAAP,EAAAQ,UAAA,EAAAkJ,GAAA,GACZ,CAAAnJ,EACD,0CAEF,OAAAA,CAAA,CCrC8C,SAC7CqJ,EAAkCC,CAAA,EACG,WACjCpE,QAAA,GAAagE,EAAAA,MAAA,CAAAK,KAAA,CAAAC,OAAA,CAAAF,EAAAnE,EAAA,CACfsE,YAAA,WAEH,IDuByBN,EAAAvJ,WAAA,kBCvBzB,IAAA8J,EAAA5K,EAAA,MCPD,SAAA6K,GAAoB,CACpB,WAAAC,OAAA9K,EAAA+K,CAAA,oECGyC,SACvCC,GAAkB,CAClB,IAAMC,EAAA,GAAetK,EAAAsB,MAAA,MAEX,EAEJiJ,EAAQ,GAAAvK,EAAAsB,MAAc,QAC1BoD,EAAM,GAAA1E,EAAAwK,OAAqB,WACzBC,EAAO,IACTF,EAAA/D,OAAA,CACO,MACL,CAA6C,MAATkE,+BAAA,KAAG,IAAAC,EAAHC,UAAAzG,MAAA,CAAO0G,EAAA,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAADD,CAAA,CAAAC,EAAA,CAAAF,SAAA,CAAAE,EAAA,CAExC,IAAAC,EAAO,MAAAN,IACT,OAAAM,MAAAA,EAAA,OAAAA,EAAAL,6BAAA,IAAAG,EAAA,EAC0C,MAATG,4BAAA,KAAG,IAAAL,EAAHC,UAAAzG,MAAA,CAAO0G,EAAA,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAADD,CAAA,CAAAC,EAAA,CAAAF,SAAA,CAAAE,EAAA,CAErC,IAAAC,EAAO,MAAAN,IACT,OAAAM,MAAAA,EAAA,OAAAA,EAAAC,0BAAA,IAAAH,EAAA,EACkD,MAATI,oCAAA,KAAG,IAAAN,EAAHC,UAAAzG,MAAA,CAAO0G,EAAA,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAADD,CAAA,CAAAC,EAAA,CAAAF,SAAA,CAAAE,EAAA,CAE7C,IAAAC,EAAO,MAAAN,IACT,OAAAM,MAAAA,EAAA,OAAAA,EAAAE,kCAAA,IAAAJ,EAAA,EAC2D,MAATK,6CAAA,KAAG,IAAAP,EAAHC,UAAAzG,MAAA,CAAO0G,EAAA,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAADD,CAAA,CAAAC,EAAA,CAAAF,SAAA,CAAAE,EAAA,CAEtD,IAAAC,EAAO,MAAAN,IACT,OAAAM,MAAAA,EAAA,OAAAA,EAAAG,2CAAA,IAAAL,EAAA,CAED,CAEH,MAcD,MAdiB,GAAA7K,EACd2E,SAAM,EAAS,IAAI,CACnB,IAAMwG,EAAA,IAAYjB,EAElBa,EAAiBd,EAAGmB,EAAA,CAAAD,GAGP,OAFbb,EAAA9D,OAAa,CAAO2E,EAEpBZ,EAAa/D,OAAA,CAAAuE,EACX,KACAA,CAAO,CAAAd,EAASoB,EAAA,IAClBF,EAAAG,SAAA,EACC,CAEH,MACD5G,CAAA,CCjDqC,SACpC6G,GAAO,OACL,CACAC,cAA+C,GACjDC,SAAA,mBACD,EC6EwD,eACjDC,EAAuB7B,CAAA,EAC7B,IAAI8B,EAAa,MAAAC,MAAA/B,GAAA,GACf8B,EAAME,EAAA,EACN,IAAAC,EAAO,MAAAH,EAAAG,WAAA,GACT,OAAOA,CAAA,CAGR,MADE,mCAAA/C,MAAA,CAAAc,GAAA,CDpFFxK,EAAA,MAAAA,EAAA,IESD,GAAM,CAAE0M,oBAAAA,CAAc,EAAAvC,MAEtB,CAAAwC,UAAAA,CAAS,CAAW,CAAAD,EAsByD,SAAvCE,EAAqCC,CAArC,MAIpCC,EAEAC,EALA,IAAMrH,SAAAA,CAAE,EAAWmH,EACb,CAACG,YAAAA,CAAA,CAAAC,kBAAAA,CAAuB,EAAA3C,IACxB,CAAA4C,EAAwBC,EAAa,IAAAxM,EAAAmD,QAAA,KACvBsJ,EAAAT,CAAA,CAAAK,EAAA,CAGZK,EAAA,OAAAP,CAAAA,EAAAM,CAAA,CAAAF,EAAA,GAAAJ,KAAA,IAAAA,EAAAA,EAAA,KAAoBQ,EAAC,GAAA3M,EAAAwK,OAAA,aAAA4B,CAAAA,EAAAM,EAAArD,IAAA,GAAA+C,KAAA,IAAAA,EAAAA,EAAA,CAAK,IAChC,IAAC,EAAYM,EAGf,EAIME,EAAC,CAAAF,CAAAA,IAAAA,EAAkBG,cAAuB,EAAAH,IAAAA,EAASI,eAAA,EAEpD,CAAAlK,EAAemK,EAAqB,IAAA/M,EAAYmD,QAAA,WACnDyJ,GAAAhK,aAAAA,GACDmK,EAAA,SAGD,GAAM,CAACrL,EAAeC,EAAoB,IAAA3B,EAAAmD,QACxC,EAAM,WAEF,CAACtB,EAAYmL,EAAiB,IAAAhN,EAAAmD,QAAS,UAAA8J,KACvC,CAACzK,EAAWC,EAAa,CAAG,GAAAzC,EAAAmD,QAAS,OACrC,CAACT,EAAAC,EAAiB,IAAA3C,EAAmBmD,QAAG,MAIxC,CAAAvB,EAAesL,EACM,CAApB,GAAAlN,EAAAmD,QAAiB,MAAoB,IAEtC1B,EAAAiL,EAAmB,GAAA3D,MAAkC,CAAA2D,EAAjB5I,IAAY,MAAKiF,MAAA,CAAAnG,GAAiB,KACtEuK,EAAeT,EAAS,GAAA3D,MAAA,CAAA2D,EAAA5I,IAAA,mBACxB,CAAErD,SAAAA,CAAM,CAAE,CAAAL,IAEV,CAAEgN,OAAAA,CAAA,CAAQC,aAAAA,CAAA,CAAcjL,KAAAA,CAAK,CAAAC,KAAAA,CAAA,CAAAC,QAAAA,CAAU,CAAAC,QAAAA,CAAA,EAAAnC,EAAAqB,GACvC,CAAC2L,OAAAE,CAAe,EAAAlN,EAAkB+M,GAClC,CAAApK,EAAEC,EAAA,CAA+B,GAAGhD,EAAAmD,QAAc,MAClD,CAAEuH,8BAAAA,CAAkB,CAAW,CAAAL,IAE/B,CAAAmB,cAAAA,CAAA,CAAgB,CAAAD,IACpBzJ,EAAI,GAAgB9B,EAAMuN,WAAE,OAC1B3L,EAAAuC,MAAkB,EAAkB6I,EAC5B,GAAuB,CAC7B,IAAKQ,EAAM,IAAkBP,IAAApL,GAAiB,IAC5C,IAAA4L,KAAqB7L,EAAA,KArEtB0C,EAsECkJ,EAAWE,GAAA,CAAAD,GArEnBnJ,CADOA,EAuEDmJ,GAtECE,aAAa,CAAG,GACvBrJ,EAAOsJ,aAAY,CAAG,GACtBtJ,EAAOuJ,YAAY,CAAG,GACtBvJ,EAAOwJ,YAAY,CAAG,GACxBxJ,EAAAyJ,YAAA,GAmEQ,CACF,OAAAP,CACD,EACA,GAAiB5L,EAEpB,EACEG,EAAoB,GAAA/B,EAAQuN,WAAA,OAC1B3L,EAAAuC,MAAkB,EAAkB6I,EAC5B,GAAuB,CAC7B,IAAKQ,EAAM,IAAkBP,IAAApL,GAAiB,IAC5C,IAAA4L,KAAwB7L,EAAA,KA1EzB0C,EA2ECkJ,EAAaQ,MAAA,CAAAP,GA1ErBnJ,CADOA,EA4EDmJ,GA3ECE,aAAa,CAAG,GACvBrJ,EAAOsJ,aAAY,CAAG,GACtBtJ,EAAOuJ,YAAY,CAAG,GACtBvJ,EAAOwJ,YAAY,CAAG,GACxBxJ,EAAAyJ,YAAA,GAwEQ,CACF,OAAAP,CACD,EACA,GAAiB5L,EAEpB,EACEI,EAAe,GAAAhC,EAAOuN,WAAe,YACrC,IAAIjJ,EAAQ8I,EAAAa,eAAA,GACV3J,IACA8I,EAAApL,YAAA,CAAAsC,EAAA,IACD+I,IACA,GAASD,EAAaC,EAEzB,EACEpL,EAAe,GAAAjC,EAAOuN,WAAe,YACrC,IAAIjJ,EAAQ8I,EAAAa,eAAA,MACV3J,EAAA,CACoE,GAClE8I,EAAAc,QAAA,MAAA5J,GAAA8I,EAAAc,QAAA,MAAA5J,EACD,MACD,CACA8I,EAAAe,aAAA,CAAA7J,EAAA,IACD+I,GACA,IAASD,EAAaC,EAEzB,EAEIxK,GAAI,GAAA7C,EAAAuN,WAAA,QAAAa,GAAA,CACJ,IAAAC,EAAkC,IAChC,IAAM7I,KAAQ4I,EAAM,CACpB,IAAKE,EAAM,MAAS1E,EAAepE,GAAA,GACjC,CAAA8I,EAAM5F,KAAI,EAAM,CAAA4F,EAAA3F,MAAA,CACjB,iCAED,IAAM4F,EAAAD,EAAc5F,KAAM,CAAMiE,CAAG,GAAY,CAC3C6B,EAAaF,EAAK3F,MAAA,CAAAgE,CAAiB,OACrC4B,EAAI,GAAAC,EAAA,GACJ,IAAIC,EAEJA,EADEF,EAAYC,EACP,EAAAD,EAEN,EAAAC,EAEDF,EAAMI,MAAM,CAAGD,EAChBH,EAAAK,MAAA,CAAAF,CACD,IACE7L,aAAAA,EAAoB,CAClB0L,EAAMM,OAAO,EACdN,CAAAA,EAAAM,OAAA,KAED,IAAMC,EAAa,IAAApF,EAAAA,MAAA,CAAAK,KAAA,CAAA8E,OAAA,CAAAE,SAAA,CACnBR,EAAMM,OAAA,CAAA1P,IAAY,CAAA2P,GACnBP,EAAAS,YAAA,EACD,GACO,IACP3B,EAAO4B,YAAI,CAAAV,GACXlB,EAAAM,GAAA,CAAAY,GACFD,EAAAC,CACA,CACED,GACDjB,EAAA6B,eAAA,CAAAZ,EAEH,GAASjB,EAAkBxK,EAAY+J,EAGzC,EACEzK,GAAM,CAAS,EAAAlC,EAAOuN,WAAA,WAAe,CACrC,IAAIjJ,EAAQ8I,EAAAa,eAAA,MACV3J,EAAM,KAGN4K,EAASC,EAFM,IAGPC,EAAA,MACC,IAAA3J,QAAA,GAAAnB,EAAA+K,KAAA,CAAA3J,IAFA0J,EACPE,GAAA,CAAK,CACLC,IAAA,CAAM,IAAU,GAATL,CAAAA,EAAAE,EAAAG,GAAK,GAAIL,KAAT,IAASA,EAATA,EAAA,GAAa,GACpBM,KAAA,KAAa,GAAbL,CAAAA,EAAaC,EAAAI,IAAA,GAAAL,KAAA,IAAAA,EAAAA,EAAA,MACfM,QAAA,EAEA,GA/IN,oBAAAnL,EAAAW,IAAA,GAiJQmK,EAAKhC,MAAA,CAAAA,EAA0BgC,EAC7BM,aAAW,KACbtC,EAAAM,GAAA,CAAApJ,EACA,GACD8K,EAAAO,SAAA,IAGDvC,EAAOwC,mBAAI,GACXxC,EAAOM,GAAA,CAAA0B,GACRhC,EAAA6B,eAAA,CAAAG,EACA,IAAQhC,EAEX,EACEjL,GAAgB,GAAOnC,EAAAuN,WAAgB,YACvC,IAAAsC,EAAOzC,EAAA0C,gBAAmB,GAC1B1C,EAAOwC,mBAAU,GACjBxC,EAAO2C,MAAA,IAAAF,GACPzC,EAAA4C,gBAAA,EACC,GAAQ5C,EAEX,EACqEtK,GAAlD,GAAA9C,EAASuN,WAAoC,QAAArB,GAAA,CAC5D,IAAM5C,OAAAA,CAAE,CAAAxF,KAAAA,EAAW,EAAE,EAAAoI,EAIrB,CAAO+D,YAAAA,CAAS,CAAMC,YAAAA,CAAA,CAAAC,cAAAA,CAAA,QAAA1K,QAAA2K,GAAA,EAAA/Q,EAAAgR,CAAA,MAAAhR,EAAAgR,CAAA,OAAAC,IAAA,CAAAjR,EAAAkR,IAAA,CAAAlR,EAAA,OAEtByE,EAAMA,EAAA0M,IAAA,mBACwD,IAAAC,EAGxD,MAAAhL,QAAA2K,GAAA,CAAA3D,EAAAiE,GAAA,OAAAhE,GAAA,KAFFiE,EAAMC,EAINxE,EAyBAyE,MAtBAC,EANA,IAAMC,EAAA,IACoC,GADpCJ,CAAAA,EACJlQ,CAAA,IAAQsI,MAAqB,CAAA2D,EAAjB5I,IAAY,WAAK,GAAW6M,KAAxC,IAAwCA,EAAxC,OAAAA,EAAAvD,MAAA,CAEkBE,EAAA,OAAAsD,CAAAA,EAAAnQ,CAAA,IAAAsI,MAAA,CAAA2D,EAAA5I,IAAA,iBAAA8M,KAAA,IAAAA,EAAA,OAAAA,EAAAxD,MAAA,CAAqBT,EAAA,OAAAP,CAAAA,EAAAM,EAAArD,IAAA,GAAA+C,KAAA,IAAAA,EAAAA,EAAA,CAAK,IAAI,IAClD,CAGE4E,EAAKD,EAAAE,SAAA,EACL1B,IAAA/D,EACAgE,KAAAhE,EACA9C,MAAAiE,CAAQ,CAAW,EAAC,CACtBhE,OAAAgE,CAAA,MAEoB,GAClBW,EAAM,CAA4C,IAChD4D,EAAK5D,EAAA2D,SAAA,EACL1B,IAAA/D,EACAgE,KAAAhE,EACA9C,MAAAiE,CAAQ,CAAW,EAAC,CACtBhE,OAAAgE,CAAA,MACqDmE,EACnD,MAAApG,EAAA,CACAsG,cAAAA,EACFE,iBAAAA,CACF,EAAO,MAENJ,EAAAE,CAAA,CASD,IAAAG,EAAO7E,WAAAA,EAAA,GAAAvD,MAAA,CAAAjF,EAAA,KAAAiF,MAAA,CAAAsD,EAAA,QAAAK,EAAA,GAAA3D,MAAA,QAAA8H,CAAAA,EAAAnE,EAAA0E,IAAA,GAAAP,KAAA,IAAAA,EAAAA,EAAAnE,EAAA5I,IAAA,mBAAAiF,MAAA,CAAAsD,EAAA,cAAE,CAA0B7G,SAAAsL,EAASK,SAAAA,CAC9C,CAGF,IAAQ,OACN7H,GAAK,IAAO,OAEV,IAAA9D,SAAAA,CAAY,CAAA2L,SAAAA,CAAU,EAAAV,CAAA,CAAAlE,EAAA,CACtB0D,EAAMzK,EAAA2L,GACR,MACK,IAAO,OAEuC,IAAArL,EACvC,MAAML,QAAA2K,GAAA,CAAAK,EAAsBC,GAAA,OAAeW,GAAQ,EACzDC,KAAM,MAAA5F,EAAuB2F,EAAA7L,QAAA,EAC/B1B,KAAAuN,EAAAF,QAAA,CAEF,IACMI,EAAApB,EAAgBrK,GAIhB0L,EACJnF,EAAAoF,OAAA,CAAsB,yBACE,CAAAC,EAALC,EAAAC,IAAK,CAAAD,GAAAC,CAAAA,EACpBC,WAA2B,IAC3BC,EAAYxF,WAAAA,EAAK,eAAAvD,MAAA,CAAAjF,EAAA,kBAAAiF,MAAA,CAAAyI,EAAA,KAAAzI,MAAA,CAAAjF,EAAA,cACzBoM,EAAAqB,EAAAO,EACF,CACA,CAEF,GAEEzF,EACAb,EACA/K,EACAiK,EACA+B,EACAF,EACDD,EAGH,EACS/L,GACL,GAAAP,EAAAwK,OAAA,QACA/I,aAAAA,EACAmB,iBAAAA,EACAmK,oBAAAA,EACArL,gBAAAA,EACAC,mBAAAA,EACAE,cAAAA,EACAmL,iBAAAA,EACAxK,WAAAA,EACAC,cAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAf,gBAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAY,UAAAA,GACAX,UAAAA,GACAC,gBAAAA,GACAC,KAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAO,WAAAA,GACAC,cAAAA,EACAC,eAAAA,EACAuJ,sBAAAA,EACAC,yBAAAA,EACAG,YAAAA,EAEFC,YAAAA,CACE,IACAnL,EACAmB,EACAlB,EACAG,EACAW,EACAE,EACAd,EACAE,EACAC,EACAC,EACAC,EACAY,GACAX,GACAC,GACAC,EACAC,EACAC,EACAC,EACAO,GACAC,EACAwJ,EACAI,EACDC,EAGH,EA8BwB,MA9BR,GAAA5M,EACV2E,SAAQ,UACVyI,EAAM,CAA+B,IACnC2E,EAA0B,KAC5B7E,EAAAE,EAAA0C,gBAAA,GACA,EAIa,OAHb1C,EAAO4E,EAAE,CAAC,oBAAqBD,GAC/B3E,EAAO4E,EAAE,CAAC,oBAAqBD,GAE/B3E,EAAO4E,EAAA,qBAAMD,GACX,IAAO,CACP3E,EAAO6E,GAAG,CAAC,oBAAqBF,GAChC3E,EAAO6E,GAAG,CAAC,oBAAqBF,GAClC3E,EAAA6E,GAAA,qBAAAF,EACD,CACA,IAAQ3E,EAEX,EAAgB,GAAApN,EACV2E,SAAA,MAAgB,CAClB2I,GACDA,CAAAA,EAAA4E,gBAAA,CAAAxJ,KAAA,CAAAhG,CAAA,CACA,GAAiB4K,EAAU5K,EAE9B,EAAgB,GAAA1C,EACV2E,SAAA,MAAgB,CAClB2I,GACDA,CAAAA,EAAA4E,gBAAA,CAAAC,KAAA,QAAApJ,MAAA,CAAAvG,EAAA,MAAAuG,MAAA,CAAAvG,EAAA,MAAAuG,MAAA,CAAAvG,EAAA,KACA,GAAiB8K,EAAW9K,EAE/B,EACgC,GAAA5C,EAAAoF,GAAA,EAAAtE,EAAA0R,QAAA,EAAA1N,MAAAnE,GAAUwE,SAAAA,CAE3C,GC1XwC,SACvCsN,GAAQ,CACR,GAAM,CAAE3Q,gBAAAA,CAAa,CAAEiL,YAAAA,CAAG,CAAW,CAAAhM,IAErC,CAAO6K,cAAAA,CAAA,EAAAD,IACJ,OACCoB,EAAU,GAAA/M,EAAAoF,GAAA,SACVF,UAAO,iBAAA6B,MACL,CACAjF,gBAAAA,EACA6N,IAAA/D,EACA9C,MAAAiE,CAAQ,CAAW,EAAC,CACtBhE,OAAAgE,CAAA,IAGL,QCf6E,SAAvC2F,EAAApG,CAAA,EACrC,IAAMnH,SAAAA,CAAC,CAAU,CAAAmH,EAEX,CAAAzL,EAAA8R,EAAiB,IAAAvS,EAAAmD,QACpB,MACCqP,EAAa,GAAAxS,EAAauN,WAAA,GAAAlN,EAAAoS,IAAA,CAAAF,EACjB,GAAK,EAAU,GAAC9R,CAAS,CAAa,CAAAJ,EAAA,CAAAoS,CAC/C,GAKJ,MACEC,EAAa,GAAa1S,EAAAuN,WAAA,MAAAgF,EAChB,GAAY,CACpB,IAAO,CAAAlS,EAAA,CAAA+M,CAAA,IAAAuF,EAAA,CAAAlS,EACT,OAAAkS,CACC,EAEH,MACEpS,EAAO,GAAAP,EAAAwK,OAAA,MACL,EACA/J,SAAAA,EACA+R,eAAAA,EACFE,iBAAAA,CACC,IAAWjS,EAAgB+R,EAAiBE,EAE/C,EACyB,MAAQ,GAAA9S,EAAAoF,GAAA,EAAA/E,EAAAmS,QAAA,EAAA1N,MAAAnE,EAAUwE,SAAAA,CAE5C,GCzBE,SAJwC6N,EAAA1G,CAAA,EAKzC,IAAMnH,SAAAA,CAAM,EAAAmH,EACN3G,EACJ,GAAAvF,EAAYsB,MACZ,QAQI,CAAEG,aAAAA,CAAQ,CAAAO,aAAAA,CAAc,CAAAC,aAAAA,CAAgB,CAAGC,UAAAA,CAAA,CAASC,gBAAAA,CAAC,CAAAU,UAAAA,CAAA,CAAAT,KAAAA,CAAA,CAAAC,KAAAA,CAAA,EAAA1B,IAErD,CAAAyM,OAAAA,CAAQ,CAAAC,aAAAA,CAAA,CAAsCrK,eAAAA,CAAA,EAAA5C,EAAAqB,GAAAoR,EAA7B,gBAAmB,CACxC,IAAMtD,IAAAA,EAAA,EAAAC,KAAAA,EAAU,EAAO,CAAA5E,UAAAzG,MAAgB,IAAAyG,KAAA,IAAAA,SAAA,IAAAA,SAAA,OAClCiF,EAAMzC,EAAU0C,gBAAS,WACdxL,KAAAuL,EAAA,KAAdiD,EACAC,CADiCzO,CAAAA,EAClBiL,GAAA,SAAAuD,CAAAA,EAAAxO,EAAAiL,GAAA,GAAAuD,KAAA,IAAAA,EAAAA,EAAA,GAAAvD,EACjBjL,EAAAkL,IAAA,SAAAuD,CAAAA,EAAAzO,EAAAkL,IAAA,GAAAuD,KAAA,IAAAA,EAAAA,EAAA,GAAAvD,CACA,CACFnC,GAEA,EACG,MACW,GAAAzN,EAAAoF,GAAA,SACVF,UAAU,qBACV8C,SAAK,EACLrC,IAAAA,EACE,MADuByN,OACjBxO,EAAA,CACNA,EAAIyO,cAAa,GACf1N,EAAIiB,OAAO,EACZjB,EAAAiB,OAAA,CAAA5B,KAAA,GAED,GAAM,CAAAsO,MAAAA,CAAA,CAAS,CAAA1O,EAAU2O,YAAQ,CAG3BC,EAAA7K,MAAY8K,IAAM,CAAAH,GAAQI,MAC9B,IACOC,SAAAA,EAAAC,IAAO,EAAAD,EAAqBtO,IAAA,CAAAyM,KAAA,cAC/BtD,EAAa,MAAA3I,QAAA2K,GAAiB,CAAAgD,EAAS1C,GAAA,OAAA+C,GAAA,CACvC,IAAKrC,EAAMqC,EAAAC,SAAA,MACT,CAAAtC,EACD,2BAED,IAAMrL,EAAA,IAAWC,WACfR,EAAa,MAAG,IAAOC,QAAU,CAAAC,EAAAC,IAAA,CAAAI,EAC/B4N,MAAI,CAAM,MAAMnP,GAAW,CACzBA,EAAAC,MAAQ,EAAM,iBAAOD,EAAMC,MAAA,CAAA0B,MAAA,CAC7BT,EAAOlB,EAAAC,MAAA,CAAA0B,MAAA,EAENR,EAAA,oCAEH,EACFI,EAAAK,aAAA,CAAAgL,EACA,GAED,OAAO5L,CAGZ,GAAA8N,MAAM,CAAAM,SACR,OAAA/Q,EAAAuL,EACA,EACQ,MADoByF,UACpBrP,EAAe,CACrB,IAAIC,EAAOD,EAAQC,MAAK,CAA2C,GACjEA,UAAAA,EAAAqP,QAAA,EAAArP,aAAAA,EAAAqP,QAAA,EAEkC,GAClCtP,EAAAuP,OAAc,EAAGvP,EAAAwP,OAAA,QACfxP,EAAKyP,GAAA,MACH,IAAkB,GAChBzP,EAAA0P,MAAA,CACF,MASG,CARD,GAAM1P,EAAA2P,QAAc,EACpB3P,EAAAyO,cAAA,GACA5Q,IACF,MAAO,CAKJ,EAHD4Q,cAAA,GACA7Q,IACD,MACE,KACH,IAAoC,GAClCoC,EAAA0P,MAAA,EAAA1P,EAAA2P,QAAA,CACF,MAKJ,CAHM3P,EAAAyO,cAAA,GACA5Q,IACD,MAEN,CACD,GACEmC,CAAAA,EAAA0P,MAAA,GAAA1P,EAAAuP,OAAA,GAAAvP,EAAAwP,OAAA,GAAAxP,EAAA2P,QAAA,CAEe,OACf3P,EAAKyP,GAAA,EACL,IAAK,gBAAU,SAEbzP,EAAMyO,cAAA,GACN,MAAM9Q,IACR,UACkB,YAEhBqC,EAAMyO,cAAM,SAAEJ,EAAO,CAAErD,KAAA,EACvB,GACF,UACmB,aAEjBhL,EAAMyO,cAAM,SAAEJ,EAAM,CAAErD,KAAA,CACtB,GACF,UACgB,UAEdhL,EAAMyO,cAAM,SAAEJ,EAAM,CAAEtD,IAAA,EACtB,GACF,UACkB,YAEhB/K,EAAMyO,cAAM,SAAEJ,EAAK,CAAEtD,IAAA,CACrB,GACF,UACU,IAER/K,EAAMyO,cAAA,GACN,MAAM/Q,IACR,UACU,IAERsC,EAAMyO,cAAA,GACN,MAAMjR,IACR,UACU,IAERwC,EAAMyO,cAAA,GACN,MAAMhR,IACR,UACU,IAEA,aAANR,IACA+C,EAAAyO,cAAmB,GACpBjQ,EAAA,KAEH,UAEE,IACQ,UAANvB,IACA+C,EAAAyO,cAAoB,GACrBjQ,EAAA,IAGP,CAxDE,CA3BA,EAqFD+B,SAAAA,CAGN,GCjKsC,SACrCqP,GAAQ,CAER,IAAAxR,iBAAAA,CACE,CAAAmK,oBAAAA,CAAC,CAAAH,YAAAA,CAAA,EAAAjM,IAAA,MAAc,GAAAf,EAAAiF,IAAA,SAAAC,UAAA,eAAAC,SAAA,CAEN,GAAAnF,EAAAoF,GAAA,YACLC,KAAA,SACA,gBAAerC,UAAAA,EAAA,GAAAkE,KAAAA,CAAA,CACb,UACFiG,EAAA,UACDhI,SAAA,OAGA,GACE6H,EACM,GAAAhN,EAAAoF,GAAA,YACLC,KAAA,SACA,gBAAerC,aAAAA,EAAA,GAAAkE,KAAAA,CAAA,CACb,UACFiG,EAAA,aACDhI,SAGK,oBAGb,KAAAsP,EAAAhV,EAAA,MCtBD,GAAM,CAAE0M,oBAAcuI,CAAqC,EAAA9K,MAG5C,CAAA+K,aAAAA,CAAS,CAAAC,YAAAA,CAAkB,CAAAC,cAAAA,CAAA,CAAAzI,UAAA0I,CAAA,EAAAJ,EAAA,SAkGvBK,GAAA,CAjGjB,IAAAC,EAEEC,EACAC,EAUF,GAAM,CAAEC,cAAAA,CAAA,CAAAC,iBAAAA,CAAuB,CAAA1I,kBAAAA,CAA0B,CAAG2I,qBAAAA,CAAQ,CAAAC,aAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,oBAAAA,CAAA,CAAA/I,YAAAA,CAAA,CAAAgJ,qBAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAAC,mBAAAA,CAAA,EAAA5L,IAC9D,CAAA4C,sBAAAA,CAAe,CAAAC,yBAAAA,CAAU,CAAY,CAAA7L,IACrC8L,EAAciI,CAAa,CAAArI,EAAsB,CACjDK,EAAAD,CAAe,CAAAF,EAAoC,CAEzDhL,EACE,GAAAvB,EAAAsB,MAAA,MAAC,QAAc,GAAA1B,EAAAiF,IAAA,SAAAC,UAAA,UAAAC,SAAA,CACR,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,QAAAC,SAAA,CACE,GAAAnF,EAAAoF,GAAA,WAAAK,QAAA,cAAcN,SAAA,UAExB,GAAAnF,EAAAiF,IAAA,YACHK,GAAA,cACAR,MAAAqQ,EASI,SAAAvQ,EAAA,KARFgR,EAAgCC,EAkB9BC,EAhBF,IAAMC,EAAAnR,EAAmBC,MAAM,CAAAmR,eAAY,IAAAD,UAAA,CACrCE,EAAgBrR,EAAAC,MAAW,CAAAC,KAAO,CACnC,CAAAoR,UAAAA,CAAW,EAAAH,EAAAI,OAAA,IACd,CAAAD,EACD,wCAKD,IAAAE,EAAA,KAA0B,GAAAR,CAAAA,EAAAjB,CAAA,CAAAsB,EAAA,GAAAL,KAAA,IAAAA,EAAA,OAAAA,EAAAS,QAAA,CAAAf,EAAA,WAAAO,CAAAA,EAAAjB,CAAA,CAAAqB,EAAA,GAAAJ,KAAA,IAAAA,EAAA,OAAAA,EAAAQ,QAAA,CAAAf,EAAA,MAE1BG,EAAmB,IAAK,EACxBE,EAAA,IACAN,EAAiBa,GACjBd,EAAAa,GACArJ,EAAsB,GAAAwJ,IAEpBb,EAAA,IAAoB,GAApBO,CAAAA,EAAoBjB,CAAA,CAAAoB,EAAA,GAAAH,KAAA,IAAAA,EAAAA,EAAA,MACrBN,EAAA,WAEH,EAAArQ,SAAA,CAEgB,GAAAnF,EAAAiF,IAAA,cAAUqR,MAAA,UAAgB,2BAAAnR,SAAA,CAC1B,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,QAAQK,SAAA,uBACR,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,QAAQK,SAAA,wBACR,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,QAAQK,SAAA,uBACR,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,UAAUK,SAAA,yBACV,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,UAAUK,SAAA,0BACV,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,UAAUK,SAAA,yBACV,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,WAAWK,SAAA,oBACX,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,WAAWK,SAAA,qBACX,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,WAAWK,SAAA,uBAEX,GAAAnF,EAAAiF,IAAA,cAAUqR,MAAA,UAAgB,2BAAAnR,SAAA,CAC1B,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,OAAOK,SAAA,kBACP,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,WAAWK,SAAA,aACX,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,mBAAmBK,SAAA,qBACnB,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,SAASK,SAAA,gBAET,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,SAASK,SAAA,YACT,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,aAAaK,SAAA,eACb,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,MAAMK,SAAA,kBACN,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,UAAUK,SAAA,qBACV,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,SAASK,SAAA,WACT,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,SAASK,SAAA,gBACT,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,YAAYK,SAAA,6BAI3B,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,QAAAC,SAAA,CACE,GAAAnF,EAAAoF,GAAA,WAAAK,QAAA,aAAaN,SAAA,SACvB,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,UAAAC,SAAA,CAER,GAAAnF,EAAAiF,IAAA,YACHK,GAAA,aACAR,MAAAwQ,MAAAA,EAA2BA,EAAA,GACnB,MADmB9P,SACnBZ,EAAa,KAEnB2R,EADa,IAETR,EAAAnR,EAAAC,MAAA,CAAAmR,eAAA,IAAAD,UAAA,CAEJS,EAAgB5R,EAAMC,MAAO,CAAAC,KAAK,EAAI,IAAI,GAAJyR,CAAAA,EAAIR,EAAAI,OAAA,CAAAK,QAAA,GAAAD,KAAA,IAAAA,EAAAA,EAAA,KAC1ChB,EAAA3Q,EAAoBC,MAAA,CAAAC,KAAA,QACtB0Q,EAAAgB,EAAA,EAAArR,SAAA,CAEc,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,GAAGK,SAAA,gBAChB,GACCuH,WAAAA,EAAA,GAAA1M,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SAAA,CACkB,GAAAnF,EAAAoF,GAAA,cAAgBkR,MAAA,gBAAe,iBAC5C,UAAiDnR,SAChD,IACG,GADH6P,CAAAA,EACEL,CAAC,CAAAlI,EAAA,GAAAuI,KAAA,IAAAA,EAAA,OAAAA,EAAAlE,GAAA,IAAyB,GAAA9Q,EAAAoF,GAAA,YAAAN,MAAAZ,EAAbiB,SAAAjB,CAIjB,EAAAA,GAAA,GAEc,GAAAlE,EAAAoF,GAAA,cAAekR,MAAA,eAAe,iBAC3C,SAAgDnR,SAC/C,IACG,GADH8P,CAAAA,EACEL,CAAC,CAAAnI,EAAA,GAAAwI,KAAA,IAAAA,EAAA,OAAAA,EAAAnE,GAAA,IAAyB,GAAA9Q,EAAAoF,GAAA,YAAAN,MAAAZ,EAAbiB,SAAAjB,CAIjB,EAAAA,GAAA,GAGF,GACH,KACCwI,WAAAA,EAAA,GAAA1M,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SACG,CACE0P,CAAe,CAAApI,EAAA,IAAAzM,EAAAoF,GAAA,cAAgBkR,MAAA,gBAAe,iBAC7C,UAACnR,SAA2B,CAAC,EAAAnF,EAAYoF,GAAA,YAAAN,MAAA+P,CAAE,CAAApI,EAAA,CAAAtH,SAAA,WAG9C,QACE,KAAe,GAAf+P,CAAAA,EAAeN,CAAA,CAAAnI,EAAA,GAAAyI,KAAA,IAAAA,EAAA,OAAAA,EAAA3Q,MAAA,KAAAvE,EAAAoF,GAAA,cAAekR,MAAA,eAAe,iBAC3C,SACEnR,SAAkByP,CAAO,CAAAnI,EAAA,CAAAqE,GAAA,OAAA9Q,EAAAoF,GAAA,YAAAN,MAAAZ,EAAbiB,SAAAjB,CAKf,EAAIA,GAAA,QAER,GAAI,QAGH,GAAAlE,EAAAoF,GAAA,YACLC,KAAA,SACA,aAAM,YACNsB,MAAA,cACM,UACFhF,EAAaiF,OAAO,EACrBjF,EAAAiF,OAAA,CAAAC,KAAA,EACH,EAEoB1B,SAAQ,GAAAnF,EAAAoF,GAAA,EAAAqP,EAAAgC,GAAA,EAAA1P,MAAE,CAAaC,SAAA,QAGtC,GAAAhH,EAAAoF,GAAA,WACLO,IAAAhE,EACQ,MADmB6D,SACnBZ,EAAW,CAA+C,IAAAgB,EAC5C,UAAAC,QAAA,CAAAC,EAAAC,IAAA,CAAlB,IAAAC,EACA,IAAIC,EAAW,OAAAD,CAAAA,EAAApB,EAAAC,MAAA,CAAAqB,KAAA,GAAAF,KAAA,IAAAA,EAAA,OAAAA,CAAA,OACbC,EAAM,CACN,IAAAE,EAAO,IAAAC,WAAoCD,EAAAE,gBACjC,YAAR,IAAAC,EACFR,EAAA,OAAAQ,CAAAA,EAAA1B,EAAAC,MAAA,GAAAyB,KAAA,IAAAA,EAAA,OAAAA,EAAAC,MAAA,CACA,GACFJ,EAAOK,aAAA,CAAAP,EAAA,MAENF,EAAA,iCACH,GAEAwP,EAAA,IAAiB,EAAAG,EAAe,CAAgB,CAAA5I,EAAA5I,IAAA,EAAA0B,CAClD,EACA,EACAP,KAAA,OACAoB,OAAM,kBAAAC,OAAA,aAMjB,CCjLD,GAAM,CAAEyF,oBAASuK,CAAe,EAAA9M,MAC1B,CAAAwC,UAAAuK,CAAgB,CAAA9B,cAAA+B,CAAA,EAAAF,EAEfG,EAAS,0CAYW,SAZMC,EAE/BxK,CAAA,CAAW,CAWX,IAAMT,SAAAA,CAAA,CAAAY,YAAAA,CAAe,CAAAC,kBAAAA,CAAU,CAAA4I,aAAAA,CAAY,CAAAyB,iBAAAA,CAAA,EAAAzK,EAC3CO,EAAQ8J,CAAA,CAAAlK,EAAA,QACNC,GAAK,IACH,SAAQ,OACNqK,GAAK,IACH,UAAO,MACL,CACFC,KAAA,GAAA7N,MAAA,CAAA0C,EAAA,cAAA1C,MAAA,CAAAmM,EAAA,KAAAnM,MAAA,CAAAsD,EAAA,OACF,CAAK,KACH,SAAO,MAAE,CAA2DuK,KAAA,GAAA7N,MAAA,CAAA0N,EAAA,KAAA1N,MAAA,CAAAmM,EAAA,KAAAnM,MAAA,CAAAsD,EAAA,OACxE,CACA,CACF,KAAK,KACH,SAIO,OACHI,EAAIoK,MAAa,EAAAC,EAAApK,IAAA,IACfA,EAAQ,KAGFmE,EAMFkG,EATI,OACNJ,GAAK,IACH,UAEI,KAFkCjK,EAElCsK,UAAA,EAEHF,CAAAA,CAAA,CAAApK,EAAA5I,IAAA,KAAAiF,MAAA,CAAA0C,EAAA,cAAA1C,MAAA,QAAA8H,CAAAA,EAAAnE,EAAA0E,IAAA,GAAAP,KAAA,IAAAA,EAAAA,EAAAnE,EAAA5I,IAAA,UAEH,KAAK,cAMHgT,CAAM,CAAApK,EAAA5I,IAAA,KAAAiF,MAAA,CAAA0N,EAAA,KAAA1N,MAAA,CAAAmM,EAAA,KAAAnM,MAAA,QAAAgO,CAAAA,EAAArK,EAAA0E,IAAA,GAAA2F,KAAA,IAAAA,EAAAA,EAAArK,EAAA5I,IAAA,QAEX,CACD,QAEDgT,CAEP,KACA,CACD,QAED,CAa+E,SAAvCG,EAAA/K,CAAA,EACtC,IAAMnH,SAAAA,CAAC,EAAAmH,EACD,CAAC6I,EAAAC,EAAmB,IAAAhV,EAAwBmD,QAAA,WAC5C,CAACmJ,EAAc2I,EAAmB,IAAAjV,EACtCmD,QAAA,YAEI,CAAC+R,EAAAC,EAAkB,IAAAnV,EAAuBmD,QAAA,iBAG1C,CAACwT,EAAAvB,EAAmB,CAAqB,GAAGpV,EAAAmD,QAAA,aAG5C,CAAC+T,EAAiB7B,EAAsB,IAAArV,EAAAmD,QAAS,MAAK,EACtD,CAAAgU,EAAe5B,EAAW,IAAAvV,EAAAmD,QAAA,MAC1B,CAAAsI,SAAAA,CAAA,EAAcF,IACdc,EAAA0I,YAAAA,EAEJ,QACAA,CAAA,CAGIqC,EAxBN,GAAArO,MAAA,CAwBsB0C,EAxBtB,KAAA1C,MAAA,CAwB0CsD,GAxB1CtD,MAAA,CAAAmO,EAAA,mBA0BqB,CAAAJ,EACfxB,EAAA,IAAAtV,EAAAmD,QAAA,MAAAuT,EAAA,CACAjL,SAAAA,EACAY,YAAAA,EACAC,kBAAAA,EACA4I,aAAAA,EACFyB,iBAAAA,CAGJ,IAEqBU,EACf,GAAArX,EAAAwK,OAAA,MAAAkM,EAAA,CACAjL,SAAAA,EACAY,YAAAA,EACAC,kBAAAA,EACA4I,aAAAsB,CAAkB,CAAAnK,EAAA,CAEtBsK,iBAAA,SAAC,IAAatK,EAAUZ,EAAkBa,EAG5C,EACE/L,EAAO,GAAAP,EAAAwK,OAAA,MACL,EACAuK,cAAAA,EACAC,iBAAAA,EACA1I,kBAAAA,EACA2I,qBAAAA,EACA5I,YAAAA,EACA+K,iBAAAA,EACAD,gBAAAA,EACA5B,mBAAAA,EACAL,aAAAA,EACAC,gBAAAA,EACAwB,iBAAAA,EACAvB,oBAAAA,EACA8B,kBAAAA,EACA7B,qBAAAA,EACAyB,cAAAA,EACAxB,iBAAAA,EACF+B,qBAAAA,CACC,IAEDtC,EACAC,EACA1I,EACA2I,EACA5I,EACA+K,EACAD,EACA5B,EACAL,EACAC,EACAwB,EACAvB,EACA8B,EACA7B,EACAyB,EACAxB,EACD+B,EAED,EAqB0B,MArBV,GAAArX,EACV2E,SAAA,MAAc,CAChBuQ,GACmBI,EACfoB,EAAA,CACAjL,SAAAA,EACAY,YAAAA,EACAC,kBAAAA,EACA4I,aAAAA,EACFyB,iBAAAA,CAEH,GACA,GAEDlL,EACAY,EACAC,EACA4I,EACDyB,EAED,EACkC,GAAA/W,EAAAoF,GAAA,EAAA0E,EAAA0I,QAAA,EAAA1N,MAAAnE,EAC7BwE,SAAAA,CAGN,OAAAuS,EAAAjY,EAAA,MAAAkY,EAAAlY,EAAAU,CAAA,CAAAuX,GClLD,IAAAE,EAAmBxX,EAAcE,aAAA,OAIQ,SACvCuX,IAAgB,CAChB,IAAKlX,EAAS,GAAAP,EAAAQ,UAAA,EAAAgX,GAAA,GACZ,CAAAjX,EACD,8CAEF,OAAAA,CAAA,CAR6BiX,EAAArX,WAAA,sBCO9B,IAAAuX,GAAY1X,EAAcE,aAAA,OAIQ,SAChCyX,IAAM,CACN,IAAKpX,EAAS,GAAAP,EAAAQ,UAAA,EAAAkX,IAAA,GACZ,CAAAnX,EACD,uCAEF,OAAAA,CAAA,CARsBmX,GAAAvX,WAAA,eAQtB,IAAAyX,GAAAvY,EAAA,MCWE,SAViBwY,GACV3L,CACR,EASA,IAAM4L,SAAAA,CAAE,CAAApL,YAAAA,CAAgB,CAAAqL,YAAAA,CAAA,CAAAvS,SAAAA,CAAA,EAAc0G,EAChC,CAAE8L,YAAAA,CAAU,CAAG,IAAAJ,GAAW1P,CAAA,IAEhC,CAAAuD,SAAAA,CAAA,CAAS,CAACF,IAAM,GAAAvL,EACV2E,SAAQ,MAAK,CAEjB,IAAAsT,EAAM,GACJC,EAAK,SAAe,CAAoB,GACtC,CAAAxL,GAAIA,EAAgBpG,MAAA,CAClB,6BAAAyR,IAGAD,EAASK,YAAA,UAAwCL,EAACM,oBAAA,CAAAC,kBAAA,EAAG,EAAG,EAAG,EAAE,EAC9D,OAED,CASA,GAAI,CAAAC,UAAAA,CAAa,CAAAC,YAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAAC,gBAAAA,EAAe,EAAS,CAAA7L,eAAAA,EAAW,EAAAC,gBAAAA,EAAA,GAAAJ,EACpDiM,EAAQnT,MAAAA,EAAAA,EAAA,GAAAuD,MAAA,CAAA0C,EAAA,qBACNsM,GAAK,IACH,mBACES,GACDV,EAAAM,oBAAA,CAAAC,kBAAA,CAAAG,GAECF,GACDR,EAAAK,YAAA,CAAAG,GAECC,GACDT,EAAAc,cAAA,CAAAL,GAECE,GACDX,EAAAe,iBAAA,CAAAJ,GAEH,KAAK,KACH,2BACAX,EAASM,oBAAoB,CAACU,iBAAA,CAAkBjM,GAChDiL,EAAIM,oBAAwB,CAAAW,kBAAoB,CAAAjM,GACrB,IAAzBD,GAAgBC,IAAAA,GACjB6L,CAAAA,EAAA,GAAA5P,MAAA,CAAA0C,EAAA,cAEL,CACA,IAAKuN,EAAO,MAAAhB,EAAAiB,aAAA,CAAAN,EACV,EAAAV,IACAH,EAAIM,oBAAgB,CAAAL,EAAsB,CAAAmB,UAAA,CAAAF,GAC/B,qBAATjB,GAAoCW,GACrCZ,EAAAY,eAAA,CAAAQ,UAAA,CAAAF,GAGP,GAIa,OAAbd,IACE,KACFD,EAAA,EACC,IAAWxM,EAAauM,EAAUF,EAAapL,EAAaqL,EAASvS,EAC1E,CAOe,CAA4D,SAA1C2T,GAAEjN,CAAU,MAE3CkN,EADA,IAAMtB,SAAAA,CAAE,CAAApL,YAAAA,CAAkB,EAAOR,EAE/B,CAAAmN,cAAAA,CAAA,EAAA1B,KAEF,CAAA3G,cAAAA,CAAW,CAAAE,iBAAAA,CAAA,SAAAkI,CAAAA,EAAAC,EAAAvB,EAAAhU,IAAA,IAAAsV,KAAA,IAAAA,EAAAA,EAAA,GAcZ,OAdYvB,GACT,CACAC,SAAAA,EACApL,YAAAA,EACAqL,YAAU,mBACZvS,SAAAwL,CACA,GAAW6G,GACT,CACAC,SAAAA,EACApL,YAAAA,EACAqL,YAAU,2BACZvS,SAAA0L,CAEA,GACD,KC5HD,GAAM,CAAEnF,oBAASuN,EAAK,EAAA9P,MAEP,CAAAwC,UAASuN,EAAY,EAAAD,GAAA,SAClCE,IAAQ,CACR,GAAM,CAAEnN,YAAAA,CAAU,EAAA1C,IACZ,CAAA8P,MAAAA,CAAA,KAAqC7B,GAAU1P,CAAA,IAErDuE,EACE8M,EAAA,CAAAlN,EAAA,OACS,GAAAzM,EAAeoF,GAAA,EAAApF,EAAgB0F,QAAA,EAAAP,SAElC0U,EAAAzN,SAAA,CAAA0E,GAAA,EAAAoH,EAAA4B,IAAA,CADF,IAAAC,EAGA,IAAAjN,EAAA,IACW,GAATiN,CAAAA,EAAClN,EAAQmN,IAAA,IAAAlN,EAAAmN,KAAA,GAAAH,EAAA,GAAAC,KAAA,IAAAA,EAAAA,EAAAlN,CAAA,CAAAiN,EAAA,OAEG,GAAA9Z,EAAAoF,GAAA,EAAAmU,GAAA,CACVrB,SAAAA,EAFKpL,YAAaA,CAKxB,EAAAoL,EAAAhU,IAAA,GAGL,GCxBwD,IAAAgW,GAAAvC,IAAA,IAAA9R,QAAA2K,GAAA,EAAA/Q,EAAAgR,CAAA,MAAAhR,EAAAgR,CAAA,MAAAhR,EAAAgR,CAAA,QAAAC,IAAA,CAAAjR,EAAAkR,IAAA,CAAAlR,EAAA,MAAA0a,kBAAA,CAAAC,QAAA,UAAcC,IAAA,EAEvE,GAEM,CAAElO,oBAAoBmO,EAAmB,EAAA1Q,MAEhC,CAAA2Q,gBAAAA,EAAS,CAAgB,CAAAD,GAAA,SAmBpBE,IAAA,CAlBlB,IAAAC,EAEEC,EAKF,GAAM,CAAEvF,cAAAA,CAAA,CAAAqC,iBAAAA,CAAwB,CAAA9K,kBAAAA,CAAc,CAAA4K,kBAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAAxN,IAE9C,CAAA4Q,oBAAAA,CACE,EAAA9C,KAAC,MACW,GAAA7X,EAAAoF,GAAA,EAAA8U,GAAA,CACVU,SAAApD,EACAmD,oBAAeA,EACfE,cAAAvD,EACAC,gBACEA,EAEFuD,YAAApO,WAAAA,EAAc,oBAAgBxF,KAAAA,CAAA,CAC9B6T,aAAa,IAA8B,GAA9BN,CAAAA,EAAAF,EAAe,CAACpF,EAAc,GAA9BsF,KAAA,IAAAA,EAAA,OAAAA,EAAA5V,MAAmC,CAAAmW,YAEhD,IAAU,GAAVN,CAAAA,EAACH,EAAS,CAAApF,EAAA,GAAAuF,KAAA,IAAAA,EAAA,OAAAA,EAAAO,GAAA,CAAA9V,SAAA,GAAAnF,EAAAoF,GAAA,EAAAwU,GAAA,GAGf,GCnC6C,SAC5CsB,IAAQ,CAER,IAAAC,oBAAAA,CACE,CAAAC,uBAAAA,CAAA,EAAAvD,KAAA,SAAA7X,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SAAA,CACiB,GAAAnF,EAAAoF,GAAA,WAAAK,QAAA,eAAeN,SAAA,gBAEzB,GAAAnF,EAAAiF,IAAA,YACHK,GAAA,eACAR,MAAAqW,MAAAA,EAAqBA,EAAA,GACnB,SAAAvW,EAAA,CACFwW,EAAAxW,EAAAC,MAAA,CAAAC,KAAA,SAAAK,SAAA,CAEc,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,GAAGK,SAAA,YACH,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,0BAA0BK,SAAA,kBAC1B,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,0BAA0BK,SAAA,qBAC1B,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,qCAAqCK,SAAA,yBAGrC,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,gBAAgBK,SAAA,WAChB,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,0BAA0BK,SAAA,kBAC1B,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,8CAA8CK,SAAA,6BAG9C,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,gCAAgCK,SAAA,gBAChC,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,qBAAqBK,SAAA,gBACrB,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,4BAA4BK,SAAA,mBAC5B,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,0BAA0BK,SAAA,0BAI/C,CC3BD,GAAM,CAAEgH,oBAAYkP,EAA0C,CAC5D,CAAAzR,MAEa,CAAA0R,WAAAA,EAAS,CAAAC,gBAAAA,EAAoB,CAAAC,wBAAAA,EAAA,EAAAH,GAAA,SAC1CI,IAEE,KAOFC,EAFc,GAKN,CAAAjP,YAAAA,CAAA,CAAAC,kBAAAA,CAAA,CAAA4K,kBAAAA,CAAA,CAAA7B,qBAAAA,CAAA,CAAA8B,gBAAAA,CAAA,CAAA5B,mBAAAA,CAAA,EAAA5L,IAFA4R,EACA,GAAAvb,EAAAwK,OAAsB,MAAW,IACjC8B,WAAAA,EAAA4O,GAAWM,MAAY,OAE7B,OAAAF,CAAAA,EAAAJ,EAAA,CAAA7O,EAAA,GAAAiP,KAAA,IAAAA,EAAAA,EAAA,GAAC,EAAajP,EAAkBC,EAGlC,EACE,SAAA1M,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SAAA,CACS,GAAAnF,EAAAoF,GAAA,WAAAD,SAAA,cACF,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,UAAAC,SAAA,CAEJ,GAAAnF,EAAAiF,IAAA,YACPH,MAAAwS,MAAAA,EAAqBA,EAAA,GACnB,SAAA1S,EAAA,CACA6Q,EAAmB7Q,EAAKC,MAAA,CAAAC,KAAA,QAC1B6Q,EAAA,KAAAxQ,SAAA,CAEc,GAAAnF,EAAAoF,GAAA,YAAAN,MAAA,GAAGK,SAAA,MAChB,GAAqCwW,EAElC7K,GAAA,SAAA+K,EADFC,EAGA,IAAAxF,EAAA,IACG,GADHwF,CAAAA,EACG,OAAAD,CAAAA,EAAAL,EAAA,CAAA/O,EAAA,GAAAoP,KAAA,IAAAA,EAAA,OAAAA,CAAA,CAAAhB,EAAA,GAAAiB,KAAA,IAAAA,EAAAA,EAAAP,EAAA,CAAAV,EAAA,OAAkC,GAAA7a,EAAAoF,GAAA,YAAAN,MAAA+V,EAAtB1V,SAAAmR,MAAAA,EAAAA,EAAAuE,CAAA,EAIjBA,EAAA,MAGK,GAAA7a,EAAAoF,GAAA,YACLC,KAAA,SACAmC,SAAS,CAAA8P,EACP,UACF3B,EAAA,IAAA4B,EAAA,EAEqEpS,SAAAoS,GAAA,CAAAD,EAAA,GAAAtX,EAAAoF,GAAA,EAAA9D,EAAAya,GAAA,QAAA/b,EAAAoF,GAAA,EAAA9D,EAAA0a,GAAA,YAK9E,CCtDE,SAJyCC,GAAA3P,CAAA,EAK1C,IAAMnH,SAAAA,CAAC,EAAAmH,EAGD,CAAA6O,EAAeC,EAAW,IAAAhb,EAAAmD,QAAA,QAE1B,CAAAsI,SAAAA,CAAU,EAAAF,IACdhL,EAAM,GAAAP,EAAAwK,OAAsB,OAG5B,IAAA+P,EAAOQ,EAAA,GAAAhS,MAAA,CAAA0C,EAAA,KAAA1C,MAAA,CAAAgS,GAAA,WACL,CACAA,oBAAAA,EACAC,uBAAAA,EACFT,oBAAAA,CACC,IAAW9O,EAAqBsP,EAAuBC,EAE1D,EAC8B,MAAQ,GAAApb,EAAAoF,GAAA,EAAAwS,EAAApF,QAAA,EAAA1N,MAAAnE,EACjCwE,SAAAA,CAGN,GC3B2E,SAAvC+W,GAAqC5P,CAArC,EACnC,IAAMnH,SAAAA,CAAC,EAAAmH,EAED,CAAA6P,EAAUC,EACP,IAAAhc,EAAAmD,QAAA,MAAA8Y,EACL,GAAAjc,EAAcwK,OAAA,MAAsB,EAAwB0R,cAC1DC,CAAkB,CAAAC,CAAkB,EAAAJ,EAC3B,GACF,EACH,GAACD,CAAe,CAClB,CAAAI,EAAA,CAAAC,CACF,GAEF,EAA8DC,iBAC5DF,CAAkB,CAAAnL,CAAkB,EAAAgL,EAC3B,GACF,EACH,GAACD,CAAe,EAAAI,EACX,EACH,GAAAJ,CAAA,CAAAI,EAAA,CACFnL,cAAAA,CACF,CACF,GAEF,EAAoEsL,oBACjDH,CAAC,CAAAjL,CAAkB,EAAA8K,EAC3B,GACF,EACH,GAACD,CAAe,EAAAI,EACX,EACH,GAAAJ,CAAA,CAAAI,EAAA,CACFjL,iBAAAA,CACF,CACF,GAGJ,CAGF,GAAM,IACJ3Q,EAAO,GAAAP,EAAAwK,OAAA,MACL,EACAuR,cAAAA,EAAoC1C,cAAAA,GAEpC0C,CAAA,CAAAI,EAAA,CACuCI,iBAAAA,GAEvCR,CAAA,CAAAI,EAAA,CAAAnL,aAAA,CAC0CwL,oBAAAA,GAE1CT,CAAA,CAAAI,EAAA,CAAAjL,gBAAA,CAEF,GAAA+K,CAAA,CACC,GAAgBF,EAAQE,EAE3B,EACuB,MAAQ,GAAArc,EAAAoF,GAAA,EAAA0S,GAAAtF,QAAA,EAAA1N,MAAAnE,EAAUwE,SAAAA,CAE1C,GCtDD,GAAM,CAAEgH,oBAAS0Q,EAAK,EAAAjT,MAEP,CAAAwC,UAAS0Q,EAAmB,EAAAD,GAAA,SACzCE,IAAqB,KAIrBC,EAHA,GAAM,CAAEvQ,YAAAA,CAAA,EAAA1C,IACF,CAAA4C,sBAAAA,CAAqC,CAAAC,yBAAAA,CAAU,EAAY7L,IAYtD8L,EAAAiQ,EAAA,CAAArQ,EAAA,CATR,MACQ,GAAAzM,EAAAoF,GAAA,YACPN,MAAA6H,EACE,SAAA/H,EAAA,CACFgI,EAAAqQ,SAAArY,EAAAC,MAAA,CAAAC,KAAA,OAIKK,SAA8B0H,EAAOiE,GAAA,EAAAhE,EAAAgN,IAAAhN,EAAA,GAAA9M,EAAAoF,GAAA,YAAAN,MAAAgV,EAAzB3U,SAAA,IAGP,GAHmB6X,CAAAA,EAGnBlQ,EAAAwJ,KAAA,GAAA0G,KAAA,IAAAA,EAAAA,EAAAlQ,EAAA5I,IAAA,EAAA4I,EAAA5I,IAAA,OAIf,GCOe,SANegZ,GAC7B5Q,CACA,EAKA,IAAM7L,SAAAA,CAAA,CAAA+E,SAAAA,CAAmB,CAAA2X,aAAAA,CAAA,CAAiCpQ,YAAAA,CAAI,CAAAqQ,mBAAAA,EAAA,IAAA9Q,EACxD+Q,EAAmB,GAAGjd,EAAAsB,MAAA,MAAQ,EAC9B,CAAA8L,EAAE8P,EAAc,CAAG,GAAAld,EAAQmD,QAAA,QAC3B,CAAE1B,aAAAA,CAAA,CAAa,CAAEd,IACjB,CAAE6K,cAAAA,CAAA,CAAc,CAAED,IAClB,CAACiH,eAAAA,CAAe,CAAAE,iBAAAA,CAAkB,EAAAtS,IAClC,CAAA2C,EAAAC,EAAkB,CAAM,GAAAhD,EAAAmD,QAAA,EAAA6Z,GACxBG,EAAe,GAAAnd,EAAAsB,MAAO,IACtB8b,EAAc,GAAApd,EAAAsB,MAAe,EAAG,IAChC,CAAC+b,EAAaC,EAAe,CAAG,GAAAtd,EAAAmD,QAAA,EAAyB,IAAM,EAAE,EAEjE,CAAAoa,EAAUC,EAAkB,CAAG,GAAAxd,EAAAmD,QAAA,UAC/Bb,EAAU+a,EAAYlZ,MAAM,CAAG,EAE/B5B,EAAAgb,EAAwCpZ,MAAA,GAC5CsZ,EAAM,GAAAzd,EAAeuN,WAAgB,KAAO,CAC5C,IAAIkQ,EAAcN,EAAA3W,OAAA,CAChBiX,GACDA,EAAArQ,EAGH,MACEhL,EAAK,GAAApC,EAAQuN,WAAA,eACXH,GAGAiQ,EAAOlZ,MAAA,CAAc,GACrB,IAAAuZ,EAAoBC,EAAQ,CAAAN,EAAAO,KAAA,IAC5BR,CAAAA,EAAO5W,OAAA,IACP4G,EAAOyQ,iBAAK,IACZzQ,EAAO0Q,KAAA,GAAiC1Q,EACtC2Q,YAAO,CAASL,EAAA,KAChBtQ,EAAA4Q,SAAa,GACbZ,EAAO5W,OAAA,IACT4G,EAAAyQ,iBAAA,GACA,GACAP,EAAe,GAAiBD,EAAAO,KAAA,QAAAJ,EAAC,IAAAG,KAA6BJ,EAC/D,CACA,CAbD,EAaC,CAASnQ,EAAYiQ,EAExB,EAAgB,GAAArd,EACd2E,SAAY,OACZsZ,QAAQC,GAAG,CAAC,QAASb,GACpBY,QAAAC,GAAA,SAAAX,EAAA,GAAcF,EAAYE,EAE7B,EAA+B,IAC7Blb,EAAK,GAAArC,EAAQuN,WAAA,UACXH,GAGAmQ,EAAMpZ,MAAY,IAClB,IAAAga,EAAaZ,CAAe,IAC5BH,EAAO5W,OAAA,IACP4G,EAAOyQ,iBAAK,IACZzQ,EAAO0Q,KAAA,GAA8B1Q,EACnC2Q,YAAO,CAASI,EAAA,KAChB/Q,EAAA4Q,SAAa,GACbZ,EAAO5W,OAAA,IACT4G,EAAAyQ,iBAAA,GACA,GAAgCP,EAAI,OAAaD,EAAUc,EAC3D,EACDX,EAAA,GAAAD,EAAAK,KAAA,IACA,CAbD,EAaC,CAASxQ,EAAYmQ,EAExB,EAAgB,GAAAvd,EACd2E,SAAA,EAAgB,KACfwY,EAAA3W,OAAA,CAAApB,CAAA,GAAUA,EAEb,EAEA,IAAAgZ,EAAA3c,IAAgBpB,EAiJb,MAjJa,GAAAL,EACd2E,SAAM,EAAU,SAWhB0Z,EA9G0B5U,EAC1BA,MAAA,CAAA6U,MAAA,CAAAC,SAAyB,CAAAjP,GAAA,EACzBkP,mBAAa,GACb3V,YAAY,UACZ4V,WAAA,EACAC,YAAa,SACbC,YAAA,UACAC,kBAAa,UACbC,YAAA,GACFC,mBAAA,EACF,GAiGI,IAAI1R,EAAA,IAAA3D,EAAsBA,MAAA,CAAAqT,MAAA,CAAAG,EAAAzW,OAAA,CAPxB,CACAuY,uBAAqB,GACvBC,oBAAA,CACA,GAKIC,EAAA,GAGFC,EAAa,KACfzB,EAAArQ,EAEA,EACE+R,EAAI,IAAgB,EAClBF,GAGA7B,EAAA5W,OAAA,GAGF4Y,aAAAf,GAA+BA,EACvBgB,WAAW,KACjB,IAAAC,EAAgBC,IAAYjC,EAAI,GAAe,IAAIkC,EAAA5B,KAAA,KAAS0B,EAC5D,EACC9B,EAAA,GACL,OAEA,EACE+B,EAAiB,IAAI,CACrBN,EAAiB,GACjB,IAAAK,EAAiBlS,EAAKqS,MAAA,GAExB,OADER,EAAO,GACTK,CAEA,EAOa,OANblS,EAAO4E,EAAE,CAAC,kBAAgBkN,GAC1B9R,EAAO4E,EAAE,CAAC,eAAAkN,GACV9R,EAAO4E,EAAE,CAAC,iBAAgBkN,GAE1B9R,EAAA4E,EAAA,CAAU,eAAAmN,GAEVjC,EAAO9P,GACL,KACAgS,aAAUf,GACVnB,EAAO,IAAO,EAChB9P,EAAAsS,OAAA,EACC,IAAcjC,EAEjB,EAAgB,GAAAzd,EACV2E,SAAQ,OACVyI,GACDA,CAAAA,EAAArK,aAAA,CAAAA,CAAA,CACA,GAASqK,EAAcrK,EAE1B,EAAgB,GAAA/C,EACV2E,SAAU,OACZyI,GAAOgR,GACRhR,EAAAuS,UAAA,EACA,GAASvS,EAASgR,EAErB,EAAgB,GAAApe,EACV2E,SAAQ,UACVyI,EAaa,OAbYoF,EACvBnS,EAAA,CACA+M,OAAAA,EACS,eACPA,EAAA4Q,SAAa,GACfP,EAAArQ,EACA,EACAhL,KAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAQ,cAAAA,EACFC,eAAAA,CACA,GACE,KACF0P,EAAArS,EACD,CACA,GAED+M,EACAoF,EACAE,EACArS,EACAod,EACA1a,EACAC,EACAZ,EACAC,EACAC,EACDC,EAED,EAAgB,GAAAvC,EACV2E,SAAU,OAAa,GACzByI,GAAAT,IACAyQ,EAAY5W,OAAA,IACZ4G,EAAI0Q,KAAA,GACFf,GAAY,CACZ,IAAA9E,EAAM,GACJ2H,EAAM,SAAc,CACpB,IAAKtR,EAAO,MAAA1E,EAAAmT,GAAA,GACV,CAAA9E,EAAK,CAA8B,GACjC,CAAA3J,EAAM5F,KAAI,EAAM,CAAA4F,EAAA3F,MAAA,CACjB,iCAED2F,EAAMuR,UAAA,CAAa,GACnBvR,EAAMX,aAAa,CAAG,GACtBW,EAAMV,aAAY,CAAG,GACrBU,EAAMT,YAAY,CAAG,GACrBS,EAAMR,YAAY,CAAG,GACrBQ,EAAMP,YAAW,CAAG,GACpBO,EAAMwR,WAAU,CAAG,UACnBxR,EAAMyR,UAAC,WACP,GAAM,CAAAC,EACEC,EAAU,CAAAtT,EACZ+B,EACJJ,EAAM5F,KAAA,GAAMsX,EAAK,EACbA,EACA1R,EAAiB5F,KAAM,CACzBiG,EAAWL,EAAK3F,MAAA,GAAWsX,EAAG,EAAAA,EAAA3R,EAAA3F,MAAA,CAChC+F,CAAAA,IAAAA,GAAeC,IAAAA,CAAA,IACfL,EAAMI,MAAM,CAAGA,EAChBJ,EAAAK,MAAA,CAAAA,GAEDvB,EAAO4B,YAAI,CAAAV,GACZlB,EAAAM,GAAA,CAAAY,EACD,GACO9H,OAAA,CAAgB,GACzB4G,EAAA4C,gBAAA,EAEA,EAEa,OAAb4P,IACE,KACF3H,EAAA,EACD,CACF,CACA,GAAS7K,EAAc2P,EAAYpQ,EAEtC,EACiB,GAAA/M,EAAAoF,GAAA,SAAkBF,UAAA,kBAAwC,cACvEsZ,EAAA,eAACrZ,SACoB,CAAE,EAAAnF,EAAGoF,GAAA,EAAgB,UACxC0D,MAAAiE,CAAQ,CAAW,EAAC,CAAEnB,EAAAA,EACtB7C,OAAKgE,CAAA,IAAAnB,EAAAA,EAAAjG,IAAA0X,CAAA,EAIZ,GC7PD,IAAAiD,GAAmBlgB,EAAcE,aAAA,OAEQ,SACvCigB,IAAgB,CAChB,IAAK5f,EAAS,GAAAP,EAAAQ,UAAA,EAAA0f,IAAA,GACZ,CAAA3f,EACD,sDAEF,OAAAA,CAAA,CANc2f,GAAS/f,WAAiB,sBCDd,IAACigB,GAAA,CAAK,IAAI,IAEtB,CAIZ,SAJiCC,GAClCnU,CAGD,CAJmC,KAclCE,EATA,IAAMM,YAAAA,CAAE,EAAaR,EACf,CAAA4K,cAAAA,CAAe,CAAAO,qBAAAA,CAAc,CAAY,CAAA1N,IACzC2W,EAAAxJ,CAAsB,CAAApK,EAAA5I,IAAqB,EAC3Cyc,EAAoBlJ,CAAU,CAAA3K,EAAA5I,IAAA,EAC9B,CAAEuY,iBAAAA,CAAe,CAAG,CAAA1E,KACpB,CAACnM,cAAAA,CAAA,CAAiB,CAAAD,IAClB,CAAAiV,EAAEC,EAA+B,IAAAzgB,EAAcmD,QAAA,QAC/C,CAAE6H,2BAAAA,CAAc,CAAc,CAAAX,IAG5B,CAAAqW,UAAAA,CAAA,EAAAP,KACLxT,EAAA,GAAA3M,EAAAwK,OAAA,aAAA4B,CAAAA,EAAAM,EAAArD,IAAA,GAAA+C,KAAA,IAAAA,EAAAA,EAAAgU,EAAA,EAAY1T,EAGf,EAEI+Q,EAAiB,GAAAzd,EAAOuN,WAAU,QAAAH,GAAA,KAChC5H,EAAK4H,EAAA6D,SAAA,EACL1B,IAAA/D,EACAgE,KAAAhE,EACA9C,MAAAiE,CAAQ,CAAW,EAAC,CACtBhE,OAAAgE,CAAA,MAGF0P,EAAA3P,EAAA5I,IAAA,CAAA0B,EAAA,GAAcmH,EAAenB,EAAkB6Q,EAAY3P,EAG7D,EAAgB,GAAA1M,EACV2E,SAAA,MAAc,IAChB2b,EAAY,CAEZ,IAAArI,EAAM,GACJ0I,EAAI,cACA7U,EAAA,GACF,CACAA,EAAY,MAAA4U,EAAAJ,EAAA,OACRM,EAAA,CAAkC,GACpClU,CAAoB,IAApBA,EAAAsK,UAAoB,CAGrB,MACH,CAHElL,EAAO,MAAA4U,EAAAH,EAIT,CACA,IAAKzP,EAAO,MAAA9F,EAAAc,GACVmM,GACDwI,EAAA3P,EAGH,EAEa,OAAb6P,IACE,KACF1I,EAAA,EACF,CAAO,CAGN,EADA,KACA,GAEDvL,EACA4T,EACAC,EACAvV,EACD0V,EAED,EAEA,IAAArgB,EAAO,GAAA0I,MAAA,CAAA2D,EACL5I,IAAA,WAAO,OAEL6I,EAAU,GAAA/M,EAAAoF,GAAA,EAAA8X,GAAA,CACVzc,SAAAA,EACAwgB,WAAU,QACVzb,SAAAqY,EACAV,aAAayD,EALR7T,YAOLA,CACL,EAAAtM,GAAA,KCnF0B,IAACygB,GAAA,CAAK,IAAI,IAEtB,CAIZ,SAJoCC,GAItC7U,CAJsC,MAkBrCE,EAbA,IAAMM,YAAAA,CAAE,EAAaR,EACf,CAAA4K,cAAAA,CAAe,CAAAO,qBAAAA,CAAc,CAAY,CAAA1N,IACzC2W,EAAAxJ,CAAsB,CAAApK,EAAA5I,IAAqB,EAC3Cyc,EAAqBlJ,CAAY,CAAA3K,EAAA5I,IAAA,EACjC,CAAEwY,oBAAAA,CAAkB,EAAA3E,KACpB,CAACnM,cAAAA,CAAA,CAAe,CAAAD,IAChB,CAAAyV,EAAAC,EAAwB,IAAAjhB,EAAOmD,QAAA,QAC/B+d,EACJ,GAAAlhB,EAAAsB,MAAA,KAGI,CAAE4J,4CAAAA,CAA4B,CAAAD,mCAAAA,CAAA,EAAAZ,IAG5B,CAAAqW,UAAAA,CAAA,EAAAP,KACLxT,EAAA,GAAA3M,EAAAwK,OAAA,aAAA4B,CAAAA,EAAAM,EAAArD,IAAA,GAAA+C,KAAA,IAAAA,EAAAA,EAAA0U,EAAA,EAAYpU,EAGf,EAEI+Q,EAAA,GAAAzd,EAAsBuN,WAAW,QAAAH,GAAA,KAQ7B0D,CAPJoQ,CAAAA,EAAiB1a,OAAO,EAAS,EAAC,IAChChB,EAAK4H,EAAA6D,SAAA,EACL1B,IAAA/D,EACAgE,KAAAhE,EACA9C,MAAAiE,CAAQ,CAAW,EAAC,CACtBhE,OAAAgE,CAAA,MAEI,GACF,CAGFmE,EAAU,MAAA5F,EAAA1F,EAAA,QACR,CACF0b,EAAA1a,OAAA,GACA,CACkC,IAAhC0a,EAAoB1a,OAAA,EACrB8V,EAAA5P,EAAA5I,IAAA,CAAAgN,EAEH,GAEEnE,EACAnB,EACA8Q,EACApR,EACDwB,EAGH,EAAgB,GAAA1M,EACV2E,SAAA,MAAc,IAChB2b,EAAY,CAEZ,IAAArI,EAAM,GACJ0I,EAAI,cACA7U,EAAA,GACF,CACAA,EAAY,MAAA4U,EAAAJ,EAAA,OACRM,EAAA,CAAkC,GACpClU,CAAoB,IAApBA,EAAAsK,UAAoB,CAGrB,MACH,CAHElL,EAAO,MAAA4U,EAAAH,EAIT,CAGA,IAAKzP,EAAO,MAAA7F,EAAAa,GACVmM,GACDgJ,EAAAnQ,EAGH,EAEa,OAAb6P,IACE,KACF1I,EAAA,EACF,CAAO,CAGN,EADA,KACA,GAEDvL,EACA4T,EACAC,EACA5T,EACA1B,EACDyV,EAED,EAEA,IAAArgB,EAAO,GAAA0I,MAAA,CAAA2D,EACL5I,IAAA,cAAO,OAEL6I,EAAU,GAAA/M,EAAAoF,GAAA,EAAA8X,GAAA,CACVzc,SAAAA,EACAwgB,WAAU,WACVzb,SAAAqY,EACAV,aAAaiE,EACbrU,YAAAA,EANKqQ,mBAQD,EACT,EAAA3c,GAAA,KC5GD,GAAM,CAAE0L,oBAASoV,EAAK,EAAA3X,MAEP,CAAAwC,UAASoV,EAAmB,EAAAD,GAAA,SACzCE,IAAqB,CACrB,GAAM,CAAAhV,YAAAA,CAAA,CAAqC,CAAA1C,IAE3C8C,EACE2U,EAAA,CAAA/U,EAAA,OACG,GAAAzM,EAAkBoF,GAAA,EAAApF,EAAgB0F,QAAA,EAAAP,SAC5B0H,EAAaiE,GAAA,QAChB,CAAAhE,EACD,YAID,IAAAE,EAAA,CACEF,CAAAA,IAAAA,EAAAG,cAAC,EAAcH,IAAAA,EAAAI,eAAA,WAAAlN,EAAAiF,IAAA,EAAA7E,EAAAsF,QAAA,EAAAP,SAAA,CACA,GAAanF,EAAAoF,GAAA,EAAAqb,GAAA,CAAA3T,YAAAA,CACzB,GAA6BE,EAAc,GAAAhN,EAAAoF,GAAA,EAAA+b,GAAA,CAAArU,YAAsBA,CAAA,QAF/C,EAKzB,GAAA3D,MAAA,CAAAsD,EAAA,KAAAtD,MAAA,CAAA2D,EAAA5I,IAAA,IAGL,OAAAwd,GAAAjiB,EAAA,MCxBE,SAJyCkiB,GAAArV,CAAA,EAK1C,IAAMnH,SAAAA,CAAA,EAAcmH,EACdsV,EAAU,GAAAF,GAAcG,EAAA,IAC5BlhB,EAAO,GAAAP,EAAAwK,OAAA,MACL,EAAkC,MAChCkW,UAAalb,CAAA,CAAU,CAAW,GAChCA,EAAOkc,UAAA,UACT,OAAOhW,EAAAlG,EAMT,EALkE,IAC5DsG,EAAU,MAAA0V,EAAAG,UAAA,EAAAC,SAAC,CAASpc,EACtB,GAED,OAAAsG,CACH,CACF,CACC,IAAa0V,EAEhB,EAC8B,MAAQ,GAAA5hB,EAAAoF,GAAA,EAAAkb,GAAA9N,QAAA,EAAA1N,MAAAnE,EACjCwE,SAAAA,CAGN,OAAAyc,GAAAniB,EAAA,MCPiE,eAApCwiB,GAAF3V,CAAA,EAC1B,IAAM0V,SAAAA,CAAC,CAAS,CAAG1V,EACnB,CAAO1G,EAAA,CAAAoc,EACT,OAAAlW,EAAAlG,EAEA,CAAoC,IAClCsc,GAAgB,IAAAN,GAAAO,CAAA,EAAAC,eACL,CAAAC,QACP,CACAC,QAAAL,GACAM,UAAWC,IACXC,UAAA,IACAC,qBAAoB,GACtBC,mBAAA,EACF,CACF,CAEe,GAAoB,SACjC5iB,IAAA,CACE,SAAAC,EAAAiF,IAAA,EAAAjF,EAAA0F,QAAA,EAAAP,SAAA,CAEI,GAAAnF,EAAAoF,GAAA,EAAAlF,IAAC,CAAAiF,SAAM,GAAAnF,EAAAoF,GAAA,WAAAD,SAAA,gCAEoB,GAAAnF,EAAWoF,GAAA,EAAAsc,GAAAkB,EAAA,EAAAC,OAAAX,GACrC/c,SACC,GAAAnF,EAAAoF,GAAA,SAAC,CAAmBD,SAClB,GAAAnF,EAAAoF,GAAA,EAAAuc,GAAgB,CAAAxc,SACd,GAAAnF,EAAAoF,GAAA,EAAAiS,EAAC,CAAmBlS,SAClB,GAAAnF,EAAAoF,GAAA,EAAA6W,GAAa,CAAA9W,SAAA,GAAAnF,EAAAiF,IAAA,EAAAiX,GAAA,CAAA/W,SAAA,CACN,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,WAAAC,SAAA,CACR,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,aAAAC,SAAA,CACR,CAAU,EAAAnF,EAAAoF,GAAA,SAAAF,UACb,QAAoBC,SAAA,GAAAnF,EAAAoF,GAAA,EAAA8V,GAAA,MAEjB,CAAU,EAAAlb,EAAAoF,GAAA,SAAAF,UACb,QAAkBC,SAAA,GAAAnF,EAAAoF,GAAA,EAAAqW,GAAA,SAGR,GAAAzb,EAAAoF,GAAA,EAAAoV,GAAA,OAGd,GAAAxa,EAAAoF,GAAA,EAAAsN,EAAC,CAAavN,SACZ,GAAAnF,EAAAoF,GAAA,EAAAiH,EAAC,CAAkBlH,SAAA,GAAAnF,EAAAiF,IAAA,EAAA+N,EAAA,CAAA7N,SAAA,CAEjB,GAAAnF,EAAAoF,GAAA,EAAA2P,EAAC,IAAI,CAAU,EAAA/U,EAAAiF,IAAA,SAAAC,UAAA,iBAAAC,SAAA,CACR,CAAU,EAAAnF,EAAAiF,IAAA,SAAAC,UAAA,iBAAAC,SAAA,CAEb,GAAAnF,EAAAoF,GAAA,EAACoP,EAAA,IAAgB,GAAAxU,EAAAoF,GAAA,EAAA2X,GAAA,OAGnB,GAAA/c,EAAAoF,GAAA,EAACqN,EAAgB,OAAAzS,EAAAoF,GAAA,EAAAqc,GAAA,OAEP,GAAAzhB,EAAAoF,GAAA,EAAA5D,EAAA,0BAYnC,iBAAAjC,CAAA,CAAAK,CAAA,CAAAH,CAAA,eAAAA,EAAAK,CAAA,CAAAF,EAAA,qBAAAkjB,CAAA,sBAAA9K,CAAA,ICxFyC,IAAA+K,EAAAtjB,EAAA,MAQ1C,IAAAqjB,EAAmBC,EAAcziB,aAAA,OAEQ,SACvC0X,GAAgB,CAChB,IAAKrX,EAAS,GAAAoiB,EAAAniB,UAAA,EAAAkiB,GAAA,GACZ,CAAAniB,EACD,8CAEF,OAAAA,CAAA,CANcmiB,EAASviB,WAAiB,qBAMxC,gBAAAhB,CAAA,CAAAyjB,CAAA,CAAAvjB,CAAA,EChBD,IAixWEmc,EAWI/R,EAAeoZ,EAAAxT,EAAAyT,EAAAC,EAAAC,EAAAC,EA0uInBzH,EAMI/R,EAActB,EAAAC,EAuhBlBoT,EAII/R,EA/8eJyZ,EAAAC,EAAAC,EAAAC,EAAAC,EAg/EmBC,EAAAC,EAuFmBC,EAAOC,EAAAC,EAAAC,EAAAC,EAkjF7CrI,EAMA/R,EAAAuZ,EAAAc,EA6FAtI,EAIA/R,EAs+JAtB,EAAmBC,EA68Eb4a,EAAOe,EAIOC,EAuQpBC,EAAmBjB,EAAyBkB,EAAsCC,EA21BlFnB,EAg1GAxH,EAMA/R,EAAAmF,EAAAwV,EAyJA5I,EAMA/R,EAAAmF,EAAAwV,EA2GA5I,EAOA/R,GAAAoZ,GAAAjU,GAAAwV,GAyVA5I,GAMA/R,GAAAmF,GAAAwV,GAoJA5I,GAMA/R,GAAAmF,GAAAwV,GAyGA5I,GAOA/R,GAAAoZ,GAAAjU,GAAAwV,GA+HA5I,GAMA/R,GAAAmF,GAAAwV,GAmIA5I,GAOA/R,GAAAoZ,GAAAjU,GAAAwV,GAgQA3a,GAAAmF,GAAAwV,GA2PA3a,GAAAmF,GAAAwV,GAkPA5I,GAQA/R,GAAA2Z,GAAAiB,GAAAnB,GAAAoB,GAAAC,GAAAC,GAAAC,GAAA7V,GAAAwV,GAkeA5I,GAMA/R,GAAAmF,GAAAwV,GA2GA5I,GAMA/R,GAAAmF,GAAAwV,GAiHA5I,GAMA/R,GAAAmF,GAAAwV,GAmNA5I,GAMA/R,GAAAmF,GAAAwV,GAkIA5I,GAMA/R,GAAAmF,GAAAwV,GAkEA5I,GAMA/R,GAAAmF,GAAAwV,GA2lEIM,GACAC,GACAC,GA0EJC,GAgIAC,GAr8tBFC,GAAA1lB,EAAA,aAEkCoK,GAAAA,IAAA,CAAQub,QAAA,OAC1C,EASM,GAPNpC,EAICnZ,MAAA,CAAAA,GAGK,oBAAAwb,SACFA,mBAAkB,qBAAAC,aAAAA,aAAAC,QAAA,EACpB1b,GACKwb,QAAA,CAAAA,SAEJxb,GAAAwb,QAAA,CAAAA,SAAAG,cAAA,CAAAC,kBAAA,KAEH5b,GACKnK,MAAA,CAAAA,WACH,CAIE,IACEgmB,GAAU,GAAAC,CAHVlmB,EAA0B,KAC5B,EAEYmmB,KAAA,CAAAC,mBAAA,+FAAAC,SACR,CAAwBC,uBAAC,CAAM,MACjC,EAECC,UAAM,QACX,GAAAtmB,MAAO,CACPmK,GAAOwb,QAAA,CAAAK,GAAsBL,QAAA,CAC7Bxb,GAAOoc,mBAAa,CAAAxmB,EAAA,MAAuCymB,cAAA,CAC3Drc,GAAOsc,UAAS,CAAA1mB,EAAA,MAAAyd,MAAA,CAChBrT,GAAAnK,MAAY,CAAAgmB,GACbU,UAAAvc,GAAAnK,MAAA,CAAA0mB,SAAA,CAED,SA6qiBMC,GAAsBC,CAAA,CAAAC,CAAe,EAEzC,IAAIC,EAAUF,EAAG9Y,MAAA,CAAAiZ,EAAsBF,EAAAE,YAAqB,CAAAC,EAAAD,EAAAE,UAAA,OAC5DD,EAAIE,SAAS,CAAC,EAAAH,EAAI1d,MAAgB,EAClC2d,EAAA7X,KAAA,OAEA,IAAIgY,EAAUL,EAAAzd,MAAa,CAAA0d,EAAS1d,MAAa,CAEnD2d,EAAAI,SAAA,CAAAN,EAAA,EAAAK,EAAAJ,EAAA3d,KAAA,CAAA2d,EAAA1d,MAAA,KAAA0d,EAAA3d,KAAA,CAAA2d,EAAA1d,MAAA,CAEA,CASE,SAAIge,GAAeT,CAAc,CAAAC,CAAc,EAK/C,IAAoCG,EAAAD,EAApCA,YAAoC,CAAAE,UAAA,OAAAK,EAAAT,EAAAU,gBAAA,CAAAC,EAAAX,EAAAY,iBAAA,CAAAC,EAAAJ,EAAAE,EAAA,EAEpCG,EAAA,IAAAC,WAAA,KAAAC,WAAoC,GAAAH,GAGjCI,EAAW,IAAMC,kBAAiB,IAAG,CAAAF,WAAS,GAAAH,GACjDd,EAAAoB,UAAI,CAAU,IAAIV,EAAUE,EAAAZ,EAAWqB,IAAA,CAAArB,EAAQsB,aAAA,CAAAP,GAC/C,IAAIQ,EAAA,IAAaC,UAASN,EAAGR,EAAAE,GAC/BR,EAAAqB,YAAA,CAAAF,EAAA,IACC,CAvsiBDhe,GAAAme,gBAAA,kBAAAne,GAAAnK,MAAA,mBAAAmK,GAAAwb,QAAA,EAAAxb,GAAAnK,MAAA,EAAAmK,GAAAnK,MAAA,CAAAuoB,SAAA,EAAApe,GAAAnK,MAAA,CAAAuoB,SAAA,CAAAC,cAAA,GASAre,GAAAse,YAAA,UAAAhD,IAAA,GAIAtb,GAAOue,GAAK,CAAG,GACfve,GAAOwe,KAAA,CAAQ,kDACfxe,GAAOye,QAAA,wBACPze,GAAO0e,aAAY,0DACnB1e,GAAO2e,SAAS,CAAG,iBACnB3e,GAAO4e,SAAO,CAAG,GAAA5e,GAAC6e,OAAA,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EACnC,CAEA7e,GAAA8e,KAAA,8BAQA9e,GAAA+e,kBAAA,SAQA/e,GAAAgf,iBAAA,MAQAhf,GAAAif,iBAAA,KAKAjf,GAAAkf,eAAA,IASAlf,GAAAkD,WAAA,MASAlD,GAAAmf,qBAAA,IAUAnf,GAAAof,iBAAA,IAQApf,GAAAqf,gBAAA,CAAArf,GAAAnK,MAAA,CAAAwpB,gBAAA,EAAArf,GAAAnK,MAAA,CAAAypB,sBAAA,EAAAtf,GAAAnK,MAAA,CAAA0pB,mBAAA,IAgBAvf,GAAAwf,yBAAA,GAMAxf,GAAAyf,kBAAA,IAUAzf,GAAA0f,kBAAA,IAMA1f,GAAA2f,mBAAA,IASA3f,GAAO4f,mBAAoB,IAAW5f,GACpC6f,iBAAW,WAAqB,QAAwE,GACtGT,iBAAY,EAAApf,GAAuB8f,gBAAO,EAAA9f,GAAc8f,gBAAA,CAAA9f,GAAAkD,WAAA,GACxDsR,QAAQC,GAAI,sBAAOzU,GAAmB+f,cAAA,EAAE,IAAA/f,GAAUggB,kBAAkB,EAACC,SAAAjgB,GAAAkD,WAAA,IAG7DlD,GAAIkgB,qBAAO,CACpB,IAAAlgB,GAAAkgB,qBAAA,OACH,EACY,UAEV,CAKkD,SAC3CC,EAAsBC,CAAU,CAAEC,CAAA,KACrC,KAAAC,gBAAA,CAAAF,EAAA,EAGF,IAAIG,EAAS,KAAAD,gBAAA,CAAAF,EAAA,CACXC,EACFE,CACK,CAAAA,EAAAC,OAAA,CAAAH,GAAA,IAEJrgB,GAAAwa,IAAA,CAAAiG,KAAA,CAAAC,IAAA,CAAAH,EAAA,IAND,CAqCiC,SAC7BI,EAAAP,CAAW,CAAAC,CAAY,MACzBO,EAAQ,WAAY,CACpBP,EAAQQ,KAAC,MAAW1f,WACpB,IAAK,CAAAqH,GAAI,CAAA4X,EAAAQ,EACX,GAAA9Z,IAAO,CAAC,MACV,KAAAyB,EAAA,CAAA6X,EAAAQ,EAEA,CA8EoB5gB,GAClB8gB,UAAM,EACNC,KA1BgC,SACtBX,CAAA,CAAA9lB,CAAkB,KAC1B,MAAAgmB,gBAAW,CACZ,YAGD,IAAIU,EAAoB,KAAAV,gBAAA,CAAAF,EAAA,IACtB,CAAAY,EACD,YAE6D,IAC5D,IAAA/Q,EAAA,EAAAgR,EAAiBD,EAAOtmB,MAAiB,CAACuV,EAAGgR,EAAKhR,IACpD+Q,CAAA,CAAA/Q,EAAA,EAAA+Q,CAAA,CAAA/Q,EAAA,CAAAiR,IAAA,MAAA5mB,GAAA,IAKF,OAJ8E,IAC1E,CAAAgmB,gBAAiB,CAAAF,EAAK,CAAAY,EAAAnX,MAAA,UAAA5O,CAAA,EACxB,MAAAA,CAAA,IAAAA,CACA,GACF,MAUEsN,GA5G8B,SACpB6X,CAAA,CAAAC,CAAkB,EAIA,GAH1B,IAAK,CAAAC,gBAAgB,EACtB,MAAAA,gBAAA,KAGCnf,GAAAA,UAASzG,MAAQ,CAAW,IAC1B,IAAIymB,KAAIf,EACV,KAAA7X,EAAA,CAAA4Y,EAAAf,CAAA,CAAAe,EAAA,OAIE,IAAK,CAAAb,gBAAiB,CAAAF,EAAU,EACjC,MAAAE,gBAAA,CAAAF,EAAA,KAEF,KAAAE,gBAAA,CAAAF,EAAA,CAAA3qB,IAAA,CAAA4qB,EACD,CACF,aA4FEe,KAlFgC,SAChChB,CAAA,CAAAC,CAAA,EAC4B,GAC1Blf,GAAAA,UAASzG,MAAQ,CAAW,IAC1B,IAAAymB,KAAWf,EACbO,EAAAO,IAAA,MAAAC,EAAAf,CAAA,CAAAe,EAAA,OAIDR,EAAAO,IAAA,MAAAd,EAAAC,EACD,CACF,aAwEA7X,IA5DiC,SACrB4X,CAAA,CAAAC,CAAkB,KAC1B,MAAAC,gBAAW,CACZ,YAG2B,GAC1Bnf,GAAAA,UAAKzG,MAAA,CAAoC,IACvC0lB,KAAA,KAAAE,gBAAgC,CAClCH,EAAAe,IAAA,MAAAd,QAIA,GAAKjf,GAAAA,UAAYzG,MAAA,EAAW,iBAAAyG,SAAA,QAC1B,IAAAggB,KAAAf,EACFD,EAAAe,IAAA,MAAAC,EAAAf,CAAA,CAAAe,EAAA,OAIDhB,EAAAe,IAAA,MAAAd,EAAAC,EACD,CACF,YAwCF,CACA,IAKErgB,GAAAqhB,UAAY,EAEZ5c,SAAA,GAYiBR,IACf,UAAc,CACW,GAAzB,IAAI,CAAAQ,QAAK,CAAAhP,IAAA,CAAAorB,KAAc,CAAE,KAAApc,QAAA,CAAAtD,WACvB,IAAK,CAAAmgB,cAAW,CAA4C,IAC1D,IAAIrR,EAAC,EAAAvV,EAAeyG,UAAUzG,MAAE,CAAAuV,EAAAvV,EAAAuV,IAClC,KAAAqR,cAAA,CAAAngB,SAAA,CAAA8O,EAAA,CAEF,CAEF,OADE,KAAAmE,iBAAW,OAAA7N,gBAAA,GACb,MAcgDgb,SAC1C,SAAU1mB,CAAK,CAAAuV,CAAQ,CAAAoR,CAAA,EAC3B,IAAIpb,EAAA,IAAa,CAAA3B,QAAA,CASnB,OARI+c,EACFpb,CACK,CAAAgK,EAAA,CAAAvV,EAEJuL,EAAAqb,MAAA,CAAArR,EAAA,EAAAvV,GAED,IAAI,CAACymB,cAAA,EAAiB,IAAI,CAAAA,cAAK,CAAAzmB,GAC/B,KAAAuZ,iBAAW,OAAA7N,gBAAA,GACb,MAQmBD,OACb,UAAU,CAG8C,IAC1D,IADuB8J,EAApBhK,EAAQ,IAAG,CAAA3B,QAAS,CAAUid,EAAoB,GACrDzR,EAAQ,EAAAvV,EAAQyG,UAAQzG,MAAY,CAAAuV,EAAAvV,EAAAuV,IAEpCG,EAAAhK,EAAAoa,OAAA,CAAArf,SAAA,CAAA8O,EAAA,EAEE,KAAAG,IACAsR,EAAe,GACftb,EAAKqb,MAAA,CAAArR,EAAgB,GACtB,KAAAuR,gBAAA,OAAAA,gBAAA,CAAAxgB,SAAA,CAAA8O,EAAA,GAKL,OADE,KAAAmE,iBAAW,EAAAsN,GAAA,KAAAnb,gBAAA,GACb,MAc2CN,cACrC,SAAe2b,CAAU,CAAA9qB,CAAA,EACuB,IAClD,IADGsP,EAAQ,IAAG,CAAAyb,UAAc,GAC5B5R,EAAA,EAASgR,EAAK7a,EAAS1L,MAAQ,CAAEuV,EAAEgR,EAAGhR,IACxC2R,EAAAV,IAAA,CAAApqB,EAAAsP,CAAA,CAAA6J,EAAA,CAAAA,EAAA7J,GAEF,aAS2Byb,WACrB,SAAOrmB,CAAS,SAAa,KACnB,IAALA,EACR,KAAAiJ,QAAA,CAAAnF,MAAA,GAEC,IAAO,CAAAmF,QAAM,CAAAoF,MAAK,UAAAiY,CAAA,EACpB,OAAAA,EAAAtmB,IAAA,GAAAA,CACF,EAHE,EAUqBsO,KACrB,SAAYsG,CAAA,CAAQ,CACtB,YAAA3L,QAAA,CAAA2L,EAAA,EAMqB2R,QACZ,UAAK,CACd,gBAAAtd,QAAA,CAAA/J,MAAA,EAMiBkF,KACf,UAAY,CACd,YAAA6E,QAAA,CAAA/J,MAAA,EAQkC8D,SACxB,SAAS3D,CAAC,CAAOmnB,CAAC,SAAc,IACtC,CAAAvd,QAAW,CAAA+b,OAAA,CAAA3lB,GAAA,MAGJmnB,GACL,IAAO,CAAAvd,QAAO,CAAAwd,IAAI,UAAaC,CAAA,EACjC,yBAAAA,EAAA1jB,QAAA,EAAA0jB,EAAA1jB,QAAA,CAAA3D,EAAA,GACD,EAIH,EAIwBsnB,WACf,UAAc,CAAgC,OACnD,KAAQ1d,QAAQ,CAAA2I,MAAA,UAAagV,CAAQ,CAAArlB,CAAA,CAAU,CAE9C,OADDqlB,EAAOrlB,CAAAA,EAAAolB,UAAA,CAAAplB,EAAAolB,UAAA,KAEX,IACF,CACA,EAKEniB,GAAAqiB,aAAA,EAI+BC,YACpB,SAAQhoB,CAAS,MACxB,IAAI6mB,KAAK7mB,EACX,KAAAuL,GAAA,CAAAsb,EAAA7mB,CAAA,CAAA6mB,EAAA,CAGF,EAK0CoB,cACpC,SAAiBC,CAAA,CAAAC,CAAgB,GACnCD,IAASA,EAAAE,UAAc,EAAOF,aAASxiB,GAAA2iB,QAAA,EACxC,KAAA9c,GAAA,CAAA4c,EAAA,IAAAziB,GAAA2iB,QAAA,CAAAH,GAGH,EAMmDI,aAC7C,SAAiBJ,CAAM,CAAAC,CAAM,CAAAb,CAAA,EAC/BY,CAAAA,IAASA,EAAAK,MAAc,EAAAL,aAAuBxiB,GAAA8iB,OAAA,CAI/ClB,GAAAA,IAHD,IACK,CAAA/b,GAAA,CAAA4c,EAAA,IAAAziB,GAAA8iB,OAAA,CAAAN,EAAAZ,GAKP,EAG0BmB,WACf,SAAQb,CAAK,MACpB,IAAIf,KAAMe,EACZ,KAAAc,IAAA,CAAA7B,EAAAe,CAAA,CAAAf,EAAA,CAGF,EAO0Btb,IACxB,SAAW2E,CAAA,CAAAvP,CAAQ,EAOrB,MANI,iBAAKuP,EACP,IACK,CAAAuY,UAAA,CAAAvY,GAEJ,KAAAwY,IAAA,CAAAxY,EAAAvP,GAEH,MAE2B+nB,KACzB,SAASxY,CAAG,CAAAvP,CAAA,EACd,KAAAuP,EAAA,CAAAvP,CAEA,EAM2BgoB,OACrB,SAAQR,CAAS,EACrB,IAAIxnB,EAAO,KAAAioB,GAAA,CAAUT,GAIvB,MAHa,WAAT,OAAKxnB,GACN,KAAA4K,GAAA,CAAA4c,EAAA,CAAAxnB,GAEH,MAOwBioB,IACtB,SAAYT,CAAA,CAAS,CACvB,YAAAA,EAAA,CAED,EAQChJ,EAAA0J,KAAA1J,IAAA,CAAAC,EAAAyJ,KAAAzJ,KAAA,CAAAC,EAAAwJ,KAAAxJ,GAAA,CAAAC,EAAAuJ,KAAAC,EAAA,KAAAvJ,EAAAsJ,KAAAC,EAAA,GAGcpjB,GAEZwa,IAAA,EAOqB6I,IACnB,SAAIC,CAAU,CAAG,IAAEA,IAAAA,EAAW,QAC9B,CAKQ,OAJNA,EAAA,GAEDA,CAAAA,EAAA,CAAAA,CAAA,EAEOA,EAAAzJ,GACE,KAAK,OAAG,EAChB,OAAK,OAAG,EACV,SACA,CACF,OAAAsJ,KAAAE,GAAA,CAAAC,EAEA,EAOqBvI,IACnB,SAAIuI,CAAU,CAAG,IAAEA,IAAAA,EAAW,QAC9B,CACA,IAAeC,EAAA,EAIP,OAHND,EAAA,GAEDC,CAAAA,EAAA,IAHcD,EAAAzJ,GAKR,KAAG,EACR,OAAK0J,CAAA,MAAG,EACR,OAAK,OAAG,EACV,OAAAA,CACA,CACF,OAAAJ,KAAApI,GAAA,CAAAuI,EAEA,EASwCE,gBAC5B,SAAM/C,CAAQ,CAAAxlB,CAAA,EACxB,IAAIwoB,EAAAhD,EAAYD,OAAA,CAAAvlB,GAIlB,OAHU,KAANwoB,GACDhD,EAAAgB,MAAA,CAAAgC,EAAA,GAEHhD,CAEA,EAQiCiD,aACxB,SAAWhlB,CAAA,CAAKC,CAAA,CAAM,CAC/B,OAAAwkB,KAAAvI,KAAA,CAAAuI,KAAAQ,MAAA,GAAAhlB,CAAAA,EAAAD,EAAA,IAAAA,CAEA,EAOoC6a,iBAC3B,SAAUqK,CAAA,EACnB,OAAAA,EAAAhK,CAEA,EAOoCiK,iBAC3B,SAAUC,CAAA,EACnB,OAAAA,EAAAlK,CAEA,EAS8CmK,YACxC,SAAWC,CAAI,CAAAC,CAAY,CAACH,CAAO,CAAG,CAE1C,IAAAI,EAAW,IAAOlkB,GAAQmkB,KAAK,CAACH,EAAEI,CAAA,CAAAH,EAAUG,CAAA,CAAAJ,EAAAK,CAAA,CAAAJ,EAAAI,CAAA,EAAAC,EAAAtkB,GAAAwa,IAAA,CAAA+J,YAAA,CAAAL,EAAAJ,GAC9C,WAAA9jB,GAAAmkB,KAAA,CAAAG,EAAAF,CAAA,CAAAE,EAAAD,CAAA,EAAAG,SAAA,CAAAP,EAEA,EAQwCM,aAC5B,SAAOE,CAAQ,CAACX,CAAA,CACtB,CAGJ,IAAA/I,EAAO/a,GAAAwa,IAAA,CAAAO,GAAA,CAAA+I,GAAAT,EAAArjB,GAAAwa,IAAA,CAAA6I,GAAA,CAAAS,GAAA,MACF,CACHM,EAFKK,EAAAL,CAAA,CAAAf,EAAAoB,EAAAJ,CAAA,CAAAtJ,EAGPsJ,EAHOI,EAAAL,CAAA,CAAArJ,EAAA0J,EAAAJ,CAAA,CAAAhB,CAIT,CAEA,EAakCqB,aACzB,SAAW9a,CAAK,CAAC+a,CAAG,CAAC,CAC9B,WAAA3kB,GAAAmkB,KAAA,CAAAQ,EAAAP,CAAA,CAAAxa,EAAAwa,CAAA,CAAAO,EAAAN,CAAA,CAAAza,EAAAya,CAAA,CAEA,EAQyCO,wBAClB,SAAS1c,CAAA,CAAGC,CAAA,CAAG,CACtC,OAAAgb,KAAA0B,IAAA,EAAA3c,EAAAkc,CAAA,CAAAjc,EAAAic,CAAA,CAAAlc,EAAAmc,CAAA,CAAAlc,EAAAkc,CAAA,EAAAlB,CAAAA,KAAA2B,KAAA,CAAA5c,EAAAkc,CAAA,CAAAlc,EAAAmc,CAAA,EAAAlB,KAAA2B,KAAA,CAAA3c,EAAAic,CAAA,CAAAjc,EAAAkc,CAAA,GAEA,EAM2BU,aAClB,SAAWT,CAAA,EACpB,WAAAtkB,GAAAmkB,KAAA,CAAAG,EAAAF,CAAA,CAAAE,EAAAD,CAAA,EAAAW,QAAA,GAAA7B,KAAA2B,KAAA,CAAAR,EAAAF,CAAA,CAAAE,EAAAD,CAAA,EAEA,EAQgCY,YACrB,SAAOC,CAAA,CAAKC,CAAA,CAAAC,CAAA,EACrB,IAAIC,EAAArlB,GAAQwa,IAAO,CAAAkK,YAAK,CAAAQ,EAAAC,GAAAG,EAAAtlB,GAA4Bwa,IAAA,CAAAkK,YAAA,CAAAQ,EAAAE,GACpDG,EAAAvlB,GAAAwa,IAAA,CAAAoK,uBAAwC,CAAAS,EAAAC,GAEpCE,EAAAxlB,GAAMwa,IAAS,CAAAoK,uBAAqB,CAAA5kB,GAAAwa,IAAA,CAAA+J,YAAA,CAAAc,EAAAE,GAAAD,GACjC,MACL,CACAb,OAAOzkB,GAAAwa,IAAA,CAAAuK,YAAA,CAAA/kB,GAAAwa,IAAA,CAAA+J,YAAA,CAAAc,EAFFE,EAAAC,CAAAA,IAAAA,EAAA,UAGPlC,MAAAiC,CACF,CAEA,EAmB4DE,sBACzC,SAAIC,CAAQ,CAAAprB,CAAc,CAAAqrB,CACvC,EAEkC,IAChCC,EAAI,GAASC,EAAKvrB,EAAK8a,WAAc,GAAA0Q,EAAAxrB,EAAAyrB,aAAA,KAAA/lB,GAAAmkB,KAAA,GAAA7pB,EAAA2K,MAAA,GAAA3K,EAAA4K,MAAA,MAAAlF,GAAAmkB,KAAA,MAAA6B,EAAA,SAAA1B,CAAA,EACrC,IAAA2B,EAAWJ,EAAA1C,KAAO2B,KAAS,CAAAR,EAAGF,CAAA,CAAAE,EAAAD,CAAA,EAChC,WAAArkB,GAAAmkB,KAAA,CAAAG,EAAAF,CAAA,CAAA6B,EAAAH,EAAA1B,CAAA,CAAAE,EAAAD,CAAA,CAAA4B,EAAAH,EAAAzB,CAAA,CACJ,SAAyBqB,EAAOhrB,MAAA,KACGgrB,EACjCQ,OAAQ,UAAWvlB,CAAA,CAAAyP,CAAS,CAAE,CAC9B,IAAiB+U,EAAAC,EAAbF,EAAA,IAAAllB,GAAamkB,KAAA,CAAAxjB,EAAAyjB,CAAA,CAAAzjB,EAAA0jB,CAAA,CACfjU,CAAU,IAAVA,GACAgV,EAAIM,CAAA,CAAAtV,EAAW,GACjB+U,EACKQ,EAAIK,EAA0BhmB,GAAGwa,IAAA,CAAAkK,YAAA,CAAAU,EAAAF,IAAAV,SAAA,CAAAU,GAAAQ,CAAA,CAAAA,EAAAhrB,MAAA,KAChC0V,IAAOsV,EAAUhrB,MAAA,IACrByqB,EAAIO,CAAA,CAAAtV,EAAW,GACjBgV,EACKO,EAAAK,EAAAhmB,GAAAwa,IAAA,CAAAkK,YAAA,CAAAS,EAAAD,IAAAV,SAAA,CAAAU,GAAAQ,CAAA,MAEHP,EAAIO,CAAM,CAACtV,EAAQ,EAAE,CACtBgV,EAAAM,CAAA,CAAAtV,EAAA,IAMD,IAAwC6V,EAAAE,EAApCC,EAAQpmB,GAAAwa,IAAc,CAAAyK,WAAK,CAAAC,EAASC,EAAAC,GAAAiB,EAAAD,EAAA3B,MAAA,CAAAc,EAAAa,EAAA9C,KAAA,IACtChpB,UAAAA,EAAAgsB,cAAsB,GACtBL,EAAA,CAAAJ,EAAc1C,KAAIpI,GAAA,CAAAwK,EAChB,GAIApC,KAAA2B,KAAO,CAAIqB,CADbA,EAAc,IAACnmB,GAAAmkB,KAAe,CAAAkC,EAAajC,CAAI,CAAA6B,EAAKH,EAA0B1B,CAAA,CAAAiC,EAAAhC,CAAA,CAAA4B,EAAAH,EAAAzB,CAAA,GAC1DD,CAAA,CAAA+B,EAAA9B,CAAA,EAAAwB,GAAAvrB,EAAAisB,gBAAA,GAClBX,EAAOnwB,IAAI,CAACyvB,EAAEjhB,GAAA,CAAAkiB,IACdP,EAAAnwB,IAAA,CAAAyvB,EAAAsB,QAAA,CAAAL,IACD,MACF,CACD,EACA,CAAAN,EAAc1C,KAAIsD,KAAA,CAIlBN,EAAc,IAAInmB,GAAAmkB,KAAA,CAAAkC,EAAAjC,CAAA,CAAA6B,EAAAH,EAAA1B,CAAA,CAAAiC,EAAAhC,CAAA,CAAA4B,EAAAH,EAAAzB,CAAA,EAClBuB,EAAOnwB,IAAI,CAACyvB,EAAEjhB,GAAA,CAAAkiB,IAChBP,EAAAnwB,IAAA,CAAAyvB,EAAAsB,QAAA,CAAAL,GACA,GAxCwCP,CA2C1C,EAS6ClL,eACvC,SAAc/Z,CAAA,CAAA+lB,CAAA,CAAAC,CAAA,WAKjB,IAAA3mB,GAAAmkB,KAAA,CAAAuC,CAAA,IAAA/lB,EAAAyjB,CAAA,CAAAsC,CAAA,IAAA/lB,EAAA0jB,CAAA,CAAAqC,CAAA,IAAA/lB,EAAAyjB,CAAA,CAAAsC,CAAA,IAAA/lB,EAAA0jB,CAAA,EAKH,IAAArkB,GAAAmkB,KAAA,CAAAuC,CAAA,IAAA/lB,EAAAyjB,CAAA,CAAAsC,CAAA,IAAA/lB,EAAA0jB,CAAA,CAAAqC,CAAA,IAAAA,CAAA,IAAA/lB,EAAAyjB,CAAA,CAAAsC,CAAA,IAAA/lB,EAAA0jB,CAAA,CAAAqC,CAAA,IAJE,EAYqDE,0BACtC,SAAAlB,CAAA,CAAAmB,CAAA,KACbA,EAAwC,IACtC,IAAA5W,EAAO,EAAEA,EAAGyV,EAAOhrB,MAAK,CAAAuV,IAC1ByV,CAAA,CAAAzV,EAAA,CAAAjQ,GAAAwa,IAAA,CAAAE,cAAA,CAAAgL,CAAA,CAAAzV,EAAA,CAAA4W,EAEF,CAAc,IAACC,EAAU,CAAGpB,CAAM,CAAC,EAAE,CAACtB,CAAC,CAAEsB,CAAM,CAAC,EAAE,CAACtB,CAAC,CAAEsB,CAAM,CAAC,EAAE,CAACtB,CAAC,CAC7DsB,CAAO,IAAAtB,CAAA,CAGG,CAAA2C,EAAO/mB,GAAKwa,IAAA,CAAAiG,KAAA,CAAA/hB,GAAA,CAAAooB,GAAAE,EAAAhnB,GAAAwa,IAAA,CAAAiG,KAAA,CAAA9hB,GAAA,CAAAmoB,GAAAG,EAAA,CAAEvB,CAAM,CAAC,EAAE,CAACrB,CAAC,CAAEqB,CAAM,CAAC,EAAE,CAACrB,CAAC,CAAEqB,CAAM,CAAC,EAAE,CAACrB,CAAC,CAC7DqB,CAAO,IAAArB,CAAA,CAIX,CAAA6C,EAAOlnB,GAAAwa,IAAA,CAAAiG,KAAA,CAAA/hB,GAAA,CAAAuoB,GAAAE,EAAAnnB,GAAAwa,IAAA,CAAAiG,KAAA,CAAA9hB,GAAA,CAAAsoB,GAAA,MACL,CACAlhB,KAAKghB,EACLjhB,IAAAohB,EACAjoB,MATwB+nB,EAAAD,EAU1B7nB,OALOioB,EAAAD,CAMT,CAEA,EAO6BE,gBACd,SAASV,CAAA,CAAE,CAChB,IAACxe,EAAI,EAAIwe,CAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAAA1wB,EAAA,CAAEkS,EAACwe,CAAI,CAAC,EAAC,CAAI,CAACxe,EAAIwe,CAAC,CAAC,EAAE,CAAE,CAAAxe,EAAKwe,CAAC,GAAE,CAC7Cxe,EAAIwe,CAAA,IAA2B,CAAA5E,EAAK9hB,GAAIwa,IAAA,CAAAE,cAAA,EAAE0J,EAAGsC,CAAC,CAAC,EAAE,CAAIrC,EAAGqC,CAAA,GAAI,EAC9D1wB,EAAE,IAGN,OAFEA,CAAC,CAAC,EAAE,CAAG,CAAC8rB,EAAEsC,CAAC,CACXpuB,CAAA,IAAO,CAAA8rB,EAAAuC,CAAA,CACTruB,CAEA,EAQ0CqjB,QACxC,SAAOgO,CAAW,CAAAC,CAAe,EACnC,OAAAC,WAAAC,OAAAH,GAAAhO,OAAA,CAAAiO,GAEA,EAOqCG,UAC/B,SAAOxsB,CAAA,CAAWkC,CAAK,EAE3B,IAAIuqB,EAAC,WAAUC,IAAA,CAAA1sB,GAAAosB,EAAAE,WAAAtsB,GAGA,OAFbkC,GACDA,CAAAA,EAAA6C,GAAA4nB,IAAA,CAAAC,qBAAA,EAECH,CAAK,SACH,KAEF,OAAKL,EAAArnB,GAAAue,GAAA,UACH,KAEF,OAAK8I,EAAArnB,GAAAue,GAAA,UACH,KAEF,OAAK8I,EAAArnB,GAAAue,GAAA,KACH,KAEF,OAAK8I,EAAArnB,GAAAue,GAAA,QACH,KAEF,OAAK8I,EAAArnB,GAAAue,GAAA,WACH,KAEF,OAAA8I,EAAAlqB,CAAA,SAEF,OAAAkqB,CACF,CAEA,EAM0BS,cACjB,UAAK,CACd,QAEA,EAOoCC,SAClC,SAAAvsB,CAAA,CAAAwsB,CAAA,CAA+B,CAGjC,OADExsB,EAAOwE,GAAOwa,IAAI,CAACyN,MAAA,CAAAC,QAAA,CAAgB1sB,EAAC2sB,MAAU,CAAC,GAAA/f,WAAK,GAAA5M,EAAA2Y,KAAA,KACtDnU,GAAAwa,IAAA,CAAA4N,gBAAA,CAAAJ,EAAA,CAAAxsB,EAAA,EAQiC6sB,iBAC3B,SAAa7sB,CAAA,MACftB,EAAA,CACA,sBACA,QACA,KACD,QACD,CAAQ,OACNsB,GAAK,IACH,iBAA+BtB,EAACA,EAAAoF,MAAA,EAAM,KAAM,KAAM,KAAM,KAAiB,gBAAoB,oBAC7F,EACF,KAAK,KACH,iBAA+BpF,EAACA,EAAAoF,MAAA,EAAiB,gBAAqB,oBAAM,KAAM,KAAK,IAAM,KAAM,KAAK,KACxG,EACF,KAAK,KACH,OAA+BpF,EAACA,EAAAoF,MAAA,EAAU,SAAc,aAAe,eACvE,CAEJ,CACF,OAAApF,CAEA,EAMsCkuB,iBAC/B,SAAWJ,CAAA,KACd,CAAAA,EACD,OAAAhoB,EAED,CAIA,IAA0BiQ,EAArBqY,EAAON,EAAWO,KAAG,MAAAtH,EAAAqH,EAAA5tB,MAAA,CAAAwnB,EAAAnQ,GAAA/R,GAAAnK,MAAA,KACxBoa,EAAA,EAAMA,EAAIgR,EAAM,EAAEhR,EACpBiS,EAAAA,CAAA,CAAAoG,CAAA,CAAArY,EAAA,EAGF,OAAAiS,CAEA,EAQyDjL,UAClD,SAAK7W,CAAA,CAAAwhB,CAAA,CAAA9qB,CAAA,CAAAyJ,CAAA,KACR,CAAAH,EAAA,CACAwhB,GAAAA,EAAAV,IAAA,CAAApqB,EAAAsJ,GACD,MAED,KAEAooB,EAAAxoB,GACAwa,IAAI,CAAAiO,WAAA,GACUC,EAAc,UAAc,CACxC9G,GAAUA,EAASV,IAAI,CAAApqB,EAAU0xB,EAAI,IACvCA,EAAAA,EAAAte,MAAA,CAAAse,EAAAG,OAAA,MAGAH,CAAAA,EAAAte,MAAA,CAAYwe,EAECF,EAAAG,OAAA,WAAuB,CAClC3oB,GAAAyU,GAAA,kBAA0B+T,EAAAI,GAAS,EACnChH,GAAUA,EAASV,IAAI,CAAApqB,EAAU,IAAI,KACvC0xB,EAAAA,EAAAte,MAAA,CAAAse,EAAAG,OAAA,OAUoB,IAAlBvoB,EAAIogB,OAAA,UAAcjgB,MAAAA,GACnBioB,CAAAA,EAAAjoB,WAAA,CAAAA,CAAA,EAMkB,mBAAjBH,EAAIyoB,SAAS,GAAI,MACjBL,EAAAte,MAAO,CAAK,KACblK,GAAAwa,IAAA,CAAAsO,cAAA,CAAAN,EAAAE,IAGHF,EAAAI,GAAA,CAAAxoB,CAEA,EAO8C0oB,eAClC,SAAON,CAAA,CAASE,CAAc,EACxC,IAAIK,EAAM/oB,GAAKwb,QAAO,CAAAwN,aAAe,OACrCD,CAAAA,EAAI7rB,KAAK,CAAC+B,KAAI,CAAG8pB,EAAI7rB,KAAM,CAAAgC,MAAM,OACjC6pB,EAAI7rB,KAAK,CAAC6I,IAAA,CAAAgjB,EAAW7rB,KAAA,CAAA4I,GAAA,SACrBijB,EAAI7rB,KAAA,CAAA+rB,QAAY,YAChBF,EAAAG,WAAe,CAACV,GAChBxoB,GAAAwb,QAAA,CAAA2N,aAAA,SAAAD,WAAA,CAAAH,GAKyBP,EAAAte,MACvB,YACAwe,IACAK,EAAA7c,UAAU,CAAAkd,WAAA,CAAAL,GACZA,EAAA,KAGF,EAUgEM,eACpD,SAAWjjB,CAAE,CAAAwb,CAAA,CAAAoG,CAAA,CAAAsB,CAAA,EAMvB,IAAAC,EAAoB,GAAAC,EAAA,EAAAC,EAAArjB,CAJpBA,EAAIA,GAAA,EAAmB,EAIH1L,MAAA,UACdgvB,GAAE,CACJ,EAAAF,IAAqBC,GAAsC7H,GACzDA,EAAA2H,EAAA1f,MAAA,UAAAqY,CAAA,EAEF,OAAAA,CACD,GAGH,CAAsB,GACpB,CAAAuH,EAAY,CACZ7H,GAAAA,EAAA2H,GACD,MAED,GACErD,OAAA,UAAkBpE,CAAA,CAAA1R,CAAA,EACC,GACjB,CAAA0R,GAAA,CAAAA,EAAAtmB,IAAA,EACAkuB,IACD,MACD,IACiBlP,IAAG,CAAAuN,QAAa,CAAAjG,EAAEtmB,IAAK,CAAEwsB,GACxC2B,UAAU,CAAA7H,EAAA,SAAAI,CAAiB,CAAA0H,CAAM,CAAG,CACpCA,GAAAL,CAAAA,CAAsB,CAAKnZ,EAAA,CAAA8R,CAAA,EAC3BoH,GAAAA,EAAAxH,EAAAI,EAAA0H,GACFF,GACF,EACF,EAEA,EAO8DG,wBACzC,SAAOhvB,CAAO,CAAA/D,CAAA,CAAc8qB,CAAO,EAAe,IAAEkI,EAAe9pB,GAAK6U,MAAA,CAAAkV,aAAA,CAAAlgB,MAAA,UAAAW,CAAA,EAAE,QAAA3P,CAAA,CAAA2P,EAAA,GAClCxK,GAAEwa,IAAO,CAAA6O,cAAW,CAAAS,EAAA7iB,GAAA,UAAAuD,CAAA,EAAM,OAAA3P,CAAU,CAAA2P,EAAA,GAC7F,SAAIwf,CAAW,EACf,IAAA5jB,EAAa,GAA8B0jB,EACjC5D,OAAO,UAAA1b,CAAa,CAAA4F,CAAM,EAClChK,CAAA,CAAAoE,EAAY,CAAAwf,CAAe,CAAA5Z,EAAA,CAC7BtZ,GAAAA,CAAAA,CAAA,CAAA0T,EAAA,CAAAwf,CAAA,CAAA5Z,EAAA,CACA,GACFwR,GAAAA,EAAAxb,EACF,EAEA,EAQ8C6jB,gBACjC,SAAAC,CAAc,CAAAtI,CAAA,EAEL,SACd8H,GAAE,CACJ,EAAAS,IAAqBC,GACtBxI,GAAAA,EAAAyI,EAGH,CAIA,IAAIA,EAAc,GAAAF,EAAA,EAAAC,EAAAF,CAVlBA,EAASA,GAAW,IAUFxvB,MAAA,IAChB,CAAA0vB,EAAY,CACZxI,GAAAA,EAAAyI,GACD,MAED,GACMnE,OAAO,UAAQvlB,CAAA,CAAAyP,CAAA,EACjBzP,GAAIA,EAAAkiB,MAAO,CAA6B,IACtC7iB,GAAA8iB,OAAA,CAAAniB,EAAkB,SAAS2pB,CAAA,EAC3BD,CAAA,CAAAja,EAAA,CAAAka,EACFZ,GACF,IAGEW,CAAA,CAAAja,EAAA,CAAAzP,EACD+oB,IAEL,EAEA,EASoDa,iBAC9C,SAAAC,CAAA,CAAAlwB,CAAA,CAAAmwB,CAAA,EACJ,IAAI5vB,SAAmC,GAC9B2vB,IAAAA,EAAW9vB,MAAA,CACnB8vB,CAAA,KAEClwB,IACEA,EAAQ2E,KAAA,EAAA3E,EAAc4E,MAAA,CAAA5E,EACjBowB,WAAQ,CAAK,CAChBtG,EAAG9pB,EAAQ2E,KAAA,CAAM,EACnBolB,EAAA/pB,EAAA4E,MAAA,EACF,GAGE,OAAO5E,EAAQ2E,KAAA,CAChB,OAAA3E,EAAA4E,MAAA,GAGHrE,EAAI,IAAOmF,GAAS2qB,KAAA,CAAAH,EAAalwB,GACxB,SAAAmwB,GACR5vB,CAAAA,EAAA+vB,UAAA,CAAAH,CAAA,EAEH5vB,EAjBE,EA2BgEgwB,uBAC9C,SAAMhI,CAAQ,CAAAiI,CAAa,CAAAC,CAAA,KAC3CA,GAAajsB,MAAGC,OAAM,CAAAgsB,GAAiC,IACrD,IAAI9a,EAAA,EAAAgR,EAAa8J,EAAIrwB,MAAQ,CAAAuV,EAAAgR,EAAAhR,IAC3B8a,CAAA,CAAW9a,EAAC,GAAA4S,GACbiI,CAAAA,CAAA,CAAAC,CAAA,CAAA9a,EAAA,EAAA4S,CAAA,CAAAkI,CAAA,CAAA9a,EAAA,EAGP,EAQgC+a,oBAChB,UAAS,CACzB,OAAAhrB,GAAAwb,QAAA,CAAAwN,aAAA,UAEA,EAOoCiC,kBAC9B,SAAmBtnB,CAAK,EAC5B,IAAAunB,EAAelrB,GAAGwa,IAAO,CAAAwQ,mBAAK,GAIhC,OAHEE,EAAUjsB,KAAA,CAAM0E,EAAG1E,KAAO,CAC1BisB,EAAUhsB,MAAA,CAAAyE,EAAWzE,MAAM,CAC3BgsB,EAAOpO,UAAA,OAAAG,SAAA,CAAAtZ,EAAA,KACTunB,CAEA,EAS+C1jB,UACtC,SAAS2jB,CAAA,CAAUtrB,CAAA,CAAAurB,CAAW,EACvC,OAAAD,EAAA3jB,SAAA,UAAA3H,EAAAurB,EAEA,EAMwB3C,YACf,UAAO,CAChB,OAAAzoB,GAAAwb,QAAA,CAAAwN,aAAA,OAEA,EASiDqC,0BAC/C,SAAwBnjB,CAAA,CAAAC,CAAA,CAAAmjB,CAAA,EACjB,MACH,CACFpjB,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CAAGD,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CACzBD,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CAAGD,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CACzBD,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CAAGD,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CACzBD,CAAA,IAAAC,CAAQ,IAAMD,CAAA,CAAE,GAAKC,CAAA,CAAE,GACvBmjB,EAAQ,EAAIpjB,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CAAGD,CAAC,CAAC,EAAE,CAAGC,CAAC,CAAC,EAAE,CAAGD,CAAC,CAAC,EAAE,CAC7CojB,EAAA,EAAApjB,CAAA,IAAAC,CAAA,IAAAD,CAAA,IAAAC,CAAA,IAAAD,CAAA,IACH,EASyBqjB,YACnB,SAAcrjB,CAAC,CAAC,CAKpB,IAAAob,EAAO5J,EAAAxR,CAAA,IAAAA,CAAA,KAAAsjB,EAAA7R,EAAAzR,CAAA,OAAAyR,EAAAzR,CAAA,OAAAjD,EAAAwU,EAAA+R,GAAAtmB,EAAA,CAAAgD,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAAAjD,EAAA,MACL,CACAqe,MAAAA,EAAQ1J,EACR3U,OAAQA,EACRC,OAAOA,EACPumB,MAAOA,EALFvjB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAsjB,GAKE5R,EACP8R,MAAA,EACAC,WAAYzjB,CAAC,CAAC,EAAE,CAClB0jB,WAAA1jB,CAAA,IAGF,EAUoC2jB,iBACrB,SAAOvxB,CAAA,KAClB,CAAAA,EAAOgpB,KAAO,CACf,OAAAtjB,GAAA6e,OAAA,CAAAvf,MAAA,EACD,CAGA,IAAAwsB,EAAO9rB,GAAAwa,IAAA,CAAAjB,gBAAA,CAAAjf,EAAAgpB,KAAA,EAAAD,EAAArjB,GAAAwa,IAAA,CAAA6I,GAAA,CAAAyI,GAAA/Q,EAAA/a,GAAAwa,IAAA,CAAAO,GAAA,CAAA+Q,GAAA,MAAC,CAAKzI,EAAKtI,EAAM,CAAAA,EAAKsI,EAAG,EAAE,EACpC,EAmBwC0I,qBACzB,SAAOzxB,CAAc,EAEhB,IACZ2K,EAAQ,KAAwB,IAAhB3K,EAAC2K,MAAS,CAAM,EAAA3K,EAAA2K,MAAA,CAAAC,EAAA,SAAA5K,EAAA4K,MAAA,GAAA5K,EAAA4K,MAAA,CAAA8mB,EAAA,CAChC1xB,EAAA2xB,KAAA,EAAAhnB,EAAAA,CAAA,CACA,EACA,EACA3K,EAAA4xB,KAAA,EAAAhnB,EAAAA,CAAA,CACA,EACF,EAEJ,CAAA8f,EAAYhlB,GAAOwa,IAAA,CAAA6Q,yBAAA,CAAA9R,EAAAvZ,GAAAwa,IAAA,CAAAjB,gBAAA,CAarB,OAZIjf,EAAAmxB,KAAA,EAEEO,CAAAA,EAAChH,EAAAgH,EAAA,CAAG,EAAG,EAA2C7I,KAAAgJ,GAAA,CAAA5S,EAAAjf,EAAAmxB,KAAA,GAClD,EACH,MAECnxB,EAAAoxB,KAAA,EAEEM,CAAAA,EAAChH,EAAAgH,EAAA,CAAG,EAA2C7I,KAAAgJ,GAAA,CAAA5S,EAAAjf,EAAAoxB,KAAA,GAAG,EAClD,EACH,MAEHM,CAEA,EAkBiCI,cAC3B,SAAS9xB,CAAA,MAAC+xB,EAAA,CAAG,EAAG,EAAG,EAAG,EAAyB/xB,EAAQqxB,UAAU,EAAI,EACrErxB,EAAAsxB,UAAkB,EAAK,EAC3B,CAAA5G,EAAYhlB,GAAOwa,IAAA,CAAA6Q,yBAAA,CAQrB,OAPI/wB,EAAAgpB,KAAS,EACV+I,CAAAA,EAAArH,EAAAqH,EAAArsB,GAAAwa,IAAA,CAAAqR,gBAAA,CAAAvxB,GAAA,EAGCA,CAAAA,IAAAA,EAAA2K,MAAS,EAAS3K,IAAAA,EAAQ4K,MAAY,EAAA5K,EAAAmxB,KAAqB,EAAAnxB,EAAAoxB,KAAA,EAAApxB,EAAA2xB,KAAA,EAAA3xB,EAAA4xB,KAAA,GAC5DG,CAAAA,EAAArH,EAAAqH,EAAArsB,GAAAwa,IAAA,CAAAuR,oBAAA,CAAAzxB,GAAA,EAEH+xB,CAEA,EAMwCC,qBACtB,SAAAtxB,CAAA,EAChBA,EAAOiK,MAAM,CAAG,EAChBjK,EAAOkK,MAAK,CAAG,EACflK,EAAOywB,KAAK,CAAG,EACfzwB,EAAO0wB,KAAK,CAAG,EACf1wB,EAAOixB,KAAK,CAAG,GACfjxB,EAAOkxB,KAAA,CAAO,GAChBlxB,EAAAuxB,MAAA,GAEA,EAOuCC,oBAC9B,SAAAxxB,CAAA,QACL,CACAiK,OAAQjK,EAAOiK,MAAM,CACrBC,OAAOlK,EAAOkK,MAAK,CACnBumB,MAAOzwB,EAAOywB,KAAK,CACnBC,MAAO1wB,EAAO0wB,KAAK,CACnBpI,MAAMtoB,EAAOsoB,KAAI,CACjBvd,KAAA/K,EAAO+K,IAAO,CACdkmB,MAAOjxB,EAAOixB,KAAK,CACnBC,MAAKlxB,EAAOkxB,KAAG,CACjBpmB,IAAA9K,EAAA8K,GAAA,CAGF,EAQ8C2mB,cAE5C,SAAA5P,CAAA,CAAAuH,CAAA,CAAAC,CAAA,CAAAqI,CAAA,EAGEA,EAAQ,IACNtI,EAAAsI,EACFtI,GACKsI,EAEJtI,EAAA,EAECC,EAAAqI,EACFrI,GACKqI,EAEJrI,EAAA,GAOH,IAAApU,EAAA0c,EAAA,GAAAC,EAAA/P,EAAAgQ,YAA2D,CAAAzI,EAAAC,EAAAqI,EAAAA,GAAA,EAAAA,EAAAA,GAAA,GAAAI,EAAAF,EAAA/kB,IAAA,CAAAnN,MAAA,CAChC,IACzBuV,EAAA,EAAOA,EAAA6c,GAGLH,CAAO,GADTA,CAAAA,EAAII,EADallB,IAAA,CAAAoI,EAAA,EACM,GAFhBA,GAAU,GAUrB,OADE2c,EAAO,KACTD,CAEA,EAKuDK,kCAC3B,SAASC,CAAO,CAAS,CAGnD,IAAiDC,EAA7CC,EAAA,OAAoBC,EAAA,MAAiBC,EAAQ,MAAAC,EAAAL,EAAA1E,KAAA,MAa1C,OAZL+E,GAAcA,EAAoB5yB,MAAA,GAEhCyyB,SADFA,CAAAA,EAAIG,EAA0BC,GAAA,KACpBJ,UAAAA,GACRD,EAAAC,EACFA,EACS,QACPG,EAAQ5yB,MAAoB,EAC7BwyB,CAAAA,EAAAI,EAAAC,GAAA,KAIHH,EAASF,SAAAA,EAAmBA,EAAM/Y,KAAK,CAAC,EAAG,GAAK,MAAM,CACtDkZ,EAAOH,SAAAA,EAAAA,EAAA/Y,KAAA,aACL,CACAgZ,YAAQA,EACRC,OAAQA,EACVC,OAAAA,CACF,CAEA,EAY2CG,qBAC3B,SAAAC,CAAkB,EAChCA,CAAAA,EAAK,CAAAA,GAAY,IAAAC,WAAA,IAIR1tB,GAAOkf,eAAe,CAACuO,EAAW,EAC1C,OAAAztB,GAAAkf,eAAA,CAAAuO,EAAA,CAHDztB,GACSkf,eAAO,GAKlB,EAS2CyO,gBACrC,SAAkBC,CAAA,CAAIC,CAAC,EAE3B,IAAAC,EAAO3K,KAAA1J,IAAA,CAAAoU,EAAAD,GAAA,MAAK,CAAwBxJ,EAAGjB,KAAAvI,KAAA,CAAAkT,GAAezJ,EAA/ClB,KAAAvI,KAAA,CAAAiT,EAAAC,EACT,CAEA,EAAoCC,SAClC,SAAervB,CAAC,CAAAzD,CAAK,CAAK0D,CAAI,EAChC,OAAAwkB,KAAAxkB,GAAA,CAAAD,EAAAykB,KAAAzkB,GAAA,CAAAzD,EAAA0D,GAEA,EAa8CqvB,eAChC,SAAInL,CAAA,CAAYiI,CAAQ,EACtC,OAAA3H,KAAAzkB,GAAA,CAAAosB,EAAA7rB,KAAA,CAAA4jB,EAAA5jB,KAAA,CAAA6rB,EAAA5rB,MAAA,CAAA2jB,EAAA3jB,MAAA,CAEA,EAagD+uB,iBAClC,SAAIpL,CAAY,CAAAiI,CAAQ,CAAO,CAC7C,OAAA3H,KAAAxkB,GAAA,CAAAmsB,EAAA7rB,KAAA,CAAA4jB,EAAA5jB,KAAA,CAAA6rB,EAAA5rB,MAAA,CAAA2jB,EAAA3jB,MAAA,CAEA,EAOiCgvB,YACxB,SAAArH,CAAY,CAAU,CAAoB,MAC/C,UAAcA,EAAK5f,GAAQ,UAAOhM,CAAO,EACxC,OAAK+E,GAAOwa,IAAA,CAAAnB,OAAA,CAAApe,EAAA+E,GAAA6U,MAAA,CAAAsZ,mBAAA,CACjB,GAAAC,IAAA,SAEA,EAYuDC,0BAC/B,SAAKxzB,CAAA,CAAAgsB,CAAgB,EAE3C,IAAAyH,EAAYtuB,GAAAwa,IAAA,CAAA4M,eAAuB,CAAQP,GAAA0H,EAAAvuB,GAAAwa,IAAA,CAAA6Q,yBAAA,CAAAiD,EAAAzzB,EAAA2zB,aAAA,IAC7CxuB,GAAAwa,IAAA,CAAAiU,sBAAA,CAAA5zB,EAAA0zB,EAEA,EASkDG,qBACpC,SAAA7zB,CAAA,CACVgsB,CACA,EAEJ7mB,GAAAwa,IAAA,CAAAiU,sBAAA,CAAA5zB,EAAAmF,GAAAwa,IAAA,CAAA6Q,yBAAA,CAAAxE,EAAAhsB,EAAA2zB,aAAA,IAEA,EAMoDC,uBACpC,SAAY5zB,CAAA,CAAWgsB,CAAC,EAEtC,IAAAvsB,EAAY0F,GAAQwa,IAAA,CAAA+Q,WAAA,CAAA1E,GAAA8H,EAAA,IAAA3uB,GAAAmkB,KAAA,CAAA7pB,EAAAqxB,UAAA,CAAArxB,EAAAsxB,UAAA,CACpB/wB,CAAAA,EAAOoxB,KAAK,CAAG,GACfpxB,EAAOqxB,KAAI,IACXrxB,EAAOgL,GAAG,CAAC,SAAUvL,EAAQ2K,MAAM,EACnCpK,EAAOgL,GAAA,UAAQvL,EAAa4K,MAAA,EAC5BrK,EAAO4wB,KAAK,CAAGnxB,EAAQmxB,KAAK,CAC5B5wB,EAAO6wB,KAAK,CAAGpxB,EAAQoxB,KAAK,CAC5B7wB,EAAOyoB,KAAA,CAAAhpB,EAAAgpB,KAAoB,CAC7BzoB,EAAA+zB,mBAAA,CAAAD,EAAA,kBAEA,EAgBqDE,mBACxC,SAAW5vB,CAAO,CAAAC,CAAS,CAAA5E,CAClC,EAAS,IACPw0B,EAAA7vB,EAAA,EAAA8vB,EAAA7vB,EAAA,EAkBN8vB,EAAOhvB,GAAAwa,IAAA,CAAAuR,oBAAA,CAAAzxB,GAAA20B,EAAAjvB,GAAAwa,IAAA,CAAAoM,yBAAA,CAlBD,EAEExC,EAAG,CAAC0K,EACNzK,EAAA,CAAA0K,CACA,GAEE3K,EAAG0K,EACLzK,EAAA,CAAA0K,CACA,GAEE3K,EAAG,CAAA0K,EACLzK,EAAA0K,CACA,GAEE3K,EAAG0K,EACLzK,EAAA0K,CACF,EAEJ,CAAOC,GAAA,MACF,CACH5K,EAAG6K,EAAKhwB,KAAA,CACVolB,EAAA4K,EAAA/vB,MAAA,CAGF,EAmBkCgwB,eACpB,SAAIC,CAAA,CAAAC,CAAA,EAChB,IAAIlnB,EAAEinB,EAAAhnB,EAAQinB,CACZlnB,CAAAA,EAAAomB,QAAA,EAAY,CAAAnmB,EAAAmmB,QAAA,GAEZpmB,EAAIknB,EACLjnB,EAAAgnB,GASDnvB,GAAAwa,IAAA,CAAAiU,sBAAA,CAAAtmB,EAAAnI,GAAAwa,IAAA,CAAA6Q,yBAAoD,CAAArrB,GAAAwa,IAAA,CAAA4M,eAAA,CAAAlf,EAAAmnB,mBAAA,IAAAlnB,EAAAknB,mBAAA,KAEpD,IAAIf,EAAUpmB,EAAAomB,QAAA,EAAAnmB,EAAAmmB,QAAA,CAIU,OAHtBA,GAEDpmB,CAAAA,EAAAomB,QAAA,CAAAnmB,EAAAmmB,QAAA,KACwB,IAAAtuB,GAAA2qB,KAAA,EAAIziB,EAAA,EAAeonB,SAAUnnB,EAASmmB,SAAAA,CACjE,EAEA,EAO8DiB,gBAC5D,SAAeC,CAAgB,CAAAC,CAAK,CAAAC,CAAA,EAatC,OAZEA,EAAOA,GAAoB,GAY7BF,EAAA9O,IAAA,GAAA+O,EAAA/O,IAAA,EAAA8O,EAAAG,MAAA,GAAAF,EAAAE,MAAA,EAAAH,EAAApa,WAAA,GAAAqa,EAAAra,WAAA,EAAAoa,EAAAryB,QAAA,GAAAsyB,EAAAtyB,QAAA,EAAAqyB,EAAA/B,UAAA,GAAAgC,EAAAhC,UAAA,EAAA+B,EAAAI,UAAA,GAAAH,EAAAG,UAAA,EAAAJ,EAAAK,SAAA,GAAAJ,EAAAI,SAAA,EAAAL,EAAAM,MAAA,GAAAL,EAAAK,MAAA,EAAAJ,GAAAF,CAAAA,EAAAO,QAAA,GAAAN,EAAAM,QAAA,EAAAP,EAAAQ,SAAA,GAAAP,EAAAO,SAAA,EAAAR,EAAAS,WAAA,GAAAR,EAAAQ,WAAA,CAEA,EASsCC,cACpC,SAAAj2B,CAAA,CAAAk2B,CAAA,EAK2C,IACzC,IAFFl2B,EAAA+F,GAAAwa,IAAA,CAAA3f,MAA4B,CAAA+K,KAAA,CAAA3L,EAAA,IAAAm2B,EAAAD,EAAA5H,KAAA,OAAA8H,EAAA,GAAAb,EAAA,GAAAc,EAAA,GAEtBrgB,EAAC,EAAMA,EAAGmgB,EAAE11B,MAAA,CAAAuV,IAAA,IACd,CAAAhW,CAAA,CAAAgW,EAAA,EAEAogB,GAASD,CAAA,CAAAngB,EAAA,CAAAvV,MAAA,CACV,SACD,IAEE,IAAA61B,EAAA,EAAAA,EAAAH,CAAA,CAAAngB,EAAA,CAAAvV,MAAA,CAAA61B,IAAA,CACAF,IACA,IAAAZ,EAAAx1B,CAAA,CAAAgW,EAAA,CAAAsgB,EAAA,CAEEd,IACkBzvB,GAAAwa,IAAA,CAAA+U,eAAA,CAAAC,EAAAC,EAAA,IACCa,EACR76B,IAAA,EACP+6B,MAAKH,EACLI,IAAAJ,EAAO,EACTnzB,MAAAuyB,CACF,GAICa,CAAA,CAAAA,EAAA51B,MAAA,IAAA+1B,GAAA,IAGLjB,EAAAC,GAAA,EACF,CACA,CACF,OAAAa,CAEA,EASwCI,gBAC3B,SAAQz2B,CAAS,CAAAk2B,CAAA,KAC1B,CAAArxB,MAAOC,OAAA,CAAA9E,GACR,OAAAA,CACD,CAG2C,IACzC,IAFFm2B,EAAAD,EAAA5H,KAAA,OAA4B8H,EAAA,GAAAM,EAAA,EAAAC,EAAA,GAE1B3gB,EAAA,EAAAA,EAAAmgB,EAAA11B,MAAA,CAAAuV,IAC8C,IAC5C,IAAAsgB,EAAA,EAAAA,EAAAH,CAAA,CAAAngB,EAAA,CAAAvV,MAAA,CAAA61B,IACAF,IAIEp2B,CAAA,CAAA02B,EAAA,EAAA12B,CAAA,CAAA02B,EAAA,CAAAH,KAAA,EAAkDH,GAAAA,EAAAp2B,CAAA,CAAA02B,EAAA,CAAAF,GAAA,GAElDG,CAAA,CAAA3gB,EAAA,CAAA2gB,CAAA,CAAA3gB,EAAA,KAEA2gB,CAAA,CAAA3gB,EAAA,CAAAsgB,EAAA,CAAA1b,OAAAgc,MAAA,IAAA52B,CAAA,CAAA02B,EAAA,CAAAzzB,KAAA,EAEEmzB,IAAAp2B,CAAA,CAAA02B,EAAA,CAAAF,GAAA,IACDE,KAKT,OAAAC,CACF,CACC,EACS,UACN,CACiB,IACfE,EAAGhyB,MAAAgW,SAAA,CAAAsZ,IAAA,CAAA2C,EAAA,CACHC,EAAG,EACHlE,EAAG,EACHmE,EAAG,EACH3M,EAAG,EACHiM,EAAG,EACH1K,EAAG,EACHqL,EAAG,EACHxK,EAAG,EAELxe,EAAA,CAAmB,EAAAipB,EACd,CACHH,EAAG,IACLI,EAAA,GACJ,EAiFyC,SACnCC,EAAgBC,CAAI,CAAAC,CACpB,CAAAC,CAAA,CAAKC,CAAA,CAAK,CACd,IAAIC,EAAAvO,KAAUzJ,KAAA,CAAA6X,EAAAD,GAAAK,EAAAxO,KAAAzJ,KAAA,CAAA+X,EAAAD,UAAA,GACZE,EAEGC,EAAAD,EAEJ,EAAAvO,KAAAC,EAAA,CAAAsO,CAAAA,EAAAC,CAAA,CACH,CAiTwC,SAC/BC,EAAWC,CAAK,CAACC,CAAA,CAAMC,CAAA,CAAAC,CAAK,CAAC,CACtC,OAAA7O,KAAA1J,IAAA,EAAAsY,EAAAF,CAAA,EAAAE,CAAAA,EAAAF,CAAA,GAAAG,EAAAF,CAAA,EAAAE,CAAAA,EAAAF,CAAA,EAEA,CAsEwC,SAClCG,EAAQC,CAAA,CAAAL,CAAA,CAAAC,CAAA,MACZnxB,EAAewxB,EADDC,EAAG,CAAIhO,EAAGyN,EAAMxN,EAAGyN,CACjC,EAAKO,EAAU,EAAwB,IACrCF,EAAI,EAAAA,GAAS,IAAOA,GAAA,EACpBxxB,EAAAuxB,EAAUC,EAAA,KACVE,GAAQT,EAAAQ,EAAAhO,CAAA,CAAAgO,EAAA/N,CAAA,CAAA1jB,EAAAyjB,CAAA,CAAAzjB,EAAA0jB,CAAA,EACV+N,EAAAzxB,EAEF,OAAA0xB,CAEA,CAuCmC,SAC7BC,EAAuB7H,CAAA,CAAK,CAIF,IAC5B,IAHE1tB,EAE0Bm1B,EAAAK,EAAAC,EAF1BC,EAAA,EAAAxR,EAAAwJ,EAAA/vB,MAAA,CAEJm3B,EAAK,EAAIC,EAAI,EAAGC,EAAI,EAAKC,EAAK,EAAAU,EAAA,GAC5BziB,EAAA,EAAUA,EAAKgR,EAAEhR,IAAA,CAMC,OALPsiB,EACN,CACHnO,EAAGyN,EACHxN,EAAAyN,EACFa,QAAA51B,CAJAA,EAAA0tB,CAAW,CAAAxa,EAAA,CAIX,KAEElT,CAAK,SACH,IACAw1B,EAAK73B,MAAK,CAAQ,EAClBq3B,EAAKF,EAAK90B,CAAO,CAAC,EAAE,CACpBi1B,EAAMF,EAAA/0B,CAAA,IACR,KAAK,KACH,IACAw1B,EAAK73B,MAAU,CAAAk3B,EAAAC,EAAAC,EAAA/0B,CAAA,IAAAA,CAAA,KACf80B,EAAK90B,CAAO,CAAC,EAAE,CACf+0B,EAAM/0B,CAAA,IACR,KAAK,KACH,IAUAm1B,EAAAU,SAzIeC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,SACnB,SAASC,CAAI,EACb,IAAAlE,EAdJzI,EAcW2M,EAAAA,EAAAjE,EAXX,EAWWiE,EAAAA,EAXX,GAWWA,CAXX3M,EAWW4M,EARX,EAQWD,EARX,GAQWA,CARX3M,EAAA,GAQW2M,CARX3M,EAQW6M,EALX,GAKWF,CALX3M,EAAA,GAKW2M,CALX3M,EAAA,GAKW2M,CALX3M,EAKW,MACF,CACHtC,EAAG+O,EAAMhE,EAAK8D,EAAM7D,EAAK2D,EAAMO,EAAKT,EAAMU,EAC5ClP,EAAA+O,EAAAjE,EAAA+D,EAAA9D,EAAA4D,EAAAM,EAAAR,EAAAS,CACF,CACF,CAEA,EAiIU1B,EACAC,EACA/0B,CAAU,GACV,CAAAA,CAAU,GACV,CAAAA,CAAU,GACV,CAAAA,CAAU,GACV,CAAAA,CAAU,GACV,CAAAA,CAAU,KAEZy1B,EAASgB,SAzIOX,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,SACpB,SAAWC,CAAI,EAKf,IAAAI,EAAO,EAAKJ,EACd,OAAAlQ,KAAAzJ,KAAA,CAD8B,EAAA+Z,EAAAA,EAAAT,CAAAA,EAAAF,CAAA,IAAAW,EAAAJ,EAAAH,CAAAA,EAAAF,CAAA,IAAAK,EAAAA,EAAAD,CAAAA,EAAAF,CAAA,IAAAO,EAAAA,EAAAV,CAAAA,EAAAF,CAAA,IAAAY,EAAAJ,EAAAJ,CAAAA,EAAAF,CAAA,IAAAM,EAAAA,EAAAF,CAAAA,EAAAF,CAAA,EAEhC,CAEA,EA+H4BpB,EAAAC,EAAA/0B,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACpBw1B,EAASL,QAAA,CAAWA,EACpBK,EAASC,WAAS,CAAAA,EAClBD,EAAK73B,MAAU,CAAAu3B,EAAAC,EAAAL,EAAAC,GACfD,EAAK90B,CAAO,CAAC,EAAE,CACf+0B,EAAM/0B,CAAA,IACR,KAAK,KACH,IAQAm1B,EAAAwB,SAjIeb,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,SACnB,SAASG,CAAI,EACb,IAAAlE,EAbJzI,EAaW2M,EAAAjE,EATX,EASWiE,EATX,GASWA,CATX3M,EASW4M,EALX,GAKWD,CALX3M,EAAA,GAKW2M,CALX3M,EAKW,MACF,CACHtC,EAAG6O,EAAM9D,EAAK4D,EAAM3D,EAAKyD,EAAMS,EACjCjP,EAAA6O,EAAA/D,EAAA6D,EAAA5D,EAAA0D,EAAAQ,CACF,CACF,CAEA,EAyHUzB,EACAC,EACA/0B,CAAU,GACV,CAAAA,CAAU,GACV,CAAAA,CAAU,GACV,CAAAA,CAAU,KAEZy1B,EAASmB,SA/HOd,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,SACpB,SAAWG,CAAI,EAGf,IAAAI,EAAO,EAAKJ,EACd,OAAAlQ,KAAAzJ,KAAA,CAD8B,EAAA+Z,EAAAT,CAAAA,EAAAF,CAAA,IAAAO,EAAAH,CAAAA,EAAAF,CAAA,IAAAS,EAAAV,CAAAA,EAAAF,CAAA,IAAAQ,EAAAJ,CAAAA,EAAAF,CAAA,EAEhC,CAGA,EAsH4BlB,EAAAC,EAAA/0B,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACpBw1B,EAASL,QAAA,CAAWA,EACpBK,EAASC,WAAS,CAAAA,EAClBD,EAAK73B,MAAU,CAAAu3B,EAAAC,EAAAL,EAAAC,GACfD,EAAK90B,CAAO,CAAC,EAAE,CACf+0B,EAAM/0B,CAAA,IACR,KAAK,KACA,QACH,IAEAw1B,EAASqB,KAAK,CAAG7B,EACjBQ,EAASsB,KAAA,CAAM7B,EACfO,EAAK73B,MAAA,CAAAk3B,EAAAC,EAAAC,EAAAC,EAAAC,GACLH,EAAKE,EACLD,EAAME,CAEV,CACAS,GAAUF,EAAA73B,MAAA,CACZg4B,EAAAj9B,IAAA,CAAA88B,EACA,CAEF,OAFYG,EAAEj9B,IAAA,EAAqBiF,OAAG+3B,EAAIrO,EAAGyN,EAAGxN,EAAAyN,CAC9C,GACFY,CAEA,CAiM0C1yB,GACxCwa,IAAO,CAAAsZ,QAAS,CAAI,SAAUC,CAAS,SAAEA,EAAO9sB,GAAQ,UAAK+sB,CAAA,EAAS,OAAKA,EAAA5F,IAAA,KAC7E,GAAAA,IAAA,KACA,EACApuB,GAAOwa,IAAI,CAACyZ,SAAA,CAnJmB,SAEzBC,CAAS,CAAE,CAaX,IAAAC,EAAAC,EAAAnsB,EAAAosB,EACJ5J,EADI/tB,EAAA,GAAAkpB,EAAA,GAAA0O,EAAAt0B,GAAA0e,aAAA,CAAA6V,EAAA,sDAAAC,EAAA,IAAAD,EAAA,IAAAv0B,GAAAye,QAAA,CAAAgW,EAAA,SAAAz0B,GAAAye,QAAA,KAAAiW,EAAA,OAAAF,EAAA,IAAAA,EAAA,IAAAA,EAAAC,EAAAA,EAAAD,EAAA,KAAAD,EAAA,SACkC,GACpC,CAAAL,GAAO,CAAAA,EAAAjsB,KAAA,CACR,OAAAvL,CACD,CAEA+tB,EAAKyJ,EAAWjsB,KAAA,iCAA+C,IAC7D,IAAA0sB,EAAA1kB,EAAA,EAAqBgR,EAAAwJ,EAAA/vB,MAAA,CAAAuV,EAAAgR,EAAAhR,IAAA,CAGrBokB,EAAOF,CADPA,EAAY1J,CAAA,CAAAxa,EAAA,EACIkE,KAAA,IAAApN,IAAA,GAEhB6e,EAAIlrB,MAAA,CAAU,EACd,IAKS0G,EALTuxB,EAAAwB,EAAehM,MAAA,IAEoB,GAFpBwM,EAAC,CAAQhC,EAExB,CACEA,MAAAA,EAAAjF,WAAA,GACiE,KACtDtsB,EAAOszB,EAAsB/M,IAAA,CAAA0M,IAAA,IACpC,IAAAO,EAAO,EAAIA,EAACxzB,EAAO1G,MAAA,CAAAk6B,IACrBhP,EAAAnwB,IAAA,CAAA2L,CAAA,CAAAwzB,EAAA,OAImC,KACnC3sB,EAAOqsB,EAAK3M,IAAK,CAAC0M,IACpBzO,EAAAnwB,IAAA,CAAAwS,CAAA,IAGF,CAAqD,IACnD,IAAA2sB,EAAA,EAASC,EAAAjP,EAAWlrB,MAAS,CAAAk6B,EAAAC,EAAAD,IAE3BE,MADFV,EAAK7M,WAAe3B,CAAA,CAAAgP,EAAA,IAEnBD,EAAAl/B,IAAA,CAAA2+B,GAMH,IAAIW,EAAahE,CAAa,CAAA4B,EAAAjF,WAAe,IAAAsH,EAAA7D,CAAA,CAAAwB,EAAA,EAAAA,EAAA,GAC3CgC,EAAaj6B,MAAG,CAAO,EAAAq6B,EAAmD,IACxE,IAAAE,EAAO,EAAIC,EAACP,EAAAj6B,MAAA,CAAAu6B,EAAAC,EAAAD,GAAAF,EAAAr4B,EAACjH,IAAA,EAASk9B,EACtB,CAAArzB,MAAA,CAAAq1B,EAAUxgB,KAAA,CAAA8gB,EAAAA,EAAAF,KACZpC,EAAAqC,OAIDt4B,EAAAjH,IAAA,CAAAk/B,EACH,CAGF,OAAAj4B,CAAA,EAkFAsD,GAAOwa,IAAI,CAAC2a,eAAA,CAzkBmB,SAC7B1K,CAAA,EAKI,IAIA1tB,EAAAkT,EAAAmlB,EAEmBC,EAAGC,EAAAC,EANtBnR,EAAA,EAAAC,EAAA,EAAApD,EAAAwJ,EAAA/vB,MAAA,CAIAm3B,EAAA,EAAAC,EAAA,EAEJ0D,EAAgB,EAAK,CAAK,IACxBvlB,EAAA,EAAAA,EAAAgR,EAAY,EAAKhR,EAAA,CAEC,OADlBmlB,EAAU,GAERr4B,CADFA,EAAQ0tB,CAAO,CAACxa,EAAE,CAAAkE,KAAA,IACX,SACH,IACApX,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IACAD,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAM,IACR,KAAK,KACH,IACAA,CAAA,KAAgBqnB,CACb,KACH,IACArnB,CAAO,CAAC,EAAE,CAAG,IACbA,CAAI,IAAQsnB,EACZD,EAAArnB,CAAM,IACR,KAAK,KACH,IACAA,CAAA,KAAgBsnB,CACb,KACH,IACAtnB,CAAI,IAAQ,IACZsnB,EAAAtnB,CAAU,GAAG,CACbA,CAAO,CAAC,EAAE,CAAGqnB,EACbrnB,CAAM,IAAAsnB,EACR,KAAK,KACH,IACAtnB,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IACAD,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAK,CAAO,EAAC,CACb80B,EAAK90B,CAAO,CAAC,EAAE,CACf+0B,EAAM/0B,CAAA,IACR,KAAK,KACH,IACAA,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAO,CAAC,EAAE,EAAIsnB,EACdtnB,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAO,CAAC,EAAE,EAAIsnB,EACdtnB,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IACAiR,EAAWv4B,CAAO,CAAC,EAAE,CACrBw4B,EAAWx4B,CAAG,IACdqnB,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAM,IACR,KAAK,KACH,IACAA,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAO,CAAC,EAAE,EAAIsnB,EACdtnB,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IAEEgR,MAAAA,GAEAC,EAAW,EAAIlR,EAAIkR,EACrBC,EACK,EAAAlR,EAAAkR,IAIHD,EAAWlR,EACZmR,EAAAlR,GAEDD,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAU,GAAG,CACbA,CAAO,CAAC,EAAE,CAAG,IACbA,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CACvBA,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CACvBA,CAAO,CAAC,EAAE,CAAGA,CAAO,CAAC,EAAE,CACvBA,CAAO,CAAC,EAAE,CAAGA,CAAA,IACbA,CAAO,CAAC,EAAE,CAAGu4B,EACbv4B,CAAA,IAAAw4B,EAGAD,EAAWv4B,CAAO,CAAC,EAAE,CACrBw4B,EAAMx4B,CAAA,IACR,KAAK,KACH,IACAA,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAO,CAAC,EAAE,EAAIsnB,EACdtnB,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IACAiR,EAAWv4B,CAAO,CAAC,EAAE,CACrBw4B,EAAWx4B,CAAG,IACdqnB,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAM,IACR,KAAK,KACH,IACAA,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IACEgR,MAAAA,GAEAC,EAAW,EAAIlR,EAAIkR,EACrBC,EACK,EAAAlR,EAAAkR,IAIHD,EAAWlR,EACZmR,EAAAlR,GAEDtnB,CAAI,IAAQ,IACZqnB,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAU,GAAG,CACbA,CAAO,CAAC,EAAE,CAAGu4B,EACbv4B,CAAO,CAAC,EAAE,CAAGw4B,EACbx4B,CAAO,CAAC,EAAE,CAAGqnB,EACbrnB,CAAM,IAAAsnB,EACR,KAAK,KACH,IACAtnB,CAAO,CAAC,EAAE,KACVA,CAAO,CAAC,EAAE,EAAIqnB,EACdrnB,CAAA,KAAgBsnB,CACb,KACH,IACA+Q,EAAA,GACAI,EAAcA,EAAAl2B,MAAA,CAAAm2B,SA9KhBC,CAAK,CAAAC,CAAA,CAAO/P,CACZ,EAOiD,IACnD,IADGgQ,EAAIhQ,CAAO,IAAAiQ,EAAMjQ,CAAS,IAAMkQ,EAAMlQ,CAAK,GAAK,CAAAmQ,EAAAnQ,CAAA,IAAAoQ,EAAApQ,CAAA,IAAAqQ,EAAAC,SAnLnCC,CAAK,CAAAC,CAAA,CAAAR,CAAU,CAAAC,CAAA,CAAKE,CAClC,CAAAC,CAAQ,CAAAK,CAAO,CAAI,CAIvB,IAAAjT,EAAKD,KAASC,EAAA,CAAAkT,EAAAD,EAAAjT,EAAA,IAAAmT,EAAAv2B,GAAAwa,IAAA,CAAAO,GAAA,CAAAub,GAAAE,EAAAx2B,GAAAwa,IAAA,CAAA6I,GAAA,CAAAiT,GAAAG,EAAA,EAAAC,EAAA,EASVC,EAAK,CAAAH,EAAGL,EAAA,GAAAI,EAAAH,EAAA,GAAAQ,EAAA,CAAAJ,EAAAJ,EAAA,GAAAG,EAAAJ,EAAA,GAAAU,EAAAjB,CARZA,EAAKzS,KAAKtI,GAAG,CAAC+a,EAAA,EAQFA,EAAAkB,EAAAjB,CANZA,EAAI1S,KAAMtI,GAAA,CAAAgb,EAAA,EAMEA,EAAAkB,EAAAH,EAAAA,EAAAI,EAAAL,EAAAA,EAAAM,EAAAJ,EAAAC,EAAAD,EAAAE,EAAAD,EAAAE,EAAAE,EAAA,KACVD,EAAI,EAAI,CACR,IAAApR,EAAM1C,KAAA1J,IAAA,GAAAwd,EAAAJ,CAAAA,EAAAC,CAAA,GACNlB,GAAM/P,EACRgQ,GACKhQ,CAAA,MAGJqR,EAAA,CAAAnB,IAAAC,EAAA,MAAA7S,KAAA1J,IAAA,CAAAwd,EAAAJ,CAAAA,EAAAE,EAAAD,EAAAE,CAAA,EAED,CAOA,IAAIG,EAAAD,EAAUtB,EAAKgB,EAAAf,EAASuB,EAAG,CAAAF,EAAArB,EAAAc,EAAAf,EAAAyB,EAAAb,EAAAW,EAAAZ,EAAAa,EAAAjB,GAAAA,EAAAmB,EAAAf,EAAAY,EAAAX,EAAAY,EAAAhB,GAAAA,EAAAmB,EAAAlG,EAAA,KAAAsF,EAAAQ,CAAA,EAAAvB,EAAA,CAAAgB,EAAAQ,CAAA,EAAAvB,GAAA2B,EAAAnG,EAAA,CAAAsF,EAAAQ,CAAA,EAAAvB,EAAA,CAAAgB,EAAAQ,CAAA,EAAAvB,EAAA,EAAAc,EAAAQ,CAAA,EAAAvB,EAAA,EAAAgB,EAAAQ,CAAA,EAAAvB,EAC7BG,CAAU,IAAVA,GAAcwB,EAAA,EAChBA,GACS,EAAApU,EACO,IAAd4S,GAAcwB,EAAA,GACfA,CAAAA,GAAA,EAAApU,CAAA,EAQkC,IACjC,IADGqU,EAAWtU,KAAInI,IAAA,CAAAmI,KAAUtI,GAAK,CAAA2c,EAAApU,EAAA,IAAA1mB,EAAA,GAAAg7B,EAAAF,EAAAC,EAAAE,EAAA,IAAAxU,KAAApI,GAAA,CAAA2c,EAAA,GAAAvU,KAAApI,GAAA,CAAA2c,EAAA,GAAAvU,KAAApI,GAAA,CAAA2c,EAAA,GAAAE,EAAAL,EAAAG,EACjCznB,EAAO,EAAEA,EAAGwnB,EAAAxnB,IACZvT,CAAA,CAAAuT,EAAQ,CAAA4nB,SArEUC,CAAI,CAACF,CAAI,CAAApB,CACzB,CAAAD,CAAA,CAASX,CAAA,CAAAC,CAAO,CAAAwB,CAAK,CAAAC,CAAI,CAAAK,CAAA,CACzBlB,CAAA,CAAAC,CAAS,EASb,IAAAqB,EAAO/3B,GAAAwa,IAAA,CAAA6I,GAAA,CAAAyU,GAAAE,EAAAh4B,GAAAwa,IAAA,CAAAO,GAAA,CAAA+c,GAAAG,EAAAj4B,GAAAwa,IAAA,CAAA6I,GAAA,CAAAuU,GAAAM,EAAAl4B,GAAAwa,IAAA,CAAAO,GAAA,CAAA6c,GAAAzB,EAAAK,EAAAZ,EAAAqC,EAAA1B,EAAAV,EAAAqC,EAAAb,EAAAjB,EAAAG,EAAAX,EAAAqC,EAAAzB,EAAAX,EAAAqC,EAAAZ,EAAA,MAAC,CACN,IADKb,EAAAkB,EAAA,EAAAnB,EAAAZ,EAAAoC,EAAAzB,EAAAV,EAAAkC,CAAA,EAAArB,EAAAiB,EAAA,EAAApB,EAAAX,EAAAoC,EAAAxB,EAAAX,EAAAkC,CAAA,EAAA5B,EAAAwB,EAAAnB,CAAAA,EAAAZ,EAAAsC,EAAA3B,EAAAV,EAAAoC,CAAA,EAAA7B,EAAAuB,EAAApB,CAAAA,EAAAX,EAAAsC,EAAA1B,EAAAX,EAAAoC,CAAA,EAGA9B,EACNC,EACH,EAqDwBmB,EAAAK,EAAApB,EAAAD,EAAAX,EAAAC,EAAAwB,EAAAC,EAAAK,EAAAlB,EAAAC,GACpBD,EAAQ/5B,CAAM,CAACuT,EAAE,CAAC,EAAE,CACpBymB,EAAAh6B,CAAS,CAAAuT,EAAA,IACTsnB,EAAOK,EACTA,GAAAF,EAEF,OAAAh7B,CAEA,EA6HuDy7B,CAAA,IAAAzC,EAAA0C,CAAA,IAAAzC,EAAAC,EAAAC,EAAAE,EAAAC,EAAAF,GACnD7lB,EAAQ,EAAGgR,EAAGgV,EAAIv7B,MAAA,CAAAuV,EAAAgR,EAAAhR,IAClBgmB,CAAQ,CAAChmB,EAAE,CAAC,EAAE,EAAIylB,EAClBO,CAAQ,CAAChmB,EAAE,CAAC,EAAE,EAAI0lB,EAClBM,CAAQ,CAAChmB,EAAE,CAAC,EAAE,EAAIylB,EAClBO,CAAQ,CAAChmB,EAAE,CAAC,EAAE,EAAI0lB,EAClBM,CAAQ,CAAChmB,EAAE,CAAC,EAAE,EAAIylB,EACpBO,CAAA,CAAAhmB,EAAA,KAAA0lB,EAEF,OAAAM,CAAA,EA6JsB7R,EAAAC,EAAAtnB,IACdqnB,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAM,IACR,KAAK,KACA,QACH,IACAqnB,EAAIyN,EACJxN,EAAAyN,CAGJ,CACEsD,GACDI,EAAA//B,IAAA,CAAAsH,GAEHs4B,EAAAt4B,CAAA,IAEF,OAAAy4B,CAAA,EAsaAx1B,GAAOwa,IAAI,CAAC6d,uBAAsB,CA1EmB,SAEtC3S,CAAO,CAAK4S,CAAU,CAAE,CAGrC,IAAaroB,EAAbwa,EAAA,EAAa,CAAA8N,EAAA,IAAcv4B,GAAAmkB,KAAA,CAAAuB,CAAA,IAAAtB,CAAA,CAAAsB,CAAA,IAAArB,CAAA,EAAAmU,EAAA,IAAAx4B,GAAAmkB,KAAA,CAAAuB,CAAA,IAAAtB,CAAA,CAAAsB,CAAA,IAAArB,CAAA,EAAApD,EAAAyE,EAAAhrB,MAAA,CAAA+9B,EAAA,EAAAC,EAAA,EAAAC,EAAA1X,EAAA,EAOD,IAL1BqX,EAAIA,GAAY,EACdK,IACAF,EAAY/S,CAAM,CAAC,EAAE,CAACtB,CAAC,CAAGoU,EAAGpU,CAAC,CAAG,GAAKsB,CAAM,CAAC,EAAE,CAACtB,CAAC,GAAKoU,EAAGpU,CAAC,CAAG,EAAI,CAAC,CACnEsU,EAAAhT,CAAA,IAAArB,CAAA,CAAAmU,EAAAnU,CAAA,IAAAqB,CAAA,IAAArB,CAAA,GAAAmU,EAAAnU,CAAA,MACSoG,EAACh1B,IAAA,EAAK,IAA+B8iC,EAAGnU,CAAC,CAAGqU,EAAYH,EAAWC,EAAAlU,CAAA,CAAAqU,EAAAJ,EAC7E,EACEroB,EAAI,EAACA,EAAMgR,EAAKhR,IAAA,IACd,CAAAsoB,EAAIK,EAAA,CAAAJ,GAAA,CACJ,IAAAK,EAAAN,EAAAO,YAAA,CAAAN,GAGU/N,EAACh1B,IAAA,EAAK,IAAM8iC,EAAGnU,CAAC,CAAEmU,EAAAlU,CAAA,CAAYwU,EAASzU,CAAC,CAACyU,EAAAxU,CAAA,CACpD,CACD,GACIqB,CAAK,CAAKzV,EAAA,CACZA,EAAA,EAAKyV,EAAOhrB,MAAM,EACnB89B,CAAAA,EAAA9S,CAAA,CAAAzV,EAAA,GAEH,CAMF,OALI0oB,IACAF,EAAYF,EAAGnU,CAAC,CAAGsB,CAAM,CAACzV,EAAI,EAAE,CAACmU,CAAC,CAAG,EAAImU,EAAGnU,CAAC,GAAKsB,CAAM,CAACzV,EAAI,EAAE,CAACmU,CAAC,CAAG,EAAI,EAAE,CAC3EsU,EAAAH,EAAAlU,CAAA,CAAAqB,CAAA,CAAAzV,EAAA,GAAAoU,CAAA,GAAAkU,EAAAlU,CAAA,GAAAqB,CAAA,CAAAzV,EAAA,GAAAoU,CAAA,OACSoG,EAACh1B,IAAA,EAAK,IAA+B8iC,EAAGnU,CAAC,CAAGqU,EAAYH,EAAWC,EAAAlU,CAAA,CAAAqU,EAAAJ,EAC7E,EACF7N,CACA,EA2CAzqB,GAAOwa,IAAI,CAAC8X,mBAAmB,CAAAA,EAC/BtyB,GAAOwa,IAAI,CAACue,gBAAc,CAhsBgC,SACpDC,CAAA,CAAAC,CAAA,CAAApH,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAkH,CAAA,CAAAC,CAAA,EAC4B,GAC9Bn5B,GAAA2f,mBAAwB,GACxByZ,EAAWtI,EAAA5P,IAAA,CAAA/f,WACTnB,GAAO0f,kBAAO,CAAA0Z,EAAmB,EAClC,OAAAp5B,GAAA0f,kBAAA,CAAA0Z,EAAA,CAMU,IAVTA,EAaJlxB,EAAIC,EAAIooB,EAAA7J,EAAK2S,EAAKC,EAAKC,EAAIC,EAHb/f,EAAE0J,KAAA1J,IAAA,CAAA/a,EAAAykB,KAAAzkB,GAAA,CAAAC,EAAAwkB,KAAAxkB,GAAA,CAAAkc,EAAAsI,KAAAtI,GAAA,CAAA4e,EAAA,GAAAC,EAAA,CAAE,EAAE,CAChB,EAAG,CAEP,CACAvxB,EAAI,EAAC6wB,EAAI,GAASnH,EAAK,EAAIE,EAC3B7pB,EAAI,GAAI8wB,EAAK,EAAInH,EAAA,EAAAE,EAAA,EAAAmH,EAEjB3I,EAAK,EAAIsB,EAAI,EAAGmH,EAAY,IAC1B,IAAI/oB,EAAI,EAAGA,EAAA,IAAAA,EAAA,CAMS,GALlBA,EAAI,IACJ9H,EAAI,EAAC8wB,EAAI,GAASnH,EAAK,EAAIE,EAC3B9pB,EAAI,GAAI+wB,EAAK,EAAInH,EAAA,EAAAE,EAAA,EAAAmH,EAClB5I,EAAA,EAAAuB,EAAA,EAAAmH,GAGCpe,MAAAA,EAAI3S,GAAS,CAAO,GAClB2S,MAAAA,EAAA1S,GACD,SAGC,EADFue,CAAAA,EAAI,CAAA6J,EAAIpoB,CAAAA,GACEue,EAAK,GACd+S,EAAAhkC,IAAA,CAAAixB,GAEF,SACD,CAEE6S,CAAAA,CADFA,EAAIpxB,EAAOA,EAAG,EAAAooB,EAAAroB,CAAAA,EACZ,KAKA,EADFmxB,CAAAA,EAAI,EAAAlxB,EADJqxB,CAAAA,EAAW/f,EAAA8f,EAAO,CACJ,EAAQ,GAAArxB,CAAAA,CAAA,GACZmxB,EAAK,GACdI,EAAAhkC,IAAA,CAAA4jC,GAGC,EADFC,CAAAA,EAAI,EAAAnxB,EAAIqxB,CAAM,EAAQ,GAAAtxB,CAAAA,CAAA,GACZoxB,EAAK,GACdG,EAAAhkC,IAAA,CAAA6jC,GAGH,CACY,IAAZ,IAAAlV,EAAOC,EAAKsV,EAAA/E,EAAA6E,EAAA/+B,MAAA,CAAAm6B,EAAAD,EACVA,KAGAxQ,EAAAuV,CADAA,EAAI,EADJjT,CAAAA,EAAA+S,CAAS,CAAA7E,EAAA,CACClO,EACDiT,EAAGA,EAAGX,EAAA,EAAAW,EAAAA,EAAAjT,EAAAmL,EAAA,EAAA8H,EAAAjT,EAAAA,EAAAqL,EAAArL,EAAAA,EAAAA,EAAAwS,EAEfQ,CAAI,GAAM,CAAA9E,EAAA,CAAKxQ,EACfC,EAAAsV,EAASA,EAAGA,EAAGV,EAAA,EAAAU,EAAAA,EAAAjT,EAAAoL,EAAA,EAAA6H,EAAAjT,EAAAA,EAAAsL,EAAAtL,EAAAA,EAAAA,EAAAyS,EACjBO,CAAA,IAAA9E,EAAA,CAAAvQ,CAGAqV,CAAAA,CAAM,CAAC,EAAE,CAAC7E,EAAK,CAAGmE,EAClBU,CAAM,CAAC,EAAE,CAAC7E,EAAA,CAAOoE,EACjBS,CAAM,CAAC,EAAE,CAAC7E,EAAO,EAAE,CAAGqE,EACtBQ,CAAI,IAAA7E,EAAS,GAAAsE,EAAA,IACXz8B,EAAA,EAEE0nB,EAAG1lB,EAAImiB,KAAK,CAAC,IAAI,CAAE6Y,CAAM,CAAC,EAAE,EAC9BrV,EAAA3lB,EAAAmiB,KAAA,MAAA6Y,CAAA,IACA,GAEEtV,EAAGzlB,EAAIkiB,KAAK,CAAC,IAAI,CAAE6Y,CAAM,CAAC,EAAE,EAC9BrV,EAAA1lB,EAAAkiB,KAAA,MAAA6Y,CAAA,IACD,EACD,CAIF,OAHI15B,GAAO2f,mBAAmB,EAC3B3f,CAAAA,GAAA0f,kBAAA,CAAA0Z,EAAA,CAAA18B,CAAA,EAEHA,CAEA,EA+mBAsD,GAAOwa,IAAI,CAACof,cAAa,CA1MsB,SACjCnP,CAAA,CAAAoP,CAAA,CAAAC,CAAA,EACVA,GACDA,CAAAA,EAAAxH,EAAA7H,EAAA,EAEkE,IAAnE,IAAAxa,EAAO,EACL4pB,EAAYC,CAAM,CAAA7pB,EAAG,CAAAvV,MAAM,IAAAuV,EAAA6pB,EAAAp/B,MAAA,IAC3Bm/B,GAAAC,CAAA,CAAA7pB,EAAA,CAAAvV,MAAA,CACFuV,IAKA,IAAQyiB,EAARqH,EAAQD,CAAA,CAAA7pB,EAAA,CAAA+pB,EAAAH,EAAAE,EAAAr/B,MAAA,CAAAi4B,EAAAoH,EAAApH,OAAA,CAAAqB,EAAAvJ,CAAA,CAAAxa,EAAA,QACN0iB,GAAK,IACH,IAAO,MAAK,CAAWvO,EAAG2V,EAAQ3V,CAAC,CAAEC,EAAA0V,EAAO1V,CAAA,CAAEf,MAAA,CAChD,CACA,KAAK,QACH,IAMF,MADEoP,CADAA,EAAK,IAAK1yB,GAAQmkB,KAAK,CAAC4V,EAAQ3V,CAAA,CAAA2V,EAAQ1V,CAAA,EAAA4V,IAAS,CAAE,IAAAj6B,GAAQmkB,KAAQ,CAAA4V,EAASnG,KAAA,CAAAmG,EAAAlG,KAAA,EAAAmG,EAAA,EAC5E1W,KAAO,CAAAH,KAAAzJ,KAAA,CAAAqgB,EAAAlG,KAAA,CAAAkG,EAAA1V,CAAA,CAAA0V,EAAAnG,KAAA,CAAAmG,EAAA3V,CAAA,EACJsO,CAAA,KACH,IAMF,MADEA,CADAA,EAAK,IAAK1yB,GAAQmkB,KAAK,CAAC4V,EAAQ3V,CAAA,CAAE2V,EAAG1V,CAAA,EAAS4V,IAAE,KAAOj6B,GAAMmkB,KAAA,CAAA6P,CAAS,IAAAA,CAAA,KAAAgG,EAAA,EACtE1W,KAAO,CAAAH,KAAAzJ,KAAA,CAAAsa,CAAA,IAAA+F,EAAA1V,CAAA,CAAA2P,CAAA,IAAA+F,EAAA3V,CAAA,EACJsO,CAAA,KACH,IACG,IACH,IADF,OAAKwH,SAzJmBH,CAAW,CAAAF,CAAQ,EAIE,IAJgB,IAE/Dl5B,EAAAw5B,EAA2DC,EAFMjI,EAAG,EAAAE,EAAS,EAAAH,EAAA6H,EAAA7H,QAAA,CAAAE,EAAA,CAAEhO,EAAG2V,EAAQ3V,CAAC,CACvFC,EAAG0V,EAAS1V,CAAA,EAChBgW,EAAA,IAAA7H,EAAAuH,EAAAvH,WAA2D,CAGzDH,EAAIwH,GAASQ,EAAA,MACb15B,EAAAuxB,EAAWC,GACXiI,EAAUjI,EAGRgI,CAFFA,EAAAvI,EAAAQ,EAAAhO,CAAA,CAAAgO,EAAA/N,CAAA,CAAA1jB,EAAAyjB,CAAA,CAAAzjB,EAAA0jB,CAAA,GAEEgO,EAAAwH,GAEA1H,GAAAkI,EACFA,GACK,IAEHjI,EAAQzxB,EACRwxB,GAAAkI,EACDhI,GAAA8H,GAIL,OADEx5B,EAAA2iB,KAAO,CAAAkP,EAAA4H,GACTz5B,CAEA,EAiISo5B,EAAAF,EAGT,CAEA,EAqKF75B,GAAAwa,IAAA,CAAA8f,aAAA,CAnCsD,SAClC7P,CAAA,CAAA5D,CAAA,CAAA0T,CAAA,EAMsB,OALpCA,GAEE1T,CAAAA,EAAC7mB,GAAAwa,IAAA,CAAA6Q,yBAAA,CAAAxE,EAAA,CAAG,EAAG,EAAG,EAAG,EAAe,CAAC0T,EAAWnW,CAAC,CAAC,CAAAmW,EAAAlW,CAAA,CAE7C,GAECoG,EAAIxjB,GAAA,UAAauzB,CAAY,CAAK,CACkB,IAClD,IADGC,EAAWD,EAAIrmB,KAAY,IAAM6P,EAAM,CAAK,EAC/C/T,EAAO,EAAGA,EAAAuqB,EAAc9/B,MAAA,GAAAuV,GAAA,EACxB+T,EAAMI,CAAC,CAAGoW,CAAW,CAACvqB,EAAA,CACtB+T,EAAAK,CAAA,CAAQmW,CAAY,CAAAvqB,EAAA,GACpB+T,EAAAhkB,GAAawa,IAAG,CAAAE,cAAO,CAAAsJ,EAAA6C,GACvB4T,CAAU,CAACxqB,EAAA,CAAI+T,EAAKI,CAAA,CACtBqW,CAAA,CAAAxqB,EAAA,GAAA+T,EAAAK,CAAA,CAEF,OAAAoW,CACF,EAEA,CAgBD,IAAW,UAEN,CAEJ,IAAAtmB,EAAArV,MAAAgW,SAAA,CAAAX,KAAA,CAuD4C,SACrChE,EAAAsQ,CAAS,CAAAia,CAAY,CAAKC,CAAG,KAChC,GAAAla,IAAAA,EAAA/lB,MAAA,EAKF,IAAIuV,EAAAwQ,EAAA/lB,MAAY,GAAAgC,EAAAg+B,EAAAja,CAAA,CAAAxQ,EAAA,CAAAyqB,EAAA,CAAAja,CAAA,CAAAxQ,EAAA,IACdyqB,EAAY,KACVzqB,KACE0qB,EAASla,CAAM,CAAAxQ,EAAG,CAAAyqB,EAAW,CAAAh+B,IAC9BA,CAAAA,EAAA+jB,CAAA,CAAAxQ,EAAA,CAAAyqB,EAAA,OAIS,KACVzqB,KACE0qB,EAASla,CAAM,CAAAxQ,EAAE,CAAAvT,IAClBA,CAAAA,EAAA+jB,CAAA,CAAAxQ,EAAA,CAGL,CACF,OAAAvT,EAjBE,CAsBkBsD,GAClBwa,IAAM,CAAAiG,KAAA,EACNC,KAxC0B,SAClBD,CAAM,CAAAxlB,CAAM,EACR,IAAZ,IAAAg6B,EAAOxU,EAAK/lB,MAAA,CACVu6B,KACFxU,CAAA,CAAAwU,EAAA,CAAAh6B,EAEF,OAAAwlB,CAEA,EAiCEma,OA9E6B,SAClBna,CAAM,CAAIoa,CAAC,EAC4B,IAChD,IADGz5B,EAAI+S,EAAO+M,IAAM,CAAA/f,UAAY,GAAEzE,EAAS,EAAK,CAChDuT,EAAO,EAAEgR,EAAQR,EAAM/lB,MAAG,CAAKuV,EAAIgR,EAAAhR,IACrCvT,CAAA,CAAAuT,EAAA,CAAA7O,EAAA1G,MAAA,CAAA+lB,CAAA,CAAAxQ,EAAA,CAAA4qB,EAAA,CAAAha,KAAA,CAAAJ,CAAA,CAAAxQ,EAAA,CAAA7O,GAAAqf,CAAA,CAAAxQ,EAAA,CAAA4qB,EAAA,CAAA3Z,IAAA,CAAAT,CAAA,CAAAxQ,EAAA,EAEF,OAAAvT,CAEA,EAuEEgC,IAnD8B,SACvB+hB,CAAK,CAAAia,CAAO,EAAqC,OACtDvqB,EAAOsQ,EAAAia,EAAS,SAAAI,CAAA,CAAAC,CAAA,EAClB,OAAAD,EAAAC,CACF,EAEA,EA8CAp8B,IAjEgC,SACvB8hB,CAAK,CAAAia,CAAO,EAAqC,OACtDvqB,EAAOsQ,EAAAia,EAAU,SAAAI,CAAA,CAAAC,CAAA,EACnB,OAAAD,GAAAC,CACF,EAEA,CA6DF,CACC,IAAW,UACV,CAa2C,SACzC3hB,EAAA0R,CAAA,CAAAjI,CAAA,CAAAb,CAAA,EAGU,GACRA,GAAuD,GACrD,CAAAhiB,GAAAse,YAAA,EAAAuE,aAAuCmY,QAEzClQ,EACSjI,OACP,GAAAA,aAAgB/jB,MAAA,CAChBgsB,EAAa,EAAG,CAAmC,IACjD,IAAA7a,EAAA,EAAWgR,EAAM4B,EAAOnoB,MAAK,CAAAuV,EAAOgR,EAAIhR,IAC1C6a,CAAA,CAAA7a,EAAA,CAAAmJ,EAAA,GAAAyJ,CAAA,CAAA5S,EAAA,CAAA+R,EAE6C,MAC7C,GAAKa,GAAI,iBAAYA,EAAQ,IAC3B,IAAIJ,KAAAI,EACFJ,WAAAA,GAAAA,UAAAA,EAGFqI,CACS,CAAArI,EAAO,KAAc,CAC5BI,EAAYoY,cAAY,CAAAxY,IACzBqI,CAAAA,CAAA,CAAArI,EAAA,CAAArJ,EAAA,GAAAyJ,CAAA,CAAAJ,EAAA,CAAAT,EAAA,OAMJ8I,EAAAjI,CACH,MAE+B,IAC3B,IAAAJ,KAAYI,EACdiI,CAAA,CAAArI,EAAA,CAAAI,CAAA,CAAAJ,EAAA,CAGJ,OAAAqI,CAEA,CAgBU9qB,GAAAwa,IAAA,CAAA3f,MAAA,EACRue,OAAOA,EACTxT,MAR6B,SACpB/K,CAAS,CAAGmnB,CAAA,EACrB,OAAA5I,EAAA,GAAAve,EAAAmnB,EAEA,CAKA,EACFhiB,GAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAwa,IAAA,CAAAxa,GAAA8gB,UAAA,CACC,IAuGsB9gB,GACnBwa,IAAA,CAAUyN,MAAA,EACVC,SAjGwB,SACVD,CAAQ,EAAsC,OAC1DA,EAAOjgB,OAAA,WAAsB,SAAAC,CAAW,CAAKizB,CAAE,EACjD,OAAAA,EAAAA,EAAA9yB,WAAA,OAGF,EA4FEkR,WAnF2C,SAC7B2O,CAAU,CAAAkT,CACrB,EACL,OAAAlT,EAAAE,MAAA,IAAA/f,WAAA,GAAA+yB,CAAAA,EAAAlT,EAAA9T,KAAA,IAAA8T,EAAA9T,KAAA,IAAAuZ,WAAA,GAEA,EA+EE0N,UAzEyB,SACXnT,CAAQ,EAKxB,OAAAA,EAAAjgB,OAAA,eAAAA,OAAA,gBAAAA,OAAA,gBAAAA,OAAA,cAAAA,OAAA,aAEA,EAkEAqzB,cA5DmC,SACjBC,CAAc,EAC9B,IAAYC,EAAPtrB,EAAI,EAAQurB,EAAI,GAAwB,IAC3CvrB,EAAI,EAAOA,EAAAqrB,EAAa5gC,MAAA,CAAAuV,IACb,KAATsrB,CAAAA,EAAAE,SASWC,CAAA,CAAAzrB,CAAA,CAAW,CAE1B,IAAI0rB,EAAMD,EAAAE,UAAO,CAAA3rB,GAAA,GACf6kB,MAAA6G,GACD,QACD,CAAoC,GAClCA,EAAO,OAAUA,EAAC,MACnB,OAAAD,EAAAvT,MAAA,CAAAlY,EAED,CAEsC,GACpC,OAAQ0rB,GAAWA,GAAQ,UACzBD,EAAAhhC,MAAM,EAAAuV,EAAA,EACP,sDAED,IAAI4rB,EAAAH,EAASE,UAAQ,CAAA3rB,EAAO,GAAQ,GAClC,MAAM4rB,GAAAA,EAAA,MACP,sDAEF,OAAAH,EAAAvT,MAAA,CAAAlY,GAAAyrB,EAAAvT,MAAA,CAAAlY,EAAA,EACD,IAEEA,IAAAA,EACD,sDAGD,IAAA6rB,EAAAJ,EAAAE,UAAA,CAAA3rB,EAAA,GAEoC,GAClC,MAAM6rB,GAAAA,EAAA,MACP,sDAIH,QAGA,EA/CeR,EAAArrB,EAAA,GAGburB,EAAA/lC,IAAA,CAAA8lC,GAEF,OAAAC,CAEA,CAkDF,EACY,UAEN,CAEgC,IAC9BrnB,EAASrV,MAAKgW,SAAA,CAAAX,KAAA,CAAA4nB,EAAA,aAAAC,EAAA,eAAE,IAAAr7B,IAAA,CAAes7B,SAAA,GACP,GACpBt7B,aAAAA,EACD,QACH,CAEF,MAEA,EAC6C,IAClCu7B,EAAoB,SAAAC,CAAA,CAAAtZ,CAAA,CAAAuZ,CAAA,MAE3B,IAAI3Z,KAAYI,EAIdJ,KAAM0Z,EAAUrnB,SAAS,EAAG,mBAAUqnB,EAAArnB,SAAU,CAAA2N,EAAA,GAAAI,CAAA,CAAAJ,EAAA,KAAAjC,OAAA,iBAAA2b,EAC9CrnB,SAAO,CAAA2N,EAAW,UAAAA,CAAA,SAEhB,UAAI,CACJ,IAAI4Z,EAAa,KAAAC,WAAa,CAAAD,UAAA,CAC9B,IAAI,CAAAC,WAAA,CAAAD,UAAqB,CAAAD,EACzB,IAAIG,EAAa1Z,CAAA,CAAAJ,EAAa,CAAA5B,KAAA,MAAA1f,WAEC,GAA/B,IAAI,CAAAm7B,WAAA,CAAaD,UAAA,CAAAA,EACf5Z,eAAAA,EACD,OAAA8Z,CACH,CAEJ,EAAA9Z,GAGC0Z,EAAArnB,SAAA,CAAA2N,EAAA,CAAAI,CAAA,CAAAJ,EAAA,CAGCuZ,IACEnZ,EAAMoZ,QAAS,GAACpnB,OAAWC,SAAO,CAAAmnB,QAAQ,EAC3CE,CAAAA,EAAArnB,SAAA,CAAAmnB,QAAA,CAAApZ,EAAAoZ,QAAA,EAECpZ,EAAM2Z,OAAA,GAAU3nB,OAAUC,SAAO,CAAA0nB,OAAO,EACzCL,CAAAA,EAAArnB,SAAA,CAAA0nB,OAAA,CAAA3Z,EAAA2Z,OAAA,EAKX,EAEA,SAASC,GAAU,EAAY,SACzBC,EAAAC,CACA,EAGiC,IADrC,IAAAC,EAAA,KAAAC,EAAA,KAEEA,EAAIP,WAAA,CAAAD,UAAyB,GAC7B,IAAIS,EAAiBD,EAAKP,WAAA,CAAAD,UAAkB,CAAAvnB,SAAA,CAAA6nB,EAAA,IAC1CE,CAAA,CAAAF,EAAe,GAAAG,EAAA,CACfF,EAAME,EACP,MACD,EAEFD,EAAAP,WAAA,CAAAD,UAAA,CAAAvnB,SAAA,QAEmB,EAOrB3T,UAAAzG,MAAA,GAAAkiC,EAAA/b,KAAA,MAAA1M,EAAA+M,IAAA,CAAA/f,UAAA,IAAAy7B,EAAA1b,IAAA,OALG1M,QAAAC,GAAA,uBAAAkoB,EAAA,6CAED,CA2CJ38B,GAAAwa,IAAA,CAAAG,WAAA,CA/ByB,UAEjB,CAEJ,IAAIyhB,EAAO,KAAArR,EAAkB5W,EAAA+M,IAAY,CAAA/f,UAAA,GAGxB,SACVg7B,GAAA,CACP,KAAAY,UAAA,CAAAlc,KAAA,MAAA1f,UAEA,CAN2B,YAAzB,OAAA4pB,CAAS,GAAW,EACrBqR,CAAAA,EAAArR,EAAAiS,KAAA,IAMDb,EAAME,UAAU,CAAGD,EAEnBD,EAAIc,UAAQ,IACVb,IACAK,EAAM3nB,SAAY,CAAAsnB,EAAItnB,SAAA,CACtBqnB,EAAArnB,SAAO,CAAW,IAAI2nB,EACvBL,EAAAa,UAAA,CAAAxnC,IAAA,CAAA0mC,IAC4D,IAC3D,IAAAlsB,EAAA,EAAWvV,EAAOqwB,EAAarwB,MAAE,CAAAuV,EAAAvV,EAAAuV,IACnCisB,EAAAC,EAAApR,CAAA,CAAA9a,EAAA,CAAAmsB,GAOF,OALID,EAAMrnB,SAAU,CAAAioB,UAAU,EAC3BZ,CAAAA,EAAArnB,SAAA,CAAAioB,UAAA,CAAAhB,CAAA,EAEDI,EAAMrnB,SAAS,CAACwnB,WAAS,CAAGH,EAC5BA,EAAArnB,SAAO,CAAA4nB,SAAA,CAAAA,EACTP,CAEA,CAED,IAGoBriB,EAAA,EAAA9Z,GAAAwb,QAAA,CAAAwN,aAAA,QAAAkU,WAAA,CAAAnjB,EAAA,CAAc,aAAa,YAAW,WACzD,CAQyE/Z,GACvEwa,IAAA,CAAA2iB,WAAmB,UAAA5iC,CAAiB,CAAA6lB,CAAW,CAAAC,CAAS,CAAA/lB,CAAA,EAC1DC,GAAAA,EAAAiC,gBAAA,CAAA4jB,EAAAC,EAAAvG,CAAAA,GAAAxf,EAEA,EAQ4E0F,GAC1Ewa,IAAA,CAAA4iB,cAAmB,UAAA7iC,CAAoB,CAAA6lB,CAAW,CAAAC,CAAS,CAAA/lB,CAAA,EAC7DC,GAAAA,EAAA8iC,mBAAA,CAAAjd,EAAAC,EAAAvG,CAAAA,GAAAxf,EAEA,EAQyC0F,GACvCwa,IAAI,CAAA8iB,UAAU,CAAM,SAChBviC,CAAA,CAAS,CAEb,IAVIwiC,EAUJhjC,EAAOQ,EAAAC,MAAA,CAAAwiC,EAAAx9B,GAAAwa,IAAA,CAAAijB,gBAAA,CAAAljC,GAAAmjC,EAVwB,CAA3BH,EAAAxiC,EAAa4iC,cAAc,GACtBJ,CAAY,IACpBA,CAAA,IAQMxiC,CAPP,CAOO,MACF,CACHqpB,EAAGsZ,EAAKE,OAAO,CAAGJ,EAAOz3B,IAAG,CAC9Bse,EAAAqZ,EAAAG,OAAA,CAAAL,EAAA13B,GAAA,CAGF,EAA2C9F,GACzCwa,IAAO,CAAAsjB,YAAY,UAAQ/iC,CAAU,EACvC,OAAAgf,EAAAyG,OAAA,CAAAzlB,EAAAS,IAAA,MAAAT,UAAAA,EAAAgjC,WAAA,EA0C6C9jB,EAAA,gBAAAD,CAAPA,EAAOha,GAAAwb,QAAA,CAAAwN,aAAA,SAAA9rB,KAAA,CAAAqC,OAAA,CAAA2a,EAAA,iBAAAF,EAAA9c,KAAA,CAAA2M,MAAA,CAAAsQ,EAAA,wCAAAC,EAAA,SAAA7f,CAAA,EAAS,OAAAA,CAEtD,EACE0f,EAEUG,EAAgB,SAAA7f,CAAA,CAAAU,CAAA,EAE1B,OADEV,EAAO2C,KAAA,CAAAqC,OAAA,CAAAtE,EACTV,CACF,EAEE2f,GAEWE,CAAAA,EAAa,SAAA7f,CAAA,CAAAU,CAAA,EACtB,IAAI7D,EAAAmD,EAAQ2C,KAAA,CAWd,OAVI3C,EAAOyjC,YAAG,GAAAzjC,EAAAyjC,YAAA,CAAAC,SAAA,EACX7mC,CAAAA,EAAA8mC,IAAA,IAEC/jB,EAAQgkB,IAAA,CAAA/mC,EAASyS,MAAA,GACjB5O,EAAGA,GAAY,MAAO,GAAQ,iBAAWA,IAAAA,EAAA,IAC3C7D,EACKyS,MAAA,CAAAzS,EAAAyS,MAAA,CAAA7B,OAAA,CAAAmS,EAAAlf,IAEJ7D,EAAAyS,MAAA,oBAAA5O,IAAAA,EAAA,IAEHV,CACD,GAIHyF,GAAAwa,IAAA,CAAA4jB,QAAA,CA5DqC,SAC7B7jC,CAAe,CAAAN,CAAQ,CAAK,CAChC,IAAIokC,EAAe9jC,EAAA2C,KAAA,IACjB,CAAAmhC,EACD,OAAA9jC,CACD,CAAgC,GAC9B,iBAAAN,EAID,OAHCM,EAAO2C,KAAA,CAAOohC,OAAO,EAAC,IAAArkC,EAGvBA,EAAAumB,OAAA,eAAApG,EAAA7f,EAAAN,EAAAgO,KAAA,+BAAA1N,CAAA,CAC4B,IAC3B,IAAIkoB,KAAAxoB,EAAwB,GAC1BwoB,YAAAA,EACFrI,EACK7f,EAAAN,CAAA,CAAAwoB,EAAA,MACH,CAGA,IAAA8b,EAAyB9b,UAAAA,GAAoBA,aAAAA,EAAgB,SAAA4b,EAAAG,UAAA,yBAAA/b,CAAA,CAC9D4b,EAAAI,WAAA,CAAAF,EAAAtkC,CAAA,CAAAwoB,EAAA,CACH,QAEFloB,CAEA,EAoCU,UAEN,CAEJ,IAgNE2C,EAAAwhC,EA5BEC,EAzKAC,EAXJC,EAAA//B,MAAAgW,SAAA,CAAAX,KAAA,CAkBM2qB,EAAO,SAAYC,CAAW,EAChC,OAAAF,EAAA3d,IAAA,CAAA6d,EAAA,EAEJ,EAAI,GACF,CAEFH,EAAcE,EAAA9+B,GAAAwb,QAAA,CAAAwjB,UAAA,aAAAlgC,KAEd,OAAKqY,EAAA,EAiBqC,SACpC8nB,EAAYC,CAAS,CAAAhlC,CAAa,CAAC,CACvC,IAAKilC,EAAIn/B,GAAQwb,QAAA,CAAAwN,aAAY,CAAAkW,GAAA,IAC3B,IAAI/d,KAAAjnB,EACFinB,UAAAA,EACFge,EACK9jC,SAAI,CAAAnB,CAAgB,CAAAinB,EAAA,CACpBA,QAAAA,EACLge,EACKvjC,OAAA,CAAA1B,CAAA,CAAAinB,EAAA,CAEJge,EAAAC,YAAA,CAAAje,EAAAjnB,CAAA,CAAAinB,EAAA,EAGL,OAAAge,CAEA,CAqCmC,SAE7B1B,EAEAljC,CAAA,EASoD,IARrB,IAC7BwL,EAAA,EAAAD,EAAY,EAAAu5B,EAAAr/B,GAAAwb,QAAA,CAAA8jB,eAAA,CAAAC,EAAAv/B,GAAAwb,QAAA,CAAA+jB,IAAA,GAAGC,WAAW,EAC5BC,UAAA,CAEJ,EAMEllC,GAAAA,CAAAA,EAAA2R,UAAA,EAAA3R,EAAAmlC,IAAA,IAIEnlC,CADFA,EAAIA,EAAY2R,UAAO,EAAQ3R,EAAEmlC,IAAA,IACnB1/B,GAAAwb,QAAc,EAC1BzV,EAAMw5B,EAAKC,UAAS,EAAKH,EAAWG,UAAS,EAAI,EACnD15B,EACKy5B,EAAAE,SAAA,EAAAJ,EAAAI,SAAA,MAEH15B,GAAOxL,EAAQilC,UAAS,EAAI,EAC7B15B,GAAAvL,EAAAklC,SAAA,KAGCllC,IAAAA,EAAMolC,QAAA,EAAAplC,UAAAA,EAAA2C,KAAA,CAAA+rB,QAAA,IAIH,MAAE,CAAYljB,KAAKA,EAAID,IAAAA,CAChC,CAEA,CAxGE84B,GAA8BE,CAAAA,EACxB,SAAUC,CAAM,EACR,IAAZ,IAAAa,EAAY,MAAAb,EAAArkC,MAAA,EAAAuV,EAAA8uB,EAAArkC,MAAA,CACVuV,KACF2vB,CAAA,CAAA3vB,EAAA,CAAA8uB,CAAA,CAAA9uB,EAAA,CAEF,OAAA2vB,CACD,GAmJ2CjB,EAA1C3+B,GAAAwb,QAAA,CAAAqkB,WAA2B,EAAA7/B,GAASwb,QAAM,CAAAqkB,WAAA,CAAAC,gBAAA,CAC5B,SAAOvlC,CAAS,CAAAwlC,CAAA,EAC5B,IAAA7iC,EAAO8C,GAAQwb,QAAW,CAAAqkB,WAAY,CAAAC,gBAAA,CAAAvlC,EAAA,MACxC,OAAA2C,EAAAA,CAAA,CAAA6iC,EAAA,CAAA1iC,KAAAA,CAAA,EAIc,SAAQ9C,CAAM,CAAKwlC,CAAA,EAC/B,IAAI9kC,EAACV,EAAS2C,KAAQ,CAAA6iC,EAAA,CAIxB,MAHI,CAAA9kC,GAAQV,EAAQyjC,YAAa,EAC9B/iC,CAAAA,EAAAV,EAAAyjC,YAAA,CAAA+B,EAAA,EAEH9kC,CACD,EAcCyjC,EAAA,eAAAxhC,EAAA8C,GAAAwb,QAAA,CAAA8jB,eAAA,CAAApiC,KAAA,iCAAAA,EAAA,qCAAAA,EAAA,uCAAAA,EAAA,qBAuCA8C,GAAOwa,IAAI,CAACwlB,uBAAqB,CAjCS,SACrBzlC,CAAa,CAAK,CAUvC,OATmC,SAA/BA,EAAQ0lC,aAAgB,EACzB1lC,CAAAA,EAAA0lC,aAAA,CAAAjgC,GAAAwa,IAAA,CAAAsN,aAAA,EAEC4W,EACFnkC,EACS2C,KAAA,CAAOwhC,EAAQ,QACC,UAAvB,OAAQnkC,EAAY2lC,YAAG,EACxB3lC,CAAAA,EAAA2lC,YAAA,OAEH3lC,CAEA,EAqBFyF,GAAAwa,IAAA,CAAA2lB,qBAAA,CAf0C,SACnB5lC,CAAa,EAUlC,OATgC,SAA5BA,EAAQ0lC,aAAoB,EAC7B1lC,CAAAA,EAAA0lC,aAAA,OAECvB,EACFnkC,EACS2C,KAAA,CAAOwhC,EAAQ,IACC,UAAvB,OAAQnkC,EAAY2lC,YAAG,EACxB3lC,CAAAA,EAAA2lC,YAAA,KAEH3lC,CAEA,EAuCFyF,GAAOwa,IAAK,CAAA4lB,iBAAU,CAfiB,SACjCvjB,CAAqB,CAAG5hB,CAAI,EAEhC4hB,EAAIwjB,qBAAqB,CAAGxjB,EAAAwjB,qBAAA,EAAAxjB,EAAAyjB,2BAAA,EAAAzjB,EAAA0jB,wBAAA,EAAA1jB,EAAA2jB,uBAAA,EAAA3jB,EAAA4jB,sBAAA,CAC9B5jB,EAAAwjB,qBAAA,CAAAplC,CAEA,EAUA+E,GAAOwa,IAAI,CAACkmB,OAAO,CAxRE,SACLjlC,CAAA,EAChB,uBAAAA,EAAAuE,GAAAwb,QAAA,CAAAmlB,cAAA,CAAAllC,GAAAA,CAAA,EAuRAuE,GAAOwa,IAAI,CAACskB,OAAA,CAAQA,EACpB9+B,GAAOwa,IAAI,CAAComB,QAAA,CA/N0B,SACpBrmC,CAAM,CAAAc,CAAQ,EAC5Bd,GAAQ,UAASA,EAAKc,SAAQ,IAAS,EAAGmlB,OAAQ,KAAInlB,EAAA,MACvDd,CAAAA,EAAAc,SAAA,GAAAd,EAAAc,SAAA,SAAAA,CAAA,CAGH,EA0NA2E,GAAOwa,IAAI,CAACykB,WAAW,CAAGA,EAC1Bj/B,GAAOwa,IAAI,CAACqmB,WAAA,CAnNuC,SACtCtmC,CAAY,CAAAumC,CAAU,CAAA5mC,CAAA,EAQnC,MAPc,UAAV,OAAA4mC,GACDA,CAAAA,EAAA7B,EAAA6B,EAAA5mC,EAAA,EAECK,EAAQ2R,UAAU,EACnB3R,EAAA2R,UAAA,CAAA60B,YAAA,CAAAD,EAAAvmC,GAEDumC,EAAO5X,WAAA,CAAA3uB,GACTumC,CAEA,EAyMA9gC,GAAOwa,IAAI,CAACijB,gBAAgB,CAAGA,EAC/Bz9B,GAAOwa,IAAI,CAACwmB,gBAAgB,CA1JO,SAEvBzmC,CAAW,EACX,IAAE0mC,EAGWC,EAHLC,EAAA5mC,GAAAA,EAAA6mC,aAAA,CAAAC,EAAA,CAAGt7B,KAAK,EACtBD,IAAA,CAAS,EAAAtL,EAAQ,CAAGuL,KAAK,EACzBD,IAAA,CACmB,EACjBw7B,EAAiB,CACjBC,gBAAiB,OACjBC,eAAiB,MACjBC,YAAiB,OACnBC,WAAA,KAEJ,EAAU,GACR,CAAAP,EACD,OAAA3mC,CAED,CAAmC,IACjC,IAAAulC,KAAOuB,EACT9mC,CAAA,CAAA8mC,CAAA,CAAAvB,EAAA,GAAA3sB,SAAAurB,EAAApkC,EAAAwlC,GAAA,OASO,OANPkB,EAAKE,EAAO7B,eAAQ,CACiB,SAA7B/kC,EAAQonC,qBAAqB,EACpCN,CAAAA,EAAA9mC,EAAAonC,qBAAA,IAIDT,EAAOzD,EAAAljC,GACL,CACAwL,KAAKs7B,EAAIt7B,IAAG,CAAGm7B,EAAcn7B,IAAO,CAAAk7B,CAAAA,EAAQW,UAAa,KAAMpnC,EAAUuL,IAAA,CAC3ED,IAAAu7B,EAAAv7B,GAAA,CAAAo7B,EAAAp7B,GAAA,CAAAm7B,CAAAA,EAAAY,SAAA,KAAArnC,EAAAsL,GAAA,CAGF,EAyHA9F,GAAOwa,IAAI,CAACsnB,aAAA,CA3CoB,SACZvnC,CAAA,EAClB,IAAAwnC,EAAO/hC,GAAKoc,mBAAsB,CAAA7hB,GACpC,OAAAwnC,EAAAC,OAAA,EAAAD,EAAAE,MAAA,EA0CFjiC,GAAAwa,IAAA,CAAA0nB,gBAAA,CAxCqC,SACrB3nC,CAAc,KACxByF,GAAAse,YAAA,EAGF,IAAIyjB,EAAM/hC,GAAAoc,mBAAA,CAAA7hB,GACRwnC,IACAA,EAAKE,MAAA,CAAO,IAAG,CACfF,EAAAC,OAAA,MAEAD,EAAKI,WAAW,CAAG,IAAI,CACvBJ,EAAKK,WAAU,CAAG,IAAI,CACvBL,EAAAM,UAAA,OARD,CAqCH,IAAW,UAEV,CAMA,SAAAC,GAAA,EA6CFtiC,GAAAwa,IAAA,CAAA+nB,OAAA,CAlCiC,SACjBniC,CAAA,CAAA9F,CAAY,EAExBA,GAAIA,CAAAA,EAAiB,IAKrB,IAxBmB8F,EAAKqC,EAwBxBo4B,EAAYvgC,EACRugC,MAAA,CAAAvgC,EAAkBugC,MAAG,CAAAzyB,WAAW,SAAAo6B,EAAAloC,EAAAkoC,UAAA,eAAAC,EAAA,IAAAziC,GAAAnK,MAAA,CAAA6sC,cAAA,CAAAnD,EAAAjlC,EAAAilC,IAAA,EAAAjlC,EAAAqoC,UAAA,CAsBtC,OArBYF,EAAAG,kBAAkB,YACb,IAAXH,EAAAI,UAAW,GACXL,EAAIC,GACLA,EAAAG,kBAAA,CAAAN,EAGH,EACa,QAAXzH,IACA0E,EAAI,IAAO,CACT,iBAAMjlC,EAAAqoC,UAAmB,IAnCVviC,EAoChBA,EApCqBqC,EAoCrBnI,EAAAqoC,UAAA,CAAAviC,EAnCLA,EAAA,MAAA+9B,IAAA,CAAA/9B,GAAA,SAAAqC,GAwCEggC,EAAIK,IAAA,CAAAjI,EAAWz6B,EAAA,IACby6B,CAAAA,SAAAA,GAAqBA,QAAAA,CAAA,GACtB4H,EAAAM,gBAAA,qDAGDN,EAAAO,IAAO,CAAAzD,GACTkD,CAEA,CAEF,IAMAziC,GAAAyU,GAAA,CAAAD,QAAAC,GAAA,CAKCzU,GAAAijC,IAAY,CAAAzuB,QAAAyuB,IAAA,WAEP,CAGJ,IAAA7pB,EAAApZ,GAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAxT,EAAA5F,GAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,CA0CAs9B,EAA0B,GAgFV,SACdC,GAAY,CACd,QAEA,CAAmC,SACjCC,EAAiB1c,CAAG,CAACve,CAAA,CAAIooB,CAAA,CAAAt6B,CAAK,EAChC,OAAAs6B,EAAApN,KAAAE,GAAA,CAAAqD,EAAAzwB,EAAAktB,CAAAA,KAAAC,EAAA,KAAAmN,EAAApoB,CAEA,CAxF8CnI,GAE5Cwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAA8pB,EAAA,CAIuBG,UACjB,UAAa,CACjB,IAAA5xB,EAAW,IAAQ,CAAAgQ,MAAU,IAI/B,OAJ0ChQ,EACtCyU,OAAU,UAAMod,CAAA,EAClBA,EAAAC,MAAA,EACA,GACF9xB,CAEA,EAKkC+xB,eAC3B,SAAQ7/B,CAAA,KACX,CAAAA,EACD,SACgD,IAC/C8/B,EAAO,IAAO,CAAA55B,MAAA,CAAU,SAAMy5B,CAAK,EACrC,uBAAAA,EAAAtoC,MAAA,EAAAsoC,EAAAtoC,MAAA,CAAA2I,MAAA,GAAAA,CACA,GAIF,OAJyC8/B,EACrCvd,OAAU,UAAMod,CAAA,EAClBA,EAAAC,MAAA,EACA,GACFE,CAEA,EAKkCC,eAC5B,SAAiB1oC,CAAA,EACrB,IAAAyoC,EAAU,IAAQ,CAAAE,sBAAqB,CAAA3oC,GAIzC,OAJyCyoC,EACrCvd,OAAU,UAAMod,CAAA,EAClBA,EAAAC,MAAA,EACA,GACFE,CAEA,EAK0CG,mBAC5B,SAAaC,CAAA,EAC3B,YAAArjB,OAAA,MAAAsjB,aAAA,CAAAD,GAEA,EAKqCC,cACxB,SAAMD,CAAU,EAAW,OACpC,IAAO,CAAA1zB,IAAA,UAAUmzB,CAAW,EAC9B,OAAAA,EAAAC,MAAA,GAAAM,CACF,EAEA,EAK0CF,uBAC3B,SAAA3oC,CAAA,WAIX,IAAO,CAAA6O,MAAA,UAAgBy5B,CAAK,EAC9B,OAAAA,EAAAtoC,MAAA,GAAAA,CACF,GAJG,GAOL,GAqG2C,IACjB+oC,EAAoB/jC,GAACnK,MAAW,CAAAmuC,qBAAiB,EAAAhkC,GAAAnK,MAAA,CAAAouC,2BAAA,EAAAjkC,GAAAnK,MAAA,CAAAquC,wBAAA,EAAAlkC,GAAAnK,MAAA,CAAAsuC,sBAAA,EAAAnkC,GAAAnK,MAAA,CAAAuuC,uBAAA,WAAAxiB,CAAA,EACnD,OAAA5hB,GAAAnK,MAAA,CAAA+f,UAAA,CAAAgM,EAAA,OAExB,EAEAyiB,EAAArkC,GAAAnK,MAAA,CAAAyuC,oBAAA,EAAAtkC,GAAAnK,MAAA,CAAA8f,YAAA,CAO4B,SACnB4uB,GAAkB,CAC3B,OAAAR,EAAAljB,KAAA,CAAA7gB,GAAAnK,MAAA,CAAAsL,UAEA,CAKAnB,GAAOwa,IAAI,CAACgqB,OAAA,CAzGc,SACZlqC,CAAU,CAAC,CACvBA,GAAIA,CAAAA,EACA,IACiC,IACnBxD,EAAZysC,EAAI,GAAekB,EAA0B,WAC7C,IAAAr0B,EAAOpQ,GAAS0kC,iBAAY,CAAAlkB,OAAA,CAAiB1pB,GAC/C,OAAAsZ,EAAA,IAAApQ,GAAA0kC,iBAAA,CAAAjjB,MAAA,CAAArR,EAAA,OAqEN,OAnEmCtZ,EAC/BsiB,EAAQxT,EAAYtL,GAAA,CAAAipC,OAClB,UAAa,CAEf,OADEA,EAAO,GACTkB,GACA,EACAE,aAAA,eAAgBrqC,EAAAA,EAAAsqC,UAAA,GAChBC,eAAc,EAChBC,aAAA,CACA,GAEA9kC,GAAA0kC,iBAAiB,CAAAjvC,IAAS,CAAAqB,GAAWytC,EACvB,SAAAQ,CAAkB,EAU+C,IACrCC,EAAlCxU,EAAOuU,GAAc,KAAAE,KAAaC,EAAA5qC,EAAA4qC,QAAA,MAAAC,EAAA3U,EAAA0U,EAAAvpC,EAAArB,EAAAqB,QAAA,EAAAwnC,EAAAiC,EAAA9qC,EAAA8qC,KAAA,EAAAjC,EAAAX,EAAAloC,EAAAkoC,UAAA,EAAAW,EAAAkC,EAAA/qC,EAAA+qC,MAAA,EAAAjC,EAAAkC,EAAA,eAAAhrC,GAAAA,EAAAsqC,UAAA,CAAAlqC,MAAA,GAAAkqC,EAAA,eAAAtqC,EAAAA,EAAAsqC,UAAA,GAAAW,EAAA,aAAAjrC,EAAAA,EAAAirC,QAAA,KAAAC,EAAAlrC,EAAAkrC,OAAA,EAAAF,CAAAA,EAAAV,EAAA39B,GAAA,UAAAhM,CAAA,CAAAgV,CAAA,EACpC,OAAKs1B,CAAW,CAAAt1B,EAAA,CAAA20B,CAAU,CAAA30B,EAAA,GAE9Bs1B,EAAeX,CAAI,CAElBtqC,CAAAA,EAAAmrC,OAAc,EAAAnrC,EAAUmrC,OAAA,YACvBC,EAAOC,CAAY,CAAC,CAGsC,IACpDC,EAAcZ,CAHpBA,EAAIW,GAAc,KAAAV,IAAO,EAGLE,EAAaD,EAAaF,EAAExU,CAAU,CAAEqV,EAAAD,EAAAV,EAAAnoC,EAAAuoC,EAAAV,EAAA39B,GAAA,UAAA6+B,CAAA,CAAA71B,CAAA,EACxD,OAAKo1B,EAAOO,EAAahB,CAAY,CAAA30B,EAAA,CAASu1B,CAAA,CAAAv1B,EAAS,CACvDi1B,EAEJ,GAAAG,EAAAO,EAAkBhB,EAAAY,EAAAN,EAAA,CAAAa,EAAAT,EAAAniB,KAAAtI,GAAA,EAAA9d,CAAA,IAAA6nC,CAAA,KAAAY,CAAA,KAAAriB,KAAAtI,GAAA,EAAA9d,EAAA6nC,CAAA,EAAAY,EAAA,CAIN,GAFZ1uC,EAAQ6tC,YAAA,CAAcW,EAAGvoC,EAAAoX,KAAA,GAAApX,CAAA,CACzBjG,EAAQ+tC,cAAY,CAAGkB,EACvBjvC,EAAIguC,YAAQ,CAAAe,GACVtC,GAEuC,GACvC6B,EAAAroC,EAAAgpC,EAAAF,GAAA,CACApB,IACD,MACD,IACEO,EAAAG,EAAA,CAEAruC,EAAQ6tC,YAAA,CAAcW,EAAGC,EAAApxB,KAAA,GAAAoxB,CAAA,CACzBzuC,EAAQ+tC,cAAY,CAAG,EACvB/tC,EAAAguC,YAAA,CAAqB,EAErBnpC,EAAA2pC,EAAWC,EAAapxB,KAAA,GAAAoxB,CAAA,MACxB/C,EAAA+C,EAAA,KACAd,IACF,MACK,CAIJ,EAFC1nC,EAAiBgpC,EAAAF,GAClBtB,EAAAmB,GAlBD,EAoBJlV,EAEA,GACF15B,EAAAysC,MAAA,EA8BAvjC,GAAOwa,IAAI,CAAC+pB,gBAAe,CAAGA,EAC9BvkC,GAAOwa,IAAA,CAAAwrB,eAAoB,CAPA,UAClB,CACT,OAAA3B,EAAAxjB,KAAA,CAAA7gB,GAAAnK,MAAA,CAAAsL,UAEA,EAIFnB,GAAA0kC,iBAAA,CAAAxB,CACC,IAAW,UACV,CAGyC,SACnC+C,EAAQC,CACN,CAAAzV,CAAA,CAAU0V,CAAA,CAAM,CAOxB,MADEz9B,QAFgB0K,SAAe8yB,CAAA,IAAWC,EAAM1V,CAAAA,CAAE,CAAG,GAAAyV,CAAU,CAAC,EAAE,EAAG,IAAM,IAAE9yB,SAAM8yB,CAAA,IAAAC,EAAA1V,CAAAA,CAAA,IAAAyV,CAAA,aAAA9yB,SAAA8yB,CAAA,IAAAC,EAAA1V,CAAAA,CAAA,IAAAyV,CAAA,SAC1E,KAAAA,CAAAA,GAAAzV,EAAAlJ,WAAA2e,CAAA,IAAAC,EAAA1V,CAAAA,CAAA,IAAAyV,CAAA,UACF,GAGT,CA0DFlmC,GAAAwa,IAAA,CAAA4rB,YAAA,CA7C+D,SAC1CC,CAAW,CAAAC,CAAM,CAAApB,CAAW,CAAA5qC,CAAS,CAClD,CAGJ,IAAAisC,EAAU,IAAWvmC,GAACwmC,KAAA,CAAAH,GAAAI,SAAA,GAAAC,EAAA,IAAA1mC,GAAAwmC,KAAA,CAAAF,GAAAG,SAAA,GAAAE,EAAArsC,EAAAkoC,UAAA,CAAAoE,EAAAtsC,EAAAqB,QAAA,CAEwC,OAA9DrB,EAAOA,GAAY,GACjB0F,GAAUwa,IAAA,CAAAgqB,OAAY,CAAAxkC,GAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAA9e,EAAA,CACtB4qC,SAAAA,GAAY,IACZN,WAAU2B,EACVhB,SAASmB,EACTlB,QAAQkB,EAAsDrB,OACxD,SAAAO,CAAmB,CAAAhB,CAAW,CAC9BY,CAAQ,CAAAN,CAAA,CAAY,CAG1B,OAAAe,EAAArB,EAAAY,EADSlrC,EAAeusC,WAAY,CAAAvsC,EAASusC,WAAA,CAAAjB,EAAAV,GAAA,EAAA/hB,KAAAE,GAAA,CAAAuiB,EAAAV,EAAA/hB,CAAAA,KAAAC,EAAA,KAE7C,EACmDof,WAC7C,SAAAzlC,CAAoB,CAAAgpC,CAAA,CAAAF,CAAA,KACtBc,EAKD,OAAAA,EAAAV,EAAAS,EAAAA,EAAA,GAAAX,EAAAF,EACH,EACiDlqC,SAC3C,SAAAoB,CAAkB,CAAAgpC,CAAA,CAAAF,CAAA,KACpBe,EAAkB,CAAU,GAC1B9nC,MAAAC,OAAO,CAAAhC,GAKR,OAAA6pC,EAAAX,EAAAlpC,EAAAA,EAAA,GAAAgpC,EAAAF,EACD,CACDe,EAAA7pC,EAAAgpC,EAAAF,EACH,EAEJ,GAEA,CAGD,IAAiB,SAEhB9zB,CAAA,EAEA,aAIkB,IAAA/R,EAAA+R,EAAA/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,QAChBA,EAAOmkB,KAAK,EACZnkB,EAAAijC,IAAA,oCACD,MAED,UAYQ9e,EAAGC,CAAA,CAAAC,CAAA,EACT,IAAI,CAACD,CAAC,CAAGA,EACX,KAAAC,CAAA,CAAAA,CAEA,CAdArkB,EAAAmkB,KAAA,CAAAA,EAcuDA,EAErDrP,SAAM,EAENtZ,KAAA,QAEA8gC,YAAAnY,EAKqBlgB,IACnB,SAAO6iC,CAAI,EACb,WAAA3iB,EAAA,KAAAC,CAAA,CAAA0iB,EAAA1iB,CAAA,MAAAC,CAAA,CAAAyiB,EAAAziB,CAAA,CAEA,EAM2BG,UACnB,SAAUsiB,CAAA,EAGlB,OAFE,IAAI,CAAC1iB,CAAC,EAAI0iB,EAAK1iB,CAAC,CAChB,KAAAC,CAAA,EAAOyiB,EAAIziB,CAAA,CACb,MAO6B0iB,UACpB,SAAI9gB,CAAW,CAAC,CACzB,WAAA9B,EAAA,KAAAC,CAAA,CAAA6B,EAAA,KAAA5B,CAAA,CAAA4B,EAEA,EAMmC+gB,gBACvB,SAAA/gB,CAAA,EAGZ,OAFE,IAAI,CAAC7B,CAAC,EAAI6B,EACV,KAAA5B,CAAA,EAAO4B,EACT,MAO0BO,SACxB,SAAWsgB,CAAM,CAAI,CACvB,WAAA3iB,EAAA,KAAAC,CAAA,CAAA0iB,EAAA1iB,CAAA,MAAAC,CAAA,CAAAyiB,EAAAziB,CAAA,CAEA,EAMgC4iB,eACpB,SAAMH,CAAA,EAGlB,OAFE,IAAI,CAAC1iB,CAAC,EAAI0iB,EAAK1iB,CAAC,CAChB,KAAAC,CAAA,EAAOyiB,EAAIziB,CAAA,CACb,MAOkC6iB,eACrB,SAAUjhB,CAAK,EAC5B,WAAA9B,EAAA,KAAAC,CAAA,CAAA6B,EAAA,KAAA5B,CAAA,CAAA4B,EAEA,EAMwCkhB,qBAC5B,SAAAlhB,CAAA,EAGZ,OAFE,IAAI,CAAC7B,CAAC,EAAI6B,EACV,KAAA5B,CAAA,EAAO4B,EACT,MAQ4BjB,SAC1B,SAAWiB,CAAU,CAAE,CACzB,WAAA9B,EAAA,KAAAC,CAAA,CAAA6B,EAAA,KAAA5B,CAAA,CAAA4B,EAEA,EAOkCmhB,eACtB,SAAAnhB,CAAA,EAGZ,OAFE,IAAI,CAAC7B,CAAC,EAAI6B,EACV,KAAA5B,CAAA,EAAO4B,EACT,MAQ0BohB,OACxB,SAAWphB,CAAM,CAAI,CACvB,WAAA9B,EAAA,KAAAC,CAAA,CAAA6B,EAAA,KAAA5B,CAAA,CAAA4B,EAEA,EAOgCqhB,aACpB,SAAArhB,CAAA,EAGZ,OAFE,IAAI,CAAC7B,CAAC,EAAI6B,EACV,KAAA5B,CAAA,EAAO4B,EACT,MAOoB2S,GAClB,SAAQkO,CAAM,EAChB,YAAA1iB,CAAA,GAAA0iB,EAAA1iB,CAAA,OAAAC,CAAA,GAAAyiB,EAAAziB,CAAA,EAOoBkjB,GAClB,SAAQT,CAAM,EAChB,YAAA1iB,CAAA,CAAA0iB,EAAA1iB,CAAA,OAAAC,CAAA,CAAAyiB,EAAAziB,CAAA,EAOqBmjB,IACnB,SAAQV,CAAM,EAChB,YAAA1iB,CAAA,EAAA0iB,EAAA1iB,CAAA,OAAAC,CAAA,EAAAyiB,EAAAziB,CAAA,EAQoBojB,GAClB,SAAQX,CAAM,EAChB,YAAA1iB,CAAA,CAAA0iB,EAAA1iB,CAAA,OAAAC,CAAA,CAAAyiB,EAAAziB,CAAA,EAOqBqjB,IACnB,SAAQZ,CAAM,EAChB,YAAA1iB,CAAA,EAAA0iB,EAAA1iB,CAAA,OAAAC,CAAA,EAAAyiB,EAAAziB,CAAA,EAQyB4V,KACvB,SAAW6M,CAAA,CAAMpgB,CAAA,EAKnB,OAJQ,SAAAA,GACLA,CAAAA,EAAA,IAEDA,EAAAvD,KAAOxkB,GAAI,CAAAwkB,KAAMzkB,GAAI,CAAC,EAACgoB,GAAI,GAC7B,IAAAvC,EAAA,KAAAC,CAAA,EAAA0iB,EAAA1iB,CAAA,MAAAA,CAAA,EAAAsC,EAAA,KAAArC,CAAA,EAAAyiB,EAAAziB,CAAA,MAAAA,CAAA,EAAAqC,EAEA,EAK8BihB,aACnB,SAASb,CAAK,CAAC,CAExB,IAAAc,EAAO,IAAK,CAAAxjB,CAAA,CAAK0iB,EAAK1iB,CAAA,CAAAyjB,EAAK,IAAK,CAAAxjB,CAAA,CAAAyiB,EAAAziB,CAAA,CAClC,OAAAlB,KAAA1J,IAAA,CAAAmuB,EAAAA,EAAAC,EAAAA,EAEA,EAK8B/O,aACrB,SAAUgO,CAAA,EACnB,YAAA7M,IAAA,CAAA6M,EAEA,EAKqBpoC,IACnB,SAAOooC,CAAI,EACb,WAAA3iB,EAAAhB,KAAAzkB,GAAA,MAAA0lB,CAAA,CAAA0iB,EAAA1iB,CAAA,EAAAjB,KAAAzkB,GAAA,MAAA2lB,CAAA,CAAAyiB,EAAAziB,CAAA,EAEA,EAKqB1lB,IACnB,SAAOmoC,CAAI,EACb,WAAA3iB,EAAAhB,KAAAxkB,GAAA,MAAAylB,CAAA,CAAA0iB,EAAA1iB,CAAA,EAAAjB,KAAAxkB,GAAA,MAAA0lB,CAAA,CAAAyiB,EAAAziB,CAAA,EAEA,EAIsB4X,SACpB,UAAgB,CAClB,YAAA7X,CAAA,UAAAC,CAAA,EAQuByjB,MACrB,SAAS1jB,CAAA,CAAAC,CAAA,EAGX,OAFE,IAAI,CAACD,CAAC,CAAGA,EACT,KAAAC,CAAA,CAAOA,EACT,MAOmB0jB,KACjB,SAAS3jB,CAAA,EAEX,OADE,KAAAA,CAAA,CAAOA,EACT,MAOmB4jB,KACjB,SAAS3jB,CAAA,EAEX,OADE,KAAAA,CAAA,CAAOA,EACT,MAO8B4jB,aACnB,SAAMnB,CAAA,EAGjB,OAFE,IAAI,CAAC1iB,CAAC,CAAG0iB,EAAK1iB,CAAC,CACf,KAAAC,CAAA,CAAOyiB,EAAIziB,CAAA,CACb,MAMsB6jB,KACpB,SAAQpB,CAAM,CACV,CACJ,IAAI1iB,EAAE,IAAG,CAAAA,CAAK,CAACC,EAAA,KAAAA,CAAA,CACf,IAAI,CAACD,CAAC,CAAG0iB,EAAK1iB,CAAC,CACf,KAAKC,CAAC,CAAGyiB,EAAAziB,CAAA,CACTyiB,EAAK1iB,CAAC,CAAGA,EACX0iB,EAAAziB,CAAA,CAAAA,CAEA,EAImBze,MACjB,UAAW,CACb,WAAAue,EAAA,KAAAC,CAAA,MAAAC,CAAA,CACF,CAEC,CACF,EAASlL,GAAQ,SAEhBpH,CAAA,EAEA,aAGyB,IAAA/R,EAAA+R,EAAA/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,QACvBA,EAAOmoC,YAAK,EACZnoC,EAAAijC,IAAA,2CACD,MAED,UAOOkF,EAASC,CAAA,EACd,IAAI,CAACA,MAAM,CAAGA,EAChB,KAAA1iB,MAAA,IAIA1lB,EAAOmoC,YAAY,CAACA,EAAwDnoC,EAE1EmoC,YAAa,CAAArzB,SAAA,EAEbwnB,YAAA6L,EAM8BE,YACvB,SAAYrkB,CAAA,EAEnB,OADE,KAAA0B,MAAW,CAAAjwB,IAAA,CAAAuuB,GACb,MAQgCskB,aACzB,SAAc5iB,CAAM,CAAC,CAE5B,OADE,KAAAA,MAAW,MAAAA,MAAA,CAAApmB,MAAA,CAAAomB,GACb,KAGF,EAUkE1lB,EAC5DmoC,YACA,CAAMI,iBAAiB,CAAG,SAAQC,CAAA,CAAKC,CAAA,CAAIC,CAAA,CAAGC,CAAG,CAAC,CAGtD,IAAIjsC,EAAOksC,EAAG,CAAAD,EAAAvkB,CAAA,CAAAskB,EAAAtkB,CAAA,EAAAokB,CAAAA,EAAAnkB,CAAA,CAAAqkB,EAAArkB,CAAA,GAAAskB,EAAAtkB,CAAA,CAAAqkB,EAAArkB,CAAA,EAAAmkB,CAAAA,EAAApkB,CAAA,CAAAskB,EAAAtkB,CAAA,EAAAykB,EAAA,CAAAJ,EAAArkB,CAAA,CAAAokB,EAAApkB,CAAA,EAAAokB,CAAAA,EAAAnkB,CAAA,CAAAqkB,EAAArkB,CAAA,GAAAokB,EAAApkB,CAAA,CAAAmkB,EAAAnkB,CAAA,EAAAmkB,CAAAA,EAAApkB,CAAA,CAAAskB,EAAAtkB,CAAA,EAAA0kB,EAAA,CAAAH,EAAAtkB,CAAA,CAAAqkB,EAAArkB,CAAA,EAAAokB,CAAAA,EAAArkB,CAAA,CAAAokB,EAAApkB,CAAA,GAAAukB,EAAAvkB,CAAA,CAAAskB,EAAAtkB,CAAA,EAAAqkB,CAAAA,EAAApkB,CAAA,CAAAmkB,EAAAnkB,CAAA,KACZykB,IAAAA,EAAS,CAET,IAAIC,EAAKH,EAAME,EAAAE,EAAMH,EAAKC,CACxB,IAAAC,GAASA,GAAI,MAAaC,GAAAA,GAAA,EAE5BtsC,CADEA,EAAO,IAAAyrC,EAAgB,eAAiB,EAErCE,WAAA,KAAAroC,EAAAmkB,KAAA,CAAAqkB,EAAApkB,CAAA,CAAA2kB,EAAAN,CAAAA,EAAArkB,CAAA,CAAAokB,EAAApkB,CAAA,EAAAokB,EAAAnkB,CAAA,CAAA0kB,EAAAN,CAAAA,EAAApkB,CAAA,CAAAmkB,EAAAnkB,CAAA,IAEJ3nB,EAAA,IAAAyrC,CAEE,MAGHzrC,MACKyrC,EAFHS,IAAAA,GAAaC,IAAAA,EAEV,aAEJ,WAEH,CACF,OAAAnsC,CAEA,EAUoEsD,EAC9DmoC,YAAa,CAAAc,oBACb,UAAgBT,CAAA,CAAAC,CAAM,CACtB/iB,CAAI,CAAI,CAEZ,IAA6BgjB,EAAAC,EAAAO,EAAAj5B,EAAxBvT,EAAO,IAAIyrC,EAAaztC,EAAAgrB,EAAAhrB,MAAA,KAC3BuV,EAAA,EAAKA,EAAMvV,EAAGuV,IACdy4B,EAAKhjB,CAAM,CAACzV,EAAC,CACb04B,EAAAjjB,CAAQ,EAAAzV,EAAA,GAAavV,EAAA,CAErBwuC,EAAOf,EAAaI,iBAAY,CAAAC,EAAAC,EAAAC,EAAAC,GAClCjsC,EAAA4rC,YAAA,CAAAY,EAAAxjB,MAAA,EAKF,OAHIhpB,EAAOgpB,MAAM,CAAAhrB,MAAG,IACjBgC,CAAAA,EAAA0rC,MAAA,iBAEH1rC,CAEA,EAO0EsD,EACpEmoC,YAAa,CAAAgB,uBACb,CAAS,SAAQC,CAAQ,CAAAC,CAAA,EAE7B,IAA6Bp5B,EAAxBvT,EAAO,IAAIyrC,EAAaztC,EAAA0uC,EAAA1uC,MAAA,KAC3BuV,EAAI,EAAAA,EAAKvV,EAAUuV,IACf,CAGJ,IAAAu4B,EAAOY,CAAA,CAAAn5B,EAAY,CAACw4B,EAAMW,CAAM,EAAAn5B,EAAA,GAAAvV,EAAA,CAAAwuC,EAAAf,EAAAc,oBAAA,CAAAT,EAAAC,EAAAY,GAClC3sC,EAAA4rC,YAAA,CAAAY,EAAAxjB,MAAA,CACA,CAIF,OAHIhpB,EAAOgpB,MAAM,CAAAhrB,MAAG,IACjBgC,CAAAA,EAAA0rC,MAAA,iBAEH1rC,CAEA,EAQ0EsD,EACpEmoC,YAAa,CAAAmB,yBAEb,UAAe5jB,CAAA,CAAO6jB,CAAA,CAAKC,CAAC,EAQhC,IAAA9qC,EAAO6qC,EAAA7qC,GAAA,CAAA8qC,GAAa7qC,EAAO4qC,EAAA5qC,GAAM,CAAA6qC,GAAAC,EAAA,IAAAzpC,EAAAmkB,KAAA,CAAAxlB,EAAAylB,CAAA,CAAA1lB,EAAA2lB,CAAA,EAAAqlB,EAAA,IAAA1pC,EAAAmkB,KAAA,CAAAzlB,EAAA0lB,CAAA,CAAAzlB,EAAA0lB,CAAA,EAAAslB,EAAAxB,EAAAc,oBAAA,CAAAvqC,EAAA+qC,EAAA/jB,GAAAkkB,EAAAzB,EAAAc,oBAAA,CAAAQ,EAAA9qC,EAAA+mB,GAAAmkB,EAAA1B,EAAAc,oBAAA,CAAAtqC,EAAA+qC,EAAAhkB,GAAAokB,EAAA3B,EAAAc,oBAAA,CAAAS,EAAAhrC,EAAAgnB,GAAAhpB,EAAA,IAAAyrC,EASnC,OAREzrC,EAAO4rC,YAAY,CAACqB,EAAOjkB,MAAM,EACjChpB,EAAO4rC,YAAY,CAACsB,EAAOlkB,MAAM,EACjChpB,EAAO4rC,YAAY,CAACuB,EAAOnkB,MAAM,EAEjChpB,EAAI4rC,YAAc,CAAAwB,EAASpkB,MAAG,EAC5BhpB,EAAOgpB,MAAM,CAAAhrB,MAAG,IACjBgC,CAAAA,EAAA0rC,MAAA,iBAEH1rC,CAEC,CACF,EAASyc,GAAQ,SAEhBpH,CAAA,EAEA,aAEA,IAAI/R,EAAO+R,EAAO/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,QAChBA,EAAOwmC,KAAK,EACZxmC,EAAAijC,IAAA,qCACD,MAED,UAWOuD,EAAO99B,CAAA,EACVA,EAID,KAAAqhC,gBAAA,CAAArhC,GAJgB,IAAC,CAAAshC,SAAA,EAAG,EAAG,EAAG,EAAE,EAC7B,CAMF,CAmb0B,SACpBC,EAAOtpC,CAAA,CAAAuwB,CAAA,CAAAxK,CAAA,QAMI,CALbA,EAAA,GACDA,CAAAA,GAAA,GAECA,EAAA,GACDA,CAAAA,GAAA,GAECA,EAAA,EAAO,GACR/lB,EAAA,CAAAuwB,EAAAvwB,CAAAA,EAAA,EAAA+lB,EAECA,EAAA,GACDwK,EAECxK,EAAA,EAAO,EACR/lB,EAAA,CAAAuwB,EAAAvwB,CAAAA,EAAA,KAAA+lB,CAAAA,EAAA,EAEH/lB,CAPE,CA3bFX,EAAOwmC,KAAK,CAACA,EAAiDxmC,EAE5DwmC,KAAA,CAAA1xB,SAAA,EAIkCi1B,iBAC5B,SAAArhC,CAAA,EAEJ,IAAIma,EACFna,KAAQ89B,EAAM0D,YAAa,EAC5BxhC,CAAAA,EAAA89B,EAAA0D,YAAA,CAAAxhC,EAAA,EAGU,gBAATA,GAASma,CAAAA,EAAC,CAAK,IAAK,IAAK,IAAE,EAC5B,EAGCA,GACDA,CAAAA,EAAA2jB,EAAA2D,aAAA,CAAAzhC,EAAA,EAECma,GACDA,CAAAA,EAAA2jB,EAAA4D,aAAA,CAAA1hC,EAAA,EAECma,GACDA,CAAAA,EAAA2jB,EAAA6D,aAAA,CAAA3hC,EAAA,EAECma,GACSA,CAAAA,EAAC,CAAG,EAAG,EAAG,EAAE,EACtB,EAECA,GACD,KAAAmnB,SAAA,CAAAnnB,EAGH,EAQ6BynB,UACtB,SAAAt0C,CAAA,CAAAu0C,CAAA,CAAApiC,CAAA,EAAKnS,GAAK,IAAKu0C,GAAK,IAEzBpiC,GAAI,IAC4B,IAAC8oB,EAAApL,EAAAiH,EAAAnuB,EAAAqB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA9hB,GAAA,EAAG3I,EAAGu0C,EACnCpiC,EAA4B,EAACzJ,EAAAsB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA/hB,GAAA,EAAG1I,EAAGu0C,EAAEpiC,EAEzC,EAEiB,GAAjB2kB,EAAI,CAAAnuB,EAAAD,CAAQ,EAAK,EACfC,IAAQD,EACVuyB,EACKpL,EAAA,MACH,CACA,IAAI5vB,EAAI0I,EAAMD,EACN,OAARmnB,EAAAiH,EAAQ,GAAA72B,EAAA,GAAA0I,EAAAD,CAAA,EAAAzI,EAAA0I,CAAAA,EAAAD,CAAA,EACNC,GAAK,KACH3I,EACAi7B,EAAA,CAAMsZ,EAAApiC,CAAAA,EAAAlS,EAAAs0C,CAAAA,EAAApiC,EAAA,KACR,KAAK,MACHoiC,EACAtZ,EAAA,CAAM9oB,EAAAnS,CAAAA,EAAAC,EAAA,EACR,KAAK,MACHkS,EACA8oB,EAAA,CAAMj7B,EAAAu0C,CAAAA,EAAAt0C,EAAA,CAEV,CACDg7B,GAAA,CAED,OACE,CACA9N,KAAKrI,KAAK,CAACmW,IAAAA,GACX9N,KAAKrI,KAAK,CAAC+K,IAAAA,GACZ1C,KAAArI,KAAA,CAAAgS,IAAAA,GACH,EAMsB2Z,UACb,UAAK,CACd,YAAA+D,OAAA,EAM4BR,UACrB,SAAUnnB,CAAA,EACjB,KAAA2nB,OAAA,CAAA3nB,CAEA,EAIkB4nB,MAChB,UAAa,CACb,IAAA5nB,EAAO,IAAS,CAAA4jB,SAAS,GAC3B,aAAA5jB,CAAA,QAAAA,CAAA,QAAAA,CAAA,OAEA,EAImB6nB,OACb,UAAS,CACb,IAAA7nB,EAAO,IAAU,CAAA4jB,SAAS,GAC5B,cAAA5jB,CAAA,QAAAA,CAAA,QAAAA,CAAA,QAAAA,CAAA,OAEA,EAIkB8nB,MAChB,UAAa,CAGb,IAAA9nB,EAAO,IAAS,CAAA4jB,SAAS,GAAMmE,EAAM,IAAG,CAAAN,SAAW,CAAAznB,CAAK,IAAAA,CAAA,IAAAA,CAAA,KAC1D,aAAA+nB,CAAA,QAAAA,CAAA,SAAAA,CAAA,QAEA,EAImBC,OACb,UAAS,CAGb,IAAAhoB,EAAO,IAAU,CAAA4jB,SAAS,GAAAmE,EAAU,IAAK,CAAAN,SAAU,CAACznB,CAAK,IAAAA,CAAO,CAAM,EAAC,CAAEA,CAAG,KAC9E,cAAA+nB,CAAA,QAAAA,CAAA,SAAAA,CAAA,SAAA/nB,CAAA,OAEA,EAIkBioB,MAChB,UAAa,CAEb,IAAuB90C,EAAAu0C,EAAApiC,EAAnB0a,EAAS,IAAC,CAAA4jB,SAAS,GAUzB,OAPEzwC,EAAIA,IAAAA,CAFJA,EAAI6sB,CAAG,GAAM,CAAAoZ,QAAW,MAEpBvhC,MAAO,CAAG,IAAS1E,EAAAA,CAAA,CAGvBu0C,EAAIA,IAAAA,CAFJA,EAAI1nB,CAAG,GAAM,CAAAoZ,QAAW,MAEpBvhC,MAAO,CAAG,IAAS6vC,EAAAA,CAAA,CAGvBpiC,EAAAA,IAAAA,CAFAA,EAAI0a,CAAG,GAAM,CAAAoZ,QAAW,MAExBvhC,MAAS,CAAW,IAAOyN,EAAAA,CAAA,CAC7BnS,EAAAoS,WAAA,GAAAmiC,EAAAniC,WAAA,GAAAD,EAAAC,WAAA,EAEA,EAImB2iC,OACb,UAAS,CAEb,IAA2B7iC,EAK7B,OADEA,EAAAA,IAAAA,CAFAA,EAAIA,CADJA,EAAIib,KAAErI,KAAQ,CAAC+H,IAAAA,IADA,CAAA4jB,SAAY,EACZ,MACRxK,QAAM,IAAK,EAElBvhC,MAAY,CAAK,IAAOwN,EAAAA,CAAA,CAC1B,KAAA4iC,KAAA,GAAA5iC,EAAAE,WAAA,EAEA,EAIqB4iC,SACnB,UAAY,CACd,YAAAvE,SAAA,OAO0BwE,SACpB,SAAS1lB,CAAK,EAClB,IAAA1C,EAAY,KAAA4jB,SAAA,GAGd,OAFE5jB,CAAK,IAAA0C,EACL,KAAAykB,SAAW,CAAAnnB,GACb,MAMwBqoB,YAClB,UAAc,CAGlB,IAAIroB,EAAC,IAAU,CAAA4jB,SAAA,GAAA0E,EAAA/3B,SAAA,CAAAyP,GAAAA,CAAA,IAAAA,IAAAA,CAAA,IAAAA,IAAAA,CAAA,KAAAxJ,OAAA,QAAA+xB,EAAAvoB,CAAA,IAEjB,OAFiB,IAAC,CAAAmnB,SAAA,EAASmB,EAASA,EAASA,EAAaC,EACxD,EACF,MAOkCC,aAC5B,SAAcC,CAAS,EAI3B,IAAAzoB,EAAY,KAAA4jB,SAAa,GAAA0E,EAAA,CAAAtoB,GAAAA,CAAA,IAAAA,IAAAA,CAAA,IAAAA,IAAAA,CAAA,KAAAxJ,OAAA,IAAA+xB,EAAAvoB,CAAA,IAK3B,OAHEyoB,EAAUA,GAAQ,IAClBH,EAAK3jB,OAAU2jB,GAAA3jB,OAAA8jB,GAAA,UAAC,CAAAtB,SAAA,EAASmB,EAASA,EAASA,EAAaC,EACxD,EACF,MAOkCG,YAC1B,SAAAC,CAAsB,EAC1BA,aAAuBhF,GACxBgF,CAAAA,EAAA,IAAAhF,EAAAgF,EAAA,EAQD,IAAwBv7B,EAAnBvT,EAAO,EAAI,CAAA6oB,EAAQ,KAAAylB,QAAA,GAAAnoB,EAAA,KAAA4jB,SAAA,GAAAgF,EAAAD,EAAA/E,SAAA,OACtBx2B,EAAA,EAAOA,EAAI,EAACA,IACdvT,EAAAjH,IAAA,CAAA0tB,KAAArI,KAAA,CAAA+H,GAAAA,CAAA,CAAA5S,EAAA,CAAAw7B,GAAAA,CAAA,CAAAx7B,EAAA,GAKF,OAFEvT,CAAK,IAAA6oB,EACL,KAAAykB,SAAW,CAAAttC,GACb,KAGF,EASAsD,EAAAwmC,KAAA,CAAAkF,MAAA,qIAQA1rC,EAAAwmC,KAAA,CAAAmF,MAAA,iGAQA3rC,EAAAwmC,KAAA,CAAAoF,KAAA,0DAO4B5rC,EAC1BwmC,KAAA,CAAsB0D,YAAA,EACtB2B,UAAA,UACAC,aAAsB,UACtBC,KAAA,UACAC,WAAsB,UACtBC,MAAsB,UACtBC,MAAA,UACAC,OAAsB,UACtBC,MAAA,UACAC,eAAsB,UACtBC,KAAA,UACAC,WAAsB,UACtBC,MAAA,UACAC,UAAsB,UACtBC,UAAA,UACAC,WAAsB,UACtBC,UAAsB,UACtBC,MAAA,UACAC,eAAsB,UACtBC,SAAsB,UACtBC,QAAsB,UACtBC,KAAA,UACAC,SAAsB,UACtBC,SAAA,UACAC,cAAsB,UACtBC,SAAsB,UACtBC,SAAA,UACAC,UAAsB,UACtBC,UAAA,UACAC,YAAA,UACAC,eAAsB,UACtBC,WAAsB,UACtBC,WAAsB,UACtBC,QAAA,UACAC,WAAA,UACAC,aAAA,UACAC,cAAsB,UACtBC,cAAsB,UACtBC,cAAsB,UACtBC,cAAsB,UACtBC,WAAsB,UACtBC,SAAA,UACAC,YAAsB,UACtBC,QAAsB,UACtBC,QAAA,UACAC,WAAsB,UACtBC,UAAA,UACAC,YAAsB,UACtBC,YAAsB,UACtBC,QAAA,UACAC,UAAA,UACAC,WAAsB,UACtBC,KAAA,UACAC,UAAsB,UACtBC,KAAsB,UACtBC,KAAA,UACAC,MAAA,UACAC,YAAsB,UACtBC,SAAsB,UACtBC,QAAA,UACAC,UAAsB,UACtBC,OAAsB,UACtBC,MAAsB,UACtBC,MAAA,UACAC,SAAA,UACAC,cAAsB,UACtBC,UAAA,UACAC,aAAsB,UACtBC,UAAA,UACAC,WAAsB,UACtBC,UAAA,UACAC,qBAAsB,UACtBC,UAAsB,UACtBC,UAAA,UACAC,WAAsB,UACtBC,UAAA,UACAC,YAAA,UACAC,cAAsB,UACtBC,aAAA,UACAC,eAAsB,UACtBC,eAAsB,UACtBC,eAAsB,UACtBC,YAAsB,UACtBC,KAAA,UACAC,UAAsB,UACtBC,MAAA,UACAC,QAAsB,UACtBC,OAAA,UACAC,iBAAsB,UACtBC,WAAA,UACAC,aAAsB,UACtBC,aAAA,UACAC,eAAA,UACAC,gBAAA,UACAC,kBAAsB,UACtBC,gBAAsB,UACtBC,gBAAsB,UACtBC,aAAsB,UACtBC,UAAsB,UACtBC,UAAsB,UACtBC,SAAA,UACAC,YAAsB,UACtBC,KAAA,UACAC,QAAsB,UACtBC,MAAA,UACAC,UAAsB,UACtBC,OAAA,UACAC,UAAsB,UACtBC,OAAA,UACAC,cAAsB,UACtBC,UAAA,UACAC,cAAsB,UACtBC,cAAsB,UACtBC,WAAsB,UACtBC,UAAsB,UACtBC,KAAsB,UACtBC,KAAsB,UACtBC,KAAA,UACAC,WAAsB,UACtBC,OAAA,UACAC,cAAsB,UACtBC,IAAA,UACAC,UAAsB,UACtBC,UAAA,UACAC,YAAsB,UACtBC,OAAA,UACAC,WAAsB,UACtBC,SAAsB,UACtBC,SAAsB,UACtBC,OAAsB,UACtBC,OAAA,UACAC,QAAA,UACAC,UAAsB,UACtBC,UAAsB,UACtBC,UAAsB,UACtBC,KAAA,UACAC,YAAsB,UACtBC,UAAsB,UACtBloB,IAAA,UACAmoB,KAAA,UACAC,QAAsB,UACtBC,OAAA,UACAC,UAAsB,UACtBC,OAAsB,UACtBC,MAAsB,UACtBC,MAAA,UACAC,WAAsB,UACtBC,OAAA,UACFC,YAAA,SAEA,EAgCuC/0C,EACrCwmC,KAAO,CAAAwO,OAAM,UAAiBtsC,CAAA,EAChC,OAAA89B,EAAAyO,UAAA,CAAAzO,EAAA4D,aAAA,CAAA1hC,GAEA,EAM6C1I,EACvCwmC,KAAA,CAAA4D,aAAoB,UAAY1hC,CAAA,EACpC,IAAIT,EAAOS,EAAAT,KAAA,CAAAu+B,EAAAkF,MAAA,KACTzjC,EAAI,CAIJ,IAAAjS,EAAOod,SAAAnL,CAAA,cAAAk2B,IAAA,CAAAl2B,CAAA,kBAAAk2B,IAAA,CAAAl2B,CAAA,YAAAsiC,EAAAn3B,SAAAnL,CAAA,cAAAk2B,IAAA,CAAAl2B,CAAA,kBAAAk2B,IAAA,CAAAl2B,CAAA,YAAAE,EAAAiL,SAAAnL,CAAA,cAAAk2B,IAAA,CAAAl2B,CAAA,kBAAAk2B,IAAA,CAAAl2B,CAAA,kBACL,CACAmL,SAASpd,EAAG,IACZod,SAASm3B,EAAG,IACZn3B,SAAQjL,EAAG,IACZF,CAAA,IAAAsf,WAAAtf,CAAA,OACF,CACH,EAYAjI,EAAAwmC,KAAA,CAAA0O,QAAA,CAAA1O,EAAAwO,OAAA,CAMuCh1C,EACrCwmC,KAAO,CAAA2O,OAAM,UAAiBzsC,CAAA,EAChC,OAAA89B,EAAAyO,UAAA,CAAAzO,EAAA6D,aAAA,CAAA3hC,GAEA,EAQ6C1I,EACvCwmC,KAAA,CAAA6D,aAAoB,UAAY3hC,CAAA,EACpC,IAAIT,EAAQS,EAAAT,KAAA,CAAAu+B,EAAAmF,MAAA,KACV1jC,GAQF,IAAajS,EAAAu0C,EAAApiC,EAAT8oB,EAAA,CAAA1J,WAAStf,CAAA,sBAAA4d,EAAA0B,WAAAtf,CAAA,WAAAk2B,IAAA,CAAAl2B,CAAA,YAAA6kB,EAAAvF,WAAAtf,CAAA,WAAAk2B,IAAA,CAAAl2B,CAAA,eACX4d,IAAAA,EACF7vB,EACKu0C,EAAApiC,EAAA2kB,MACH,CAGA,IAAIoE,EAAApE,GAAQ,GAAMA,EAAIjH,CAAAA,EAAI,GAAAiH,EAAAjH,EAAAiH,EAAAjH,CAAA,CAAAllB,EAAAmsB,EAAAA,EAAAoE,EAC1Bl7B,EAAIi0C,EAAQtpC,EAAGuwB,EAAGD,EAAA,KAClBsZ,EAAIN,EAAQtpC,EAAGuwB,EAAGD,GACnB9oB,EAAA8hC,EAAAtpC,EAAAuwB,EAAAD,EAAA,IAED,OACE,CACA9N,KAAKrI,KAAK,CAAC9kB,IAAAA,GACXmtB,KAAKrI,KAAK,CAACyvB,IAAAA,GACXpnB,KAAKrI,KAAG,CAAG3S,IAAAA,GACZF,CAAA,IAAAsf,WAAAtf,CAAA,OACH,CAvBE,EAmCFjI,EAAAwmC,KAAA,CAAA4O,QAAA,CAAA5O,EAAA2O,OAAA,CAOuCn1C,EACrCwmC,KAAO,CAAA6O,OAAM,UAAiB3sC,CAAA,EAChC,OAAA89B,EAAAyO,UAAA,CAAAzO,EAAA2D,aAAA,CAAAzhC,GAEA,EAO6C1I,EACvCwmC,KAAM,CAAA2D,aAAY,CAAK,SAAGzhC,CAAA,KAC5BA,EAAIT,KAAA,CAAQu+B,EAAMoF,KAAK,EAAC,CAQxB,IAAA3wC,EAAOyN,EAAAyL,KAAA,CAAAzL,EAAA8X,OAAA,SAAA80B,EAAAr6C,IAAAA,EAAAP,MAAA,EAAAO,IAAAA,EAAAP,MAAA,CAAA66C,EAAAt6C,IAAAA,EAAAP,MAAA,EAAAO,IAAAA,EAAAP,MAAA,CAAA1E,EAAAs/C,EAAAr6C,EAAAktB,MAAA,IAAAltB,EAAAktB,MAAA,IAAAltB,EAAA4tB,SAAA,MAAA0hB,EAAA+K,EAAAr6C,EAAAktB,MAAA,IAAAltB,EAAAktB,MAAA,IAAAltB,EAAA4tB,SAAA,MAAA1gB,EAAAmtC,EAAAr6C,EAAAktB,MAAA,IAAAltB,EAAAktB,MAAA,IAAAltB,EAAA4tB,SAAA,MAAA3gB,EAAAqtC,EAAAD,EAAAr6C,EAAAktB,MAAA,IAAAltB,EAAAktB,MAAA,IAAAltB,EAAA4tB,SAAA,iBACL,CACAzV,SAASpd,EAAG,IACZod,SAASm3B,EAAG,IACZn3B,SAAAjL,EAAY,IACbof,WAAA,CAAAnU,SAAAlL,EAAA,SAAAmR,OAAA,KACF,CACH,EAS2CrZ,EACrCwmC,KAAA,CAAAyO,UAAa,UAAApyB,CAAA,EACjB,IAAA2yB,EAAO,IAAUhP,EAEnB,OADEgP,EAAOxL,SAAA,CAAAnnB,GACT2yB,CAEC,CACF,EAASr8B,GAAQ,SAEhBpH,CAAA,EAEA,aACe,IAAC/R,EAAA+R,EAAA/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,KAAAy1C,EAAA,CAAK,IAAM,KAAK,IAAM,KAAK,IAAM,KAAK,IAAM,KACxD,IAAU,CAAAC,EAAC,CAAM,KAAQ,OAAM,KAC/B,OAEW,CAAAr7B,EACJ,GAAAs7B,EAAA,OAAAC,EAAA,QAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,CACLjwC,IAAA+vC,EACAG,OAFK,MAGLjwC,KAAA6vC,EACAK,MAAAN,EACChnB,OAAAmnB,CAC8B,EAAAjyB,EAAqB7jB,EAAIwa,IAAQ,CAAAqJ,gBAAA,CAAAN,EAAAJ,KAAAI,IAAA,WAAAa,CAAA,EAAG,OAAAA,EAAA,GAAAA,CAAAA,EAAA,KAAAA,CAEzE,EAOmD,SAC7C8xB,EAAcC,CAAkB,CAAGC,CAAA,EAEzC,OAAAjzB,KAAArI,KAAA,CAAAu7B,CADoBF,EAAA7yB,KAAe,CAAOO,EAAAV,KAAAzJ,KAAA,CAAA08B,EAAA/xB,CAAA,CAAA+xB,EAAAhyB,CAAA,QAC1C,OAEA,CAAuC,SACjCkyB,EAASl2B,CAAQ,CAAA9lB,CAAU,EAG/B,IAAAU,EAAAV,EAAoBusB,SAAG,CAAA7rB,MAAA,CAAA2I,EAAA3I,EAAA2I,MAAA,CAAA4yC,EAAAv2C,EAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,CAAAtL,EACvBi8C,CAAAA,EAAUv7C,MAAO,CAAKA,EACtB2I,GAAOA,EAAKod,IAAA,WAAWX,EAAAm2B,GACzBv7C,EAAA+lB,IAAA,CAAAX,EAAA9lB,EAEA,CAMsD,SAChDk8C,EAAsBC,CAAQ,CAAAN,CAAc,EAEhD,IAAAxyC,EAAOwyC,EAAQxyC,MAAkB,CACxB+yC,EAAkBD,CAAA,CADO9yC,EAChCgzC,WAAO,CAAkB,CAC7B,OAAAhzC,EAAAizC,cAAA,GAAAF,GAAA,CAAA/yC,EAAAizC,cAAA,EAAAF,CAEA,CAKwC,SAC/BG,EAAiBhwB,CAAK,EAC/B,OAAAA,EAAAiwB,OAAA,GAAAhB,GAAAjvB,EAAAkwB,OAAA,GAAAjB,CAEA,CAOmE,SAC7DkB,EAAqBb,CAAY,CAAEc,CAAA,CAAAC,CAAqB,EAC5D,IAAIC,EAAAhB,EAAgB/xC,YAAA,CAAAgzC,EAAAjB,EAAA9xC,YAAA,SAClB8yC,KAAOC,GAGP,CAAAH,GAAOE,CAAAA,EAAAA,KAAIC,CAAA,KAAAF,GAGXC,EAAAA,GAAOF,MAAAA,GAGPG,EAAAA,GAAOH,MAAAA,CAKX,CA2FqD,SACnDI,EAAOZ,CAAA,CAAA5vB,CAAA,CAAAzC,CAAA,CAAAC,CAAA,QACF,CACHzd,EAAA6vC,EACA5vB,UAASA,EAAAywB,QACJ,CACHlzB,EAAGA,EACLC,EAAAA,CACF,CACF,CAEA,CAM4C,SACnCkzB,EAAoBC,CAAY,CAAG,CAAE,OAC1C,SAAIf,CAAS,CAAU5vB,CAAQ,CAAAzC,CAAA,CAAAC,CAAA,EAG/B,IAAArpB,EAAO6rB,EAAA7rB,MAAoB,CAAA0vB,EAAY1vB,EAAUy8C,cAAS,GAAUC,EAAO18C,EAAA28C,sBAAA,CAAAjtB,EAAA7D,EAAAiwB,OAAA,CAAAjwB,EAAAkwB,OAAA,EAAAa,EAAAJ,EAAAf,EAAA5vB,EAAAzC,EAAAC,GAE7E,OADErpB,EAAO4zB,mBAAA,CAAA8oB,EAAA7wB,EAAAiwB,OAAA,CAAAjwB,EAAAkwB,OAAA,EACTa,CACF,CAEA,CAKqD,SAC5CC,EAAkBz3B,CAAE,CAASo3B,CAAQ,SAC1C,SAAIf,CAAA,CAAkB5vB,CAAA,CAAAzC,CAAA,CAAcC,CAAA,EACpC,IAAIuzB,EAAiBJ,EAAAf,EAAA5vB,EAAAzC,EAAAC,GAIvB,OAHIuzB,GACDtB,EAAAl2B,EAAAi3B,EAAAZ,EAAA5vB,EAAAzC,EAAAC,IAEHuzB,CACF,CAEA,CAU0D,SACpDE,EAASjxB,CAAgB,CACzBiwB,CAAA,CAAUC,CAAO,CAAA3yB,CAAA,CAAAC,CAAA,CAAQ,CAI7B,IAAIrpB,EAAA6rB,EAAgB7rB,MAAS,CAAAo7C,EAAAp7C,EAAAqf,QAAA,CAAAwM,EAAAkxB,MAAA,EAAA7Z,EAAAljC,EAAA2I,MAAA,CAAAq0C,OAAA,GAAAC,EAAAj9C,EAAAi9C,OAAA,CAAA/Z,EAAAga,EAAAl9C,EAAAm9C,YAAA,KAAAn4C,EAAAmkB,KAAA,CAAAC,EAAAC,GAAAyyB,EAAAC,GAe/B,OAdImB,EAAW9zB,CAAC,EAAI6zB,GACjBC,CAAAA,EAAA9zB,CAAA,EAAA6zB,CAAA,EAECC,EAAW9zB,CAAC,EAAI,CAAA6zB,GACjBC,CAAAA,EAAA9zB,CAAA,EAAA6zB,CAAA,EAECC,EAAW7zB,CAAC,EAAI4zB,GACjBC,CAAAA,EAAA7zB,CAAA,EAAA4zB,CAAA,EAECC,EAAW7zB,CAAC,EAAI4zB,GACjBC,CAAAA,EAAA7zB,CAAA,EAAA4zB,CAAA,EAEDC,EAAW9zB,CAAC,EAAIgyB,EAAQgC,OAAO,CAC/BF,EAAO7zB,CAAA,EAAA+xB,EAAAiC,OAAA,CACTH,CAEA,CAKkC,SACzBI,EAAiBt9C,CAAA,CAAO,CACjC,OAAAA,EAAAixB,KAAA,GAAAjxB,EAAAkxB,KAAA,CAM0F,SACpFqsB,EAAyBv9C,CAAG,CAAAw9C,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,KAC9B39C,IAAAA,CAAI,CAAAw9C,EAAgB,EAEpB,IAAAI,EAAWD,EADP39C,EAAW69C,yBAA4B,GAAAH,EAAA,CACb19C,CAAA,CAAAy9C,EAAA,CAC/Bz9C,EAAA6K,GAAA,CAAA4yC,EAAAG,EACH,EAMiD,SAC3CE,EAASrC,CAAU,CAAM5vB,CACzB,CAAAzC,CAAA,CAAAC,CAAA,EACA,IAOmB00B,EAPnB/9C,EAAY6rB,EAAO7rB,MAAA,CAGnBg+C,EAAAh+C,EAAA69C,yBAAA,GAAA79C,EAAsD0wB,KAAA,EAI1DutB,EAAI91B,KAAgBtI,GAAG,CAAAq9B,EAAAA,EAJmCrxB,EAAAA,EAAAiwB,OAAA,CAAAjwB,EAAAkwB,OAAA,CAAA3yB,EAAAC,GAInCD,CAAA,EAAA40B,EAAA50B,CAAA,CAAA80B,EAAAl+C,EAAAywB,KAAA,CACrBwtB,EAAA,EAEFF,EACK,GAIHA,EAAAl1B,EAAAV,KAAAzJ,KAAA,CAAAu/B,EAA4Cj+C,EAAAiK,MAAA,CAAA+zC,EAAA30B,CAAA,CAAArpB,EAAAkK,MAAA,GAG1C2hB,EAAUiwB,OAAC,GAAAnB,GAAA9uB,EAAAkwB,OAAA,GAAAlB,GACZkD,CAAAA,EAAA,CAAAA,CAAA,EAEClyB,EAAUiwB,OAAC,GAAAlB,GAAA/uB,QAAAA,EAAAkwB,OAAA,EACZgC,CAAAA,EAAA,CAAAA,CAAA,EAECT,EAAWt9C,IACZ+9C,CAAAA,EAAA,CAAAA,CAAA,GAGH,IAAII,EAAWD,IAAAH,EAAA,GACbI,EAAI,CACJ,IAAAC,EAAoBp+C,EAAA69C,yBAAA,GAAAx0B,CAAA,CACpBrpB,EAAA6K,GAAA,SAAAkzC,GACDR,EAAAv9C,EAAA,qBAAAo+C,EACD,QACFD,CAEA,CAIiD,SAC3CE,EAAS5C,CAAU,CAAM5vB,CACzB,CAAAzC,CAAA,CAAAC,CAAA,EACA,IAOmB00B,EAPnB/9C,EAAY6rB,EAAO7rB,MAAA,CAGnBg+C,EAAAh+C,EAAA69C,yBAAA,CAAA79C,EAAAywB,KAAsD,IAI1DwtB,EAAI91B,KAAgBtI,GAAG,CAAAq9B,EAAAA,EAJmCrxB,EAAAA,EAAAiwB,OAAA,CAAAjwB,EAAAkwB,OAAA,CAAA3yB,EAAAC,GAInCA,CAAA,EAAA20B,EAAA30B,CAAA,CAAA60B,EAAAl+C,EAAA0wB,KAAA,CACrButB,EAAA,EAEFF,EACK,GAIHA,EAAAl1B,EAAAV,KAAAzJ,KAAA,CAAAu/B,EAA4Cj+C,EAAAkK,MAAA,CAAA8zC,EAAA50B,CAAA,CAAAppB,EAAAiK,MAAA,GAG1C4hB,EAAUiwB,OAAC,GAAAnB,GAAA9uB,EAAAkwB,OAAA,GAAAlB,GACZkD,CAAAA,EAAA,CAAAA,CAAA,EAEClyB,EAAUiwB,OAAC,GAAAlB,GAAA/uB,QAAAA,EAAAkwB,OAAA,EACZgC,CAAAA,EAAA,CAAAA,CAAA,EAECT,EAAWt9C,IACZ+9C,CAAAA,EAAA,CAAAA,CAAA,GAGH,IAAII,EAAWD,IAAAH,EAAA,GACbI,EAAI,CACJ,IAAAC,EAAoBp+C,EAAA69C,yBAAA,GAAAz0B,CAAA,CACpBppB,EAAA6K,GAAA,SAAAkzC,GACDR,EAAAv9C,EAAA,qBAAAo+C,EACD,QACFD,CAEA,CAiK0D,SACxDG,EAAU7C,CAAY,CAAA5vB,CAAA,CAAAzC,CAAA,CAAAC,CAAA,CAAA/pB,CAAA,EACtBA,EAAIA,GAAS,GAOb,IAAmB4pB,EAAAjf,EAAAC,EAAAq0C,EAAAC,EAAAC,EAAfz+C,EAAA6rB,EAAe7rB,MAAA,CAAAoJ,EAAApJ,EAAAoJ,YAAA,CAAAC,EAAArJ,EAAAqJ,YAAA,CAAA4yC,EAAA38C,EAAA28C,EAAA,CAAAC,EAAAV,EAAAC,EAAAz7C,GAAA0+C,EAAA1C,EAAAh8C,EAAAi8C,EAAAC,GAAAyC,EAAA9yB,EAAA8yB,YAAA,IACjBD,EACD,QACD,CAAkB,GAChBC,EACA10C,EAAS4hB,EAAU5hB,MAAM,CAAG00C,EAC9Bz0C,EACK2hB,EAAA3hB,MAAA,CAAAy0C,MACH,CAiBE,GAhBFz1B,EAAA4zB,EAAAjxB,EAAAA,EAAAiwB,OAAA,CAAAjwB,EAAAkwB,OAAA,CAAA3yB,EAAAC,GAMAm1B,EAAQvC,MAAAA,EAAa1zB,EAAKW,EAASE,CAAC,EAAI,CAAC,CACzCq1B,EAAKxC,MAAAA,EAAe1zB,EAAEW,EAAAG,CAAA,IACpBwC,EAAU2yB,KAAK,EAChB3yB,CAAAA,EAAA2yB,KAAA,CAAAA,CAAA,EAEC3yB,EAAU4yB,KAAK,EAChB5yB,CAAAA,EAAA4yB,KAAA,CAAAA,CAAA,EAKCz+C,EAAO4+C,eAAK,EAAA/yB,CAAAA,EAAA2yB,KAAA,GAAAA,GAAA3yB,EAAA4yB,KAAA,GAAAA,CAAA,EACb,QAED,CAEgC,GADhCF,EAAAv+C,EAAA69C,yBAAA,GAEE3B,GAAkB,CAAAD,EAAA,CAMlB,IAAApd,EAAS1W,KAAStI,GAAA,CAAMqJ,EAAGE,CAAA,EAAAjB,KAAAtI,GAAA,CAAAqJ,EAAAG,CAAA,EAAAw1B,EAAAhzB,EAAAgzB,QAAA,CAAA70C,EAAA60B,EAAA1W,CAAAA,KAAAtI,GAAA,CAAA0+B,EAAAn1B,CAAA,CAAAy1B,EAAA50C,MAAA,CAAAjK,EAAAiK,MAAA,EAAAke,KAAAtI,GAAA,CAAA0+B,EAAAl1B,CAAA,CAAAw1B,EAAA30C,MAAA,CAAAlK,EAAAkK,MAAA,GAC3BD,EAAS40C,EAAS50C,MAAM,CAAGD,EAC7BE,EACK20C,EAAA30C,MAAA,CAAAF,CAAA,MAEHC,EAASke,KAAKtI,GAAG,CAACqJ,EAASE,CAAC,CAAGppB,EAAOiK,MAAM,CAAGs0C,EAAIn1B,CAAC,EACrDlf,EAAAie,KAAAtI,GAAA,CAAAqJ,EAAAG,CAAA,CAAArpB,EAAAkK,MAAA,CAAAq0C,EAAAl1B,CAAA,CACD,CAEEwyB,EAAUhwB,KACV5hB,GAAU,EACXC,GAAA,GAEC2hB,EAAU2yB,KAAA,GAAUA,GAASvC,MAAAA,IAC7BpwB,EAAUiwB,OAAC,CAAAf,CAAA,CAAAlvB,EAAAiwB,OAAA,EACX7xC,GAAU,GACX4hB,EAAA2yB,KAAA,CAAAA,GAEC3yB,EAAU4yB,KAAA,GAAUA,GAASxC,MAAAA,IAC7BpwB,EAAUkwB,OAAC,CAAAhB,CAAA,CAAAlvB,EAAAkwB,OAAA,EACX7xC,GAAU,GACX2hB,EAAA4yB,KAAA,CAAAA,EAEH,KAEIK,EAAK9+C,EAAAiK,MAAA,CAAA80C,EAAA/+C,EAAAkK,MAAA,CAUX,OATK+xC,GAMDA,MAAAA,GAAcj8C,EAAO6K,GAAG,CAAC,SAAUZ,GACpCgyC,MAAAA,GAAAj8C,EAAA6K,GAAA,UAAAX,KANC,GAAiBlK,EAAO6K,GAAG,CAAC,SAAUZ,GACxC,GACKjK,EAAA6K,GAAA,UAAAX,IAMP40C,IAAA9+C,EAAAiK,MAAA,EAAA80C,IAAA/+C,EAAAkK,MAAA,CAsHAmV,EAAS2/B,uBAAsB,CAnnBoC,SAChDvD,CACb,CAAAL,CAAA,CAAAD,CAAsB,EAE1B,IAAgCe,EAAQV,EAAAC,EAAAN,GAAAc,EAAA,SAMuB,CAL7Db,IAAAA,EAAKhyB,CAAA,EAAAgyB,IAAAA,EAAA/xB,CAAA,CACP4yB,EACK,IACE,IAAAb,EAAAhyB,CAAA,EAAAgyB,IAAAA,EAAA/xB,CAAA,EACN4yB,CAAAA,EAAA,KAECD,EAAOb,EAAAc,EAAAC,IAPI,cAWfzB,CAAA,CADSS,EAAcC,EAAAC,GACvB,UAFE,EAumBF/7B,EAAS4/B,sBAAA,CA5lByD,SAC/CxD,CAAA,CAAAL,CAAA,CAAAD,CAAA,SACiC,IAChDC,EAAOhyB,CAAA,EAAA+xB,EAAA+D,YAAA,EAGP9D,IAAAA,EAAO/xB,CAAA,EAAA8xB,EAAAgE,YAAA,CAJI,cAQfzE,CAAA,CADSQ,EAAaC,EAAAC,GAAA,EACtB,UALE,EAwlBF/7B,EAAS+/B,2BAAuB,CA1kBuC,SACnC3D,CAAA,CAAYL,CAAG,CAAAD,CAAA,UACxC,CAAAA,EAASxyC,MAAA,CAAA02C,YAAuB,EACxChgC,EAAA4/B,sBAAA,CAAAxD,EAAAL,EAAAD,GAEH97B,EAAA2/B,uBAAA,CAAAvD,EAAAL,EAAAD,EADE,EAukBF97B,EAASigC,oBAAiB,CAAAzC,EAAkB,WAAWN,EA9PG,SAE3Cd,CAAQ,CACjB5vB,CAAA,CAAAzC,CAAa,CAAAC,CAAA,EAEjB,IAAWrpB,EAAc0rB,EAAA1rB,MAAA,CAAAu/C,EAAAv/C,EAAA28C,sBAAA,CAAA38C,EAAAy8C,cAAA,GAAA/wB,EAAAowB,OAAA,CAAApwB,EAAAqwB,OAAA,KACvB/7C,EAAOsJ,YAAK,CACb,QAED,CAKA,IAAIk2C,EAAOr3B,KAASzJ,KAAM,CAAAgN,EAAA+zB,EAAA,CAAAF,EAAAl2B,CAAA,CAAAqC,EAAAg0B,EAAA,CAAAH,EAAAn2B,CAAA,EAAAd,EAAAO,EAAA82B,KAAAjhC,KAAA,CAAA2K,EAAAk2B,EAAAl2B,CAAA,CAAAD,EAAAm2B,EAAAn2B,CAAA,EAAAo2B,EAAA9zB,EAAAoF,KAAA,EAAA8uB,EAAA,MACxB5/C,EAAI6/C,SAAa,IAKjB,IAAIA,EAAS7/C,EAAQ6/C,SAAA,CAAAC,EAAmB9/C,EAAe8/C,aAAA,EAAAD,EAAAE,EAAA53B,KAAAnI,IAAA,CAAAsI,EAAAu3B,GAAAA,EAAAG,EAAA73B,KAAAvI,KAAA,CAAA0I,EAAAu3B,GAAAA,CACrD13B,CAAAA,KAAAtI,GAAQ,CAAAyI,EAAA03B,GAAAF,EACVx3B,EACS03B,EACP73B,KAAQtI,GAAA,CAAAyI,EAAAy3B,GAAAD,GACTx3B,CAAAA,EAAAy3B,CAAA,CAGH,QAEEz3B,EAAQ,GACTA,CAAAA,EAAA,IAAAA,CAAA,EAGDA,GAAA,IACAs3B,EAAY5/C,EAAGsoB,KAAA,GAAAA,EACftoB,EAAOsoB,KAAA,CAAAA,EACTs3B,CAEA,IAwNAvgC,EAAS4gC,cAAW,CAAApD,EAAkB,UAAWN,EA/GU,SACtCd,CAAW,CAAA5vB,CAAc,CAAAzC,CAAA,CAAAC,CAAA,EAC9C,OAAAi1B,EAAA7C,EAAA5vB,EAAAzC,EAAAC,EAEA,IA4GAhK,EAAS6gC,QAAQ,CAAGrD,EAAkB,UAAWN,EAnGC,SAC7Bd,CAAA,CAAW5vB,CAAA,CAAWzC,CAAA,CAAGC,CAAA,CAAI,QAAEi1B,EAAI7C,EAAA5vB,EAAAzC,EAAAC,EAAA,CAAI4yB,GAAA,GAC5D,EAEA,IAgGA58B,EAAS8gC,QAAA,CAAAtD,EAAqB,UAAAN,EAvFoB,SAC7Bd,CAAA,CAAW5vB,CAAA,CAAWzC,CAAA,CAAGC,CAAA,CAAI,QAAEi1B,EAAI7C,EAAA5vB,EAAAzC,EAAAC,EAAA,CAAI4yB,GAAA,GAC5D,EAEA,IAoFA58B,EAAS+gC,kBAAkB,CA3E6B,SACtD3E,CAA8B,CAAA5vB,CAAA,CAAAzC,CAAA,CAAAC,CAAA,SACuB,CAC5C,CAAAwC,EAAS7rB,MAAA,CAAA2I,MAAa,CAAA02C,YAAW,EACzChgC,EAAAghC,YAAA,CAAA5E,EAAA5vB,EAAAzC,EAAAC,GAEHhK,EAAA8gC,QAAA,CAAA1E,EAAA5vB,EAAAzC,EAAAC,EADE,EAuEFhK,EAASihC,kBAAc,CA3DiC,SACtD7E,CAA8B,CAAA5vB,CAAA,CAAAzC,CAAA,CAAAC,CAAA,SACuB,CAC5C,CAAAwC,EAAS7rB,MAAA,CAAA2I,MAAa,CAAA02C,YAAW,EACzChgC,EAAAkhC,YAAA,CAAA9E,EAAA5vB,EAAAzC,EAAAC,GAEHhK,EAAA6gC,QAAA,CAAAzE,EAAA5vB,EAAAzC,EAAAC,EADE,EAuDFhK,EAASmhC,WAAA,CAAY3D,EAAG,WAAAN,EA3CyB,SAClCd,CAAU,CAAM5vB,CAAE,CAAAzC,CAAA,CAAaC,CAAA,EAK5C,IAAArpB,EAAW6rB,EAAS7rB,MAAS,CAAAk9C,EAAUJ,EAAAjxB,EAAAA,EAAAiwB,OAAA,CAAAjwB,EAAAkwB,OAAA,CAAA3yB,EAAAC,GAAAo3B,EAAAzgD,EAAAoa,WAAA,CAAApa,CAAAA,EAAA+qB,aAAA,CAAA/qB,EAAAiK,MAAA,IAAAy2C,EAAA7E,EAAAhwB,GAAA,IAAA80B,EAAA3gD,EAAAiE,KAAA,CAAA28C,EAAAz4B,KAAAtI,GAAA,CAAAq9B,EAAA9zB,CAAA,CAAAs3B,EAAA1gD,EAAAiK,MAAA,EAAAw2C,EAEzC,OADEzgD,EAAO6K,GAAA,SAAasd,KAAAxkB,GAAA,CAAAi9C,EAAA,IACtBD,IAAAC,CAEA,IAkCAvhC,EAASghC,YAAY,CA1W6B,SAChD5E,CAAA,CAAA5vB,CAAA,CAAAzC,CAAA,CAAAC,CAAA,CAAgD,CAOhD,IAAyByyB,EAArB97C,EAAO6rB,EAAY7rB,MAAE,CAAAk+C,EAAAl+C,EAAAywB,KAAA,CAAAsrB,EAAAlwB,EAAAkwB,OAAA,QACvB/7C,EAAOm/C,YAAK,GAGZjB,IAAAA,EAIApC,EAFE+E,EAD8Bh1B,EAAAivB,EAAAA,EAAA1xB,EAAAC,GAC9BD,CAAA,GAGGuxB,EAGJC,GAICsD,EAAU,GACXpC,CAAAA,EAAAC,QAAAA,EAAApB,EAAAC,CAAA,EAECsD,EAAU,GACXpC,CAAAA,EAAAC,QAAAA,EAAAnB,EAAAD,CAAA,EAGC2C,EAAUt9C,IACX87C,CAAAA,EAAAA,IAAAnB,EAAAC,EAAAD,CAAA,GAKH9uB,EAAIiwB,OAAA,CAAeA,EAErBgF,EADiC,UAAcvE,EAAAuB,IAC/CrC,EAAA5vB,EAAAzC,EAAAC,GAEA,EAkUAhK,EAASkhC,YAAW,CAzT8B,SAChD9E,CAAA,CAAA5vB,CAAA,CAAAzC,CAAA,CAAAC,CAAA,CAAgD,CAOhD,IAAyB0yB,EAArB/7C,EAAO6rB,EAAY7rB,MAAE,CAAAk+C,EAAAl+C,EAAA0wB,KAAA,CAAAorB,EAAAjwB,EAAAiwB,OAAA,QACvB97C,EAAOk/C,YAAK,GAGZhB,IAAAA,EAIAnC,EAFE8E,EAD8Bh1B,EAAAivB,EAAAA,EAAA1xB,EAAAC,GAC9BA,CAAA,GAraK,MA2aNwxB,GAICqD,EAAU,GACXnC,CAAAA,EAAAD,IAAAnB,EAhbM,MAgbNE,CAAA,EAECqD,EAAU,GACXnC,CAAAA,EAAAD,IAAAnB,EAAAE,EAnbM,KAmbN,EAGCyC,EAAUt9C,IACX+7C,CAAAA,EAAAA,QAAAA,EAAAlB,EAvbM,KAubN,GAKHhvB,EAAIkwB,OAAA,CAAeA,EAErB+E,EADiC,UAAcvE,EAAA8B,IAC/C5C,EAAA5vB,EAAAzC,EAAAC,GAEA,EAiRAhK,EAAS0hC,WAAA,CA3BwC,SAClCtF,CAAU,CAAM5vB,CACzB,CAAUzC,CAAA,CAAAC,CAAI,EAIlB,IAAArpB,EAAS6rB,EAAW7rB,MAAQ,CAAAghD,EAAA53B,EAAAyC,EAAAuxB,OAAA,CAAA6D,EAAA53B,EAAAwC,EAAAwxB,OAAA,CAAA6D,EAAA,CAAAlhD,EAAAkoB,GAAA,mBAAAloB,EAAA+K,IAAA,GAAAi2C,EAAAG,EAAA,CAAAnhD,EAAAkoB,GAAA,mBAAAloB,EAAA8K,GAAA,GAAAm2C,EAM9B,OALEC,GAASlhD,EAAO6K,GAAG,CAAC,OAAOm2C,GAC3BG,GAAInhD,EAAS6K,GAAA,CAAO,MAAAo2C,GAClBC,CAAAA,GAAAC,CAAU,GACX7F,EAAA,SAAAe,EAAAZ,EAAA5vB,EAAAzC,EAAAC,IAEH63B,GAAAC,CAEA,EAcA9hC,EAAS+hC,qBAAoB,CAvkBoC,SAClC3F,CAAC,CAAAL,CAAa,CAAMD,CAAC,CAAa,CAC/D,IAAIkG,EAAc5F,CAAG,CAAAN,EAAAxyC,MAAA,CAAA02C,YAAA,aACnBjE,EAAAhyB,CAAA,CAEDi4B,EAAA,iBAECjG,IAAAA,EAAA/xB,CAAA,CAEDg4B,EAAA,uBAHD,EAkkBFhiC,EAASiiC,oBAAY,CApjB2C,SAC7C7F,CAAc,CAAAL,CAAA,CAAAD,CAAA,WACtB7xC,YAAA,CACR,cAEH8xC,EAAAmG,WAAA,EAgjBAliC,EAASi8B,SAAA,CAAAA,EACTj8B,EAASk9B,mBAAiB,CAAGA,EAC7Bl9B,EAASw9B,iBAAgB,CAAAA,EACzBx9B,EAAOy9B,aAAa,CAAGA,EAEtB93C,EAAiCw8C,aAAc,CAAAniC,CACjD,EAASlB,GAQRI,EAAAvZ,CAAAA,EAAA+R,CANAA,EAiGQoH,GA3FRnZ,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,MAAAwa,IAAA,CAAAjB,gBAAA,CAwFAc,CAxFAA,EAAAra,EAAAw8C,aAAA,EAwFSC,mBAAmB,CA7E+C,SACzD5/B,CAAA,CAAA9W,CAAkB,CAAAD,CAAA,CAAA42C,CAAA,CAAAvG,CAAA,EAClCuG,EAAgBA,GAAU,GAQ1B,IAAQ98C,EAAJ+8C,EAAI,KAAAC,KAAA,EAAAF,EAAA1nC,UAAA,EAAAmhC,EAAAnhC,UAAA,CAAA6nC,EAAA,KAAAC,KAAA,EAAAJ,EAAA1nC,UAAA,EAAAmhC,EAAAnhC,UAAA,CAAAD,EAAA,SAAA2nC,EAAA3nC,kBAAA,CAAA2nC,EAAA3nC,kBAAA,CAAAohC,EAAAphC,kBAAA,CAAA4a,EAAA,CAAA5a,GAAA2nC,CAAAA,EAAAvnC,iBAAA,EAAAghC,EAAAhhC,iBAAA,EAAA4nC,EAAAh3C,EAAAi3C,EAAAl3C,EACR+W,EAAIogC,IAAA,GACJpgC,EAAIqgC,SAAA,CAAWR,EAAGxnC,WAAc,EAAAihC,EAAqBjhC,WAAa,CAClE2H,EAAAsgC,WAAA,CAAAT,EAAAvnC,iBAAA,EAAAghC,EAAAhhC,iBAAoE,CAElEwnC,EAAOE,GACPj9C,EAAI+8C,EACJ9/B,EAAA7X,KAAQ,GAAM63C,EAAQF,GACxBK,EACSl3C,EAAA62C,EAAeE,GACfA,EAAAF,GACP/8C,EAAIi9C,EACJhgC,EAAA7X,KAAS,CAAA23C,EAAOE,EAAQ,GAC1BE,EACKh3C,EAAA82C,EAAAF,GAEJ/8C,EAAA+8C,EAGD9/B,EAAIugC,SAAS,GACbvgC,EAAIwgC,SAAI,GACRxgC,EAAIygC,GAAA,CAAAP,EAAWC,EAAAp9C,EAAA,MAAAujB,KAAAC,EAAA,KACfvG,CAAA,CAtBQ9H,EAAA,gBAsBI,GACV4a,GACD9S,EAAA8S,MAAA,GAEH9S,EAAA0gC,OAAA,EAEA,EAyCCljC,EAAiCmjC,mBAAc,CA9B0B,SACxD3gC,CAAA,CAAA9W,CAAkB,CAAAD,CAAA,CAAA42C,CAAA,CAAAvG,CAAA,EAClCuG,EAAgBA,GAAU,GAQ1B,IAAIC,EAAI,KAAAC,KAAA,EAAAF,EAAA1nC,UAAA,EAAAmhC,EAAAnhC,UAAA,CAAA6nC,EAAA,KAAAC,KAAA,EAAAJ,EAAA1nC,UAAA,EAAAmhC,EAAAnhC,UAAA,CAAAD,EAAA,SAAA2nC,EAAA3nC,kBAAA,CAAA2nC,EAAA3nC,kBAAA,CAAAohC,EAAAphC,kBAAA,CAAA4a,EAAA,CAAA5a,GAAA2nC,CAAAA,EAAAvnC,iBAAA,EAAAghC,EAAAhhC,iBAAA,EAAAsoC,EAAAd,EAAA,EAAAe,EAAAb,EAAA,EACRhgC,EAAIogC,IAAA,GACJpgC,EAAIqgC,SAAA,CAAWR,EAAGxnC,WAAc,EAAAihC,EAAqBjhC,WAAa,CAClE2H,EAAAsgC,WAAA,CAAAT,EAAsBvnC,iBAAA,EAAAghC,EAAAhhC,iBAAA,CAEtB0H,EAAIugC,SAAS,CAAC,EACdvgC,EAAIE,SAAO,CAAAhX,EAAAD,GACX+W,EAAA0P,MAAA,CAAAhT,EAAA48B,EAAA7yB,KAAA,GAIAzG,CAAA,CAAI8f,CAXI5nB,EAAA,iBAWI,SAAA0oC,EAAA,CAAAC,EAAAf,EAAAE,GACVltB,GACD9S,EAAA8gC,UAAA,EAAAF,EAAA,CAAAC,EAAAf,EAAAE,GAEHhgC,EAAA0gC,OAAA,EAEA,EAkBAv9C,CARAA,EAAS+R,CAJTA,EAiVDoH,GA7UkBnZ,MAAS,EAAA+R,CAAAA,EAAA/R,MAAA,MAQnB49C,OAAO,CARY,SACVtjD,CAAA,CAAS,KACrB,IAAI2V,KAAG3V,EACT,KAAA2V,EAAA,CAAA3V,CAAA,CAAA2V,EAAA,EAKgEjQ,EAEhE49C,OAAA,CAAA9oC,SAAA,EAUA+oC,QAAA,GAaAC,WAAA,QASAx6B,MAAA,EASAc,EAAA,EASAC,EAAA,EAcA+zB,QAAA,EAQAC,QAAA,EAQAuE,MAAA,KAQAE,MAAA,KAQAiB,WAAA,KAQAC,WAAA,KAQAzB,YAAA,YAQA0B,eAAA,GAUAzG,cAAA,aAUA0G,iBAAA,aAUAC,eAAA,aAOmEC,iBACrD,UAAa,CAC3B,YAAA5G,aAAA,EASsE6G,oBACxD,UAAgB,CAC9B,YAAAH,gBAAA,EASoEI,kBACtD,UAAc,CAC5B,YAAAH,cAAA,EAWoEI,mBACnD,SAAA9H,CAAW,CAAAL,CAAA,EAC5B,OAAAA,EAAAmG,WAAA,EAS+DiC,cACtD,SAAQ/H,CAAU,CAAAL,CAAA,EAC3B,OAAAA,EAAA0H,UAAA,EAQkDW,cAC5C,SAAAtI,CAAmB,CAAAuI,CAAa,EACpC,IAAIC,EAAAxI,EAA2ByI,mBAAiB,QAA6B,GACpE,KAA4B,IAAXD,CAAW,CAAAD,EAAA,CACpCC,CAAA,CAAAD,EAAA,CAEH,KAAAb,OAAA,EAO6DgB,cACtD,SAAUC,CAAA,EACjB,KAAAjB,OAAA,CAAAiB,CAGA,EAAgFC,gBAClE,SAAOxF,CAAK,CAAAyF,CAAc,CAAC,CAIzC,OAHYh/C,EAAIwa,IAAK,CAAGE,cAAY,EAChC0J,EAAG,IAAI,CAACA,CAAC,CAAGm1B,EAAIn1B,CAAC,CAAG,IAAI,CAACg0B,OAAO,CAAI/zB,EAAA,KAAAA,CAAA,CAAAk1B,EAAAl1B,CAAA,MAAAg0B,OAAA,EACtC2G,EAGF,EASqFC,iBAC/E,SACAC,CACA,CAAAC,CAAA,CACAC,CAAA,CAAAC,CAAA,CACAC,CAAA,CAAQ,CAEZ,IAAIC,EAASC,EAAmBC,EAAOC,EAAA/C,EAAA2C,EAAA,KAAAvB,UAAA,MAAAnB,KAAA,CAAAC,EAAAyC,EAAA,KAAAtB,UAAA,MAAAlB,KAAA,IACrCH,GAAAE,GAAAF,IAAAE,EAA6B,CAE7B,IAAI8C,EAAmBx8B,KAASzJ,KAAC,CAAAmjC,EAAQF,GACrCiD,EAAWz8B,KAAA1J,IAAA,CAAAkjC,EAAuBA,EAAWE,EAACA,GAAgB,EAC9DgD,EAAAF,EAA6B3/C,EAAAwa,IAAA,CAAAjB,gBAA8B,CAAI2lC,GACnEY,EAAgB38B,KAAAC,EAAA,GAAAu8B,EAAmC3/C,EAAAwa,IAAA,CAAAjB,gBAAA,CAAA2lC,GACnDK,EAAgBK,EAAmB5/C,EAAOwa,IAAI,CAAC6I,GAAG,CAACw8B,GACnDL,EAAAI,EAAA5/C,EAA0Cwa,IAAA,CAAAO,GAAA,CAAA8kC,GAE1CJ,EAAoBG,EAAmB5/C,EAAOwa,IAAI,CAAC6I,GAAG,CAACy8B,GACzDJ,EACKE,EAAA5/C,EAAAwa,IAAA,CAAAO,GAAA,CAAA+kC,EAAA,KACH,CAKAF,EAAA5qC,YAFA2nC,CAAAA,GAAAE,EAAAF,EACAwC,CAAA,EAGA,IAAAU,EAAA7/C,EAAgBwa,IAAA,CAAAjB,gBAAoB,IAAA2lC,GACpCK,EAAgBE,EAAoBG,EAAmB5/C,EAAOwa,IAAI,CAAC6I,GAAG,CAACw8B,GACxEL,EAAAE,EAAAE,EAAA5/C,EAAAwa,IAAA,CAAAO,GAAA,CAAA8kC,EAED,OACE,CAAIE,GACF,CACA37B,EAAGg7B,EAAUM,EACfr7B,EAAAg7B,EAAAI,CACA,EAAIO,GACF,CACA57B,EAAGg7B,EAAUG,EACfl7B,EAAAg7B,EAAAG,CACA,EAAIS,GACF,CACA77B,EAAGg7B,EAAUG,EACfl7B,EAAAg7B,EAAAG,CACA,EAAIU,GACF,CACA97B,EAAGg7B,EAAUM,EACfr7B,EAAAg7B,EAAAI,CACF,CACF,CAEA,EAY8DU,OAC5D,SAAAtjC,CAAA,CAAgB9W,CAAA,CAAAD,CAAA,CAAA42C,CAAkB,CAAAvG,CAAA,EAG9B,WADFuG,CAAAA,CADFA,EAAQA,GAAyB,IAC1BznC,WAAA,EAAAkhC,EAAAlhC,WAAA,EAEHjV,EAAMw8C,aAAA,CAAAC,mBAAA,CAAAv7B,IAAA,MAAArE,EAAA9W,EAAAD,EAAA42C,EAAAvG,GAGVn2C,EAAAw8C,aAAA,CAAAgB,mBAAA,CAAAt8B,IAAA,MAAArE,EAAA9W,EAAAD,EAAA42C,EAAAvG,EAEJ,CAEC,EACU,UAEX,CAEA,aAAyB,GACvBn2C,GAAOogD,YAAK,EACZpgD,GAAAijC,IAAA,4CACD,MAED,KAYA7pB,EAAApZ,GAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAA4nB,EAAAhhC,GAAAwa,IAAA,CAAAwmB,gBAAA,CAAAxd,EAAAxjB,GAAAwa,IAAA,CAAAgJ,eAAA,CAAA9I,GAAA1a,GAAAwa,IAAA,CAAAnB,OAAA,CAAArZ,GAAAwa,IAAA,CAAAE,cAAA,EAAA0M,EAAApnB,GAAAwa,IAAA,CAAA4M,eAAA,CAAA0a,EAAA9hC,GAAAwa,IAAA,CAAAsnB,aAAA,CAAA9W,EAAAhrB,GAAAwa,IAAA,CAAAwQ,mBAAA,CAAAq1B,EAAA,8CAagHrgD,CAAAA,GAE9GogD,YAAA,CAAApgD,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAAqiB,aAAA,EAMkC0a,WAChC,SAAYoC,CAAA,CAAA7kC,CAAY,EACxBA,GAAKA,CAAAA,EAAA,IACL,IAAI,CAACgmD,mBAAA,CAAqB,IAAG,CAAAC,cAAK,CAAAz5C,IAAiB,KAAK,EACxD,IAAI,CAAC05C,qBAAgB,MAAAj6C,gBAAA,CAAAO,IAAA,OACvB,KAAA25C,WAAA,CAAAthB,EAAA7kC,EAEA,EAQArC,gBAAA,GAUAyoD,gBAAA,KASAC,aAAA,GAUAC,aAAA,KAQAC,qBAAA,GAOAC,SAAA,GAYA1sC,kBAAA,GAOA2sC,qBAAA,GAOAC,oBAAA,GAOA3gB,sBAAA,GAWA4gB,kBAAAjhD,GAAA6e,OAAA,CAAAvf,MAAA,GAQA4hD,cAAA,GAQAC,WAAA,GAOAC,oBAAA,GAWAC,UAAA,GAYAC,cAAA,GASAhyB,SAAAjyB,KAAAA,EAKmCojD,YACxB,SAAKthB,CAAA,CAAA7kC,CAAA,EACd,IAAIinD,EAAC,IAAQ,CAAAf,qBAAK,CAClB,IAAI,CAAC/7C,QAAA,IACL,IAAI,CAAC+8C,kBAAa,CAAAriB,GAClB,KAAAsiB,YAAA,CAAAnnD,GAEE,IAAK,CAAAonD,WAAA,EACN,KAAAC,kBAAA,GAGCrnD,EAAKsmD,YAAe,EACrB,KAAAgB,eAAA,CAAAtnD,EAAAsmD,YAAA,CAAAW,GAECjnD,EAAKomD,eAAkB,EACxB,KAAAmB,kBAAA,CAAAvnD,EAAAomD,eAAA,CAAAa,GAECjnD,EAAKrC,eAAkB,EACxB,KAAAC,kBAAA,CAAAoC,EAAArC,eAAA,CAAAspD,GAECjnD,EAAKqmD,YAAe,EACrB,KAAAmB,eAAA,CAAAxnD,EAAAqmD,YAAA,CAAAY,GAEH,KAAArrC,UAAA,EAEA,EAG6B6rC,iBACZ,WACjB,OAAA/hD,GAAAqf,gBAAA,SAAA+hC,mBAAA,EAM6BY,iBACf,WACd,YAAAD,gBAAA,GAAA5+B,KAAAxkB,GAAA,GAAAqB,GAAAqf,gBAAA,KAK+BsiC,mBACnB,UAAgB,CAAI,GAC5B,KAAAI,gBAAA,IAGF,IAAIE,EAACjiD,GAAmBqf,gBAAa,CACrC,IAAI,CAAA6iC,mBAAoB,CAAAD,EAAA,KAAAE,aAAA,MAAAC,gBAAA,EACtB,IAAI,CAACC,aAAA,EACN,KAAAH,mBAAA,CAAAD,EAAA,KAAAI,aAAA,MAAAC,UAAA,EAJD,EAOyDJ,oBAClD,SAAaD,CAAc,CAAAt+C,CAAQ,CAAA7M,CAAA,EAC1C6M,EAAOy7B,YAAY,CAAC,YAAU,CAAIngC,KAAC,CAAMgjD,GACzCt+C,EAAAy7B,YAAc,UAAY,KAAAlgC,MAAA,CAAA+iD,GAC5BnrD,EAAAkO,KAAA,CAAAi9C,EAAAA,EAGA,EAMwB/rC,WACjB,UAAU,CAEjB,OADE,KAAAqsC,OAAW,CAAAvhB,EAAA,KAAAmhB,aAAA,EACb,MAiDqDP,gBACvC,SAAA/8C,CAAA,CAAA+c,CAAoB,CAAAtnB,CAAA,CAAgB,CAClD,YAAAkoD,mBAAA,gBAAA39C,EAAA+c,EAAAtnB,EAEA,EAgDwDunD,mBAC1C,SAAAh9C,CAAA,CAAoB+c,CAAA,CAAAtnB,CAAA,CAAmB,CACrD,YAAAkoD,mBAAA,mBAAA39C,EAAA+c,EAAAtnB,EAEA,EAqBkDwnD,gBACpC,SAAAnB,CAAoB,CAAA/+B,CAAA,EAClC,YAAA6gC,mBAAA,gBAAA9B,EAAA/+B,EAEA,EAqBwD1pB,mBAC1C,SAAAD,CAAoB,CAAA2pB,CAAA,CAAmB,CACrD,YAAA6gC,mBAAA,mBAAAxqD,EAAA2pB,EAEA,EAQkE4gC,oBACrD,SAAU//B,CAAU,CAAA5d,CAAA,CAAA+c,CAAA,CAAAtnB,CAAA,EAkBjC,MAjBI,iBAAOuK,EAA6C7E,GAClDwa,IAAI,CAAAvD,SAAK,CAAApS,EAAA,SAAA2jB,CAAA,CAAAk6B,CAAA,KACPl6B,EAAI,CACJ,IAAIm6B,EAAU,IAAG3iD,GAAAK,KAAA,CAAAmoB,EAAAluB,EACjB,MAAAmoB,EAAS,CAAMkgC,EAChBA,EAAAh/C,MAAA,MACD,GACOie,EAAW4G,EAAQk6B,EAC9B,EACK,KAAApoD,GAAAA,EAAAiG,WAAA,GAEHjG,GAAKuK,EAAY+9C,UAAA,CAAAtoD,GACjB,KAAAmoB,EAAU,CAAM5d,EAChBA,GAAAA,CAAAA,EAAYlB,MAAS,KAAO,EAC7Bie,GAAAA,EAAA/c,EAAA,KAGH,MASyD49C,oBACtC,SAAAhgC,CAAA,CAAA/Z,CAAA,CAAAkZ,CAAA,EAInB,OAHE,IAAI,CAACa,EAAA,CAAA/Z,EACL,IAAI,CAAC6Z,aAAa,CAAA7Z,EAAO+Z,GACzB,KAAAG,YAAW,CAAAla,EAAA+Z,EAAAb,GACb,MAKiCihC,qBACjB,WACd,IAAItoD,EAAUywB,IAAA,GACZ,CAAAzwB,IAGAA,EAAQ2C,KAAK,EACd3C,CAAAA,EAAA2C,KAAA,KAEC,KAAwB,IAAlB3C,EAAAuiB,UAAkB,EALzB,MAAAujC,CAAA,CAQH,OAAA9lD,CAEA,EAIiCknD,aAC3B,SAAAnnD,CAAqB,EACzB,IAAI6nD,EAAa,KAAAA,aAAA,CAEjB,IAAI,CAAC7/B,WAAQ,CAAIhoB,GACjB,IAAI,CAAC2E,KAAA,CAAM,IAAG,CAAIA,KAAC,EAAMmU,SAAI+uC,EAASljD,KAAc,MAAQ,EAE5D,IAAI,CAACC,MAAK,MAAAA,MAAc,EAAKkU,SAAE+uC,EAAAjjD,MAAA,QAC7B,KAAAijD,aAAA,CAAAjlD,KAAA,GAIFilD,EAAcljD,KAAA,CAAM,IAAG,CAAIA,KAAC,CAE5BkjD,EAAcjjD,MAAM,KAAK,CAAGA,MAAK,CACjCijD,EAAcjlD,KAAK,CAAC+B,KAAA,CAAM,IAAG,CAAIA,KAAC,CAAM,KAExCkjD,EAAKjlD,KAAA,CAAAgC,MAAoB,CAAI,IAAC,CAAAA,MAAA,MAChC,KAAA+hD,iBAAA,MAAAA,iBAAA,CAAA9sC,KAAA,GAEA,EAKwCqtC,mBACtC,SAAAr2B,CAAA,EAEEA,GAAKA,EAAgBrO,UAAA,CACvB,IACK,CAAAqlC,aAAA,CAAAh3B,EAEJ,KAAAg3B,aAAA,CAAAniD,GAAAwa,IAAA,CAAAkmB,OAAA,CAAAvV,IAAA,KAAA03B,oBAAA,GAGD7iD,GAAKwa,IAAA,CAAAomB,QAAA,KAAoB,CAAAuhB,aAAQ,iBACjC,IAAI,CAAAW,oBAAkB,MAAAX,aAAA,CAAAjlD,KAAA,CACpB,IAAI,CAACwkD,WAAA,EACN,KAAAqB,iBAAA,MAAAZ,aAAA,EAGH,KAAAC,gBAAA,MAAAD,aAAA,CAAArlC,UAAA,MAEA,EAIsBkmC,SACpB,UAAiB,CACnB,YAAA/jD,KAAA,EAMuBgkD,UACd,UAAW,CACpB,YAAA/jD,MAAA,EAWoCgkD,SAClC,SAAYjoD,CAAA,CAAAX,CAAc,SAAE,IAAO,CAAA6oD,aAAA,EAASlkD,MAAAhE,CAC9C,EAAAX,EAEA,EASqC8oD,UAC5B,SAAKnoD,CAAA,CAAAX,CAAc,SAAE,KAAQ6oD,aAAA,EAASjkD,OAAAjE,CAC/C,EAAAX,EAEA,EAW8C6oD,cACxC,SAAAE,CAAA,CAAA/oD,CAAA,EAEJ,IAAAgpD,EAE6B,IAC3B,IAAAniC,KADF7mB,EAASA,GAAQ,GACJ+oD,EAEXC,EAAKD,CAAe,CAAEliC,EAAA,CACpB7mB,EAAKipD,OAAA,GACL,KAAAC,sBAAY,CAAAriC,EAAAkiC,CAAA,CAAAliC,EAAA,EACZmiC,GAAK,KACN,KAAAG,cAAA,KAGCnpD,EAAKopD,aAAiB,EACvB,KAAAC,gBAAA,CAAAxiC,EAAAmiC,GAaL,OAVI,IAAI,CAACM,mBAAgB,EACtB,KAAAn7C,gBAAA,OAAAA,gBAAA,CAAAo7C,eAAA,MAAAvB,UAAA,EAED,IAAI,CAACX,kBAAU,GAEf,IAAI,CAACzrC,UAAQ,GACX5b,EAAKipD,OAAA,EACN,KAAAh9C,gBAAA,GAGH,MAU+Ci9C,uBAC1B,SAAQriC,CAAA,CAAAlmB,CAAA,EAa7B,OAXE,IAAI,CAAAknD,aAAK,CAAAhhC,EAAe,CAAAlmB,EACtB,IAAI,CAAConD,aAAa,EACnB,MAAAA,aAAA,CAAAlhC,EAAA,CAAAlmB,CAAA,EAGC,IAAI,CAAC6oD,aAAa,EACnB,MAAAA,aAAA,CAAA3iC,EAAA,CAAAlmB,CAAA,EAID,KAAAkmB,EAAO,CAAIlmB,EACb,MAUyC0oD,iBAClC,SAAcxiC,CAAM,CAAAlmB,CAAQ,EAWnC,OATE,IAAI,CAAAknD,aAAK,CAAAjlD,KAAe,CAAAikB,EAAA,CAAAlmB,EACtB,IAAI,CAAConD,aAAa,EACnB,MAAAA,aAAA,CAAAnlD,KAAA,CAAAikB,EAAA,CAAAlmB,CAAA,EAGC,IAAI,CAAC8oD,SAAS,EACf,MAAAA,SAAA,CAAA7mD,KAAA,CAAAikB,EAAA,CAAAlmB,CAAA,EAGH,MAMqB+8C,QACnB,UAAY,CACd,YAAAiJ,iBAAA,KAQqC+C,qBAC/B,SAAoBC,CAAA,EAIxB,IAAyBppD,EAAAoV,EAAAgR,EAArBijC,EAAC,IAAiB,CAAAC,aAAG,CAAAC,EAAA,KAAA1D,eAAA,CAAA2D,EAAA,KAAAzD,YAAA,CAC6B,IACpD3wC,EAAA,EADF,IAAK,CAAAgxC,iBAAkB,CAAAgD,EACrBhjC,EAAa,IAAC,CAAAxc,QAAW,CAAA/J,MAAA,CAAAuV,EAAAgR,EAAAhR,IAE3BpV,CADEA,EAAO,IAAK,CAAA4J,QAAI,CAAOwL,EAAA,EACzBq0C,KAAA,EAAAzpD,EAAAqL,SAAA,KAaF,OAXIg+C,GACDA,EAAAh+C,SAAA,GAECk+C,GACDA,EAAAl+C,SAAA,KAECm+C,GACDA,EAAAn+C,SAAA,KAED,IAAI,CAACq+C,sBAAqB,GAC1B,KAAAnwC,iBAAW,OAAA7N,gBAAA,GACb,MAYqCi+C,YACnC,SAAAxgC,CAAA,CAAA/oB,CAAA,EAEA,IAAAwpD,EAAQzgC,EAAAigC,EAAe,IAAO,CAAAhD,iBAAgB,CAAA9sC,KAAK,IACnD6P,EAAMtJ,EAAGsJ,EAAAoD,EAAA,KAAA65B,iBAAA,GACTgD,CAAG,CAAC,EAAE,CAAGhpD,EACTgpD,CAAA,CAAI,GAAAhpD,EACJ,IAAIypD,EAAMhqC,EAAiBsJ,EAACigC,GAG9B,OAFEA,CAAG,CAAC,EAAE,EAAIQ,EAAOrgC,CAAC,CAAGsgC,EAAMtgC,CAAC,CAC5B6/B,CAAA,KAAOQ,EAAKpgC,CAAA,CAAAqgC,EAAArgC,CAAA,CACd,KAAA2/B,oBAAA,CAAAC,EAEA,EAM0BU,QACnB,SAAA1pD,CAAY,CAAI,CAEvB,OADE,KAAAupD,WAAW,KAAAxkD,GAAAmkB,KAAA,MAAAlpB,GACb,MAQ8B2pD,YACxB,SAAW5gC,CAAA,EACf,IAAIigC,EAAM,KAAAhD,iBAAO,CAAA9sC,KAAA,IAGnB,OAFE8vC,CAAG,CAAC,EAAE,CAAG,CAACjgC,EAAMI,CAAC,CACjB6/B,CAAA,IAAO,CAAAjgC,EAAKK,CAAA,CACd,KAAA2/B,oBAAA,CAAAC,EAEA,EAM8BY,YACrB,SAAK7gC,CAAW,CAAC,CAI1B,YAAA4gC,WAAA,KAAA5kD,GAAAmkB,KAAA,EAAAH,EAAAI,CAAA,MAAA68B,iBAAA,KAAAj9B,EAAAK,CAAA,MAAA48B,iBAAA,KAEA,EAIwB6D,WACf,UAAK,CACd,YAAA3C,aAAA,EAM8B7gC,eACvB,SAAgBY,CAAA,EACrB,IAAI,CAAA4+B,QAAK,EAAA5+B,EAAU6iC,UAAI,GACvB7iC,EAAIc,IAAA,UAAS,MACbd,EAAIhc,SAAM,GAAgB,IAAE,CAAA6a,IAAA,gBAAQ,CAAI/lB,OAAAknB,CACxC,GACFA,EAAAnB,IAAA,SAEA,EAIgCY,iBACpB,SAAAO,CAAA,CAAkB,KAAE,CAAAnB,IAAA,kBAAQ,CAAI/lB,OAAAknB,CAC1C,GACAA,EAAAnB,IAAO,YACT,OAAAmB,EAAAve,MAAA,EAQ4BqhD,aACtB,SAAanoC,CAAG,CAAI,CAE1B,OADEA,EAAAooC,SAAW,UAAAhmD,KAAA,MAAAC,MAAA,EACb,MAMwB4d,WACf,UAAK,CACd,YAAAslC,gBAAA,EAOmB/tC,MACjB,UAAY,CAcd,OAbE,IAAI,CAAC/N,MAAA,CAAAua,KAAA,KAAe,CAAG,IAAI,CAAAgB,UAAA,IAC3B,IAAI,CAAC6+B,eAAe,KAAI,CACxB,IAAI,CAACE,YAAA,CAAe,IAAG,CACvB,IAAI,CAAC3oD,eAAe,IACpB,IAAI,CAAA0oD,YAAK,IACP,IAAI,CAACuE,iBAAgB,GACrB,IAAI,CAAC18C,GAAA,YAAe,IAAG,CAAA28C,oBAAI,EAC3B,IAAI,CAACC,eAAA,CAAiB,IAAG,CAC1B,KAAAF,iBAAA,KAED,IAAI,CAACF,YAAK,MAAA5C,gBAAA,EACV,IAAI,CAACrhC,IAAA,mBACL,KAAA3M,iBAAW,OAAA7N,gBAAA,GACb,MAOuBgO,UACjB,WACJ,IAAI8wC,EAAc,KAAAjD,gBAAqB,CAEzC,OADE,KAAAkD,YAAW,CAAAD,EAAA,KAAA5gD,QAAA,EACb,MAY2B87C,eACpB,UAAc,CACnB,IAAI,CAACgF,WAAS,GAChB,KAAAhxC,SAAA,EAEA,EAO8BhO,iBAClB,UAAa,CAIzB,OAHI,IAAK,CAAAg/C,WAAW,EACjB,MAAAA,WAAA,CAAAvlD,GAAAwa,IAAA,CAAA+pB,gBAAA,MAAA+b,mBAAA,GAEH,MASmCiE,uBACf,UAAa,CAE/B,IAAA7+B,EAAY,GAAAzmB,EAAA,IAAe,CAAAA,KAAA,CAAAC,EAAA,KAAAA,MAAA,CAAAsmD,EAAAp+B,EAAA,KAAA65B,iBAAA,EAM7B,OAN6Bv7B,EAAKq6B,EAAA,CAAArlC,EAAA,CAAG0J,EAAG,EAAKC,EAAA,CAC3C,EAAAmhC,GAA2B9/B,EAAKw6B,EAAA,CAAAxlC,EAAA,CAAO0J,EAAGnlB,EAAUolB,EAAAnlB,CACpD,EAAAsmD,GACA9/B,EAAOs6B,EAAE,CAAG,IAAIhgD,GAAOmkB,KAAK,CAACuB,EAAOw6B,EAAE,CAAC97B,CAAC,CAAEsB,EAAOq6B,EAAE,CAAC17B,CAAC,EACrDqB,EAAKu6B,EAAA,KAASjgD,GAAGmkB,KAAA,CAAAuB,EAAAq6B,EAAA,CAAA37B,CAAA,CAAAsB,EAAAw6B,EAAA,CAAA77B,CAAA,EACjB,KAAAg9B,SAAO,CAAA37B,EACTA,CAEA,EAAkC+/B,sBACvB,UAAa,CACpB,KAAAF,WAAY,GACZvlD,GAAKwa,IAAA,CAAAwrB,eAAc,MAAAuf,WAAA,EACpB,KAAAA,WAAA,GAGH,EAOqCD,aAC3B,SAAKzoC,CAAA,CAAAzW,CAAiB,CAAE,CAChC,IAAIke,EAAC,KAAA28B,iBAAqB,CAAAx2B,EAAA,KAAA6E,QAAA,CAC1B,IAAI,CAACm2B,qBAAA,GACL,IAAI,CAAClB,sBAAa,GAClB,KAAAS,YAAY,CAAAnoC,GACZ7c,GAAKwa,IAAK,CAAA4lB,iBAAiB,CAAAvjB,EAAA,KAAAwjB,qBAAA,MAAE,CAAAtf,IAAK,kBAAKlE,IAAAA,CACvC,GAEA,IAAI,CAAA6oC,iBAAI,CAAA7oC,GACRA,EAAAogC,IAAA,GAEApgC,EAAIgK,SAAC,CAAAvC,CAAA,IAAeA,CAAA,IAAKA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACzB,IAAI,CAAAqhC,cAAO,CAAA9oC,EAAAzW,GACXyW,EAAI0gC,OAAM,GACR,KAAK,CAAAwD,oBAAa,OAAAW,WAAA,EACnB,KAAAkE,YAAA,CAAA/oC,GAEC4N,IACAA,EAAA9mB,MAAA,MAEA8mB,EAAKo7B,WAAA,GACLp7B,EAAKq7B,cAAY,IAAAr7B,EAAEs7B,WAAA,CAAa,CAAKC,YAAA,EACrC,GACD,KAAAC,oBAAA,CAAAppC,IAED,IAAI,CAAAqpC,cAAK,CAAArpC,GACP,IAAI,CAACkkC,oBAAa,OAAAW,WAAA,EACnB,KAAAkE,YAAA,CAAA/oC,GACyB,IAAE,CAAAkE,IAAK,iBAAKlE,IAAAA,CACxC,EAEA,EAIoCopC,qBACrB,SAAAppC,CAAiB,CAAE,CAChC,IAAIyH,EAAI,KAAA28B,iBAAA,CAAAx2B,EAAA,KAAA6E,QAAA,CACRzS,EAAIogC,IAAA,GACJpgC,EAAAgK,SAAA,CAAAvC,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAGAzH,EAAAspC,wBAAe,kBACf17B,EAAI5D,SAAU,CAAAhK,GACdA,EAAI7X,KAAA,GAAUylB,EAAK27B,KAAA,GAAA37B,EAAe47B,KAAK,EACvCxpC,EAAII,SAAO,CAAAwN,EAAA67B,YAAA,EAAA77B,EAAA87B,iBAAA,EAAA97B,EAAA+7B,iBAAA,EACb3pC,EAAA0gC,OAAA,EAEA,EAKuCoI,eAC9B,SAAA9oC,CAAA,CAAAzW,CAAA,EACP,IAAK6J,EAAAgR,EAA2C,IAC9ChR,EAAA,EAAOgR,EAAG7a,EAAW1L,MAAI,CAAAuV,EAAOgR,EAAA,EAAAhR,EAClC7J,CAAA,CAAA6J,EAAA,EAAA7J,CAAA,CAAA6J,EAAA,CAAAkwC,MAAA,CAAAtjC,EAGF,EAKoD4pC,2BAClC,SAAW5pC,CAAQ,CAAE4F,CAAS,EAE9C,IAAI/B,EAAC,IAAS,CAAA+B,EAAQ,SAAA5nB,EAAA,KAAA4nB,EAAA,SAAA6B,EAAA,KAAA28B,iBAAA,CAAAyF,EAAA,KAAAjkC,EAAA,UACpB,GAAA5nB,GAEQ,GACR6lB,EAAI,CACJ7D,EAAIogC,IAAA,GACJpgC,EAAIwgC,SAAO,GACXxgC,EAAI8pC,MAAM,CAAC,KACX9pC,EAAI+pC,MAAM,CAAC,IAAI,CAAC3nD,KAAK,CAAE,GACvB4d,EAAI+pC,MAAM,CAAC,IAAG,CAAA3nD,KAAK,KAAM,CAAAC,MAAA,EACzB2d,EAAI+pC,MAAA,GAAS,KAAA1nD,MAAA,EACb2d,EAAIgqC,SAAS,GAGbhqC,EAAIqgC,SAAA,CAAUx8B,EAAAomC,MAAA,CAAApmC,EAAAomC,MAAA,CAAAjqC,EAAA,MAAA6D,CAAA,CACZgmC,GACD7pC,EAAAgK,SAAA,CAAAvC,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAEDzH,EAAIgK,SAAS,SAAAnG,EAAiB03B,OAAI,EAAK,EAAA13B,EAAA23B,OAAgB,KACvD,IAAArnB,EAAKtQ,EAAIqmC,iBAAoB,EAAIrmC,EAAMsmC,gBAAc,CACrDh2B,GAAInU,EAAIgK,SAAA,CAAAmK,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACRnU,EAAI6D,IAAA,GACL7D,EAAA0gC,OAAA,EACD,KAEE1gC,EAAIogC,IAAA,GACFyJ,GACD7pC,EAAAgK,SAAA,CAAAvC,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KAEDzpB,EAAIslD,MAAO,CAAAtjC,GACZA,EAAA0gC,OAAA,IA3BD,EAkC+BmI,kBAC1B,SAAA7oC,CAAA,EACP,KAAA4pC,0BAAA,CAAA5pC,EAAA,aAEA,EAI8BqpC,eACvB,SAAArpC,CAAA,EACP,KAAA4pC,0BAAA,CAAA5pC,EAAA,UAEA,EAMuBoqC,UACd,iBACL,CACAnhD,IAAA,IAAM,CAAI5G,MAAM,CAAG,EACrB6G,KAAA,KAAA9G,KAAA,EACF,CAEA,EAI4Bw4C,eACf,UAAY,CACzB,WAAAz3C,GAAAmkB,KAAA,MAAAllB,KAAA,QAAAC,MAAA,GAEA,EAKiCgoD,cACpB,SAACrsD,CAAc,EAC5B,YAAAssD,aAAA,CAAAtsD,EAAA,IAAAmF,GAAAmkB,KAAA,MAAAszB,cAAA,GAAArzB,CAAA,CAAAvpB,EAAA48C,cAAA,GAAApzB,CAAA,EAEA,EAMiC+iC,cACpB,SAACvsD,CAAc,EAC5B,YAAAssD,aAAA,CAAAtsD,EAAA,IAAAmF,GAAAmkB,KAAA,CAAAtpB,EAAA48C,cAAA,GAAArzB,CAAA,MAAAqzB,cAAA,GAAApzB,CAAA,EAEA,EAM+B9e,aACzB,SAAc1K,CAAA,EAClB,IAAA8zB,EAAY,KAAA8oB,cAAc,GAC5B,YAAA0P,aAAA,CAAAtsD,EAAA8zB,EAEA,EAMuC04B,qBACtB,SAAKxsD,CAAW,EAC/B,IAAAysD,EAAY,KAAAC,WAAc,GAC5B,YAAAJ,aAAA,CAAAtsD,EAAAysD,EAEA,EAMwCE,sBACnB,SAAC3sD,CAAW,EAC/B,IAAIysD,EAAC,IAAc,CAAAC,WAAY,GAEjC,OADE,KAAAJ,aAAW,CAAAtsD,EAAA,IAAAmF,GAAAmkB,KAAA,CAAAmjC,EAAAljC,CAAA,CAAAvpB,EAAA48C,cAAA,GAAApzB,CAAA,GACb,MAQwCojC,sBACnB,SAAC5sD,CAAW,EAE/B,IAAAysD,EAAY,KAAAC,WAAc,GAC5B,YAAAJ,aAAA,CAAAtsD,EAAA,IAAAmF,GAAAmkB,KAAA,CAAAtpB,EAAA48C,cAAA,GAAArzB,CAAA,CAAAkjC,EAAAjjC,CAAA,EAEA,EAKwBkjC,YAClB,UAAc,CAGpB,OAAA7sC,EADS,KAAA+8B,cAAuB,GAAArwB,EAAA,KAAA65B,iBAAA,EAGhC,EAOwCkG,cAC/B,SAAAtsD,CAAmB,CAAC8zB,CAAA,CAAQ,CAIrC,OAHE9zB,EAAO+zB,mBAAS,CAAAD,EAAA,mBAChB9zB,EAAKqL,SAAA,GACL,KAAAkO,iBAAW,OAAA7N,gBAAA,GACb,MAO+CmhD,eACjC,SAAAC,CAAiB,EAC/B,YAAAC,gBAAA,CAAAD,EAEA,EAKyCE,SACvC,SAAYF,CAAgB,EAC9B,YAAAG,eAAA,YAAAH,EAEA,EAKiDC,iBACnC,SAAAD,CAAgB,EAC9B,YAAAG,eAAA,oBAAAH,EAEA,EAG4DG,gBAEtD,SAAgBnrB,CAAU,CAAAgrB,CAAO,MACnCr4B,EAAS,KAAOA,QAAO,CAAAznB,EAAA,CACvB0T,QAASvb,GAAKub,OAAA,CAChBnV,QAAA,KAAA2hD,UAAA,CAAAprB,EAAAgrB,EACA,EAQF,OAPIr4B,GAAK,CAAQA,EAAQ04B,iBAAe,EACrCngD,CAAAA,EAAAynB,QAAA,MAAAnU,SAAA,MAAAmU,QAAA,CAAAqN,EAAAgrB,EAAA,EAGDvuC,EAAOvR,EAAK,KAAAogD,oBAAuB,CAAItrB,EAAQgrB,IAE/C3nD,GAAOwa,IAAA,CAAAqQ,sBAAA,MAAAhjB,EAAA8/C,GACT9/C,CAEA,EAGsDkgD,WAC7C,SAAKprB,CAAe,CAACgrB,CAAiB,SAC3C,IAAO,CAACljD,QAAO,CAAAoF,MAAA,UAAiBhP,CAAA,EAC/B,MAAI,CAAAA,EAASmtD,iBAAU,GAAA/gD,GACxB,UAAY07C,CAAA,CAAU,CACrB,OAAI,KAAAxnC,SAAA,CAAAwnC,EAAAhmB,EAAAgrB,EACT,OAEA,EAG+DxsC,UACzD,SAAAwnC,CAAA,CAAAhmB,CAAA,CAAAgrB,CAAA,EAGF,KAAA9G,oBAAyB,GACzBqH,EAASvF,EAAA9B,oBAA4B,CACtC8B,EAAA9B,oBAAA,KAGD,IANIqH,EAMArtD,EAAM8nD,CAAA,CAAAhmB,EAAsB,CAAAgrB,GAIlC,OAHI,KAAA9G,oBAAS,EACV8B,CAAAA,EAAA9B,oBAAA,CAAAqH,CAAA,EAEHrtD,CAEA,EAGgEotD,qBAC/C,SAAUtrB,CAAK,CAAAgrB,CAAiB,EAG/C,IAAI9/C,EAAA,GAAWsgD,EAAQ,KAAAzH,eAAU,CAAAE,EAAA,KAAAA,YAAA,CAAAwH,EAAA,KAAAnwD,eAAA,CAAA0oD,EAAA,KAAAA,YAAA,CA0BnC,OAzBIyH,GAAKA,EAAQP,QAAA,CACXO,EAAKJ,iBAAqB,EAC3BngD,CAAAA,EAAAxI,UAAA,CAAA+oD,EAAAP,QAAA,CAAAF,EAAA,EAGIS,GACNvgD,CAAAA,EAAAxI,UAAA,CAAA+oD,CAAA,EAGCzH,GAAKA,EAAakH,QAAmB,CACnClH,EAAYqH,iBAAgB,EAC7BngD,CAAAA,EAAAwgD,OAAA,CAAA1H,EAAAkH,QAAA,CAAAF,EAAA,EAGIhH,GACN94C,CAAAA,EAAAwgD,OAAA,CAAA1H,CAAA,EAGCwH,GAAK,CAAAA,EAAeH,iBAAiB,EACtCngD,CAAAA,EAAA64C,eAAA,MAAAvlC,SAAA,CAAAgtC,EAAAxrB,EAAAgrB,EAAA,EAEC/G,GAAK,CAAYA,EAAQoH,iBAAU,EACpCngD,CAAAA,EAAA+4C,YAAA,MAAAzlC,SAAA,CAAAylC,EAAAjkB,EAAAgrB,EAAA,EAGH9/C,CAIA,EAO8BygD,WACvB,SAAQztD,CAAA,KACX,CAAAA,EACD,YAGD,IAAyCoV,EAAIiS,EAAKqmC,EAA9CC,EAAW,KAAArE,aAAmB,CAAmC,GACnEtpD,IAAO2tD,GAAgB3tD,oBAAAA,EAAQW,IAAA,CACH,IAC1ByU,EAAAs4C,CADFA,EAAKC,EAAiB/jD,QAAM,EACpB/J,MAAO,CAAAuV,KACbiS,EAAAqmC,CAAA,CAAAt4C,EAAA,CACAuT,EAAc,KAAO/e,QAAC,CAAAyd,GACxB,KAAAzd,QAAA,CAAAgkD,OAAA,CAAAvmC,QAIAsB,EAAc,KAAO/e,QAAC,CAAA5J,GACvB,KAAA4J,QAAA,CAAAgkD,OAAA,CAAA5tD,EACD,CAEF,OADE,KAAAuZ,iBAAW,OAAA7N,gBAAA,GACb,MASgCmiD,aACzB,SAAQ7tD,CAAA,KACX,CAAAA,EACD,YAGD,IAAyCoV,EAAIiS,EAAKqmC,EAA9CC,EAAW,KAAArE,aAAmB,CAAmC,GACnEtpD,IAAO2tD,GAAgB3tD,oBAAAA,EAAQW,IAAA,CACG,IAChCyU,EAAA,EADFs4C,EAAKC,EAAgB/jD,QAAQ,CACrBwL,EAAKs4C,EAAE7tD,MAAA,CAAAuV,IACbiS,EAAAqmC,CAAA,CAAAt4C,EAAA,CACAuT,EAAc,IAAK,CAAA/e,QAAA,CAAAyd,GACrB,KAAAzd,QAAA,CAAAhP,IAAA,CAAAysB,QAIAsB,EAAc,IAAK,CAAA/e,QAAA,CAAA5J,GACpB,KAAA4J,QAAA,CAAAhP,IAAA,CAAAoF,EACD,CAEF,OADE,KAAAuZ,iBAAW,OAAA7N,gBAAA,GACb,MAa+C7B,cACxC,SAAQ7J,CAAA,CAAA8tD,CAAA,KACX,CAAA9tD,EACD,YAID,IAAyCoV,EAAIiS,EAAKuB,EAAAmlC,EAAAL,EAA9CC,EAAW,KAAArE,aAAmB,CAAmC0E,EAAA,KACnEhuD,IAAO2tD,GAAgB3tD,oBAAAA,EAAQW,IAAA,CACG,IAChCyU,EAAA,EADFs4C,EAAKC,EAAgB/jD,QAAQ,CACrBwL,EAAKs4C,EAAE7tD,MAAA,CAAAuV,IACbiS,EAAMqmC,CAAI,CAACt4C,EAAA,CACXwT,CAAAA,EAAI,IAAM,CAAAhf,QAAI,CAAA+b,OAAW,CAAA0B,EAAA,EACvB,EAAS2mC,IACTD,EAAAnlC,EAAA,EACAD,EAAc,IAAM,CAAC/e,QAAQ,CAAAyd,GAC9B,KAAAzd,QAAA,CAAAgd,MAAA,CAAAmnC,EAAA,EAAA1mC,IAEH2mC,SAKE,IADFplC,CAAAA,EAAI,KAAAhf,QAAW,CAAA+b,OAAA,CAAA3lB,EAAA,IAGb+tD,EAAA,KAAAE,kBAA+B,CAAAjuD,EAAA4oB,EAAAklC,GAC/BnlC,EAAc,IAAM,CAAC/e,QAAQ,CAAA5J,GAC9B,KAAA4J,QAAA,CAAAgd,MAAA,CAAAmnC,EAAA,EAAA/tD,GAEH,CAEF,OADE,KAAAuZ,iBAAW,OAAA7N,gBAAA,GACb,MAKwDuiD,mBAC1C,SAAAjuD,CAAA,CAAA4oB,CAAA,CAAAklC,CAAA,EAEZ,IAAIC,EAAA34C,EAAc,GAChB04C,EAG+B,KAD/BC,EAAAnlC,EAGExT,EAAIwT,EAAA,EAAAxT,GAAA,EAAiB,EAAAA,EAID,GAAApV,EAAAkuD,oBAAA,MAAAtkD,QAAA,CAAAwL,EAAA,GAAApV,EAAAmuD,uBAAA,MAAAvkD,QAAA,CAAAwL,EAAA,QAAAxL,QAAA,CAAAwL,EAAA,CAAA+4C,uBAAA,CAAAnuD,GACT,CACT+tD,EAAM34C,EACP,MACH,MAID24C,EAAAnlC,EAAA,CAED,CACF,OAAAmlC,CAEA,EAW8CrwD,aACvC,SAAQsC,CAAA,CAAA8tD,CAAA,KACX,CAAA9tD,EACD,YAID,IAAyCoV,EAAIiS,EAAKuB,EAAAmlC,EAAAL,EAA9CC,EAAW,KAAArE,aAAmB,CAAmC0E,EAAA,KACnEhuD,IAAO2tD,GAAgB3tD,oBAAAA,EAAQW,IAAA,CACH,IAC1ByU,EAAAs4C,CADFA,EAAKC,EAAiB/jD,QAAM,EACpB/J,MAAO,CAAAuV,KACbiS,EAAMqmC,CAAI,CAACt4C,EAAA,CACXwT,CAAAA,EAAI,IAAM,CAAAhf,QAAK,CAAA+b,OAAS,CAAA0B,EAAM,EAC5B,IAAS,CAAAzd,QAAM,CAAA/J,MAAA,GAAAmuD,IACfD,EAAAnlC,EAAA,EACAD,EAAc,IAAM,CAAC/e,QAAQ,CAAAyd,GAC9B,KAAAzd,QAAA,CAAAgd,MAAA,CAAAmnC,EAAA,EAAA1mC,IAEH2mC,QAIAplC,CAAAA,EAAI,KAAAhf,QAAa,CAAA+b,OAAS,CAAA3lB,EAAM,IAC9B,KAAA4J,QAAA,CAAA/J,MAAA,KAEAkuD,EAAA,KAAAK,kBAA+B,CAAApuD,EAAA4oB,EAAAklC,GAC/BnlC,EAAc,IAAM,CAAC/e,QAAQ,CAAA5J,GAC9B,KAAA4J,QAAA,CAAAgd,MAAA,CAAAmnC,EAAA,EAAA/tD,GAEH,CAEF,OADE,KAAAuZ,iBAAW,OAAA7N,gBAAA,GACb,MAKwD0iD,mBACvC,SAAApuD,CAAA,CAAA4oB,CAAA,CAAAklC,CAAA,EAEf,IAAIC,EAAA34C,EAAAgR,EAAc,GAChB0nC,EAG4D,KAE1D14C,EAHFwT,EAGExT,EAAIwT,EAAA,EAAAxC,EAAA,IAAiB,CAAAxc,QAAO,CAAA/J,MAAA,CAAAuV,EAAAgR,EAAqB,EAAAhR,EAI7B,GAAApV,EAAAkuD,oBAAA,MAAAtkD,QAAA,CAAAwL,EAAA,GAAApV,EAAAmuD,uBAAA,MAAAvkD,QAAA,CAAAwL,EAAA,QAAAxL,QAAA,CAAAwL,EAAA,CAAA+4C,uBAAA,CAAAnuD,GACT,CACT+tD,EAAM34C,EACP,MACH,MAID24C,EAAAnlC,EAAA,CAED,CACF,OAAAmlC,CAEA,EAOiCjC,OAC/B,SAAA9rD,CAAgB,CAAKuV,CAAA,EAGvB,OAFEoT,EAAc,IAAM,CAAC/e,QAAO,CAAG5J,GAC/B,KAAA4J,QAAY,CAAAgd,MAAA,CAAArR,EAAA,EAAiBvV,GAC/B,KAAAuZ,iBAAA,OAAA7N,gBAAA,EAEA,EAKqB0P,QACnB,WA6BF,OA3BI,KAAAsvC,WAAY,GACZvlD,GAAKwa,IAAA,CAAAwrB,eAAc,MAAAuf,WAAA,EACpB,KAAAA,WAAA,IACmC,IAClC,CAAAt/C,aAAc,UAAIpL,CAAO,CAAO,CAClCA,EAAAob,OAAA,EAAApb,EAAAob,OAAA,EACA,GACA,IAAI,CAAAxR,QAAK,IACP,IAAI,CAACi8C,eAAe,EAAC,IAAO,CAAAA,eAAA,CAAAzqC,OAAA,EAC7B,KAAAyqC,eAAA,CAAAzqC,OAAA,GAED,IAAI,CAAAyqC,eAAK,CAAY,IAAI,CACvB,IAAI,CAACE,YAAY,EAAC,IAAO,CAAAA,YAAA,CAAA3qC,OAAA,EAC1B,KAAA2qC,YAAA,CAAA3qC,OAAA,GAED,IAAI,CAAC2qC,YAAA,CAAe,IAAG,CACvB,IAAI,CAACwE,eAAA,CAAgB,IAAG,CACxB,KAAAhD,gBAAA,CAAuB,KAEvB,KAAAD,aAAY,CAAA+G,SAAc,CAAA5iD,MAAA,iBAC1BtG,GAAOwa,IAAI,CAAC4jB,QAAA,MAAA+jB,aAAoB,MAAAW,oBAAA,EAChC,YAAAA,oBAAA,CAEA,IAAI,CAACX,aAAa,CAAC/iB,YAAY,CAAC,YAAU,CAAIngC,KAAC,EAC/C,KAAAkjD,aAAY,CAAA/iB,YAAiB,UAAK,KAAalgC,MAAA,EAC/Cc,GAAKwa,IAAA,CAAA0nB,gBAAgB,MAAAigB,aAAA,EACrB,KAAAA,aAAW,CAAA9kD,KAAAA,EACb,MAMsB4+B,SACpB,UAAO,CAET,+BAAA9Z,UAAA,yBAAA1d,QAAA,CAAA/J,MAAA,MACF,CAEA,GACA0e,EAAOpZ,GAAOogD,YAAY,CAACtrC,SAAS,CAAE9U,GAAO8gB,UAAU,EACvD1H,EAAOpZ,GAAOogD,YAAY,CAACtrC,SAAS,CAAE9U,GAAOqhB,UAAA,EAE7CjI,EAAOpZ,GAAOogD,YAAY,CAAAtrC,SAAE,CAAA9U,GAAAmpD,eAA+B,EAAG/vC,EAE5DpZ,GAAAogD,YAAA,EAOAgJ,WAAA,yCASgCC,SAC1B,SAAK1sB,CAAA,EAET,IAAIwC,EAACnU,IAAsB,GACzB,CAAAmU,GAAO,CAAAA,EAAIriB,UAAA,CACZ,YAGD,IAAID,EAAMsiB,EAAAriB,UAAA,cACRD,GAME,gBADF8f,EAGA,SAAA9f,EAAAysC,WAAA,CAEF,KAIJ,GAoBAtpD,GAAIogD,YAAO,CAAAtrC,SAAc,CAAAkB,MAAA,CAAAhW,GAAAogD,YAAA,CAAAtrC,SAAA,CAAA+yC,QAAA,CACvB7nD,GAAOse,YAAY,GAAwCte,GACzDogD,YAAW,CAAAtrC,SAAc,CAAAy0C,eAAK,CAAa,WAC3C,IAAAxnB,EAAOD,EAAa,KAAAqgB,aAAe,EACrC,OAAApgB,GAAAA,EAAAwnB,eAAA,EACA,EAAgEvpD,GAC9DogD,YAAW,CAAAtrC,SAAc,CAAA00C,gBAAK,CAAa,SAAAC,CAAA,EAC3C,IAAA1nB,EAAOD,EAAa,KAAAqgB,aAAiB,EACvC,OAAApgB,GAAAA,EAAAynB,gBAAA,CAAAC,EACD,EAEH,IAOEzpD,GAAA0pD,SAAA,CAAA1pD,GAAAwa,IAAA,CAAAG,WAAA,EAOAjS,MAAA,eAOAzJ,MAAA,EASA0qD,OAAA,KAOAC,cAAA,QAOAtjC,eAAA,QAOAC,iBAAA,GAOAsjC,gBAAA,KASAC,oBAAA,GAKgCjG,gBACf,SAAQhnC,CAAA,CAAK,CAC5BA,EAAIsgC,WAAS,CAAG,IAAK,CAAAz0C,KAAK,CAC1BmU,EAAIugC,SAAO,CAAG,IAAK,CAAAn+C,KAAA,CACnB4d,EAAIktC,OAAA,CAAU,IAAG,CAAAH,aAAK,CACtB/sC,EAAImtC,UAAQ,CAAG,IAAK,CAAAzjC,gBAAc,CAClC1J,EAAIotC,QAAA,CAAW,IAAC,CAAI3jC,cAAC,CACvBzJ,EAAAysC,WAAA,MAAAO,eAAA,KAEA,EAKiCK,kBAClB,SAAOrtC,CAAA,EACpB,IAAIyH,EAAI,KAAA3gB,MAAA,CAAAs9C,iBAAA,CACRpkC,EAAIogC,IAAA,GACNpgC,EAAAgK,SAAA,CAAAvC,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAEA,EAIuB6lC,WACX,UAAQ,IAChB,KAAAR,MAAA,EAOF,IAAIhmD,EAAA,IAAU,CAAAA,MAAO,CAAAgmD,EAAA,IAAgB,CAAAA,MAAI,CAAA9sC,EAAAlZ,EAAA2+C,UAAA,CAAApkB,EAAAv6B,EAAAq0C,OAAA,GACvCr0C,GAAQA,EAAOo+C,gBAAgB,IAChC7jB,CAAAA,GAAAl+B,GAAAqf,gBAAA,EAGDxC,EAAIutC,WAAU,CAAGT,EAAOjhD,KAAI,CAC5BmU,EAAIwtC,UAAA,CAAaV,EAAGW,IAAO,CAAApsB,EAC3BrhB,EAAI0tC,aAAa,CAAGZ,EAAOvR,OAAO,CAAGla,EACvCrhB,EAAA2tC,aAAA,CAAAb,EAAAtR,OAAA,CAAAna,EAZE,EAc0BusB,gBACd,UAAW,CAEzB,OAAA/hD,EAAAA,IADe1I,GAAQwmC,KAAK,KAAO,CAAA99B,KAAK,EACxCsiC,QAAA,WAAA2e,MAAA,EAMyBe,aACb,UAAY,CAEtB,IAAI7tC,EAAA,KAAWlZ,MAAG,CAAA2+C,UAAA,CAClBzlC,EAAIutC,WAAU,CAAG,GACnBvtC,EAAAwtC,UAAA,CAAAxtC,EAAA0tC,aAAA,CAAA1tC,EAAA2tC,aAAA,EAEA,EAKoCG,iBACnB,SAASrT,CAAA,CAAS,CACnC,OAAAA,EAAAlzB,CAAA,IAAAkzB,EAAAlzB,CAAA,MAAAzgB,MAAA,CAAAq/C,QAAA,IAAA1L,EAAAjzB,CAAA,IAAAizB,EAAAjzB,CAAA,MAAA1gB,MAAA,CAAAs/C,SAAA,EACF,CACC,GAM2GjjD,GAExG4qD,WAAA,CAAA5qD,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA0pD,SAAA,EAOAmB,SAAA,GASAC,iBAAA,GAOAC,gBAAA,WAK6BhuB,WACtB,SAASp5B,CAAA,EACd,IAAI,CAACA,MAAA,CAAOA,EACd,KAAAqnD,OAAA,KAE6BP,gBACf,UAAU,CACxB,YAAA/tB,SAAA,0BAAAuuB,gBAAA,EAMqCC,aAC/B,SAAcruC,CAAA,CAAA0b,CAAA,CAAAC,CAAY,CAAC,CAC/B,IAAIK,EAAAN,EAAAO,YAA0B,CAACN,GAEjC,OADE3b,EAAAsuC,gBAAO,CAAA5yB,EAAAnU,CAAA,CAAAmU,EAAAlU,CAAA,CAAAwU,EAAAzU,CAAA,CAAAyU,EAAAxU,CAAA,EACTwU,CAEA,EAIwCuyB,YAC7B,SAAQ9T,CAAA,CAAAh9C,CAAa,EAC5B,KAAAqJ,MAAA,CAAA0nD,YAAA,CAAA/wD,EAAAsM,CAAA,IAGF,IAAI,CAACkkD,gBAAA,CAAmBxwD,EAAAsM,CAAA,MAAAmkD,eAAA,EACxB,KAAAO,kBAAA,CAAAhU,GAGA,IAAI,CAACiU,mBAAO,CAAAjU,GACd,KAAAkU,OAAA,GAEA,EAIwCC,YAC7B,SAAQnU,CAAA,CAAAh9C,CAAa,EAAY,GACxC,KAAAqJ,MAAA,CAAA0nD,YAAA,CAAA/wD,EAAAsM,CAAA,IAGF,IAAI,CAAAkkD,gBAAK,CAAAxwD,EAAmBsM,CAAK,KAAI,CAAAmkD,eAAS,GAC5C,WAAAjB,mBAAA,OAAAa,gBAAA,CAAArT,EAAA,GAGA,IAAI,CAAAiU,mBAAoB,CAAAjU,IAAI,KAAA0T,OAAA,CAAAtwD,MAAA,QAC1B,KAAA+vD,eAAe,GAGf,IAAI,CAAC9mD,MAAA,CAAOqhD,YAAA,MAAArhD,MAAA,CAAA2+C,UAAA,EACd,IACK,CAAAkJ,OAAA,OACH,CACA,IAAA9lC,EAAA,KAAAslC,OAAwB,CAAAtwD,EAAAgrB,EAAAhrB,MAAA,CAAAmiB,EAAA,KAAAlZ,MAAA,CAAA2+C,UAAA,CAExB,IAAI,CAAA4H,iBAAa,CAAArtC,GACf,IAAI,CAAA6uC,MAAA,GACJ7uC,EAAIwgC,SAAO,GACZxgC,EAAA8pC,MAAA,MAAA+E,MAAA,CAAAtnC,CAAA,MAAAsnC,MAAA,CAAArnC,CAAA,GAED,IAAI,CAAAqnC,MAAM,MAAAR,YAAA,CAAAruC,EAAA6I,CAAA,CAAAhrB,EAAA,GAAAgrB,CAAA,CAAAhrB,EAAA,OACVmiB,EAAI8S,MAAA,GACL9S,EAAA0gC,OAAA,EACF,EAvBD,EA6B2BoO,UACtB,SAAWrxD,CAAC,QAAyB,CACxC,KAAAqJ,MAAW,CAAA0nD,YAAA,CAAA/wD,EAAAsM,CAAA,IAGb,IAAI,CAACkkD,gBAAS,IACd,IAAI,CAACY,MAAA,CAAAruD,KAAAA,EACL,KAAAuuD,mBAAY,GACd,GAEA,EAIsCN,mBAExB,SAAahU,CAAA,CAAS,CAElC,IAAI32C,EAAC,IAAMX,GAAAmkB,KAAA,CAAAmzB,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,EACX,IAAI,CAACwnC,MAAA,GACL,IAAI,CAACC,SAAO,CAAAnrD,GACd,KAAAgD,MAAA,CAAA2+C,UAAA,CAAAqE,MAAA,CAAAhmD,EAAAyjB,CAAA,CAAAzjB,EAAA0jB,CAAA,CAEA,EAI2BynC,UACrB,SAAY9nC,CAAC,CAAM,OAAyD,CAC9E,MAAAgnC,OAAY,CAAAtwD,MAAA,IAAAspB,EAAA4U,EAAA,MAAAoyB,OAAA,MAAAA,OAAA,CAAAtwD,MAAA,QAGZ,IAAI,CAACowD,gBAAgB,EAAG,IAAI,CAAAE,OAAA,CAAAtwD,MAAA,KAC5B,IAAI,CAACuwD,gBAAW,IACjB,KAAAD,OAAA,CAAAz9B,GAAA,IAED,KAAAy9B,OAAW,CAAAv1D,IAAA,CAAAuuB,GACb,GAEA,EAImB6nC,OACb,UAAW,CACf,IAAI,CAACb,OAAA,IACL,IAAI,CAACnH,eAAU,MAAAlgD,MAAA,CAAA2+C,UAAA,EACf,IAAI,CAAC6H,UAAA,GACP,KAAAc,gBAAA,GAEA,EAIuCM,oBACjC,SAAmBjU,CAAO,CAAK,CACnC,IAAAyU,EAAY,IAAU/rD,GAAAmkB,KAAA,CAAAmzB,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,EACxB,YAAAynC,SAAA,CAAAC,EAEA,EAKuBP,QACjB,SACA3uC,CAAK,EAET,IAAA5M,EAAMgR,EAAAsX,EAAW,IAAC,CAAAyyB,OAAO,IAAAxyB,EAAU,KAAAwyB,OAAA,IAO8B,GANjEnuC,EAAKA,GAAA,KAAAlZ,MAAkB,CAAA2+C,UAAA,CACvB,IAAI,CAAA4H,iBAAS,CAAArtC,GACbA,EAAAwgC,SAAA,GAKE,QAAI,CAAA2N,OAAQ,CAAAtwD,MAAK,EAAQ69B,EAAAnU,CAAA,GAAAoU,EAAApU,CAAA,EAAAmU,EAAAlU,CAAA,GAAAmU,EAAAnU,CAAA,EACzB,IAAAplB,EAAS,IAAO,CAAAA,KAAM,CAAG,IACzBs5B,EAAK,IAAIv4B,GAAOmkB,KAAK,CAACoU,EAAGnU,CAAC,CAAEmU,EAAGlU,CAAC,EAChCmU,EAAI,IAAIx4B,GAAAmkB,KAAA,CAAAqU,EAAApU,CAAA,CAAAoU,EAAAnU,CAAA,EACRkU,EAAGnU,CAAC,EAAInlB,EACTu5B,EAAApU,CAAA,EAAAnlB,CACD,KAGEgR,EADG02C,MAAI,CAAGpuB,EAAAnU,CAAA,CAAMmU,EAAAlU,CAAI,EACpBpU,EAAA,EAAAgR,EAAA,KAAA+pC,OAAA,CAAAtwD,MAAA,CAAAuV,EAAAgR,EAAAhR,IAGA,KAAKi7C,YAAY,CAACruC,EAAE0b,EAAAC,GACpBD,EAAK,IAAI,CAACyyB,OAAO,CAAC/6C,EAAA,CACpBuoB,EAAA,KAAAwyB,OAAA,CAAA/6C,EAAA,GAKA4M,EAAI+pC,MAAM,CAAAruB,EAAAnU,CAAA,CAAAmU,EAAAlU,CAAA,EACVxH,EAAI8S,MAAA,GACN9S,EAAA0gC,OAAA,EAEA,EAK0CyO,uBACvB,SAAUtmC,CAAG,EAC9B,IAAA4S,EAAc,IAAK,CAAAr5B,KAAA,KACrB,OAAAe,GAAAwa,IAAA,CAAA6d,uBAAA,CAAA3S,EAAA4S,EAEA,EAKqC2zB,gBAC/B,SAAal4B,CAAY,EAE/B,MAAAG,0BADSl0B,GAAewa,IAAA,CAAAsZ,QAAA,CAAAC,EAGxB,EAK+Bm4B,WACzB,SAAWn4B,CAAO,CAAK,CAAU,IACnCtJ,EAAM,IAAIzqB,GAAAmsD,IAAA,CAAAp4B,EAAA,CACVrT,KAAA,IAAQ,CACRiP,OAAA,KAAajnB,KAAK,CAClB0M,YAAA,IAAe,CAAAnW,KAAK,CACpB2qD,cAAA,IAAkB,CAAAA,aAAK,CACvBrjC,iBAAgB,IAAK,CAAAA,gBAAc,CACnCD,eAAA,IAAiB,CAAIA,cAAC,CACxBujC,gBAAA,KAAAA,eAAA,GAOF,OALI,IAAI,CAACF,MAAM,GACX,KAAKA,MAAM,CAAAyC,YAAO,CAAO,GAC1B3hC,EAAAk/B,MAAA,KAAA3pD,GAAAqsD,MAAA,MAAA1C,MAAA,GAGHl/B,CAEA,EAG2C6hC,eAC9B,SAAU5mC,CAAG,CAAAmU,CAAA,KACtBnU,EAAOhrB,MAAA,IACR,OAAAgrB,CACD,CACiE,IAACzV,EAAAs8C,EAAAppC,KAAAxJ,GAAA,CAAAkgB,EAAA,KAAAl2B,MAAA,CAAAq0C,OAAA,MAAAlrB,EAAApH,EAAAhrB,MAAA,GAAA8xD,EAAA9mC,CAAA,IAAA+mC,EAAA,CAC9DD,EACJ,CAA4B,IAC1Bv8C,EAAA,EAAAA,EAAA6c,EAAY,EAAK7c,IACbkT,KAAaxJ,GAAA,CAAA6yC,EAAApoC,CAAA,CAAkBsB,CAAA,CAAAzV,EAAA,CAAAmU,CAAA,IAAAjB,KAAAxJ,GAAA,CAAA6yC,EAAAnoC,CAAA,CAAAqB,CAAA,CAAAzV,EAAA,CAAAoU,CAAA,KACrBkoC,GAEbE,EAAAh3D,IAAA,CADC+2D,EAAU9mC,CAAK,CAAAzV,EAAA,EASrB,OAF0Bw8C,EACjBh3D,IAAA,CAAAiwB,CAAA,CAAAoH,EAAA,EACT2/B,CAEA,EAKgCb,oBACf,UAAO,CAEtB/uC,IADa,CAAAlZ,MAAA,CAAA2+C,UAAA,CACTuE,SAAK,GACP,IAAI,CAACgE,QAAO,EACb,MAAAG,OAAA,MAAAsB,cAAA,MAAAtB,OAAA,MAAAH,QAAA,GAED,IAAI92B,EAAK,KAAAi4B,sBAA2B,MAAAhB,OAAA,KAClC,KAAAiB,eAAA,CAAAl4B,GAAA,CAKA,KAAApwB,MAAA,CAAA4C,gBAAA,GACD,MAED,KACIkkB,EAAO,IAAC,CAAAyhC,UAAa,CAAAn4B,GACzB,IAAI,CAACpwB,MAAM,CAACqhD,YAAK,MAAArhD,MAAA,CAAA2+C,UAAuB,MAAE,CAAA3+C,MAAM,CAAAod,IAAA,wBAAK0J,KAAAA,CACrD,GACA,IAAI,CAAC9mB,MAAM,CAACM,GAAA,CAAAwmB,GACZ,KAAK9mB,MAAA,CAAA4C,gBAAS,GACdkkB,EAAKvkB,SAAA,GAGL,KAAAwkD,YAAA,GACiC,IAAE,CAAA/mD,MAAM,CAAAod,IAAA,iBAAK0J,KAAAA,CAChD,EACF,CACF,GAOEzqB,GAAA0sD,WAAA,CAAA1sD,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA0pD,SAAA,EAOAzqD,MAAA,GAK6B89B,WACtB,SAASp5B,CAAA,EACd,IAAI,CAACA,MAAM,CAAGA,EAChB,KAAA+hB,MAAA,KAM2BinC,QACrB,SAAYrV,CAAC,CAAQ,CAEzB,IAAItzB,EAAC,KAAA4oC,QAAkB,CAAAtV,GAAAz6B,EAAA,KAAAlZ,MAAA,CAAA2+C,UAAA,CACvB,IAAI,CAAC4H,iBAAS,CAAArtC,GACd,IAAI,CAAAgwC,GAAA,CAAAhwC,EAAOmH,GACbnH,EAAA0gC,OAAA,EAEA,EAA0BsP,IACxB,SAAIhwC,CAAS,CAAAmH,CAAG,CAAM,CACtBnH,EAAIqgC,SAAS,CAAAl5B,EAAAtD,IAAA,CACb7D,EAAIwgC,SAAI,GACRxgC,EAAIygC,GAAA,CAAAt5B,EAASI,CAAA,CAAAJ,EAAAK,CAAA,CAAAL,EAAA8oC,MAAA,GAAA3pC,EAAAA,KAAAC,EAAA,KACbvG,EAAIgqC,SAAI,GACVhqC,EAAA6D,IAAA,EAEA,EAG+B0qC,YAClB,SAAO9T,CAAG,EACrB,IAAI,CAAC5xB,MAAM,CAAChrB,MAAA,GACZ,IAAI,CAACiJ,MAAA,CAAAqhD,YAAU,MAAArhD,MAAA,CAAA2+C,UAAA,EACf,IAAI,CAAC6H,UAAQ,GACf,KAAAwC,OAAA,CAAArV,EAEA,EAIoBkU,QACd,UAAY,CAEhB,IAAuBv7C,EAAAgR,EAAnBpE,EAAC,KAAAlZ,MAAA,CAAiB2+C,UAAC,CAAA58B,EAAA,KAAAA,MAAA,CACwB,IAC7CzV,IADG,CAAAi6C,iBAAa,CAAArtC,GAChB5M,EAAI,EAACgR,EAAIyE,EAAWhrB,MAAG,CAAAuV,EAAAgR,EAAAhR,IACzB,KAAA48C,GAAA,CAAAhwC,EAAA6I,CAAA,CAAAzV,EAAA,EAEF4M,EAAA0gC,OAAA,EAEA,EAI+BkO,YACpB,SAAAnU,CAAA,CAAmB,CAC1B,UAAAwS,mBAAA,OAAAa,gBAAA,CAAArT,KAGA,IAAI,CAACmT,eAAO,IACZ,IAAI,CAAC9mD,MAAA,CAAAqhD,YAAS,MAAArhD,MAAA,CAAA2+C,UAAA,EACd,IAAI,CAACsK,QAAO,CAAAtV,GACd,IACK,CAAAkU,OAAA,IAEJ,KAAAmB,OAAA,CAAArV,GAGH,EAGsBqU,UAChB,WACJ,IAAqC17C,EAAAgR,EAAjC8rC,EAA4B,KAAKppD,MAAA,CAAAyQ,iBAAA,CAErC,IAAI,CAAAzQ,MAAA,CAAAyQ,iBAAY,IAEhB,IAAK44C,EAAO,GAAwC,IAClD/8C,EAAI,EAAAgR,EAAQ,IAAK,CAAAyE,MAAO,CAAAhrB,MACpB,CAAAuV,EAASgR,EAAIhR,IAAA,CAAc,IACzB+T,EAAQ,KAAA0B,MAAM,CAAMzV,EAAA,CAAAg9C,EAAA,IAAAjtD,GAAAktD,MAAA,EACpBJ,OAAM9oC,EAAO8oC,MAAA,CACb/mD,KAAKie,EAAOI,CAAA,CACZte,IAAAke,EAASK,CAAA,CACTyyB,QAAS,SACTC,QAAM,SACRr2B,KAAAsD,EAAAtD,IAAA,EAIJ,MAAAipC,MAAQ,EAAKsD,CAAAA,EAAAtD,MAAA,KAAA3pD,GAAAqsD,MAAA,MAAA1C,MAAA,GACfqD,EAAAv3D,IAAA,CAAAw3D,EACA,CACA,IAAA3I,EAAY,IAAGtkD,GAAK2qB,KAAM,CAAAqiC,EAE1B1I,CAAAA,EAAK3gD,MAAO,KAAK,CAAAA,MAAA,CAAuB,IAAE,CAAAA,MAAM,CAAAod,IAAA,wBAAM0J,KAAA65B,CACtD,GACA,IAAI,CAAC3gD,MAAM,CAACM,GAAA,CAAIqgD,GAAiB,IAAE,CAAA3gD,MAAM,CAAAod,IAAA,iBAAM0J,KAAA65B,CAE/C,GACA,IAAI,CAAC3gD,MAAA,CAAAqhD,YAAY,MAAArhD,MAAA,CAAA2+C,UAAA,EACjB,IAAI,CAACoI,YAAO,GACZ,IAAI,CAAC/mD,MAAM,CAACyQ,iBAAgB,CAAA24C,EAC9B,KAAAppD,MAAA,CAAA4C,gBAAA,EAEA,EAI4BqmD,SACtB,SAAAtV,CAAmB,EASvB,IAAAyU,EAAmB,IAAG/rD,GAAAmkB,KAAA,CAAAmzB,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,EAAA8oC,EAAAntD,GAAAwa,IAAA,CAAAkJ,YAAA,CAAAP,KAAAxkB,GAAA,QAAAM,KAAA,UAAAA,KAAA,OAAAmuD,EAAA,IAAAptD,GAAAwmC,KAAA,MAAA99B,KAAA,EAAAuiC,QAAA,CAAAjrC,GAAAwa,IAAA,CAAAkJ,YAAA,aAAAgnB,MAAA,GAMxB,OALEqhB,EAAae,MAAI,CAAGK,EAEpBpB,EAAYrrC,IAAK,CAAA0sC,EAEjB,KAAA1nC,MAAO,CAAAjwB,IAAA,CAAAs2D,GACTA,CACF,CACA,GAME/rD,GAAAqtD,UAAA,CAAArtD,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA0pD,SAAA,EAOAzqD,MAAA,GAOAquD,QAAA,GAOAC,SAAA,EAOAC,iBAAA,EAOAC,cAAA,GAOAC,oBAAA,GAK6B3wB,WACtB,SAASp5B,CAAA,EACd,IAAI,CAACA,MAAA,CAAAA,EACP,KAAAgqD,WAAA,KAM+BvC,YACxB,SAAY9T,CAAS,EAC1B,IAAI,CAACqW,WAAO,CAAAjzD,MAAA,CAAa,EACzB,IAAI,CAACiJ,MAAA,CAAAqhD,YAAU,MAAArhD,MAAA,CAAA2+C,UAAA,EAEf,IAAI,CAAC6H,UAAA,GACL,IAAI,CAACyD,aAAY,CAAAtW,GACnB,KAAA6I,MAAA,MAAA0N,gBAAA,CAEA,EAI+BpC,YACpB,SAAAnU,CAAA,CAAmB,CAC1B,UAAAwS,mBAAA,OAAAa,gBAAA,CAAArT,KAGF,IAAI,CAACsW,aAAY,CAAAtW,GACnB,KAAA6I,MAAA,MAAA0N,gBAAA,EAEA,EAGsBlC,UAChB,WACJ,IAAIoB,EAA4B,KAAKppD,MAAA,CAAAyQ,iBAAA,CAErC,IAAI,CAAAzQ,MAAA,CAAQyQ,iBAAE,IAEiD,IAC7D,IADG05C,EAAQ,GACP79C,EAAA,EAAA89C,EAAa,IAAK,CAAAJ,WAAY,CAAAjzD,MAAE,CAAAuV,EAAA89C,EAAA99C,IAEqB,IAEvD,IAFG+9C,EAAW,KAAOL,WAAW,CAAA19C,EAAA,CAE5B2kB,EAAA,EAAOC,EAAIm5B,EAAYtzD,MAAA,CAAAk6B,EAAAC,EAAAD,IAAA,KACzBq5B,EAAO,IAAAjuD,GAAWkuD,IAAG,EACrBjvD,MAAA+uD,CAAQ,CAAUp5B,EAAC,CAAE31B,KAAC,CACtBC,OAAM8uD,CAAW,CAAEp5B,EAAE,CAAA31B,KAAG,CACxB8G,KAAKioD,CAAW,CAAAp5B,EAAG,CAACxQ,CAAA,CAAG,EACvBte,IAAAkoD,CAAS,CAAAp5B,EAAA,CAAAvQ,CAAA,GACTyyB,QAAS,SACTC,QAAM,SACRr2B,KAAA,KAAAhY,KAAA,GAEFolD,EAAAr4D,IAAA,CAAAw4D,EACF,CAGE,KAAAP,mBAAa,EACdI,CAAAA,EAAA,KAAAK,kBAAA,CAAAL,EAAA,EAGD,IAAIxJ,EAAO,IAAItkD,GAAM2qB,KAAI,CAAAmjC,EACzB,KAAI,CAACnE,MAAM,EAACrF,EAAKz+C,GAAA,cAAA7F,GAAuBqsD,MAAA,MAAA1C,MAAA,OAAE,CAAAhmD,MAAM,CAAAod,IAAA,wBAAM0J,KAAA65B,CACtD,GACA,IAAI,CAAC3gD,MAAM,CAACM,GAAA,CAAIqgD,GAAiB,IAAE,CAAA3gD,MAAM,CAAAod,IAAA,iBAAM0J,KAAA65B,CAE/C,GACA,IAAI,CAAC3gD,MAAA,CAAAqhD,YAAY,MAAArhD,MAAA,CAAA2+C,UAAA,EACjB,IAAI,CAACoI,YAAO,GACZ,IAAI,CAAC/mD,MAAM,CAACyQ,iBAAgB,CAAA24C,EAC9B,KAAAppD,MAAA,CAAA4C,gBAAA,EAEA,EAIoC4nD,mBAElC,SAAAL,CAAA,EAGA,IAAkBtjD,EAAMyF,EAAMgR,EAAzBmtC,EAAa,GAA4B,IAC5Cn+C,EAAA,EAAMgR,EAAM6sC,EAAOpzD,MAAG,CAAKuV,EAAAgR,EAAShR,IAElCm+C,CAAY,CADd5jD,EAAKsjD,CAAA,CAAA79C,EAAA,CAAAlK,IAAY,CAAI,GAAE+nD,CAAA,CAAA79C,EAAA,CAAAnK,GAAA,CACL,EACjBsoD,CAAAA,CAAA,CAAA5jD,EAAA,CAAAsjD,CAAA,CAAA79C,EAAA,EAGH,IAAKo+C,EAAoB,OACvB7jD,KAAA4jD,EACFC,EAAA54D,IAAA,CAAA24D,CAAA,CAAA5jD,EAAA,EAGF,OAAA6jD,CAEA,EAG6BlO,OACvB,SAAW6N,CAAO,EACtB,IAA0B/9C,EAAAgR,EAAtBpE,EAAA,IAAS,CAAAlZ,MAAQ,CAAA2+C,UAAK,CAIyB,IACjDryC,EAHEitC,SAAC,MAAAx0C,KAAkB,CAEvB,IAAK,CAAAwhD,iBAAa,CAAArtC,GAChB5M,EAAI,EAAAgR,EAAQ+sC,EAAWtzD,MAAE,CAAAuV,EAAAgR,EAAAhR,IAAA,CACzB,IAAI+T,EAAOgqC,CAAM,CAAA/9C,EAAO,MACE,IAApB+T,EAAAzkB,OAAc,EACnBsd,CAAAA,EAAAyxC,WAAA,CAAAtqC,EAAAzkB,OAAA,EAEHsd,EAAA0xC,QAAA,CAAAvqC,EAAAI,CAAA,CAAAJ,EAAAK,CAAA,CAAAL,EAAA/kB,KAAA,CAAA+kB,EAAA/kB,KAAA,CACA,CACF4d,EAAA0gC,OAAA,EAEA,EAGoBiO,QACd,UAAW,CACf,IAA0Bv7C,EAAA89C,EAAtBlxC,EAAA,IAAS,CAAAlZ,MAAQ,CAAA2+C,UAAK,CAIiC,IACzDryC,EAHEitC,SAAC,MAAAx0C,KAAkB,CAEvB,IAAK,CAAAwhD,iBAAkB,CAACrtC,GACtB5M,EAAI,EAAC89C,EAAO,IAAK,CAAAJ,WAAY,CAAEjzD,MAAA,CAAAuV,EAAA89C,EAAA99C,IACjC,KAAAkwC,MAAA,MAAAwN,WAAA,CAAA19C,EAAA,EAEF4M,EAAA0gC,OAAA,EAEA,EAGiCqQ,cAC1B,SAAgBtW,CAAK,EAE1B,IAAI,CAAAuW,gBAAa,GAAS,CAE1B,IAAKzpC,EAAAC,EAAIplB,EAA0BgR,EAAnB68C,EAAK,IAAS,CAAA7tD,KAAK,OAEjCgR,EAAI,EAAAA,EAAO,IAAI,CAACq9C,OAAA,CAAAr9C,IAAa,CAC7BmU,EAAIpkB,GAAOwa,IAAI,CAACkJ,YAAY,CAAC4zB,EAAQlzB,CAAC,CAAG0oC,EAAQxV,EAAQlzB,CAAC,CAAG0oC,GAE7DzoC,EAAIrkB,GAAKwa,IAAA,CAAAkJ,YAAkB,CAAA4zB,EAAAjzB,CAAA,CAAAyoC,EAAAxV,EAAAjzB,CAAA,CAAAyoC,GAGvB7tD,EAFF,KAAAuuD,gBAAoB,CAEVxtD,GAAIwa,IAAK,CAAAkJ,YAAe,CAEpCP,KACKxkB,GAAA,QAAA4uD,QAAA,MAAAC,gBAAA,OAAAD,QAAA,MAAAC,gBAAA,EAEJ,KAAAD,QAAA,CAGD,IAAAvpC,EAAW,IAAGhkB,GAAAmkB,KAAA,CAAAC,EAAAC,EAEdL,CAAAA,EAAI/kB,KAAK,CAAAA,EACP,KAAAwuD,aAAgB,EACjBzpC,CAAAA,EAAAzkB,OAAA,CAAAS,GAAAwa,IAAA,CAAAkJ,YAAA,aAGH,KAAAmqC,gBAAA,CAAAp4D,IAAA,CAAAuuB,EAEA,CACF,KAAA2pC,WAAA,CAAAl4D,IAAA,MAAAo4D,gBAAA,CACF,CACA,GAOE7tD,GAAAwuD,YAAe,CAAAxuD,GAAWwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA4qD,WAAA,EAAA6D,cAEpB,UACA,CAIJ,IAAoCC,EAAS1uD,GAAWwa,IAAA,CAAAwQ,mBAAA,GAAA2jC,EAAAD,EAAA5xC,UAAA,OAS1D,OAPE4xC,EAAWzvD,KAAA,CAASyvD,EAAaxvD,MAAA,CAAAquD,GACjCoB,EAAWzR,SAAS,MAAAx0C,KAAA,CACpBimD,EAAWtR,SAAI,GACfsR,EAAWrR,GAAA,CAAAiQ,GAASA,GAAAA,GAAA,EAAApqC,EAAAA,KAAAC,EAAA,KACpBurC,EAAW9H,SAAI,GAEf8H,EAAOjuC,IAAA,GACTguC,CAEA,EAAkCE,sBACb,WACrB,OAAAC,OAAA,KAAAJ,aAAA,EAAAzmD,OAAA,uBAAAU,KAAA,KAEA,EAI0BomD,WACjB,SAAIjyC,CAAA,CAAa,CAC1B,OAAAA,EAAAkyC,aAAA,MAAAlsC,MAAA,OAAA4rC,aAAA,YAEA,EAI+B5K,gBACd,SAAAhnC,CAAA,EACf,IAAI,CAAA6f,SAAA,CAAW,kBAAmB7f,GACpCA,EAAAsgC,WAAA,MAAA2R,UAAA,CAAAjyC,EAEA,EAG+BqvC,WACzB,SAAYn4B,CAAU,EAG1B,IAAAtJ,EAAW,IAAG,CAAAiS,SAAW,cAAQ3I,GAAAi7B,EAAAvkC,EAAAwkC,iBAAA,GAAAloB,SAAA,CAAAtc,EAAArV,WAAA,IAMnC,OANmCqV,EAC/BkF,MAAA,CAAQ,IAAK3vB,GAAM8iB,OAAS,EAC5BD,OAAA,IAAU,CAAAA,MAAS,OAAA+rC,qBAAA,GACnBxW,QAAS,CAAC4W,EAAQ5qC,CAAC,CACrBi0B,QAAA,CAAA2W,EAAA3qC,CAAA,GAEFoG,CACF,CACC,GAAW,UAEN,CAIJ,IAAA6S,EAAAt9B,GAAAwa,IAAA,CAAA8iB,UAAA,CAAA/jB,EAAAvZ,GAAAwa,IAAA,CAAAjB,gBAAA,CAAAukB,EAAA99B,GAAAwa,IAAA,CAAAsjB,YAAA,CAoxCsC,IACpC,IAAI3c,KA9uC6FnhB,GAEjGqT,MAAA,CAAArT,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAAogD,YAAA,EAMkCrjB,WAChC,SAAYoC,CAAA,CAAA7kC,CAAY,EACxBA,GAAKA,CAAAA,EAAA,IACL,IAAI,CAACgmD,mBAAA,CAAqB,IAAG,CAAAC,cAAK,CAAAz5C,IAAiB,KAAK,EACxD,IAAI,CAAC05C,qBAAgB,MAAAj6C,gBAAA,CAAAO,IAAA,OACrB,IAAI,CAAC25C,WAAA,CAAAthB,EAAgB7kC,GACrB,IAAI,CAAC40D,gBAAA,GACP,KAAAC,kBAAA,EAEA,EASAvY,eAAA,GAcAD,YAAA,WASAyY,gBAAA,GASAC,iBAAA,GAWAC,YAAA,SAWAjV,aAAA,WAOAqH,YAAA,GAOA6N,UAAA,GAYAC,aAAA,WAcAC,gBAAA,KAOAC,eAAA,2BAOAC,mBAAA,GAOAC,qBAAA,2BAOAC,mBAAA,EAOAC,wBAAA,GAOAz5C,YAAA,OAOAC,WAAA,OAOAy5C,cAAA,UAOAC,kBAAA,YAQAC,iBAAA,cAOAC,eAAA,mBAOA76C,mBAAA,GAOAE,oBAAA,EAWA46C,eAAA,GAUA72D,cAAA,GAQAgc,uBAAA,GAQAulC,UAAA,EASAC,cAAA,KAQAsV,gBAAA,GAQAC,eAAA,GAQAC,gBAAA,GAMAC,QAAA,GAOAC,oBAAA,GAOAC,eAAA,KAOAC,gBAAA,GAG6BxB,iBACtB,UAAoB,CACzB,IAAI,CAACyB,iBAAiB,KAAI,CAC1B,IAAI,CAACC,cAAA,KAAmB,CACxB,IAAI,CAACC,mBAAkB,GACvB,IAAI,CAACC,kBAAA,GAEL,IAAI,CAACC,mBAAkB,GAEvB,IAAI,CAACpP,kBAAgB,GAErB,IAAI,CAACl5C,gBAAU,CAAAzI,GAAA4qD,WAAA,MAAA5qD,GAAA4qD,WAAA,OACjB,KAAA10C,UAAA,EAEA,EAKmC86C,uBACb,UAAK,CAGzB,IAAsCn2D,EAAAo2D,EAAwBC,EAA1DC,EAAc,IAAM,CAAA9qD,gBAAc,GAAwB,GAC5D8qD,EAAAz2D,MAAiB,UAAA4a,sBAAA,EACjB27C,EAAA,GACAC,EAAgB,GAAgD,IAC9D,IAAAjhD,EAAA,EAASvV,EAAK,IAAS,CAAE+J,QAAA,CAAA/J,MAAA,CAAAuV,EAAAvV,EAAAuV,IACzBpV,EAAI,KAAA4J,QAAc,CAAAwL,EAAO,CACvBkhD,KAAAA,EAAa3wC,OAAK,CAAA3lB,GACpBo2D,EACKx7D,IAAA,CAAAoF,GAEJq2D,EAAAz7D,IAAA,CAAAoF,EAGDs2D,CAAAA,EAAKz2D,MAAc,IACpB,MAAAypD,aAAA,CAAA1/C,QAAA,CAAAysD,CAAA,EAEHD,EACKx7D,IAAA,CAAAorB,KAAA,CAAAowC,EAAAC,EAAA,MAEJD,EAAA,KAAAxsD,QAAA,CAEH,OAAAwsD,CAEA,EAKuB18C,UACjB,UAAK,EACP,IAAI,CAAC68C,eAAa,EAAK,KAAAR,cAAU,OAAAt3D,aAAA,GACjC,IAAI,CAAC0rD,YAAA,KAAe,CAAG1C,UAAK,EAC7B,KAAA8O,eAAA,KAEC,IAAI,CAAC3N,cAAc,GACnB,IAAI,CAAC4N,cAAc,KAAG,CAAA/O,UAAK,EAC5B,KAAAmB,cAAA,KAED,IAAI4B,EAAc,KAAAjD,gBAAqB,CAEzC,OADE,KAAAkD,YAAW,CAAAD,EAAA,KAAA2L,sBAAA,IACb,MAE8BK,eACpB,SAAAx0C,CAAA,EACRA,EAAIogC,IAAI,GACN,IAAI,CAAC3jD,aAAA,EAAgB,IAAI,CAAAsqD,mBAAqB,GAC9C,IAAI,CAACn7C,gBAAe,EAAG,IAAI,CAAAA,gBAAA,CAAA+iD,OAAA,GAC5B,KAAA4F,eAAA,KAGC,IAAI,CAAC7B,SAAA,MAAe,CAAAqB,cAAA,GACpB,IAAI,CAACU,cAAA,CAAez0C,GACrB,KAAAu0C,eAAA,KAEHv0C,EAAA0gC,OAAA,EAEA,EAMuBgU,UACjB,UAAW,CACf,IAAI10C,EAAC,KAAAylC,UAAa,CAIpB,OAHE,IAAI,CAAC0C,YAAA,CAAAnoC,GACL,IAAI,CAACw0C,cAAK,CAAAx0C,GACV,KAAAkE,IAAO,iBACT,MAK8CywC,kBAC7B,SAAA32D,CAAA,CAAAy8C,CACX,EAEJ,IAAAtmB,EAAOn2B,EAAOw0B,mBAAoB,GAAAoiC,EAAYzxD,GAAAwa,IAAA,CAAA4M,eAAA,CAAA4J,GAAA0gC,EAAA,KAAAC,iBAAA,CAAAra,GAChD,OAAAt3C,GAAAwa,IAAA,CAAAE,cAAA,CAAAg3C,EAAAD,EAEA,EAO6CG,oBAC3C,SAAA52D,CAAA,CAAAopB,CAAA,CAAAC,CAAA,EAEkF,GAChFrpB,EAAI6qD,WAAA,IAAoB7qD,EAAKsrD,YAAA,EAAkBtrD,IAAQ,KAAAmpD,aAAA,MAAC0N,EAAG,KAAAL,iBAAA,CAAAx2D,EAAA,CAAGopB,EAAGA,EAC7DC,EAAAA,CAGJ,GAAIytC,EAAgB3uC,KAAOxkB,GAAA,CAAI3D,EAACurD,iBACvB,CAAAsL,EAAoBztC,CAAA,CAAMppB,EAAAorD,KAAA,IAAkB2L,EAAW5uC,KAAAxkB,GAAA,CAAA3D,EAAuBwrD,iBAAA,CAAmBqL,EAAAxtC,CAAA,CAAArpB,EAAAqrD,KAAA,IAE1G55B,EAAOzsB,GAAAwa,IAAA,CAAAiS,aAAA,CAAAzxB,EAAAg3D,aAAA,CAAA7uC,KAAArI,KAAA,CAAAg3C,GAAA3uC,KAAArI,KAAA,CAAAi3C,GAAA,KAAAx8C,mBAAA,EACR,OAAAkX,CAED,KAGA5P,EAAO,KAAAo1C,YAAA,CAAAC,EAA2Bl3D,EAAAm3D,wBAAA,CAAA7tC,EAAA,KAAA28B,iBAAA,CAElCjmD,EAAKm3D,wBAAa,IAElB,IAAI,CAAAnN,YAAI,CAAAnoC,GACRA,EAAIogC,IAAA,GACJpgC,EAAAgK,SAAa,CAACvC,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACdtpB,EAAImlD,MAAO,CAAAtjC,GAEXA,EAAA0gC,OAAO,GAEPviD,EAAIm3D,wBAA2B,CAACD,EAGhC,IAAAzlC,EAAOzsB,GAAAwa,IAAA,CAAAiS,aAAA,CAAA5P,EAAAuH,EAAAC,EAAA,KAAA9O,mBAAA,EACT,OAAAkX,CAEA,EAKoC2lC,uBAC9B,SAAsBxrD,CAAA,CAAK,CAUjC,OAPI9H,MAAAC,OAAA,MAAAywD,YAA6B,EAAoD,MAAI,CAAAA,YAAA,CAAAr/C,IAAA,UAAA3F,CAAA,EAAE,MAAA5D,CAAA,IAAAA,CAAA,CAAA4D,EAAA,GAIxF5D,CAAA,MAAA4oD,YAAA,GAUyC6C,sBACtC,SAAqBzrD,CAAA,CAAA5L,CAAA,EAGzB,IAAAm2D,EAGG,KAAA9qD,gBACC,GACA69C,EAAc,IAAM,CAAAC,aACpB,CAWN,OAAAnpD,GAAAA,GAAAkpD,GAAAiN,EAAAz2D,MAAA,IAAAy2D,KAAAA,EAAA3wC,OAAA,CAAAxlB,IAAAkpD,IAAAlpD,GAAA,MAAAo3D,sBAAA,CAAAxrD,IAAA5L,GAAA,CAAAA,EAAAgL,OAAA,EAAAhL,GAAA,CAAAA,EAAAob,UAAA,EAAA8tC,GAAAA,IAAAlpD,CAEA,EAU0Ds3D,uBAC3C,SAAAt3D,CAAA,CAAAu3D,CAAA,CAAA9nD,CAAA,MAMT+nD,EANS,GACXx3D,EAaJ,MAPIu3D,UAAAA,GAAsBA,WAAAA,GAAoBA,WAAAA,GAAsBA,aAAAA,EAClEC,EACoB,KAAApD,eAAU,EAAAp0D,EAAAo0D,eAAA,CACV,WAAlBmD,GACDC,CAAAA,EAAA,KAAAnD,gBAAA,EAAAr0D,EAAAq0D,gBAAA,EAGHmD,EAAA,CAAA/nD,EAAAA,CAAA,EAM+CgoD,qBAChC,SAAAz3D,CAAA,CAAA+8C,CAAA,MACX9zB,EAAG,CACHG,EAAGppB,EAAO87C,OAAO,CACnBzyB,EAAArpB,EAAA+7C,OAAA,EAgBF,MAbIgB,OAAAA,GAAWA,OAAAA,GAAAA,OAAAA,EACb9zB,EACSG,CAAA,SACA2zB,CAAAA,OAAAA,GAAIA,OAAAA,GAAAA,OAAAA,CAAA,GACZ9zB,CAAAA,EAAAG,CAAA,SAGC2zB,OAAAA,GAAWA,OAAAA,GAAAA,OAAAA,EACb9zB,EACSI,CAAA,UACA0zB,CAAAA,OAAAA,GAAIA,OAAAA,GAAAA,OAAAA,CAAA,GACZ9zB,CAAAA,EAAAI,CAAA,QAEHJ,CAEA,EAOmEyuC,qBACjD,SAAAC,CAAiB,CAAA5a,CAAA,CAAAnxC,CAAA,CAAA5L,CAAA,KAC/B,CAAA+8C,GAAO,CAAA4a,EACR,YACD,CACA,IAAAvc,EAAOp7C,EAAQqf,QAAc,CAAA09B,EAAG,CAClC,OAAA3B,EAAAoI,aAAA,CAAA53C,EAAAwvC,EAAAp7C,EAEA,EAK8D43D,uBAC/C,SAAAhsD,CAAA,CAAA5L,CAAA,CAAA23D,CAAA,KACX33D,GAUc,IACVs8C,EAAQ,KAAAha,UAAA,CAAA12B,GAAAmxC,EAAA/8C,EAAA63D,QAAA,CAAAzc,EAAAp7C,EAAAqf,QAAA,CAAA09B,EAAA,CAAAP,EAAAmb,GAAA5a,EAAA3B,EAAAgI,gBAAA,CAAAx3C,EAAA5L,EAAAo7C,GAAAp2C,GAAAw8C,aAAA,CAAAT,WAAA,CAAAwW,EAAA,KAAAG,oBAAA,CAAAC,EAAA5a,EAAAnxC,EAAA5L,GAAAipB,EAAA,KAAAwuC,oBAAA,CAAAz3D,EAAA+8C,GAAAttC,EAAA7D,CAAA,MAAA0oD,WAAA,EAAAzoC,EAAA,CACR7rB,OAAQA,EACRu3D,OAAAA,EACA/a,cAAQA,EACRO,OAAQA,EACR9yC,OAAQjK,EAAOiK,MAAM,CACrBC,OAAOlK,EAAOkK,MAAK,CACnBumB,MAAOzwB,EAAOywB,KAAK,CACnBC,MAAA1wB,EAAA0wB,KAAA,CAEA0sB,QAASd,EAAQlzB,CAAC,CAAGppB,EAAO+K,IAAG,CAC/BsyC,QAASf,EAAQjzB,CAAA,CAAArpB,EAAA8K,GAAA,CACjBgxC,QAAS7yB,EAAOG,CAAC,CACjB2yB,QAAI9yB,EAASI,CAAA,CACbq2B,GAAIpD,EAAQlzB,CAAC,CACbq2B,GAAAnD,EAAOjzB,CAAA,CACPyuC,MAAOxb,EAAQlzB,CAAC,CAChB2uC,MAAAzb,EAAAjzB,CAAA,CAIAyH,MAAAvS,EAAgBve,EAAAsoB,KAAA,EAEhBrkB,MAAAjE,EAAYiE,KAAA,CAAQjE,EAAAiK,MAAA,CACpByF,SAAQ9D,EAAA8D,QAAA,CACRD,OAAAA,EACFovC,SAAA75C,GAAAwa,IAAA,CAAAgS,mBAAA,CAAAxxB,EAEJ,EACE,KAAAs3D,sBAAoB,CAAAt3D,EAAAu3D,EAAA9nD,KACpBoc,EAAUiwB,OAAO,CAAG,SACrBjwB,EAAAkwB,OAAA,WAEDlwB,EAAUgzB,QAAQ,CAAC/C,OAAO,CAAG7yB,EAAOG,CAAC,CACrCyC,EAAKgzB,QAAA,CAAA9C,OAAoB,CAAA9yB,EAAAI,CAAA,CACzB,IAAI,CAACssC,iBAAiB,CAAA9pC,EACxB,KAAAmsC,gBAAA,CAAApsD,GA5CE,EAmD0BqsD,UACrB,SAAAh4D,CAAc,EACrB,KAAAonD,aAAA,CAAAnlD,KAAA,CAAAg2D,MAAA,CAAAj4D,CAEA,EAI+Bq2D,eACzB,SAAgBz0C,CAAA,EAWpB,IAAIs2C,EAAK,KAAAvC,cAAgB,CAAAwC,EAAA,IAAApzD,GAAAmkB,KAAA,CAAAgvC,EAAAzY,EAAA,CAAAyY,EAAA1Y,EAAA,EAAAjqB,EAAAxwB,GAAAwa,IAAA,CAAAE,cAAA,CAAA04C,EAAA,KAAAnS,iBAAA,EAAAoS,EAAA,IAAArzD,GAAAmkB,KAAA,CAAAgvC,EAAAzY,EAAA,CAAAyY,EAAAptD,IAAA,CAAAotD,EAAA1Y,EAAA,CAAA0Y,EAAArtD,GAAA,EAAAwtD,EAAAtzD,GAAAwa,IAAA,CAAAE,cAAA,CAAA24C,EAAA,KAAApS,iBAAA,EAAAl6B,EAAA5D,KAAAzkB,GAAA,CAAA8xB,EAAApM,CAAA,CAAAkvC,EAAAlvC,CAAA,EAAA8C,EAAA/D,KAAAzkB,GAAA,CAAA8xB,EAAAnM,CAAA,CAAAivC,EAAAjvC,CAAA,EAAA2C,EAAA7D,KAAAxkB,GAAA,CAAA6xB,EAAApM,CAAA,CAAAkvC,EAAAlvC,CAAA,EAAA+C,EAAAhE,KAAAxkB,GAAA,CAAA6xB,EAAAnM,CAAA,CAAAivC,EAAAjvC,CAAA,EAAAkvC,EAAA,KAAA1D,kBAAA,EACvB,KAAI,CAAAH,cAAY,GAChB7yC,EAAIqgC,SAAS,KAAM,CAAAwS,cAAa,CACjC7yC,EAAA0xC,QAAA,CAAAxnC,EAAAG,EAAAF,EAAAD,EAAAI,EAAAD,IAGC,KAAA2oC,kBAAA,OAAAD,oBAAA,GAGF/yC,EAAIugC,SAAA,CAAW,IAAG,CAAAyS,kBAAK,CAEvBhzC,EAAAsgC,WAAQ,MAAAyS,oBAAA,CACR7oC,GAAQwsC,EACRrsC,GAAQqsC,EACRvsC,GAAQusC,EACRpsC,GAAAosC,EAEAvzD,GAAI6U,MAAA,CAAUC,SAAO,CAAA0+C,YAAa,CAAAtyC,IAAM,MAAOrE,EAAA,KAAA8yC,kBAAA,EACjD9yC,EAAA8gC,UAAA,CAAA52B,EAAAG,EAAAF,EAAAD,EAAAI,EAAAD,GAEA,EASoCusC,WAC1B,SAAC7sD,CAAA,CAAA8sD,CAAgB,MACvB,KAAAvD,cAAA,EAWF,IAA4CwD,EAAAC,EAA5Ctc,EAAA,KAAAha,UAA4C,CAAA12B,EAA5C,IAA4Cs9C,EAAA,KAAAC,aAAA,CAAA0P,EAAA,KAAAxtD,gBAAA,GAAAi5C,EAAAxhB,EAAAl3B,GAAAktD,EAAAD,EAAAn5D,MAAA,KAAAg5D,GAAAG,IAAAA,EAAAn5D,MAAA,CAMiC,GAD7E,KAAA61D,OAAA,IAEEuD,GAAO5P,EAAA6P,iBAAA,CAAAzc,EAAAgI,IAE8EuU,EAAAn5D,MAAA,KAAAg5D,GAAAxP,IAAA,KAAA8P,sBAAA,EAAe9P,EAAU,CAAA5M,GAD/G,OAAA4M,CACD,CAI+C,GAAC2P,IAAAA,EAAAn5D,MAAA,EAAAwpD,IAAA,KAAA8P,sBAAA,EAAe9P,EAAU,CAAA5M,GAC9D,CAAyB,GAChC,MAAAhiC,sBAAO,CACT,OACK4uC,CAKN,CAHGyP,EAAAzP,EACA0P,EAAiB,KAAArD,OAAA,CAClB,KAAAA,OAAA,IAEH,IACIv1D,EAAO,KAAAg5D,sBAAoB,CAAU,KAAAvvD,QAAA,CAAA6yC,GAK3C,OAJI1wC,CAAA,MAAA6oD,eAAS,GAAAz0D,GAAA24D,GAAA34D,IAAA24D,IACT34D,EAAK24D,EACN,KAAApD,OAAA,CAAAqD,GAEH54D,EArCE,EA+CkDi5D,aAC9C,SACI3c,CACJ,CAAAp1B,CAAI,CAAAgyC,CACJ,EACA,GAAAhyC,GAAAA,EAAA27B,OAAA,EAAA37B,EAAAlc,OAAA,EAEFkc,EACAiyC,aAAU,CAAA7c,MACR,IAAI,CAAAjiC,kBAAoB,GAAC6M,EAAA7M,kBAAyB,EAAA6M,EAAAkyC,SAAiB,EAEjE,CADkB,KAAAxC,mBAAA,CAAA1vC,EAAAgyC,EAAA9vC,CAAA,CAAA8vC,EAAA7vC,CAAA,GAMrB,QAEL,EASmD2vC,uBACjD,SAAA5tD,CAAA,CAAAkxC,CAAA,EAIY,IAFZ,IAAAt8C,EAAAq5D,EAAApkD,EAAA7J,EAAA1L,MAAA,CAGEuV,KAAI,CACJ,IAAIqkD,EAAAluD,CAAe,CAAA6J,EAAA,CAEfskD,EAAKD,EAAahQ,KAAA,CAAc,KAAAkN,iBAAsB,CAAA8C,EAAAhQ,KAAA,CAAAhN,GAAAA,CAAA,IACxD,KAAA2c,YAAiB,CAAAM,EAAED,EAAAhd,GAAA,CAEjBt8C,CADFA,EAAIoL,CAAO,CAAA6J,EAAA,EACTukD,cAAiB,EAAAx5D,aAAuBgF,GAAO2qB,KAAQ,EACvD0pC,CAAAA,EAAA,IAAa,CAAIL,sBAAc,CAAAh5D,EAAAyJ,QAAA,CAAA6yC,EAAA,GAChC,KAAAiZ,OAAA,CAAA96D,IAAA,CAAA4+D,GAEF,MACH,CAEF,OAAAr5D,CAEA,EAKqC22D,kBACrB,SAAKra,CAAA,CAAc,CAInC,OAAAt3C,GAAAwa,IAAA,CAAAE,cAAA,CAAA48B,EAAAt3C,GAAAwa,IAAA,CAAA4M,eAAA,MAAA65B,iBAAA,EAEA,EAkBqC3jB,WACnC,SAAA12B,CAAA,CAAA6tD,CAAA,EAC0C,GACxC,KAAAC,gBAAY,GAAAD,EACb,YAAAC,gBAAA,CACgC,GAC/B,KAAAC,QAAY,EAAAF,EACb,YAAAE,QAAA,CASD,IAAoCC,EAAhCtd,EAACha,EAAgB12B,GAAAy7C,EAAe,KAAAA,aAAA,CAAA3oB,EAAA2oB,EAAA1gB,qBAAA,GAAAkzB,EAAAn7B,EAAAz6B,KAAA,IAAA61D,EAAAp7B,EAAAx6B,MAAA,IAClC,EAAA21D,GAAa,CAAAC,CAAU,IACrB,QAAAp7B,GAAe,WAAiBA,GACjCo7B,CAAAA,EAAA3xC,KAAAtI,GAAA,CAAA6e,EAAA5zB,GAAA,CAAA4zB,EAAAsc,MAAA,GAEC,UAAAtc,GAAmB,SAAYA,GAChCm7B,CAAAA,EAAA1xC,KAAAtI,GAAA,CAAA6e,EAAAuc,KAAA,CAAAvc,EAAA3zB,IAAA,IAIH,KAAAmQ,UAAY,GACZohC,EAAQlzB,CAAC,CAAGkzB,EAAQlzB,CAAC,CAAG,IAAI,CAACm+B,OAAO,CAACx8C,IAAG,CACxCuxC,EAAKjzB,CAAA,CAAAizB,EAAYjzB,CAAA,MAAAk+B,OAAA,CAAAz8C,GAAA,CACf2uD,GACDnd,CAAAA,EAAA,KAAAqa,iBAAA,CAAAra,EAAA,EAGD,IAAIyd,EAAA,IAAkB,CAAG/S,gBAAA,GAgBlB,OAfQ,IAAb+S,IACAzd,EAAQlzB,CAAC,EAAI2wC,EACdzd,EAAAjzB,CAAA,EAAA0wC,GAIYH,EADXC,IAAAA,GAAAC,IAAAA,EACoB,CAAG71D,MAAA,EAAUC,OAAA,CACnC,EAGW,CACPD,MAAAojD,EAAQpjD,KAAc,CAAM41D,EAC9B31D,OAAAmjD,EAAAnjD,MAAA,CAAA41D,CACD,EAGI,CACH1wC,EAAGkzB,EAAQlzB,CAAC,CAAGwwC,EAAS31D,KAAA,CAC1BolB,EAAAizB,EAAAjzB,CAAA,CAAAuwC,EAAA11D,MAAA,CAGF,EAIgC4xD,mBAC1B,UAAuB,CAG3B,IAAAkE,EAAA,KAAA7S,aAAA,CAAA9mD,SAAA,CAAA2M,OAAA,sBAA+E,IAAAm6C,EAAA,KAAAA,aAAA,CAAAE,EAAA,KAAAA,aAAA,CAE7EA,EACFA,EACKhnD,SAAA,KAEHgnD,EAAK,IAAa,CAAGQ,oBAAA,GACtB,KAAAR,aAAA,CAAAA,GAGDriD,GAAKwa,IAAA,CAAAomB,QAAU,CAAAyhB,EAAY,gBAAA2S,GAE3B,IAAI,CAACjR,SAAA,CAAA76B,WAAiB,CAAAm5B,GACtB,IAAI,CAAC4S,gBAAA,CAAiB9S,EAACE,GACvB,IAAI,CAACU,iBAAa,CAAAV,GACpB,KAAAC,UAAA,CAAAD,EAAAvlC,UAAA,MAEA,EAI2Bo4C,cACd,UAAW,CACxB,YAAA5S,UAAA,EAKgC6M,mBACzB,UAAqB,CAC1B,IAAI,CAACrL,aAAa,CAAC,KAAAjB,oBAA2B,GAC9C,IAAI,CAACiB,aAAa,CAAC1kB,YAAY,CAAC,YAAU,CAAIngC,KAAC,EAC/C,IAAI,CAAC6kD,aAAY,CAAA1kB,YAAQ,UAAc,KAAAlgC,MAAW,EACpD,KAAA+yD,YAAA,MAAAnO,aAAA,CAAAhnC,UAAA,MAEA,EAGiC+zC,oBACd,UAAW,CAAwC,IAClE,CAAA9M,SAAS,CAAI/jD,GAACwa,IAAA,CAAAqmB,WAAc,MAAAshB,aAAA,QAC9B,WAAA+N,cAAA,GACqClwD,GACnCwa,IAAO,CAAA4jB,QAAK,CAAK,IAAG,CAAA2lB,SAAA,EACpB9kD,MAAA,IAAQ,CAAIA,KAAC,CAAM,KACnBC,OAAA,IAAU,CAAAA,MAAA,MACZ+pB,SAAA,UACA,GACFjpB,GAAAwa,IAAA,CAAAwlB,uBAAA,MAAA+jB,SAAA,CAEA,EAIsChB,kBACxB,SAAUxoD,CAAI,EAG1B,IAAA0E,EAAY,KAAAA,KAAS,EAAA1E,EAAS0E,KAAA,CAAAC,EAAA,KAAAA,MAAA,EAAA3E,EAAA2E,MAAA,CAAAc,GAC5Bwa,IAAA,CAAA4jB,QAAU,CAAA7jC,EAAA,CACV0uB,SAAO,WACPhqB,MAAAA,EAAQ,KACRC,OAAMA,EAAA,KACN6G,KAAK,EACLD,IAAA,EACA,mBAAoB,CAAAk7C,mBAAK,gBAAsB,MAAiB,CAClE,wBAAAA,mBAAA,yBAEAzmD,EAAQ0E,KAAA,CAAMA,EACd1E,EAAO2E,MAAK,CAAAA,EACdc,GAAAwa,IAAA,CAAAwlB,uBAAA,CAAAzlC,EAEA,EAM0C06D,iBAC7B,SAAUE,CAAO,CAAAC,CAAM,EACpCA,EAAAl4D,KAAA,CAAAohC,OAAA,CAAA62B,EAAAj4D,KAAA,CAAAohC,OAAA,EAMgC+2B,oBAClB,UAAU,CACxB,YAAA/S,UAAA,EAMiCgT,oBACnB,UAAa,CAC3B,YAAAjT,aAAA,EAM6B79C,gBACf,WACd,YAAA2/C,aAAA,EAM8B99C,iBACf,UAAK,CAClB,IAAIkvD,EAAQ,KAAApR,aAAA,UACgD,oBACxDoR,EAAO/5D,IAAA,EAAsB+5D,EAAA9wD,QAAA,CAE1B8wD,EAAA9wD,QAAA,CAAA0P,KAAA,IACK,CAAOohD,EAChB,CAGL,IAMgC5zC,iBAC9B,SAAAO,CAAA,EAEEA,IAAK,IAAK,CAAAiiC,aAAA,GAA4B,IAAE,CAAApjC,IAAA,4BAAQ,CAAI/lB,OAAAknB,CACpD,GACA,IAAI,CAACszC,oBAAK,GAAqB,IAAE,CAAAz0C,IAAA,qBAAQ,CAAI/lB,OAAAknB,CAC7C,GACDA,EAAAnB,IAAA,gBAECmB,IAAK,KAAAuuC,cAAqB,GAC1B,IAAI,CAACA,cAAA,CAAe,IAAK,CAC1B,KAAAC,eAAA,KAEH,KAAAh0B,SAAA,oBAAAxa,EAEA,EAK8CuzC,qBACxC,SAAmBC,CAAO,CAAA9uD,CAAU,EAExC,IAAA+uD,EAAmB,GAASvvD,EAAW,KAAAC,gBAAA,GAAAuvD,EAAA,GAAAC,EAAA,GAAAH,EACjCxvC,OAAQ,UAAQ4vC,CAAA,CAAe,CACV,KAAvB1vD,EAAAoa,OAAA,CAAAs1C,KACAH,EAAe,GAAcG,EACxB/0C,IAAA,eACHna,EAAAA,EACF5L,OAAA86D,CACA,GACDD,EAAApgE,IAAA,CAAAqgE,GAEH,GAAiC1vD,EAC3B8f,OAAA,UAAWrrB,CAAQ,EACE,KAAvB66D,EAAAl1C,OAAA,CAAmB3lB,KACnB86D,EAAY,GAAY96D,EACnBkmB,IAAA,aACHna,EAAAA,EACF5L,OAAAH,CACA,GACD+6D,EAAAngE,IAAA,CAAAoF,GAEH,GACE66D,EAAAh7D,MAAA,CAAoB,GAAK0L,EAAK1L,MAAA,GAAqBi7D,GAC9C,KAAA50C,IAAA,sBACHna,EAAAA,EACAmvD,SAAAH,EACFI,WAAAH,CACF,GAEOzvD,EAAK1L,MAAA,GAAqB,IAC7B,CAAAqmB,IAAG,sBACHna,EAAAA,EACFmvD,SAAAH,CACF,GAEOF,EAAKh7D,MAAA,IAAqB,IAC7B,CAAAqmB,IAAG,sBACHna,EAAAA,EACFovD,WAAAH,CACD,EAGH,EAOsCrwD,gBAChC,SAAiB3K,CAAK,CAAA+L,CAAA,EAC1B,IAAIqvD,EAAiB,IAAC,CAAA5vD,gBAAQ,GAGhC,OAFE,IAAI,CAAC6vD,gBAAA,CAAAr7D,EAAqB+L,GAC1B,KAAA6uD,oBAAW,CAAAQ,EAAArvD,GACb,MAYsCsvD,iBAC3B,SAAar7D,CAAK,CAAA+L,CAAA,QAAQ,EACjC,KAAAu9C,aAAY,GAAAtpD,GAGZ,MAAA26D,oBAAY,CAAA5uD,EAAA/L,IAEQA,EAAGs7D,QAAA,EAAMvvD,EAAAA,CAAA,MAI/B,KAAAu9C,aAAW,CAAAtpD,EACb,GAEA,EAU0C26D,qBACzB,SAAA5uD,CAAa,CAAA/L,CAAA,EAC5B,IAAIqnB,EAAK,KAAAiiC,aAAA,IACPjiC,EAAA,CACmB,GAAEA,EAAGk0C,UAAA,EAAGxvD,EAAAA,EAAmB/L,OAAAA,CAAA,GAE7C,QACD,CACD,KAAAspD,aAAA,MACD,MACF,EAEA,EASkCh+C,oBAC5B,SAAsBS,CAAA,EAC1B,IAAIqvD,EAAe,IAAM,CAAA5vD,gBAAE,GAAA69C,EAAA,KAAA1/C,eAAA,GAM7B,OALIyxD,EAAUv7D,MAAA,EAA4B,IAAE,CAAAqmB,IAAA,4BAAQ,CAAc/lB,OAAGkpD,EAAEt9C,EAAAA,CACpE,GAED,IAAI,CAAC4uD,oBAAoB,CAAC5uD,GAC1B,KAAA6uD,oBAAW,CAAAQ,EAAArvD,GACb,MAOqBqP,QACf,UAAU,CACd,IAAI6qB,EAAC,KAAAijB,SAAe,CAetB,OAdE,KAAAsS,eAAoB,GACpBv1B,EAAQ1X,WAAW,CAAC,IAAI,CAACi5B,aAAa,EACtCvhB,EAAK1X,WAAY,CAAG,IAAI,CAAA+4B,aAAA,EACxB,IAAI,CAAC8P,YAAU,CAAG,IAAI,CACtB,KAAA3P,UAAA,OAAkB,gBAAiB,gBAA2B,CAAAp8B,OAC5D,EAAO,SAAK3rB,CAAA,EACZyF,GAAKwa,IAAA,CAAA0nB,gBAAW,MAAA3nC,EAAA,EACf,IAAK,CAAAA,EAAI,CAAA8C,KAAAA,CACZ,GAAAyJ,IAAI,KAAQ,GACVg6B,EAAQ50B,UAAU,EACnB40B,EAAA50B,UAAA,CAAA60B,YAAA,MAAAohB,aAAA,MAAA4B,SAAA,EAED,OAAO,KAAAA,SAAa,CACpB/jD,GAAOogD,YAAI,CAAAtrC,SAAA,CAAAmB,OAAA,CAAAiL,IAAA,OACb,MAOmB7M,MACjB,WAIF,OAFE,IAAI,CAAClO,mBAAkB,GACvB,KAAA6+C,YAAY,KAAU,CAAA1C,UAAA,EACxB,KAAA5lB,SAAA,SAEA,EAI4BkpB,aACtB,SAAe/oC,CAAA,CAAK,CAExB,IAAIqnC,EAAc,KAAAC,aAAA,CAChBD,GACDA,EAAAoS,eAAA,CAAAz5C,EAGH,EAG+D1B,UAC7D,SAAAwnC,CAAA,CAAAhmB,CAAA,CAAAgrB,CAAA,EAMA,IAAA4O,EAAA,KAAAC,8BAA0D,CAAA7T,GAAA9nD,EAAA,KAAA6hC,SAAA,aAAAimB,EAAAhmB,EAAAgrB,GAG5D,OADE,KAAA8O,6BAAO,CAAA9T,EAAA4T,GACT17D,CAEA,EAMmD27D,+BAC3B,SAAe7T,CAAI,CAAK,CAA4D,GACxGA,CAAAA,EAAI2B,KAAA,EAAc3B,oBAAAA,EAAA2B,KAAA,CAAA9oD,IAAA,OAAA2oD,aAAA,GAAAxB,EAAA2B,KAAA,CAWnB,YARC,IAAAoS,EAAoB,GAKtB,MALqCC,CAHP,QAAS,QAAS,QAAQ,OAAU,SAAU,SAAS,QAAS,QAAM,MAClG,CAGEzwC,OAAe,UAAQ/E,CAAA,CAAQ,CACjCu1C,CAAA,CAAAv1C,EAAA,CAAAwhC,CAAA,CAAAxhC,EAAA,GAEAnhB,GAAOwa,IAAA,CAAAkU,oBAAA,CAAAi0B,EAAA,KAAAwB,aAAA,CAAA31B,aAAA,IAEJkoC,CAKP,EAMkED,8BAC5C,SAAA9T,CAAA,CAAA+T,CAAA,EAClBA,GACD/T,EAAA98C,GAAA,CAAA6wD,EAGH,EAGmDE,cACjD,SAAAC,CAAA,CAAAlU,CAAA,CAAAr5B,CAAA,EAGA,IAAIitC,EAAW,KAAAC,8BAAmC,CAAA7T,GAClD,IAAI,CAACjmB,SAAA,iBAAAm6B,EAA8BlU,EAAUr5B,GAC/C,KAAAmtC,6BAAA,CAAA9T,EAAA4T,EAEA,EAAqCvS,qBAC1B,SAAiBC,CAAI,EAC5B,IAAI,CAAC7vC,iBAAc,OAAA+vC,aAAe,OAAAA,aAAA,CAAAiQ,SAAA,EACnC,KAAAjQ,aAAA,CAAA2S,eAAA,GAEH92D,GAAAogD,YAAA,CAAAtrC,SAAA,CAAAkvC,oBAAA,CAAA9iC,IAAA,MAAA+iC,EACF,CAEA,GAGMjkD,GAASogD,YAAa,CACjB,cAAPj/B,GACDnhB,CAAAA,GAAAqT,MAAA,CAAA8N,EAAA,CAAAnhB,GAAAogD,YAAA,CAAAj/B,EAAA,CAGJ,IAAW,UAEN,CAGkB,IAAEgc,EAAcn9B,GAAAwa,IAAA,CAAA2iB,WAAA,CAAAC,EAAAp9B,GAAAwa,IAAA,CAAA4iB,cAAA,CAAA25B,EAAA,CAACC,QAAA,EAEvC,EAA8B,SAC5BC,EAAerwD,CAAA,CAAK3L,CAAE,EACxB,OAAA2L,EAAAswD,MAAA,EAAAtwD,EAAAswD,MAAA,GAAAj8D,EAAA,CAEA,CAAyF+E,GAEvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAqT,MAAA,CAAAyB,SAAA,EAOAqiD,YAAA,KAIiCpG,oBAC/B,WAIA,IAAI,CAACsF,eAAW,GAChB,IAAI,CAACe,WAAW,GAClB,KAAAC,WAAA,CAAAl6B,EAAA,MAEA,EAI6Bm6B,gBACf,WACd,YAAA9G,mBAAA,oBAE+C6G,YACzC,SAAAE,CAAqB,CAAAC,CACrB,EACJ,IAAAC,EAAe,IAAQ,CAAApV,aAAe,CAAAqV,EAAS,KAAAJ,eAAA,GAC/CC,EAAQv3D,GAAAnK,MAAA,CAAe,cAAA8hE,SAAkB,EACzCJ,EAAQE,EAAeC,EAAkB,OAAQ,IAAI,CAACE,YAAY,EAClEL,EAAQE,EAAeC,EAAkB,OAAO,IAAK,CAAAG,YAAW,CAAAd,GAChEQ,EAAQE,EAAeC,EAAkB,UAAS,CAAAI,WAAK,EACvDP,EAAQE,EAAeC,EAAc,QAAa,KAAAK,aAAA,EAClDR,EAAQE,EAAe,aAAAO,aAAoB,EAC3CT,EAAQE,EAAe,cAAY,IAAK,CAAAQ,cAAc,EACtDV,EAAQE,EAAe,WAAY,IAAI,CAACS,cAAW,EACnDX,EAAQE,EAAe,eAAa,CAAIU,WAAC,EACzCZ,EAAQE,EAAe,YAAa,IAAI,CAACW,YAAY,EACrDb,EAAQE,EAAe,YAAa,KAAAY,YAAO,EAC3Cd,EAAKE,EAAK,OAAqB,KAAAa,OAAA,EAC7B,KAAA9H,mBAAuB,EACxB+G,EAAAE,EAAA,kBAAAc,aAAA,CAAAxB,GAES,aAAR,OAAOyB,SAAiBhB,KAA0BgB,UAClDA,OAAO,CAAChB,EAAe,CAACC,EAAe,UAAQ,IAAK,CAAAgB,UAAO,EAC3DD,OAAO,CAAChB,EAAe,CAACC,EAAe,YAAAiB,OAAoB,EAC3DF,OAAO,CAAChB,EAAe,CAACC,EAAe,cAAc,KAAAkB,oBAAQ,EAC7DH,OAAO,CAAChB,EAAe,CAACC,EAAe,YAAa,CAAAmB,QAAK,EAC1DJ,OAAA,CAAAhB,EAAA,CAAAC,EAAA,iBAAAoB,YAAA,EAGH,EAG4BxC,gBACrB,UAAY,CACjB,KAAAgB,WAAA,CAAAj6B,EAAA,UAEA,IAAAs6B,EAAsB,KAAAJ,eAAU,GAChCl6B,EAAep9B,GAAOwb,QAAQ,CAAEk8C,EAAiB,SAAW,CAAAoB,UAAE,EAC9D17B,EAAep9B,GAAOwb,QAAQ,CAAE,gBAAAu9C,WAA0B,CAAIhC,GAC9D35B,EAAep9B,GAAOwb,QAAQ,CAAEk8C,EAAkB,WAAY,CAAAG,YAAE,CAAAd,GAClE35B,EAAAp9B,GAAAwb,QAAA,kBAAAq8C,YAAA,CAAAd,EAEA,EAGwBK,YACb,UAAW,CAClB,KAAA4B,WAAA,GAIF,IAAI,CAACpB,YAAA,CAAa,IAAG,CAAIA,YAAC,CAAA9wD,IAAc,KAAK,EAC7C,IAAI,CAACyxD,aAAY,CAAG,IAAK,CAAAA,aAAa,CAAAzxD,IAAK,KAAI,EAC/C,IAAI,CAAC+wD,YAAU,CAAG,IAAK,CAAAA,YAAW,CAAI/wD,IAAC,CAAI,MAC3C,IAAI,CAACgyD,UAAA,CAAW,IAAG,CAAIA,UAAC,CAAAhyD,IAAY,KAAK,EACzC,IAAI,CAACiyD,WAAS,CAAG,IAAK,CAAAA,WAAU,CAAIjyD,IAAC,CAAI,MACzC,IAAI,CAAC6wD,SAAA,CAAU,IAAG,CAAIA,SAAC,CAAA7wD,IAAW,KAAK,EACvC,IAAI,CAAC2xD,UAAU,KAAK,CAAAA,UAAa,CAAA3xD,IAAI,OACrC,IAAI,CAAC4xD,OAAA,CAAQ,IAAG,CAAIA,OAAC,CAAA5xD,IAAS,KAAK,EACnC,IAAI,CAAC8xD,QAAA,KAAe,CAAAA,QAAK,CAAA9xD,IAAA,KAAa,EACtC,IAAI,CAAC+xD,YAAA,MAAoBA,YAAQ,CAAA/xD,IAAA,OACjC,IAAI,CAAC6xD,oBAAoB,CAAC,KAAAA,oBAAuB,CAAA7xD,IAAA,OACjD,IAAI,CAACkxD,aAAW,CAAG,IAAK,CAAAA,aAAY,CAAIlxD,IAAC,CAAI,MAC7C,IAAI,CAACgxD,WAAA,CAAa,IAAG,CAAAA,WAAK,CAAAhxD,IAAc,KAAK,EAC7C,IAAI,CAACixD,aAAA,CAAc,IAAG,CAAIA,aAAC,CAAAjxD,IAAe,KAAK,EAC/C,IAAI,CAACmxD,cAAc,CAAG,IAAI,CAACA,cAAc,CAACnxD,IAAI,CAAC,IAAI,EACnD,IAAI,CAACoxD,cAAc,KAAK,CAAAA,cAAiB,CAAApxD,IAAI,OAC7C,IAAI,CAACqxD,WAAA,CAAY,IAAG,CAAIA,WAAC,CAAArxD,IAAA,KAAoB,EAC7C,IAAI,CAACsxD,YAAY,CAAG,IAAI,CAACa,mBAAmB,CAACnyD,IAAI,CAAC,IAAI,CAAE,aACxD,IAAI,CAACuxD,YAAU,CAAK,KAAAY,mBAAiB,CAAAnyD,IAAA,mBACrC,IAAI,CAACwxD,OAAA,KAAc,CAAAA,OAAI,CAAAxxD,IAAA,OACzB,KAAAkyD,WAAA,IAEA,EAK8BP,WACvB,SAAA7xD,CAAA,CAAApR,CAAA,CAAoB,CAC3B,KAAA0jE,oBAAA,OAAAA,oBAAA,CAAAtyD,EAAApR,EAEA,EAK2BkjE,QACpB,SAAQ9xD,CAAA,CAAIpR,CAAI,CAAC,CACxB,KAAA2jE,QAAA,OAAAA,QAAA,CAAAvyD,EAAApR,EAEA,EAI2BwiE,cACpB,SAAepxD,CAAA,EACtB,KAAAwyD,cAAA,CAAAxyD,EAEA,EAIyBkxD,YACnB,SAAclxD,CAAA,EAClB,IAAI5L,EAAM,KAAAy1D,cAAa,KAAE,CAAA1vC,IAAA,aAAQ,CAAQ/lB,OAAGA,EAAE4L,EAAAA,CAC9C,GACA,KAAA6pD,cAAiB,CAAK,KAAYz1D,GAAKA,EAAA+lB,IAAA,aAAEna,EAAAA,CAEzC,GACA,IAAIi2B,EAAC,KAAyC,IAC5C,CAAA6zB,eAAW,CAAAxqC,OAAa,UAAAmzC,CAAA,EAAAx8B,EAAE9b,IAAA,aAAQ,CAAQ/lB,OAAGA,EAAE4L,EAAAA,CAC/C,GAAmCyyD,GAAKr+D,EAAA+lB,IAAA,aAAEna,EAAAA,CAC5C,EACA,GAEA,IAAI,CAAA8pD,eAAK,GAAe,CACtB,IAAI,CAACtL,eAAe,EAAuB,IACzC,CAAAA,eAAQ,CAASl/B,OAAE,UAAAhE,CAAA,EACjBA,EAAIkyC,SAAA,EACLlyC,EAAAo3C,cAAA,CAAAn+D,KAAA,EAEJ,EAGH,EAI2B48D,cACzB,SAAAnxD,CAAA,EAOE,IAAK,CAAA+pD,iBAAK,EAAc,KAAA8C,UAAA,CAAA7sD,KAAA,IAAE,CAAAma,IAAA,cAAY,CAAE/lB,OAAG,KAAE4L,EAAAA,CAC7C,GACA,IAAI,CAAC6pD,cAAA,CAAe,IAAK,CAC1B,KAAAC,eAAA,IAGH,EAKwCiI,qBACjC,SAAqB/xD,CAAA,CAAIpR,CAAI,CAAC,CACrC,KAAA+jE,qBAAA,OAAAA,qBAAA,CAAA3yD,EAAApR,EAEA,EAK4BojE,SACrB,SAAShyD,CAAA,CAAIpR,CAAI,CAAC,CACzB,KAAAgkE,SAAA,OAAAA,SAAA,CAAA5yD,EAAApR,EAEA,EAKgCqjE,aACzB,SAAajyD,CAAA,CAAIpR,CAAI,CAAC,CAC7B,KAAAikE,aAAA,OAAAA,aAAA,CAAA7yD,EAAApR,EAEA,EAKyB2iE,YACrB,SAAcvxD,CAAA,EAChBA,EAAA4C,cAAa,GACb,IAAIxO,EAAC,KAAAi+D,mBAA8B,YAAAryD,GACrC,KAAA8yD,qBAAA,CAAA1+D,EAAA4L,EAEA,EAOsB0xD,QACf,SAAA1xD,CAAA,EAEP,OADE,KAAAqyD,mBAAY,eAA4BryD,GAC1C,KAAAqyD,mBAAA,QAAAryD,EAEA,EAI6BqxD,eAClB,SAAArxD,CAAA,CAAe,CAK1B,OAJI,IAAE,CAAAwpD,eAAe,GACjBxpD,EAAE+yD,eAAc,GACjB/yD,EAAA4C,cAAA,IAEH,EAEA,EAI6B0uD,eACtB,SAAAtxD,CAAA,EACL,IAAI,CAACgzD,wBAAgB,CAAAhzD,GACrB,IAAI,CAACizD,YAAA,CAAAjzD,EAAA,YACP,KAAAkzD,wBAAA,CAAAlzD,EAEA,EAM4BmzD,aACtB,SAAAC,CAAiB,EAErB,IAAIr8B,EAAgBq8B,EAAAr8B,cAAA,UAEnBA,CAAA,KAAAA,CAAA,IAAAs8B,UAAA,CAGC,KAAAzJ,mBAAoB,CACrBwJ,EAAAE,SAAA,CAGH,EALE,EAY0B7O,aAClB,SAAS2O,CAAK,QAAM,CACf,IAAXA,EAAAG,SAAW,EAGC,KAAZH,EAAAG,SAAY,GAGD,aAAXH,EAAAx+D,IAAO,EAAIw+D,IAAAA,EAAAI,OAAA,CAAA1/D,MAAA,GAGXs/D,EAAAr8B,cAAW,EACZq8B,EAAAr8B,cAAA,IAAAs8B,UAAA,QAAA9C,WAAA,CAIH,EAI2BoB,cACvB,SAAc3xD,CAAA,EAChBA,EAAA4C,cAAS,GACY,IAAK,GAAxB,IAAI,CAAC2tD,WAAW,EACjB,MAAAA,WAAA,MAAA4C,YAAA,CAAAnzD,EAAA,EAED,IAAI,CAACyzD,aAAA,CAAAzzD,GACL,IAAI,CAAAkzD,wBAAqB,GAEzB,IAAArC,EAAmB,KAAApV,aAAU,CAAAqV,EAA4B,IAAE,CAAAJ,eAAA,GAC3Dn6B,EAAYn9B,GAAOwb,QAAQ,CAAE,eAAa,CAAIu9C,WAAC,CAAYhC,GAC3D55B,EAAAn9B,GAAAwb,QAAA,kBAAAq8C,YAAA,CAAAd,GAEF35B,EAAAq6B,EAAAC,EAAA,YAAAE,YAAA,CAEA,EAI2BA,aACpB,SAAchxD,CAAA,EACnB,IAAI,CAACyzD,aAAA,CAAAzzD,GACL,IAAI,CAAAkzD,wBAAqB,GAEzB,IAAArC,EAAe,KAAApV,aAAe,CAAAqV,EAA0B,IAAK,CAAAJ,eAAc,GAC3El6B,EAAYq6B,EAAiBC,EAAkB,OAAM,IAAK,CAAAG,YAAU,CAAAd,GACpE55B,EAAYn9B,GAAOwb,QAAQ,CAAEk8C,EAAkB,SAAQ,CAAAoB,UAAK,EAC9D37B,EAAAn9B,GAAAwb,QAAA,CAAAk8C,EAAA,YAAAG,YAAA,CAAAd,EAEA,EAIyBgC,YACjB,SAAQnyD,CAAA,CAAM,CAAM,IACxBA,CAAAA,EAAAwzD,OAAA,CAAA1/D,MAAA,KAIF,IAAI,CAAC4/D,WAAA,CAAA1zD,GACL,IAAI,CAACkzD,wBAAkB,GACvB,IAAI,CAAA3C,WAAA,KAAkB,CACtB,IAAAO,EAAsB,KAAAJ,eAAU,GAChCl6B,EAAep9B,GAAOwb,QAAQ,CAAE,eAAa,CAAIu9C,WAAC,CAAYhC,GAC9D35B,EAAYp9B,GAAIwb,QAAA,kBAAAq8C,YAAA,CAAAd,GAChB,IAAIl6B,EAAK,KACP,KAAA09B,iBAAkB,EACnB5kD,aAAA,KAAA4kD,iBAAA,EAC8C,IAC7C,CAAAA,iBAAA,CAAA3kD,WAAA,WAGAunB,EAAMN,EAAAwlB,aAAoB,CAAAqV,EAAA,OAAA76B,EAAA+6B,YAAA,EACzB/6B,EAAA09B,iBAAA,EACL,OAhBE,EAsBuBzB,WAClB,SAAYlyD,CAAA,EACjB,IAAI,CAAC0zD,WAAA,CAAA1zD,GACL,IAAI,CAAAkzD,wBAAqB,GAEzB,IAAIrC,EAAK,IAAa,CAAApV,aAAI,CAAAqV,EAAA,KAAAJ,eAAA,GACxB,KAAAjM,YAAe,CAAAzkD,KACfw2B,EAAep9B,GAAOwb,QAAQ,CAAEk8C,EAAkB,SAAQ,CAAAoB,UAAK,EAC/D17B,EAAYp9B,GAAAwb,QAAe,CAAAk8C,EAAkB,OAAa,KAAAG,YAAc,CAAAd,GACzE55B,EAAAs6B,EAAAC,EAAA,YAAAG,YAAA,CAAAd,GAGH,EAI2Bc,aACnB,SAAAjxD,CAAA,EACN,KAAK,CAAAo6C,mBAAc,EAAAp6C,EAAA4C,cAAA,EAAA5C,EAAA4C,cAAA,GACrB,KAAAgxD,aAAA,CAAA5zD,EAEA,EAGuB+wD,UAChB,UAAU,CACjB,KAAAzhD,UAAA,EAEA,EAKgCukD,cAC1B,SAAez/D,CAAK,EAExB,IACEkpD,EAAE,IAAiB,CAACC,aACnB,OACD,CACA,CAAAD,GAAA,EAAAlpD,GAAAkpD,EAAAA,KAAAlpD,GAAAkpD,IAAAlpD,IAKAkpD,GAAAA,EAAAkQ,SAAA,CAKJ,GAEA,EAO0BkG,YACpB,SAAQ1zD,CAAA,EAGZ,IA2CImxC,EAAQT,EA3CRt8C,EAAC6rB,EAAA,KAAwB8pC,iBAAC,CAAA+J,EAAA,KAAA9J,cAAA,CAAA+J,EAAA,GAAAC,EAAA,CAAAF,GAAAA,IAAAA,EAAA30D,IAAA,EAAA20D,IAAAA,EAAA50D,GAAA,CAKE,GAJhC,KAAA8zD,wBAAqB,CAAAhzD,GACrB5L,EAAK,KAAAq+D,OAAgB,CACrB,KAAAQ,YAAA,CAAAjzD,EAAA,aAGEqwD,EAASrwD,EAvauB,GAuaP,CACvB,IAAI,CAACypD,cAAa,EACnB,KAAAwJ,YAAA,CAAAjzD,EAAA,KAza+B,EAya/Bg0D,GAEF,MAED,IACE3D,EAASrwD,EA9auB,GA8aN,CACxB,IAAI,CAAC0pD,eAAa,EACnB,KAAAuJ,YAAA,CAAAjzD,EAAA,KAhb+B,EAgb/Bg0D,GAED,KAAAd,wBAAA,GACD,MAED,IACE,IAAI,CAACxgE,aAAA,OAAAsqD,mBAAwB,EAC7B,KAAAiX,uBAAA,CAAAj0D,GACD,MAED,IACE,KAAAykD,YAAA,CAAAzkD,IAMY,GAHZigB,IACA,KAAAi0C,yBAAyB,CAAAl0D,GAC1B+zD,EAAA9zC,EAAA+wB,eAAA,EAEC,CAAAgjB,EAAI,CACJ,IAAIG,EAAC//D,IAAmB,KAAAmpD,aAAA,CACxB,IAAI,CAAC6W,kBAAc,CAAAp0D,GACjB+zD,GAIDA,CAAAA,EAAA,KAAAF,aAAA,CAAAz/D,IAAA,CAAA+/D,GAAA//D,IAAA,KAAAmpD,aAAA,CAEH,IAEEnpD,EAAA,CAIoF,GAApF+8C,EAAI/8C,EAAO+4D,iBAAc,KAAW,CAAAz2B,UAAK,CAAA12B,EAAA,IAAiB5G,GAAOwa,IAAA,CAAAsjB,YAAmB,CAAAl3B,IAClF5L,EAAKob,UAAA,EAAgBpb,IAAQ,KAAAmpD,aAAA,EAAAnpD,OAAAA,EAAAigE,QAAA,CAC7B,KAAAz1D,eAAmB,CAAAxK,EAAA4L,GACrB+zD,EACK,OACH,CAEA,IAAIvkB,EAAAp7C,EAAgBqf,QAAA,CAAA09B,EAAA,CAAAoG,EAAA/H,GAAAA,EAAAkI,iBAAA,CAAA13C,EAAA5L,EAAAo7C,GAClB+H,IACA7G,EAAA,KAAeha,UAAG,CAAA12B,GACnBu3C,EAAAv3C,EAAAigB,EAAAywB,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,EAEH,GACD62C,QAAA,GACD,IAGEr0C,GAAIA,CAAAA,EAAkB7rB,MAAA,GAAUA,GAAU6rB,EAAUkxB,MAAO,GAAAA,CAAS,GAEpE,IAAAojB,EAAqBt0C,EAAK7rB,MAAW,EAAA6rB,EAAA7rB,MAAA,CAAAqf,QAAA,CAAAwM,EAAAkxB,MAAA,EAAAqjB,EAAAD,GAAAA,EAAA7c,iBAAA,CAAA13C,EAAA5L,EAAAo7C,GACrCkB,EAAAA,GAAA,KAA0Bha,UAAA,CAAA12B,GAC3Bw0D,GAAAA,EAAAx0D,EAAAigB,EAAAywB,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,CACD,KACI,CAACg3C,mBAAgB,CAAAz0D,EAAM5L,GAC3B,IAAI,CAAC6+D,YAAA,CAAAjzD,EAAc,KAzee,EAyeRg0D,GAC1B,IAAI,CAAChK,cAAA,CAAiB,IAAG,CACzB,KAAAD,iBAAA,MAEA31D,GAAIA,CAAAA,EAAc63D,QAAA,IAChB8H,EACF,IACK,CAAAp0D,gBAAc,GACZq0D,GACN,KAAArJ,SAAA,GArDD,EA+D0C0H,oBACzB,SAACqC,CACd,CAAA10D,CAAA,EACU,IACR5L,EAAG,KAAAy4D,UAAA,CAAA7sD,GAAA2pD,EAAA,KAAAA,OAAA,CAAAj2D,EAAA,CACHsM,EAAAA,EACA5L,OAAAA,EACFugE,WAAAhL,CACJ,EAEc,GADd,KAAAxvC,IAAA,CAAUu6C,EAAWhhE,GACrBU,GAAKA,EAAS+lB,IAAA,CAAAu6C,EAAAhhE,GACZ,CAAAi2D,EACD,OAAAv1D,CACD,CAAyC,IACvC,IAAAiV,EAAQ,EAAGA,EAAIsgD,EAAC71D,MAAW,CAAAuV,IAC7BsgD,CAAA,CAAAtgD,EAAA,CAAA8Q,IAAA,CAAAu6C,EAAAhhE,GAEF,OAAAU,CAEA,EASsD6+D,aAChD,SAAcjzD,CAAA,CAAA00D,CACd,CAAApE,CAAU,CAAI0D,CAAC,CAAO,CACZ,IACR5/D,EAAG,KAAAq+D,OAAA,CAAA9I,EAAA,KAAAA,OAAA,KAAAj2D,EAAA,CACHsM,EAAAA,EACA5L,OAAAA,EACAugE,WAAQhL,EACR2G,OAAAA,GAhiB4B,EAiiB5B0D,QAASA,GAAK,GACdtjB,QAAA,KAAAqd,QAAsB,CACtB6G,gBAAgB,KAAA9G,gBAAiB,CACnC7tC,UAAA,KAAA8pC,iBAAA,EAEM,OAAR2K,IACAhhE,EAAQiE,aAAA,KAAoB,CAAAk1D,UAAK,CAAO7sD,GACzCtM,EAAAmhE,iBAAA,MAAAlL,OAAA,EAED,KAAAxvC,IAAA,CAAU,SAAWu6C,EAAWhhE,GAChCU,GAASA,EAAO+lB,IAAI,SAAQu6C,EAAahhE,GAAA,IACvC,IAAA2V,EAAQ,EAAGA,EAAIsgD,EAAC71D,MAAU,CAAAuV,IAC5BsgD,CAAA,CAAAtgD,EAAA,CAAA8Q,IAAA,SAAAu6C,EAAAhhE,EAGF,EAIuCwgE,0BAEhB,SAAAl0D,CAAA,EAEP,IACRigB,EAAG,KAAA8pC,iBAAA,CAAA31D,EAAA6rB,EAAA7rB,MAAA,CAAAV,EAAA,CACHsM,EAAAA,EACA5L,OAAAA,EACA6rB,UAAQA,EACV0rC,OAAA1rC,EAAA0rC,MAAA,CAGFv3D,CAAAA,EAAO0gE,QAAQ,EAChB1gE,CAAAA,EAAA0gE,QAAA,KAID1gE,EAAIkL,SAAU,GACZ2gB,CAAAA,EAAU+wB,eAAa,OAAAkJ,QAAA,EAAA9lD,EAAA2gE,eAAA,KACxB,KAAAC,KAAA,YAAAthE,EAGH,EAIuCuhE,0BAChC,SAA0Bj1D,CAAA,EAC/B,IAAI,CAAAg9C,mBAAoB,IACtB,IAAI,CAACp/C,eAAA,IACN,KAAA2B,mBAAA,CAAAS,GAAAL,gBAAA,GAED,IAAI+wC,EAAC,KAAAha,UAAiB,CAAA12B,GAAqB,IAAE,CAAA6B,gBAAG,CAAA2iD,WAAA,CAAA9T,EAAA,CAAG1wC,EAAAA,EAAiB0wC,QAAAA,CACpE,GACF,KAAAuiB,YAAA,CAAAjzD,EAAA,OAEA,EAIuCk1D,0BAC5B,SAAqBl1D,CAAA,KAC5B,IAAI,CAAAg9C,mBAAe,EACnB,IAAItM,EAAC,KAAAha,UAAiB,CAAA12B,GAAqB,IAAE,CAAA6B,gBAAG,CAAAgjD,WAAA,CAAAnU,EAAA,CAAG1wC,EAAAA,EAAiB0wC,QAAAA,CACrE,EACD,KACI,CAAC2b,SAAA,KAAa,CAAAjD,iBAAG,EACvB,KAAA6J,YAAA,CAAAjzD,EAAA,OAEA,EAIqCi0D,wBAChB,SAAWj0D,CAAA,EAC9B,IAAI0wC,EAAC,KAAAha,UAAsB,CAAA12B,EAAgC,KAAE,CAAAg9C,mBAAG,MAAAn7C,gBAAA,CAAAkjD,SAAA,EAAG/kD,EAAAA,EAAiB0wC,QAAAA,CACpF,GACF,KAAAuiB,YAAA,CAAAjzD,EAAA,KAEA,EAQ4ByzD,cACrB,SAAAzzD,CAAA,EACL,IAAI,CAACgzD,wBAAgB,CAAAhzD,GACrB,IAAI,CAAAizD,YAAa,CAACjzD,EAAA,eAClB,IAAA5L,EAAA,KAAAq+D,OAAA,CACgC,GAC9BpC,EAASrwD,EA7nBuB,GA6nBP,CACvB,IAAI,CAACypD,cAAa,EACnB,KAAAwJ,YAAA,CAAAjzD,EAAA,OA/nB+B,GAioBjC,MAED,IACEqwD,EAASrwD,EApoBuB,GAooBN,CACxB,IAAI,CAAC0pD,eAAa,EACnB,KAAAuJ,YAAA,CAAAjzD,EAAA,OAtoB+B,GAwoBjC,MAED,IACE,IAAI,CAACtN,aAAA,EACL,KAAAuiE,yBAAA,CAAAj1D,GACD,MAED,IACE,KAAAykD,YAAA,CAAAzkD,KAKA,KAAA+pD,iBAAA,EAIF,IAAArZ,EAAA,KAAAqd,QAAA,CAEA,IAAI,CAAAoH,gBAAe,CAAKzkB,EAExB,IAAIqjB,EAAK,KAAAF,aAAyB,CAAAz/D,GAASghE,EAAA,KAAAC,YAAA,CAAAr1D,EAAA5L,GAkB/B,GAjBV,IAAI,CAACq3D,qBAAoB,CAAAzrD,EAAA5L,GAC3B,IACK,CAAAmL,mBAAiB,CAAAS,GACfo1D,IACL,KAAAE,eAAc,CAAAt1D,EAAA5L,GACfA,EAAA,KAAAmpD,aAAA,GAIC,IAAI,CAACoL,SAAA,EAAc,GAAG,GAAAn5C,UAAA,EAAApb,EAAAo5D,SAAA,EAAAp5D,IAAA,KAAAmpD,aAAA,QACpB,CAAAyM,cAAS,EACTlW,GAAI,IAAI,CAACga,gBAAgB,CAACtwC,CAAC,CAC3Bq2B,GAAA,IAAK,CAAAia,gBAAA,CAAArwC,CAAA,CACLve,IAAA,EACFC,KAAA,CACD,GAGC/K,EAAI,CACJ,IAAI23D,EAAiB33D,IAAW,KAAAmpD,aAAa,CAC3CnpD,EAAKob,UAAA,EAAgBpb,SAAAA,EAAAigE,QAAQ,EAC9B,KAAAz1D,eAAA,CAAAxK,EAAA4L,GAKD,IAAAmxC,EAAO/8C,EAAW+4D,iBAAA,MAAAz2B,UAAA,CAAA12B,EAAA,IAAA5G,GAAAwa,IAAA,CAAAsjB,YAAA,CAAAl3B,IAC6C,GAA/D5L,EAAI63D,QAAW,CAAA9a,EACb/8C,IAAK,KAAAmpD,aAAuB,EAAGpM,CAAAA,GAAQ,CAAAikB,CAAA,GACvC,IAAI,CAAApJ,sBAAiB,CAAAhsD,EAAS5L,EAC1B23D,GAEJ,IAAIvc,EAAAp7C,EAAAqf,QAAkB,CAAA09B,EAAA,CAAAT,EAAA,KAAAha,UAAA,CAAA12B,GAAAs3C,EAAA9H,GAAAA,EAAAiI,mBAAA,CAAAz3C,EAAA5L,EAAAo7C,GACpB8H,GACDA,EAAAt3C,EAAA,KAAA+pD,iBAAA,CAAArZ,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,CAEJ,EACD,IACA,CAAAw1C,YAAA,CAAAjzD,EAAA,QAEF,CAAA+zD,GAAAqB,CAAA,QAAAz1D,gBAAA,GAnDE,EAyDmCuzD,yBAChB,WACnB,IAAI,CAACT,OAAA,CAAQ,IAAG,CAChB,IAAI,CAAC1E,QAAA,MACP,KAAAD,gBAAA,OAOsCkF,yBACpC,SAAAhzD,CAAA,EAEA,IAAI,CAACkzD,wBAAgB,GACrB,IAAI,CAACnF,QAAA,MAAgBr3B,UAAQ,CAAA12B,EAAA,IAC7B,IAAI,CAAC8tD,gBAAe,MAAA/C,iBAAyB,MAAAgD,QAAA,EAC/C,KAAA0E,OAAA,MAAA1I,iBAAA,MAAAA,iBAAA,CAAA31D,MAAA,MAAAy4D,UAAA,CAAA7sD,IAAA,MAK8BosD,iBACf,SAAApsD,CAAA,EACb,IAAI8f,EAAC,KAAQiqC,iBAAa,CAC1B,IAAI,CAAC7P,QAAK,EAAAp6B,EAAA1rB,MAAA,CAAAmhE,SAAoB,OAC5B,CAAAp7C,IAAG,qBACHna,EAAAA,EACFigB,UAAAH,CACF,EAEA,EAS4B8zC,cACrB,SAAa5zD,CAAG,EAIG,GAHxB,IAAI,CAACizD,YAAA,CAAAjzD,EAAA,eACL,IAAI,CAAAgzD,wBAAQ,CAAAhzD,GAGV,IAAI,CAACtN,aAAA,EACL,KAAAwiE,yBAAA,CAAAl1D,GACD,MAED,IACE,KAAAykD,YAAA,CAAAzkD,IAKF,IAXI5L,EAAKs8C,EAWTojB,EAAA,KAAA9J,cAAA,CAEE8J,GAEApjB,EAAA,IAAc,CAAAod,gBAAgB,CAC9BgG,EAAc30D,IAAG,CAAGuxC,EAASlzB,CAAA,CAAGs2C,EAAchgB,EAAE,CAEhDggB,EAAc50D,GAAA,CAAAwxC,EAAAjzB,CAAA,CAAAq2C,EAAAjgB,EAAA,CAChB,IACK,CAAA8W,SAAU,IACb,IAAS,CAAIZ,iBAAY,CAM1B,KAAAyL,gBAAA,CAAAx1D,IALC5L,EAAK,KAAAy4D,UAAmB,CAAC7sD,IAAG,KAC5B,IAAI,CAACy0D,mBAAmB,CAAAz0D,EAAA5L,GAC1B,IACK,CAAAqhE,kBAAA,CAAArhE,EAAA4L,IAIL,IAAI,CAACizD,YAAA,CAAAjzD,EAAA,QACP,KAAAkzD,wBAAA,GArBE,EA6BsCuC,mBAClC,SAAqBrhE,CAAC,CAAA4L,CAAA,EAI1B,IAAI6pD,EAAC,KAAAA,cAAiC,CAAGC,EAAA,KAAAA,eAAA,CAAAH,EAAA,KAAAA,OAAA,CAAA71D,EAAAyoB,KAAAxkB,GAAA,CAAA+xD,EAAAh2D,MAAA,CAAA61D,EAAA71D,MAAA,MACvC,CAAA4hE,wBAAW,CAAAthE,EAAA4L,EAAA,CACX21D,UAAQ9L,EACR+L,OAAA,WACAC,aAAO,YACPC,MAAA,YACFC,YAAA,YACA,GAAgC,IAC9B,IAAI1sD,EAAC,EAAAA,EAAAvV,EAAAuV,IAAwC,IAC3C,CAAAqsD,wBAAW,CAAe/L,CAAG,CAAAtgD,EAAA,CAAArJ,EAAA,CAC7B21D,UAAQ7L,CAAA,CAAAzgD,EAAA,CACRusD,OAAO,WACTE,MAAA,WACF,EAEA,KAAI,CAACjM,cAAA,CAAez1D,EACtB,KAAA01D,eAAA,MAAAH,OAAA,CAAAjxD,MAAA,EAEA,EAM2Co6D,sBACrC,SAAqB1+D,CAAK,CAAA4L,CAAA,EAI9B,IAAIg2D,EAAC,IAAwB,CAACA,kBAAW,CAAAlM,EAAA,KAAAA,eAAA,CAAAH,EAAA,KAAAA,OAAA,CAAA71D,EAAAyoB,KAAAxkB,GAAA,CAAA+xD,EAAAh2D,MAAA,CAAA61D,EAAA71D,MAAA,MACvC,CAAA4hE,wBAAW,CAAAthE,EAAA4L,EAAA,CACX21D,UAAQK,EACRJ,OAAO,YACTE,MAAA,WACA,GAAiC,IAC/B,IAAIzsD,EAAC,EAAAA,EAAAvV,EAAAuV,IAAwC,IAC3C,CAAAqsD,wBAAW,CAAe/L,CAAG,CAAAtgD,EAAA,CAAArJ,EAAA,CAC7B21D,UAAQ7L,CAAA,CAAAzgD,EAAA,CACRusD,OAAO,YACTE,MAAA,WACF,EAEF,MAAAE,kBAAA,CAAA5hE,CAEA,EAYsDshE,yBACjC,SAAYthE,CAAA,CAAO4L,CAAA,CAAA9G,CAAS,CAAE,CAEjD,IAAI+8D,EAAAC,EAAeP,EAAAz8D,EAAAy8D,SAAA,CAAAQ,EAAAR,IAAAvhE,EAAA2hE,EAAA78D,EAAA68D,WAAA,CAAAF,EAAA38D,EAAA28D,YAAA,CACjBM,IAAQF,EAAK,CAAGj2D,EAAAA,EAAgB5L,OAAAA,EAA0BgiE,eAAAT,CAC1D,EAASO,EAAK,CAAGl2D,EAAAA,EAAmB5L,OAAAuhE,EAAmBU,WAAAjiE,CACxD,GAGGuhE,GAAUQ,IAEZN,GAAe,KAAA17C,IAAO,CAAA07C,EAAQK,GAC/BP,EAAAx7C,IAAA,CAAAjhB,EAAA08D,MAAA,CAAAM,IAJD9hE,GAAW+hE,IAOTJ,GAAY,IAAO,CAAA57C,IAAK,CAAA47C,EAAEE,GAC3B7hE,EAAA+lB,IAAA,CAAAjhB,EAAA48D,KAAA,CAAAG,GAGH,EAI4BzD,eACrB,SAAAxyD,CAAA,EACL,IAAI,CAACgzD,wBAAgB,CAAAhzD,GACrB,IAAI,CAACizD,YAAA,CAAAjzD,EAAA,SACP,KAAAkzD,wBAAA,EAEA,EAI8BsC,iBACd,SAAKx1D,CAAA,EAGnB,IAAA0wC,EAAU,IAAQ,CAAAha,UAAK,CAAA12B,GAAAigB,EAAA,KAAA8pC,iBAAA,CACvB9pC,EAAUq2C,KAAA,CAAQ,GAClBr2C,EAAUnc,QAAM,CAAK9D,EAAA8D,QAAK,CAE1Bmc,EAAKpc,MAAA,CAAA7D,CAAA,MAAA0oD,WAA2B,EAChC,KAAA6N,uBAAyB,CAAIv2D,EAAAigB,EAAKywB,GACpCzwB,EAAA+wB,eAAA,OAAArxC,gBAAA,EAEA,EAGyD42D,wBAEnD,SAAIv2D,CAAQ,CAACigB,CACb,CAASywB,CAAA,CAAU,CAGnB,IAAAlzB,EAAAkzB,EAAAlzB,CAAA,CAAAC,EAAAizB,EAAAjzB,CAAA,CAAAkuC,EAAA1rC,EAAA0rC,MAAA,CAAA3a,EAAyE,GAAAJ,EAAA3wB,EAAA2wB,aAAA,CAI3EA,GACDI,CAAAA,EAAAJ,EAAA5wC,EAAAigB,EAAAzC,EAAAC,EAAA,EAEW,SAAVkuC,GAAiB3a,IACjB/wB,EAAK7rB,MAAU,CAAAkgE,QAAU,IAC1B,KAAAjI,SAAA,CAAApsC,EAAA7rB,MAAA,CAAAsb,UAAA,OAAAA,UAAA,GAEHuQ,EAAA+wB,eAAA,CAAA/wB,EAAA+wB,eAAA,EAAAA,CAEA,EAKAgkB,MAAA57D,GAAAw8C,aAAA,CAAAlG,SAAA,CAM0C+kB,oBAC3B,SAAAz0D,CAAA,CAAA5L,CAAA,KACX,CAAAA,EAED,OADC,KAAAi4D,SAAY,MAAAlD,aAAA,EACb,EACD,CAII,IAAA15C,EAAWrb,EAAAqb,WAAoB,OAAAA,WAAyB,CAAAmyC,EAIpC,KAAArE,aAAkB,EAAK,yBAAAA,aAAkB,CAAA3oD,IAAA,MAAA2oD,aAAA,MAEjEpM,EAAK,EAAAyQ,GAAQ,CAAAA,EAAAhqD,QAAA,CAAAxD,EAAA,GAAAA,EAAA+4D,iBAAA,MAAAz2B,UAAA,CAAA12B,EAAA,KACXmxC,EAWD,KAAAkb,SAAA,MAAAmK,eAAA,CAAArlB,EAAA/8C,EAAA4L,KAVG5L,EAAAw5D,cAAA,EAEqD,IACnD,CAAAjE,OAAA,CAAAjxD,MAAc,GAAA+9D,OAAQ,GAAAp2D,GAAA,UAAeoyD,CAAA,EACvChjD,EAAAgjD,EAAAhjD,WAAA,EAAAA,CACD,GAEH,IACK,CAAA48C,SAAA,CAAA58C,GAKP,EAG6C+mD,gBACvC,SAAiBrlB,CAAA,CAAS/8C,CAAA,CAAO4L,CAAA,EACrC,IAAAwvC,EAAOp7C,EAAQqf,QAAA,CAAA09B,EAAsB,CACvC,OAAA3B,EAAAmI,kBAAA,CAAA33C,EAAAwvC,EAAAp7C,EACF,CACF,EACC,IAKC0D,EAAOykB,KAAKzkB,GAAM,CAACC,EAAOwkB,KAAAxkB,GAAO,CAAwDqB,GAEvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAqT,MAAA,CAAAyB,SAAA,EAMkCmnD,aAC5B,SAAer1D,CAAA,CAAA5L,CAAK,EACxB,IAAAkpD,EAAO,IAAgB,CAAAC,aAAK,CACmE,OAAKD,GAAA,KAAAkO,sBAAA,CAAAxrD,IAAA5L,GAAAA,EAAAob,UAAA,OAAAm5C,SAAA,EAAArL,CAAAA,IAAAlpD,GAAAkpD,oBAAAA,EAAA1oD,IAAA,IAAAR,EAAAm7D,QAAA,EAAEvvD,EAAAA,CACxG,EAEA,EAKsCs1D,gBAChC,SAAet1D,CAAI,CAAC5L,CAAA,EACxB,IAAAkpD,EAAA,KAAAC,aAAA,EAEED,EAAA2O,QAAA,EAGA73D,CAAAA,IAAAkpD,GAIE,CAFFlpD,EAAA,KAAAy4D,UAAA,CAAA7sD,EAAA,MAEE5L,EAAAob,UAAA,IAIF8tC,GAAKA,oBAAAA,EAAuB1oD,IAAA,CAC9B,IACK,CAAA8hE,sBAAA,CAAAtiE,EAAA4L,GAEJ,KAAA22D,sBAAA,CAAAviE,EAAA4L,GAGH,EAG4C02D,uBACtC,SAAuBtiE,CAAA,CAAA4L,CAAA,CAAa,CAExC,IAAI4hD,EAAgB,KAAArE,aAAkB,CAAAqZ,EAAAhV,EAAA/jD,QAAA,CAAA0P,KAAA,IACpCq0C,EAAgBhqD,QAAA,CAAAxD,IAChBwtD,EAAKiV,gBAAiB,CAAAziE,GACtB,IAAI,CAACy1D,cAAA,CAAez1D,EACpB,IAAI,CAAA01D,eAAgB,KAAI,CAAAH,OAAU,CAAAjxD,MAAA,GAChC,IAAAkpD,EAAA5oD,IAAA,IAED,KAAAs2D,gBAAA,CAAA1N,EAAA1+C,IAAA,IAAAlD,KAID4hD,EAAKkV,aAAiB,CAAA1iE,GACtB,IAAI,CAACy1D,cAAA,CAAejI,EACrB,KAAAkI,eAAA,MAAAH,OAAA,CAAAjxD,MAAA,IAEH,KAAAm2D,oBAAA,CAAA+H,EAAA52D,EAEA,EAG4C22D,uBACtC,SAAsBviE,CAAA,CAAA4L,CAAA,EAC1B,IAAIqvD,EAAe,IAAG,CAAA5vD,gBAAA,GAAAi+C,EAAA,KAAAqZ,YAAA,CAAA3iE,EACtB,MAAAy1D,cAAA,CAAAnM,EAIA,IAAI,CAAC4R,gBAAA,CAAA5R,EAAqB19C,GAC5B,KAAA6uD,oBAAA,CAAAQ,EAAArvD,EAEA,EAI+B+2D,aACzB,SAAe3iE,CAAA,CAAQ,CAGnB,IAACoL,EAAK,KAAA3B,QAAa,CAAAm5D,EAAAC,EAAAr9C,OAAA,MAAA2jC,aAAA,EAAA/9C,EAAAoa,OAAA,CAAAxlB,GAAA,CAAE,KAAAmpD,aAAA,CACrBnpD,EAAA,CAAC,CAAQA,EAAmB,KAAAmpD,aAAA,CACpC,CACgD,OAAhD,KAAAA,aAAkB,CAAAiQ,SAAA,MAAgB,CAAAjQ,aAAc,CAAA2Z,WAAA,GAC9C,IAAA99D,GAAY+9D,eAAA,CAAAH,EAAA,CACdj6D,OAAA,MAGF,EAIoCq6D,sBAEjB,SAAAp3D,CAAA,EAGjB,IAAAq3D,EAAA3Z,EAAA,KAAA4Z,eAAA,CAAAt3D,EAEE09C,CAAK,IAALA,EAAK5pD,MAAA,CACP,IACK,CAAA8K,eAAgB,CAAA8+C,CAAM,IAAA19C,GACzB09C,EAAa5pD,MAAA,CAAO,IAAiCujE,EACnD,IAAQj+D,GAAI+9D,eAAA,CAAAzZ,EAAA+Y,OAAA,IACd15D,OAAA,OAED,KAAA6B,eAAA,CAAAy4D,EAAAr3D,GAGH,EAG6Bs3D,gBACf,SACRt3D,CAAA,EAUsC,IACxC,IAFFu3D,EAAA7Z,EAAA,GAAAzyB,EAAA,KAAA++B,cAAA,CAAAlW,EAAA,CAAA5oB,EAAA,IAAkE,CAAA8+B,cAAA,CAAAnW,EAAA,CAAA1oB,EAAAF,EAAA,KAAA++B,cAAA,CAAA7qD,IAAA,CAAAisB,EAAAF,EAAA,KAAA8+B,cAAA,CAAA9qD,GAAA,CAAAs4D,EAAA,IAAAp+D,GAAAmkB,KAAA,CAAAzlB,EAAAmzB,EAAAE,GAAArzB,EAAAozB,EAAAE,IAAAqsC,EAAA,IAAAr+D,GAAAmkB,KAAA,CAAAxlB,EAAAkzB,EAAAE,GAAApzB,EAAAmzB,EAAAE,IAAAssC,EAAA,MAAAxO,uBAAA,CAAA8K,EAAA/oC,IAAAE,GAAAD,IAAAE,EAEhE/hB,EAAA,KAAAxL,QAAqB,CAAA/J,MAAA,CAASuV,MAG5B,EADFkuD,EAAK,KAAA15D,QAAkB,CAAAwL,EAAA,GACZkuD,EAAA/nD,UAAA,EAAA+nD,EAAAtgB,OAAA,EAQTygB,CAAAA,GAAWH,EAAAI,kBAAA,CAAAH,EAAAC,EAAA,KAAAF,EAAAK,qBAAA,CAAAJ,EAAAC,EAAA,KAAAC,GAAAH,EAAAhK,aAAA,CAAAiK,EAAA,UAAAE,GAAAH,EAAAhK,aAAA,CAAAkK,EAAA,YACX/Z,EAAA7uD,IAAA,CAAA0oE,GAEEvD,EAXO,IAuBf,OANItW,EAAA5pD,MAAQ,CAAM,GAAwB4pD,CAAAA,EACpCA,EAAQz6C,MAAO,UAAShP,CAAA,QAAK,CAAAA,EAAAs7D,QAAA,EAAEvvD,EAAAA,CACjC,EACD,IAGH09C,CAEA,EAGgC0W,mBACrB,SAAap0D,CAAI,CAAC,CACzB,IAAI,CAAC2oD,SAAA,OAAAqB,cAAsB,EAC5B,KAAAoN,qBAAA,CAAAp3D,GAED,KAAAqsD,SAAA,MAAAlD,aAAA,EAEF,KAAAa,cAAA,MAGJ,GAEuG5wD,GAEnGwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAogD,YAAA,CAAAtrC,SAAA,EAgC8BtN,UAC5B,SAAYlN,CAAY,EAExBA,GAAIA,CAAAA,EAAiB,IAIrB,IAAAuF,EAAOvF,EAAYuF,MAAA,EAAU,MAAAurB,EAAkB9wB,EAAA8wB,OAAA,IAAAswB,EAAA,CAAAphD,EAAAohD,UAAA,KAAAphD,CAAAA,EAAA8mD,mBAAA,MAAAY,gBAAA,MAAA72B,EAAA,KAAAszC,eAAA,CAAA/iB,EAAAphD,GACjD,OAAA0F,GAAAwa,IAAA,CAAAhT,SAAA,CAAA2jB,EAAAtrB,EAAAurB,EAEA,EAagDqzC,gBACjC,SAAA/iB,CAAc,CAAAgjB,CAAA,EAC3BhjB,EAAWA,GAAc,EAWb,IAACijB,EAAA,CAAAD,CAVbA,EAAIA,GAAe,IAUNz/D,KAAA,OAAAA,KAAA,EAAAy8C,EAAAkjB,EAAA,CAAAF,EAAAx/D,MAAA,OAAAA,MAAA,EAAAw8C,EAAAxd,EAAA,KAAA8Z,OAAA,GAAA6mB,EAAA,KAAA5/D,KAAA,CAAA6/D,EAAA,KAAA5/D,MAAA,CAAA6/D,EAAA7gC,EAAAwd,EAAAsjB,EAAA,KAAA/d,iBAAA,CAAAt1B,EAAA,CAAAqzC,CAAA,IAAAN,CAAAA,EAAA34D,IAAA,MAAA21C,EAAA9vB,EAAA,CAAAozC,CAAA,IAAAN,CAAAA,EAAA54D,GAAA,MAAA41C,EAAAujB,EAAA,KAAAvd,WAAA,CAIbwd,EAAiB,KAAA9d,mBAAA,CAAAj2B,EAAAnrB,GAAAwa,IAAA,CAAAwQ,mBAAA,GAAAm0C,EAAA,KAAA7c,UAAA,CAkBnB,OAjBEn3B,EAASlsB,KAAA,CAAM0/D,EACfxzC,EAAKjsB,MAAU,CAAG0/D,EAClB,IAAI,CAACtc,UAAA,MACL,IAAI,CAAClB,mBAAmB,IACxB,IAAI,CAACM,WAAA,IACL,IAAI,CAACT,iBAAQ,CAVA,CAAS8d,EAAG,EAAG,EAASA,EAAYpzC,EAC7CC,EAGJ,CAOA,IAAI,CAAC3sB,KAAA,CAAM0/D,EACX,IAAI,CAACz/D,MAAA,CAAA0/D,EACL,IAAI,CAACra,sBAAsB,GAC3B,IAAI,CAACe,YAAA,CAAAn6B,EAAoBrO,UAAA,YAAArY,QAAA,EACzB,IAAI,CAACw8C,iBAAQ,CAAA+d,EACb,IAAI,CAAC//D,KAAA,CAAM4/D,EACX,IAAI,CAAC3/D,MAAA,CAAA4/D,EACL,IAAI,CAACva,sBAAc,GACnB,IAAI,CAAC7C,WAAA,CAAAud,EACL,IAAI,CAAC7d,mBAAa,CAAA8d,EAClB,KAAA5c,UAAO,CAAA6c,EACTh0C,CACF,CAEF,GACqGnrB,GACnGwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAogD,YAAA,CAAAtrC,SAAA,EAqBiDR,aACpC,SAAA8qD,CAAA,CAAAx9C,CAAA,CAAA0H,CAAA,KACT81C,GAQF,IAAIC,EAAY,iBACZD,EAAsBE,KAAQC,KAC9B,CAAAH,GAAAp/D,GAAoBwa,IAAI,CAAC3f,MAAA,CAAA+K,KAAA,CAAAw5D,EAAiB,CAE1CviC,EAAC,KAAAvN,EAAoB+vC,EAAK/vC,QAAA,CAAAlb,EAAA,KAAAA,iBAAA,CAmBhC,OAjBE,KAAAA,iBAAkB,IAElB,OAAKirD,EAAA/vC,QAAgB,CAAgD,IACnE,CAAAkwC,eAAW,CAAAH,EAAAj5D,OAAA,UAAAmjB,CAAA,EACXsT,EAAMxoB,KAAA,GAAsCwoB,EAC1C4iC,aAAc,CAAAJ,EAAA,WACZ/vC,EAAsBuN,EAAC2iC,eAAA,EAAWlwC,EAA+B,UACzDowC,CAAW,EACjB7iC,EAAMvN,QAAA,CAAAowC,CAA0B,IAClC7iC,EAAA8iC,aAAA,CAAAz+C,IAAA,CAAA2b,EAAAwiC,EAAA91C,EAAAnV,EAAAwN,EACF,GAGCib,EAAA8iC,aAAA,CAAAz+C,IAAA,CAAA2b,EAAAwiC,EAAA91C,EAAAnV,EAAAwN,EAEF,EACH,EAAA0H,GACF,KA5BE,EAqCiFq2C,cACrE,SAAIN,CAAA,CAAA91C,CAAA,CAAAnV,CAAA,CAAAwN,CAAA,EAChB,IAAAib,EAAA,KAA8CtT,EAC5CrD,OAAA,UAAAhE,CAAA,CAAA9R,CAAA,EAGFysB,EAAAtb,QAAA,CAAAW,EAAA9R,EACA,GACA,KAAAgE,iBAAA,CAAAA,EAEA,OAAOirD,EAAWj5D,OAAA,CAClB,OAAOi5D,EAAW3e,eAAY,CAC9B,OAAO2e,EAAWze,YAAU,CAC5B,OAAOye,EAAWhgE,UAAO,CACzB,OAAAggE,EAAAhX,OAAA,CAKA,IAAI,CAAC/lC,WAAS,CAAA+8C,GACd,KAAA9qD,SAAY,GACdqN,GAAAA,GAEA,EAK8C69C,cAC/B,SAAAJ,CAAA,CAAAz9C,CAAA,MACXg+C,EAAA,CACA3nE,gBAAc,GACd0oD,aAAA,GACAD,gBAAc,GAChBE,aAAA,EAEA,EAA8G,GAC5G,CAAAye,EAAY3e,eAAA,GAAA2e,EAAAze,YAAA,GAAAye,EAAAhgE,UAAA,GAAAggE,EAAAhX,OAAA,EACZzmC,GAAAA,IACD,MAED,KACEi+C,EAAW,WACTD,EAAAlf,eAAY,EAAAkf,EAAAhf,YAAA,EAAAgf,EAAA3nE,eAAA,EAAA2nE,EAAAjf,YAAA,EACb/+B,GAAAA,GAGH,EACA,IAAI,CAACk+C,cAAc,CAAC,kBAAgBT,EAAW3e,eAAc,CAAAkf,EAAQC,GACrE,IAAI,CAACC,cAAc,CAAC,eAAAT,EAAmBze,YAAW,CAAUgf,EAAEC,GAC9D,IAAI,CAACC,cAAc,CAAC,kBAAgBT,EAAWhgE,UAAS,CAAAugE,EAAQC,GAClE,KAAAC,cAAA,gBAAAT,EAAAhX,OAAA,CAAAuX,EAAAC,EAEA,EAO4DC,eAC9C,SAAIr9C,CAAA,CAAAxnB,CAAA,CAAA2kE,CAAA,CAAAh+C,CAAA,EAEhB,IAAIib,EAAQ,QACV,CAAA5hC,EAAO,CACP2kE,CAAA,CAAAn9C,EAAY,IACZb,GAAAA,IACD,MAED,qBACEa,GAA2BA,iBAAAA,EAAAziB,GAACwa,IAAA,CAAA6O,cAAA,EAAQpuB,EAAuB,UACnD8kE,CAAY,EAClBljC,CAAA,CAAMpa,EAAC,CAASs9C,CAAO,IACvBH,CAAA,CAAAn9C,EAAY,IACdb,GAAAA,GACF,GAEgF,IAC5E,OAAO5hB,GAASwa,IAAG,CAAAyN,MAAI,CAAA3O,UAAA,CAAAmJ,EAAA,KAAAxnB,EAAA,WACvB2kE,CAAA,CAAAn9C,EAAY,IACdb,GAAAA,GACD,EAGH,EAMuD49C,gBAChD,SAAmBp5D,CAAM,CAAAwb,CAAQ,CAAA0H,CAAA,KACpC,CAAAljB,GAAYA,IAAAA,EAAA1L,MAAW,EACvBknB,GAAAA,EAAA,IACD,MAED,IACEpH,IAAA,CAAA6O,cAAqB,CAAAjjB,EAAA,SAAAmjB,CAAA,EACpB3H,GAAMA,EAAA2H,EACX,OAAAD,EAEA,EAKwC02C,WAC5B,SAACngE,CAAe,CAAE+hB,CAAA,MAC1B,CAAAhc,KAAA,UAAeA,CAAA,EACjBgc,EAAAhc,EAAA4B,SAAA,CAAA3H,GACF,EAEA,EAMkEogE,yBAC3C,SAAOpgE,CAAA,CAAA67C,CAAA,CAAA95B,CAAA,MAC1B,CAAAhc,KAAA,UAAeA,CAAA,EACjBgc,EAAAhc,EAAAs6D,uBAAA,CAAArgE,EAAA67C,GACF,EAEA,EAKuC91C,MACjC,SAAOgc,CAAK,CAAAmJ,CAAe,EAC/B,IAAIljB,EAACy3D,KAAAa,SAAiB,MAASnqD,MAAK,CAAE+U,IAAA,IACpC,CAAAq1C,gBAAM,CAAY,SAAOx6D,CAAA,EAAWA,EAClC0O,YAAY,CAAAzM,EAAS,WACvB+Z,GAAAA,EAAAhc,EACF,EACF,EAEA,EAMqCw6D,iBACnB,SAAKx+C,CAAA,EAErB,IAAGud,EAAKn/B,GAAQwa,IAAA,CAAKwQ,mBAAA,EACrBmU,CAAAA,EAAGlgC,KAAA,CAAM,IAAG,CAAIA,KAAC,CAEjBkgC,EAAAjgC,MAAI,CAAQ,IAAI,CAAAA,MAAO,CACvB,IAAI0G,EAAK,IAAA5F,GAAAqT,MAAiB,CAAA8rB,EACxB,MAAAuhB,eAAM,EAAwD96C,EAC5Di8C,kBAAe,MAAAnB,eAAA,CAAA93B,GAAA,YACfhjB,EAAA2O,SAAY,GACdqN,GAAAA,EAAAhc,EACA,GACAA,EAAMy6D,sBAAsB,CAAG,IAAI,CAACA,sBAAsB,CAC5Dz6D,EACK06D,sBAAA,MAAAA,sBAAA,EAEJ1+C,GAAAA,EAAAhc,EAEL,CACC,GAaoBwT,EAAApZ,CAAfA,EAAO+R,CAXXA,EAs9DDoH,GA38DoBnZ,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,MAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAxT,EAAA5F,EAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,CAAAyT,EAAArZ,EAAAwa,IAAA,CAAAnB,OAAA,CAAAC,EAAAtZ,EAAAwa,IAAA,CAAAyN,MAAA,CAAA3O,UAAA,CAAAC,EAAAvZ,EAAAwa,IAAA,CAAAjB,gBAAA,CAAAC,EAAA,CAAAxZ,EAAAse,YAAA,CACjBte,EAAA6U,MAAA,GAsCkG7U,EAElG6U,MAAA,CAAA7U,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAAqiB,aAAA,EASA7mB,KAAA,SAQAs7C,QAAA,OAQAC,QAAA,MAOAjxC,IAAA,EAOAC,KAAA,EAOA9G,MAAA,EAOAC,OAAA,EAOA+F,OAAA,EAOAC,OAAA,EAOA+mB,MAAA,GAOAC,MAAA,GAOA3sB,QAAA,EAOA+jB,MAAA,EAOAmI,MAAA,EAOAC,MAAA,EAOA1W,WAAA,GAOAurD,gBAAA,GAOAxrD,mBAAA,GAOAsB,YAAA,KAOAC,WAAA,KAOA2hC,QAAA,EAOA74C,YAAA,mBAOAohE,gBAAA,KAOAtrD,YAAA,mBAQAC,kBAAA,KAOAF,YAAA,OAOAwrD,gBAAA,KAUArR,gBAAA,GAUAC,iBAAA,GAQA3uC,KAAA,aASAggD,SAAA,UAOAva,yBAAA,cAQAluD,gBAAA,GAQAk6D,yBAAA,GAQAxiC,OAAA,KAOAva,YAAA,EAMAy0C,gBAAA,KAOA8W,iBAAA,EAOA/W,cAAA,OAOAtjC,eAAA,QAOAC,iBAAA,EAOAojC,OAAA,KAOAiX,wBAAA,GAUAC,kBAAA,EAOAC,cAAA,EAQA1qD,WAAA,GAOApQ,QAAA,GAOA63C,QAAA,GAOAkjB,YAAA,GAOAC,WAAA,GAOA3rD,mBAAA,GAOAwrC,qBAAA,GAOA38C,cAAA,GAOAC,cAAA,GAOAG,aAAA,GAOAF,aAAA,GAOAC,aAAA,GAOA81C,aAAA,GAOAD,aAAA,GAOAN,gBAAA,GAQAoO,kBAAA,GAUAxuC,cAAAA,EAYAynD,eAAA,GAWAC,aAAA,GAaAn7C,cAAA,GAQAo7C,MAAA,GAUAtO,SAAA,EAOAuO,WAAA,OAWAnG,SAAA,OAaAoG,gBAAA,sTAAA94C,KAAA,MAYA+4C,gBAAA,wKAAA/4C,KAAA,MAQAg5C,gBAAA,8BAAAh5C,KAAA,MASA+G,SAAAjyB,KAAAA,EASAixB,SAAA,GAYAkzC,mBAAA,GAI8BzkC,WACxB,SAASziC,CAAA,EACXA,GACD,KAAAsoD,UAAA,CAAAtoD,EAGH,EAI+B60D,mBACxB,UAAoB,CACzB,IAAI,CAACsS,gBAAe,IACpB,IAAI,CAACnb,YAAA,CAAatmD,EAAQwa,IAAA,CAAAwQ,mBAAwB,GAClD,IAAI,CAACgnC,aAAA,KAAkB,CAAA1L,YAAA,CAAAxpC,UAAA,OACvB,KAAA4kD,kBAAA,GAEF,KAAAP,KAAA,GAEA,EAegCQ,gBAC1B,SAAAC,CAAqB,EAGzB,IAAI7iD,EAAgB/e,EAAU+e,kBAAe,CAAA9f,EAAU2iE,EAAA3iE,KAAA,CAAAC,EAAoB0iE,EAAA1iE,MAAA,CAAAP,EAAAqB,EAAAgf,iBAAA,CAAAtgB,EAAAsB,EAAAif,iBAAA,IACzEhgB,GAAIN,GAAQO,GAAKP,GAAAM,EAAAC,GAAA6f,EAOlB,OANG9f,EAAKP,GACNkjE,CAAAA,EAAA3iE,KAAA,CAAAP,CAAA,EAECQ,EAAKR,GACNkjE,CAAAA,EAAA1iE,MAAA,CAAAR,CAAA,EAEFkjE,CACD,CAIA,IAAeC,EAAA7hE,EAAAwa,IAAA,CAAAmT,eAAA,CAAX1uB,EAAWC,EAAA6f,GAAAgP,EAAA/tB,EAAAwa,IAAA,CAAAuT,QAAA,CAAA3J,EAAA2J,EAAArvB,EAAAmjE,EAAAz9C,CAAA,CAAAzlB,GAAA0lB,EAAA0J,EAAArvB,EAAAmjE,EAAAx9C,CAAA,CAAA1lB,GAWjB,OAVIM,EAAKmlB,IACLw9C,EAAKxb,KAAK,EAAGnnD,EAAAmlB,EACbw9C,EAAK3iE,KAAA,CAAMmlB,EACZw9C,EAAAE,MAAA,KAEC5iE,EAAKmlB,IACLu9C,EAAKvb,KAAA,EAASnnD,EAAAmlB,EACdu9C,EAAK1iE,MAAM,CAAGmlB,EACfu9C,EAAAE,MAAA,KAEHF,CAEA,EAWsCG,0BACb,WAEnB,IAAAC,EAAW,KAAAC,qBACX,GAEJ1oB,EAAA,IAAO,CAAAV,yBAAA,MAAAqpB,EAAA3oB,EAAAn1B,CAAA,CAAA49C,EAAA/8D,MAAA,MAAAA,MAAA,CAAAk9D,EAAA5oB,EAAAl1B,CAAA,CAAA29C,EAAA98D,MAAA,MAAAA,MAAA,OACL,CAIAjG,MAAAijE,EAptBa,EAqtBbhjE,OAAOijE,EArtBM,EAstBb/b,MAAO4b,EAAY/8D,MAAM,CACzBohD,MAAG2b,EAAA98D,MAAA,CACHkf,EAAG89C,EACL79C,EAAA89C,CACF,CAEA,EAM+BT,mBACzB,UAAoB,CACxB,IAAI9kD,EAAK,IAAY,CAAAjZ,MAAI,CAAgD,GACvE,IAAI,CAAAu9D,YAAS,EAAAtkD,GAAaA,EAAwB+zC,iBACrC,EACb,IAAI31D,EAAS4hB,EAAU+zC,iBAAgB,CAAA31D,MAAO,CAAMu3D,EAAG31C,EAAgB+zC,iBAAA,CAAA4B,MAAA,IACrE,OAAOv3D,GAAKu3D,EAAAp+C,KAAA,EAAAo+C,UAAAA,EAAAp+C,KAAA,MACb,QACF,CACD,IASuBiuD,EAAAC,EAAnB1+D,EAAA,KAAA2iD,YAAmB,CAAAsb,EAAA,KAAAD,eAAA,MAAAI,yBAAA,IAAAO,EAAAtiE,EAAAif,iBAAA,CAAAhgB,EAAA2iE,EAAA3iE,KAAA,CAAAC,EAAA0iE,EAAA1iE,MAAA,CAAAknD,EAAAwb,EAAAxb,KAAA,CAAAC,EAAAub,EAAAvb,KAAA,CAAAkc,EAAAtjE,IAAA,KAAAujE,UAAA,EAAAtjE,IAAA,KAAAujE,WAAA,CAAAC,EAAA,KAAAtc,KAAA,GAAAA,GAAA,KAAAC,KAAA,GAAAA,EAAAsc,EAAAJ,GAAAG,EAAAE,EAAA,EAAAC,EAAA,EAAAC,EAAA,MACrBP,EAAkB,CAKlB,IAAAQ,EAAA,IAAqB,CAAAzc,YAAA,CAAernD,KAAA,CAAA+jE,EAAA,KAAA1c,YAAA,CAAApnD,MAAA,CAAA+jE,EAAAhkE,EAAA8jE,GAAA7jE,EAAA8jE,EACpCF,EAAoBG,GADgB,CAAAhkE,EAAA8jE,GAAAA,GAAA7jE,EAAA8jE,GAAAA,CAAA,GAAAD,EAAAT,GAAAU,EAAAV,EAElCW,GAAA,CAAArB,EAAkBE,MAAQ,EAAA7iE,CAAAA,EAAAqjE,GAAApjE,EAAAojE,CAAA,IAC1BM,EAAA3jE,GAAAA,EACD4jE,EAAA3jE,GAAAA,EAEH,QAMkB,IALhB,YAAec,EAAI4nB,IAAA,OAAA6C,IAAA,GACnBk4C,EAAA,GACAG,EAAmB,GACnBF,GAAA,IAAoB,CAAIM,eAAC,CAAe,GAAC,IAAK,CAAI9c,KAAC,CACpDyc,GAAA,KAAAK,eAAA,SAAA7c,KAAA,IAECsc,IACEG,GACAn/D,EAAO1E,KAAA,CAAMkkB,KAAGnI,IAAK,CAAI/b,EAAC2jE,GAC5Bj/D,EACKzE,MAAA,CAAAikB,KAAAnI,IAAA,CAAA9b,EAAA2jE,KAEH,IAAI,CAAC7Q,aAAa,CAACmR,YAAU,CAAG,EAAG,MAAO,EAAK,GAChD,KAAAnR,aAAA,CAAA/M,SAAA,KAAAthD,EAAA1E,KAAA,CAAA0E,EAAAzE,MAAA,GAEDkjE,EAAAR,EAAgBx9C,CAAK,CAAC,EACtBi+C,EAAKT,EAAAv9C,CAAiB,CAAG,EACzB,IAAI,CAACkiC,iBAAiB,CAAGpjC,KAAKrI,KAAK,CAACnX,EAAO1E,KAAA,CAAM,EAAGmjE,GAAIA,EACxD,IAAI,CAAC5b,iBAAa,CAAArjC,KAAArI,KAAA,CAAAnX,EAAAzE,MAAA,GAAAmjE,GAAAA,EAClB,IAAI,CAACG,UAAA,CAAWvjE,EAChB,IAAI,CAACwjE,WAAA,CAAcvjE,EACnB,IAAI,CAAC8yD,aAAa,CAACj1C,SAAM,KAAO,CAAAwpC,iBAAA,MAAAC,iBAAA,EAChC,IAAI,CAACwL,aAAQ,CAAAhtD,KAAA,CAAAohD,EAAAC,GACb,IAAI,CAACD,KAAK,CAAGA,EACb,KAAAC,KAAO,CAAIA,EACZ,GACD,EAO4BzD,WACvB,SAAYtoD,CAAA,EACjB,IAAI,CAACgoB,WAAA,CAAAhoB,GACL,IAAI,CAACioB,aAAa,CAACjoB,EAAQomB,IAAA,CAAM,QACjC,IAAI,CAAC6B,aAAa,CAAAjoB,EAAQq1B,MAAM,WAChC,IAAI,CAAC/M,YAAY,CAACtoB,EAAQomB,IAAA,CAAM,QAClC,KAAAkC,YAAA,CAAAtoB,EAAAq1B,MAAA,UAEA,EAIyB9I,UACnB,SAAAhK,CAAA,EAEJ,IAAIumD,EAAS,KAAA9e,KAAqB,QAAAA,KAAA,CAAAwB,cAAA,OAAAxB,KAAA,OAAA3gD,MAAA,EAAAkZ,IAAA,KAAAlZ,MAAA,CAAA2+C,UAAA,CAC9BtxB,EAAA,KAAS3B,mBAAmB,CAAC,CAAC+zC,GACpCvmD,EAAAgK,SAAA,CAAAmK,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAEA,EAKwC62B,SAClC,SAAAF,CAA6B,EAEpB,IACPx5B,EAAmCnuB,EAAA6U,MAAA,CAAAsZ,mBAAA,CAAAtzB,EAAA,CACnCW,KAAA,IAA0B,CAAAA,IAAA,CAC1B+f,QAA0Bvb,EAAKub,OAAO,CACtCu7B,QAA0B,IAAI,CAACA,OAAO,CACtCC,QAA0B,KAAQA,OAAK,CACvChxC,KAA0BsT,EAAQ,IAAK,CAAAtT,IAAK,CAAAooB,GAC5CroB,IAAAuT,EAA0B,IAAQ,CAAAvT,GAAK,CAAAqoB,GACvClvB,MAAAoa,EAA0B,IAAQ,CAAIpa,KAAC,CAAMkvB,GAC7CjvB,OAA0Bma,EAAU,IAAI,CAAAna,MAAK,CAAKivB,GAClDzN,KAAA,IAA0B,CAAAA,IAAM,EAAM,IAAI,CAAAA,IAAK,CAAAmnC,QAAO,KAAQ,CAAAnnC,IAAI,CAAImnC,QAAQ,OAAQ,CAAAnnC,IAAK,CAC3FiP,OAAA,KAA0BA,MAAA,EAAQ,IAAK,CAAAA,MAAA,CAAAk4B,QAAa,MAAAl4B,MAAA,CAAAk4B,QAAA,QAAAl4B,MAAA,CACpDva,YAAAiE,EAA8B,IAAC,CAAAjE,WAAe,CAAA+Y,GAC9C07B,gBAA0B,IAAK,CAAAA,eAAa,MAAAA,eAAA,CAAAvqD,MAAA,QAAAuqD,eAAA,CAC5CD,cAAA,IAA0B,CAAAA,aAAK,CAC/B+W,iBAA0B,IAAK,CAAAA,gBAAc,CAC7Cr6C,eAA0B,IAAK,CAAAA,cAAa,CAC5CP,cAAA,IAA0B,CAAAA,aAAa,CACvCQ,iBAAkClN,EAAK,IAAQ,CAAAkN,gBAAA,CAAA4H,GAC/ClpB,OAA0BoU,EAAQ,IAAI,CAACpU,MAAM,CAAEkpB,GAC/CjpB,OAA0BmU,EAAQ,IAAK,CAAAnU,MAAO,CAAAipB,GAC9C7K,MAA0BjK,EAAK,IAAK,CAAAiK,KAAA,CAAA6K,GACpClC,MAA0B,IAAI,CAACA,KAAK,CACpCC,MAAA,IAA0B,CAAAA,KAAQ,CAClC3sB,QAA0B8Z,EAAM,IAAM,CAAA9Z,OAAS,CAAA4uB,GAC/Cw7B,OAAA,IAA0B,CAAIA,MAAC,EAAO,KAAAA,MAAA,CAAA9B,QAAA,MAAA8B,MAAA,CAAA9B,QAAA,QAAA8B,MAAA,CACtC9L,QAAA,KAAAA,OAA8B,CAC9B5lD,gBAA+B,KAAAA,eAAQ,CACvCyoE,SAAA,IAA0B,CAAAA,QAAK,CAC/BU,WAAA,KAAAA,UAA0B,CAC1Bjb,yBAA4C,IAAE,CAAAA,wBAAA,CAC9C16B,MAA0BpS,EAAQ,IAAI,CAACoS,KAAK,CAAE0C,GAChDzC,MAAArS,EAAA,KAAAqS,KAAA,CAAAyC,EAEJ,EAYF,OAXI,KAAAmB,QAAO,EAAQ,CAAG,IAAI,CAACA,QAAQ,CAAC04B,iBAAS,GACzCntD,EAAOy0B,QAAQ,CAAC,KAAAA,QAAe,CAACu4B,QAAQ,CAACF,GACzC9sD,EAAOy0B,QAAQ,CAAChB,QAAA,MAAAgB,QAAqB,CAAIhB,QAAC,CAC3CzzB,EAAAy0B,QAAA,CAAAkyC,kBAAA,MAAAlyC,QAAA,CAAAkyC,kBAAA,EAGDxhE,EAAKwa,IAAK,CAAAqQ,sBAAsB,MAAAhwB,EAAA8sD,GAC9B,KAAA9G,oBAAc,EACfhmD,CAAAA,EAAA,KAAAwoE,oBAAA,CAAAxoE,EAAA,EAGHA,CAEA,EAKgD+sD,iBAC9C,SAAAD,CAAoC,EAEtC,YAAAE,QAAA,CAAAF,EAEA,EAIuC0b,qBACrB,SAAWxoE,CAAC,EAE5B,IAAAia,EAAgB9U,EAAOwa,IAAC,CAAAuN,QAAS,CAAIltB,EAAEW,IAAA,EAAAsZ,SAAA,CAezC,OAfyCusD,EAAAA,eAAA,CACjCn7C,OAAS,UAAU/E,CAAS,EAC9B,SAAAA,GAAAA,QAAAA,IAGAtmB,CAAA,CAAOsmB,EAAA,GAAOrM,CAAK,CAAAqM,EAAA,EACpB,OAAAtmB,CAAA,CAAAsmB,EAAA,CAICriB,MAAAC,OAAa,CAAClE,CAAK,CAAAsmB,EAAA,GAAAriB,MAAAC,OAAA,CAAA+V,CAAA,CAAAqM,EAAA,GAAAtmB,IAAAA,CAAA,CAAAsmB,EAAA,CAAAzmB,MAAA,EAAAoa,IAAAA,CAAA,CAAAqM,EAAA,CAAAzmB,MAAA,EACpB,OAAAG,CAAA,CAAAsmB,EAAA,CAGH,GACFtmB,CAEA,EAIqBohC,SACnB,UAAO,CACT,kBAAA3iB,EAAA,KAAA9d,IAAA,KAEA,EAI6B8nE,iBAC3B,WAIiB,GACf,MAAAhf,KAAO,OACL,CACAr/C,OAAQ,IAAI,CAACA,MAAM,CACrBC,OAAA,KAAAA,MAAA,CAEF,CAEA,IAAA5K,EAAO0F,EAAAwa,IAAA,CAAA+Q,WAAA,MAAA8D,mBAAA,UAAE,CAAkCpqB,OAAQke,KAAKtI,GAAG,CAACvgB,EAAQ2K,MAAM,EAAEC,OAAAie,KAAAtI,GAAA,CAAAvgB,EAAA4K,MAAA,CAC9E,CAEA,EAIkC+8D,sBACf,WACjB,IAAIj9D,EAAK,IAAM,CAAEs+D,gBAAA,GAAAr+D,EAAAD,EAAAC,MAAA,CAAAC,EAAAF,EAAAE,MAAA,IACf,IAAI,CAAAvB,MAAO,EACX,IAAIu6B,EAAA,IAAS,CAAAv6B,MAAK,CAAAq0C,OAAO,GACzBurB,EAAU,IAAO,CAAA5/D,MAAA,CAAAq+C,gBAAA,GACjB/8C,GAAUi5B,EAAOqlC,EAClBr+D,GAAAg5B,EAAAqlC,CACD,OAAS,CAAgBt+D,OAAQA,EAAOC,OAAAA,CAC1C,CAEA,EAI6Bs+D,iBACb,UAAK,CACnB,IAAIjkE,EAAU,IAAE,CAAAA,OAAA,CAIlB,OAHI,KAAA+kD,KAAA,EACD/kD,CAAAA,GAAA,KAAA+kD,KAAA,CAAAkf,gBAAA,IAEHjkE,CAEA,EAM2ByjB,KACzB,SAAIxY,CAAA,CAAAvP,CAAA,EAGJ,IAA0BwoE,EAAA,KAAAj5D,EAAA,GAAAvP,EAAAyoE,EAAA,GA+B5B,MA/B4Bl5D,CAAAA,WAAAA,GAAAA,WAAAA,CAAA,GAEzBvP,CAAAA,EAAA,KAAA0oE,eAAA,CAAA1oE,EAAA,EAECuP,WAAAA,GAAmBvP,EAAK,GACxB,KAAAgxB,KAAU,OAAAA,KAAA,CACZhxB,GACS,IACFuP,WAAAA,GAAmBvP,EAAA,GACxB,KAAAixB,KAAU,OAAAA,KAAA,CACZjxB,GACS,IACPuP,WAAAA,IAA0BvP,GAAAA,aAAA+E,EAAAqsD,MAAA,CAGX,UAAV7hD,GAAmB,KAAA85C,KAAA,EACzB,KAAAA,KAAA,CAAAz+C,GAAA,SAAA5K,GAHDA,EACS,IAAA+E,EAAQqsD,MAAA,CAAWpxD,GAM5B,IAAI,CAAAuP,EAAA,CAAAvP,EACFwoE,IACAC,EAAS,KAAepf,KAAC,EAAQ,KAAAA,KAAQ,CAAGsf,UAAA,GAC1C,IAAI,CAACtC,eAAY,CAAA9gD,OAAA,CAAAhW,GAAA,IACjB,KAAA22D,KAAA,IACFuC,GACS,KAAApf,KAAoB,CAAIz+C,GAAC,cAC3B69D,GAAmB,IAAI,CAAArC,eAAA,CAAA7gD,OAAA,CAAAhW,GAAA,IAC7B,KAAA85C,KAAA,CAAAz+C,GAAA,cAGL,MASEg+D,WAAA,WAGF,EAMiCC,qBAChB,UAAS,QAA0B,IAChD,CAAAngE,MAAW,EAAC,IAAO,CAAAA,MAAA,CAAAs9C,iBAAiB,CACrC,KAAAt9C,MAAA,CAAAs9C,iBAAA,CAEHjhD,EAAA6e,OAAA,CAAAvf,MAAA,EADE,EASuBykE,aAChB,UAAY,CAGrB,gBAAAxkE,OAAA,QAAAN,KAAA,QAAAC,MAAA,WAAAkW,WAAA,QAAAyoC,OAAA,EAMsBsC,OACpB,SAAAtjC,CAAA,GAEE,KAAAknD,YAAA,IAGA,OAAApgE,MAAA,QAAAA,MAAA,CAAA29C,aAAA,OAAAgD,KAAA,OAAA0f,UAAA,MAGFnnD,EAAIogC,IAAC,GACL,IAAI,CAACgnB,wBAAwB,CAAApnD,GAC7B,IAAI,CAACqnD,uBAAU,CAAArnD,GACf,IAAI,CAACgK,SAAA,CAAAhK,GACL,IAAI,CAACsnD,WAAW,CAAAtnD,GAChB,IAAI,CAAAstC,UAAK,CAAAttC,EAAW,IAAI,EACtB,IAAI,CAACgpC,WAAW,IAChB,IAAI,CAACE,WAAA,GACP,IACK,CAAAqe,iBAAA,CAAAvnD,KAEH,IAAI,CAACwnD,kBAAa,GAClB,IAAI,CAAClD,KAAA,IACL,IAAI,CAAAmD,UAAK,CAAAznD,GACP,IAAI,CAACrD,aAAU,OAAAynD,cAAA,MAAE,CAAA9E,SAAA,EAA+BoI,YAAA,iBACjD,IAGL1nD,EAAA0gC,OAAA,GAEA,EAA+BwI,YAC7B,SAAUzrD,CAAY,EACtBA,EAAUA,GAAA,CAAY,EACpB,IAAK,CAAAgsD,YAAA,EAAkB,KAAA0L,aAAA,EACxB,KAAA7C,kBAAA,GAEC,IAAI,CAACqV,YAAA,KAAiC,IAAE,CAAAvD,cAAa,OAAA9E,SAAA,EAAkBoI,YAAA,iBACvE,GACA,IAAI,CAACD,UAAQ,KAAK,CAAAtS,aAAA,CAAA13D,EAAA0rD,WAAA,EACnB,KAAAmb,KAAA,IAGH,EAG+BkD,mBACxB,UAAmB,CACxB,IAAI,CAAC/d,YAAA,CAAa,IAAG,CACrB,IAAI,CAAC0L,aAAa,MAClB,IAAI,CAACwQ,UAAA,CAAW,EAClB,KAAAC,WAAA,EAEA,EAUsBgC,UACb,UAAW,CACpB,YAAA90C,MAAA,uBAAAA,MAAA,WAAAva,WAAA,EAYoBsvD,QAClB,UAAgB,CAClB,YAAAhkD,IAAA,uBAAAA,IAAA,EAU6BikD,iBAClB,UAAe,SAEtB,iBAAAvD,UAAW,OAAAsD,OAAA,SAAAD,SAAA,2BAAA9a,MAAA,IAGX,KAAAr6B,QAAW,EAcSu2B,YACjB,UAAa,CAKpB,OADE,KAAA+e,UAAY,KAAU,CAAAD,gBAAA,SAAAnrD,aAAA,SAAA8qC,KAAA,QAAAA,KAAA,CAAAsf,UAAA,IACxB,KAAAgB,UAAA,EAO2BC,eAChB,UAAW,CACtB,aAAAlb,MAAA,YAAAA,MAAA,CAAAvR,OAAA,WAAAuR,MAAA,CAAAtR,OAAA,CAEA,EAK6CysB,oBACnC,SAAAjoD,CAAA,CAAAyS,CAAA,EAUyB,GATjCzS,EAAAogC,IAAA,GAGE3tB,EAAIhB,QAAA,CACNzR,EACKspC,wBAAA,mBAEJtpC,EAAAspC,wBAAA,kBAGC72B,EAAQkyC,kBAAY,EACpB,IAAIxwC,EAAAhxB,EAAWwa,IAAG,CAAE4M,eAAc,CAAE,IAAI,CAAAiI,mBAAQ,IACjDxS,EAAAgK,SAAA,CAAAmK,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IACD,GACSnK,SAAK,CAAAhK,GACdA,EAAI7X,KAAA,GAAUsqB,EAAS82B,KAAA,GAAA92B,EAAe+2B,KAAS,EAC/CxpC,EAAII,SAAO,CAAAqS,EAAAg3B,YAAA,EAAAh3B,EAAAi3B,iBAAA,EAAAj3B,EAAAk3B,iBAAA,EACb3pC,EAAA0gC,OAAA,EAEA,EAIuC+mB,WACjC,SAAAznD,CAAe,CAAAmpC,CAAW,EAC9B,IAAI+e,EAAa,KAAArkD,IAAA,CAAAskD,EAAA,KAAAr1C,MAAA,CACfq2B,GACA,IAAI,CAACtlC,IAAA,CAAM,QACX,IAAI,CAACiP,MAAA,IACP,IACK,CAAAs1C,sBAAA,CAAApoD,IAEJ,KAAA6oC,iBAAA,CAAA7oC,GAED,IAAI,CAAC2uC,OAAA,CAAA3uC,GACL,IAAI,CAACqoD,aAAO,CAAAroD,EAAA,KAAAyS,QAAA,EACZ,IAAI,CAAC5O,IAAA,CAAMqkD,EACb,KAAAp1C,MAAA,CAAAq1C,CAEA,EAKwCE,cACjC,SAAUroD,CAAA,CAAAyS,CAAA,EAAEA,IAKjBA,EAAS3rB,MAAA,KAAW,CAAAA,MAAA,CACpB2rB,EAASu2B,WAAA,GACTv2B,EAASw2B,cAAY,IAAAx2B,EAAEy2B,WAAa,CAAI,CAACC,YAAA,EACzC,GACF,KAAA8e,mBAAA,CAAAjoD,EAAAyS,GAEA,EAIiC80C,kBACjB,SAAUvnD,CAAE,EAC1BA,EAAI7X,KAAA,GAAU,IAAI,CAACohD,KAAA,OAAe,CAAAC,KAAK,EACzCxpC,EAAAI,SAAA,MAAAqpC,YAAA,OAAAC,iBAAA,OAAAC,iBAAA,CAEA,EAKmCge,aACxB,SAAAW,CAAgB,KACvB,KAAApB,YAAY,GACb,QACD,CAAyF,GACvF,KAAAzd,YAAA,OAAA0L,aAAA,GAAAmT,GAA+C,KAAAzD,kBAAA,GAEjD,MACK,EAaL,CATI,GACA,IAAI,CAAAP,KAAK,OAAA7xC,QAAgB,EAAK,KAAAA,QAAa,CAAAkyC,kBAAiB,OAAAP,cAAA,OAAAtF,eAAA,wBAC1D,IAAI,CAAArV,YAAa,OAAA0L,aAAkB,EAAK,CAAAmT,EAAA,CACxC,IAAIlmE,EAAA,IAAS,CAAIujE,UAAC,CAAW,IAAG,CAAApc,KAAK,CACjClnD,EAAC,KAAaujE,WAAW,CAAC,KAAApc,KAAY,CAC3C,KAAA2L,aAAA,CAAA/M,SAAA,EAAAhmD,EAAA,GAAAC,EAAA,EAAAD,EAAAC,EACD,OACD,EACF,OAEH,EAEA,EAKiCwmD,kBACrB,SAAA7oC,CAAiB,KACzB,KAAA5kB,eAAA,EAGF,IAAIshD,EAAA,IAAS,CAAA6rB,4BAAuB,EAEpCvoD,CAAAA,EAAIqgC,SACF,CAAC,IAAK,CAAAjlD,eACG,CAIX4kB,EAAA0xC,QAAA,EAAAhV,EAAAn1B,CAAA,IAAAm1B,EAAAl1B,CAAA,GAAAk1B,EAAAn1B,CAAA,CAAAm1B,EAAgDl1B,CAAA,EAGlD,KAAAghD,aAAA,CAAAxoD,GAZE,EAkByBsnD,YAChB,SAAStnD,CAAC,CAAI,CACrB,IAAI,CAAAynC,KAAA,GAAW,IAAG,CAAAA,KAAK,CAAAwB,cAAgB,CACzCjpC,EACKyxC,WAAA,MAAAkV,gBAAA,GAEJ3mD,EAAAyxC,WAAA,OAAA/uD,OAAA,EAGmC+lE,iBACvB,SAAKzoD,CAAM,CAAA0oD,CAAA,EACxB,IAAI51C,EAAQ41C,EAAA51C,MAAA,CACVA,IACA9S,EAAIugC,SAAO,CAAGmoB,EAAKnwD,WAAa,CAChCyH,EAAIktC,OAAA,CAAAwb,EAAc3b,aAAQ,CAC1B/sC,EAAI2oD,cAAW,CAAKD,EAAA5E,gBAAc,CAClC9jD,EAAIotC,QAAA,CAAUsb,EAAGj/C,cAAK,CACtBzJ,EAAImtC,UAAO,CAAMub,EAAEh/C,gBAAA,CACjBoJ,EAAIm3B,MAAO,CACTn3B,eAAAA,EAAA81C,aAAA,EAAA91C,EAA2Co3B,iBAAA,EAAAp3B,EAAAq3B,gBAAA,CAK7C,IACK,CAAA0e,mCAAA,CAAA7oD,EAAA8S,IAGH9S,EAAIsgC,WAAC,CAAAxtB,EAAAm3B,MAAA,CAAAjqC,EAA+B,IAAK,EAC1C,KAAA8oD,8BAAA,CAAA9oD,EAAA8S,IAKF9S,EAAAsgC,WAAA,CAAAooB,EAAA51C,MAAA,CAIL,EAAoCi2C,eACvB,SAAS/oD,CAAA,CAAA0oD,CAAA,EACpB,IAAI7kD,EAAM6kD,EAAA7kD,IAAA,CACRA,IACEA,EAAIomC,MAAA,EACJjqC,EAAIqgC,SAAC,CAAAx8B,EAAAomC,MAAA,CAAAjqC,EAAA,IAA+B,EACtC,IACK,CAAA8oD,8BAAA,CAAA9oD,EAAA0oD,EAAA7kD,IAAA,GAEJ7D,EAAAqgC,SAAA,CAAAx8B,EAIL,EAAsCukD,uBAClB,SAAApoD,CAAA,EAClBA,EAAIyxC,WAAW,CAAG,EAClBzxC,EAAIsgC,WAAS,CAAG,cAClBtgC,EAAAqgC,SAAA,UAEA,EAMuCsW,aAChC,SAAa32C,CAAA,CAAAgpD,CAAU,CAAM,CAChCA,GAAAA,IAAAA,EAAAnrE,MAAA,GAIA,EAAAmrE,EAAcnrE,MAAM,EACrBmrE,EAAApwE,IAAA,CAAAorB,KAAA,CAAAglD,EAAAA,GAEHhpD,EAAAysC,WAAA,CAAAuc,GAEA,EAM8CvP,gBAClC,SAAKz5C,CAAA,CAAA6/B,CACX,EAEJ,IAAmCpiD,EAAAwrE,EAAAlgB,EAAnC3B,EAAA,KAAA6f,oBAAmC,GAAAz3C,EAAA,KAAAgD,mBAAA,GAEnCy2C,EAAA,KAA+C,IAAhCppB,CADfA,EAAcA,GAAO,IACCskB,UAAc,CAAgBtkB,EAAcskB,UAAc,CAAW,IAAG,CAAAA,UAAK,CACnGpb,EAAS,KAA2C,IAA/BlJ,EAAAqkB,WAA0B,CAAKrkB,EAAAqkB,WAAA,MAAAA,WAAA,CACpD10C,EAAArsB,EAAUwa,IAAO,CAAI6Q,yBAAa,CAAA44B,EAAA53B,GAClC/xB,EAAQ0F,EAAAwa,IAAA,CAAA+Q,WAAA,CAAAc,GACRxP,EAAIogC,IAAA,GACJpgC,EAAIE,SAAS,CAAAziB,EAAOqxB,UAAK,CAAArxB,EAAiBsxB,UAAA,EAC1C/O,EAAIugC,SAAM,CAAK,EAAE,KAAAyjB,iBAAA,CACf,IAAI,CAAAvc,KAAA,EACLznC,CAAAA,EAAAyxC,WAAA,MAAA4M,QAAA,MAAA0F,uBAAA,IAEC,KAAA30C,KAAQ,EACT3xB,CAAAA,EAAAgpB,KAAA,OAEDzG,EAAI0P,MAAA,CAAAhT,EAAc,KAAA+qC,KAAkB,CAAIhqD,EAAKgpB,KAAO,MAAAA,KAAA,GAClDo5B,EAAAqpB,kBAAoB,MAAmB,CAAAzhB,KAAK,CAC9CwhB,GACK,KAAAE,kBAAA,CAAAnpD,EAAAviB,EAAAoiD,GAEJopB,GAAA,KAAAA,WAAA,CAAAjpD,EAAA6/B,GAEDkJ,GAAW,KAAAA,YAAA,CAAA/oC,EAAA6/B,GACb7/B,EAAA0gC,OAAA,EAEA,EAI0B4M,WACnB,SAAWttC,CAAE,KAChB,KAAA8sC,MAAA,EAMF,IAAuBsc,EAAnBtc,EAAO,KAAAA,MAAY,CAAAhmD,EAAA,KAAAA,MAAA,CAAAuiE,EAAAviE,GAAAA,EAAAs9C,iBAAA,OAAAklB,EAAAxiE,GAAAA,EAAAs9C,iBAAA,OACXglB,EAAVtc,EAAAyc,UAAU,CAAE,CAAWnhE,OAAQ,EAAEC,OAAA,CACnC,EAGC,KAAAo+D,gBAAA,GAEC3/D,GAASA,EAAOo+C,gBAAgB,KAChCmkB,GAASlmE,EAAOqf,gBAAgB,CACjC8mD,GAAAnmE,EAAAqf,gBAAA,EAEDxC,EAAIutC,WAAU,CAAGT,EAAOjhD,KAAI,CAE5BmU,EAAIwtC,UAAA,CAAaV,EAAGW,IAAO,CAAAtqD,EAAUwf,yBAAsB,CAAA0mD,CAAAA,EAAAC,CAAA,EAAAF,CAAAA,EAAAhhE,MAAA,CAAAghE,EAAA/gE,MAAA,IAC3D2X,EAAI0tC,aAAa,CAAGZ,EAAOvR,OAAO,CAAG8tB,EAAQD,EAAQhhE,MAAM,CAC7D4X,EAAA2tC,aAAA,CAAAb,EAAAtR,OAAA,CAAA8tB,EAAAF,EAAA/gE,MAAA,CAlBE,EAwB2BmgE,cACjB,SAAQxoD,CAAA,EAChB,KAAA8sC,MAAA,GAIF9sC,EAAIutC,WAAU,CAAG,GACnBvtC,EAAAwtC,UAAA,CAAAxtC,EAAA0tC,aAAA,CAAA1tC,EAAA2tC,aAAA,GAEA,EAOsDmb,+BAC7B,SAAQ9oD,CAAA,CAAA2F,CAAA,KAC7B,CAAAA,GAAO,CAAAA,EAAAskC,MAAA,OAAE,CAAY1O,QAAS,EAAEC,QAAA,CACjC,CACD,CACA,IAAI3xB,EAAAlE,EAAWukC,iBAAiB,EAAAvkC,EAAOwkC,gBACnC,CAEA5O,EAAO,MAAAn5C,KAAa,GAAKujB,EAAA41B,OAAc,IAAAC,EAAA,MAAAn5C,MAAA,GAAAsjB,EAAA61B,OAAA,IASpC,MARL71B,eAAAA,EAAIijD,aAAe,CACrB5oD,EACKgK,SAAA,MAAA5nB,KAAA,UAAAC,MAAA,CAAAk5C,EAAAC,GAEJx7B,EAAAgK,SAAA,SAAAuxB,EAAAC,GAEC3xB,GACD7J,EAAAgK,SAAA,CAAAH,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACQ,CAAkB0xB,QAASA,EAAQC,QAAAA,CAC9C,CAEA,EAImCguB,oBACxB,SAAexpD,CAAA,EACtB,eAAI,CAACukD,UAAA,EACL,IAAI,CAACkF,aAAY,CAAAzpD,GACnB,IACK,CAAA0pD,WAAA,CAAA1pD,KAEH,IAAI,CAAC0pD,WAAA,CAAA1pD,GACN,KAAAypD,aAAA,CAAAzpD,GAGH,EAWA2uC,QAAA,aAI2B+a,YAChB,SAAO1pD,CAAA,EACd,KAAA6D,IAAA,GAIF7D,EAAIogC,IAAC,GACL,IAAI,CAAA2oB,cAAa,CAAA/oD,EAAK,MACpB,gBAAI,CAAA6jD,QAAK,CACX7jD,EACK6D,IAAA,YAEJ7D,EAAA6D,IAAA,GAEH7D,EAAA0gC,OAAA,GAEA,EAI6B+oB,cACjB,SAAUzpD,CAAA,CAAK,CAAmB,GAC1C,KAAA8S,MAAA,WAAAva,WAAA,EAQoC,GAJpC,IAAI,CAACu0C,MAAA,OAAc,CAAAA,MAAA,CAAAyC,YAAA,EACpB,KAAAiZ,aAAA,CAAAxoD,GAGDA,EAAIogC,IAAI,GACN,IAAI,CAAAl3B,aAAc,EAAC,KAAAu+B,KAAA,EACnB,IAAI2hB,EAAU,KAAA3C,gBAAoB,GACpCzmD,EACK7X,KAAI,GAAKihE,EAAAhhE,MAAe,GAAAghE,EAAA/gE,MAAA,OACvB,IAAM,CAAA6gB,aAAe,EAC1BlJ,EAAA7X,KAAA,QAAAC,MAAA,QAAAC,MAAA,CACD,CACA,IAAI,CAACsuD,YAAA,CAAA32C,EAAiB,IAAK,CAAAgtC,eAAI,EAC/B,IAAI,CAAAyb,gBAAM,CAAAzoD,EAAA,MACVA,EAAI8S,MAAA,GACN9S,EAAA0gC,OAAA,GAhBE,EA6ByDmoB,oCACzB,SAAK7oD,CAAA,CAAA2F,CAAA,EAGrC,IAAgBgkD,EAAhB5E,EAAQ,IAAK,CAAGD,eAAA,MAAAI,yBAAA,IAAA0E,EAAAzmE,EAAAwa,IAAA,CAAAwQ,mBAAA,GAAA+pC,EAAA,KAAApxD,MAAA,CAAAq+C,gBAAA,GAAA/iD,EAAA2iE,EAAAx9C,CAAA,MAAAnf,MAAA,CAAA8vD,EAAA71D,EAAA0iE,EAAAv9C,CAAA,MAAAnf,MAAA,CAAA6vD,CAChB0R,CAAAA,EAAQxnE,KAAA,CAAMA,EACdwnE,EAAOvnE,MAAA,CAAQA,EACGsnE,CAAlBA,EAAKC,EAAS3pD,UAAA,QAASugC,SAAO,GAAOmpB,EAAK7f,MAAM,CAAC,KAAW6f,EAAK5f,MAAM,CAAC3nD,EAAO,GAC/EunE,EAAK5f,MAAM,CAAC3nD,EAAGC,GAASsnE,EAAK5f,MAAA,GAAS1nD,GACtCsnE,EAAK3f,SAAS,GACd2f,EAAKzpD,SACH,CAAA9d,EAAU,EAAGC,EAAW,GAG1BsnE,EAAKxhE,KAAA,CAAA48D,EAAAxb,KAAA,MAAAnhD,MAA8B,CAAC8vD,EAAM6M,EAAAvb,KAAA,MAAAnhD,MAAA,CAAA6vD,GAC1C,KAAK4Q,8BAA0B,CAAAa,EAAAhkD,GAC/BgkD,EAAKtpB,SAAI,CAAA16B,EAAAskC,MAAA,CAAAjqC,GACT2pD,EAAI9lD,IAAA,GACJ7D,EAAIE,SACF,OAAA9d,KAAA,CAAgB,EAAK,KAAMmW,WAAQ,CAAK,EACxC,MAAAlW,MAAA,CAAgB,EAAK,KAAAkW,WAAc,CAAK,GAE1CyH,EAAI7X,KAAA,CAAA+vD,EAAmB,KAAA9vD,MAAc,CAAA28D,EAAAxb,KAAS,CAAA2O,EAAA,KAAA7vD,MAAA,CAAA08D,EAAAvb,KAAA,EAChDxpC,EAAAsgC,WAAA,CAAAqpB,EAAAzX,aAAA,CAAA0X,EAAA,YAEA,EAMmCC,uBAC1B,iBAAK,CAA4BtiD,EAAG,IAAI,CAACre,IAAG,CAAG,IAAK,CAAA9G,KAAM,CAAG,EAAEolB,EAAA,KAAAve,GAAA,MAAA5G,MAAA,EACxE,CAEA,EAOwCynE,4BACd,UAAE,IACxB,IAAI,CAAA33C,eAAU,CAAO,CACrB,IAAI10B,EAAS0F,EAAKwa,IAAA,CAAA+Q,WAAA,MAAAyD,eAAA,CAClB,KAAI,CAAC/C,KAAK,CAAG,GACb,IAAI,CAACC,KAAI,IACT,IAAI,CAACrmB,GAAG,CAAC,SAAUvL,EAAQ2K,MAAM,EACjC,IAAI,CAACY,GAAA,UAAQvL,EAAa4K,MAAA,EAC1B,IAAI,CAACoe,KAAK,CAAGhpB,EAAQgpB,KAAK,CAC1B,IAAI,CAACmI,KAAK,CAAGnxB,EAAAmxB,KAAA,CACd,KAAAC,KAAA,EACH,GAS6Dk7C,uBACzC,SAAAC,CAAsB,EACxC,IAAIl4C,EAAK,KAAA+3C,sBAAiB,EACxB,KAAI,CAAC13C,eAAA,GACL,KAAA23C,2BAAqB,GACtBh4C,EAAA3uB,EAAAwa,IAAA,CAAAE,cAAA,CAAAiU,EAAA,KAAAK,eAAA,GAED,IAAI,CAAAA,eAAA,MACF63C,IACA,IAAI,CAAC5hE,MAAM,EAAI4hE,EAA2B5hE,MAAM,CAChD,IAAI,CAACC,MAAK,EAAG2hE,EAA2B3hE,MAAK,CAC7C,IAAI,CAAC4hE,KAAK,CAAGD,EAA2BC,KAAK,CAC7C,KAAAC,KAAQ,CAAIF,EAA2BE,KAAA,CACvCp4C,EAAOvK,CAAC,EAAIyiD,EAA2BG,UAAS,CAChDr4C,EAAKtK,CAAA,EAAKwiD,EAAGI,SAAgC,CAC7C,IAAI,CAAChoE,KAAA,CAAM4nE,EAAG5nE,KAA2B,CAC1C,KAAAC,MAAA,CAAA2nE,EAAA3nE,MAAA,EAEH,KAAA0vB,mBAAA,CAAAD,EAAA,kBAEA,EAK+C/oB,MAC7C,SAAIgc,CAAa,CAAK+lC,CAAS,EAC/B,IAAIuf,EAAK,IAAY,CAAArf,QAAA,CAAUF,EAC7B,KAAI,CAACrrB,WAAW,CAAC3S,UAAU,CAC7B,IACK,CAAA2S,WAAA,CAAA3S,UAAA,CAAAu9C,EAAAtlD,GAEJ5hB,EAAA6U,MAAA,CAAAsyD,WAAA,UAAAD,EAAAtlD,EAGH,EAqB0CwlD,aACpC,SAAexlD,CAAC,CAAAtnB,CAAgB,EACpC,IAAI6wB,EAAU,KAAAszC,eAAA,CAAAnkE,GAIhB,OAHIsnB,GACDA,EAAA,IAAA5hB,EAAAK,KAAA,CAAA8qB,IAEH,MAemCszC,gBACrB,SAAUnkE,CAAE,EAExBA,GAAYA,CAAAA,EAAO,CAAI,GAIvB,IAAA+sE,EAAYrnE,EAAKwa,IAAA,CAAA8sD,EAAAD,EAAA76C,mBAAA,OAAA+6C,EAAA,KAAAjjB,KAAA,CAAAkjB,EAAA,KAAA7d,MAAA,CAAA9uC,EAAAsI,KAAAtI,GAAA,CAAA6gC,EAAA,CAAAphD,EAAAohD,UAAA,KAAAphD,CAAAA,EAAA8mD,mBAAA,CAAAphD,EAAAqf,gBAAA,GACjB,QAAI,KAAQilC,KAAA,CACVhqD,EAAMmtE,gBAAA,EACPJ,EAAA/6C,oBAAA,OAEChyB,EAAKotE,aAAa,EACnB,MAAA/d,MAAA,OAIG,IAEoBsc,EAGxB5b,EAAYprD,EAAAC,EALRigC,EAAAn/B,EAAewa,IAAK,CAAAwQ,mBAAoB,GAEzB28C,EAAK,KAAAC,eAAA,QAAAje,EAAA,KAAAA,MAAA,CAAAke,EAAA,CAAGzjD,EAAG,EAAKC,EAAA,CAGnC,EACEslC,IACAU,EAAWV,EAAAW,IAAY,CACX2b,EAAVtc,EAAAyc,UAAU,CAAE,CAAWnhE,OAAQ,EAAEC,OAAA,CACnC,EAGC,KAAAo+D,gBAAA,GAGDuE,EAAazjD,CAAC,CAAG,EAAIjB,KAAKrI,KAAK,CAACD,EAAI8uC,EAAOvR,OAAO,EAAIiS,GAAexvC,EAAIorD,EAAQhhE,MAAM,EACxF4iE,EAAAxjD,CAAA,GAAAlB,KAAArI,KAAA,CAAAD,EAAA8uC,EAAAtR,OAAA,EAAAgS,GAAAxvC,EAAAorD,EAAA/gE,MAAA,GAEDjG,EAAA0oE,EAAS1oE,KAAa,CAAM4oE,EAAGzjD,CAAA,CAC/BllB,EAAAyoE,EAAAzoE,MAAA,CAAA2oE,EAAAxjD,CAAA,CAGA8a,EAAGlgC,KAAA,CAAMkkB,KAAGnI,IAAK,CAAI/b,GACrBkgC,EAAAjgC,MAAI,CAAAikB,KAAanI,IAAA,CAAA9b,GAAwB,IACvCyE,EAAA,IAAA3D,EAAAogD,YAA0B,CAAAjhB,EAAA,CAC1BiiB,oBAAmB,GACnBhtC,kBAAe,GACjBktC,cAAA,EACA,GACS,SAAPhnD,EAAOuF,MAAA,EACR8D,CAAAA,EAAA1L,eAAA,SAGD,IAAI,CAAA22B,mBAAiB,CAAI,IAAC5uB,EAAMmkB,KAAA,CAAAxgB,EAAA1E,KAAA,GAAA0E,EAAAzE,MAAA,uBAChC,IAAA4oE,EAAe,KAAAnkE,MAAA,CACfA,EAAIM,GAAA,KAAW,EACf,IAAIknB,EAAUxnB,EAAA86D,eAAA,CAAA/iB,GAAA,EAAAphD,GAchB,OAbE,IAAI,CAACqvD,MAAI,CAAA6d,EACT,IAAI,CAAA3hE,GAAA,UAAeiiE,GACjBP,GACD,MAAAjjB,KAAA,CAAAijB,CAAA,EAED,KAAA1hE,GAAA,CAAAyhE,GAAAphE,SAAA,GAIAvC,EAAOc,QAAO,IACdd,EAAAsS,OAAa,GAEbtS,EAAO,KACTwnB,CAEA,EAe6B3jB,UAC3B,SAAYlN,CAAY,EAE1B,OADEA,GAAOA,CAAAA,EAAY,IACrB0F,EAAAwa,IAAA,CAAAhT,SAAA,MAAAi3D,eAAA,CAAAnkE,GAAAA,EAAAuF,MAAA,QAAAvF,EAAA8wB,OAAA,IAEA,EAKuB28C,OACrB,SAAOvsE,CAAU,EACnB,OAAA2F,UAAAzG,MAAA,GAAAoE,MAAA8K,IAAA,CAAAzI,WAAAqL,QAAA,MAAAhR,IAAA,OAAAA,IAAA,GAAAA,CAAA,EAMuB2mB,WACd,WACT,QAEA,EAKsCnM,OACpC,SAAA2xC,CAAsB,EAExB,YAAAE,QAAA,CAAAF,EAEA,EAMwBp7B,OAClB,SAAAjJ,CAAA,EAEJ,IAAI0kD,EAAoB,iBAAAlxB,OAAA,kBAAAC,OAAA,QAAAsY,gBAAA,CAW1B,OAVI2Y,GACD,KAAAC,kBAAA,GAID,IAAI,CAAApiE,GAAA,SAAAyd,GACF0kD,GACD,KAAAE,YAAA,GAGH,MAQqBC,QACd,UAAU,CAEjB,OADE,KAAAxkE,MAAW,OAAAA,MAAA,CAAAujD,aAAA,OACb,MAQ6BkhB,gBAChB,UAAS,CAEtB,OADE,KAAAzkE,MAAW,OAAAA,MAAA,CAAA6jD,qBAAA,OACb,MAQqB6gB,QACd,UAAU,CAEjB,OADE,KAAA1kE,MAAW,OAAAA,MAAA,CAAAyjD,aAAA,OACb,MAQ6BkhB,gBAChB,UAAS,CAEtB,OADE,KAAA3kE,MAAW,OAAAA,MAAA,CAAA8jD,qBAAA,OACb,MAQoB94B,OACd,UAAW,CAEjB,OADE,KAAAhrB,MAAW,OAAAA,MAAA,CAAA4B,YAAA,OACb,MAQ4BgjE,eACf,UAAS,CAEtB,OADE,KAAA5kE,MAAW,OAAAA,MAAA,CAAA0jD,oBAAA,OACb,MAQsCmhB,gBAC1B,SAAW5hE,CAAA,CAAI0wC,CAAO,CAAC,CACjCA,EAAIA,GAAe,KAAO3zC,MAAM,CAAA25B,UAAW,CAAA12B,GAE3C,IAAI6hE,EAAU,IAAEzoE,EAAAmkB,KAAA,CAAAmzB,EAAAlzB,CAAA,CAAAkzB,EAAAjzB,CAAA,EAAAqkD,EAAA,KAAAzZ,iBAAA,GAIT,OAHL,KAAA3rC,KAAA,EAEDmlD,CAAAA,EAAAzoE,EAAAwa,IAAA,CAAAuJ,WAAA,CAAA0kD,EAAAC,EAAAnvD,EAAA,MAAA+J,KAAA,IAEI,CACHc,EAAGqkD,EAASrkD,CAAC,CAAGskD,EAActkD,CAAC,CACjCC,EAAAokD,EAAApkD,CAAA,CAAAqkD,EAAArkD,CAAA,CAGF,EAKyC4/C,yBAC9B,SAAApnD,CAAwB,CAAE,CACjC,IAAI,CAAAspC,wBAAwB,EAC7BtpC,CAAAA,EAAAspC,wBAAA,MAAAA,wBAAA,CAGH,EAIqBlwC,QACf,UAAO,CACTjW,EAAO0kC,iBAAiB,EACzB1kC,EAAA0kC,iBAAA,CAAAhB,cAAA,MAEL,CAEA,GAEA1jC,EAAOwa,IAAA,CAAAmuD,eAAc,EAAS3oE,EAAEwa,IAAO,CAAAmuD,eAAU,CAAA3oE,EAAA6U,MAAA,EAEjDuE,EAAApZ,EAAA6U,MAAA,CAAAC,SAAA,CAAA9U,EAAA8gB,UAAA,EAUA9gB,EAAA6U,MAAA,CAAAsZ,mBAAA,GAO8BnuB,EAAC6U,MAAA,CAAAkV,aAAA,EAAW,WAE1C,CAA8E/pB,EAC5E6U,MAAI,CAAAsyD,WAAe,UAAU9rE,CAAA,CAAAR,CAAA,CAAA+mB,CAAA,CAAAgnD,CAAA,EAC7B,IAAAzsC,EAASn8B,CAAM,CAAA3E,EAAY,CAC3BR,EAAO+K,EAAK/K,EAAA,IAAgBmF,EAACwa,IAAO,CAAAyP,eAAI,EAAEpvB,EAAO6lB,IAAA,CAAS7lB,EAAA80B,MAAS,CAAU,UACvEzF,CAAO,EACc,SAAhBA,CAAO,KACfrvB,CAAAA,EAAA6lB,IAAA,CAAAwJ,CAAA,KAEiB,SAATA,CAAM,CAAG,IACjBrvB,CAAAA,EAAA80B,MAAA,CAAAzF,CAAA,KAC+DlqB,EAC9Dwa,IAAI,CAAAqP,uBAAwB,CAAIhvB,EAAMA,EAAO,UAAa,CAC1D,IAAA8nD,EAAYimB,EAAS,IAAAzsC,EAAAthC,CAAA,CAAA+tE,EAAA,CAAA/tE,GAAA,IAAAshC,EAAAthC,EAAA,CACvB+mB,GAAAA,EAAA+gC,EACF,EACF,EAEA,EAOC3iD,EAAiC6U,MAAA,CAAAg0D,KAAc,IAK1CtvD,EAAOvZ,GAAAwa,IAAA,CAAAjB,gBAAA,CAAAe,EAAA,CACPvU,KAAA,IACA4oB,OAAO,EAETsnB,MAAA,EAAgB,EAAA17B,EACR,CACNzU,IAAA,IACA6oB,OAAQ,EACVqnB,OAAA,EAEJ,EAAyFh2C,GAEvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EASwFg0D,uBAElF,SAAW9kD,CACX,CAAA+kD,CAAS,CAASC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAEtB,IAA2B9wB,EAAUC,EAAAkB,EAAjCn1B,EAAAJ,EAAOI,CAAA,CAAAC,EAAAL,EAAgBK,CAAA,CAuC7B,MAtCI,iBAAA0kD,EACFA,EACKzuD,CAAA,CAAAyuD,EAAA,CAEJA,GAAA,GAGC,iBAAAE,EACFA,EACK3uD,CAAA,CAAA2uD,EAAA,CAEJA,GAAA,GAID7wB,EAAI6wB,EAAOF,EACT,iBAAAC,EACFA,EACKzuD,CAAA,CAAAyuD,EAAA,CAEJA,GAAA,GAGC,iBAAAE,EACFA,EACK3uD,CAAA,CAAA2uD,EAAA,CAEJA,GAAA,GAID7wB,EAAI6wB,EAAWF,EACb5wB,CAAAA,GAAWC,CAAA,IACXkB,EAAI,IAAM,CAACV,yBAAkB,GAC7Bz0B,EAAIJ,EAAMI,CAAC,CAAGg0B,EAAUmB,EAAIn1B,CAAC,CAC9BC,EAAAL,EAAAK,CAAA,CAAAg0B,EAAAkB,EAAAl1B,CAAA,EAGH,IAAArkB,GAAAmkB,KAAA,CAAAC,EAAAC,EAEA,EAO0D8kD,uBAC3C,SAAAnlD,CAAA,CAAuB8yB,CAAO,CAAAC,CAAS,EACpD,IAAIp2C,EAAI,IAAC,CAAAmoE,sBAAO,CAAA9kD,EAAA8yB,EAAAC,EAAA,8BACd,CAAAzzB,KAAO,CACRtjB,GAAAwa,IAAA,CAAAuJ,WAAA,CAAApjB,EAAAqjB,EAAAzK,EAAA,KAAA+J,KAAA,GAEH3iB,CADE,EAUyDg3C,uBAC5C,SAAAhpB,CAAsB,CAACmoB,CAAQ,CAAAC,CAAA,CAAU,CACtD,IAAIp2C,EAAI,IAAC,CAAAmoE,sBAAO,CAAAn6C,EAAA,kBAAAmoB,EAAAC,UAAA,IACd,CAAAzzB,KAAO,CACRtjB,GAAAwa,IAAA,CAAAuJ,WAAA,CAAApjB,EAAAguB,EAAApV,EAAA,KAAA+J,KAAA,GAEH3iB,CADE,EAOyB82C,eACrB,UAAc,CAClB,IAAA2xB,EAAY,IAAAppE,GAAAmkB,KAAA,KAAuB,CAAApe,IAAA,KAAS,CAAAD,GAAK,EACnD,YAAAqjE,sBAAA,CAAAC,EAAA,KAAAtyB,OAAA,MAAAC,OAAA,CAEA,EAe6CsyB,iBAC9B,SAAKvyB,CAAA,CAAcC,CAAA,EAChC,IAAApoB,EAAY,KAAA8oB,cAAA,GACd,YAAAE,sBAAA,CAAAhpB,EAAAmoB,EAAAC,EAEA,EAOgDoB,aAC1C,SAAcn0B,CAAA,CAAA8yB,CAAc,CAAAC,CACzB,EAEP,IAAuBp2C,EAAe63B,EAAlC7J,EAAO,KAAA8oB,cAAY,GAYzB,OAVE92C,EADE,KAAS,IAALm2C,GAA4B,KAAkB,IAAVC,EAErC,KAAA+xB,sBAAA,CAAAn6C,EAAA,kBAAAmoB,EAAAC,GAEJ,IAAA/2C,GAAAmkB,KAAA,MAAApe,IAAA,MAAAD,GAAA,EAGD0yB,EAAI,IAAKx4B,GAAOmkB,KAAA,CAAAH,EAAAI,CAAA,CAAAJ,EAAAK,CAAA,EACd,KAAKf,KAAA,EACNkV,CAAAA,EAAAx4B,GAAAwa,IAAA,CAAAuJ,WAAA,CAAAyU,EAAA7J,EAAA,CAAApV,EAAA,KAAA+J,KAAA,IAEHkV,EAAAyO,cAAA,CAAAtmC,EAEA,EAgBqDiuB,oBAClC,SAACuX,CAAA,CAAA2Q,CAAA,CAAsBC,CAAM,EAE9C,IAAIpoB,EAAK,IAAQ,CAAAw6C,sBAAU,CAAAhjC,EAAA2Q,EAAAC,GAAA9tB,EAAA,KAAA0uB,sBAAA,CAAAhpB,EAAA,KAAAmoB,OAAA,MAAAC,OAAA,EAC3B,IAAI,CAAClxC,GAAG,CAAC,OAAOojB,EAAU7E,CAAA,EAC5B,KAAAve,GAAA,OAAAojB,EAAA5E,CAAA,CAEA,EAG6BilD,eACf,SAAA3kD,CAAA,EAMZ,IAAyE4kD,EAAAC,EAAzElmD,EAAA/J,EAAA,KAAA+J,KAAA,EAAAmmD,EAAA,KAAAC,cAAyE,GAAAC,EAAA3pE,GAAAwa,IAAA,CAAA6I,GAAA,CAAAC,GAAAmmD,EAAAG,EAAA5pE,GAAAwa,IAAA,CAAAO,GAAA,CAAAuI,GAAAmmD,EAGzEF,EADE,sBAAAzyB,OAAa,CAEVx8B,CAAA,MAAAw8B,OAAA,EAEJ,KAAAA,OAAA,IAGD0yB,EADE,iBAAA7kD,EAEGrK,CAAA,CAAAqK,EAAA,CAEJA,EAAA,GAED,IAAI,CAAC5e,IAAG,EAAI4jE,EAASH,CAAAA,EAAWD,CAAS,EACzC,IAAI,CAACzjE,GAAA,EAAA8jE,EAASJ,CAAAA,EAAAD,CAAA,EACd,IAAI,CAACrjE,SAAO,GACd,KAAA4wC,OAAA,CAAAnyB,CAEA,EAK+BsjD,mBACxB,UAAmB,CACxB,IAAI,CAAC4B,gBAAgB,CAAG,IAAI,CAAC/yB,OAAO,CAEpC,IAAI,CAAAgzB,gBAAc,MAAA/yB,OAAc,CAEhC,IAAIpoB,EAAQ,IAAG,CAAA8oB,cAAA,EACf,KAAI,CAACX,OAAO,CAAG,SAEf,IAAI,CAACC,OAAO,UACZ,IAAI,CAAChxC,IAAG,CAAG4oB,EAAQvK,CAAA,CACrB,KAAAte,GAAA,CAAA6oB,EAAAtK,CAAA,EAOyB6jD,aACnB,UAAc,CAKlB,IAAI6B,EAAW,IAAK,CAAApyB,sBAAgB,MAAAF,cAAA,QAAAoyB,gBAAA,MAAAC,gBAAA,CACpC,KAAI,CAAChzB,OAAO,CAAG,IAAI,CAAC+yB,gBAAgB,CAEpC,IAAI,CAAC9yB,OAAO,MAAA+yB,gBAAa,CACzB,IAAI,CAAC/jE,IAAG,CAAGgkE,EAAa3lD,CAAA,CAExB,IAAI,CAACte,GAAA,CAAAikE,EAAgB1lD,CAAG,CACxB,IAAI,CAACwlD,gBAAgB,CAAG,IAAI,CAC9B,KAAAC,gBAAA,OAK8B7a,kBAChB,WACd,YAAAtX,sBAAA,MAAAF,cAAA,gBACF,CAEF,GAiBqBl+B,EAAuBiB,CAA1CA,EAAWxa,GAAOwa,IAAC,EAAyBjB,gBAAA,CAAAkB,EAAsCD,EAAA6Q,yBAAA,CAAA3Q,EAAAF,EAAAE,cAAA,CAAAF,EAEhF3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EAYAk1D,QAAA,KAcAC,QAAA,KAQAC,WAAA,KAKAC,eAAA,KAKAC,YAAA,KAMA/vD,SAAA,GAM0CgwD,WACpC,SAAWC,CAAA,CAAAC,CAAA,WAEdD,EAAA,KAAAE,WAAA,QAAAC,cAAA,IAEC,IAAK,CAAAR,OAAA,EAAU,IAAI,CAAAC,UAAA,EACpB,KAAAhkE,SAAA,KAEHokE,EAAA,KAAAL,OAAA,MAAAC,UAAA,CAJE,EAYuCQ,UAChC,SAAAJ,CAAgB,CAAAC,CAAK,MAxFvB3kD,EAyFP,OAzFOA,EAyFP,KAAAykD,UAAA,CAAAC,EAAAC,GAxFE,CACA,IAAIvqE,GAAOmkB,KAAK,CAACyB,EAAOm6B,EAAE,CAAC37B,CAAC,CAAEwB,EAAOm6B,EAAE,CAAC17B,CAAC,EACzC,IAAIrkB,GAAOmkB,KAAK,CAACyB,EAAOo6B,EAAE,CAAC57B,CAAC,CAAEwB,EAAOo6B,EAAE,CAAC37B,CAAC,EACzC,IAAIrkB,GAAOmkB,KAAK,CAACyB,EAAOs6B,EAAE,CAAC97B,CAAC,CAAEwB,EAAOs6B,EAAE,CAAC77B,CAAC,EAC1C,IAAArkB,GAAAmkB,KAAA,CAAAyB,EAAAq6B,EAAA,CAAA77B,CAAA,CAAAwB,EAAAq6B,EAAA,CAAA57B,CAAA,EACH,EA6FsEk6C,mBACrD,SAAKoM,CAAU,CAAAC,CAAU,CAAAN,CAClC,CAAAC,CAAA,EAKJ,IAAA3kD,EAAO,KAAA8kD,SAAmB,CAAAJ,EAAKC,GACjC,MAAAM,iBAAAA,GADiC1iC,YAAA,CAAAmB,yBAAA,CAAA1jB,EAAA+kD,EAAAC,GACjCxiC,MAAA,EAS2D2gB,qBACrD,SAAsB+hB,CAAA,CAAAR,CAAa,CAAAC,CAAA,EAQzC,MAAAM,iBAAAA,GAH4B1iC,YAAK,CAAAgB,uBACpB,MAAAuhC,SAAA,CAAuBJ,EAAOC,GAAUO,EAAAJ,SACzC,CAAAJ,EAAAC,IACZniC,MAAA,EAAA0iC,EAAA9hB,uBAAA,MAAAshB,EAAAC,IAAA,KAAAvhB,uBAAA,CAAA8hB,EAAAR,EAAAC,EAEA,EAO8DvhB,wBAC1C,SAAU8hB,CAAA,CAAAR,CAAU,CAAAC,CAClC,EAEe,IAAnB,IAAA7kD,EAAc,IAAK,CAAAglD,SAAA,CAAAJ,EAAAC,GAAAQ,EAAAT,EAAAQ,EAAAb,OAAA,CAAAa,EAAAZ,UAAA,CAAAj6D,EAAA,EAAA+6D,EAAAF,EAAAG,cAAA,CAAAF,GACjB96D,EAAK,EAAAA,IAAuC,GAC1C,CAAA66D,EAAO3W,aAAK,CAAAzuC,CAAA,CAAAzV,EAAA,CAAA+6D,GACb,QACH,CAEF,QAEA,EAQuExM,sBAClD,SAAKmM,CAAA,CAAAC,CAAgB,CAAAN,CAAU,CAAAC,CAAA,EAElD,IAAA5C,EACE,IAAa,CAAIC,eAAa,CAAA0C,EAC9BC,GAIJ,OAAA5C,EAAA5hE,IAAA,EAAA4kE,EAAAvmD,CAAA,EAAAujD,EAAA5hE,IAAA,CAAA4hE,EAAA1oE,KAAA,EAAA2rE,EAAAxmD,CAAA,EAAAujD,EAAA7hE,GAAA,EAAA6kE,EAAAtmD,CAAA,EAAAsjD,EAAA7hE,GAAA,CAAA6hE,EAAAzoE,MAAA,EAAA0rE,EAAAvmD,CAAA,EAU2D8vC,cACrD,SAAcnwC,CAAA,CAAAgnD,CAAW,CAAAV,CAAU,CAAAC,CACnC,EAEJ,IAAA3kD,EAAA,KAAAykD,UAAA,CAAAC,EAAAC,GAAAS,EAAoDA,GAAA,KAAAC,cAAA,CAAArlD,GAAAkB,EAAA,KAAAokD,gBAAA,CAAAlnD,EAAAgnD,GAEtD,OAAAlkD,IAAAA,GAAAA,EAAA,IAEA,EAMgCk9C,WACzB,SAAWuG,CAAE,KAChB,MAAA5mE,MAAY,CACb,QACD,CACA,IAAIgnE,EAAS,IAAK,CAAAhnE,MAAA,CAAA09C,SAAgB,CAAAtB,EAAA,CAAA6qB,EAAA,KAAAjnE,MAAA,CAAA09C,SAAA,CAAAnB,EAAA,OAEF,GAC9Bx6B,IAFF,CAAAglD,SAAA,IAAAH,GAEStoD,IAAA,UAAW+B,CAAQ,CAAC,CAEzB,OAAAA,EAAAI,CAAA,EAAAwmD,EAAAxmD,CAAA,EAAAJ,EAAAI,CAAA,EAAAumD,EAAAvmD,CAAA,EAAAJ,EAAAK,CAAA,EAAAumD,EAAAvmD,CAAA,EAAAL,EAAAK,CAAA,EAAAsmD,EAAAtmD,CAAA,IAKF,KAAAk6C,kBAAW,CAAAoM,EAAAC,EAAA,GAAAL,KAGf,KAAAY,uBAAA,CAAAR,EAAAC,EAAAL,EAEA,EAS+DY,wBAC7D,SAAAR,CAAA,CAAAC,CAAA,CAAAL,CAAA,EACkB,IAAE7/C,EAAa,CAAmBtG,EAAG,CAACumD,EAAQvmD,CAAC,CAAGwmD,EAAQxmD,CAAC,EAAI,EAAEC,EAAA,CAAAsmD,EAAAtmD,CAAA,CAAAumD,EAAAvmD,CAAA,GACnF,UACE,KAAA8vC,aAAW,CAAAzpC,EAAA,QAAA6/C,EAKf,EAKyCa,oBACvB,SAAEb,CAAA,KAChB,MAAA5mE,MAAY,CACb,QACD,CACA,IAAIgnE,EAAK,KAAAhnE,MAAA,CAAA09C,SAAmB,CAAAtB,EAAS,CAAA6qB,EAAa,IAAE,CAAAjnE,MAAA,CAAA09C,SAAY,CAAAnB,EAAA,SAC9D,KAAAqe,kBAAW,CAAAoM,EAAAC,EAAA,GAAAL,IAOfc,IAJuB,CAAQX,SAAK,IAAWH,GAAS5vE,KACnD,UAAWqpB,CAAA,EACd,OAAAA,EAAAI,CAAA,EAAAwmD,EAAAxmD,CAAA,EAAAJ,EAAAI,CAAA,EAAAumD,EAAAvmD,CAAA,GAAAJ,CAAAA,EAAAK,CAAA,EAAAumD,EAAAvmD,CAAA,EAAAL,EAAAK,CAAA,EAAAsmD,EAAAtmD,CAAA,CACA,IACF,KAAA8mD,uBAAA,CAAAR,EAAAC,EAAAL,EAEA,EAKkCU,eAEpB,SAAAjB,CAAA,EAmCd,MAlCI,CAASsB,QACJ,CACHxpD,EAAGkoD,EAAQjqB,EAAE,CACf9pD,EAAA+zE,EAAAhqB,EAAA,EACWurB,UACN,CACHzpD,EAAGkoD,EAAQhqB,EAAE,CACf/pD,EAAA+zE,EAAA9pB,EAAA,EACYsrB,WACP,CACH1pD,EAAGkoD,EAAQ9pB,EAAE,CACfjqD,EAAA+zE,EAAA/pB,EAAA,EACUwrB,SACL,CACH3pD,EAAGkoD,EAAQ/pB,EAAE,CACfhqD,EAAA+zE,EAAAjqB,EAAA,CAGF,CAkBF,EAQyCmrB,iBAC3B,SAAQlnD,CAChB,CAAAgnD,CAAS,CACT,CAEJ,IAASriC,EAAW+iC,EAAOC,EAAPC,EAAO,MACzB,IAAAC,KAAcb,EAEsC,GAClDW,CAAAA,CAAAA,CAAAA,CAFFA,EAAAX,CAAA,CAAAa,EAAA,EAEE/pD,CAAA,CAASuC,CAAA,CAAAL,EAAAK,CAAA,IAAAsnD,CAAAA,EAAA11E,CAAA,CAAAouB,CAAA,CAAAL,EAAAK,CAAA,CAAAA,GAITsnD,CAAAA,CAAAA,CAAAA,EAAA7pD,CAAA,CAASuC,CAAA,EAAAL,EAAAK,CAAA,IAAAsnD,CAAAA,EAAA11E,CAAA,CAAAouB,CAAA,EAAAL,EAAAK,CAAA,CAAAA,IAITsnD,EAAK7pD,CAAA,CAAAsC,CAAA,GAASunD,EAAA11E,CAAA,CAAAmuB,CAAA,EAAAunD,EAAA7pD,CAAA,CAAAsC,CAAA,EAAAJ,EAAAI,CAAA,CACdsnD,EAAAC,EAAA7pD,CAAgB,CAAAsC,CAAA,EAMhBukB,EAAK,CAAAgjC,EAAO11E,CAAA,CAAAouB,CAAG,CAAAsnD,EAAK7pD,CAAA,CAAMuC,CAAC,EAAAsnD,CAAAA,EAAA11E,CAAA,CAAAmuB,CAAA,CAAAunD,EAAA7pD,CAAA,CAAAsC,CAAA,EAI3BsnD,EAAA,CAAAljC,CAAAA,EAHWnkB,CAAC,CAAEqkB,EAAG1kB,EAAKI,CAAA,CAEjBunD,CAAAA,EAAE7pD,CAAK,CAAAuC,CAAC,CAAAskB,EAAMgjC,EAAM7pD,CAAA,CAAAsC,CAAA,CACzB,EAAqBskB,CAAAA,EAAAC,CAAA,GAIrB+iC,GAAA1nD,EAAUI,CAAA,EACXwnD,CAAAA,GAAA,GAGCA,IAAAA,GACD,MAGL,OAAAA,CAEA,EAO+ChE,gBAChC,SAAK0C,CAAU,CAAAC,CAAU,EACtC,IAAA3kD,EAAY,KAAA8kD,SAAA,CAAAJ,EAA0BC,GACxC,OAAA/vD,EAAAoM,yBAAA,CAAAhB,EAEA,EAK2B8jD,eACb,WACd,YAAA7wB,yBAAA,GAAAz0B,CAAA,EAO4B0nD,gBACd,WACd,YAAAjzB,yBAAA,GAAAx0B,CAAA,EAQiCs/C,gBAClB,SAAS1oE,CAAK,SAAe,KACpC4f,GAAA,CAAA5f,GAAW,KAAA6lE,aAAA,GACL,EAEL,MAAAA,aAAA,CAEJ,KAAAA,aAAA,CAGD,IAAO7lE,EACR,KAEHA,CADE,EASqB+J,MACrB,SAAU/J,CAAA,EAGZ,OAFE,IAAI,CAAC+nB,IAAI,CAAC,SAAU/nB,GACpB,KAAA+nB,IAAO,UAAK/nB,GACd,KAAAiL,SAAA,EAEA,EAOwC6lE,aACtC,SAAA9wE,CAAA,CAAAqvE,CAAA,EAEA,IAAA0B,EAAkB,IAAQ,CAAIpE,eAAS,CAAA0C,GAAArrE,KAAA,MAAAyqE,cAAA,GACzC,YAAA1kE,KAAA,CAAA/J,EAAA,KAAAgE,KAAA,CAAA+sE,EAEA,EAOyCC,cACvC,SAAAhxE,CAAA,CAAAqvE,CAAA,EAEA,IAAA0B,EAAkB,IAAQ,CAAIpE,eAAU,CAAA0C,GAAAprE,MAAA,MAAA4sE,eAAA,GAC1C,YAAA9mE,KAAA,CAAA/J,EAAA,KAAAiE,MAAA,CAAA8sE,EAEA,EAA2BvB,eACf,UAAK,CAMf,IAAIxmB,EAAA,KAAA6f,oBAAa,GAAA7rB,EAAA,KAAAA,OAAA,CAAA30B,EAAA/J,EAAA,KAAA+J,KAAA,EAAAD,EAAA7I,EAAA6I,GAAA,CAAAC,GAAAvI,EAAAP,EAAAO,GAAA,CAAAuI,GAAA4oD,EAAA7oD,EAAA40B,EAAAk0B,EAAApxD,EAAAk9B,EAAAm0B,EAAAF,EAAAC,EAAAE,EAAAH,EAAAC,EAAAlC,EAAA,KAAAO,WAAA,GACfN,EAAI,CACJnqB,GAAIrlC,EAAeuvD,EAAQlqB,EAAE,CAAEkE,GAC/BjE,GAAItlC,EAAeuvD,EAAQjqB,EAAE,CAAEiE,GAC/BhE,GAAIvlC,EAAeuvD,EAAQhqB,EAAE,CAAEgE,GACjC/D,GAAAxlC,EAAAuvD,EAAA/pB,EAAA,CAAA+D,EAEA,EAYF,OAXIhM,IACAiyB,EAAWnqB,EAAE,CAAC37B,CAAC,EAAIioD,EACnBnC,EAAWnqB,EAAE,CAAC17B,CAAC,EAAI+nD,EACnBlC,EAAWlqB,EAAE,CAAC57B,CAAC,EAAIgoD,EACnBlC,EAAWlqB,EAAE,CAAC37B,CAAC,EAAIgoD,EACnBnC,EAAWjqB,EAAE,CAAC77B,CAAC,EAAIgoD,EACnBlC,EAAWjqB,EAAE,CAAC57B,CAAC,EAAIgoD,EACnBnC,EAAWhqB,EAAE,CAAC97B,CAAC,EAAIioD,EACpBnC,EAAAhqB,EAAA,CAAA77B,CAAA,EAAA+nD,GAGHlC,CAEA,EAAwBoC,YAClB,UAAe,CAK6B,IAACC,EAAU,KAAAC,iBAAA,GAAAC,EAAA,KAAAC,oBAAA,GAAAzoB,EAAA,KAAA6f,oBAAA,GAAA6I,EAAAlyD,EAAAwpC,EAAAwoB,GAAAztB,EAAAvkC,EAAAkyD,EAAAJ,GAAAvtB,EAAAvkC,EAAAukC,EAAA,CAAE,EAAAiF,CAAA,IAAG,EAAG,EAAY,EAAAA,CAAA,IAAG,EAC9E,EAEJ,EAAI1K,EAAC,KAAAqzB,2BAAoC,GAAEhnD,EAAY,GAezD,OAf2D,IACvD,CAAAinD,cAAc,UAAQz2B,CAAA,CAAA5rC,CAAe,CAAC2rC,CAAK,EAC7CvwB,CAAA,CAAApb,EAAA,CAAA4rC,EAAA2I,eAAA,CAAAxF,EAAAyF,EAAA7I,EAEA,GAWFvwB,CAEA,EAAwB4kD,YAClB,UAAe,CAKnB,IAAA+B,EAAO,KAAAC,iBAAA,GAAAxtB,EAAAvkC,EAAA,KAAAiyD,oBAAA,GAAAH,GAAAhzB,EAAA,KAAAV,yBAAA,GAAAi0B,EAAAvzB,EAAAn1B,CAAA,GAAA6M,EAAAsoB,EAAAl1B,CAAA,SACL,CACmB07B,GAAErlC,EAAI,CAAG0J,EAAG,CAAC0oD,EAAKzoD,EAAA,CAAA4M,CACrC,EAAA+tB,GAAmBgB,GAAEtlC,EAAG,CAAG0J,EAAG0oD,EAAMzoD,EAAA,CAAA4M,CACpC,EAAA+tB,GAAmBiB,GAAEvlC,EAAI,CAAG0J,EAAG,CAAA0oD,EAAKzoD,EAAA4M,CACpC,EAAA+tB,GAAmBkB,GAAExlC,EAAG,CAAG0J,EAAG0oD,EAAKzoD,EAAA4M,CACrC,EAAA+tB,EACF,CAEA,EAWiC94C,UAC1B,SAAU6mE,CAAK,SACpB,KAAA9C,OAAA,MAAAO,WAAA,GAGA,IAAI,CAAAN,UAAA,CAAa,KAAA5lB,KAAA,MAAA2lB,OAAA,MAAAQ,cAAA,GACfsC,IAIF,IAAI,CAAC/C,OAAA,MAAAsC,WAAyB,GAC9B,KAAAU,gBAAW,OAAAA,gBAAA,IAJV,MAW2BR,kBAChB,WACd,OAAAhyD,EAAAqR,gBAAA,MAEA,EAIiC6gD,qBACb,WAClB,IAAA/9C,EAAO,KAAA8oB,cAAA,SAAC,CAAG,EAAG,EAAG,EAAG,EAAU9oB,EAAOvK,CAAC,CAACuK,EAAAtK,CAAA,CACzC,EAEwC4oD,mBACvB,SAASvZ,CAAA,EACxB,IAAKwZ,EAAkB,GAMzB,MALI,CAAAxZ,GAAc,KAAKpP,KAAC,EACrB4oB,CAAAA,EAAA,KAAA5oB,KAAA,CAAA2oB,kBAAA,CAAAvZ,GAFI,GAEJ,EAIHwZ,EAAA,KAAApnE,GAAA,CANO,IAMP,KAAAC,IAAA,CANO,IAMP,KAAAd,MAAA,CANO,IAMP,KAAAC,MAAA,CANO,IAMP,KAAAumB,KAAA,CANO,IAMP,KAAAC,KAAA,CANO,IAMP,KAAApI,KAAA,CANO,IAMP,KAAAwzB,OAAA,CANO,IAMP,KAAAC,OAAA,CANO,IAMP,KAAA93C,KAAA,CANO,IAMP,KAAAC,MAAA,CANO,IAMP,KAAAkW,WAAA,MAAA6W,KAAA,MAAAC,KAAA,EASyCmD,oBACtB,SAACqkC,CAAa,EAC/B,IAAIrnC,EAAA,IAAa,CAACmC,aAAY,MAC5BklC,GAAO,MAAApP,KAAA,CACR,OAAAj4B,CACD,CACA,IAAI7hB,EAAM,IAAG,CAAAyiE,kBAAU,CAAAvZ,GAAAyZ,EAAA,KAAA/C,WAAA,QAAAA,WAAA,cACrB5/D,GAAO,GAAMA,EACd2iE,EAAAlyE,KAAA,EAEC,KAAAqpD,KAAS,EACVj4B,CAAAA,EAAA5R,EAAA,KAAA6pC,KAAA,CAAAj1B,mBAAA,KAAAhD,EAAA,EAED8gD,EAAM3iE,GAAA,CAAKA,EACX2iE,EAAAlyE,KAAO,CAAAoxB,EACTA,EANE,EAawBmC,cACd,UAAK,CACf,IAAIhkB,EAAM,IAAG,CAAAyiE,kBAAU,KAAAE,EAAA,KAAAhD,cAAA,QAAAA,cAAA,QACrBgD,EAAA3iE,GAAO,GAAMA,EACd,OAAA2iE,EAAAlyE,KAAA,CAEa,IACRmyE,EAAO,IAAK,CAAAV,oBAAK,GAAApyE,EAAA,CACjBgpB,MAAA,KAAYA,KAAA,CACZqI,WAAYyhD,CAAO,CAAC,EAAE,CACtBxhD,WAAYwhD,CAAO,IACnBnoE,OAAQ,IAAI,CAACA,MAAM,CACnBC,OAAO,IAAK,CAAAA,MAAK,CACjBumB,MAAO,IAAI,CAACA,KAAK,CACjBC,MAAO,IAAI,CAACA,KAAK,CACjBO,MAAO,IAAI,CAACA,KAAK,CACnBC,MAAA,KAAAA,KAAA,EAIN,OAFEihD,EAAM3iE,GAAA,CAAKA,EACX2iE,EAAAlyE,KAAO,CAAMuf,EAAK4R,aAAA,CAAA9xB,GACpB6yE,EAAAlyE,KAAA,EAQyCmqE,6BAChB,UACnB,CAEJ,IAAAhwD,EAAO,KAAAA,WAAA,OAAK,CAAGgP,EAAR,KAAAnlB,KAAA,CAAAmW,EAAaiP,EAAb,KAAAnlB,MAAA,CAAAkW,CACT,CAEA,EAQkDyjC,0BAC3B,SAAAptB,CAAa,CAAAC,CAAA,EACnB,SAAbD,GACDA,CAAAA,EAAA,KAAAA,KAAA,EAEc,SAAbC,GACDA,CAAAA,EAAA,KAAAA,KAAA,EAID,IAAI23B,EAAKv0B,EAAaC,EAAEs+C,EAAA5hD,IAAAA,GAAAC,IAAAA,EASZ,GARV,KAAA3F,aAAiB,EACjB+I,EAAO,IAAI,CAAC7vB,KAAA,CACd8vB,EACK,KAAA7vB,MAAA,GAGH4vB,EAAOu0B,CADPA,EAAO,KAAW+hB,4BAAC,IACDhhD,CAAC,CACpB2K,EAAAs0B,EAAAh/B,CAAA,EAECgpD,EACD,YAAAC,mBAAA,CAAAx+C,EAAA,KAAA7pB,MAAA,CAAA8pB,EAAA,KAAA7pB,MAAA,CACD,CAA+C,IAC7C+pB,EAAAzU,EAAYqU,kBAAO,CAAAC,EAAAC,EAAA,CACnB9pB,OAAQ,IAAI,CAACA,MAAM,CACnBC,OAAO,KAAAA,MAAA,CACPumB,MAAOA,EACTC,MAAAA,CACA,GACF,YAAA4hD,mBAAA,CAAAr+C,EAAA7K,CAAA,CAAA6K,EAAA5K,CAAA,CAEA,EAQ6CipD,oBAC/B,SAAaruE,CACvB,CAAAC,CAAA,SAAK,KAAA6mB,aAAa,EAAa3B,EAAGnlB,EAAA,IAAS,CAAImW,WAAC,CAEhDiP,EAAAnlB,EAAA,KAAAkW,WAAA,EAAE,CAAUgP,EAAGnlB,EAAQolB,EAAAnlB,CAC3B,GAOyC0tE,4BACxB,UAAoB,CAGnC,IAAA3oB,EAAS,KAAA6f,oBAA0B,GACrC,OAAAnjE,EADqC,KAAAk4C,yBAAA,GAAAoL,EAAA,IACrCld,SAAA,QAAAkR,OAAA,CACF,CACF,GACyFj4C,GAEvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EAKuBwzC,WACZ,UAAO,CAOlB,OANI,KAAAhE,KAAO,CACTtkD,GACSogD,YAAW,CAAEtrC,SAAA,CAAAwzC,UAAA,CAAApnC,IAAA,MAAAojC,KAAA,OACf,IAAM,CAAC3gD,MAAA,EACb,KAAAA,MAAA,CAAA2kD,UAAA,OAEH,MAOyBI,aACd,UAAO,CAOlB,OANI,KAAApE,KAAO,CACTtkD,GACSogD,YAAW,CAAEtrC,SAAA,CAAA4zC,YAAA,CAAAxnC,IAAA,MAAAojC,KAAA,OACf,IAAM,CAAC3gD,MAAA,EACb,KAAAA,MAAA,CAAA+kD,YAAA,OAEH,MAQsChkD,cAC3B,SAAOikD,CAAA,EAOlB,OANI,KAAArE,KAAO,CACTtkD,GACSogD,YAAW,CAAEtrC,SAAA,CAAApQ,aAAA,CAAAwc,IAAA,MAAAojC,KAAA,MAAAqE,GACf,IAAM,CAAChlD,MAAA,EACb,KAAAA,MAAA,CAAAe,aAAA,MAAAikD,GAEH,MAQqCpwD,aAC1B,SAAOowD,CAAA,EAOlB,OANI,KAAArE,KAAO,CACTtkD,GACSogD,YAAW,CAAEtrC,SAAA,CAAAvc,YAAA,CAAA2oB,IAAA,MAAAojC,KAAA,MAAAqE,GACf,IAAM,CAAChlD,MAAA,EACb,KAAAA,MAAA,CAAApL,YAAA,MAAAowD,GAEH,MAQwBhC,OAClB,SAAUv2C,CAAI,CAAI,CAOxB,OANI,KAAAk0C,KAAO,2BAAYA,KAAC,CAAA9oD,IAAS,CAC/BwE,GACSogD,YAAW,CAAEtrC,SAAA,CAAA6xC,MAAA,CAAAzlC,IAAA,MAAAojC,KAAA,MAAAl0C,GACf,IAAM,CAACzM,MAAM,EACnB,KAAAA,MAAA,CAAAgjD,MAAA,MAAAv2C,GAEH,KAGD,GAAW,UAEN,CAGJ,IAAAgJ,EAAApZ,GAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAm0D,EAAA,kBAG+C,SACzCC,EAAWvpD,CAAG,CAAO6G,CAAI,CAAA2iD,CAAA,EAC7B,IAAAC,EAAa,CAAC,EAAeD,EAC3BvnD,OAAO,UAAQ/E,CAAO,EACxBusD,CAAA,CAAAvsD,EAAA,CAAA8C,CAAA,CAAA9C,EAAA,GAGF/H,EAAA6K,CAAA,CAAA6G,EAAA,CAAA4iD,EALyB,GAOzB,CAyCyF1tE,GAEvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EAKuC6mD,gBACrC,SAAc4I,CAAe,EAE7B,IAAIoJ,EAAiB,IADrBpJ,CAAAA,EAAIA,GAAoBgJ,CAAM,SAC8C,OACnEK,IAAI,MAAAD,EAAA,EAAAjzE,MAAA,MAAA6pE,EAAA,CAAA7pE,MAAA,EAGf,CAAAmzE,SAtDIA,EAAAC,CAAc,CAAAnpC,CAAc,CAAAopC,CAAA,KAC9BD,IAAAnpC,EAEF,MACS,EAiCX,CAhCI,GAAK7lC,MAAMC,OAAQ,CAAA+uE,GAAA,CAA2D,GAC5E,CAAAhvE,MAAOC,OAAK,CAAA4lC,IAAAmpC,EAAApzE,MAAA,GAAAiqC,EAAAjqC,MAAA,CACb,QACD,CAAsD,IACpD,IAAIuV,EAAC,EAAAgR,EAAS6sD,EAAYpzE,MAAE,CAAAuV,EAAAgR,EAAehR,IAAG,GAC5C,CAAA49D,EAAOC,CAAK,CAAA79D,EAAA,CAAA00B,CAAA,CAAA10B,EAAA,EACb,QACH,CAEF,MACS,EAA4C,CAsBvD,GArBQ69D,GAAc,iBAAKA,EAAY,CACnC,IACWtjE,EADPojE,EAAC/4D,OAAA+4D,IACD,CAAAE,GAEF,GACA,CAAAnpC,GAAY,iBAAAA,GAAA,CAAAopC,GAAAH,EAAAlzE,MAAA,GAAAma,OAAA+4D,IAAA,CAAAjpC,GAAAjqC,MAAA,CACb,QACD,CAAiD,IAC/C,IAAAuV,EAAM,EAAKgR,EAAE2sD,EAAAlzE,MAAA,CAAAuV,EAAAgR,EAAAhR,IAI4B,GACvCzF,WAJFA,CAAAA,EAAAojE,CAAA,CAAA39D,EAAA,GAIWzF,UAAAA,GAGT,CAAAqjE,EAAOC,CAAK,CAAAtjE,EAAA,CAAAm6B,CAAA,CAAAn6B,EAAA,EACb,QAFD,CAKH,QACH,GAiBE,KAAAmjE,EAAA,SAEA,EAK6BxR,UACvB,SAAA7hE,CAAc,EAElB,IAAIiqE,EAAMjqE,GAAcA,EAAAiqE,WAAA,EAAAgJ,EAAAziD,EAAA,IAAAy5C,SAAA,IACtB,CAAAz5C,EAAY,EAGd0iD,EAAI,KAAW1iD,EAAQ,KAAAy5C,EAAiB,EACtCjqE,GAAUA,EAAM+mE,eAAa,EAC9BmM,EAAA,KAAA1iD,EAAAxwB,EAAA+mE,eAAA,EAEH,MANG,KAAAtc,UAAA,CAAAzqD,EACD,EAY4ByqD,WAC5B,SAAUzqD,CAAa,EAEvB,IAAAiqE,EAAQjqE,CADRA,EAAIA,GAAc,IACIiqE,WAAA,EAAAgJ,EAIxB,OAHEjzE,EAAKiqE,WAAM,CAAAA,EACX,IAAI,CAAC,IAAAA,EAAU,IACf,KAAApI,SAAW,CAAA7hE,GACb,KAEJ,EACC,IAICif,EAAmBvZ,GAAOwa,IAAO,CAAAjB,gBAAkB,CAAsCvZ,GACvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EAM+Ci/C,kBAC7C,SAAAzc,CAAA,CAAA02B,CAAA,EAE6F,GAC3F,MAAAjN,WAAY,OAAAzc,KAAA,QAAA3gD,MAAA,OAAAA,MAAA,CAAAwgD,aAAA,QACb,QAED,CAKA,IAAgBr9B,EAAAkkD,EAAA/6D,EAAZyqC,EAACpD,EAAWlzB,CAAA,CAAAq2B,EAAAnD,EAAAjzB,CAAA,CAAAupD,EAAA/4D,OAAA+4D,IAAA,MAAA5D,OAAA,EAAAp1C,EAAAg5C,EAAAlzE,MAAA,GAGI,IADpB,KAAAm4D,QAAA,GAEEj+B,GAAI,EAAKA,IACsB,GAA/B3kB,EAAI29D,CAAC,CAAIh5C,EAAC,CACR,KAAAq5C,gBAAS,CAAAh+D,KAIX+6D,EAAA,KAAAC,cAAe,CAAA+C,EAAA,KAAAhE,OAAA,CAAA/5D,EAAA,CAAAi+D,WAAA,MAAAlE,OAAA,CAAA/5D,EAAA,CAAA8nC,MAAA,EAgBbjxB,IAF8BA,CAAAA,EAAK,KAAAokD,gBAAA,EAAI9mD,EAAGs2B,EAAMr2B,EAAAo2B,CAClD,EAAAuwB,EAAI,GACclkD,EAAA,MAEjB,OADC,KAAA+rC,QAAO,CAAA5iD,EACRA,CAnBD,CAsBJ,QAEA,EAK6B48D,eAClB,SAAUsB,CAAA,EAAU,IAC3B,IAAGl+D,KAAK,KAAAoK,QAAa,CACvB8zD,EAAA,KAAA9zD,QAAA,CAAApK,EAAA,CAAAA,EAAA,KAGF,EAO6B+8D,iBACd,UAAY,CAEzB,IAAKpnD,EAAI,KAAAokD,OAAW,CAAQ,IAC1B,IAAI5zB,KAAAxwB,EAAgB,CACpB,IAAAwoD,EAAgB,IAAM,CAAG/zD,QAAA,CAAA+7B,EAAc,CAEvCxwB,CAAM,CAACwwB,EAAQ,CAAC2B,MAAA,CAAAq2B,EAAcnvB,gBAAc,KAAgB,CAC1D37B,KAAK,KAAK,CAAEtO,UAAK,CAAA4Q,CAAA,CAAAwwB,EAAiB,CAAMhyB,CAAC,CAAAwB,CAAQ,CAACwwB,EAAG,CAAM/xB,CAAC,KAChEuB,CAAA,CAAAwwB,EAAA,CAAA83B,WAAA,CAAAE,EAAAnvB,gBAAA,MAAA37B,KAAA,MAAAi9C,eAAA,CAAA36C,CAAA,CAAAwwB,EAAA,CAAAhyB,CAAA,CAAAwB,CAAA,CAAAwwB,EAAA,CAAA/xB,CAAA,IACF,CAEA,EASuC6/C,wBAC3B,SAAArnD,CAAA,CAAwB,CAGhC,GACA,MAAAs1C,wBAAW,OAAAxuD,MAAA,QAAAA,MAAA,CAAA+9C,WAAA,OAAA/9C,MAAA,OAAAA,MAAA,CAAAwgD,aAAA,QACZ,YAEDtnC,EAAIogC,IAAA,GAEJ,IAAItuB,EAAS,IAAC,CAAA8oB,cAAkB,GAAA42B,EAAA,KAAAzB,2BAAA,GAAA3oB,EAAA,KAAAtgD,MAAA,CAAAs9C,iBAAA,CAOlC,OANEpkC,EAAIE,SAAM,CAAI4R,EAAMvK,CAAE,CAAAuK,EAAQtK,CAAE,EAChCxH,EAAI7X,KAAA,CAAM,EAACi/C,CAAA,MAAAA,CAAiB,GAAI,EAChCpnC,EAAI0P,MAAA,CAAAhT,EAAiB,KAAA+J,KAAA,GACrBzG,EAAIqgC,SAAS,CAAC,IAAI,CAAGiV,wBAAwB,CAC7Ct1C,EAAI0xC,QAAO,EAAA8f,EAAAjqD,CAAA,IAAAiqD,EAAAhqD,CAAA,GAAAgqD,EAAAjqD,CAAA,CAAAiqD,EAAAhqD,CAAA,EACXxH,EAAA0gC,OAAW,GACb,MAW0CuoB,YACxC,SAAgBjpD,CAAA,CAAA6/B,CAAkB,EAClCA,EAAcA,GAAA,GAQd,IAAI2xB,EAAI,KAAAzB,2BAAA,GAAAx3D,EAAA,KAAAyrD,iBAAA,CAAA5hE,EAAAovE,EAAAjqD,CAAA,CAAAhP,EAAAlW,EAAAmvE,EAAAhqD,CAAA,CAAAjP,EAAA2rD,EAAA,SAAArkB,EAAAqkB,WAAA,CAAArkB,EAAAqkB,WAAA,MAAAA,WAAA,CAAAuN,EAAA,GAgCV,OA/BEzxD,EAAIogC,IAAA,GACJpgC,EAAIsgC,WAAC,CAAaT,EAAKt9C,WAAc,OAAeA,WAAS,CAE7D,IAAI,CAAAo0D,YACD,CAAA32C,EAAA6/B,EACS8jB,eAEV,OAAAA,eAAA,EAGF3jD,EAAI8gC,UAAA,EAAA1+C,EAAa,GAAAC,EAAA,EAAAD,EAAAC,GACf6hE,IACAlkD,EAAIwgC,SAAC,GAAoD,IACvD,CAAAwvB,cAAA,UAAAz2B,CAAA,CAAA5rC,CAAA,CAAA2rC,CAAA,CAAqD,CAGnDC,EAAA6H,cAAA,EAAA7H,EAAkCqI,aAAA,CAAAtI,EAAA3rC,KAElC8jE,EAAW,GACXzxD,EAAI8pC,MAAM,CACRvQ,EAAQhyB,CAAC,CAAGnlB,EAAAm3C,EAAQ/xB,CAAQ,CAAAnlB,GAG/B2d,EAAA+pC,MAAA,CAAAxQ,EAAAhyB,CAAA,CAAAnlB,EAAAm3C,EAAAgC,OAAA,CAAAhC,EAAA/xB,CAAA,CAAAnlB,EAAAk3C,EAAAiC,OAAA,EAEH,GACEi2B,GACDzxD,EAAA8S,MAAA,IAGH9S,EAAA0gC,OAAW,GACb,MAY0DyoB,mBACxC,SAAAnpD,CAAA,CAAAviB,CAAkB,CAAAoiD,CAAA,EAClCA,EAAWA,GAAY,GAQvB,IAAIztB,EAAIjvB,GAAAwa,IAAA,CAAAqU,kBAAA,MAAA5vB,KAAA,MAAAC,MAAA,CAAA5E,GAAA8a,EAAA,KAAAA,WAAA,CAAA2Q,EAAA,KAAAA,aAAA,CAAA86C,EAAA,KAAAA,iBAAA,CAAA5hE,EAAAgwB,EAAA7K,CAAA,CAAAhP,EAAA2Q,CAAAA,EAAA,KAAApiB,MAAA,CAAAq0C,OAAA,GAAA19C,EAAA2K,MAAA,EAAA47D,EAAA3hE,EAAA+vB,EAAA5K,CAAA,CAAAjP,EAAA2Q,CAAAA,EAAA,KAAApiB,MAAA,CAAAq0C,OAAA,GAAA19C,EAAA4K,MAAA,EAAA27D,EAYV,OAXEhkD,EAAIogC,IAAC,GACL,IAAI,CAAAuW,YAAW,CAAG32C,EAAA6/B,EAAc8jB,eAAoB,OAAAA,eAAW,EAC/D3jD,EAAIsgC,WACF,CAACT,EACAt9C,WACD,EACA,KAAAA,WAAA,CAGFyd,EAAI8gC,UAAO,EAAA1+C,EAAA,GAAAC,EAAA,EAAAD,EAAAC,GACX2d,EAAA0gC,OAAW,GACb,MAW2CqI,aACzC,SAAgB/oC,CAAA,CAAA6/B,CAAkB,EAClCA,EAAQA,GAAA,GACR7/B,EAAIogC,IAAA,GACJ,IAAsC5wB,EAAkB1rB,EAApDo0D,EAAa,KAAApxD,MAAA,CAAeq+C,gBAAM,GA2BxC,OA1BEnlC,EAAIsmD,YAAW,CAAApO,EAAgB,EAAG,EAAAA,EAAc,KAChDl4C,EAAIsgC,WAAM,CAAAtgC,EAAAqgC,SAAoB,CAAAR,EAAAxnC,WAAA,OAAAA,WAAA,CAC5B,IAAI,CAAAH,kBAAc,EACnB8H,CAAAA,EAAAsgC,WAAA,CAAAT,EAAAvnC,iBAAA,OAAAA,iBAAA,EAED,IAAI,CAACq+C,YAAS,CAAA32C,EAAA6/B,EAAA+jB,eAAA,OAAAA,eAAA,EACd,IAAI,CAAAv6D,SAAU,GACZ,KAAAo+C,KAAA,EAMDj4B,CAAAA,EAAA,KAAAi4B,KAAA,CAAAj1B,mBAAA,IACwD,IACvD,CAAAw9C,cAAI,UAAqBz2B,CAAI,CAAA5rC,CAAA,CAAA2rC,CAAA,EAC7Bx1C,EAAIw1C,EAAQ6zB,OAAA,CAAax/D,EAAC,CACxB4rC,EAAIqI,aAAQ,CAAAtI,EAAA3rC,KACV6hB,GACD1rB,CAAAA,EAAAX,GAAAwa,IAAA,CAAAE,cAAA,CAAA/Z,EAAA0rB,EAAA,EAEF+pB,EAAA+J,MAAA,CAAAtjC,EAAAlc,EAAAyjB,CAAA,CAAAzjB,EAAA0jB,CAAA,CAAAq4B,EAAAvG,GAEH,GAEAt5B,EAAA0gC,OAAW,GACb,MAOuC0wB,iBACzB,SAASvvB,CAAW,EAClC,YAAArkC,QAAA,CAAAqkC,EAAA,OAAArkC,QAAA,CAAAqkC,EAAA,CAAAD,aAAA,MAAAC,EAEA,EAOiD6vB,kBACrC,SAAA7vB,CAAqB,CAAAb,CAAA,EAKjC,OAJI,IAAK,CAAAe,mBAAmB,EACzB,MAAAA,mBAAA,KAED,KAAAA,mBAAW,CAAAF,EAAA,CAAAb,EACb,MAiByC2wB,sBAC3B,SAAYl0E,CAAA,EAED,IACrB,IAAIqG,KADNrG,GAASA,CAAAA,EAAc,IAChBA,EACP,KAAAi0E,iBAAA,CAAA5tE,EAAArG,CAAA,CAAAqG,EAAA,EAEF,aAUEy1D,WAAA,WAIF,EAOED,SAAA,WAEJ,CACF,GACqGn2D,GAEnGwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAogD,YAAA,CAAAtrC,SAAA,EAOA25D,YAAA,IAQ8CC,gBAChC,SAAA7zE,CAAe,CAAA8zE,CAAA,EAO3B,IAAAC,EAAO,UAAY,GAAQpsC,EAAAmsC,CAL3BA,EAAYA,GAAa,IAKEnsC,UAAA,EAAAosC,EAAAjzE,EAAAgzE,EAAAhzE,QAAA,EAAAizE,EAAA/xC,EAAA,YACzB78B,GAAQwa,IAAI,CAAAgqB,OAAA,EACZxpC,OAAA,IAAY,CACZ4pC,WAAU/pC,EAAKkL,IAAA,CACfw/B,SAAU,IAAI,CAACkS,cAAW,GAAArzB,CAAA,CAC1B8gB,SAAU,KAAAupC,WAAgB,CAAA9yE,SACxB,SAAWV,CAAQ,EACnBJ,EAAMgL,GAAA,QAAA5K,GACN4hC,EAAAt2B,gBAAA,GACF5K,GACA,EAAuB6mC,WACd,UAAS,CAChB3nC,EAAAqL,SAAA,GACFs8B,GACF,CACF,EAEA,EAQ8CqsC,gBAChC,SAAAh0E,CAAe,CAAA8zE,CAAA,EAO3B,IAAAC,EAAO,UAAY,GAAQpsC,EAAAmsC,CAL3BA,EAAYA,GAAa,IAKEnsC,UAAA,EAAAosC,EAAAjzE,EAAAgzE,EAAAhzE,QAAA,EAAAizE,EAAA/xC,EAAA,YACzB78B,GAAQwa,IAAI,CAAAgqB,OAAA,EACZxpC,OAAA,IAAY,CACZ4pC,WAAU/pC,EAAKiL,GAAA,CACfy/B,SAAU,IAAI,CAACkS,cAAW,GAAApzB,CAAA,CAC1B6gB,SAAU,KAAAupC,WAAgB,CAAA9yE,SACxB,SAAWV,CAAO,EAClBJ,EAAMgL,GAAA,OAAA5K,GACN4hC,EAAAt2B,gBAAA,GACF5K,GACA,EAAuB6mC,WACd,UAAS,CAChB3nC,EAAAqL,SAAA,GACFs8B,GACF,CACF,EAEA,EAQuCssC,SACrC,SAAYj0E,CAAA,CAAa8zE,CAAE,EAO3B,IAAAC,EAAO,UAAY,GAAQpsC,EAAAmsC,CAL3BA,EAAYA,GAAa,IAKEnsC,UAAA,EAAAosC,EAAAjzE,EAAAgzE,EAAAhzE,QAAA,EAAAizE,EAAA/xC,EAAA,YACzB78B,GAAQwa,IAAI,CAAAgqB,OAAA,EACZxpC,OAAA,IAAY,CACZ4pC,WAAU/pC,EAAA0E,OAAA,CACVgmC,SAAU,EACVL,SAAU,KAAAupC,WAAgB,CAAA9yE,SACxB,SAAWV,CAAA,CAAW,CACtBJ,EAAMgL,GAAA,WAAgB5K,GACtB4hC,EAAAt2B,gBAAA,GACF5K,GACA,EAAwB6mC,WAChB,UAAO,CACb3F,EAAAv2B,MAAA,CAAAzL,GACF2nC,GACF,CACF,EACF,CAEA,GAAyFxiC,GACvFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EAmBqB0vB,QACf,UAAY,CAAsC,GACpDrjC,CAAAA,SAAI,sBAAmBA,SAAQ,IAahC,YAAA4tE,QAAA,CAAAluD,KAAA,MAAA1f,UACH,CAbI,IAA2BggB,EAAA6tD,EAAtBC,EAAiB,EAAC,CAAIC,EAAA,OACzB/tD,KAAAhgB,SAAe,GAAK,CACtB8tE,EAAAx5E,IAAA,CAAA0rB,GAC2D,IACzD,IAAAlR,EAAO,EAAAgR,EAAAguD,EAAiBv0E,MAAA,CAAAuV,EAAAgR,EAAAhR,IACxBkR,EAAA8tD,CAAgB,CAAMh/D,EAAA,CACtB++D,EAAc/+D,IAAQgR,EAAC,EACzBiuD,EAAAz5E,IAAA,MAAAs5E,QAAA,CAAA5tD,EAAAhgB,SAAA,IAAAggB,EAAA,CAAAhgB,SAAA,IAAA6tE,IAEF,OACKE,CAKP,EAOyDH,SACnD,SAAYtsD,CAAE,CAAAkC,CAAA,CAAArqB,CAAA,CAAA00E,CAAA,EAElB,IAAgBG,EAAhBtyC,EAAQ,IAAQ,CAEhBlY,EAAKA,EAAAsX,QAAS,GAKb3hC,EAJCA,EAID0F,GAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,CAAAtL,GAFI,GAKH,CAAAmoB,EAAAjC,OAAW,OACZ2uD,CAAAA,EAAA1sD,EAAA8F,KAAA,OAMD,IAAI6mD,EAAAvyC,EAAe0kC,eACN,CAAA/gD,OAAQ,CAACiC,GAAY,IAAI0sD,GACzBtyC,EAAA0kC,eAAS,CAAA/gD,OAAA,CAAA2uD,CAAA,QAElBxqC,EAAYwqC,EAAU,KAAAjsD,GAAA,CAAAisD,CAAA,KAAAA,CAAA,UAAAjsD,GAAA,CAAAT,EAAA,CACxB,SAAYnoB,GACbA,CAAAA,EAAAsP,IAAA,CAAA+6B,CAAA,EAGCyqC,IAEAzqD,EADE,CAAAA,EAAAnE,OAAK,MAEFmkB,EAAApd,WAAA5C,EAAA3c,OAAA,UAEJuf,WAAA5C,IAGY,IACb0qD,EAAQ,CACRr0E,OAAA,IAAY,CACZ4pC,WAAUtqC,EAAAsP,IAAA,CACV27B,SAAS5gB,EACT6gB,QAAQlrC,EAAQ28C,EAAA,CAChB5R,OAAA/qC,EAAU+qC,MAAQ,CAClBH,SAAO5qC,EAAQ4qC,QAAS,CAA6CE,MACnE9qC,EAAO8qC,KAAQ,EAAK,SAAMnqC,CAAO,CAAAq0E,CAAO,CAAAC,CAAe,EACzD,OAAAj1E,EAAA8qC,KAAA,CAAAlkB,IAAA,CAAA2b,EAAA5hC,EAAAq0E,EAAAC,EACA,EAAwD5zE,SAClD,SAAUV,CAAA,CAAAq0E,CAAA,CAAAC,CAAA,EACZJ,EACFtyC,CACK,CAAAsyC,CAAA,KAAAA,CAAA,KAAAl0E,EAEJ4hC,EAAAh3B,GAAA,CAAA4c,EAAAxnB,IAEC+zE,GAGJ10E,EAAAqB,QAAA,EAAArB,EAAAqB,QAAA,CAAAV,EAAAq0E,EAAAC,EACA,EAA0D/sC,WACpD,SAAAvnC,CAAe,CAAAq0E,CAAA,CAAAC,CAAA,GACjBP,IAIFnyC,EAAA32B,SAAQ,GACV5L,EAAAkoC,UAAA,EAAAloC,EAAAkoC,UAAA,CAAAvnC,EAAAq0E,EAAAC,GACF,CAEA,SAAiB,EAGZvvE,GAAAwa,IAAA,CAAA4rB,YAAA,CAAAipC,EAAAzqC,UAAA,CAAAyqC,EAAA9pC,QAAA,CAAA8pC,EAAAnqC,QAAA,CAAAmqC,GAEJrvE,GAAAwa,IAAA,CAAAgqB,OAAA,CAAA6qC,EACH,CAED,GAAiB,SAEhBt9D,CAAA,EAEA,aAGA,IAAI/R,EAAO+R,EAAM/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,QAAAA,EAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CACfpZ,EAAOkuD,IAAI,CAAC,CACZluD,EAAAijC,IAAA,mCACD,MAED,GASEirB,IAAA,CAAAluD,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAA6U,MAAA,EAOAwsD,gBAAArhE,EAAA6U,MAAA,CAAAC,SAAA,CAAAusD,eAAA,CAAA/hE,MAAA,YAOA9D,KAAA,OAOAo6B,GAAA,EAOAC,GAAA,EAEAyrC,gBAAAthE,EAAA6U,MAAA,CAAAC,SAAA,CAAAwsD,eAAA,CAAAhiE,MAAA,YAK8By9B,WACvB,SAAUziC,CAAA,EACf,IAAI,CAACoiC,SAAS,cAAApiC,GAChB,KAAAk1E,SAAA,EAEA,EAIsBA,UAChB,UAAY,CACd,IAAI,CAAC55C,EAAE,EAAG,KAAK,CAAEC,EAAA,CACnB,IACK,CAAAA,EAAI,KAAO,CAAAD,EAAA,CACP,IAAG,CAAAC,EAAI,EAAG,MAAAD,EAAA,EAClB,MAAAA,EAAA,MAAAC,EAAA,CAGH,EAIuB21B,QAErB,SAAA3uC,CAAA,EAYA,IAAI+Y,EAAA,IAAS,CAAAA,EAAA,CAAAzS,KAAAzkB,GAAA,MAAAk3B,EAAA,MAAA32B,KAAA,MAAA42B,EAAA,KAAAA,EAAA,CAAA1S,KAAAzkB,GAAA,MAAAm3B,EAAA,MAAA32B,MAAA,MAAA4tE,EAAA,KAAA7tE,KAAA,CAAAgyB,EAAA,KAAA/xB,MAAA,CAAAklB,EAAA,MAAAnlB,KAAA,GAAAolB,EAAA,MAAAnlB,MAAA,GAAAuwE,EAAA75C,IAAAA,GAAAC,IAAAA,EAEbhZ,EAAIwgC,SAAO,GAEXxgC,EAAI8pC,MAAM,CAACviC,EAAIwR,EAAIvR,GACnBxH,EAAA+pC,MAAA,CAAAxiC,EAAa0oD,EAAIl3C,EAAAvR,GAEjBorD,GAAW5yD,EAAI6yD,aAAW,CAAAtrD,EAAA0oD,EAAA73C,YAAAW,EAAAvR,EAAAD,EAAA0oD,EAAAzoD,EAAA4Q,YAAAY,EAAAzR,EAAA0oD,EAAAzoD,EAAAwR,GAC1BhZ,EAAA+pC,MAAA,CAAAxiC,EAAa0oD,EAAIzoD,EAAA4M,EAAA4E,GAEjB45C,GAAW5yD,EAAI6yD,aAAQ,CAAAtrD,EAAA0oD,EAAAzoD,EAAA4M,EAAAgE,YAAAY,EAAAzR,EAAA0oD,EAAA73C,YAAAW,EAAAvR,EAAA4M,EAAA7M,EAAA0oD,EAAAl3C,EAAAvR,EAAA4M,GACvBpU,EAAA+pC,MAAA,CAAAxiC,EAAawR,EAAIvR,EAAA4M,GAEjBw+C,GAAW5yD,EAAG6yD,aAAI,CAAAtrD,EAAA6Q,YAAAW,EAAAvR,EAAA4M,EAAA7M,EAAAC,EAAA4M,EAAAgE,YAAAY,EAAAzR,EAAAC,EAAA4M,EAAA4E,GAClBhZ,EAAA+pC,MAAA,CAAAxiC,EAAaC,EAAIwR,GAEjB45C,GAAa5yD,EAAA6yD,aAAA,CAAAtrD,EAAAC,EAAA4Q,YAAAY,EAAAzR,EAAA6Q,YAAAW,EAAAvR,EAAAD,EAAAwR,EAAAvR,GAEbxH,EAAIgqC,SAAC,GACP,KAAAwf,mBAAA,CAAAxpD,EAEA,EAKwCgrC,SACtC,SAAYF,CAAsB,SAAC,KAAAjrB,SAAA,aAAM,KAAM,KACjD,CAAAp9B,MAAA,CAAAqoD,GAGF,CAIA,GAOoD3nD,EAClDkuD,IAAO,CAAAvkC,UAAa,CAAC,SAAW9uB,CAAC,CAAA+mB,CAAQ,CAAQ,CACnD,OAAA5hB,EAAA6U,MAAA,CAAAsyD,WAAA,QAAAtsE,EAAA+mB,EAEC,CACF,EAASzI,GAAQ,SAEhBpH,CAAA,EAEA,aAOA,IAAI/R,EAAO+R,EAAQ/R,MAAE,EAAA+R,CAAAA,EAAA/R,MAAA,KAAAoZ,EAAApZ,EAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAA1a,EAAAsB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA/hB,GAAA,CAAAC,EAAAqB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA9hB,GAAA,CAAA8mB,GAAAzlB,EAAAwa,IAAA,CAAAnB,OAAA,CAAArZ,EAAAwa,IAAA,CAAAiL,qBAAA,KACnBzlB,EAAO2vE,QAAK,EACZ3vE,EAAAijC,IAAA,uCACD,MAED,GAQE0sC,QAAA,CAAA3vE,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAA6U,MAAA,EAOArZ,KAAA,WAOAkqB,OAAA,KAWAkqD,iBAAiB,GAEjBtO,gBAAAthE,EAAA6U,MAAA,CAAAC,SAAA,CAAAwsD,eAAA,CAAAhiE,MAAA,WAmBsCy9B,WACpC,SAAUrX,CAAY,CAAAprB,CAAA,EACtBA,EAAKA,GAAS,GACd,IAAI,CAACorB,MAAA,CAASA,GAAC,GACf,IAAI,CAACgX,SAAA,cAAuBpiC,GAC9B,KAAAu1E,sBAAA,CAAAv1E,EAEA,EAGoCw1E,uBAC3B,UAAsB,CAC/B,OAAArqD,EAAA,KAAAC,MAAA,SAEA,EAA0CmqD,uBACrB,SAAAv1E,CAAgB,EAEnC,IAA6By1E,EAAzBC,EAAS,KAAAC,eAAgB,CAAA31E,GAAA41E,EAAA,KAAAN,gBAAA,MAAAx6D,WAAA,GAC7B,IAAI,CAACnW,KAAA,CAAM+wE,EAAG/wE,KAAQ,CAAMixE,EAC5B,IAAI,CAAChxE,MAAA,CAAQ8wE,EAAS9wE,MAAA,CAAAgxE,EACpB51E,EAAA61E,OAAA,EACEJ,CAAAA,EACE,KAAAjH,sBAAA,EAEA1kD,EAAG4rD,EAAQjqE,IAAG,CAAG,IAAK,CAAAqP,WAAW,CAAG,EAAI86D,EAAc,EAExD7rD,EAAA2rD,EACAlqE,GACA,KAAK,CAAAsP,WACA,GAAO86D,EAAA,CAEf,oBAAAp5B,OAAA,MAAAC,OAAA,GAEqB,SAAfz8C,EAAOyL,IAAA,EACb,MAAAA,IAAA,CAAAzL,EAAA61E,OAAA,CAAAH,EAAAjqE,IAAA,CAAAgqE,EAAA3rD,CAAA,EAEoB,SAAd9pB,EAAMwL,GAAA,EACZ,MAAAA,GAAA,CAAAxL,EAAA61E,OAAA,CAAAH,EAAAlqE,GAAA,CAAAiqE,EAAA1rD,CAAA,EACiB,IAChB,CAAAkW,UAAW,EACXnW,EAAG4rD,EAAQjqE,IAAG,CAAG,IAAK,CAAA9G,KAAM,CAAG,EAAIixE,EAAc,EACnD7rD,EAAA2rD,EAAAlqE,GAAA,MAAA5G,MAAA,GAAAgxE,EAAA,CACF,CAEA,EAU4BD,gBAEb,UAAK,CAQlB,IAAAvqD,EAAO,KAAAkqD,gBAAA,MAAAE,sBAAA,QAAApqD,MAAA,CAAAqB,EAAAroB,EAAAgnB,EAAA,QAAAwB,EAAAxoB,EAAAgnB,EAAA,cACL,CACA3f,KAAKghB,EACLjhB,IAAAohB,EACAjoB,MAJK+nB,CAAAroB,EAAA+mB,EAAA,SAAAqB,EAKP7nB,OALOioB,CAAAxoB,EAAA+mB,EAAA,SAAAwB,CAMT,CAEA,EAKwC2gC,SACtC,SAAcF,CAAe,EAAkC,OAC7DvuC,EAAQ,IAAK,CAAAsjB,SAAO,YAAMirB,GAAA,CAC5BjiC,OAAA,KAAAA,MAAA,CAAApmB,MAAA,EACF,EAKA,EAI4B8wE,aACtB,SAAavzD,CAAK,EAItB,IAAImH,EAAC/C,EAAO,IAAM,CAAIyE,MAAC,CAAMhrB,MAAC,CAAM0pB,EAAI,IAAG,CAAAmW,UAAA,CAAAnW,CAAA,CAAAC,EAAA,KAAAkW,UAAA,CAAAlW,CAAA,IACzC,CAAApD,GAAA6T,MAAA,KAAApP,MAAA,CAAAzE,EAAA,GAAAoD,CAAA,EAGD,QACD,CACAxH,EAAIwgC,SAAO,GACXxgC,EAAK8pC,MAAI,KAAO,CAAAjhC,MAAI,GAAK,CAAAtB,CAAA,CAAKA,EAAA,KAAAsB,MAAA,IAAArB,CAAA,CAAAA,GAAA,IAC5B,IAAApU,EAAQ,EAAAA,EAAKgR,EAAOhR,IACpB+T,EAAI,IAAO,CAAA0B,MAAO,CAAAzV,EAAG,CACvB4M,EAAA+pC,MAAA,CAAA5iC,EAAAI,CAAA,CAAAA,EAAAJ,EAAAK,CAAA,CAAAA,GAEF,QAEA,EAIuBmnC,QAChB,SAAK3uC,CAAA,EACR,KAAAuzD,YAAA,CAAAvzD,IAGJ,KAAAwpD,mBAAA,CAAAxpD,EAEA,EAIuBsF,WACd,UAAS,CAClB,YAAAe,GAAA,WAAAxoB,MAAA,CAKF,GAOwDsF,EACtD2vE,QAAO,CAAOhmD,UAAO,UAAY9uB,CAAA,CAAA+mB,CAAY,CAAQ,CACvD,OAAA5hB,EAAA6U,MAAA,CAAAsyD,WAAA,YAAAtsE,EAAA+mB,EAAA,SAEC,CACF,EAASzI,GAAQ,SAEhBpH,CAAA,EAEA,aAOA,IAAI/R,EAAO+R,EAAM/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,KAAAtB,EAAAsB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA/hB,GAAA,CAAAC,EAAAqB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA9hB,GAAA,CAAAya,EAAApZ,EAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAxT,EAAA5F,EAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,IAAA5F,EAAAwa,IAAA,CAAAnB,OAAA,CACfrZ,EAAOmsD,IAAI,CAAC,CACZnsD,EAAAijC,IAAA,mCACD,MAED,GASEkpB,IAAA,CAAAnsD,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAA6U,MAAA,EAOArZ,KAAA,OAOAivB,KAAA,KAEA62C,gBAAiBthE,EAAO6U,MAAM,CAACC,SAAS,CAACwsD,eAAe,CAAChiE,MAAM,CAAC,mBAEhE+hE,gBAAArhE,EAAA6U,MAAA,CAAAC,SAAA,CAAAusD,eAAA,CAAA/hE,MAAA,SAMqCy9B,WACnC,SAAgBtS,CAAA,CAAAnwB,CAAY,EAE5B,MAAKA,CADLA,EAAOsL,EAAQtL,GAAI,KACJmwB,IAAA,CACf,IAAI,CAACiS,SAAS,cAAYpiC,GAC5B,KAAA+1E,QAAA,CAAA5lD,GAAA,GAAAnwB,EAEA,EAKmC+1E,SAC5B,SAAO5lD,CAAA,CAAOnwB,CAAK,EAIxB,KAAAmwB,IAAO,CAAAzqB,EAASwa,IAAA,CAAA2a,eAAU,CAAAr2B,MAAAC,OAA2B,CAAC0rB,GAAMA,EAAAzqB,EAAYwa,IAAA,CAAAyZ,SAAA,CAAAxJ,EAAA,EAC1EzqB,EAAA2vE,QAAA,CAAA76D,SAAA,CAAA+6D,sBAAA,CAAA3uD,IAAA,MAAA5mB,GAAA,GAEA,EAImCg2E,oBAE7B,SAAAzzD,CAAgB,EASpB,IAAI9f,EAASwzE,EAAA,EAAAC,EAAA,EAAApsD,EAAA,EAAAC,EAAA,EAAAiR,EAAA,EAAAC,EAAA,EAAAzI,EAAA,MAAAyN,UAAA,CAAAnW,CAAA,CAAAsC,EAAA,MAAA6T,UAAA,CAAAlW,CAAA,CAEbxH,EAAKwgC,SAAQ,GAAyC,IAEpD,IAAAptC,EAAA,EAAUgR,EAAK,IAAK,CAAEwJ,IAAA,CAAA/vB,MAAA,CAAAuV,EAAAgR,EAAA,EAAAhR,EAEJ,OAEhBlT,CAFFA,EAAQ,IAAO,CAAC0tB,IAAE,CAAAxa,EAAA,CAEX,SACH,IACAmU,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAItnB,CAAO,IACX8f,EAAA+pC,MAAM,CAAAxiC,EAAA0I,EAAAzI,EAAAqC,GAER,KAAK,KACH,IACAtC,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAA,IACAwzE,EAAgBnsD,EAChBosD,EAAensD,EACfxH,EAAA8pC,MAAM,CAAAviC,EAAA0I,EAAAzI,EAAAqC,GAER,KAAK,KACH,IACAtC,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAW,IACXu4B,EAAWv4B,CAAO,CAAC,EAAE,CACrBw4B,EAAIx4B,CACF,IAOF8f,EAAA6yD,aAAM,CAAA3yE,CAAA,IAAA+vB,EAAA/vB,CAAA,IAAA2pB,EAAA4O,EAAAxI,EAAAyI,EAAA7O,EAAAtC,EAAA0I,EAAAzI,EAAAqC,GAER,KAAK,KACH,IAMA7J,EAAIsuC,gBAAU,CAAApuD,CAAA,IAAA+vB,EAAA/vB,CAAA,IAAA2pB,EAAA3pB,CAAA,IAAA+vB,EAAA/vB,CAAA,IAAA2pB,GACdtC,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAW,IACXu4B,EAAWv4B,CAAO,CAAC,EAAE,CACrBw4B,EAAMx4B,CAAA,IAER,KAAK,KACA,QACH,IACAqnB,EAAImsD,EACJlsD,EAAImsD,EACJ3zD,EAAAgqC,SAAM,EAEZ,CAGF,EAIuB2E,QAChB,SAAA3uC,CAAA,EACL,IAAI,CAACyzD,mBAAmB,CAACzzD,GAC3B,KAAAwpD,mBAAA,CAAAxpD,EAEA,EAIqBof,SACnB,UAAO,CAET,6BAAA9Z,UAAA,uBAAArc,GAAA,mBAAAC,IAAA,MAEA,EAKwC8hD,SACtC,SAAcF,CAAe,EAAkC,OAC7DvuC,EAAU,IAAC,CAAIsjB,SAAK,YAAeirB,GAAA,CAAAl9B,KAAE,KAAOA,IAAA,CAAKxjB,GAAA,UAAK6C,CAAA,EAAI,OAAAA,EAAAqK,KAAA,EAC5D,EACF,EAEA,EAKgDyzC,iBACjC,SAASD,CAAA,MAAC7lC,EAAA,KAAA+lC,QAAA,EAAc,aACrC,CAAAvoD,MAAM,CAAAqoD,IAIR,OAHI7lC,EAAA8I,UAAS,EACV,OAAA9I,EAAA2I,IAAA,CAEH3I,CAIA,EAIuBK,WACd,UAAU,CACnB,YAAAsI,IAAA,CAAA/vB,MAAA,EAK4Bu1E,gBAGtB,UACA,CAOkD,IAEpD,IAFoBlzE,EAAgC28B,EAAjD+2C,EAAI,GAAIC,EAAG,GAAgBH,EAAY,EAAOC,EAAG,EAAApsD,EAAA,EAAAC,EAAA,EAEpDpU,EAAA,EAAUgR,EAAK,IAAK,CAAEwJ,IAAA,CAAA/vB,MAAA,CAAAuV,EAAAgR,EAAA,EAAAhR,EAAA,CAEJ,OAEhBlT,CAFFA,EAAQ,IAAO,CAAC0tB,IAAE,CAAAxa,EAAA,CAEX,SACH,IACAmU,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAW,IACX28B,EAAM,GAER,KAAK,KACH,IACAtV,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAA,IACAwzE,EAAgBnsD,EAChBosD,EAAWnsD,EACXqV,EAAM,GAER,KAAK,KACH,IAQAA,EAAI15B,EAAUwa,IAAA,CAAAue,gBAAA,CAAA3U,EAAAC,EAAAtnB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACdqnB,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAM,IAER,KAAK,KACH,IAQA28B,EAAI15B,EAAUwa,IAAA,CAAAue,gBAAA,CAAA3U,EAAAC,EAAAtnB,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,IAAAA,CAAA,KACdqnB,EAAIrnB,CAAO,CAAC,EAAE,CACdsnB,EAAAtnB,CAAM,IAER,KAAK,KACA,QACH,IACAqnB,EAAImsD,EACJlsD,EAAAmsD,CAEJ,CAAgC92C,EAC3BxT,OAAK,UAAOlC,CAAA,EACfysD,EAAGh7E,IAAI,CAACuuB,EAAMI,CAAC,EACjBssD,EAAAj7E,IAAA,CAAAuuB,EAAAK,CAAA,CACA,GACAosD,EAAGh7E,IAAI,CAAC2uB,GACVssD,EAAAj7E,IAAA,CAAA4uB,EAEA,CA5DA,IAmEA0C,EAAOroB,EAAA+xE,IAAA,EAAAvpD,EAAAxoB,EAAAgyE,IAAA,QACL,CACA3qE,KAAKghB,EACLjhB,IAAAohB,EACAjoB,MAJK+nB,CAAAroB,EAAA8xE,IAAA,GAAA1pD,EAKP7nB,OALOioB,CAAAxoB,EAAA+xE,IAAA,GAAAxpD,CAMT,CACF,CAEA,GAOoDlnB,EAC9CmsD,IAAA,CAAAxiC,UAAc,UAAU9uB,CAAK,CAAA+mB,CAAU,KACzC,iBAAI/mB,EAAU+vB,UAAO,CAAU,CAC/B,IAAA+lD,EAAO91E,EAAc+vB,UAAU,CAAoB5qB,EACjD4wE,cAAW,CAAAD,EAAW,SAAAnmD,CAAA,EACtB,IAAAC,EAAKD,CAAW,IAChBC,EAAAm4B,UAAY,CAAA/nD,GACd+mB,GAAAA,EAAA6I,EACF,EACK,MAEJzqB,EAAA6U,MAAA,CAAAsyD,WAAA,QAAAtsE,EAAA+mB,EAAA,OACH,CAKD,EAASzI,GAQUza,EAAAsB,CAAdA,EAAO+R,CANXA,EA2hBQoH,GArhBUnZ,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,MAAAwa,IAAA,CAAAiG,KAAA,CAAA/hB,GAAA,CAAAC,EAAAqB,EAAAwa,IAAA,CAAAiG,KAAA,CAAA9hB,GAAA,CAChBqB,EAAA2qB,KAAA,GAW4G3qB,EAE5G2qB,KAAA,CAAA3qB,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAA6U,MAAA,CAAA7U,EAAAqhB,UAAA,EAOA7lB,KAAA,QAOA4Z,YAAA,EAOAo/C,eAAA,GAOA8M,gBAAA,GASAuP,cAAA,GAOyD9zC,WACvD,SAAU32B,CAAY,CAAA9L,CAAA,CAAAw2E,CAAA,EACtBx2E,EAAKA,GAAa,GAClB,KAAAmK,QAAA,IAIAqsE,GAAgB,KAAAp0C,SAAa,cAAApiC,GAC7B,IAAK,CAAAmK,QAAQ,CAAI2B,GAAU,GAAe,IACxC,IAAI6J,EAAC,KAAQxL,QAAI,CAAK/J,MAAG,CAAIuV,KAC/B,KAAAxL,QAAA,CAAAwL,EAAA,CAAAq0C,KAAA,MAEuB,GACrBwsB,EAoBD,KAAAC,qBAAA,OApBc,CACb,IAAApiD,EAAAr0B,GAAAA,EAAAowB,WAAA,MAKiBrtB,IAAf/C,EAAKw8C,OAAU,EAChB,MAAAA,OAAA,CAAAx8C,EAAAw8C,OAAA,EAEgBz5C,KAAAA,IAAf/C,EAAKy8C,OAAU,EAChB,MAAAA,OAAA,CAAAz8C,EAAAy8C,OAAA,EAIDpoB,GAAK,KAAAqiD,WAAqB,GAC1B,KAAAC,oBAAe,CAAWtiD,GAC1B,OAAKr0B,EAAUowB,WAAA,CACjB,IACK,CAAAgS,SAAA,cAAApiC,EAAA,CAIL,IACF,CAAA4L,SAAA,EAEA,EAGkC6qE,sBACb,UAAI,CACkB,IACvC,IAAI9gE,EAAC,KAAQxL,QAAI,CAAA/J,MAAU,CAAAuV,KAC7B,KAAAxL,QAAA,CAAAwL,EAAA,CAAA/J,SAAA,CAFkB,GAKpB,EAIuC+qE,qBACxB,SAActiD,CAAC,EACa,IACvC,IADGA,EAAQA,GAAK,IAAS,CAAA8oB,cAAc,GACnCxnC,EAAC,KAAAxL,QAAA,CAAA/J,MAAoB,CAAKuV,KAChC,KAAAihE,mBAAA,MAAAzsE,QAAA,CAAAwL,EAAA,CAAA0e,EAGF,EAK8CuiD,oBAC3B,SAAOr2E,CACpB,CAAA8zB,CAAA,CAAY,CAGhB,IAAAwiD,EAAWt2E,EAAAkL,IAAA,CAAAqrE,EAAAv2E,EAAAiL,GAAA,CAAAjL,EACTgL,GAAM,EACNE,KAAKorE,EAAYxiD,EAAQvK,CAAA,CAC3Bte,IAAAsrE,EAAAziD,EAAAtK,CAAA,GAEAxpB,EAAOypD,KAAA,KAAU,CACnBzpD,EAAAqL,SAAA,CANa,GAQb,EAIqB+1B,SACnB,UAAO,CACT,+BAAA9Z,UAAA,OAEA,EAMgCu7C,cAC1B,SAAgB7iE,CAAK,EACzB,IAAIw2E,EAAC,OAAA/sB,KAAoB,CAqB3B,OApBE,KAAAgtB,oBAAY,GACZtxE,EAAIwa,IAAA,CAAQ8R,oBAAA,OACVzxB,IACEw2E,GAEDrxE,EAAAwa,IAAA,CAAA6T,yBAAA,CAAAxzB,EAAA,KAAAypD,KAAA,CAAAj1B,mBAAA,IAED,KAAA5qB,QAAY,CAAAhP,IAAG,CAAIoF,GACnBA,EAAOypD,KAAK,MACbzpD,EAAAmoB,IAAA,eAAArf,MAAA,GAED,IAAI,CAACqtE,WAAA,GACL,IAAI,CAACC,oBAAY,GACjB,IAAI,CAAA9P,KAAA,CAAQ,GACVkQ,EACF,IACK,CAAA/sB,KAAA,CAAAoZ,aAAA,GAEJ,KAAAx3D,SAAA,GAEH,MAQmCu3D,iBAC5B,SAAA5iE,CAAoB,EAS3B,OARE,KAAAy2E,oBAAY,GAEZtxE,EAAKwa,IAAM,CAAC8R,oBAAA,OACZ,IAAI,CAAChmB,MAAA,CAAAzL,GACL,IAAI,CAACm2E,WAAA,GACL,IAAI,CAACC,oBAAS,GACd,IAAI,CAAC/qE,SAAQ,GACb,KAAAi7D,KAAO,CAAI,GACb,MAKiC7/C,eACrB,SAAOzmB,CAAA,EACjB,KAAAsmE,KAAO,CAAK,GACZtmE,EAAOypD,KAAK,MACdzpD,EAAAmoB,IAAA,eAAArf,MAAA,CAEA,EAGmCge,iBACpB,SAAI9mB,CAAA,EACjB,KAAAsmE,KAAO,IACT,OAAAtmE,EAAAypD,KAAA,EAK2BthC,KACzB,SAAQxY,CAAK,CAAAvP,CAAQ,CAAC,CACtB,IAAIgV,EAAI,IAAC,CAAAxL,QAAA,CAAa/J,MAAE,IACtB,KAAAm2E,aAAY,MACV5gE,KACF,KAAAxL,QAAA,CAAAwL,EAAA,CAAA4zD,UAAA,CAAAr5D,EAAAvP,EAEF,CAAsB,GACpBuP,WAAAA,EAAY,KACVyF,KACF,KAAAxL,QAAA,CAAAwL,EAAA,CAAA+S,IAAA,CAAAxY,EAAAvP,EAEF,CACF+E,EAAA6U,MAAA,CAAAC,SAAA,CAAAkO,IAAA,CAAA9B,IAAA,MAAA1W,EAAAvP,EAEA,EAKwC4sD,SAClC,SAAAF,CAA6B,EACjC,IAAI4pB,EAAoB,IAAQ,CAC7B1wB,oBAAoB,CACnB2wB,EAAY,KAAA/sE,QAAA,CAAiBoF,MAAA,UAAAqY,CAAA,EAE9B,MAAI,CAAAA,EAAU8lC,iBAAK,GAAA/gD,GAClB,UAAIib,CAAA,EACJ,IAAIuvD,EAAAvvD,EAAuB2+B,oBAAA,CAC3B3+B,EAAI2+B,oBAAoB,CAAA0wB,EACxB,IAAIG,EAAAxvD,EAAA2lC,QAAA,CAAoBF,GAE1B,OADEzlC,EAAA2+B,oBAAO,CAAA4wB,EACTC,CACF,GACIxvD,EAAAliB,EAAU6U,MAAA,CAAAC,SAAA,CAAA+yC,QAAA,CAAA3mC,IAAA,MAAAymC,GAEhB,OADEzlC,EAAA9b,OAAO,CAAAorE,EACTtvD,CAEA,EAKgD0lC,iBAC1C,SAAcD,CAAkB,EACpC,IAAI6pB,EAAY5mD,EAAA,KAAAA,UAAA,IACdA,EACF4mD,EACK5mD,MACH,CACA,IAAA2mD,EAA4B,IAAI,CAAC1wB,oBAAc,CAAA2wB,EACzC,KAAA/sE,QAAmB,CAAAwC,GAAI,UAAAib,CAAA,EAC3B,IAAIuvD,EAAAvvD,EAAuB2+B,oBAAA,CAC3B3+B,EAAI2+B,oBAAW,CAAA0wB,EACf,IAAIG,EAAAxvD,EAAA0lC,gBAAuB,CAAAD,GAE7B,OADEzlC,EAAA2+B,oBAAO,CAAA4wB,EACTC,CACD,EACD,KACIxvD,EAAAliB,EAAU6U,MAAA,CAAAC,SAAA,CAAA8yC,gBAAA,CAAA1mC,IAAA,MAAAymC,GAEhB,OADEzlC,EAAA9b,OAAO,CAAAorE,EACTtvD,CAEA,EAIsBi+B,OAChB,SAACtjC,CAAA,EACL,IAAI,CAACipC,cAAU,IACf,IAAI,CAACppB,SAAA,UAAiB7f,GACxB,KAAAipC,cAAA,GAEA,EAOwBD,YAClB,UAAW,CACf,IAAI8rB,EAAU3xE,EAAA6U,MAAA,CAAAC,SAAA,CAAA+wC,WAAA,CAAA3kC,IAAA,UACZywD,EAA0D,KACxD,IAAI1hE,EAAI,EAACgR,EAAQ,IAAI,CAAAxc,QAAA,CAAA/J,MAAc,CAAIuV,EAAAgR,EAAAhR,IAAA,GACrC,IAAI,CAACxL,QAAA,CAAAwL,EAAU,CAAA40D,cAAQ,GAExB,OADC,KAAAD,UAAY,IACb,EACH,CAEF,OACF+M,CAEA,EAI2B9M,eACd,UAAO,CAAqC,GACrD7kE,EAAO6U,MAAI,CAAAC,SAAA,CAAA+vD,cAAA,CAAA3jD,IAAA,OACZ,QACD,CAA0D,IACxD,IAAIjR,EAAI,EAACgR,EAAQ,IAAI,CAAAxc,QAAA,CAAA/J,MAAc,CAAIuV,EAAAgR,EAAAhR,IAAA,GACrC,KAAAxL,QAAW,CAAAwL,EAAA,CAAA40D,cAAA,GACZ,QACH,CAEF,QAEA,EAIuBjB,WACd,UAAK,CACd,YAAAgB,UAAA,OAAAtgB,KAAA,OAAAA,KAAA,CAAAsf,UAAA,EAEA,EAI0BU,WACf,SAAOznD,CAAA,CAAM,CAAoC,IACxD,IAAI5M,EAAC,EAAAgR,EAAY,KAAAxc,QAAO,CAAA/J,MAAA,CAAAuV,EAAAgR,EAAAhR,IAC1B,KAAAxL,QAAA,CAAAwL,EAAA,CAAAkwC,MAAA,CAAAtjC,GAEF,KAAAqoD,aAAA,CAAAroD,EAAA,KAAAyS,QAAA,CAEA,EAGmCk1C,aACxB,SAAUW,CAAA,EAA6B,GAC9C,KAAAzoC,SAAW,gBAAAyoC,GACZ,QACD,CAA0B,GACxB,MAAAlE,cAAY,CACb,QACD,CAA0D,IACxD,IAAIhxD,EAAI,EAACgR,EAAQ,IAAI,CAAAxc,QAAA,CAAA/J,MAAa,CAAIuV,EAAGgR,EAAAhR,IAAA,GACvC,IAAI,CAAAxL,QAAK,CAAAwL,EAAA,CAAAu0D,YAAc,SACrB,KAAAle,YAAA,EAEA,IAAIliC,EAAC,KAAAo+C,UAAc,KAAW,CAAApc,KAAI,CAAI/hC,EAAI,IAAG,CAAAo+C,WAAG,MAAApc,KAAA,CACjD,KAAA2L,aAAA,CAAA/M,SAAA,EAAA7gC,EAAA,GAAAC,EAAA,EAAAD,EAAAC,EACD,OACD,EACH,OAEF,EAEA,EASiCitD,qBACb,UAAK,CACvB,IAAIM,EAAU,IAAQ,CAAApjD,aAAS,GAOjC,OAPyC,IACrC,CAAA/pB,QAAA,CAAAyhB,OAAA,UAAArrB,CAAiC,EAEjCmF,EAAOwa,IAAA,CAAAkU,oBAAY,CAAA7zB,EAAA+2E,GACnB,OAAO/2E,EAAAypD,KAAS,CAClBzpD,EAAAqL,SAAA,EACA,GACF,MAOoB2rE,QAClB,WAMF,OAJyC,IACrC,CAAAptE,QAAO,CAAGyhB,OAAC,UAAarrB,CAAA,EAC1BA,EAAAgL,GAAA,YACA,GACF,KAAAyrE,oBAAA,EAEA,EAAqBr7D,QACd,UAAU,CACf,IAAI,CAACymB,SAAA,YAAgC,IACnC,CAAAz2B,aAAc,UAAIpL,CAAO,CAAO,CAClCA,EAAAob,OAAA,EAAApb,EAAAob,OAAA,EACA,GACF,KAAAxR,QAAA,KAQ8BqtE,kBAClB,UAAQ,IAChB,KAAAnuE,MAAA,EAGF,IAAIyC,EAAS,IAAK,CAAA3B,QAAA,CAAAd,EAAA,KAAAA,MAAA,CAClB,IAAI,CAAAc,QAAA,CAAU,EAAI,CAClB,IAAAnK,EAAO,IAAQ,CAAAutD,QAAO,EACtB,QAAIvtD,EAAA8L,OAAkB,CACtB,IAAAoiD,EAAoB,IAAAxoD,EAAA+9D,eAAA,KAatB,OAZEvV,EAAgB3iD,GAAA,CAAIvL,GACpBkuD,EAAchtD,IAAI,mBAClBmI,EAAA2C,MAAQ,KAAQ,EAAiBF,EAC/B8f,OAAO,CAAK,SAAGrrB,CAAA,EACfA,EAAOypD,KAAK,CAAGkE,EACf3tD,EAAOsmE,KAAI,IACbx9D,EAAAM,GAAA,CAAApJ,EACA,GACA2tD,EAAgB7kD,MAAA,CAAQA,EACxB6kD,EAAO/jD,QAAgB,CAAA2B,EACvBzC,EAAAwgD,aAAgB,CAAAqE,EAChBA,EAAOtiD,SAAA,GACTsiD,EAlBE,EAyB0BupB,gBACd,WACd,YAAAT,oBAAA,EAEA,EAK6BU,iBACvB,UAAmB,CAKzB,OAJsC,IAClC,CAAA/rE,aAAO,UAAUpL,CAAA,EACnBA,EAAAqL,SAAA,CAFmB,GAGnB,GACF,MAKuC8qE,YAC5B,SACAiB,CACI,EAKU,IAJX,IAACnwD,EAAAX,EAAAyE,EAIUgP,EAJV67C,EAAA,GAAAC,EAAA,GAAAjD,EAAA,CAAM,KAAM,KAAM,KAC3B,KAGJ,CAAAx9D,EAAQ,EAAIiiE,EAAM,IAAK,CAAAztE,QAAA,CAAA/J,MAAA,CAAAy3E,EAAA1E,EAAA/yE,MAAA,CACrBuV,EAAIiiE,EAAK,EAAAjiE,EAAA,CAEkB,IACzB2kB,EAAA,EADFhP,EAAS9D,CADTA,EAAA,KAASrd,QAAE,CAAAwL,EAAA,EACCu6D,WAAU,GACb51C,EAAAu9C,EAAQv9C,IACfzT,EAAOssD,CAAC,CAAA74C,EAAO,CACf67C,EAAGh7E,IAAI,CAACmwB,CAAM,CAACzE,EAAK,CAACiD,CAAC,EACxBssD,EAAAj7E,IAAA,CAAAmwB,CAAA,CAAAzE,EAAA,CAAAkD,CAAA,CAEFvC,CAAAA,EAAAmoD,OAAA,CAAArkD,CAEA,CACF,KAAAwsD,UAAA,CAAA3B,EAAAC,EAAAuB,EAEA,EAG8CG,WACxC,SAAY3B,CAAA,CAAAC,CAAO,CAAAuB,CAAe,CAAI,CAK1C,IAAII,EAAM,IAAGryE,EAAAmkB,KAAA,CAAAzlB,EAAA+xE,GAAA/xE,EAAAgyE,IAAA4B,EAAA,IAAAtyE,EAAAmkB,KAAA,CAAAxlB,EAAA8xE,GAAA9xE,EAAA+xE,IAAA5qE,EAAAusE,EAAAhuD,CAAA,IAAAte,EAAAssE,EAAAjuD,CAAA,IAAAnlB,EAAAqzE,EAAAluD,CAAA,CAAAiuD,EAAAjuD,CAAA,IAAAllB,EAAAozE,EAAAjuD,CAAA,CAAAguD,EAAAhuD,CAAA,GACb,KAAI,CAACplB,KAAA,CAAMA,EACX,IAAI,CAACC,MAAA,CAAAA,EACH+yE,GAEyB,IAAE,CAAArjD,mBAAG,EAAMxK,EAAGre,EAAOse,EAAAve,CAC/C,eAIL,CAEA,GAOqD9F,EAC/C2qB,KAAA,CAAAhB,UAAiB,UACjB9uB,CAAA,CAAU+mB,CAAO,CAAI,CACzB,IAAAxb,EAAOvL,EAAQuL,OAAO,CAAA9L,EAAA0F,EAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,CAAA/K,EAAA,IACW,GAAjC,OAAIP,EAAO8L,OAAA,CACT,iBAAAA,EAAA,CACmDpG,EACjD4wE,cAAY,CAAAxqE,EAAY,SAAAokB,CAAiB,EACzC,IAAA85B,EAAUtkD,EAAAwa,IAAA,CAAA+P,gBAAA,CAAAC,EAAA3vB,EAAAuL,GACVk+C,EAAAz+C,GAAA,CAAAvL,GACFsnB,GAAAA,EAAA0iC,EACA,GACD,MACD,GACE9pC,IAAI,CAAA6O,cAAiB,CAAAjjB,EAAW,SAAOmjB,CAAY,EACnD,IAAAjvB,EAAO0F,EAAQwa,IAAO,CAAA3f,MAAA,CAAA+K,KAAA,CAAA/K,EAAA,GACtB,QAAOP,EAAK8L,OAAA,CAAqDpG,EAC/Dwa,IAAA,CAAAqP,uBAAyB,CAAOhvB,EAAMP,EAAA,UAAkB,CAC1DsnB,GAAAA,EAAA,IAAA5hB,EAAA2qB,KAAA,CAAApB,EAAAjvB,EAAA,IACF,EACF,EAEC,GAQC0F,CADEA,EAAO+R,CAJXA,EAyJQoH,GArJGnZ,MAAe,EAAE+R,CAAAA,EAAA/R,MAAA,MAC1B+9D,eAAA,GAU4G/9D,EAE5G+9D,eAAA,CAAA/9D,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAA2qB,KAAA,EAOAnvB,KAAA,kBAMuCuhC,WACrC,SAAU32B,CAAY,CAAA9L,CAAA,EACtBA,EAAKA,GAAW,GAChB,IAAK,CAAAmK,QAAQ,CAAI2B,GAAU,GAAe,IACxC,IAAI6J,EAAC,KAAQxL,QAAI,CAAK/J,MAAG,CAAIuV,KAC/B,KAAAxL,QAAA,CAAAwL,EAAA,CAAAq0C,KAAA,MAGEhqD,EAAKw8C,OAAU,EAChB,MAAAA,OAAA,CAAAx8C,EAAAw8C,OAAA,EAECx8C,EAAKy8C,OAAU,EAChB,MAAAA,OAAA,CAAAz8C,EAAAy8C,OAAA,EAED,IAAI,CAACi6B,WAAA,GACL,KAAAC,oBAAwB,GACxBjxE,EAAK6U,MAAA,CAASC,SAAA,CAAAioB,UAAA,CAAA7b,IAAA,MAAA5mB,GAChB,KAAA4L,SAAA,EAEA,EAOoBqsE,QACd,UAAU,CACd,IAAInsE,EAAS,IAAK,CAAA3B,QAAA,CAAAnF,MAAA,EAClB,KAAI,CAAAmF,QAAA,CAAU,GACd,IAAInK,EAAA0F,EAAe6U,MAAO,CAAAC,SAAQ,CAAA+yC,QAAA,CAAA3mC,IAAA,OAClCsxD,EAAe,IAAIxyE,EAAA2qB,KAAA,KAOD,GANlB,OAAArwB,EAAakB,IAAA,CACbg3E,EAAQ3sE,GAAA,CAAAvL,GAAyB8L,EAC/B8f,OAAO,UAAcrrB,CAAA,EACrBA,EAAO8I,MAAK,CAAA2C,MAAG,CAAAzL,GACjBA,EAAAypD,KAAA,CAAAkuB,CACA,GACAA,EAAS/tE,QAAO,CAAE2B,EAChB,MAAAzC,MAAO,CACR,OAAA6uE,CACD,CACA,IAAA7uE,EAAW,KAAAA,MAAA,CAIb,OAHEA,EAAOM,GAAA,CAAAuuE,GACP7uE,EAAAwgD,aAAkB,CAAAquB,EAClBA,EAAOtsE,SAAA,GACTssE,CAEA,EAKuBpc,WAChB,UAAO,CAEd,OADE,KAAAyb,OAAY,GACd,EAEA,EAIqB51C,SACnB,UAAO,CACT,yCAAA9Z,UAAA,OAEA,EAQwB0jC,YACf,UAAK,CACd,QAEA,EAIuB+d,WACd,UAAK,CACd,QAEA,EAMgEtN,gBACtD,SAAAz5C,CAAA,CAAA6/B,CAAA,CAAA+1B,CAAA,EACR51D,EAAIogC,IAAA,GACJpgC,EAAIyxC,WAAW,MAAA4M,QAAA,CAAmB,KAAK0F,uBAAA,GACvC,KAAAlkC,SAAA,mBAAmB7f,EAAoB6/B,GAED,SAApC+1B,CADFA,EAAWA,GAA4B,IACpB1R,WAAc,EAChC0R,CAAAA,EAAA1R,WAAA,KAED0R,EAAgB1M,kBAAoB,IAAsB,IACxD,IAAI91D,EAAC,EAAAgR,EAAY,KAAAxc,QAAA,CAAA/J,MAAgB,CAAKuV,EAAAgR,EAAAhR,IACxC,KAAAxL,QAAA,CAAAwL,EAAA,CAAAqmD,eAAA,CAAAz5C,EAAA41D,GAEF51D,EAAA0gC,OAAA,EACF,CAEA,GAO+Dv9C,EAC7D+9D,eAAY,CAAAp0C,UAAe,CAAO,SAAS9uB,CAAA,CAAA+mB,CAAS,EAAkB5hB,EACpEwa,IAAO,CAAA6O,cAAc,CAAAxuB,EAAAuL,OAAA,UAAAmjB,CAAA,EACrB,OAAA1uB,EAAYuL,OAAS,CACvBwb,GAAAA,EAAA,IAAA5hB,EAAA+9D,eAAA,CAAAx0C,EAAA1uB,EAAA,IACF,EAEC,GACe,SAEhBkX,CAAA,EAEA,aAEA,IAAIqH,EAAQpZ,GAAQwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAIK,GAHvBrH,EAAO/R,MAAM,EACd+R,CAAAA,EAAA/R,MAAA,KAGC+R,EAAO/R,MAAK,CAAAK,KAAA,EACZL,GAAAijC,IAAA,qCACD,MAED,IASE5iC,KAAA,CAAAL,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA6U,MAAA,EAOArZ,KAAA,QAQA4Z,YAAA,EASAs9D,iBAAA,GAQAC,YAAA,EAQAC,YAAA,EAOAC,gBAAA,EAOAC,gBAAA,EAQAC,oBAAA,GAQA1R,gBAAArhE,GAAA6U,MAAA,CAAAC,SAAA,CAAAusD,eAAA,CAAA/hE,MAAA,kBASAgiE,gBAAAthE,GAAA6U,MAAA,CAAAC,SAAA,CAAAwsD,eAAA,CAAAhiE,MAAA,kBAQA0zE,SAAA,GAQAlM,MAAA,EAQAC,MAAA,EASAkM,eAAA,GAWuCl2C,WACrC,SAAYxiC,CAAY,CAAAD,CAAA,EACxBA,GAAYA,CAAAA,EAAK,IACjB,IAAI,CAAC6K,OAAA,CAAQ,EAAG,CAChB,IAAI,CAAC6tE,QAAA,CAAU,UAAAhzE,GAAc6U,MAAA,CAAAg0D,KAAA,GAC7B,IAAI,CAACnsC,SAAA,cAAsBpiC,GAC7B,KAAA44E,YAAA,CAAA34E,EAAAD,EAEA,EAIuBwqD,WACd,UAAK,CACd,YAAAquB,QAAA,IAEA,EASuCC,WAChC,SAAA74E,CAAmB,CAAAD,CAAQ,EAgBlC,OAfE,IAAI,CAAC+4E,aAAa,CAAC,IAAI,CAACL,QAAQ,EAChC,IAAI,CAACK,aAAW,MAAAL,QAAA,cAChB,IAAI,CAACG,QAAA,CAAA54E,EACL,IAAI,CAAC+4E,gBAAY,CAAA/4E,EACjB,IAAI,CAAAg5E,WAAY,CAACj5E,GACE,IAAjB,IAAI,CAAC6K,OAAA,CAAAzK,MAAY,EAClB,KAAA4K,YAAA,GAMC,IAAI,CAACkuE,YAAA,EACN,KAAAC,kBAAA,GAEH,MAK6BJ,cACvB,SAAU7oE,CAAO,EACrB,IAAIkpE,EAAA1zE,GAAW2zE,aAAQ,CACrBD,GAAQA,EAAAE,iBAAkB,EAC3BF,EAAAE,iBAAA,CAAAppE,EAGH,EAGqByL,QACd,UAAU,CACf,IAAI,CAACymB,SAAA,YACL,IAAI,CAAC22C,aAAa,CAAC,IAAI,CAACL,QAAQ,EAChC,IAAI,CAACK,aAAa,KAAG,CAAAL,QAAA,cACrB,KAAAhhB,aAAA,CAAA30D,KAAAA,EAAA,CAAqB,mBAAY,WAAe,cAAgB,eAA2B,CAAA6oB,OACzF,EAAO,SAAK3rB,CAAA,EACZyF,GAAKwa,IAAA,CAAA0nB,gBAAW,MAAA3nC,EAAA,EACf,IAAK,CAAAA,EAAI,CAAA8C,KAAAA,CACd,GAAAyJ,IAAA,OAEA,EAG2B+sE,eACb,WACd,YAAAP,gBAAA,QAAAA,gBAAA,CAAA/yE,WAAA,OAEA,EAI4BuzE,gBACtB,UAAe,CACnB,IAAAv5E,EAAO,KAAAuqD,UAAA,SACL,CACA7lD,MAAA1E,EAAQw5E,YAAQ,EAAax5E,EAAI0E,KAAQ,CAC3CC,OAAA3E,EAAAy5E,aAAA,EAAAz5E,EAAA2E,MAAA,CAGF,EAIuB+0E,QAChB,SAAKp3D,CAAM,EAA4B,GAC1C,KAAA8S,MAAA,WAAAva,WAAA,EAGF,IAAI03D,EAAA,KAAS7tE,KAAA,GAAAgyB,EAAA,KAAA/xB,MAAA,GACb2d,EAAIwgC,SAAQ,GACZxgC,EAAI8pC,MAAM,CAAC,CAAAmmB,EAAI,CAAA77C,GACfpU,EAAI+pC,MAAM,CAACkmB,EAAG,CAAA77C,GACdpU,EAAI+pC,MAAM,CAACkmB,EAAC77C,GACZpU,EAAI+pC,MAAM,CAAC,CAACkmB,EAAG77C,GACfpU,EAAI+pC,MAAA,EAAAkmB,EAAS,CAAA77C,GACfpU,EAAAgqC,SAAA,GARE,EAesCgB,SAClC,SAAUF,CAAE,EAEhB,IAAIxiD,EAAS,GAA4B,IACvC,CAAAA,OAAI,CAAA+gB,OAAW,UAAAguD,CAAA,EACbA,GACD/uE,EAAA1P,IAAA,CAAAy+E,EAAArsB,QAAA,GAEH,GAGI,IAAChtD,EAAAue,EAAA,KAAAsjB,SAAA,aAAS,QAAS,QAClB,CAAAp9B,MACD,CAAKqoD,IAAW,CAChB/+B,IAAA,KAAAurD,MAAa,GACb5zE,YAAS,KAAAszE,cAAA,GACX1uE,QAAAA,CACF,GAIF,OAHI,KAAAquE,YAAO,EACR34E,CAAAA,EAAA24E,YAAA,MAAAA,YAAA,CAAA3rB,QAAA,IAEHhtD,CAEA,EAIoBu5E,QAClB,UAAY,CACd,YAAAtN,KAAA,OAAAC,KAAA,OAAA9nE,KAAA,MAAAk0E,QAAA,CAAAl0E,KAAA,OAAAC,MAAA,MAAAi0E,QAAA,CAAAj0E,MAAA,EAS2Bi1E,OACrB,SAAAE,CAAU,EACd,IAAI95E,EAAS85E,EAAA,KAAAlB,QAAA,MAAAG,gBAAA,UACY,EACd9rE,SAAQ,CAChBjN,EAAAiN,SAAA,GAGC,KAAAkrE,gBAAe,CAEZn4E,EAAA+5E,YAAA,QAEJ/5E,EAAAquB,GAAA,CAIF,KAAAA,GAAA,IACH,EAYyC2rD,OACvC,SAAY3rD,CAAA,CAAAhH,CAAU,CAAKtnB,CAAA,CAAS,CAMtC,OANoD0F,GAChDwa,IAAK,CAAAvD,SAAW,CAAA2R,EAAK,SAAAJ,CAAA,CAAAk6B,CAAA,EACrB,IAAI,CAAC0wB,UAAA,CAAA5qD,EAAeluB,GACpB,KAAAk6E,eAAY,GACX5yD,GAAMA,EAAW,IAAQ,CAAA8gC,EAC5B,MAAO,CAAApoD,GAAIA,EAAAiG,WAAA,EACb,MAMqB07B,SACnB,UAAO,CACT,sCAAAk4C,MAAA,SAEA,EAA+BV,mBAChB,UAAK,CAMlB,IAAI5pE,EAAK,IAAO,CAAA2pE,YAAA,CAAAiB,EAAA,KAAA1B,mBAAA,CAAA/Q,EAAA,KAAAC,qBAAA,GAAAh9D,EAAA+8D,EAAA/8D,MAAA,CAAAC,EAAA88D,EAAA98D,MAAA,CAAAwvE,EAAA,KAAAC,WAAA,OAAArB,gBAAA,CAGiD,GAF/D,IAAI,CAAChvB,KAAI,EACV,KAAAz+C,GAAA,aAEC,CAAAgE,GAAK5E,EAAWwvE,GAAAvvE,EAAAuvE,EAAA,CAChB,IAAI,CAACtB,QAAA,CAAAuB,EACL,IAAI,CAAC7B,eAAe,CAAG,EACvB,IAAI,CAACC,eAAc,GACnB,IAAI,CAACH,WAAW,CAAG1tE,EACnB,KAAA2tE,WAAA,CAAA1tE,EACD,MACD,IACSyuE,aAAa,EACrB3zE,CAAAA,GAAA2zE,aAAA,CAAA3zE,GAAA6f,iBAAA,IAID,IAAAsL,EAAcnrB,GAAGwa,IAAA,CAAAwQ,mBAAA,GAAAgoD,EAAA,KAAA2B,WAAA,MAAA3B,QAAA,kBAAAA,QAAA,CAAA4B,EAAAF,EAAAz1E,KAAA,CAAA41E,EAAAH,EAAAx1E,MAAA,CACjBisB,EAASlsB,KAAA,CAAM21E,EACfzpD,EAAKjsB,MAAQ,CAAG21E,EAChB,IAAI,CAAC1B,QAAA,CAAWhoD,EAChB,IAAI,CAACwnD,WAAW,CAAG9oE,EAAO5E,MAAM,CAAGA,EACnC,KAAA2tE,WAAO,CAAA/oE,EAAc3E,MAAA,CACnBA,EAAAlF,GAAC2zE,aAAA,CAAAruE,YAAA,EAASuE,EACZ,CAAA6qE,EAAoBE,EAAYC,EAAa,KAAA1B,QAAA,CAAiBH,GAC9D,IAAI,CAACH,eAAe,CAAG1nD,EAASlsB,KAAA,CAAM,IAAG,CAAIq0E,gBAAC,CAAgBr0E,KAAC,CACjE,KAAA6zE,eAAA,CAAA3nD,EAAAjsB,MAAA,MAAAo0E,gBAAA,CAAAp0E,MAAA,EAUgCoG,aAEpB,SAAAH,CAAgB,EAOA,GANgBA,EAAEA,CAA5CA,EAAUA,GAAQ,IAAO,CAAAA,OAAA,EAAS,IAAiB0E,MAAW,UAAOA,CAAA,EAAkB,OAAAA,GAAA,CAAAA,EAAAirE,cAAA,EACvF,GAEA,KAAAjvE,GAAA,aAGA,IAAI,CAAAwtE,aAAc,KAAK,CAAAL,QAAG,cACxB7tE,IAAAA,EAAKzK,MAAQ,CAKd,OAJC,IAAI,CAACy4E,QAAA,CAAW,IAAG,CAAAG,gBAAI,CACvB,IAAI,CAACqB,WAAA,KAAkB,CACvB,IAAI,CAAC9B,eAAe,CAAG,EACvB,KAAAC,eAAW,GACZ,KAMD,IAAIiC,EAAa,KAAKzB,gBAAK,CAAAsB,EAAkBG,EAAAhB,YAAA,EAAAgB,EAAA91E,KAAA,CAAA41E,EAAAE,EAAAf,aAAA,EAAAe,EAAA71E,MAAA,IAC3C,KAAAi0E,QAAA,QAAAG,gBAAA,EAEA,IAAAnoD,EAAcnrB,GAAGwa,IAAA,CAAAwQ,mBAAA,EACjBG,CAAAA,EAASlsB,KAAA,CAAM21E,EACfzpD,EAAKjsB,MAAQ,CAAG21E,EAChB,IAAI,CAAC1B,QAAA,CAAWhoD,EAClB,IACK,CAAAwpD,WAAA,CAAAxpD,CAAA,MAIH,IAAI,CAACgoD,QAAA,CAAW,IAAC,CAAAwB,WAAW,CAC5B,KAAAA,WAAA,CAAA73D,UAAA,OAAAmoC,SAAA,KAAA2vB,EAAAC,GAEA,IAAI,CAAClC,WAAW,CAAG,EACpB,KAAAC,WAAA,EACD,CAWF,OAVI5yE,GAAO2zE,aAAa,EACrB3zE,CAAAA,GAAA2zE,aAAA,CAAA3zE,GAAA6f,iBAAA,IAGD7f,GAAI2zE,aAAK,CAAAruE,YAAsB,CAAAH,EAAU,KAAAmuE,gBAClC,CAAAsB,EAAAC,EAA4B,IAAK,CAAA1B,QAAS,KAAM,CAAAH,QAAE,EACvD,KAAI,CAACM,gBAAe,CAAAr0E,KAAO,GAAC,IAAQ,CAACk0E,QAAQ,CAAAl0E,KAAK,OAAAq0E,gBAAsB,CAAAp0E,MAAA,QAAAi0E,QAAA,CAAAj0E,MAAA,IACxE,IAAI,CAAC2zE,eAAe,CAAG,IAAI,CAACM,QAAQ,CAACl0E,KAAA,CAAM,IAAG,CAAIq0E,gBAAC,CAAgBr0E,KAAC,CACrE,KAAA6zE,eAAA,MAAAK,QAAA,CAAAj0E,MAAA,MAAAo0E,gBAAA,CAAAp0E,MAAA,EAEH,MAMuBssD,QACrB,SAAY3uC,CAAA,EACZ7c,GAAIwa,IAAK,CAAA4lB,iBAAiB,CAAIvjB,EAAK,KAAAo2D,cAAgB,EAC5C,KAAL,IAAI,CAAC/X,QAAA,EAAkB,KAAAsY,YAAA,OAAAwB,YAAA,IACxB,KAAAvB,kBAAA,GAED,IAAI,CAACQ,OAAA,CAAAp3D,GACP,KAAAwpD,mBAAA,CAAAxpD,EAEA,EAKiCunD,kBACnB,SAAAvnD,CAAA,CAAiB,CAC7B7c,GAAOwa,IAAA,CAAA4lB,iBAAiB,CAAAvjB,EAAA,KAAAo2D,cAA6B,EACvDjzE,GAAA6U,MAAA,CAAAC,SAAA,CAAAsvD,iBAAA,CAAAljD,IAAA,MAAArE,EAEA,EAWwBgpC,YACf,UAAK,CACd,YAAA8e,gBAAA,EAEA,EAA2B4B,YACrB,SAAA1pD,CAAgB,EACpB,IAAIo4D,EAAgB,KAAA9B,QAAA,IAClB8B,GAKE,IAAAhwE,EAAY,IAAK,CAAA4tE,eAAW,CAAA3tE,EAAgB,IAAC,CAAA4tE,eAC7C,CAAUhG,EAAA,KAAA7tE,KAAc,CAAAgyB,EAAA,KAAA/xB,MAAgB,CAAAR,EAAAykB,KAAczkB,GAAA,CAAKC,EAC3DwkB,KAAAxkB,GAAW,CAIXmoE,EAAKnoE,EAAI,IAAI,CAAAmoE,KAAQ,IAAAC,EACrBpoE,EAAA,IAAK,CAAIooE,KAAI,IAAAmO,EAAQD,EAChBlB,YAAY,EAAIkB,EACVh2E,KAAO,CAAAk2E,EAAUF,EAC5BjB,aAAW,EAAIiB,EAAc/1E,MAAA,CAASk2E,EAAAtO,EAAA7hE,EAAAowE,EAAAtO,EAAA7hE,EAE1CowE,EAAA52E,EAAAouE,EAAA7nE,EAAqBiwE,EAAUE,GAAAG,EAAA72E,EAAAuyB,EAAe/rB,EAAQiwE,EAAcE,GAAUG,EAAA92E,EAAAouE,EAAAoI,EAAAjwE,EAAA6hE,GAAA2O,EAAA/2E,EAAAuyB,EAAAkkD,EAAAjwE,EAAA6hE,EAChFkO,CAAAA,GAAAp4D,EAAAI,SAAA,CAAAg4D,EAAAG,EAAAC,EAAAC,EAAAC,EADsE,CAAUzI,EAAA,GAAA77C,EAAA,EAChFukD,EAAAC,GAhBE,EAsBuBT,aACnB,UAAa,CACjB,IAAAhwE,EAAQ,IAAM,CAAAi9D,qBAAgB,GAChC,OAAAj9D,EAAAC,MAAA,QAAA0tE,WAAA,EAAA3tE,EAAAE,MAAA,QAAA0tE,WAAA,EAK8B8C,kBACd,WAChB,KAAA7vE,GAAA,MAAAiuE,eAAA,GAEA,EAOyCZ,aAClC,SAAW34E,CAAO,CAAKD,CAAO,CAAC,CACpC,KAAA84E,UAAY,CAAApzE,GAASwa,IAAK,CAAAkmB,OAAA,CAAUnmC,GAAID,GAC1C0F,GAAAwa,IAAA,CAAAomB,QAAA,MAAAkkB,UAAA,GAAA9kD,GAAAK,KAAA,CAAAs1E,UAAA,CAEA,EAI+BpC,YAC7B,SAAYj5E,CAAY,EACxBA,GAAKA,CAAAA,EAAW,IAChB,IAAI,CAACsoD,UAAA,CAAAtoD,GACP,KAAAk6E,eAAA,CAAAl6E,EAEA,EAK0Cs7E,aACpC,SAAWzwE,CAAQ,CAAAyc,CAAQ,EAC7Bzc,GAAWA,EAACzK,MAAA,CAAmDsF,GAC7Dwa,IAAA,CAAA6O,cAAqB,CAAAlkB,EAAA,SAAAokB,CAAA,EACpB3H,GAAAA,EAAA2H,EACL,EACK,wBAEJ3H,GAAAA,GAGH,EAMmC4yD,gBACrB,SAAUl6E,CAAE,EACxBA,GAASA,CAAAA,EAAK,IACd,IAAI6kC,EAAC,IAAQ,CAAA2lB,UAAQ,EACrB,KAAI,CAAC7lD,KAAA,CAAM3E,EAAG2E,KAAQ,EAAMkgC,EAAI40C,YAAG,EAAa50C,EAAIlgC,KAAG,EAAM,EAC/D,KAAAC,MAAA,CAAA5E,EAAA4E,MAAA,EAAAigC,EAAA60C,aAAA,EAAA70C,EAAAjgC,MAAA,GAEA,EAM8C8tB,kCACtB,WAGqD,IAASxyB,EAAPq7E,EAAA71E,GAAOwa,IAAA,CAAAwS,iCAAA,MAAA8oD,mBAAA,MAAAC,EAAA,KAAA5C,QAAA,CAAAl0E,KAAA,CAAA+2E,EAAA,KAAA7C,QAAA,CAAAj0E,MAAA,CAAA+F,EAAA,EAAAC,EAAA,EAAA8hE,EAAA,EAAAC,EAAA,EAAAH,EAAA,EAAAC,EAAA,EAAAkP,EAAA,KAAAh3E,KAAA,CAAAi3E,EAAA,KAAAh3E,MAAA,CAAAi3E,EAAA,CAAQl3E,MAAAg3E,EAAgB/2E,OAAAg3E,CAC5G,EA0CO,OAzCLL,GAAQA,CAAAA,SAAAA,EAAAzoD,MAAA,EAAwByoD,SAAAA,EAAAxoD,MAAA,GACZ,SAAlBwoD,EAAA1oD,WAAS,GACTloB,EAASC,EAAClF,GAASwa,IAAS,CAAAwT,cAAU,MAAAmlD,QAAA,CAAAgD,GACtC37E,EAAQ,CAAAy7E,EAAWF,EAAO9wE,CAAA,IACV,QAAd4wE,EAAAzoD,MAAA,EACD45C,CAAAA,EAAA,CAAAxsE,CAAA,EAEc,QAAbq7E,EAAAzoD,MAAA,EACD45C,CAAAA,EAAAxsE,CAAA,EAEDA,EAAQ,CAAA07E,EAAWF,EAAO9wE,CAAA,IACX,QAAb2wE,EAAAxoD,MAAA,EACD45C,CAAAA,EAAA,CAAAzsE,CAAA,EAEa,QAAZq7E,EAAAxoD,MAAA,EACD45C,CAAAA,EAAAzsE,CAAA,GAGiB,UAAlBq7E,EAAA1oD,WAAS,GACTloB,EAASC,EAASlF,GAAAwa,IAAS,CAAAyT,gBAAA,MAAAklD,QAAA,CAAAgD,GAC3B37E,EAAQu7E,EAAME,EAAYhxE,EAChB,QAAR4wE,EAAAzoD,MAAQ,EACT05C,CAAAA,EAAAtsE,EAAA,GAES,QAARq7E,EAAAzoD,MAAQ,EACT05C,CAAAA,EAAAtsE,CAAA,EAEDA,EAAQw7E,EAAWE,EAAOhxE,EAChB,QAAR2wE,EAAAxoD,MAAQ,EACT05C,CAAAA,EAAAvsE,EAAA,GAES,QAARq7E,EAAAxoD,MAAQ,EACT05C,CAAAA,EAAAvsE,CAAA,EAEDu7E,EAAAE,EAAUhxE,EACX+wE,EAAAE,EAAAhxE,KAIDD,EAASgxE,EAAAF,EACV7wE,EAAAgxE,EAAAF,GAEC,CACA/2E,MAAA82E,EACA72E,OAAQ82E,EACR/wE,OAAQA,EACRC,OAAAA,EACA8hE,WAAWA,EACXC,UAAOA,EACPH,MAAOA,EACTC,MAAAA,CACF,CACF,CAEA,GAQA/mE,GAAAK,KAAA,CAAAs1E,UAAA,cAMA31E,GAAAK,KAAA,CAAAyU,SAAA,CAAAshE,SAAA,CAAAp2E,GAAAK,KAAA,CAAAyU,SAAA,CAAAq/D,MAAA,CAMsDn0E,GAChDK,KAAA,CAAAspB,UAAgB,CAAI,SAAQ0sD,CAAM,CAAAz0D,CAAA,EACtC,IAAA/mB,EAAYmF,GAAAwa,IAAU,CAAA3f,MAAO,CAAG+K,KAAE,CAAAywE,GAAuBr2E,GACvDwa,IAAI,CAAAvD,SAAS,CAAApc,EAAA+tB,GAAA,UAAAJ,CAAA,CAAAk6B,CAAA,KACXA,EAAA,CACA9gC,GAAAA,EAAA,SACD,MACD,IACEvhB,KAAO,CAAAyU,SAAU,CAAA8gE,YAAa,CAAA10D,IAAA,CAAArmB,EAAAA,EAAAsK,OAAA,UAAAA,CAAA,EAC9BtK,EAAOsK,OAAM,CAAAA,GAAU,GAA0BnF,GAACK,KAAO,CAAAyU,SAAA,CAAY8gE,YAAA,CAAA10D,IAAA,CAAArmB,EAAA,CAAGA,EAAA24E,YAAS,CAAe,UACvF8C,CAAY,CAAG,CACtBz7E,EAAO24E,YAAK,CAAA8C,CAAuB,CAAC,GAA4Bt2E,GAC9Dwa,IAAI,CAAAqP,uBAAyB,CAAAhvB,EAAKA,EAAA,WAEpC+mB,EADW,IAAO5hB,GAAKK,KAAA,CAAAmoB,EAAA3tB,GACvB,GACF,EACF,EACC,EACL,OAAAA,EAAA0F,WAAA,CAEA,EAO2DP,GACzDK,KAAO,CAAIC,OAAC,CAAS,SAAMF,CAAA,CAAAwhB,CAAc,CAAA20D,CAAS,EAAAv2E,GAChDwa,IAAA,CAAAvD,SAAY,CAAA7W,EAAS,SAAWooB,CAAA,CAAKk6B,CAAM,EAC1C9gC,GAAMA,EAAc,IAAA5hB,GAAWK,KAAA,CAAAmoB,EAAW+tD,GAAA7zB,EAC/C,OAAA6zB,GAAAA,EAAAh2E,WAAA,CAIC,CACF,EAAA4Y,GAAW,UAEV,CAEA,aAmDqC,SAC/B6G,EAAmB1lB,CAAU,EAC/BA,GAAKA,EAAW2lB,QAAQ,EACzB,MAAAA,QAAA,CAAA3lB,EAAA2lB,QAAA,EAED,IAAI,CAACu2D,cAAc,MAAAv2D,QAAA,MAAAA,QAAA,EACrB,KAAAw2D,cAAA,GAnC6Cz2E,GACvC8f,gBAAO,CAAY,SAAEG,CAAA,KACvBjgB,GAAOse,YAAK,CACb,QACD,CACA2B,EAAIA,GAAkBjgB,GAAAggB,kBAAc,CAAAlL,SAAA,CAAAmL,QAAA,CACpC,IAAItc,EAAK6X,SAAOwN,aAAW,WACvBvM,EAAA9Y,EAAAmZ,UAAmB,WAAAnZ,EAAAmZ,UAAA,uBACvB45D,EAAA,GACQ,GACNj6D,EAAA,CACAzc,GAAA+f,cAAqB,CAAAtD,EAAAk6D,YAAkB,CAAAl6D,EAAAm6D,gBAAA,EACvCF,EAAI12E,GAAa+f,cAAA,EAAAE,EACU,IACzB,IAFgB42D,EAAA,CAAS,QAAW,UAAO,OAC7C,CACM5mE,EAAA,EAAAA,EAAA,EAAcA,IAAmB,GACnC6mE,SA9Ber6D,CAAA,CAAAs6D,CAAA,CAAe,CAEpC,IAAGC,EAAav6D,EAAAw6D,YAAgB,CAAAx6D,EAAAy6D,eAAA,SAE+B,EAD5DC,YAAA,CAAaH,EAFK,aAAeD,EAAI,0BAGxCt6D,EAAA26D,aAAQ,CAAAJ,KACNv6D,EAAA46D,kBAAY,CAAAL,EAAAv6D,EAAA66D,cAAA,CAEd,EAuBa76D,EAAAo6D,CAAiB,CAAA5mE,EAAA,EAAU,CAClCjQ,GAAMu3E,cAAA,CAAAV,CAAA,CAAA5mE,EAAA,CACP,OAGL,OACA,KAAAymE,WAAO,CAAAA,EACTA,CAEA,EAEA12E,GAAAggB,kBAAA,CAAAA,EAWiFA,EAErElL,SAAA,EAEVmL,SAAA,KAWA9D,UAAA,GAGwCq6D,eAC1B,SAAAv3E,CAAA,CAAAC,CAAA,EACZ,IAAI,CAAC+W,OAAA,GACL,KAAAuhE,iBAAA,CAAAv4E,EAA2BC,GACO,IAAC,CAAAu4E,SAAA,KAAAC,aAAA,CAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAC1D,EACF,KAAAC,6BAAA,CAAA14E,EAAAC,EAEA,EAIuDy4E,8BAChC,SAAc14E,CAAA,CAAAC,CAAW,CAAK,CACnD,IA+BA04E,EAAaC,EA/BTC,EAAAC,EAAA,SAAAliF,OAAAmiF,WAAA,IACF,CACA,IAAA/5D,UAAA,KAEF65D,EAAU,SACRlxE,EAAA,CACFkxE,EAAA,EACA,CAEA,IAAAG,EAAA,oBAAAC,YAGIC,EAAoB,oBAAAv6D,kBAA6D,GACnFm6D,GAAAD,GAAAG,GAAAE,GAIF,IAAAv7D,EAAA5c,GAAAwa,IAAA,CAAAwQ,mBAAoC,GAEhCtN,EAAO,IAAAw6D,YAAqBj5E,EAAAC,EAAA,MAC9Bc,GAAK4f,mBAAc,EACnB,IAAI,CAAClC,WAAU,CAAGA,EAClB,KAAA06D,UAAA,CAAAl7D,GACD,MACD,KACEm7D,EAAa,CACb36D,YAAAA,EACAN,iBAAAne,EACAqe,kBAAcpe,EAChB0d,aAAAA,CACA,CAEAA,CAAAA,EAAa3d,KAAA,CAAMA,EAEnB2d,EAAY1d,MAAO,CAAAA,EACnB04E,EAAA/hF,OAAAmiF,WAAyB,CAAAM,GAAA,GACzB97D,GAAgB0E,IAAO,CAAAm3D,EAAe,KAAK57D,EAAA,CAAA47D,GAE3CR,EAAYhiF,OAAOmiF,WAAe,CAAAM,GAAA,GAAAV,EAClCA,EAAA/hF,OAAAmiF,WAA4B,CAAAM,GAAA,GAC5Bp7D,GAAmBgE,IAAO,CAAAm3D,EAAe,KAAK57D,EAAA,CAAA47D,GAG5CR,EADEhiF,OAAgBmiF,WAAA,CAAkBM,GAAA,GAAAV,GAEpC,IAAI,CAACl6D,WAAU,CAAGA,EACpB,IACK,CAAA06D,UAAA,CAAAl7D,IAEJ,KAAAk7D,UAAA,CAAA57D,GAhCD,EAuCyCg7D,kBAC5B,SAAWv4E,CAAC,CAAAC,CAAA,EACzB,IAAAyE,EAAY3D,GAAGwa,IAAA,CAAAwQ,mBAAA,EACfrnB,CAAAA,EAAO1E,KAAA,CAAMA,EACb0E,EAAIzE,MAAA,CAAYA,EAAA,IACVq5E,EAAW,CACXhzD,MAAA,GACAizD,mBAAY,GACZC,MAAA,GACAC,QAAA,GAEFC,UAAY,EAChB,EAAAl8D,EAAK9Y,EAAImZ,UAAA,SAAAy7D,GACP97D,GACDA,CAAAA,EAAA9Y,EAAAmZ,UAAA,sBAAAy7D,EAAA,EAEC97D,IAGFA,EAAAm8D,UAAA,UAEA,IAAI,CAACj1E,MAAK,CAAAA,EACZ,KAAA8Y,EAAA,CAAAA,EAEA,EAY+EnX,aACpE,SAAOH,CAAA,CAAA0d,CAAA,CAAA5jB,CAAA,CAAAC,CAAA,CAAA0d,CAAA,CAAAo2D,CAAA,EAChB,IA6JAp2D,EAAwC3d,EAAAC,EAAAie,EAAAE,EA5JpCw7D,EADAp8D,EAAA,KAAAA,EAAA,CAEFu2D,GACD6F,CAAAA,EAAA,KAAAC,gBAAA,CAAA9F,EAAAnwD,EAAA,EACmB,IAClBnG,EAAe,CACfmiD,cAAAh8C,EAAgB5jB,KAAO,EAAM4jB,EAAIg8C,aAAO,CACxCC,eAAaj8C,EAAA3jB,MAAA,EAAA2jB,EAAAi8C,cAAA,CACb8V,YAAA31E,EACA41E,aAAA31E,EACAke,iBAAAne,EACAqe,kBAASpe,EACTpI,QAAA2lB,EACAs8D,cAAe,IAAI,CAACvpE,aAAa,CAACiN,EAAIxd,EAAOC,EAAA,CAAA25E,GAAAh2D,GAC7Cm2D,cAAA,IAAiB,CAAAxpE,aAAA,CACfiN,EAAIxd,EAACC,GACP+5E,gBAAgBJ,GAAM,KAAArpE,aAAA,CAAAiN,EAAAxd,EAAAC,EAAA,CAAA25E,GAAAh2D,GACtBq2D,OAAO/zE,EAAIzK,MAAA,CACXy+E,MAAA,GACA1B,UAAA,IAAc,CAAAA,SAAK,CACnB2B,aAAM,KAAAA,YAAA,CACNC,KAAA,EACA1F,cAAc,KAChB/2D,aAAAA,CACA,EACG08D,EAAA78D,EAAA88D,iBAA8B,GAUnC,OATE98D,EAAA+8D,eAAgB,CAAA/8D,EAAAg9D,WAAiB,CAAAH,GAAAn0E,EAAE+gB,OAAU,UAAOrc,CAAQ,EAAgBA,GAAAA,EAAA6vE,OAAA,CAAAh9D,EAC5E,GAkIwCzd,EAAA2d,CAAxCA,EAAUF,EAAUE,YAAoB,EAAA3d,KAAA,CAAAC,EAAA0d,EAAA1d,MAAA,CAAAie,EAAAT,EAAAU,gBAAA,CAAAC,EAAAX,EAAAY,iBAAA,CAC1Cre,CAAAA,IAAAke,GAAkBje,IAAGme,CAAA,IACrBT,EAAa3d,KAAA,CAAMke,EACpBP,EAAA1d,MAAA,CAAAme,GAnIG,IAAG,CAAA+6D,UAAY,CAAA37D,EAAGC,GAClBD,EAAGk9D,WAAA,CAAAl9D,EAAcm9D,UAAA,KAAc,EAC/Bn9D,EAAGo9D,aAAa,CAACn9D,EAAcq8D,aAAa,EAC5Ct8D,EAAGo9D,aAAA,CAAAn9D,EAAkBs8D,aAAA,EACrBv8D,EAAAq9D,iBAAa,CAAAR,GACb18D,EAAOE,UAAA,OAAAqmD,YAAA,cACTzmD,CAEA,EAGoBzG,QACd,UAAW,CACb,IAAI,CAACtS,MAAM,GACX,IAAI,CAACA,MAAK,CAAI,KACf,KAAA8Y,EAAA,OAEH,KAAAs9D,gBAAA,EAEA,EAG6BA,iBACtB,UAAgB,CACrB,IAAI,CAACX,YAAY,CAAG,CAAC,EACvB,KAAAY,YAAA,GAEA,EAW+DxqE,cACzD,SAAaiN,CAAA,CAAAxd,CAAA,CAAaC,CAAA,CAAA+6E,CAAA,EAC9B,IAAG1qE,EAAWkN,EAACjN,aAAe,GAYhC,OAXEiN,EAAGk9D,WAAA,CAAAl9D,EAAcm9D,UAAG,CAAUrqE,GAC9BkN,EAAGy9D,aAAa,CAACz9D,EAAGm9D,UAAU,CAAEn9D,EAAG09D,kBAAkB,CAAE19D,EAAG29D,OAAO,EACjE39D,EAAGy9D,aAAa,CAACz9D,EAAGm9D,UAAU,CAAEn9D,EAAG49D,kBAAgB,CAAG59D,EAAA29D,OAAA,EACtD39D,EAAGy9D,aAAa,CAACz9D,EAAGm9D,UAAU,CAAEn9D,EAAG69D,cAAc,CAAE79D,EAAG89D,aAAa,EACnE99D,EAAAy9D,aAAI,CAAAz9D,EAAAm9D,UAAoB,CAAAn9D,EAAA+9D,cAAA,CAAA/9D,EAAA89D,aAAA,EACtBN,EACFx9D,EACKg+D,UAAA,CAAAh+D,EAAAm9D,UAAA,GAAAn9D,EAAAqB,IAAA,CAAArB,EAAAqB,IAAA,CAAArB,EAAAsB,aAAA,CAAAk8D,GAEJx9D,EAAAg+D,UAAA,CAAAh+D,EAAAm9D,UAAA,GAAAn9D,EAAAqB,IAAA,CAAA7e,EAAAC,EAAA,EAAAud,EAAAqB,IAAA,CAAArB,EAAAsB,aAAA,OAEHxO,CAEA,EASyDupE,iBAC9C,SAAa4B,CAAS,CAAET,CAAA,KAC/B,KAAAD,YAAY,CAAAU,EAAa,CAC3B,OACK,KAAAV,YAAA,CAAAU,EAAA,CAGH,IAAInrE,EAAC,IAAa,CAAAC,aAAY,MAAAiN,EAAA,CAAAw9D,EAAAh7E,KAAA,CAAAg7E,EAAA/6E,MAAA,CAAA+6E,GAE/B,OADC,KAAAD,YAAO,CAAAU,EAAA,CAAAnrE,EACRA,CAGH,EAMsCqkE,kBAC3B,SAAaZ,CAAS,CAAE,CAC/B,IAAI,CAACgH,YAAG,CAAAhH,EAAmB,GAC3B,KAAAv2D,EAAO,CAAAo9D,aAAK,KAAa,CAAAG,YAAS,CAAAhH,EAAA,EACnC,YAAAgH,YAAA,CAAAhH,EAAA,CAGH,EAEAoF,WAAA57D,GAO2Bi6D,eAChB,UAAS,IAChB,KAAAkE,OAAY,CACb,YAAAA,OAAA,CAC2B,IAAEl+D,EAAA,KAAUA,EAAA,CAAAk+D,EAAA,CAAIC,SAAQ,GAAGC,OAAA,EACvD,EAAS,GACP,CAAAp+D,EACD,OAAAk+D,CACD,CACA,IAAIG,EAAKr+D,EAAAs+D,YAAA,iCACPD,EAAI,CACJ,IAAIF,EAASn+D,EAAGk6D,YAAa,CAAAmE,EAAIE,uBAAqB,EAClDH,EAAAp+D,EAAUk6D,YAAA,CAAAmE,EAAAG,qBAAA,EACZL,GACDD,CAAAA,EAAAC,QAAA,CAAAA,EAAAltD,WAAA,IAECmtD,GACDF,CAAAA,EAAAE,MAAA,CAAAA,EAAAntD,WAAA,GAEH,QACA,KAAAitD,OAAO,CAAAA,EACTA,CACF,CACF,CAEA,IAwDY,UAEV,CAEA,aAEA,IAAAx3C,EAAO,aAK2B,SAAAjjB,GAAA,EAHlClgB,GAAAkgB,qBAAA,CAAAA,EAKuFA,EACrFpL,SAAmB,EACnB8+D,kBAASzwC,EACTltB,QAAAktB,EAEA42C,iBAAA52C,EAWAhnB,UAAA,GAUwF7W,aAC5E,SAAAH,CAAa,CAAA+1E,CAAW,CAAAtG,CAAA,CAAAC,CAAA,CAAAj4D,CAAA,EAClC,IAAIC,EAAAD,EAAUE,UAAkB,OAChCD,EAAII,SAAA,CAAAi+D,EAAgB,EAAY,EAACtG,EAAMC,GACvC,IAAIjoD,EAAA/P,EAAAgQ,YAAwB,KAAA+nD,EAAmBC,GAC3CsG,EAAgBt+D,EAAAgQ,YAAA,KAAA+nD,EAAAC,GAClBn4D,EAAa,CACbk4D,YAAAA,EACAC,aAAWA,EACXjoD,UAAAA,EACAwuD,WAAAF,EACAC,kBAAUA,EACVhwD,SAAKvO,EACLC,IAAAA,EACF82D,cAAA,MAQF,OAPmCxuE,EAAE+gB,OAAO,UAAQrc,CAAA,EAAgBA,EAAA6vE,OAAA,CAAAh9D,EAClE,GACEA,CAAAA,EAAakQ,SAAQ,CAAA3tB,KAAA,GAAA21E,GAAwBl4D,EAAKkQ,SAAA,CAAA1tB,MAAA,GAAA21E,CAAA,IAClDj4D,EAAa3d,KAAA,CAAMyd,EAAGkQ,SAAc,CAAS3tB,KAAC,CAC/C2d,EAAA1d,MAAA,CAAAwd,EAAAkQ,SAAA,CAAA1tB,MAAA,EAED2d,EAAAqB,YAAO,CAAAxB,EAAAkQ,SAAA,MACTlQ,CAEF,CACF,CACA,IAOA1c,GAAOK,KAAM,CAAAL,GAAUK,KAAO,EAAK,CAAC,EAEpCL,GAAAK,KAAA,CAAA8E,OAAA,CAAAnF,GAAAK,KAAA,CAAA8E,OAAA,KAOEnF,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAAr7E,GAAAwa,IAAA,CAAAG,WAAA,EAOAnf,KAAA,aAYA8/E,aAAgB,qJAOhBC,eAAA,iJAI8Bx+C,WACxB,SAASziC,CAAA,EACXA,GACD,KAAAsoD,UAAA,CAAAtoD,EAGH,EAI8BsoD,WACnB,SAAQtoD,CAAS,MACxB,IAAI6mB,KAAM7mB,EACZ,KAAA6mB,EAAA,CAAA7mB,CAAA,CAAA6mB,EAAA,EAUwDq6D,cACxD,SAAiB/+D,CAAA,CAAA8+D,CAAuB,CAAAD,CAAc,EACtDC,EAAeA,GAAoB,IAAC,CAAAA,cAAY,CAChDD,EAAWA,GAAmB,KAAAA,YAAQ,CACnB,UAAjBt7E,GAAAu3E,cAAiB,EAIlBgE,CAAAA,EAAAA,EAAAvzE,OAAA,uCAAAhI,GAAAu3E,cAAA,YAED,IAAGkE,EAAah/D,EAAAw6D,YAAc,CAAAx6D,EAAAi/D,aAAA,EAE+B,GAD7Dj/D,EAAG06D,YAAA,CAAasE,EAACH,GACjB7+D,EAAA26D,aAAQ,CAAAqE,GACN,CAAAh/D,EAAA46D,kBACE,CAAAoE,EAAAh/D,EAAA66D,cAAA,EACA,YAGH,wCAAA97E,IAAA,MAAAihB,EAAAk/D,gBAAA,CAAAF,GAAA,CAGD,IAAGzE,EAAav6D,EAAAw6D,YAAgB,CAAAx6D,EAAAy6D,eAAA,EAE+B,GAD/Dz6D,EAAG06D,YAAA,CAAaH,EAACuE,GACjB9+D,EAAA26D,aAAQ,CAAAJ,GACN,CAAAv6D,EAAA46D,kBACE,CAAAL,EAAAv6D,EAAA66D,cAAA,EACA,YAGH,0CAAA97E,IAAA,MAAAihB,EAAAk/D,gBAAA,CAAA3E,GAAA,CAGD,IAAG4E,EAAAn/D,EAAa++D,aAAS,GAG6B,GAFtD/+D,EAAGo/D,YAAY,CAACD,EAASH,GACzBh/D,EAAGo/D,YAAY,CAAAD,EAAA5E,GACfv6D,EAAAq/D,WAAQ,CAAAF,GACN,CAAAn/D,EAAAs/D,mBACE,CAAAH,EAAAn/D,EAAAu/D,WAAA,EACA,YAGH,wCAAAv/D,EAAAw/D,iBAAA,CAAAL,GAAA,CAGD,IAAIM,EAAmB,IAAK,CAAAC,qBAAoB,CAAI1/D,EAAAm/D,GACpDQ,EAAuB,IAAG,CAAAC,mBAAqB,CAAC5/D,EAAAm/D,IAAS,GAElD,OADPQ,EAAiBE,MAAM,CAAG7/D,EAAG8/D,kBAAkB,CAACX,EAAS,UACzDQ,EAAOI,MAAA,CAAA//D,EAAA8/D,kBAAA,CAAAX,EAAA,UACL,CACAA,QAAAA,EACAM,mBAAkBA,EACpBE,iBAAAA,CACF,CAEA,EAO6CD,sBACpC,SAAA1/D,CAAA,CAAAm/D,CAAA,QACL,CACFnE,UAAAh7D,EAAAggE,iBAAA,CAAAb,EAAA,YACF,CAEA,EASkDS,oBAChD,WAEF,QAEA,EAMmEK,kBAC7D,SAAoBjgE,CAAA,CAAAy/D,CAAmB,CAAAS,CAAS,EACpD,IAAIC,EAAYV,EAAYzE,SAAA,CACzBoF,EAAUpgE,EAACqgE,YAAG,GACjBrgE,EAAGsgE,UAAA,CAAAtgE,EAAAugE,YAAwB,CAAAH,GAC3BpgE,EAAGwgE,uBAAoB,CAAAL,GACvBngE,EAAGygE,mBAAc,CAAAN,EAAc,EAAAngE,EAAe0gE,KAAG,IAAW,KAC9D1gE,EAAA2gE,UAAA,CAAA3gE,EAAAugE,YAAA,CAAAL,EAAAlgE,EAAA4gE,WAAA,CAEA,EAAqCC,kBAC1B,SAAehjF,CAAE,CAAO,CACjC,IAAwB2E,EAAAC,EAApBud,EAAAniB,EAAQxD,OAAY,CACtBwD,EAAQ4+E,MAAA,CAAQ,GAChBj6E,EAAA3E,EAAS8iB,gBAAQ,CACjBle,EAAI5E,EAAQgjB,iBAAgB,CAC1BhjB,CAAAA,EAAGs6E,WAAc,GAAA31E,GAAQ3E,EAAau6E,YAAA,GAAA31E,CAAA,IACtCud,EAAAo9D,aAAQ,CAAAv/E,EAAgB0+E,aAAQ,EACjC1+E,EAAA0+E,aAAA,CAAA1+E,EAAAq5E,aAAA,CAAAnkE,aAAA,CAAAiN,EAAAxd,EAAAC,IAGHud,EACK8gE,oBAAA,CAAA9gE,EAAAg9D,WAAA,CAAAh9D,EAAA+gE,iBAAA,CAAA/gE,EAAAm9D,UAAA,CAAAt/E,EAAA0+E,aAAA,MAGHv8D,EAAG+8D,eAAM,CAAA/8D,EAAAg9D,WAAA,OACVh9D,EAAA0oB,MAAA,GAGH,EAAiCs4C,cACvB,SAAMnjF,CAAA,EACdA,EAAQ4+E,MAAI,GACZ5+E,EAAI++E,IAAO,GACX,IAAAtsD,EAAQzyB,EAAA0+E,aAAwB,CAChC1+E,EAAQ0+E,aAAa,CAAG1+E,EAAAy+E,aAAA,CAC1Bz+E,EAAAy+E,aAAA,CAAAhsD,CAEA,EAOwC+nD,eACvB,UAAC,CAEhB,IAAI4I,EAAM,KAAAC,aAAA,CAAAC,EAAA59E,GAAAK,KAAA,CAAA8E,OAAA,MAAA3J,IAAA,EAAAsZ,SAAA,KACR4oE,EAcD,QACH,CAfqC,IAC/B5+E,MAAKC,OAAQ,CAAA6+E,CAAO,CAAAF,EAAM,EAS3B,OAAAE,CAAA,CAAAF,EAAA,QAAAA,EAAA,CATyC,IACtC,IAAIztE,EAAI2tE,CAAM,CAACF,EAAE,CAAAhjF,MAAK,CAAOuV,KAAU,GACrC,KAAAytE,EAAO,CAAAztE,EAAK,GAAA2tE,CAAA,CAAAF,EAAA,CAAAztE,EAAA,CACb,QACH,CAEF,MACK,EAST,EAa2BypE,QACrB,SAAQp/E,CAAO,EACjBA,EAAK6+E,KAAA,EACL,IAAI,CAACmE,iBAAa,CAAAhjF,GAClB,IAAI,CAACujF,YAAA,CAAavjF,GACpB,IACK,CAAAmjF,aAAA,CAAAnjF,IAEJ,KAAAwjF,SAAA,CAAAxjF,EAGH,EAMkCyjF,eACnB,SAAAzjF,CAAa,EAI5B,OAHIA,EAAQ8+E,YAAa,CAAAn+C,cAAa,KAAK,CAAAz/B,IAAA,GACxClB,CAAAA,EAAA8+E,YAAA,MAAA59E,IAAA,OAAAggF,aAAA,CAAAlhF,EAAAxD,OAAA,GAEHwD,EAAA8+E,YAAA,MAAA59E,IAAA,GAcgCqiF,aACrB,SAAQvjF,CAAO,EACxB,IAAImiB,EAAAniB,EAAaxD,OAAC,CACdknF,EAAQ,IAAI,CAAAD,cAAU,CAAAzjF,EACxBA,CAAe,IAAfA,EAAG++E,IAAA,EAAe/+E,EAAY2+E,eAAQ,CACxCx8D,EACKk9D,WAAA,CAAAl9D,EAAAm9D,UAAA,CAAAt/E,EAAA2+E,eAAA,EAEJx8D,EAAAk9D,WAAA,CAAAl9D,EAAAm9D,UAAA,CAAAt/E,EAAAy+E,aAAA,EAEDt8D,EAAAwhE,UAAK,CAAAD,EAAApC,OAAsB,EAE3B,IAAG,CAAAc,iBAAiB,CAAAjgE,EAAAuhE,EAAA9B,kBAA6B,CAAA5hF,EAAQm9E,SAAW,EACpEh7D,EAAGyhE,SAAS,CAACF,EAAO5B,gBAAgB,CAACE,MAAM,CAAE,EAAIhiF,EAAQs6E,WAAA,EAEzDn4D,EAAAyhE,SAAK,CAAAF,EAAe5B,gBAAY,CAAAI,MAAA,GAAgBliF,EAAAu6E,YAAA,EAChD,IAAG,CAAAsJ,eAAe,CAAA1hE,EAAAuhE,EAAQ5B,gBAAkB,EAC5C3/D,EAAG2hE,QAAA,GAAW,EAAG9jF,EAAA8iB,gBAAmB,CAAA9iB,EAAAgjB,iBAAA,EACtCb,EAAA4hE,UAAA,CAAA5hE,EAAA6hE,cAAA,KAEA,EAA0DC,sBACvC,SAAA9hE,CAAA,CAAAlN,CAAA,CAAAivE,CAAA,EACjB/hE,EAAGgiE,aAAY,CAAAD,GACf/hE,EAAAk9D,WAAA,CAAAl9D,EAAAm9D,UAAA,CAAArqE,GAEFkN,EAAAgiE,aAAA,CAAAhiE,EAAAiiE,QAAA,CAEA,EAAmDC,wBAChC,SAAAliE,CAAA,CAAA+hE,CAAA,EACjB/hE,EAAGgiE,aAAY,CAAAD,GACf/hE,EAAGk9D,WAAA,CAAAl9D,EAAcm9D,UAAW,OAC9Bn9D,EAAAgiE,aAAA,CAAAhiE,EAAAiiE,QAAA,CAEA,EAA6BE,iBACf,UAAK,CACnB,iBAAAjB,aAAA,GAEkCkB,iBACtB,SAAa5jF,CAAI,EAC7B,UAAA0iF,aAAA,EAAA1iF,CAEA,EASEkjF,gBAAA,WAGF,EAImCW,gBACpB,SAAWxkF,CAAA,KACtB,CAAAA,EAAIykF,SAAY,EAChB,IAAAA,EAAevjE,SAAGwN,aAAmB,UACrC+1D,CAAAA,EAAU9/E,KAAA,CAAM3E,EAAGs6E,WAAQ,CAC3BmK,EAAQ7/E,MAAA,CAAS5E,EAAGu6E,YAAA,CACrBv6E,EAAAykF,SAAA,CAAAA,CACH,GAMqBl3B,SACf,UAAS,KAAEhtD,EAAM,CAAaW,KAAA,IAAQ,CAAIA,IAAC,EAC/CwjF,EAAW,KAAArB,aAAA,CAIb,OAHIqB,GACDnkF,CAAAA,CAAA,CAAAmkF,EAAA,MAAAA,EAAA,EAEHnkF,CAEA,EAImBmb,OACjB,WAEF,YAAA6xC,QAAA,EACF,CAEA,GAAwE7nD,GACtEK,KAAI,CAAA8E,OAAS,CAAIk2E,UAAO,CAAA1xD,UAAc,UAAY9uB,CAAC,CAAA+mB,CAAA,EACnD,IAAA/X,EAAY,IAAA7J,GAASK,KAAA,CAAA8E,OAAA,CAAAtK,EAAAW,IAAA,EAAAX,GAEvB,OADE+mB,GAAOA,EAAA/X,GACTA,CACC,EAQC1E,EAAAnF,CAAAA,EAAA+R,CANAA,EA6JQoH,GAvJRnZ,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,EAAA3a,EAAAwa,IAAA,CAAAG,WAAA,CAqB+GxV,EAE7G85E,WAAA,CAAAtkE,EAAAxV,EAAAk2E,UAAA,EAOA7/E,KAAA,cAYA+/E,eAAA,0QAQQlvD,OACN,CAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACb,EAED,CAEAsxD,cAAA,SAQAuB,WAAA,GAI8BniD,WACvB,SAAUziC,CAAA,EACf,KAAAoiC,SAAA,cAAApiC,GAEF,KAAA+xB,MAAA,MAAAA,MAAA,CAAAlY,KAAA,GAEA,EAM6B2pE,UACvB,SAAYxjF,CAAA,CAAQ,CAMxB,IAA8BtE,EAAAu0C,EAAApiC,EAAAD,EAAA+H,EAAApI,EAAA+kB,EAARA,SAAQ,CAAA/kB,IAAA,CAAAqqE,EAAArqE,EAAAnN,MAAA,CAAAs2B,EAAA,KAAA3E,MAAA,CAAA6yD,EAAA,KAAAA,UAAA,KAC5BjvE,EAAI,EAAAA,EAAOiiE,EAAAjiE,GAAA,EACXja,EAAI6R,CAAI,CAACoI,EAAA,CACTs6B,EAAI1iC,CAAI,CAACoI,EAAI,EAAE,CACf9H,EAAIN,CAAA,CAAAoI,EAAA,GACFivE,GACAr3E,CAAI,CAACoI,EAAA,CAAIja,EAAKg7B,CAAA,GAAI,CAAEuZ,EAAKvZ,CAAA,GAAI,CAAE7oB,EAAK6oB,CAAA,GAAI,CAAEA,IAAAA,CAAE,GAAG,CAC/CnpB,CAAI,CAACoI,EAAI,EAAE,CAAGja,EAAIg7B,CAAC,CAAC,GAAGuZ,EAAGvZ,CAAI,CAAC,EAAC,CAAG7oB,EAAG6oB,CAAA,CAAI,EAAE,CAAGA,IAAAA,CAAA,GAAI,CACrDnpB,CACK,CAAAoI,EAAA,GAAAja,EAAAg7B,CAAA,KAAAuZ,EAAAvZ,CAAA,KAAA7oB,EAAA6oB,CAAA,KAAAA,IAAAA,CAAA,OAEH9oB,EAAIL,CAAG,CAAAoI,EAAG,EAAK,CACfpI,CAAI,CAACoI,EAAA,CAAIja,EAAKg7B,CAAA,GAAI,CAAEuZ,EAAKvZ,CAAA,GAAI,CAAE7oB,EAAK6oB,CAAA,GAAI,CAAE9oB,EAAK8oB,CAAA,GAAI,CAAEA,IAAAA,CAAE,GAAG,CAC1DnpB,CAAI,CAACoI,EAAI,EAAE,CAAGja,EAAIg7B,CAAC,CAAC,GAAGuZ,EAAGvZ,CAAI,CAAC,EAAC,CAAG7oB,EAAG6oB,CAAA,CAAI,EAAE,CAAG9oB,EAAG8oB,CAAA,GAAK,CAACA,IAAAA,CAAG,GAAG,CAC9DnpB,CAAI,CAACoI,EAAI,EAAE,CAAGja,EAAIg7B,CAAC,CAAC,GAAG,CAAGuZ,EAAIvZ,CAAC,CAAC,GAAG,CAAG7oB,EAAI6oB,CAAC,CAAC,GAAG,CAAG9oB,EAAI8oB,CAAC,CAAC,GAAG,CAAGA,IAAAA,CAAC,CAAC,GAAG,CACpEnpB,CAAA,CAAAoI,EAAA,GAAAja,EAAAg7B,CAAA,KAAAuZ,EAAAvZ,CAAA,KAAA7oB,EAAA6oB,CAAA,KAAA9oB,EAAA8oB,CAAA,KAAAA,IAAAA,CAAA,KAIL,EAM2CqrD,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACAuD,aAAY1iE,EAAG8/D,kBAAmB,CAAAX,EAAS,gBAC7CwD,WAAA3iE,EAAA8/D,kBAAA,CAAAX,EAAA,aACF,CAEA,EAMgDuC,gBACjC,SACT1hE,CAAA,CAAA2/D,CAAS,MACPprD,EAAI,KAAA3E,MAAA,CAAAA,EAAA,CAAE2E,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CACtBA,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,EAAE,CACtBA,CAAC,CAAC,GAAKA,CAAC,CAAC,GAAG,CAAEA,CAAC,CAAC,GAAG,CAAEA,CAAC,CAAC,GAAG,CAC1BA,CAAC,CAAC,GAAG,CAAEA,CAAC,CAAC,GAAG,CAAEA,CAAC,CAAC,GAAG,CAAEA,CAAC,CAAC,GAAG,CAE5BA,CAAA,KAAY,CAAAquD,EAAK,CAAEruD,CAAC,CAAC,EAAE,CAAEA,CAAC,CAAC,GAAKA,CAAC,CAAC,GAAG,CAACA,CAAA,KAC1C,CACAvU,EAAG6iE,gBAAW,CAAAlD,EAAiB+C,YAAY,IAAA9yD,GAC7C5P,EAAA8iE,UAAA,CAAAnD,EAAAgD,UAAA,CAAAC,EACF,CAEA,GAQCr/E,EAAiCK,KAAA,CAAA8E,OAAc,CAAA85E,WAAA,CAAAt1D,UAAA,CAAA3pB,EAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,EAAAnF,CAAAA,EAAA+R,CANAA,EA+GQoH,GAzGRnZ,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,EAAA3a,EAAAwa,IAAA,CAAAG,WAAA,CAc6GxV,EAE3Gq6E,UAAA,CAAA7kE,EAAAxV,EAAAk2E,UAAA,EAOA7/E,KAAA,aAaA+/E,eAAA,6NASAkE,WAAA,EAOA9B,cAAA,aAM6BG,UACvB,SAAKxjF,CAAU,CAAK,CAAG,GACzB,SAAAmlF,UAAA,EAKF,IAA6BxvE,EAAApI,EAAA+kB,EAARA,SAAQ,CAAA/kB,IAAA,CAAAoZ,EAAApZ,EAAAnN,MAAA,CAAA+kF,EAAAt8D,KAAArI,KAAA,UAAA2kE,UAAA,MAC3BxvE,EAAI,EAAGA,EAAGgR,EAAKhR,GAAK,EACpBpI,CAAI,CAACoI,EAAA,CAAIpI,CAAK,CAAAoI,EAAA,CAAKwvE,EACnB53E,CAAI,CAACoI,EAAI,EAAE,CAAGpI,CAAI,CAACoI,EAAI,EAAE,CAAGwvE,EAC9B53E,CAAA,CAAAoI,EAAA,GAAApI,CAAA,CAAAoI,EAAA,GAAAwvE,EAPA,EAgByCpD,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACF8D,YAAAjjE,EAAA8/D,kBAAA,CAAAX,EAAA,cACF,CAEA,EAMgDuC,gBACjC,SAAA1hE,CAAA,CAAA2/D,CAA4B,CAAE,CAC7C3/D,EAAAyhE,SAAA,CAAA9B,EAAAsD,WAAA,MAAAD,UAAA,CACF,CAEA,GASCz/E,EAAiCK,KAAA,CAAA8E,OAAc,CAAAq6E,UAAA,CAAA71D,UAAA,CAAA3pB,EAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAUhDvQ,GAAApZ,CAAAA,GAAA+R,CAPAA,EA8VQoH,GAvVRnZ,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,MAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAjU,GAAAnF,GAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CA6C2GxV,GAEzGw6E,SAAA,CAAAhlE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,YAKAokF,OAAA,GAGQvzD,OAAC,CAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAEnC,CAGgBkvD,eACd,CAgBAsE,cAAe,qcAkBfC,cAAe,2hBAgBfC,cAAe,0cAkBfC,cAAe,4hBAgBfC,cAAe,0cAkBfC,cAAe,4hBAgBfC,cAAe,0cAkBjBC,cAAA,2hBAEA,EAekCrC,eACrB,SAASzjF,CAAM,EAC1B,IAAIsF,EAAAujB,KAAW1J,IAAK,KAAI,CAAA4S,MAAG,CAAM3xB,MAAA,EAC7Bs4E,EAAA,IAAe,CAAAx3E,IAAK,KAAAoE,EAAe,SAAS,CAAAggF,MAAA,MAC5CzI,EAAS,KAAAoE,cAAa,CAAAvI,EAAe,CAI3C,OAHI14E,EAAQ8+E,YAAa,CAAAn+C,cAAY,CAAI+3C,IACtC14E,CAAAA,EAAA8+E,YAAA,CAAApG,EAAA,MAAAwI,aAAA,CAAAlhF,EAAAxD,OAAA,CAAAqgF,EAAA,EAEH78E,EAAA8+E,YAAA,CAAApG,EAAA,EAQ6B8K,UACvB,SAAYxjF,CAAA,CAAQ,CAUpB,IAKqBtE,EAAAu0C,EAAApiC,EAAAD,EAAAm4E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAr8D,EAAAC,EAAA8S,EAAAC,EALrBxK,EAAgBtyB,EAAMsyB,SACtB,CAAG/kB,EAAM+kB,EACT/kB,IAAA,CAAK64E,EAAK,IAAQ,CAAAr0D,MACf,CAAGs0D,EAAIx9D,KAAArI,KAAA,CAAAqI,KAAA1J,IAAA,CAAAinE,EAAAhmF,MAAA,GAAAkmF,EAAAz9D,KAAAvI,KAAA,CAAA+lE,EAAA,GAAAE,EAAAj0D,EAAA3tB,KAAA,CAAA6hF,EAAAl0D,EAAA1tB,MAAA,CAAA6hF,EAAAzmF,EAAAuiB,GAAA,CAAAmkE,eAAA,CAAAH,EAAAC,GAAAG,EAAAF,EAAAl5E,IAAA,CAEdq5E,EAAY,IAAI,CAAAtB,MAAI,CAAK,QACvBv7D,EAAK,EAAAA,EAAOy8D,EAAIz8D,IAAS,IACvBD,EAAA,EAAAA,EAAUy8D,EAAIz8D,IAAK,CAKW,IAC5BgT,EAAK,EALPipD,EAAA,CAAAh8D,EAAAw8D,EAAAz8D,CAAAA,EAAA,EAEOpuB,EAAI,EAAGu0C,EAAI,EAAGpiC,EAAI,EAEzBD,EAAK,EACEkvB,EAAQupD,EAAKvpD,IAAY,IAC5BD,EAAA,EAAMA,EAAIwpD,EAAKxpD,IACfopD,EAAMl8D,EAAI+S,EAAKwpD,EAEfN,EAAAl8D,EAAA+S,EAAAypD,EAEEL,EAAA,GAASA,GAAAO,GAAAR,EAAA,GAAAA,GAAAO,IAIXL,EAAK,CAAAD,EAAQM,EAAKP,CAAA,EAAU,EAE5BG,EAAKC,CAAK,CAAAtpD,EAAOupD,EAAGxpD,EAAA,CACpBnhC,GAAK6R,CAAI,CAAC24E,EAAA,CAASC,EACnBl2C,GAAK1iC,CAAI,CAAC24E,EAAS,EAAE,CAAGC,EACxBt4E,GAAAN,CAAA,CAAA24E,EAAA,GAAAC,EAEES,GACDh5E,CAAAA,GAAAL,CAAA,CAAA24E,EAAA,GAAAC,CAAA,EAILQ,CAAAA,CAAG,CAACZ,EAAA,CAASrqF,EACbirF,CAAG,CAACZ,EAAS,EAAE,CAAG91C,EAClB02C,CAAA,CAAIZ,EAAC,EAAU,CAAAl4E,EACb+4E,EAIDD,CAAA,CAAAZ,EAAA,GAAAx4E,CAAA,CAAAw4E,EAAA,GAHDY,CACK,CAAAZ,EAAA,GAAAn4E,CAIT,CAEF5N,EAAAsyB,SAAA,CAAAm0D,CAEA,EAM2C1E,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACAuF,QAAS1kE,EAAG8/D,kBAAkB,CAACX,EAAS,WACxCwF,QAAA3kE,EAAW8/D,kBAAG,CAAAX,EAAmB,WACjCyF,UAAU5kE,EAAA8/D,kBAAmB,CAAAX,EAAS,aACxC0F,MAAA7kE,EAAA8/D,kBAAA,CAAAX,EAAA,QACF,CAEA,EAMgDuC,gBACjC,SAAC1hE,CAAA,CAAA2/D,CAA0B,CAAI,CAC9C3/D,EAAA8kE,UAAA,CAAAnF,EAAA+E,OAAA,MAAA90D,MAAA,CAEA,EAIqBw7B,SACnB,UAAc,CAA4B,OACxCzuC,GAAQ,IAAK,CAAAsjB,SAAM,cACnBkjD,OAAQ,IAAI,CAACA,MAAM,CACrBvzD,OAAA,KAAAA,MAAA,EAEJ,CAEA,GASCrsB,GAAiCK,KAAA,CAAA8E,OAAc,CAAAw6E,SAAA,CAAAh2D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GAwJQoH,GAlJRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAW2GxV,GAEzGE,SAAA,CAAAsV,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,YAAgB+/E,eACL,CAQTpwC,QAAA,+PASAq2C,UAAA,+SASFC,WAAA,qRAGA,EAOAC,KAAA,UAEA/D,cAAA,OAM6BG,UACvB,SAAYxjF,CAAA,CAAQ,CAIxB,IAA6B2V,EAAAhV,EAAA4M,EAAA+kB,EAARA,SAAQ,CAAA/kB,IAAA,CAAAoZ,EAAApZ,EAAAnN,MAAA,CAAAgnF,EAAA,KAAAA,IAAA,KAC3BzxE,EAAI,EAAAA,EAAAgR,EAAShR,GAAA,EACXyxE,YAAAA,EACFzmF,EACS,CAAA4M,CAAA,CAAAoI,EAAS,CAAApI,CAAA,CAAAoI,EAAA,EAAa,CAAApI,CAAA,CAAAoI,EAAA,MAC7ByxE,cAAAA,EAEFzmF,EACS,CAAAkoB,KAAAzkB,GAAS,CAAAmJ,CAAA,CAAAoI,EAAA,CAAApI,CAAc,CAAAoI,EAAA,GAAApI,CAAA,CAAAoI,EAAA,IAAAkT,KAAAxkB,GAAA,CAAAkJ,CAAA,CAAAoI,EAAA,CAAApI,CAAA,CAAAoI,EAAA,GAAApI,CAAA,CAAAoI,EAAA,OACf,eAAfyxE,GACDzmF,CAAAA,EAAA,IAAA4M,CAAA,CAAAoI,EAAA,KAAApI,CAAA,CAAAoI,EAAA,OAAApI,CAAA,CAAAoI,EAAA,IAEDpI,CAAI,CAACoI,EAAA,CAAIhV,EACT4M,CAAI,CAACoI,EAAI,EAAE,CAAGhV,EAChB4M,CAAA,CAAAoI,EAAA,GAAAhV,CAGF,EAMkC8iF,eAC5B,SAAgBzjF,CAAO,EAC3B,IAAI04E,EAAS,KAAAx3E,IAAA,CAAa,SAAAkmF,IAAe,CAAW,GAClD,CAAApnF,EAAI8+E,YAAe,CAAAn+C,cAAK,CAAA+3C,GAAwB,CAChD,IAAAmE,EAAQ,IAAa,CAAAoE,cAAiB,MAAAmG,IAAA,EACvCpnF,EAAA8+E,YAAA,CAAApG,EAAA,MAAAwI,aAAA,CAAAlhF,EAAAxD,OAAA,CAAAqgF,EACD,QACF78E,EAAA8+E,YAAA,CAAApG,EAAA,EAQ2CqJ,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACF+F,MAAAllE,EAAA8/D,kBAAA,CAAAX,EAAA,QACF,CAEA,EAMgDuC,gBAC9C,SAAA1hE,CAAwB,CAAA2/D,CAAA,EAG1B3/D,EAAAmlE,SAAA,CAAAxF,EAAAuF,KAAA,CADK,EAGL,EAK2B7M,eACb,WACd,QACF,CAEA,GASC90E,GAAiCK,KAAA,CAAA8E,OAAc,CAAAE,SAAA,CAAAskB,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GA6GQoH,GAvGRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAWqGxV,GAEnG08E,MAAA,CAAAlnE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,SAaA+/E,eAAA,qSAOAuG,OAAA,GAEAnE,cAAA,SAM6BG,UACvB,SAAYxjF,CAAA,CAAQ,CAGxB,IAA6B2V,EAAApI,EAAA+kB,EAARA,SAAQ,CAAA/kB,IAAA,CAAAoZ,EAAApZ,EAAAnN,MAAA,KAC3BuV,EAAI,EAAGA,EAAGgR,EAAMhR,GAAK,EACrBpI,CAAI,CAACoI,EAAA,CAAI,IAAKpI,CAAM,CAAAoI,EAAA,CACpBpI,CAAI,CAACoI,EAAI,EAAE,CAAG,IAAMpI,CAAI,CAACoI,EAAI,EAAE,CACjCpI,CAAA,CAAAoI,EAAA,OAAApI,CAAA,CAAAoI,EAAA,IASyB6kE,eACZ,UAAM,CACrB,YAAAgN,MAAA,EAQ2CzF,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACFmG,QAAAtlE,EAAA8/D,kBAAA,CAAAX,EAAA,UACF,CAEA,EAMgDuC,gBACjC,SAAA1hE,CAAA,CAAA2/D,CAA0B,CAAK,CAC9C3/D,EAAAmlE,SAAA,CAAAxF,EAAA2F,OAAA,MAAAD,MAAA,CACF,CAEA,GAUC9hF,GAAiCK,KAAA,CAAA8E,OAAc,CAAA08E,MAAA,CAAAl4D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAUhDvQ,GAAApZ,CAAAA,GAAA+R,CAPAA,GAoIQoH,GA7HRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAjU,GAAAnF,GAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAemGxV,GAEjG68E,KAAA,CAAArnE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,QAkBA+/E,eAAA,ucAOAoC,cAAA,QAOAsE,MAAA,EAM6BnE,UACvB,SAAUxjF,CAAQ,KACpB,SAAA2nF,KAAA,EAMF,IAAgDhyE,EAAAiyE,EAAbr6E,EAAK+kB,EAAjBA,SAAQ,CAAiB/kB,IAAA,CAAAoZ,EAAApZ,EAAAnN,MAAA,CAAAunF,EAAA,KAAAA,KAAA,KAE9ChyE,EAAA,EAAOgR,EAACpZ,EAAMnN,MAAK,CAAMuV,EAACgR,EAAKhR,GAAA,EAE/BiyE,EAAO,IAAI/+D,KAAAQ,MAAA,IAAAs+D,EACXp6E,CAAI,CAACoI,EAAA,EAAMiyE,EACXr6E,CAAI,CAACoI,EAAI,EAAE,EAAIiyE,EACjBr6E,CAAA,CAAAoI,EAAA,IAAAiyE,EAXA,EAoByC7F,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACAuG,OAAO1lE,EAAG8/D,kBAAmB,CAAAX,EAAS,UACxCwG,MAAA3lE,EAAA8/D,kBAAA,CAAAX,EAAA,QACF,CAEA,EAMgDuC,gBACjC,SAAA1hE,CAAA,CAAA2/D,CAA6B,CAAC,CAC3C3/D,EAAGyhE,SAAS,CAAC9B,EAAiB+F,MAAK,CAAE,IAAK,CAAAF,KAAM,MAClDxlE,EAAAyhE,SAAA,CAAA9B,EAAAgG,KAAA,CAAAj/D,KAAAQ,MAAA,GAEA,EAIqBkkC,SACnB,UAAc,CAA4B,OACxCzuC,GAAO,IAAK,CAAAsjB,SAAK,cACnBulD,MAAA,KAAAA,KAAA,EAEJ,CAEA,GASCjiF,GAAiCK,KAAA,CAAA8E,OAAc,CAAA68E,KAAA,CAAAr4D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GAuIQoH,GAjIRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAcyGxV,GAEvGk9E,QAAA,CAAA1nE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,WAEA8mF,UAAA,EAEA3E,cAAA,YAqBApC,eAAA,6fAM6BuC,UACvB,SAAYxjF,CAAA,CAAQ,CAOxB,IAA2C8V,EAAAH,EAAA2kB,EAAA5+B,EAAAu0C,EAAApiC,EAAAD,EAAAq6E,EAAAC,EAAAC,EAAAC,EAAtC91D,EAAWtyB,EAAMsyB,SAAU,CAAA/kB,EAAW+kB,EAAA/kB,IAAA,CAAAqqE,EAAAtlD,EAAA1tB,MAAA,CAAAizE,EAAAvlD,EAAA3tB,KAAA,KACzCgR,EAAK,EAAAA,EAAOiiE,EAAIjiE,GAAM,IAAK,CAAAqyE,SAAK,CAAW,IAEzC1tD,EAAA,EAAAA,EAAQu9C,EAAUv9C,GAAA,IAAQ,CAAI0tD,SAAA,CASC,IAN/BtsF,EAAI6R,CAAI,CADRuI,EAAQH,EAAAA,EAAOkiE,EAAAv9C,EAAAA,EACN,CACT2V,EAAI1iC,CAAI,CAACuI,EAAQ,EAAE,CACnBjI,EAAIN,CAAI,CAACuI,EAAQ,EAAE,CAEnBlI,EAAAL,CAAQ,CAAAuI,EAAS,GACjBqyE,EAAQt/D,KAAKzkB,GAAG,CAACuR,EAAI,IAAI,CAACqyE,SAAS,CAAEpQ,GACrCwQ,EAAKv/D,KAAQzkB,GAAA,CAAKk2B,EAAA,IAAO,CAAA0tD,SAAM,CAAAnQ,GAC7BoQ,EAAKtyE,EAAAsyE,EAAQE,EAAKF,IAAa,IAC7BC,EAAA5tD,EAAQ4tD,EAAME,EAAKF,IAEnB36E,CAAI,CADJuI,EAAKmyE,EAAAA,EAASpQ,EAAAqQ,EAAAA,EACT,CAAQxsF,EACb6R,CAAI,CAACuI,EAAQ,EAAE,CAAGm6B,EAClB1iC,CAAI,CAACuI,EAAQ,EAAE,CAAGjI,EACpBN,CAAA,CAAAuI,EAAA,GAAAlI,CAMR,EAG2B4sE,eACb,UAAS,CACvB,gBAAAwN,SAAA,EAQ2CjG,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACA+G,WAAWlmE,EAAA8/D,kBAAmB,CAAAX,EAAS,cACvCU,OAAQ7/D,EAAG8/D,kBAAkB,CAACX,EAAS,UACzCY,OAAA//D,EAAA8/D,kBAAA,CAAAX,EAAA,SACF,CAEA,EAMgDuC,gBACjC,SAAA1hE,CAAA,CAAA2/D,CAA6B,EAC5C3/D,EAAAyhE,SAAA,CAAA9B,EAAAuG,UAAA,MAAAL,SAAA,CACF,CAEA,GASCtiF,GAAiCK,KAAA,CAAA8E,OAAc,CAAAk9E,QAAA,CAAA14D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAUhDvQ,GAAApZ,CAAAA,GAAA+R,CAPAA,GA2KQoH,GApKRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAAjU,GAAAnF,GAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAe+GxV,GAE7Gy9E,WAAA,CAAAjoE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,cAOAkN,MAAA,UAeA6yE,eAAA,uTAMA1hD,SAAA,IAMAgpD,SAAA,GAY6B/E,UACvB,SAAYxjF,CAAA,CAAQ,CAKb,IACO2V,EAAAja,EAAAu0C,EAAApiC,EAAAN,EAAA+kB,EAAAA,SAAA,CAAA/kB,IAAA,CAAAgyB,EAAA,SAAAA,QAAA,CAAAhX,EAAA,IAAA7iB,GAAAwmC,KAAA,MAAA99B,KAAA,EAAA+9B,SAAA,GAAAq8C,EAAA,CACZjgE,CAAM,CAAC,EAAE,CAAGgX,EACZhX,CAAM,CAAC,EAAE,CAAGgX,EAEdhX,CAAA,CAAQ,GAAAgX,EAAA,CAAAkpD,EACC,CACPlgE,CAAM,CAAC,EAAE,CAAGgX,EACZhX,CAAM,CAAC,EAAE,CAAGgX,EACbhX,CAAA,IAAAgX,EAGL,CAAqC,IACnC5pB,EAAI,EAAAA,EAAOpI,EAAAnN,MAAA,CAAAuV,GAAA,EACXja,EAAI6R,CAAI,CAACoI,EAAA,CACTs6B,EAAI1iC,CAAI,CAACoI,EAAI,EAAE,CAEf9H,EAAIN,CAAI,CAAAoI,EAAK,EAAE,CAMbja,EAAI8sF,CAAC,CAAI,EAAE,EAAGv4C,EAAAu4C,CAAA,KAAA36E,EAAA26E,CAAA,KAAA9sF,EAAA+sF,CAAA,KAAAx4C,EAAAw4C,CAAA,KAAA56E,EAAA46E,CAAA,KACfl7E,CAAAA,CAAA,CAAAoI,EAAA,KAIL,EAM2CosE,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACAoH,KAAAvmE,EAAO8/D,kBAAG,CAAkBX,EAAC,QAC/BqH,MAAAxmE,EAAA8/D,kBAAA,CAAAX,EAAA,QACF,CAEA,EAMgDuC,gBACjC,SAAI1hE,CAAO,CAAA2/D,CAAkB,EAE/B,IACLv5D,EAAI,IAAS7iB,GAAGwmC,KAAM,MAAA99B,KAAA,EAAA+9B,SAAA,GAAA5M,EAAAtS,WAAA,KAAAsS,QAAA,EAAAipD,EAAA,CACtB,EAAIjgE,CAAM,CAAC,EAAE,CAAG,IAAMgX,EACtB,EAAIhX,CAAM,CAAC,EAAE,CAAG,IAAMgX,EACtB,EAAAhX,CAAA,QAAAgX,EAEF,EAAQ,CAAAkpD,EACC,CACPlgE,CAAM,CAAC,EAAE,CAAG,IAAMgX,EAClBhX,CAAM,CAAC,EAAE,CAAG,IAAMgX,EAClBhX,CAAA,QAAAgX,EACD,EACL,CACApd,EAAG8iE,UAAU,CAACnD,EAAiB4G,IAAA,CAAKF,GACtCrmE,EAAA8iE,UAAA,CAAAnD,EAAA6G,KAAA,CAAAF,EAEA,EAIqBl7B,SACnB,UAAc,CAA4B,OACxCzuC,GAAO,IAAK,CAAAsjB,SAAK,cACjBh0B,MAAA,IAAU,CAAAA,KAAK,CACjBmxB,SAAA,KAAAA,QAAA,EAEJ,CAEA,GASC75B,GAAiCK,KAAA,CAAA8E,OAAc,CAAAy9E,WAAA,CAAAj5D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAChC,SAEhB5X,CAAA,EAEA,aAIA,IAAI/R,EAAA+R,EAAW/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,KAAAmF,EAAAnF,EAAAK,KAAA,CAAA8E,OAAA,CAAAwV,EAAA3a,EAAAwa,IAAA,CAAAG,WAAA,CACbuoE,EAAS,CAAAC,QACP,CAAQ,MAAQ,OAAS,QAAE,EAC3B,KAAS,OAAQ,OAAQ,OAAE,EAC3B,OAAQ,OAAS,QAAQ,OAAE,EAC3B,QAAE,EAAE,EAAE,EAAE,EACT,EACD,CAASC,QACP,CAAQ,OAAQ,OAAS,QAAE,EAC3B,OAAQ,OAAQ,OAAQ,OAAE,EAC1B,OAAQ,MAAS,QAAQ,OAAE,EAC3B,OAAE,EAAE,EAAE,EAAE,EACT,EACD,CAAYC,WACV,CAAQ,QAAS,QAAS,QAAE,EAC5B,OAAS,QAAQ,QAAS,QAAE,EAC5B,OAAS,QAAS,QAAQ,QAAE,EAC5B,OAAE,EAAE,EAAE,EAAE,EACT,EACD,CAAaC,YACX,CAAQ,QAAS,QAAS,QAAE,EAC5B,OAAS,QAAQ,QAAS,QAAE,EAC5B,QAAS,OAAS,QAAQ,QAAE,EAC5B,OAAE,EAAE,EAAE,EAAE,EACT,EACD,CAAUC,SACR,CAAM,MAAO,MAAO,MAAE,EACtB,EAAO,MAAM,MAAO,MAAE,EACtB,EAAO,MAAO,MAAM,MAAE,EACtB,EAAE,EAAE,EAAE,EAAE,EACT,EACD,CAAOC,MACL,CAAO,KAAO,KAAO,KAAG,EACxB,EAAO,KAAO,KAAO,KAAG,EACxB,EAAO,KAAO,KAAO,KAAG,EACxB,EAAG,EAAG,EAAG,EAAG,EACb,EACD,CAAYC,WACV,CAAK,IAAK,IAAK,IAAG,EAClB,GAAK,IAAK,IAAK,IAAG,EAClB,GAAK,IAAK,IAAK,IAAG,EAClB,GAAG,EAAG,EAAG,EAAG,EACb,EACH,EAE0B,IACxB,IAAAj5E,KAAQ04E,EAA2F/9E,CAEjG,CAAAqF,EAAA,CAAAmQ,EAAAxV,EAAA85E,WAAA,EAKMzjF,KAENgP,EAOqB6hB,OAErB62D,CAAA,CAAA14E,EAAA,CAGoBmzE,cACpB,GAKFuB,WAAA,EACA,GACFl/E,EAAAK,KAAA,CAAA8E,OAAA,CAAAqF,EAAA,CAAAmf,UAAA,CAAA3pB,EAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,EAEQxQ,GAORhU,GAAAnF,CAAAA,GAAA+R,EAAA/R,MAAA,EAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAqBwGxV,GAChGu+E,UAAA,CAAA/oE,GAAAxV,GAAAk2E,UAAA,EAEN7/E,KAAA,aAQAkN,MAAA,UAQAg5E,KAAA,WAOAn8D,MAAA,EAGgBg2D,eACJ,CACVv2D,SAAQ,oCACR2+D,OAAK,4EACL1/E,IAAA,oCACA2/E,KAAA,2DACAp9D,SAAS,oCACTq9D,QAAQ,0DACRC,OAAA,0DACAC,UAAS,4EAeT17B,QAAM,mbAER27B,KAAA,0EAEA,EAO4BC,YACnB,SAAAvC,CAAA,EAWT,4NAAAnG,cAAA,CAAAmG,EAAA,OAEA,EAMkC3D,eAC5B,SAAgBzjF,CAAO,EAC3B,IAAyC68E,EAArCnE,EAAS,KAAAx3E,IAAA,CAAa,SAAAkmF,IAAe,CAK3C,OAJIpnF,EAAA8+E,YAAoB,CAAAn+C,cAAgB,CAAC+3C,KACrCmE,EAAQ,KAAY8M,WAAU,KAAG,CAAIvC,IAAC,EACvCpnF,EAAA8+E,YAAA,CAAApG,EAAA,MAAAwI,aAAA,CAAAlhF,EAAAxD,OAAA,CAAAqgF,IAEH78E,EAAA8+E,YAAA,CAAApG,EAAA,EAQ6B8K,UACvB,SAAYxjF,CAAA,CAAQ,CAMxB,IAA+C0lD,EAAAkkC,EAAAvyD,EAAA37B,EAAAu0C,EAAApiC,EAAA0a,EAAhBhb,EAAO+kB,EAAlBA,SAAW,CAAgB/kB,IAAA,CAAAqqE,EAAArqE,EAAAnN,MAAA,CAAAypF,EAAA,OAAA5+D,KAAA,CAE/Cy6B,EAAKn9B,CADLA,EAAK,IAAO7iB,GAAKwmC,KAAK,KAAK,CAAA99B,KAAA,EAAA+9B,SAAA,GAChB,CAAC,EAAE,CAAG,IAAI,CAAClhB,KAAK,CAC3B2+D,EAAKrhE,CAAM,CAAC,EAAE,CAAG,IAAI,CAAC0C,KAAK,CAE3BoM,EAAK9O,CAAI,CAAI,GAAG,IAAI,CAAA0C,KAAM,CAAQ,IAEhC,IAAItV,EAAI,EAAGA,EAAAiiE,EAAAjiE,GAAA,EAIM,OAHjBja,EAAI6R,CAAI,CAACoI,EAAA,CACTs6B,EAAI1iC,CAAI,CAACoI,EAAI,EAAE,CAEf9H,EAAAN,CAAQ,CAAAoI,EAAK,GACX,IAAK,CAAAyxE,IAAA,MACH,WACA75E,CAAI,CAACoI,EAAA,CAAIja,EAAKgqD,EAAI,IAClBn4C,CAAI,CAACoI,EAAI,EAAE,CAAGs6B,EAAI25C,EAAK,IACvBr8E,CAAA,CAAMoI,EAAA,GAAA9H,EAAAwpB,EAAA,IACR,KAAK,KACH,SACA9pB,CAAI,CAACoI,EAAA,CAAI,IAAK,KAAOja,CAAAA,EAAM,KAAMgqD,CAAA,EAAO,IACxCn4C,CAAI,CAACoI,EAAI,EAAE,CAAG,IAAM,CAAC,IAAMs6B,CAAAA,EAAM,KAAM25C,CAAA,EAAM,IAC7Cr8E,CAAA,CAAMoI,EAAA,YAAA9H,CAAAA,EAAA,KAAAwpB,CAAA,MACR,KAAK,KACH,MACA9pB,CAAI,CAACoI,EAAA,CAAIja,EAAKgqD,EACdn4C,CAAI,CAACoI,EAAI,EAAE,CAAGs6B,EAAI25C,EAClBr8E,CAAA,CAAMoI,EAAA,GAAA9H,EAAAwpB,EACR,KAAK,KACA,WACH,aACA9pB,CAAI,CAACoI,EAAA,CAAIkT,KAAKtI,GAAA,CAAK7kB,EAAIgqD,GACvBn4C,CAAI,CAACoI,EAAI,EAAE,CAAGkT,KAAKtI,GAAG,CAAC0vB,EAAI25C,GAC3Br8E,CAAA,CAAMoI,EAAA,GAAAkT,KAAAtI,GAAA,CAAA1S,EAAAwpB,GACR,KAAK,KACH,WACA9pB,CAAI,CAACoI,EAAA,CAAIja,EAAKgqD,EACdn4C,CAAI,CAACoI,EAAI,EAAE,CAAGs6B,EAAI25C,EAClBr8E,CAAA,CAAMoI,EAAA,GAAA9H,EAAAwpB,EACR,KAAK,KACH,SACA9pB,CAAI,CAACoI,EAAA,CAAIkT,KAAKzkB,GAAA,CAAK1I,EAAGgqD,GACtBn4C,CAAI,CAACoI,EAAI,EAAE,CAAGkT,KAAKzkB,GAAG,CAAC6rC,EAAG25C,GAC1Br8E,CAAA,CAAMoI,EAAA,GAAAkT,KAAAzkB,GAAA,CAAAyJ,EAAAwpB,GACR,KAAK,KACH,UACA9pB,CAAI,CAACoI,EAAA,CAAIkT,KAAKxkB,GAAA,CAAK3I,EAAGgqD,GACtBn4C,CAAI,CAACoI,EAAI,EAAE,CAAGkT,KAAKxkB,GAAG,CAAC4rC,EAAG25C,GAC1Br8E,CAAA,CAAMoI,EAAA,GAAAkT,KAAAxkB,GAAA,CAAAwJ,EAAAwpB,GACR,KAAK,KACH,UACA9pB,CAAI,CAACoI,EAAA,CAAI+vC,EAAK,IAAK,EAAOhqD,EAAIgqD,EAAI,IAAK,IAAQ,EAAM,KAAKhqD,CAAAA,EAAM,KAAMgqD,CAAA,EAAO,IAC7En4C,CAAI,CAACoI,EAAI,EAAE,CAAGi0E,EAAK,IAAO,EAAI35C,EAAI25C,EAAK,IAAQ,IAAM,EAAK,KAAM35C,CAAAA,EAAM,KAAM25C,CAAA,EAAM,GAAI,CACtFr8E,CAAA,CAAMoI,EAAA,GAAA0hB,EAAA,MAAAxpB,EAAAwpB,EAAA,eAAAxpB,CAAAA,EAAA,KAAAwpB,CAAA,MACR,KAAK,KACH,YACA9pB,CAAI,CAACoI,EAAA,CAAI+vC,EAAKhqD,EAAK,EAAKgqD,EAAKhqD,EAAK,IAClC6R,CAAI,CAACoI,EAAI,EAAE,CAAGi0E,EAAK35C,EAAK,EAAK25C,EAAK35C,EAAK,IACvC1iC,CAAA,CAAMoI,EAAA,GAAA0hB,EAAAxpB,EAAA,EAAAwpB,EAAAxpB,EAAA,IACR,KAAK,KACH,OACAN,CAAI,CAACoI,EAAA,CAAI+vC,EAAKhqD,EAAKmuF,EACnBt8E,CAAI,CAACoI,EAAI,EAAE,CAAGi0E,EAAK35C,EAAI45C,EAC3Bt8E,CAAA,CAAAoI,EAAA,GAAA0hB,EAAAxpB,EAAAg8E,CACF,CAGF,EAM2C9H,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACFwI,OAAA3nE,EAAA8/D,kBAAA,CAAAX,EAAA,SACF,CAEA,EAMgDuC,gBACjC,SAAI1hE,CAAO,CAAA2/D,CAAkB,EAC1C,IAAAv5D,EAAY,IAAK7iB,GAAKwmC,KAAG,KAAS,CAAA99B,KAAG,EAAA+9B,SAAA,EACrC5jB,CAAAA,CAAM,CAAC,EAAE,CAAG,IAAI,CAAC0C,KAAK,CAAG1C,CAAM,CAAC,EAAE,CAAG,IACrCA,CAAM,CAAC,EAAE,CAAG,IAAI,CAAC0C,KAAK,CAAG1C,CAAM,CAAC,EAAE,CAAG,IACrCA,CAAM,CAAC,EAAE,CAAG,IAAI,CAAC0C,KAAK,CAAA1C,CAAA,QACtBA,CAAG,QAAW,CAAA0C,KAAA,CAChB9I,EAAA8iE,UAAA,CAAAnD,EAAAgI,MAAA,CAAAvhE,EAEA,EAIqBglC,SACnB,UAAO,OACL,CACArsD,KAAA,IAAO,CAAIA,IAAC,CACZkN,MAAM,IAAK,CAAAA,KAAI,CACfg5E,KAAA,IAAO,CAAIA,IAAC,CACdn8D,MAAA,KAAAA,KAAA,CAEJ,CAEA,GASCvlB,GAAiCK,KAAA,CAAA8E,OAAc,CAAAu+E,UAAA,CAAA/5D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAQhDxkB,GAAAnF,CAAAA,GAAA+R,EAAA/R,MAAA,EAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAqB6GxV,GACrGk/E,UAAA,CAAA1pE,GAAAxV,GAAAk2E,UAAA,EAEN7/E,KAAA,aAMAqJ,MAAA,KAOA68E,KAAA,WAMAn8D,MAAA,EAUA+1D,aAAA,2QAGgBC,eACJ,CAYVv2D,SAAM,2TAYRs/D,KAAA,mTAEA,EAMkCvG,eAC5B,SAAgBzjF,CAAO,EAC3B,IAAI04E,EAAA,IAAe,CAAAx3E,IAAK,UAAckmF,IAAC,CACnCvK,EAAS,KAAAoE,cAAa,KAAe,CAAAmG,IAAA,EAI3C,OAHIpnF,EAAQ8+E,YAAa,CAAAn+C,cAAY,CAAI+3C,IACtC14E,CAAAA,EAAA8+E,YAAA,CAAApG,EAAA,MAAAwI,aAAA,CAAAlhF,EAAAxD,OAAA,CAAAqgF,EAAA,EAEH78E,EAAA8+E,YAAA,CAAApG,EAAA,EAEgC6K,aAC9B,SAAAvjF,CAAyB,EAGzB,IAAImiB,EAACniB,EAAAxD,OAAA,CAAqByY,EAAK,IAAS,CAAAC,aAAW,CAAAlV,EAAAq5E,aAAA,MAAA9uE,KAAA,EACnD,IAAI,CAAC05E,qBAAU,CAAA9hE,EAAgBlN,EAAAkN,EAAA8nE,QAAA,EAC/B,IAAI,CAAC7nD,SAAA,gBAAwBpiC,GAC/B,KAAAqkF,uBAAA,CAAAliE,EAAAA,EAAA8nE,QAAA,CAEA,EAAwC/0E,cAC/B,SAAQkkE,CAAA,CAAA7uE,CAAiB,EAClC,OAAA6uE,EAAAoF,gBAAA,CAAAj0E,EAAAmuE,QAAA,CAAAnuE,EAAAsuE,QAAA,CAEA,EAM4BqR,gBACd,UACR,CAEJ,IAAA3/E,EAAO,KAAAA,KAAA,CAAA5F,EAAA4F,EAAAsuE,QAAA,CAAAl0E,KAAA,CAAAC,EAAA2F,EAAAsuE,QAAA,CAAAj0E,MAAA,OACL,CAAkB,EAAA2F,EAAAI,MAAA,CAAG,EACrB,EAAG,EAAkB,EAAAJ,EAAAK,MAAA,CACrB,EAAqB,CAACL,EAAMkB,IAAG,CAAG9G,EAAQ,CAAA4F,EAAAiB,GAAA,CAAA5G,EAC3C,EACH,EAQ6B4+E,UACvB,SAAYxjF,CAAA,CAAQ,CASxB,IAA2B0lD,EAAAkkC,EAAAvyD,EAAAD,EAAA17B,EAAAu0C,EAAApiC,EAAAD,EAAAu8E,EAAA3tF,EAAA4tF,EAAvB93D,EAAWtyB,EAAAsyB,SAAY,CAAAzQ,EAAA7hB,EAAAq5E,aAAA,CAAAx3D,SAAA,CAAAtU,EAAA+kB,EAAA/kB,IAAA,CAAAqqE,EAAArqE,EAAAnN,MAAA,CAAAuE,EAAA2tB,EAAA3tB,KAAA,CAAAC,EAAA0tB,EAAA1tB,MAAA,CAAA2F,EAAA,KAAAA,KAAA,CACzBsX,EAAUwoE,UAAU,EACrBxoE,CAAAA,EAAAwoE,UAAA,CAAA3kF,GAAAwa,IAAA,CAAAwQ,mBAAA,IAGDl0B,EAAI2tF,CADJA,EAAUtoE,EAAQwoE,UAAW,EACZ7nE,UAAK,OACpB2nE,EAAQxlF,KAAK,GAAGA,GAAAwlF,EAAAvlF,MAAA,GAAAA,GAChBulF,EAAQxlF,KAAA,CAAMA,EAChBwlF,EACKvlF,MAAA,CAAAA,GAEJpI,EAAAmuD,SAAA,KAAAhmD,EAAAC,GAEDpI,EAAQqsE,YAAU,CAAAt+D,EAAMI,MAAQ,CAAE,EAAG,EAAGJ,EAAOK,MAAA,CAAAL,EAAAkB,IAAA,CAAAlB,EAAAiB,GAAA,EAC/ChP,EAAAmmB,SAAY,CAAApY,EAAQsuE,QAAY,CAAC,EAAG,EAAGl0E,EAAOC,GAC9CwlF,EAAa5tF,EAAO+1B,YAAc,KAAA5tB,EAAAC,GAAA2I,IAAA,KAEhC,IAAIoI,EAAI,EAAGA,EAAAiiE,EAAAjiE,GAAA,EAUM,OATjBja,EAAI6R,CAAI,CAACoI,EAAA,CACTs6B,EAAI1iC,CAAI,CAACoI,EAAI,EAAE,CACf9H,EAAIN,CAAI,CAACoI,EAAI,EAAE,CAEf/H,EAAAL,CAAK,CAAAoI,EAAA,EAAU,CACf+vC,EAAK0kC,CAAS,CAACz0E,EAAA,CACfi0E,EAAKQ,CAAS,CAACz0E,EAAI,EAAE,CACrB0hB,EAAK+yD,CAAS,CAACz0E,EAAI,EAAE,CAErByhB,EAAAgzD,CAAa,CAAAz0E,EAAI,GACf,IAAK,CAAAyxE,IAAA,MACH,WACA75E,CAAI,CAACoI,EAAA,CAAIja,EAAKgqD,EAAI,IAClBn4C,CAAI,CAACoI,EAAI,EAAE,CAAGs6B,EAAI25C,EAAK,IACvBr8E,CAAI,CAACoI,EAAI,EAAE,CAAG9H,EAAIwpB,EAAK,IACvB9pB,CAAA,CAAMoI,EAAA,GAAA/H,EAAAwpB,EAAA,IACR,KAAK,KACH,OACA7pB,CAAA,CAAMoI,EAAA,GAAAyhB,CAEZ,CAGF,EAM2C2qD,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACAgJ,iBAAWnoE,EAAA8/D,kBAA4B,CAAAX,EAAA,oBACzCiJ,OAAApoE,EAAA8/D,kBAAA,CAAAX,EAAA,SACF,CAEA,EAMgDuC,gBACjC,SAAK1hE,CAAA,CAAA2/D,CAAe,EACjC,IAAG/vD,EAAU,KAAAm4D,eAAiB,GAC9B/nE,EAAGmlE,SAAA,CAAAxF,EAAiByI,MAAA,CAAiB,GACvCpoE,EAAAqoE,gBAAA,CAAA1I,EAAAwI,gBAAA,IAAAv4D,EAEA,EAIqBw7B,SACnB,UAAO,OACL,CACArsD,KAAA,IAAO,CAAIA,IAAC,CACZqJ,MAAM,IAAK,CAAAA,KAAI,OAAAA,KAAA,CAAAgjD,QAAA,GACf65B,KAAA,IAAO,CAAIA,IAAC,CACdn8D,MAAA,KAAAA,KAAA,CAEJ,CAEA,GAOwEvlB,GACtEK,KAAO,CAAA8E,OAAM,CAAAk/E,UAAW,CAAA16D,UAAc,UAAc9uB,CAAE,CAAA+mB,CAAA,EAAA5hB,GACpDK,KAAI,CAAAspB,UAAU,CAAA9uB,EAAYgK,KAAM,CAAC,SAAMA,CAAA,EACvC,IAAAvK,EAAa0F,GAAGwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,CAAA/K,EAChBP,CAAAA,EAAAuK,KAAa,CAAAA,EACf+c,EAAA,IAAA5hB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk/E,UAAA,CAAA/pF,GACF,EAEC,EAWD0F,GAAA+R,CARAA,GAweQoH,GAheRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,KAAA2Z,GAAAwJ,KAAAxJ,GAAA,CAAAiB,GAAAuI,KAAAvI,KAAA,CAAAnB,GAAA0J,KAAA1J,IAAA,CAAAoB,GAAAsI,KAAAtI,GAAA,CAAAC,GAAAqI,KAAArI,KAAA,CAAAC,GAAAoI,KAAApI,GAAA,CAAAC,GAAAmI,KAAAnI,IAAA,CAAA7V,GAAAnF,GAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAWqGxV,GAEnG4/E,MAAA,CAAApqE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,SASAwpF,WAAA,UAOA//E,OAAA,EAOAC,OAAA,EAQA+/E,aAAA,EAM2C5I,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACAsJ,OAAOzoE,EAAG8/D,kBAAmB,CAAAX,EAAS,UACxCuJ,MAAA1oE,EAAA8/D,kBAAA,CAAAX,EAAA,QACF,CAEA,EAMgDuC,gBACjC,SAAC1hE,CAAA,CAAA2/D,CAAyB,CAAK,CAAa3/D,EAAA2oE,UAAU,CAAAhJ,EAAK8I,MAAA,MAAAG,UAAA,EAAE,OAAApmF,KAAA,CAAK,GAAC,CAAG,EAAgB,OAAAC,MAAA,CACnG,EACFud,EAAA8kE,UAAA,CAAAnF,EAAA+I,KAAA,MAAAG,IAAA,CAEA,EAMkCvH,eAC5B,SAAezjF,CAAK,EACxB,IAAIirF,EAAS,KAAAC,eAAa,GAAexS,EAAW,KAAAx3E,IAAA,KAAA+pF,EAAA,GAClD,CAAAjrF,EAAI8+E,YAAiB,CAAAn+C,cAAK,CAAA+3C,GAAe,CACzC,IAAAgE,EAAqB,KAAAyO,cAAiB,CAAAF,EACvCjrF,CAAAA,EAAA8+E,YAAA,CAAApG,EAAA,MAAAwI,aAAA,CAAAlhF,EAAAxD,OAAA,CAAAkgF,EACD,QACF18E,EAAA8+E,YAAA,CAAApG,EAAA,EAE4BwS,gBACd,UAAK,CACjB,IAAAxgF,EAAY,IAAI,CAAC0gF,SAAK,CACxB,OAAAviE,KAAAnI,IAAA,MAAAiqE,YAAA,CAAAjgF,EAEA,EAAoB2gF,QACd,WAEoC,IACtC,IADGC,EAAW,IAAK,CAAAC,aAAc,CAAK,KAAAZ,YAAA,EAAAjgF,EAAA,KAAA0gF,SAAA,CAAAH,EAAA,KAAAC,eAAA,GAAAF,EAAA,MAAAC,GAClCt1E,EAAC,EAAMA,GAAGs1E,EAAat1E,IAC7Bq1E,CAAA,CAAAr1E,EAAA,GAAA21E,EAAA31E,EAAAjL,GAEF,OAAAsgF,CAEA,EAIuCG,eACjC,SAAcF,CAAM,EAGgB,IACtC,IADGO,EAAQ,MAAQP,GAAmBvO,EAAA,KAAA+O,iBAAA,CACtC91E,EAAQ,EAAAA,GAAMs1E,EAAOt1E,IACvB61E,CAAA,CAAA71E,EAAA,GAAAA,EAAA,cAeF,OARE+mE,GAJkB,uBAAAuO,4FAIkBO,EAClC5/D,OAAA,UAAkB1rB,CAAA,CAAAyV,CAAA,EAGpB+mE,GAFoB,8CAAgDx8E,EAAS,aAAeyV,EAAI,OAC5E,+CAA8BzV,EAAA,cAAAyV,8BAClDA,EAAA,MACA,GAEA+mE,qCAGF,EAKA+O,kBAAA,uGAY2BrM,QACrB,SAAQp/E,CAAO,EACjBA,EAAQ6+E,KAAA,EACR7+E,EAAK4+E,MAAQ,GACb,IAAI,CAACj6E,KAAA,CAAA3E,EAAas6E,WAAI,CACtB,IAAI,CAACyQ,UAAU,IACf,IAAI,CAACW,EAAE,CAAG7iE,KAAArI,KAAQ,MAAA7b,KAAY,MAAAgG,MAAA,EAC9B,IAAI,CAACghF,EAAA,CAAA3rF,EAAYu6E,YAAU,CAC3B,IAAI,CAAC6Q,SAAO,CAAK,KAAAM,EAAO,MAAA/mF,KAAA,CACxB,KAAAqmF,IAAQ,MAAAK,OAAgB,GACxBrrF,EAAK8iB,gBAAkB,MAAA4oE,EAAA,CACvB,IAAI,CAAC1I,iBAAa,CAAAhjF,GAClB,IAAI,CAACujF,YAAA,CAAavjF,GAClB,KAAAmjF,aAAQ,CAAWnjF,GAEnBA,EAAKs6E,WAAS,CAAQt6E,EAAA8iB,gBAAY,CAClC,IAAI,CAACle,MAAA,CAAA5E,EAAau6E,YAAK,CACvB,IAAI,CAACwQ,UAAU,IACf,IAAI,CAACY,EAAA,CAAA9iE,KAASrI,KAAG,CAAI,IAAG,CAAA5b,MAAQ,KAAM,CAAAgG,MAAA,EACtC,IAAI,CAACwgF,SAAO,CAAK,KAAAO,EAAO,MAAA/mF,MAAA,CACxB,KAAAomF,IAAQ,MAAAK,OAAA,GACRrrF,EAAKgjB,iBAAkB,MAAA2oE,EAAA,CACvB,IAAI,CAAC3I,iBAAa,CAAAhjF,GAClB,IAAI,CAACujF,YAAA,CAAavjF,GAClB,KAAAmjF,aAAQ,CAAAnjF,GACVA,EACKu6E,YAAA,CAAAv6E,EAAAgjB,iBAAA,EAEJ,KAAAwgE,SAAA,CAAAxjF,EAGH,EAA2Bw6E,eACb,UAAW,CACzB,gBAAA7vE,MAAA,WAAAC,MAAA,EAE+B2gF,cACtB,SAAYK,CAAA,SACjB,SAAS9hE,CAAA,EAAsB,GAC7BA,GAAA8hE,GAAO9hE,GAAA,CAAA8hE,EACR,QACD,CAA+C,GAC7C9hE,EAAA,cAAOA,EAAA,iBACR,QACD,CAEA,IAAA+hE,EAAO/hE,CADPA,GAAIjB,KAAKC,EAAA,EACG8iE,EACd,OAAAnrE,GAAAqJ,GAAAA,EAAArJ,GAAAorE,GAAAA,CACF,CAEA,EAO6BrI,UACvB,SAAYxjF,CAAA,CAAQ,CAIxB,IAAIsyB,EAAUtyB,EAAOsyB,SAAA,CAAA3nB,EAAA,KAAAA,MAAA,CAAAC,EAAA,KAAAA,MAAA,CACrB,IAAI,CAACkhF,SAAS,CAAG,EAAInhF,EAErB,IAAI,CAAAohF,SAAK,GAAUnhF,EAInB,IAAqCohF,EAAjCC,EAAK35D,EAAU3tB,KAAK,CAAAunF,EAAA55D,EAAa1tB,MAAA,CAAA8mF,EAAAlrE,GAAAyrE,EAAAthF,GAAAghF,EAAAnrE,GAAA0rE,EAAAthF,EACnC,CAAe,cAAf,KAAA8/E,UAAe,CACjBsB,EACS,IAAK,CAAAG,UAAU,CAAAnsF,EAAKisF,EAAWC,EAAAR,EAAAC,GACtC,gBAAU,CAAAjB,UAAK,CACjBsB,EACS,IAAK,CAAAI,iBAAe,CAAApsF,EAAYisF,EAAAC,EAAAR,EAAAC,GACvC,iBAAU,CAAAjB,UAAK,CACjBsB,EACS,IAAK,CAAAK,iBAAe,CAAArsF,EAAWisF,EAAAC,EAAAR,EAAAC,GACvB,YAAf,IAAU,CAAAjB,UAAK,EAChBsB,CAAAA,EAAA,KAAAM,aAAA,CAAAtsF,EAAAisF,EAAAC,EAAAR,EAAAC,EAAA,EAEH3rF,EAAAsyB,SAAA,CAAA05D,CAEA,EAS8CG,WACxC,SAAYnsF,CAAQ,CAAAisF,CAAA,CAAAC,CAAA,CAASR,CAC7B,CAAAC,CAAA,CAAO,CAGX,IAA2BY,EAAAhqE,EAAvB+P,EAAWtyB,EAAAsyB,SAAY,CAAAk6D,EAAA,GAAAC,EAAA,GAAAC,EAAAT,GAAAA,EAAAU,EAAAT,GAAAA,EAAArqE,EAAAnc,GAAA2zE,aAAA,CAAAx3D,SAAA,CAAAi5D,EAAA,EAAAC,EAAA,EAAA6R,EAAAX,EAAAY,EAAA,EAeF,IAdvBhrE,EAAUsqE,UAAU,EACrBtqE,CAAAA,EAAAsqE,UAAA,CAAAjrE,SAAAwN,aAAA,YAGC69D,CAAAA,CADFA,EAAI1qE,EAAkBsqE,UAAK,EACfxnF,KAAK,CAAGsnF,IAAAA,GAAKM,EAAA3nF,MAAA,CAAAsnF,CAAA,IACvBK,EAAU5nF,KAAA,CAAMsnF,IAAAA,EACjBM,EAAA3nF,MAAA,CAAAsnF,GAGD3pE,CADAA,EAAIgqE,EAAU/pE,UAAW,MAAK,EAC1BmoC,SAAA,GAAa,EAAAshC,IAAAA,EAAWC,GAE5B3pE,EAAAqB,YAAW,CAAA0O,EAAA,KACXo5D,EAAKprE,GAAMorE,GAEXC,EAAArrE,GAAQqrE,GACN,CAAAa,GAAK,CAAAC,GACLR,EAAKS,EACLR,EAAIS,EACFjB,EAAAprE,GAAQosE,GAAAA,GACVA,EACKpsE,GAAAosE,GAAAA,IAEHA,EAAQhB,EACTc,EAAA,IAECb,EAAArrE,GAAQqsE,GAAAA,GACVA,EACKrsE,GAAAqsE,GAAAA,IAEHA,EAAQhB,EACTc,EAAA,IAEDlqE,EAAAI,SAAK,CAAA4pE,EAAAzR,EAAAC,EAAAkR,EAAAC,EAAAU,EAAAC,EAAAH,EAAAC,GACL7R,EAAK8R,EACL7R,EAAA8R,EACFA,GAAAF,EAEF,OAAApqE,EAAAgQ,YAAA,CAAAuoD,EAAAC,EAAA2Q,EAAAC,EAEA,EASiDW,cAEtC,SAAWtsF,CAAA,CAAAisF,CAAA,CAAAC,CAAA,CAAAR,CAAA,CAAAC,CAAA,EA6DpB,IAAAmB,EAAO9sF,EAAQsyB,SAAA,CAAA/kB,IAAA,CAAAw/E,EAAA/sF,EAAAuiB,GAAA,CAAAmkE,eAAA,CAAAgF,EAAAC,GAAAqB,EAAAD,EAAAx/E,IAAA,CAAA0/E,EAAA,KAAA1B,aAAA,MAAAZ,YAAA,EAAAuC,EAAA,KAAApB,SAAA,CAAAqB,EAAA,KAAApB,SAAA,CAAAqB,EAAA,OAAAtB,SAAA,CAAAuB,EAAA,OAAAtB,SAAA,CAAAuB,EAAA5sE,GAAAwsE,EAAA,KAAAvC,YAAA,IAAA4C,EAAA7sE,GAAAysE,EAAA,KAAAxC,YAAA,IAAA6C,EAAA,GAAAn5D,EAAA,GAAAo5D,EAAA,GACjB,OAAAC,SA7DQA,EAAMC,CAAA,EAEV,IAAA3jE,EAAOrU,EAACi4E,EAAQzkE,EAAOvb,EAAAmrC,EAAAjE,EAAA9C,EAAA/mB,EAAA4iE,EAAAC,EAEE,IACvB9jE,EAAA,EAFFqK,EAAAvK,CAAQ,CAAC,CAAG6jE,EAAA,EAAM,EAAAT,EAClBO,EAAS3jE,CAAA,CAAGxJ,GAAI+T,EAASvK,CAAA,EAChBE,EAAI2hE,EAAC3hE,IAAM,CAG2C,IAF7DqK,EAAAtK,CAAQ,CAAC,CAAGC,EAAA,EAAM,EAAAmjE,EAClBM,EAAI1jE,CAAA,CAAAzJ,GAAA+T,EAAAtK,CAAA,EAAGnc,EAAA,EAASmrC,EAAA,EAAWjE,EAAO,EAAG9C,EAAA,EACrC/mB,EAAS,EACPtV,EAAI83E,EAAI3jE,CAAK,CAAAwjE,EAAS33E,GAAA83E,EAAA3jE,CAAA,CAAAwjE,EAAA33E,IAAA,GACpBA,CAAAA,CAAAA,EAAA,KAASA,CAAAA,GAAAs2E,CAAA,GAITuB,CAAU,CADZK,EAAKvtE,GAAA,IAAaC,GAAE5K,EAAA0e,EAAAvK,CAAA,GACL,EACd0jE,CAAAA,CAAA,CAAAK,EAAA,KACgE,IAC/D,IAAIvzD,EAAImzD,EAAK1jE,CAAA,CAAKwjE,EAAIjzD,GAAAmzD,EAAA1jE,CAAA,CAAAwjE,EAAAjzD,IACpBA,EAAA,GAASA,GAAA4xD,IAGX4B,EAAKxtE,GAAA,IAAaC,GAAI+Z,EAAEjG,EAAAtK,CAAA,GACtByjE,CAAU,CAAAK,EAAI,CAAAC,EAAG,EAClBN,CAAAA,CAAA,CAAAK,EAAA,CAAAC,EAAA,CAAAb,EAAA9tE,GAAAE,GAAAwuE,EAAAT,EAAA,GAAA/tE,GAAAyuE,EAAAT,EAAA,UAEDO,CAAAA,EAAIJ,CAAY,CAAAK,EAAA,CAAAC,EAAA,EACP,IACP3kE,EAAK,CAAAmR,EAAA2xD,EAAAt2E,CAAAA,EAAA,EACL/H,GAAAggF,EACA70C,GAAA60C,EAASd,CAAS,CAAA3jE,EAAQ,CAC1B2rB,GAAQ84C,EAASd,CAAQ,CAAA3jE,EAAM,EAAE,CACjC6oB,GAAA47C,EAASd,CAAS,CAAO3jE,EAAC,EAAM,CACjC8B,GAAA2iE,EAAAd,CAAA,CAAA3jE,EAAA,KApBH,CAyBM,CADRA,EAAA,CAAAa,EAAS0hE,EAAOiC,CAAAA,EAAA,EACP,CAAM50C,EAAKnrC,EACpBo/E,CAAQ,CAAC7jE,EAAM,EAAE,CAAG2rB,EAAOlnC,EAC3Bo/E,CAAQ,CAAC7jE,EAAM,EAAE,CAAG6oB,EAAApkC,EACtBo/E,CAAA,CAAA7jE,EAAA,GAAA8B,EAAArd,CAEA,OAAc,EACZ+/E,EAAAjC,EAEGgC,EAAAC,GAEJZ,CACH,EAaF,EAEA,EASqDV,kBACtC,SAASrsF,CAAM,CAAAisF,CAAO,CAAAC,CAAA,CAAAR,CAAO,CAAAC,CAAA,CACtC,CAKJ,IAAK/9E,EAAWkc,EAAIC,EAAApU,EAAK2kB,EAAAyzD,EAAAC,EAAAC,EAAA7/E,EAAA8/E,EAAAhuF,EAAA,EAAAgtF,EAAA,KAAApB,SAAA,CAAAqB,EAAA,KAAApB,SAAA,CAAAoC,EAAA,EAAAlC,CAAAA,EAAA,GAAAmC,EAAAlgE,EAAAoE,SAAA,CAAA/kB,IAAA,CAAA8gF,EAAAruF,EAAAuiB,GAAA,CAAAmkE,eAAA,CAAAgF,EAAAC,GAAA2C,EAAAD,EAAA9gF,IAAA,KACvBoI,EAAK,EAAAA,EAAOg2E,EAAIh2E,IAAS,IACvB2kB,EAAI,EAAAA,EAAMoxD,EAAApxD,IAMuB,IAC/B2zD,EAAI,EANNnkE,EAAIxJ,GAAM4sE,EAAS5yD,GACnBvQ,EAAAzJ,GAAQ6sE,EAASx3E,GACjBo4E,EAAQb,EAAS5yD,EAAIxQ,EACrBkkE,EAAAb,EAAex3E,EAAIoU,EAEnBmkE,EAAK,EAAUnkE,CAAAA,EAAAkiE,EAAUniE,CAAAA,EACbmkE,EAAC,EAAAA,IACXrgF,EAAIwgF,CAAM,CAACF,EAAUD,EAAI,CAKzB7/E,EAAAR,EAAW,GAAAmgF,CAAS,EAAG,GAAAC,CAAA,EAAAngF,CAJb,CAACqgF,EAAU,EAAAD,EAAK,CAIHF,EAAA,GAAAC,CAAA,EAAA/3D,CAHb,CAACi4D,EAAUC,EAAKF,EAAI,CAGPD,EAAA,GAAAD,CAAA,EAAApyF,CAFf,CAAAuyF,EAASC,EAAU,EAAAF,EAAI,CAERF,EAAAC,EACzBM,CAAA,CAAApuF,IAAA,CAAAkO,EAIN,OAAAigF,CAEA,EASqDjC,kBACtC,SAAKpsF,CAAW,CAAAisF,CAAA,CAAAC,CAAS,CAAAR,CAAK,CAAAC,CAAA,EAKd,IAC3B,IADG4C,EAAQ,IAAG,CAAAzC,SAAa,CAAA0C,EAAA,KAAAzC,SAAA,CAAA0C,EAAA/tE,GAAA6tE,EAAA,GAAAG,EAAAhuE,GAAA8tE,EAAA,GAAAjhF,EAAA2gB,EAAAoE,SAAA,CAAA/kB,IAAA,CAAAohF,EAAA3uF,EAAAuiB,GAAA,CAAAmkE,eAAA,CAAAgF,EAAAC,GAAAiD,EAAAD,EAAAphF,IAAA,CACtB+sB,EAAI,EAAAA,EAAOqxD,EAAIrxD,IAAS,IAC3B,IAAI3kB,EAAA,EAAMA,EAAI+1E,EAAI/1E,IAAC,CAE2C,IAC5D,IADG8hB,EAAI,CAAA9hB,EAAK2kB,EAAAoxD,CAAM,EAAI,EAAAkC,EAAS,EAAMxH,EAAS,EAAAyI,EAAc,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAlqC,EAAA,CAAAzqB,EAAA,IAAAk0D,EACxDU,EAAK5uE,GAAIga,EAAAk0D,GAAWU,EAAO,CAAA50D,EAAM,GAAAk0D,EACjCU,IAC0D,IAC5D,IADG3hD,EAAIhtB,GAAKwkC,EAAUmqC,CAAAA,EAAA,KAAcR,EAAU5pC,EAAQ,CAAMnvC,EAAA,IAAA44E,EAAAY,EAAA5hD,EAAAA,EACxDs+C,EAAKvrE,GAAI3K,EAAA44E,GAAW1C,EAAO,CAAAl2E,EAAM,GAAA44E,EACjC1C,IAAI,CACR,IAAAv+C,EAAA/sB,GAAAukC,EAAA+mC,CAAAA,EAA4B,EAC5B,GAAI4C,EAAcjc,EAAGrzD,GAAAgwE,EAAA7hD,EAAAA,GACVklC,EAAA,GAAAA,EAAA,KAKTob,CAAAA,CADFA,EAAI,EAASpb,EAAGA,EAAAA,EAAA,EAAAA,EAAAA,EAAA,GACJ,KAGVyc,GAAArB,EAAgBrgF,CAAA,CAAA+/B,CAFhBA,EAAA,EAAOu+C,CAAAA,EAAAqD,EAAAjD,CAAA,GAES,GAChB4C,GAAQjB,EAENrgF,CAAA,CAAA+/B,EAAS,QACVsgD,CAAAA,EAAAA,EAAArgF,CAAA,CAAA+/B,EAAA,QAEDwhD,GAAOlB,EAASrgF,CAAI,CAAC+/B,EAAA,CACrByhD,GAAOnB,EAASrgF,CAAI,CAAC+/B,EAAK,EAAE,CAC5B0hD,GAAApB,EAAWrgF,CAAA,CAAA+/B,EAAA,GACZ84C,GAAAwH,EAGL,CAEAgB,CAAK,CAACn3D,EAAA,CAAKq3D,EAAK1I,EAChBwI,CAAK,CAACn3D,EAAK,EAAE,CAAGs3D,EAAM3I,EACtBwI,CAAK,CAACn3D,EAAK,EAAE,CAAGu3D,EAAM5I,EACxBwI,CAAA,CAAAn3D,EAAA,GAAAw3D,EAAAJ,CACF,CAEF,OAAAF,CAEA,EAIqBphC,SACnB,UAAO,OACL,CACArsD,KAAA,IAAQ,CAAAA,IAAK,CACbyJ,OAAQ,IAAI,CAACA,MAAM,CACnBC,OAAA,IAAY,CAAAA,MAAK,CACjB8/E,WAAA,IAAc,CAAAA,UAAK,CACrBC,aAAA,KAAAA,YAAA,CAEJ,CAEA,GASCjlF,GAAiCK,KAAA,CAAA8E,OAAc,CAAA4/E,MAAA,CAAAp7D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GA+GQoH,GAzGRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAcyGxV,GAEvGukF,QAAA,CAAA/uE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,WAWA+/E,eAAA,8TAOAoO,SAAA,EAEAhM,cAAA,WAa6BG,UACnB,SAASxjF,CAAK,CAAG,IACvB,SAAAqvF,QAAA,EAOF,IAA6B15E,EAAAgR,EAAApZ,EAAA+kB,EAARA,SAAQ,CAAA/kB,IAAA,CAAAoZ,EAAApZ,EAAAnN,MAAA,CAAAivF,EAAAxmE,KAAAvI,KAAA,UAAA+uE,QAAA,EAAAC,EAAA,IAAAD,CAAAA,EAAA,eAAAA,CAAA,OAC3B15E,EAAI,EAAGA,EAAGgR,EAAAhR,GAAA,EACVpI,CAAI,CAACoI,EAAA,CAAI25E,EAAK/hF,CAAAA,CAAa,CAAAoI,EAAA,CAAK,KAAM,IACtCpI,CAAI,CAACoI,EAAI,EAAE,CAAG25E,EAAa/hF,CAAAA,CAAI,CAACoI,EAAI,EAAE,CAAG,KAAO,IAClDpI,CAAA,CAAAoI,EAAA,GAAA25E,EAAA/hF,CAAAA,CAAA,CAAAoI,EAAA,YATA,EAkByCosE,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACFiO,UAAAptE,EAAA8/D,kBAAA,CAAAX,EAAA,YACF,CAEA,EAMgDuC,gBACjC,SAAA1hE,CAAA,CAAA2/D,CAA4B,EAC3C3/D,EAAAyhE,SAAA,CAAA9B,EAAAyN,SAAA,MAAAF,QAAA,CACF,CAEA,GASC3pF,GAAiCK,KAAA,CAAA8E,OAAc,CAAAukF,QAAA,CAAA//D,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GAqHQoH,GA/GRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAc6GxV,GAE3G2kF,UAAA,CAAAnvE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,aAcA+/E,eAAA,weAUAwO,WAAA,EAEApM,cAAA,aAa6BG,UACvB,SAAKxjF,CAAU,CAAK,CAAG,GACzB,SAAAyvF,UAAA,EAMF,IAA6B95E,EAAAtR,EAAAkJ,EAAA+kB,EAARA,SAAQ,CAAA/kB,IAAA,CAAAoZ,EAAApZ,EAAAnN,MAAA,CAAAsvF,EAAA,MAAAD,UAAA,KAC3B95E,EAAA,EAAMA,EAAKgR,EAAIhR,GAAK,EACpBtR,EAAKwkB,KAAMxkB,GAAA,CAAAkJ,CAAQ,CAAAoI,EAAA,CAAKpI,CAAE,CAAGoI,EAAC,GAAMpI,CAAK,CAAAoI,EAAE,EAAI,EAC/CpI,CAAI,CAACoI,EAAA,EAAMtR,IAAIkJ,CAAQ,CAAAoI,EAAA,CAAK,CAAAtR,EAAMkJ,CAAI,CAAAoI,EAAA,EAAM+5E,EAAW,EACvDniF,CAAI,CAACoI,EAAI,EAAE,EAAItR,IAAQkJ,CAAI,CAACoI,EAAI,EAAE,CAAG,CAACtR,EAAMkJ,CAAI,CAACoI,EAAI,EAAE,EAAI+5E,EAAS,CAAC,CACvEniF,CAAA,CAAAoI,EAAA,IAAAtR,IAAAkJ,CAAA,CAAAoI,EAAA,IAAAtR,EAAAkJ,CAAA,CAAAoI,EAAA,IAAA+5E,EAAA,EATA,EAkByC3N,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACFqO,YAAAxtE,EAAA8/D,kBAAA,CAAAX,EAAA,cACF,CAEA,EAMgDuC,gBACjC,SAAA1hE,CAAA,CAAA2/D,CAA4B,CAAG,CAC9C3/D,EAAAyhE,SAAA,CAAA9B,EAAA6N,WAAA,OAAAF,UAAA,CACF,CAEA,GASC/pF,GAAiCK,KAAA,CAAA8E,OAAc,CAAA2kF,UAAA,CAAAngE,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GAuNQoH,GAjNRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAeiGxV,GAEzF+kF,IAAA,CAAAvvE,GAAAxV,GAAAk2E,UAAA,EAEN7/E,KAAA,OA0CA+/E,eAEA,mnBASAjxB,KAAA,EAEAqzB,cAAS,OAAkBjE,QACrB,SAAQp/E,CAAO,EACjBA,EAAA6+E,KAAA,EAEA,KAAAgR,WAAc,CAAA7vF,EAAAs6E,WAAA,CAAAt6E,EAAAu6E,YAAA,CACdv6E,EAAK4+E,MAAA,GACL,IAAI,CAACoE,iBAAiB,CAAAhjF,GACtB,IAAI,CAAC+qF,UAAA,CAAa,GAClB,IAAI,CAACxH,YAAA,CAAavjF,GAClB,IAAI,CAACmjF,aAAA,CAAAnjF,GACL,IAAI,CAACgjF,iBAAa,CAAKhjF,GACvB,IAAI,CAAC+qF,UAAA,CAAa,GAClB,IAAI,CAACxH,YAAA,CAAavjF,GACpB,IACK,CAAAmjF,aAAA,CAAAnjF,IAEJ,KAAAwjF,SAAA,CAAAxjF,EAGH,EAA6BwjF,UAC3B,SAAAxjF,CAAA,EAGFA,EAAAsyB,SAAA,MAAAw9D,UAAA,CAAA9vF,EAEA,EAA8B8vF,WACxB,SAAY9vF,CAAQ,EAIxB,IAA2BmqF,EAAA4F,EAAvBluE,EAAW7hB,EAAAq5E,aAAY,CAAAx3D,SAAA,CAAAld,EAAA3E,EAAAsyB,SAAA,CAAA3tB,KAAA,CAAAC,EAAA5E,EAAAsyB,SAAA,CAAA1tB,MAAA,CACzBid,EAAUmuE,UAAU,GACpBnuE,EAAUmuE,UAAU,CAAGtqF,GAAOwa,IAAI,CAACwQ,mBAAmB,GACvD7O,EAAAouE,UAAA,CAAAvqF,GAAAwa,IAAA,CAAAwQ,mBAAA,IAEDy5D,EAAUtoE,EAAUmuE,UAAU,CAC9BD,EAAIluE,EAAaouE,UAAK,CACpB9F,CAAAA,EAAQxlF,KAAK,GAAGA,GAAQwlF,EAAQvlF,MAAA,GAAAA,CAAA,IAChCmrF,EAAQprF,KAAA,CAAMwlF,EAAGxlF,KAAQ,CAAMA,EAChCorF,EAAAnrF,MAAA,CAAAulF,EAAAvlF,MAAA,CAAAA,GAOD,IAAoBykB,EAAA6mE,EAAA51D,EAAA3kB,EAApBw6E,EAAAhG,EAAA3nE,UAAoB,OAAA4tE,EAAAL,EAAAvtE,UAAA,OAAAwtC,EAAA,SAAAA,IAAA,CAIoB,IAFxCmgC,EAAKvsE,YAAU,CAAG5jB,EAAGsyB,SAAO,MAE5B89D,EAAKzlC,SAAK,KAAUhmD,EAAKC,GACvB+Q,EAAA,IAAeA,GALG,GAKUA,IAC5B0T,EAAA,CAAUR,KAAIQ,MAAA,SAEdiR,EAAA01B,EADAkgC,CAAAA,EAAIv6E,EAPc,EAOG,EACFhR,EAAS0kB,EAC5B+mE,EAAKp8B,WAAU,GAAAnrC,KAAYtI,GAAA,CAAA2vE,GAC3BE,EAAKztE,SAAS,CAACwnE,EAAS7vD,EAAGjR,GAC3B8mE,EAAKxtE,SAAA,CAAAotE,EAAc,KACnBK,EAAKp8B,WAAU,CAAG,EACpBo8B,EAAAzlC,SAAA,KAAAolC,EAAAprF,KAAA,CAAAorF,EAAAnrF,MAAA,EACwC,IACtC+Q,EAAA,IAAeA,GAfG,GAeUA,IAC5B0T,EAAA,CAAUR,KAAIQ,MAAA,SAEdiR,EAAA01B,EADAkgC,CAAAA,EAAIv6E,EAjBc,EAiBG,EACF/Q,EAASykB,EAC5B+mE,EAAKp8B,WAAU,GAAAnrC,KAAStI,GAAA,CAAQ2vE,GAChCE,EAAKztE,SAAS,CAACwnE,EAAS9gE,EAAGiR,GAC3B61D,EAAKxtE,SAAA,CAAAotE,EAAc,KACnBK,EAAKp8B,WAAU,CAAG,EACpBo8B,EAAAzlC,SAAA,KAAAolC,EAAAprF,KAAA,CAAAorF,EAAAnrF,MAAA,EAEA5E,EAAIuiB,GAAA,CAAAI,SAAe,CAAAwnE,EAAY,KAC/B,IAAAkG,EAAmBrwF,EAAAuiB,GAAA,CAAAgQ,YAAA,KAAA43D,EAAAxlF,KAAA,CAAAwlF,EAAAvlF,MAAA,EAGrB,OAFEurF,EAAKn8B,WAAU,CAAG,EAClBm8B,EAAAxlC,SAAO,KAAAw/B,EAAAxlF,KAAA,CAAAwlF,EAAAvlF,MAAA,EACTyrF,CAEA,EAM2CtO,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACFgP,MAAAnuE,EAAA8/D,kBAAA,CAAAX,EAAA,SACF,CAEA,EAMgDuC,gBAClC,SAAK1hE,CAAA,CAAA2/D,CAAgB,EACjC,IAAGwO,EAAA,IAAW,CAAAC,gBAAiB,GACjCpuE,EAAA2oE,UAAA,CAAAhJ,EAAAwO,KAAA,CAAAA,EAEA,EAI6BC,iBACvB,UAAe,CAAQ,IAC3BvgC,EAD4BwgC,EAAA,EAAAF,EAAA,CAAG,EAAI,EACnC,CAoBF,OAnBI,IAAI,CAAAvF,UAAK,CACP,KAAA8E,WAAA,IAEDW,CAAAA,EAAA,OAAAX,WAAA,EAIC,KAAAA,WAAA,IAEDW,CAAAA,EAAA,KAAAX,WAAA,EAGH7/B,EAAIwgC,EAAe,IAAE,CAAAxgC,IAAA,KACnB,KAAK+6B,UAAM,CACbuF,CACK,IAAAtgC,EAEJsgC,CAAA,IAAAtgC,EAEHsgC,CACF,CAEA,GAKCzlF,GAAiC+kF,IAAA,CAAAvgE,UAAc,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GAsIQoH,GAhIRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAcmGxV,GAEjG4lF,KAAA,CAAApwE,GAAAxV,GAAAk2E,UAAA,EAOA7/E,KAAA,QAcA+/E,eAAA,kXAKOyP,MAAC,CAAG,EAAG,EAAE,EAEhB,CAOArN,cAAA,QAI8B5gD,WACvB,SAAQziC,CAAA,MAAC,CAAA0wF,KAAA,EAAG,EAAG,EAAE,EACtB,CACF7lF,GAAAk2E,UAAA,CAAAvmE,SAAA,CAAAioB,UAAA,CAAA7b,IAAA,MAAA5mB,EAEA,EAM6BwjF,UACvB,SAAYxjF,CAAA,CAAQ,CAKxB,IAAiB2V,EAAApI,EAAA+kB,EAAAA,SAAA,CAAA/kB,IAAA,CAAAmjF,EAAA,KAAAA,KAAA,CAAA/pE,EAAApZ,EAAAnN,MAAA,CAAAuwF,EAAA,EAAAD,CAAA,IAAAE,EAAA,EAAAF,CAAA,IAAAG,EAAA,EAAAH,CAAA,IAWoB,IACnC/6E,IAXA,CAAAm7E,KAAA,GAEA,KAAAA,KAAA,KAAA3tE,WAA2B,KAE3B,KAAA4tE,KAAA,KAAA5tE,WAA2B,KAE5B,KAAA6tE,KAAA,KAAA7tE,WAAA,MAKCxN,EAAI,EAACgR,EAAQ,GAAG,CAAAhR,EAAKgR,EAAIhR,IACzB,IAAI,CAACm7E,KAAK,CAACn7E,EAAE,CAAGkT,IAAAA,KAAKxJ,GAAG,CAAC1J,EAAI,IAAKg7E,GAClC,IAAI,CAACI,KAAK,CAACp7E,EAAE,CAAGkT,IAAAA,KAAKxJ,GAAG,CAAC1J,EAAI,IAAKi7E,GACpC,KAAAI,KAAA,CAAAr7E,EAAA,CAAAkT,IAAAA,KAAAxJ,GAAA,CAAA1J,EAAA,IAAAk7E,GACgD,IAC9Cl7E,EAAI,EAAGgR,EAAGpZ,EAAKnN,MAAM,CAAKuV,EAAGgR,EAAAhR,GAAA,EAC7BpI,CAAI,CAACoI,EAAA,CAAI,IAAK,CAAAm7E,KAAK,CAAAvjF,CAAM,CAAAoI,EAAA,CAAI,CAC7BpI,CAAI,CAACoI,EAAI,EAAE,CAAG,IAAI,CAACo7E,KAAK,CAACxjF,CAAI,CAACoI,EAAI,EAAE,CAAC,CACvCpI,CAAA,CAAAoI,EAAA,QAAAq7E,KAAA,CAAAzjF,CAAA,CAAAoI,EAAA,KASyCosE,oBAClC,SAAA5/D,CAAA,CAAAm/D,CAAA,QACL,CACF2P,OAAA9uE,EAAA8/D,kBAAA,CAAAX,EAAA,SACF,CAEA,EAMgDuC,gBACjC,SAAC1hE,CAAA,CAAA2/D,CAAyB,CAAK,CAC9C3/D,EAAA+uE,UAAA,CAAApP,EAAAmP,MAAA,MAAAP,KAAA,CACF,CAEA,GASChrF,GAAiCK,KAAA,CAAA8E,OAAc,CAAA4lF,KAAA,CAAAphE,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAShDxkB,GAAAnF,CAAAA,GAAA+R,CANAA,GAsEQoH,GAhERnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAGyGxV,GAEjGsmF,QAAA,CAAA9wE,GAAAxV,GAAAk2E,UAAA,EAEN7/E,KAAA,WAKAkwF,WAAA,GAI8B3uD,WACvB,SAAUziC,CAAA,EACf,KAAAoiC,SAAA,cAAApiC,GAEF,KAAAoxF,UAAA,MAAAA,UAAA,CAAAv3E,KAAA,GAEA,EAM2BulE,QACzB,SAAcp/E,CAAI,CAAK,CACvBA,EAAK4+E,MAAA,EAAW,KAAOwS,UAAU,CAAAhxF,MAAM,CAAE,MACvC,CAAAgxF,UAAO,CAAAxlE,OAAQ,UAAArc,CAAA,EACjBA,EAAA6vE,OAAA,CAAAp/E,EACF,EAEA,EAKqButD,SACnB,UAAc,CAA+C,OAC3D7nD,GAAAwa,IAAY,CAAA3f,MAAK,CAAAue,MAAW,KAAI,CAAAsjB,SAAS,aAAQ,CAAAgvD,WAAS,KAAAA,UAAe,CAAAzkF,GAAA,UAAA4C,CAAA,EAAI,OAAAA,EAAAg+C,QAAA,EAC/E,EACF,EAEA,EAA2BitB,eACb,UAAW,CAAuB,MAAE,KAAQ,CAAA4W,UAAO,CAAAzpE,IAAA,UAAcpY,CAAA,EAAI,OAAAA,EAAAirE,cAAA,EACnF,EACF,CAEA,GAGsE90E,GAChEK,KAAA,CAAA8E,OAAU,CAAAsmF,QAAO,CAAA9hE,UAAgB,CACjC,SAAA9uB,CAAa,CAAA+mB,CAAY,EAAiB,IACR8pE,EAAavmF,CAAtCtK,EAAI6wF,UAAa,EAAO,EAAC,EAAazkF,GAAA,UAAA4C,CAAA,EAE/C,WAAW7J,GAAIK,KAAO,CAAA8E,OAAM,CAAA0E,EAAQrO,IAAA,CAAQ,CAACqO,EAAA,GAAE84C,EAAA,IAAY3iD,GAAAK,KAAA,CAAA8E,OAAA,CAAAsmF,QAAA,EAAWC,WAAAA,CAC1E,GAEF,OADE9pE,GAAOA,EAAA+gC,GACTA,CACC,EASDx9C,GAAAnF,CAAAA,GAAA+R,CANAA,GAyGQoH,GAnGRnZ,MAAA,EAAA+R,CAAAA,GAAA/R,MAAA,MAAAK,KAAA,CAAA8E,OAAA,CAAAwV,GAAA3a,GAAAwa,IAAA,CAAAG,WAAA,CAcgHxV,GAE9GwmF,WAAA,CAAAhxE,GAAAxV,GAAA85E,WAAA,EAOAzjF,KAAA,cAQAowF,SAAA,EAOAjO,cAAA,WAA4B6G,gBAChB,UAAa,CAEvB,IAAIqH,EAAC,IAAS,CAAAD,QAAA,CAAAzoE,KAAAC,EAAA,CAAAC,EAAArjB,GAAAwa,IAAA,CAAA6I,GAAA,CAAAwoE,GAAA9wE,EAAA/a,GAAAwa,IAAA,CAAAO,GAAA,CAAA8wE,GAAAC,EAAA,IAAAC,EAAA5oE,KAAA1J,IAAA,MAAAsB,EAAAixE,EAAA,EAAA3oE,CAAA,KACZ,CAAAgJ,MAAA,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,EAAG,EAAG,EAAG,EACb,EACD,CACA,IAAI,CAACA,MAAM,CAAC,EAAE,CAAGhJ,EAAA2oE,EAAS,EAC1B,IAAI,CAAC3/D,MAAM,CAAC,EAAE,CAAGy/D,EAASE,EAAcD,EACxC,IAAI,CAAC1/D,MAAM,CAAC,EAAE,CAAGy/D,EAASE,EAAcD,EACxC,IAAI,CAAC1/D,MAAM,CAAC,EAAE,CAAGy/D,EAAME,EAASD,EAChC,IAAI,CAAC1/D,MAAM,CAAC,EAAE,CAAGhJ,EAAAyoE,EAASE,EAC1B,IAAI,CAAC3/D,MAAM,CAAC,GAAGy/D,EAAGE,EAASD,EAC3B,IAAI,CAAC1/D,MAAM,CAAC,GAAG,CAAGy/D,EAASE,EAAcD,EACzC,IAAI,CAAC1/D,MAAM,CAAC,GAAG,CAAGy/D,EAAME,EAASD,EACnC,KAAA1/D,MAAA,KAAAhJ,EAAAyoE,EAAAE,CAEA,EAMkClX,eAC3B,SAAex6E,CAAA,EAEtB,OADE,KAAAkqF,eAAe,GACjBr/E,GAAAk2E,UAAA,CAAAvmE,SAAA,CAAAggE,cAAA,CAAA5zD,IAAA,MAAA5mB,EAEA,EAa2Bo/E,QACpB,SAAAp/E,CAAe,EACpB,KAAAkqF,eAAmB,GACrBr/E,GAAAk2E,UAAA,CAAAvmE,SAAA,CAAA4kE,OAAA,CAAAx4D,IAAA,MAAA5mB,EAEF,CAEA,GASC0F,GAAiCK,KAAA,CAAA8E,OAAc,CAAAwmF,WAAA,CAAAhiE,UAAA,CAAA3pB,GAAAK,KAAA,CAAA8E,OAAA,CAAAk2E,UAAA,CAAA1xD,UAAA,CAChC,SAEhB5X,CAAA,EAEA,aAGA,IAAI/R,EAAO+R,EAAM/R,MAAA,EAAA+R,CAAAA,EAAA/R,MAAA,KAAA4F,EAAA5F,EAAAwa,IAAA,CAAA3f,MAAA,CAAA+K,KAAA,IACf5F,EAAO4nB,IAAI,CAAC,CACZ5nB,EAAAijC,IAAA,mCACD,MAED,KAKAgpD,EAAA,6LAAA1jE,KAAA,KAQyFvoB,CAAAA,EAEvF4nB,IAAA,CAAA5nB,EAAAwa,IAAA,CAAAG,WAAA,CAAA3a,EAAA6U,MAAA,EAK0Bq3E,yBACxB,CACA,WACA,aACA,aACA,YACA,aACA,OACA,cACA,YACA,SACA,OACA,kBACA,WACD,YAED,CAKAC,WAAA,QAOAC,iBAAA,WAOAC,eAAA,UAOAC,SAAA,OAOA9wF,KAAA,OAOA2B,SAAA,GAOAyyB,WAAA,SAOAnC,WAAA,kBAOAuC,UAAA,GAOAD,SAAA,GAOAE,YAAA,GAQAs8D,UAAA,OAOA18D,UAAA,SAOA28D,WAAA,KAKaC,YACA,CACX7sF,KAAA,GACF8sF,SAAA,IAEA,EAKWC,UACE,CACX/sF,KAAA,GACF8sF,SAAA,GAEA,EAOAE,oBAAA,GAQAvrB,gBAAArhE,EAAA6U,MAAA,CAAAC,SAAA,CAAAusD,eAAA,CAAA/hE,MAAA,CAAA2sF,GAMA3qB,gBAAAthE,EAAA6U,MAAA,CAAAC,SAAA,CAAAwsD,eAAA,CAAAhiE,MAAA,CAAA2sF,GAQAt8D,OAAA,KAQAg6B,OAAA,KAwBAl/B,KAAA,KAQAoiE,gBAAA,EAQAC,SAAA,OAUAC,UAAA,WAKAC,kBAAA,KAGSlH,QACP,CACA91D,UAAA,GACAC,YAAW,MACbF,SAAA,IAEA,EAOAk9D,cAAA,KAQAC,YAAA,EAQAjzF,OAAA,KAUAkzF,kBAAA,KAOAr9D,OAAA,EAaAs9D,UAAA,MAKkBC,iBAChB,CACA,SACA,cACA,OACA,aACA,WACA,aACA,YACA,YACA,WACA,cACA,SACD,sBAED,CAKAC,aAAA,GASAC,gBAAA,IAOAC,eAAA,EAMoCzwD,WAC7B,SAAS5M,CAAA,CAAA71B,CAAW,CAAQ,CACjC,IAAI,CAACL,MAAI,CAAGK,GAAAA,EAAAL,MAAA,KACZ,IAAI,CAACk2B,IAAA,CAAAA,EACL,IAAI,CAACs9D,eAAU,IACf,IAAI,CAAA/wD,SAAS,CAAE,aAAApiC,GACb,IAAI,CAACmwB,IAAA,EACN,KAAAijE,WAAA,GAED,IAAI,CAACD,eAAc,IACnB,IAAI,CAACE,cAAS,GACd,IAAI,CAACznF,SAAA,GAAW,IAAE,CAAA6+C,UAAA,EAAwCwf,YAAA,0BAC5D,EAEA,EAKwBmpB,YAClB,UAAgB,CACpB,IAAIjjE,EAAM,KAAAA,IAAA,CACRA,GACDA,CAAAA,EAAAmjE,YAAA,CAAA5tF,EAAAwa,IAAA,CAAA8X,mBAAA,CAAA7H,EAAAA,IAAA,EAGH,EASgCojE,oBAC9B,WAMF,OAJI7tF,EAAOmtF,iBAAiB,EAEzBntF,CAAAA,EAAAmtF,iBAAA,MAAAxpF,MAAA,OAAAA,MAAA,CAAAsuD,YAAA,EAAAjyD,EAAAwa,IAAA,CAAAwQ,mBAAA,GAAAlO,UAAA,QAEH9c,EAAAmtF,iBAAA,EAMuBW,WACjB,UAAe,CACnB,IAAIC,EAAU,IAAG,CAAAC,mBAAc,MAAA79D,IAAA,EAKjC,OAJE,IAAI,CAACC,SAAA,CAAU29D,EAAG/iB,KAAS,CAC3B,IAAI,CAACijB,UAAA,CAAAF,EAAsBG,aAAS,CACpC,IAAI,CAACC,mBAAiB,CAAAJ,EAAYK,eAAA,CAClC,KAAAC,KAAO,CAAAN,EAAAO,YAAA,CACTP,CAEA,EAK2BJ,eAChB,WACP,KAAAF,eAAA,GAGF,IAAI,CAACK,UAAA,GACL,IAAI,CAAAS,WAAW,GACb,IAAI,CAAC9jE,IAAA,EACL,IAAI,CAACxrB,KAAA,CAAM,IAAG,CAAIwrB,IAAC,CAAIxrB,KAAC,CAC1B,IACK,CAAAC,MAAA,MAAAurB,IAAA,CAAAvrB,MAAA,GAEH,IAAI,CAACD,KAAA,CAAM,IAAG,CAAIuvF,aAAC,IAAc,KAAAC,WAAA,OAAAjB,cAAA,CAClC,KAAAtuF,MAAA,MAAAwvF,cAAA,IAEC,UAAAnC,SAAA,CAAA/rE,OAAA,aAED,KAAAmuE,aAAA,GACc,IAAE,CAAAxyB,SAAA,EAAwCoI,YAAA,0BAC3D,GAEA,EAG0BoqB,cACpB,UAAW,CAC6C,IAC1D,IADGC,EAAWC,EAAWC,EAAuBC,EAAUC,EAAAC,EAAAC,EACtDj/E,EAAI,EAACgR,EAAA,IAAS,CAAAgtE,UAAK,CAAAvzF,MAAc,CAAAuV,EAAMgR,EAAMhR,IAA+B,IAC9E,kBAAAs8E,SAAS,EAAAt8E,CAAAA,IAAAgR,EAAA,QAAAkuE,eAAA,CAAAl/E,EAAA,KAGX8+E,EAAY,EACZC,EAAA,KAAAf,UAAmB,CAAIh+E,EAAC,CAEtB4+E,CADFA,EAAI,IAAmB,CAAAO,YAAU,CAAKn/E,EAAA,EACnB,KAAOhR,KAAA,EAAMiwF,CAAAA,EAAA,KAAA9+D,SAAA,CAAAngB,EAAA,CAAAhI,KAAA,MAAAmkF,gBAAA,KAC9B0C,EAAiBI,EAAMx0F,MAAG,CAC1Bk0F,EAAa,KAAG,CAAA3vF,KAAO,CAAA4vF,CAAkB,EAAMC,EAAK,IAClD,IAAAl6D,EAAA,EAAAC,EAAiBm6D,EAAAt0F,MAAY,CAACk6B,GAAKC,EAAAD,IACnCq6D,EAAS,KAAA3B,YAAoB,CAAAr9E,EAAA,CAAI2kB,EAAC,CAChC,KAAAy3D,cAAmB,CAAAluD,IAAA,CAAA6wD,CAAA,CAAAp6D,EAAA,GACnBq6D,EAAUhwF,KAAA,EAAA2vF,EACVK,EAAUI,WAAQ,EAAAT,EAClBK,EAAAlpF,IAAA,EAAAgpF,EACFA,GACKH,GAEJK,EAAAlpF,IAAA,EAAAgpF,CAGP,CAnBE,EA2BiCI,gBAC5B,SAAcG,CAAK,EAC5B,OAAAA,IAAA,KAAArB,UAAA,CAAAvzF,MAAA,EAEA,EAMiC60F,qBACxB,WACT,QAEA,EAIqBtzD,SACnB,UAAO,CAET,6BAAA9Z,UAAA,yBAAAgO,IAAA,2BAAA1C,UAAA,OAEA,EAWsCs0C,0BACpB,UAAU,CAC1B,IAAIH,EAAA,IAAW,CAAAllC,SAAK,8BACpBv/B,EAAc,KAAAA,QAAW,CAG3B,OAFEykE,EAAK3iE,KAAA,EAAM9B,EAAIykE,EAAWxb,KAAK,CAC/Bwb,EAAA1iE,MAAO,EAAA/B,EAAAykE,EAAAvb,KAAA,CACTub,CAEA,EAIuBpW,QACjB,SAAO3uC,CAAK,EAChB,IAAA4N,EAAS,IAAK,CAAAA,IAAA,CACdA,GAAK,CAAAA,EAAAs5C,YAAe,IAAAt5C,EAAA+gC,OAAA,CAAA3uC,GACpB,IAAI,CAAC2yE,cAAA,CAAA3yE,GACL,IAAI,CAAC4yE,0BAAsB,CAAK5yE,GAChC,IAAI,CAAC6yE,qBAAY,CAAA7yE,EAAA,aACjB,IAAI,CAAC8yE,WAAA,CAAA9yE,GACL,IAAI,CAAC6yE,qBAAqB,CAAC7yE,EAAK,YAClC,KAAA6yE,qBAAA,CAAA7yE,EAAA,cAEA,EAI2B8yE,YAChB,SAAA9yE,CAAU,EACjB,eAAI,CAACukD,UAAA,EACL,IAAI,CAACwuB,iBAAgB,CAAA/yE,GACvB,IACK,CAAAgzE,eAAA,CAAAhzE,KAEH,IAAI,CAACgzE,eAAA,CAAAhzE,GACN,KAAA+yE,iBAAA,CAAA/yE,GAGH,EAUuD2yE,eACjD,SAAe3yE,CAAA,CAAAizE,CAAA,CAAAC,CAAA,EACJ,GAAflzE,EAAImzE,YAAW,gBACb,KAAAvlE,IAAQ,CAAc,OACpB,IAAK,CAAAsiE,SAAA,MACH,SACAlwE,EAAAmzE,YAAM,UACR,KAAK,KACH,WACAnzE,EAAAmzE,YAAM,OACR,KAAK,KACH,YACAnzE,EAAAmzE,YAAM,SAEX,CACD,EACFC,IAAA,MAAAC,mBAAA,CAAAJ,EAAAC,EAEA,EAM0BvB,cACpB,UAAgB,CAEwC,IAC1D,IADG2B,EAAW,KAAAf,YAAW,IACrBn/E,EAAA,EAAAgR,EAAA,KAAAgtE,UAAwB,CAAAvzF,MAAA,CAAauV,EAAAgR,EAAAhR,IAAA,CACzC,IAAI4+E,EAAmB,KAAAO,YAAU,CAAAn/E,GAC/B4+E,EAAWsB,GACZA,CAAAA,EAAAtB,CAAA,CAEH,CACF,OAAAsB,CAEA,EASmEC,gBAC5D,SAAav1D,CAAQ,CAAAhe,CAAK,CAAAmyE,CAAM,CAAAjpF,CAAM,CAAAD,CAAK,CAAAwpF,CAAA,EAClD,KAAAe,YAAA,CAAAx1D,EAAAhe,EAAAmyE,EAAAjpF,EAAAD,EAAAwpF,EAEA,EAK0CG,2BAC9B,SAAuB5yE,CAAC,CAAI,CAAkC,GACtE,KAAA+vE,mBAAA,OAAA0D,QAAA,yBAU0D,IAC1D,IADGC,EAAWC,EAA4CxB,EAAAyB,EAAAC,EAAAC,EAAAC,EAAjC7rB,EAAuBloD,EAAAqgC,SAAU,CAAA2zC,EAAA,KAAAC,cAAA,GAAAC,EAAA,KAAAC,aAAA,GAAAC,EAAA,EAAAC,EAAA,EAAAzmE,EAAA,KAAAA,IAAA,CAC1Dxa,EAAA,EAAAgR,EAAe,IAAK,CAAAgtE,UAAA,CAAAvzF,MAAgB,CAAAuV,EAAAgR,EAAAhR,IAAA,CACuC,GAA3EsgF,EAAU,KAAArtB,eAAwB,CAAAjzD,GAChC,MAAA28E,mBAAiB,QAAA0D,QAAA,uBAAArgF,GAAA,CACjB8gF,GAASR,EACV,SACD,EACA,KAAAtC,UAAsB,CAAAh+E,EAAA,CACtBugF,EAAW,KAAAW,kBAAA,CAAAlhF,GACXihF,EAAW,EACXD,EAAA,EACAR,EAAa,IAAG,CAAAW,oBAAoB,CAAAnhF,EAAI,yBAAW,IACjD,IAAA2kB,EAAA,EAAUC,EAAKm6D,EAAAt0F,MAAa,CAAGk6B,EAAEC,EAAAD,IACjC87D,EAAA,KAAepD,YAAK,CAAAr9E,EAAA,CAAA2kB,EAAA,CACpB+7D,EAAU,KAAAS,oBAAA,CAAAnhF,EAAA2kB,EAAA,uBACRnK,GACA5N,EAAIogC,IAAA,GACJpgC,EAAIE,SAAO,CAAA2zE,EAAQW,UAAK,CAAAX,EAAAn/B,SAAA,EACxB10C,EAAI0P,MAAA,CAAAmkE,EAAYptE,KAAA,EAChBzG,EAAAqgC,SAAA,CAAgByzC,EAMhBA,GAAW9zE,EAAA0xC,QAAA,EAAAmiC,EAAAzxF,KAAA,IAAAsxF,EAAA,KAAA/D,UAAA,SAAAQ,iBAAA,EAAA0D,EAAAzxF,KAAA,CAAAsxF,EAAA,KAAA/D,UAAA,EACb3vE,EACK0gC,OAAI,IACPozC,IAAYF,GACZG,EAASC,EAAcL,EAAOS,EACX,QAAjB,KAAA7D,SAAY,EACbwD,CAAAA,EAAA,KAAA3xF,KAAA,CAAA2xF,EAAAM,CAAA,EAEDr0E,EAAAqgC,SAAa,CAAAuzC,EAMbA,GAAW5zE,EAAA0xC,QAAY,CAAAqiC,EAAAG,EAAAG,EAAAX,EAAA,KAAA/D,UAAA,EACvByE,EAAWP,EAAQ3qF,IAAA,CACnBmrF,EAAAR,EAAYzxF,KAAA,CACdwxF,EACKE,GAEJO,GAAAR,EAAArB,WAAA,CAGDsB,GAAY,CAAAlmE,IACZmmE,EAASC,EAAcL,EAAOS,EACX,QAAjB,KAAA7D,SAAY,EACbwD,CAAAA,EAAA,KAAA3xF,KAAA,CAAA2xF,EAAAM,CAAA,EAEDr0E,EAAIqgC,SACF,CAAAyzC,EAKH9zE,EAAA0xC,QAAA,CAAAqiC,EAAAG,EAAAG,EAAAX,EAAA,KAAA/D,UAAA,GAEHuE,GAAAR,CACA,CACA1zE,EAAAqgC,SAAA,CAAA6nB,EAGF,KAAAM,aAAA,CAAAxoD,GA1EE,EAoF2By0E,aACvB,SAAa/rB,CAAK,EACtB,IAAI93C,EAAQ83C,EAAA93C,UAAgB,CAAAC,WAAa,EACvC1tB,CAAAA,EAAOkf,eAAgB,CAAAuO,EAAW,EACnCztB,CAAAA,EAAAkf,eAAA,CAAAuO,EAAA,KAGD,IAAI0/C,EAAOntE,EAAAkf,eAAY,CAAAuO,EAAA,CAAA8jE,EAAAhsB,EAAA11C,SAAA,CAAAnC,WAAA,QAAA63C,EAAA31C,UAAA,KAAAlC,WAAA,GAIzB,OAHIy/C,CAAM,CAAAokB,EAAU,EACjBpkB,CAAAA,CAAA,CAAAokB,EAAA,KAEHpkB,CAAA,CAAAokB,EAAA,EAYsEC,aACpE,SAAAC,CAAA,CAAA3B,CAAmC,CAAA4B,CAAA,CAAAC,CAAA,EAMnC,IAA2D1yF,EAAA2yF,EAAAC,EAAAxC,EAAvDyC,EAAA,IAAgB,CAAAR,YAAU,CAAAxB,GAAaiC,EAAgB,KAAA7B,mBAAA,CAAAJ,GAAAkC,EAAA,KAAA9B,mBAAA,CAAAyB,GAAAM,EAAAP,EAAAD,EAAAS,EAAAH,IAAAC,EAAAG,EAAArC,EAAA3yF,QAAA,MAAAowF,eAAA,CAU0B,GATnFmE,GAAgBI,KAAuBz0F,IAAvBy0F,CAAS,CAACJ,EAAa,EACxCG,CAAAA,EAAAC,CAAA,CAAAJ,EAAA,EAEer0F,KAAAA,IAAdy0F,CAAA,CAAAL,EAAc,EACfpC,CAAAA,EAAApwF,EAAA6yF,CAAA,CAAAL,EAAA,EAECS,GAAcJ,KAAiBz0F,IAAjBy0F,CAAU,CAAAG,EAAO,EAEhC5C,CAAAA,EAAAuC,CADCA,EAAcE,CAAA,CAAAG,EAAc,EAC7BJ,CAAA,EAEC5yF,KAAU5B,IAAV4B,GAAe4yF,KAAmBx0F,IAAnBw0F,GAAmBD,KAAAv0F,IAAAu0F,EAAA,CAClC,IAAA/0E,EAAA,KAAAgxE,mBAAA,GAED,KAAA2B,cAAA,CAAA3yE,EAAAizE,EAAA,GACD,QACEzyF,KAAAA,IAAA4B,IACAowF,EAAUpwF,EAAS4d,EAAAu1E,WAAA,CAAAX,GAAAxyF,KAAA,CACpB6yF,CAAA,CAAAL,EAAA,CAAAxyF,GAEiB5B,KAAAA,IAAhBw0F,GAA+BK,GAAeR,IAC9CG,EAAUh1E,EAAAu1E,WAAgB,CAAAV,GAAAzyF,KAAA,CAC3B6yF,CAAA,CAAAJ,EAAA,CAAAG,GAECK,GAAAN,KAAAv0F,IAAAu0F,IAEAA,EAAU/0E,EAAOu1E,WAAG,CAAAH,GAAAhzF,KAAA,CACpB6yF,CAAA,CAAAG,EAAc,CAAAL,EACfvC,EAAAuC,EAAAC,GACQ,CAA+B5yF,MAAAA,EAAakzF,EAA6B9C,YAAAA,EAAA8C,CACpF,CAEA,EAMuCE,gBACzB,SAAArD,CAAA,CAAAyC,CAAqB,EACnC,YAAAL,oBAAA,CAAApC,EAAAyC,EAAA,WAEA,EAKiCa,YAC3B,SAAWhD,CAAK,EACpB,IAAIiD,EAAK,KAAWC,YAAQ,CAAAlD,GAO9B,OANsB,IAAlB,KAAApC,WAAc,EACfqF,CAAAA,EAAAtzF,KAAA,OAAAwzF,sBAAA,IAECF,EAAStzF,KAAK,CAAG,GAClBszF,CAAAA,EAAAtzF,KAAA,IAEHszF,CAEA,EAMkCC,aAC5B,SAAclD,CAAU,EAK5B,IAAKr/E,EAAayiF,EAAaC,EAAAC,EAAAC,EAAAC,EAA3B7zF,EAAC,EAAuB+vF,EAAG,KAAAf,UAAA,CAAAqB,EAAA,CAAAyD,EAAA,MAAA/D,EAAAt0F,MAAA,EAAAs4F,EAAA,EAAAvoE,EAAA,KAAAA,IAAA,CAAA4yC,EAAA,eAAAyvB,QAAA,CACG,IAChC78E,EAAA,EADF,IAAK,CAAAq9E,YAAW,CAAAgC,EAAa,CAAAyD,EAC3B9iF,EAAW++E,EAAKt0F,MAAE,CAAAuV,IAClByiF,EAAA1D,CAAe,CAAA/+E,EAAA,CACf2iF,EAAa,IAAG,CAAAK,eAAA,CAAAP,EAAApD,EAAAr/E,EAAA0iF,GAChBI,CAAS,CAAA9iF,EAAA,CAAA2iF,EACT3zF,GAAA2zF,EAAevD,WAAA,CACjBsD,EAAAD,EASU,GANMK,CACR,CAAA9iF,EAAA,EACNlK,KAAA6sF,EAAOA,EAAA7sF,IAAA,CAAA6sF,EAAA3zF,KAAA,GACPA,MAAA,EACAowF,YAAa,EACfnwF,OAAA,KAAA/B,QAAA,EAEEstB,EAAA,CAIsB,OAHtBqoE,EAAgBroE,EAAOmjE,YAAK,CAAAnjE,EAAAmjE,YAAwB,CAAElzF,MAAG,CAAK,GAAAA,MAAA,CAC9Dm4F,EAAe7yF,EAAIwa,IAAK,CAAAof,cAAY,CAAAnP,EAAAA,IAAA,GAAAA,EAAAmjE,YAAA,EACpCiF,EAAczuE,CAAC,EAAIqG,EAAK8P,UAAU,CAACnW,CAAC,CACpCyuE,EAAaxuE,CAAA,EAAAoG,EAAS8P,UAAA,CAAAlW,CAAA,CACpB,IAAK,CAAAkoE,SAAA,MACH,OACAyG,EAAM31B,EAAAy1B,EAAA7zF,EAAA,EACR,KAAK,KACH,SACA+zF,EAAM,CAAAF,EAAA7zF,CAAA,IACR,KAAK,KACH,QACA+zF,EAAM31B,EAAA,EAAAy1B,EAAA7zF,CAAA,CAMa,IAFvB+zF,GAAmB,KAAKnG,eAAc,CACpCxvB,CAAAA,EAAU,GAAK,CAAI,EAEnBptD,EAAAotD,EAAA2xB,EAAet0F,MAAU,CAAG,IAAA2iE,EAAAptD,GAAA,EAAAA,EAAA++E,EAAAt0F,MAAA,CAAA2iE,EAAAptD,IAAAA,GAAA,CAC5B2iF,EAAIG,CAAiB,CAAA9iF,EAAA,CACnB+iF,EAAAF,EACFE,GACSF,EACPE,EAAkB,GACnBA,CAAAA,GAAAF,CAAA,EAID,KAAAI,kBAAkB,CAAAF,EAAaJ,EAAWC,GAC5CG,GAAAJ,EAAAvD,WAAA,CAEF,MAAS,CAAcpwF,MAAAA,EAAyBk0F,YAlDjB,CAmDjC,CAEA,EAQ0ED,mBACpE,SAAiBF,CAAiB,CAAAJ,CAAa,CAAAC,CAC/C,EAEJ,IAAAO,EAAAJ,EAAAJ,EAAAvD,WAAA,GAAA5kE,EAAA,IAA8E,CAAAA,IAAA,CAE9EiI,EAAA1yB,EAAawa,IAAA,CAAUof,cAAY,CAAAnP,EAAAA,IAAA,CAAc2oE,EAAC3oE,EAAAmjE,YAAA,CAClDgF,CAAAA,EAAavB,UAAS,CAAG3+D,EAAMtO,CAAA,CAAGyuE,EAAezuE,CAAA,CACjDwuE,EAAarhC,SAAQ,CAAA7+B,EAAKrO,CAAK,CAAIwuE,EAAaxuE,CAAA,CAClDuuE,EAAAtvE,KAAA,CAAAoP,EAAApP,KAAA,iBAAAwpE,QAAA,CAAA3pE,KAAAC,EAAA,GAEA,EASkF6vE,gBACpE,SAAKP,CAAA,CAAApD,CAAA,CAAAj/D,CAA4B,CAAAsiE,CAAW,CACpDU,CAAA,EAKJ,IAA4BnG,EAAxBhwF,EAAK,KAAAo2F,2BAAmB,CAAAhE,EAAAj/D,GAAAb,EAAAmjE,EAAA,KAAAW,2BAAA,CAAAhE,EAAAj/D,EAAA,MAAAqC,EAAA,KAAA8+D,YAAA,CAAAkB,EAAAx1F,EAAAy1F,EAAAnjE,GAAA6/D,EAAA38D,EAAA28D,WAAA,CAAApwF,EAAAyzB,EAAAzzB,KAAA,CACP,IAAnB,KAAAiuF,WAAc,GAEdjuF,GADAiuF,EAAS,KAAAuF,sBAAA,GAEVpD,GAAAnC,GAES,IACR7rD,EAAA,CACApiC,MAAMA,EACN8G,KAAA,EACA7G,OAAAhC,EAAaC,QAAA,CACbkyF,YAAQA,EACVv/D,OAAA5yB,EAAA4yB,MAAA,EACgC,GAC9BO,EAAI,IAAcgjE,EAAK,CACvB,IAAIE,EAAO,KAAYjG,YAAO,CAAAgC,EAAY,CAAKj/D,EAAQ,GACxDgR,EAAAt7B,IAAA,CAAAwtF,EAAAxtF,IAAA,CAAAwtF,EAAAt0F,KAAA,CAAAyzB,EAAA28D,WAAA,CAAA38D,EAAAzzB,KAAA,CACD,OACFoiC,CAEA,EAKqC6hC,gBAC1B,SAAaosB,CAAC,CAAU,CAAE,GACjC,KAAAkE,aAAY,CAAAlE,EAAc,CAC3B,YAAAkE,aAAA,CAAAlE,EAAA,CAMgD,IAC/C,IAHEN,EAAA,IAAa,CAAAf,UAAA,CAAAqB,EAAA,CAEjBmE,EAAa,IAAG,CAAApB,eAAiB,CAAA/C,EAAW,GAC1Cr/E,EAAA,EAAAgR,EAAiB+tE,EAAIt0F,MAAK,CAAAuV,EAAAgR,EAAAhR,IAC5BwjF,EAAAtwE,KAAAxkB,GAAA,MAAA0zF,eAAA,CAAA/C,EAAAr/E,GAAAwjF,GAGF,YAAAD,aAAA,CAAAlE,EAAA,CAAAmE,EAAA,KAAAjH,UAAA,MAAAS,aAAA,EAK2ByB,eACrB,UAAY,CAC4C,IAC1D,IADGlC,EAAWttF,EAAU,EACxB+Q,EAAA,EAAAgR,EAAiB,IAAC,CAAAgtE,UAAA,CAAevzF,MAAC,CAAAuV,EAAAgR,EAAAhR,IAClCu8E,EAAW,IAAM,CAAAtpB,eAAU,CAAAjzD,GAC7B/Q,GAAA+Q,IAAAgR,EAAA,EAAAurE,EAAA,KAAAA,UAAA,CAAAA,CAAA,CAEF,OAAAttF,CAEA,EAI2B4xF,eACb,UAAS,CACvB,mBAAA1D,SAAA,OAAAnuF,KAAA,QAAAA,KAAA,IAM0B+xF,cAChB,UAAc,CACxB,YAAA9xF,MAAA,EAEA,EAKyCw0F,kBAC/B,SAAA72E,CAAA,CAAAge,CAAA,EACRhe,EAAIogC,IAAA,GACwD,IAC1D,IADG02C,EAAW,EAAM5tF,EAAK,KAAA+qF,cAAmB,GAAIhrF,EAAK,IAAK,CAAAkrF,aAAA,GACtD/gF,EAAA,EAAAgR,EAAA,IAAe,CAAAgtE,UAAK,CAAAvzF,MAAe,CAACuV,EACpCgR,EAAAhR,IAAA,CAEJ,IAAIsgF,EAAC,IACH,CAAArtB,eAEK,CAAAjzD,GAAAwjF,EACLlD,EAAO,IACP,CAAA/D,UAAM,CAAAqE,EAAc,IACpB,CAAAM,kBAAA,CAAAlhF,GAEF,KAAAmgF,eAAe,CAAAv1D,EAAAhe,EAAA,KAAAoxE,UAAA,CAAAh+E,EAAA,CAAAlK,EAAA8qF,EAAA/qF,EAAA6tF,EAAAF,EAAAxjF,GACjB0jF,GAAApD,CACA,CACF1zE,EAAA0gC,OAAA,EAEA,EAI+BsyC,gBACnB,SAAShzE,CAAK,EACtB,MAAA6D,IAAA,OAAA4vE,QAAA,WAIJ,KAAAoD,iBAAA,CAAA72E,EAAA,WAEA,EAIiC+yE,kBACpB,SAAU/yE,CAAK,EACxB,OAAA8S,MAAA,WAAAva,WAAA,QAAAw+E,aAAA,KAIA,IAAI,CAACjqC,MAAA,OAAc,CAAAA,MAAA,CAAAyC,YAAA,EACpB,KAAAiZ,aAAA,CAAAxoD,GAGDA,EAAIogC,IAAC,GACL,IAAI,CAAAuW,YAAS,CAAA32C,EAAA,KAAAgtC,eAAA,EACbhtC,EAAIwgC,SAAC,GACL,IAAI,CAAAq2C,iBAAS,CAAA72E,EAAA,cACbA,EAAIgqC,SAAO,GACbhqC,EAAA0gC,OAAA,GAEA,EASgE8yC,aAC9D,SAAAx1D,CAAyB,CAAAhe,CAAA,CAAAmyE,CAAA,CAAAjpF,CAAA,CAAAD,CAAA,CAAAwpF,CAAA,EAazB,IAAQuE,EAAAC,EAAApD,EAAAqD,EAAAC,EAAJxH,EAAI,KAAAtpB,eAAA,CAAAosB,GAAA2E,EAAA,UAAA1H,SAAA,CAAA/rE,OAAA,YAAA0zE,EAAA,GAAAhD,EAAA,EAAAzmE,EAAA,KAAAA,IAAA,CAAA0pE,EAAA,CAAAF,GAAA,SAAA/G,WAAA,OAAA0G,aAAA,CAAAtE,IAAA,CAAA7kE,EAAA2pE,EAAA,aAAAhH,SAAA,CAAA7pE,EAAA,aAAA6pE,SAAA,MAAAiH,EAAAx3E,EAAAlZ,MAAA,CAAA2wE,YAAA,QAOM,GANdz3D,EAAIogC,IAAA,GACFo3C,IAAW,IAAa,CAAAjH,SAAO,GAC/BvwE,EAAIlZ,MAAA,CAAAy7B,YAAY,CAAQ,MAAAg1D,EAAa,aACrCv3E,EAAIuwE,SAAS,CAAGgH,EAAQ,WAAS,CAClCv3E,EAAA0vE,SAAA,CAAA6H,EAAA,gBAEDtuF,GAAI0mF,EAAU,KAAAQ,iBAAA,MAAAR,UAAA,CACZ2H,EAAA,CAGA,IAAI,CAAAG,WAAO,CAAAz5D,EAAAhe,EAAAyyE,EAAA,EAAAN,EAAA5gE,IAAA,KAAAroB,EAAAD,EAAA0mF,GACX3vE,EAAA0gC,OAAA,GACD,MACD,KACE,IAAAttC,EAAA,EAAAgR,EAAe+tE,EAAMt0F,MAAO,GAAKuV,GAAAgR,EAAWhR,IAC5C8jF,EAAA9jF,IAAqBgR,GAAG,KAAAisE,WAAA,EAAAziE,EACxBypE,GAAelF,CAAA,CAAA/+E,EAAA,CACfygF,EAAI,KAAApD,YAAgB,CAAAgC,EAAA,CAAAr/E,EAAA,CAClBihF,IAAAA,GACAnrF,GAAAwd,EAAYmtE,CAAAA,EAAQrB,WAAK,CAAAqB,EAAAzxF,KAAA,EAC3BiyF,GACKR,EAAAzxF,KAAA,EAEJiyF,GAAAR,EAAArB,WAAA,CAEC4E,GAAS,CAAAF,GACP,KAAA1H,cAAmB,CAAAluD,IAAA,CAAA6wD,CAAA,CAAA/+E,EAAA,GACpB8jF,CAAAA,EAAA,IAGDA,IAEAF,EAAYA,GAAK,KAAAP,2BAA2C,CAAAhE,EAAAr/E,GAC5D6jF,EAAA,IAAe,CAAAR,2BAA4B,CAAAhE,EAAar/E,EAAA,GACzD8jF,EAAA/zF,EAAAwa,IAAA,CAAA+U,eAAA,CAAAskE,EAAAC,EAAA,KAECC,IACEtpE,GACA5N,EAAIogC,IAAA,GACJpgC,EAAIE,SAAO,CAAA2zE,EAAQW,UAAK,CAAAX,EAAAn/B,SAAA,EACxB10C,EAAI0P,MAAC,CAAAmkE,EAAYptE,KAAA,EACjB,IAAI,CAAAgxE,WAAO,CAAAz5D,EAAAhe,EAAAyyE,EAAAr/E,EAAAikF,EAAA,CAAAhD,EAAA,IAAA1E,GACb3vE,EACK0gC,OAAA,KAEHy2C,EAAKjuF,EACN,KAAAuuF,WAAA,CAAAz5D,EAAAhe,EAAAyyE,EAAAr/E,EAAAikF,EAAAF,EAAAluF,EAAA0mF,IAED0H,EAAc,GACdL,EAAQC,EACR/tF,GAAAwd,EAAW2tE,EACZA,EAAA,GAGLr0E,EAAA0gC,OAAA,EAEA,EAWqDg3C,mCACzB,SAAA/xE,CAAmB,CAAI,CAE7C,IAAgDgkD,EAAhDC,EAAazmE,EAAQwa,IAAI,CAACwQ,mBAAa,GAC3C/rB,EAAQ,KAAKA,KAAG,MAAAmW,WAAA,CAAAlW,EAAA,KAAAA,MAAA,MAAAkW,WAAA,CAUlB,OATEqxD,EAAQxnE,KAAA,CAAMA,EACdwnE,EAAOvnE,MAAA,CAAQA,EACGsnE,CAAlBA,EAAKC,EAAS3pD,UAAA,QAASugC,SAAO,GAAOmpB,EAAK7f,MAAM,CAAC,KAAW6f,EAAK5f,MAAM,CAAC3nD,EAAO,GAC/EunE,EAAK5f,MAAM,CAAC3nD,EAAGC,GAASsnE,EAAK5f,MAAA,GAAS1nD,GACtCsnE,EAAK3f,SAAS,GACd2f,EAAKzpD,SAAS,CAAA9d,EAAG,EAAOC,EAAO,GAC/BsnE,EAAKtpB,SAAA,CAAA16B,EAAAskC,MAAA,CAAA0f,GACL,KAAKb,8BAAI,CAAAa,EAAAhkD,GACTgkD,EAAA9lD,IAAO,GACT8lD,EAAAzX,aAAA,CAAA0X,EAAA,YAEA,EAA8C+tB,aACxC,SAAS33E,CAAA,CAAA4F,CAAA,CAAAD,CAAA,EACb,IAAI41B,EAAOC,SAAQ,EACbyO,MAAO,CAAuF,eAChGtkC,EAAAijD,aAAA,EAAAjjD,EAA2CukC,iBAAA,EAAAvkC,EAAAwkC,gBAAA,EAK3C5O,EAAU,CAAC,IAAI,CAACn5C,KAAA,CAAM,EACtBo5C,EAAI,KAAU,CAAAn5C,MAAA,CAAS,EACvB2d,EAAIE,SAAS,CAAAq7B,EAAQC,GACrBx7B,CAAA,CAAA4F,EAAO,MAAA8xE,kCAAA,CAAA/xE,GAAE,CAAkB41B,QAASA,EAAQC,QAAAA,CAC9C,IAIEx7B,CAAA,CAAA4F,EAAY,CAAAD,EAAAskC,MAAA,CAAAjqC,EAAA,MACb,KAAA8oD,8BAAA,CAAA9oD,EAAA2F,GACH,EAIC3F,CAAA,CAAA4F,EAAA,CAAAD,EACQ,CAAY41B,QAAS,EAAEC,QAAA,CAClC,EADE,EAGoCitB,iBACvB,SAAQzoD,CAAA,CAAA0oD,CAAW,EAMlC,OALE1oD,EAAIugC,SAAO,CAAGmoB,EAAKnwD,WAAa,CAChCyH,EAAIktC,OAAA,KAAc,CAAAH,aAAQ,CAC1B/sC,EAAI2oD,cAAW,CAAK,KAAA7E,gBAAc,CAClC9jD,EAAIotC,QAAA,CAAU,IAAG,CAAA3jC,cAAK,CACtBzJ,EAAAmtC,UAAY,MAAAzjC,gBAAkB,CAChC,KAAAiuE,YAAA,CAAA33E,EAAA,cAAA0oD,EAAA51C,MAAA,CAEA,EAAoCi2C,eACtB,SAAA/oD,CAAY,CAAC0oD,CAAK,EAChC,YAAAivB,YAAA,CAAA33E,EAAA,YAAA0oD,EAAA7kD,IAAA,CAEA,EAW2E4zE,YACrE,SAAYz5D,CAAA,CAAAhe,CAAA,CAAAyyE,CAAqB,CAAAj/D,CAAW,CAAAohE,CAAA,CAC5C1rF,CAAA,CAAAD,CAAA,CAAW,CAKf,IAAkC2uF,EAAAC,EAA9BnvB,EAAC,KAAAovB,oBAA6B,CAAArF,EAAAj/D,GAAAukE,EAAA,KAAAtB,2BAAA,CAAAhE,EAAAj/D,GAAAwkE,EAAAh6D,aAAAA,GAAA+5D,EAAAl0E,IAAA,CAAA4tD,EAAAzzC,eAAAA,GAAA+5D,EAAAjlE,MAAA,EAAAilE,EAAAx/E,WAAA,CAChC,IAAAy/E,CAAA,IAIFh4E,EAAAogC,IAAA,GACA43C,GAAAJ,CAAAA,EAAiB,IAAgB,CAAA7uB,cAAK,CAAA/oD,EAAgB+3E,EAAM,EAE5DtmB,GAAgBomB,CAAAA,EAAA,IAAoB,CAAApvB,gBAAA,CAAAzoD,EAAA+3E,EAAA,EAGpC/3E,EAAIozE,IAAA,KAAQ,CAAAC,mBAAK,CAAmB0E,GAClCrvB,GAAKA,EAAAqnB,mBAAc,EACpB,KAAAvnB,aAAA,CAAAxoD,GAEC0oD,GAAOA,EAAKz1C,MAAM,EACnBhqB,CAAAA,GAAAy/D,EAAAz1C,MAAA,EAED+kE,GAAAh4E,EAAgBi4E,QAAI,CAAArD,EAAW1rF,EAAO0uF,EAAOr8C,OAAc,CAAAtyC,EAAS2uF,EAAMp8C,OAAA,EAC1Ei2B,GAAWzxD,EAAAk4E,UAAA,CAAAtD,EAAA1rF,EAAA2uF,EAAAt8C,OAAA,CAAAtyC,EAAA4uF,EAAAr8C,OAAA,EACbx7B,EAAA0gC,OAAA,GAEA,EAOqCy3C,eACvB,SAAAxkE,CAAW,CAAAC,CAAO,EAChC,YAAAwkE,UAAA,CAAAzkE,EAAAC,EAAA,KAAAg8D,WAAA,CAEA,EAOmCyI,aAC1B,SAAK1kE,CAAW,CAAAC,CAAA,CAAO,CAChC,YAAAwkE,UAAA,CAAAzkE,EAAAC,EAAA,KAAAk8D,SAAA,CAEA,EASyCsI,WACnC,SAAWzkE,CAAA,CAAAC,CAAA,CAAA0kE,CAAoB,EAGvB,IAAEC,EAAA,IAAU,CAAAC,mBAAkB,CAAA7kE,EAAI,IAAArzB,EAAA,KAAAi0F,oBAAA,CAAAgE,EAAA9F,SAAA,CAAA8F,EAAA/kE,SAAA,aAAAwX,EAAA,KAAAupD,oBAAA,CAAAgE,EAAA9F,SAAA,CAAA8F,EAAA/kE,SAAA,WAAAnzB,EAAA,CAAEC,SAAQA,EAAKg4F,EAAWv1F,IAAO,CAASkwB,OAAA+X,EAAA1qC,EAAAg4F,EAAAzI,QAAA,EAG1F,OADE,KAAA4I,kBAAW,CAAAp4F,EAAAszB,EAAAC,GACb,MAOwC0gE,mBACtB,SAAK7B,CAAa,EAGlC,IAEwCH,EAFpC/xC,EAAA,IAAc,CAAAgyC,YACZ,CAAAE,GAAciG,EAAA,KAAAt2F,KAAqB,CAAAm+C,EAAAmvC,EACnC,KAAAA,SAAc,CAAAa,EAAoB,KAAAA,SAAA,CACpByD,EAAA,EAAkB1B,EACpC,KAAAA,eAAA,CAAAG,SAAA,YACA/C,GAAOA,CAAAA,mBAAAA,GAAA4C,CAAA,GAAA5C,CAAAA,kBAAAA,GAAA4C,CAAA,GAAA5C,CAAAA,iBAAAA,GAAA4C,CAAA,GAGM,WAAb5C,GACDsE,CAAAA,EAAA0E,EAAA,GAEc,UAAbhJ,GACDsE,CAAAA,EAAA0E,CAAA,EAEc,mBAAbhJ,GACDsE,CAAAA,EAAA0E,EAAA,GAEc,kBAAbhJ,GACDsE,CAAAA,EAAA0E,CAAA,EAEe,QAAdnI,GACDyD,CAAAA,GAAA0E,CAAA,EAEH1E,GAjBG,CACD,EAqBsBtC,YACjB,UAAe,CACpB,IAAI,CAACiH,YAAA,CAAa,EAAG,CACrB,IAAI,CAAChC,aAAY,CAAG,EAAE,CACxB,KAAAlG,YAAA,KAKuCmI,2BACd,WACvB,IAAAC,EAAgB,KAAAC,gBAAmB,CAMrC,OALED,GAAIA,CAAAA,EAAa,KAAA/5B,eAAA,8BACf+5B,IACA,IAAI,CAACv0B,KAAA,IACN,KAAAw0B,gBAAA,KAEHD,CAEA,EAOkCtG,aACvB,SAAAE,CAAa,EAA0B,GAC9C,KAAyBjyF,IAAzB,KAAAm4F,YAAY,CAAAlG,EAAa,CAC1B,YAAAkG,YAAA,CAAAlG,EAAA,CAID,IAAIrwF,EAACszF,IADO,CAAAD,WAAc,CAAAhD,GACRrwF,KAAA,CAEpB,OADE,KAAAu2F,YAAO,CAAAlG,EAAA,CAAArwF,EACTA,CAEA,EAAmCwzF,uBACb,UAAQ,YAC1B,KAAAvF,WAAY,CACb,KAAA/vF,QAAA,MAAA+vF,WAAA,KAEH,CADE,EAU6DkE,qBAC7C,SAAK9B,CAAA,CAAAj/D,CAAqB,CAAA5N,CAAW,EACrD,IAAIqtE,EAAA,IAAa,CAAA6E,oBAAiB,CAAArF,EAAcj/D,UAAa,GACpD,KAAmB,IAATy/D,CAAS,CAAArtE,EAAA,CAC3BqtE,CAAA,CAAArtE,EAAA,CAEH,KAAAA,EAAA,EAM2CitE,sBACtB,SAAM7yE,CAAA,CAAQrhB,CAAC,EAAO,GACvC,KAAAA,EAAA,OAAA80F,QAAA,CAAA90F,IAY0D,IAC1D,IADG+0F,EAAW3wF,EAAMg2F,EAAKpF,EAAmB3oD,EAAIguD,EAAK7G,EAAK8G,EAAAhwF,EAAAmrF,EAAAC,EAAAR,EAAAqF,EAAAtC,EAAAuC,EAAAC,EAAApF,EAAA,KAAAC,cAAA,GAAAoF,EAAA,KAAAlF,aAAA,GAAAvmE,EAAA,KAAAA,IAAA,CAAAyiE,EAAA,KAAAuF,sBAAA,GAAAp6C,EAAA,KAAAytC,OAAA,CAAAtqF,EAAA,CAC1DyU,EAAA,EAAAgR,EAAe,IAAK,CAAAgtE,UAAA,CAAAvzF,MAAgB,CAAAuV,EAAAgR,EAAAhR,IAAA,CACQ,GAA5CsgF,EAAe,IAAI,CAACrtB,eAAc,CAAAjzD,GAChC,MAAAzU,EAAA,EAAa,MAAA80F,QAAA,CAAA90F,EAAAyU,GAAA,CACbimF,GAAS3F,EACV,SACD,EACA,KAAYtC,UAAA,CAAAh+E,EAAA,CACZwjF,EAAAlD,EAAsB,KAAA/D,UAAmB,CACzCgE,EAAW,KAAAW,kBAAA,CAAAlhF,GACXghF,EAAW,EACXC,EAAA,EACA4E,EAAgB,KAAA1E,oBAAwB,CAAGnhF,EAAA,EAAAzU,GAC3Cy6F,EAAM,KAAA7E,oBAA6B,CAAAnhF,EAAK,UACxCnK,EAAAowF,EAAYzC,EAAmB,QAAAzG,iBAAA,EAC/BptF,EAAK,IAAK,CAAAyyF,eAAA,CAAApiF,EAAqB,GAC/B43B,EAAK,IAAI,CAAAupD,oBAAmB,CAAAnhF,EAAM,EAAE,UAAe,IACjD,IAAA2kB,EAAA,EAAUC,EAAKm6D,EAAAt0F,MAAa,CAAGk6B,EAAEC,EAAAD,IAKa,GAJ9C87D,EAAA,KAAApD,YAAyB,CAAAr9E,EAAA,CAAA2kB,EAAA,CACzBmhE,EAAmB,KAAA3E,oBAAwB,CAAGnhF,EAAA2kB,EAAAp5B,GAC9Cw6F,EAAa,KAAA5E,oBAAmB,CAAAnhF,EAAA2kB,EAAA,QAChCghE,EAAM,IAAK,CAAAvD,eAAA,CAAApiF,EAAqB2kB,GAChCihE,EAAI,KAAAzE,oBAAQ,CAAAnhF,EAAqB2kB,EAAA,UAC/BnK,GAAQsrE,GAAAC,EACRn5E,EAAIogC,IAAA,GACJpgC,EAAIqgC,SAAS,CAAC+4C,EACdp5E,EAAIE,SAAO,CAAA2zE,EAAQW,UAAK,CAAAX,EAAAn/B,SAAA,EACxB10C,EAAI0P,MAAA,CAAAmkE,EACDptE,KAAQ,EAKXzG,EAAI0xC,QAAO,EAAAmiC,EAAArB,WAAA,GAAAh3C,EAAAu9C,EAAAC,EAAAnF,EAAArB,WAAA,MAAAlyF,QAAA,KACb0f,EACK0gC,OACF,QAGD,GAAI,CAAAw4C,IAAyBD,GAAiBE,IAAAC,GAAAL,IAAAh2F,GAAAi2F,IAAAhuD,CAAA,GAAAqpD,EAAA,GAC9C,IAAIN,EAAKC,EAAcL,EAAOS,EACX,QAAjB,KAAA7D,SAAY,EACbwD,CAAAA,EAAA,KAAA3xF,KAAA,CAAA2xF,EAAAM,CAAA,EAEC4E,GAAgBG,IAChBp5E,EAAIqgC,SACF,CAAA+4C,EAKHp5E,EAAA0xC,QAAA,CAAAqiC,EAAA9qF,EAAAuyC,EAAAz4C,EAAAioC,EAAAqpD,EAAA,KAAA/zF,QAAA,MAED8zF,EAAWP,EAAQ3qF,IAAA,CACnBmrF,EAAAR,EAAiBzxF,KAAA,CACjB62F,EAAWC,EACXE,EAAOD,EACPp2F,EAAKg2F,EACP/tD,EACKguD,CAAA,MAEJ3E,GAAAR,EAAArB,WAAA,CAGH,IAAIuB,EAAKC,EAAcL,EAAOS,EACX,QAAjB,KAAA7D,SAAY,EACbwD,CAAAA,EAAA,KAAA3xF,KAAA,CAAA2xF,EAAAM,CAAA,EAEDr0E,EAAAqgC,SAAA,CAAA84C,EAMAD,GAAaC,GAAAn5E,EAAA0xC,QAAA,CAAAqiC,EAAA9qF,EAAAuyC,EAAAz4C,EAAAioC,EAAAqpD,EAAAhE,EAAA,KAAA/vF,QAAA,KACf+4F,GAAA3F,CACA,CAGF,KAAAlrB,aAAA,CAAAxoD,GAzFE,EAgGuDqzE,oBAC3C,SAAAiG,CAAqB,CAAApG,CAAc,EAE/C,IAAI7yF,EAAAi5F,GAAa,IAAW,CAAAC,EAC5B,KAAA3oE,UAAe,CAAA4oE,EAAcr2F,EAAO4nB,IAAQ,CAAA0uE,YAC5C,CAAA91E,OAAO,CAAA41E,EAAQ1oE,WAAa,OAE5BD,EAAO2oE,KAAA/4F,IAAA+4F,GAAAA,EAAA51E,OAAA,UAAA41E,EAAA51E,OAAA,UAAA41E,EAAA51E,OAAA,UAAA61E,EAAAn5F,EAAAuwB,UAAA,KAAAvwB,EAAAuwB,UAAA,WACL,CAGCztB,EAAOse,YAAY,CAAGphB,EAAM0yB,UAAS,CAAG1yB,EAAM2yB,SAAU,CACzD7vB,EAAAse,YAAmB,CAACphB,EAAA2yB,SAAe,CAAG3yB,EAAO0yB,UAAM,CACnDmgE,EAAA,KAAAxC,eAAA,MAAArwF,EAAAC,QAAA,MACAswB,EACJ,CAAAW,IAAA,KAEA,EAIsB+xB,OACpB,SAAAtjC,CAAA,EAEE,KAAAghC,OAAA,EAGA,OAAAl6C,MAAA,QAAAA,MAAA,CAAA29C,aAAA,OAAAgD,KAAA,OAAA0f,UAAA,MAGA,IAAI,CAACyxB,0BAAc,IACpB,KAAA9H,cAAA,GAEH,KAAAjxD,SAAA,UAAA7f,GAEA,EAKoCmxE,oBACjB,SAAM79D,CAAK,EAIW,IACrC,IAHa66C,EAAA76C,EAAA5H,KAAA,MAAA4jE,UAAA,EAAA4B,EAAA,MAAA/iB,EAAAtwE,MAAA,EAAA67F,EAAA,CACX,KACJ,CAAAC,EAAa,EAAG,CACdvmF,EAAQ,EAAGA,EAAG+6D,EAAOtwE,MAAK,CAAAuV,IAC1B89E,CAAA,CAAA99E,EAAU,CAAAjQ,EAAQwa,IAAO,CAAAyN,MAAA,CAAQoT,aAAK,CAAA2vC,CAAA,CAAA/6D,EAAA,EACxCumF,EAAAA,EAAAl3F,MAAA,CAAAyuF,CAAA,CAAA99E,EAAA,CAAAsmF,GAEO,OAAPC,EAAOjpE,GAAA,GAAE,CAA2B6gE,gBAAOL,EAAO/iB,MAAAA,EAAuBsjB,aAAAkI,EAAwBtI,cAAAH,CACnG,CAEA,EAKwClmC,SAClC,SAAAF,CAAgB,CAAgB,CACpC,IAAI8uC,EAAWxK,EAAU3sF,MAAY,CAAAqoD,GACjCzlC,EAAM,IAAG,CAAAwa,SAAW,CAAC,WAAA+5D,GAK3B,OAJEv0E,EAAIjoB,MAAI,CAAI+F,EAAEwa,IAAA,CAAA0V,aAAA,MAAAj2B,MAAA,MAAAk2B,IAAA,EACZjO,EAAIuI,IAAI,EACTvI,CAAAA,EAAAuI,IAAA,MAAAA,IAAA,CAAAo9B,QAAA,IAEH3lC,CAEA,EAO0Brc,IACxB,SAAK2E,CAAA,CAAUvP,CAAA,CAAO,CACtB,IAAI,CAAAyhC,SAAA,OAAiBlyB,EAAAvP,GACrB,IAAIy7F,EAAA,GACAC,EAAe,GAAU,GAC3B,iBAAKnsF,EAAiB,IACpB,IAAInJ,KAAAmJ,EACG,SAALnJ,GACD,KAAAqsF,WAAA,GAEDgJ,EAAAA,GAAe,UAAAxK,wBAAyB,CAAA1rE,OAAA,CAAAnf,GAC1Cs1F,EAAAA,GAAAt1F,SAAAA,OAIAq1F,EAAA,SAAe,CAAAxK,wBAAQ,CAAA1rE,OAAA,CAAAhW,GACxBmsF,EAAAnsF,SAAAA,CACD,CAQF,OAPImsF,GACD,KAAAjJ,WAAA,GAECgJ,IACA,IAAI,CAAC/I,cAAS,GACf,KAAAznF,SAAA,IAEH,MAMuBic,WACd,WACT,QACF,CAIA,GAOoDniB,EAC9C4nB,IAAA,CAAA+B,UAAa,CAAM,SAAS9uB,CAAA,CAAO+mB,CAAO,CAAI,CAClD,IAAAg1E,EAAOhxF,EAAe/K,GAAA4vB,EAAA5vB,EAAA4vB,IAAA,CACsD,OAA5E,OAAOmsE,EAAOnsE,IAAO,CACnBzqB,EAAA6U,MAAa,CAAAsyD,WAAS,CAAO,OAAKyvB,EAAe,SAAQC,CAAQ,CAAO,CACxEA,EAAU58F,MAAA,CAAA+F,EAAAwa,IAAA,CAAAkW,eAAA,CAAA71B,EAAAZ,MAAA,CAAAY,EAAAs1B,IAAA,EACR1F,EAA+DzqB,EAC7D6U,MAAA,CAAAsyD,WAAiB,QAAQ18C,EAAA,SAAAqsE,CAAA,EACzBD,EAAShxF,GAAA,QAAAixF,GACRl1E,EAAAi1E,EACL,EACK,QAEJj1E,EAAAi1E,EAEL,SAEA,EAA2B72F,EAAC4nB,IAAA,CAAA0uE,YAAA,EAAc,aAAS,QAAW,UAAW,UAAY,YAErF,CAECt2F,EAAiCwa,IAAA,CAAAmuD,eAAc,EAAA3oE,EAAAwa,IAAA,CAAAmuD,eAAA,CAAA3oE,EAAA4nB,IAAA,CACjD,EAAAzO,GACsFnZ,GACnFwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA4nB,IAAA,CAAA9S,SAAA,EAKmC8+E,cACvB,SAAQtE,CAAA,KAChB,MAAAr1F,MAAW,EAGX,KAAW,IAAJq1F,GAAI,MAAAr1F,MAAA,CAAAq1F,EAAA,CAFZ,QACD,CAG2D,IAAEptE,EAAM,KAAY,IAAPotE,EAAiB,KAAAr1F,MAAA,EAAE+0F,KAAA,KAAA/0F,MAAA,CAAAq1F,EAAA,CAC3F,CAAoB,IAClB,IAAK/2D,KAAIrW,EAAe,IACtB,IAAAsW,KAAAtW,CAAA,CAAAqW,EAAA,CAC4B,IAC1B,IAAAw+D,KAAO70E,CAAK,CAAAqW,EAAA,CAAAC,EAAA,CACd,SAIN,QAEA,EAOwC83D,SACjC,SAAK7tE,CAAW,CAAA6sE,CAAY,EAAiB,GAChD,MAAAr1F,MAAY,GAAAwoB,GAAAA,KAAAA,GAGZ,KAAY,IAAL6sE,GAAK,MAAAr1F,MAAA,CAAAq1F,EAAA,CAFb,QACD,CAG2D,IAAEptE,EAAG,KAAsB,IAAjBotE,EAAiB,KAAAr1F,MAAA,EAAE,OAAAA,MAAA,CAAAq1F,EAAA,CACxF,CACoB,IAClB,IAAA/2D,KAAArW,EACwB,IACtB,IAAIsW,KAAAtW,CAAO,CAAGqW,EAAC,CAAmC,GAChD,KAAW,IAAJrW,CAAA,CAAIqW,EAAA,CAAAC,EAAA,CAAA/V,EAAA,CACZ,QACH,CAGJ,QAEA,EAU+Bu0E,WACxB,SAAWv0E,CAAK,EAA6B,GAChD,MAAAxoB,MAAY,GAAAwoB,GAAAA,KAAAA,EACb,QACD,CAEA,IAA2Bw0E,EAAAC,EAAAf,EAA3Bj0E,EAAA,KAAAjoB,MAAA,CAAAk9F,EAA2B,EAAAC,EAAA,GAAAC,EAAA,EACP,IAClB,IAAA9+D,KAAArW,EAAc,CAEU,IACtB,IAAIsW,KAFNy+D,EAAA,EAEM/0E,CAAA,CAAAqW,EAAA,CAAc,CAGlB,IAAA49D,EAAAj0E,CAAA,CAAAqW,EAAA,CAAAC,EAAA,CAAA8+D,EAAAnB,EAAAl7D,cAAA,CAAAxY,EAEA00E,CAAAA,IACEG,GACEJ,EAGAf,CAAA,CAAA1zE,EAAA,GAAgCy0E,GACjCE,CAAAA,EAAA,IAHDF,EACqBf,CAAS,CAAK1zE,EAAA,CAKjC0zE,CAAO,CAAA1zE,EAAY,OAAS,CAAAA,EAAA,EAC7B,OAAA0zE,CAAA,CAAA1zE,EAAA,EAIF20E,EAAA,GAGCviF,IAAAA,OAAA+4D,IAAA,CAAAuoB,GAAAz7F,MAAA,CACFu8F,IAGC,OAAA/0E,CAAA,CAAAqW,EAAA,CAAAC,EAAA,CAIa,IAAdy+D,GACD,OAAA/0E,CAAA,CAAAqW,EAAA,CAI8C,IAC/C,IAAAtoB,EAAA,EAAAA,EAAA,IAAiB,CAAAg+E,UAAK,CAAAvzF,MAAc,CAAAuV,IACtConF,GAAA,KAAApJ,UAAA,CAAAh+E,EAAA,CAAAvV,MAAA,CAEE08F,GAAiBD,IAAAE,IACjB,IAAI,CAAC50E,EAAA,CAAYy0E,EAClB,KAAAK,WAAA,CAAA90E,GAGH,EAOgC80E,YACrB,SAAO90E,CAAK,EAA6B,GAChD,KAAAxoB,MAAA,EAAAwoB,GAAAA,KAAAA,GAGF,IAAqBusE,EAAAwI,EAAAC,EAAhBv1E,EAAA,KAAWjoB,MAAK,KACnBu9F,KAAWt1E,EAAA,CACW,IACpBu1E,KADFzI,EAAK9sE,CAAA,CAAAs1E,EAAW,CAEd,OAAIxI,CAAO,CAAAyI,EAAS,CAACh1E,EAAQ,CACP,IAApB5N,OAAO+4D,IAAI,CAACohB,CAAA,CAAAyI,EAAQ,EAAA/8F,MAAA,EACrB,OAAAs0F,CAAA,CAAAyI,EAAA,CAGkB,IAAnB5iF,OAAO+4D,IAAI,CAAAohB,GAAAt0F,MAAQ,EACpB,OAAAwnB,CAAA,CAAAs1E,EAAA,EAXH,EAkBqCE,cAC3B,SAAKtnF,CAAA,CAAAnW,CAAA,CAAoB,CAEnC,IAAIm7F,EAAM,KAAAC,mBAAkB,CAAAjlF,GAC1B,IAAK,CAAAunF,aAAc,CAAAvC,EAAI9F,SAAS,GACjC,KAAAsI,aAAA,CAAAxC,EAAA9F,SAAA,EAGC,IAAK,CAAAqF,oBAAqB,CAAAS,EAAI9F,SAAS,CAAE8F,EAAI/kE,SAAS,GACvD,KAAAwnE,oBAAA,CAAAzC,EAAA9F,SAAA,CAAA8F,EAAA/kE,SAAA,KAGHrwB,GAAAwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,MAAAu7E,oBAAA,CAAAS,EAAA9F,SAAA,CAAA8F,EAAA/kE,SAAA,EAAAp2B,EAEA,EAK4Do7F,oBAC/C,SAAAyC,CAAmB,CAAAC,CAAa,EACnB,SAAtBD,GACDA,CAAAA,EAAA,KAAAA,cAAA,EAG6B,IAC5B,IADG9sB,EAAQ+sB,EAAY,IAAK,CAAA5J,mBAAA,MAAAF,UAAA,CAAAhtE,EAAA+pD,EAAAtwE,MAAA,CACxBuV,EAAA,EAAAA,EAAAgR,EAAAhR,IAAkB,CAAiB,GACrC6nF,GAAO9sB,CAAA,CAAA/6D,EAAA,CAAAvV,MAAA,OACL,CACA40F,UAAWr/E,EACbogB,UAAAynE,CACD,CACD,CACFA,GAAA9sB,CAAA,CAAA/6D,EAAA,CAAAvV,MAAA,MAAA60F,oBAAA,CAAAt/E,EACA,CAAO,MACL,CACAq/E,UAAWr/E,EAAA,EACbogB,UAAA26C,CAAA,CAAA/6D,EAAA,GAAAvV,MAAA,CAAAo9F,EAAA9sB,CAAA,CAAA/6D,EAAA,GAAAvV,MAAA,CAAAo9F,CAAA,CAGF,EAQ6DE,mBAChD,SAAAC,CAAe,CAAAC,CAAa,CAAAC,CAAA,EACnB,SAAlBF,GACDA,CAAAA,EAAA,KAAAH,cAAA,KAEiB,SAAhBI,GACDA,CAAAA,EAAA,KAAAE,YAAA,EAAAH,CAAA,EAE2C,IAC1C,IADGh+F,EAAQ,GACXgW,EAAOgoF,EAAUhoF,EAAAioF,EAAAjoF,IACnBhW,EAAAxE,IAAA,MAAA4iG,kBAAA,CAAApoF,EAAAkoF,IAEF,OAAAl+F,CAEA,EAOiDo+F,mBAChC,SAAApvE,CAAA,CAAoBkvE,CAAA,EAGnC,IAAA/C,EAAO,KAAAC,mBAAU,CAAApsE,GACnB,MAAA/rB,CADmBi7F,EAAA,KAAA7E,2BAAA,CAAA8B,EAAA9F,SAAA,CAAA8F,EAAA/kE,SAAA,OAAAskE,oBAAA,CAAAS,EAAA9F,SAAA,CAAA8F,EAAA/kE,SAAA,IACnB,EAEA,EAQ2DilE,mBAC9C,SAAAr7F,CAAe,CAAAg+F,CAAa,CAAAC,CAAA,EACnB,SAAlBD,GACDA,CAAAA,EAAA,KAAAH,cAAA,KAEiB,SAAhBI,GACDA,CAAAA,EAAA,KAAAE,YAAA,EAAAH,CAAA,EAC2C,IAC1C,IAAIhoF,EAACgoF,EAAchoF,EAAGioF,EAAAjoF,IACxB,KAAAynF,aAAA,CAAAznF,EAAAhW,GAIF,OADa,KAAA07F,gBAAA,IACb,MAQqDhB,qBACnC,SAAWrF,CAAS,CAAAj/D,CAAO,EAC3C,IAAIioE,EAAY,KAAAr+F,MAAA,OAAAA,MAAA,CAAAq1F,EAAA,UAIlBgJ,CAAA,CAAAjoE,EAAA,CAFG,MAWyDijE,4BACzC,SAAAhE,CAAqB,CAAAj/D,CAAW,EAEM,IACrD,IADqDlP,EAAlDjkB,EAAQ,IAAG,CAAAy3F,oBAAS,CAAArF,EAAyBj/D,IAAK,GAAA8lE,EAAA,GACrDlmF,EAAO,EAAIA,EAAC,KAAAo9E,gBAAmB,CAAA3yF,MAAA,CAAAuV,IAEjCkmF,CAAA,CADEh1E,EAAA,IAAW,CAACksE,gBAAe,CAAAp9E,EAAA,CAC7B,UAAA/S,CAAA,CAAAikB,EAAA,MAAAA,EAAA,CAAAjkB,CAAA,CAAAikB,EAAA,CAEF,OAAAg1E,CAEA,EAM4D0B,qBAC9C,SAAWvI,CAAa,CAAAj/D,CAAA,CAAAnzB,CAAA,EACtC,KAAAjD,MAAA,CAAAq1F,EAAA,CAAAj/D,EAAA,CAAAnzB,CAEA,EAMwDq7F,wBACnC,SAAWjJ,CAAA,CAAUj/D,CAAA,EAC1C,YAAAp2B,MAAA,CAAAq1F,EAAA,CAAAj/D,EAAA,EAOmCsnE,cACxB,SAAWrI,CAAC,CAAU,CACjC,aAAAr1F,MAAA,CAAAq1F,EAAA,EAOmCsI,cACtB,SAACtI,CAAc,EAC5B,KAAAr1F,MAAA,CAAAq1F,EAAA,GAEA,EAIsCkJ,iBACxB,SAAOlJ,CAAU,EAC/B,YAAAr1F,MAAA,CAAAq1F,EAAA,CAEJ,GACY,UAEN,CASJ,IAAA9yC,EAAoBx8C,GAAIw8C,aAAe,CAAAi8C,EAAAj8C,EAAApC,2BAAA,CAAAs+C,EAAAl8C,EAAAxC,uBAAA,CAAAiB,EAAAuB,EAAAvB,cAAA,CAAAG,EAAAoB,EAAApB,kBAAA,CAAAE,EAAAkB,EAAAlB,kBAAA,CAAAc,EAAAI,EAAAJ,qBAAA,CAAAu8C,EAAA34F,GAAA6U,MAAA,CAAAC,SAAA,CAAAuF,QAAA,CAsEnB,GAtEmBs+E,EACjCC,EAAA,KAAA54F,GAAA49C,OAAA,EACJx5B,EAAG,IACHC,EAAA,EACAk6B,mBAAek6C,EACfjhD,cAAe8D,EACjBkD,cAAApC,CAEA,GAAuCu8C,EAClCE,EAAA,KAAA74F,GAAA49C,OAAA,EACHx5B,EAAG,GACHC,EAAA,EACAk6B,mBAAek6C,EACfjhD,cAAe8D,EACjBkD,cAAApC,CAEA,GAAuCu8C,EAClCG,EAAA,KAAA94F,GAAA49C,OAAA,EACHx5B,EAAG,EACHC,EAAA,GACAk6B,mBAAek6C,EACfjhD,cAAe4D,EACjBoD,cAAApC,CAEA,GAAuCu8C,EAClCh/D,EAAA,KAAA35B,GAAA49C,OAAA,EACHx5B,EAAG,EACHC,EAAA,IACAk6B,mBAAek6C,EACfjhD,cAAe4D,EACjBoD,cAAApC,CAEA,GAAuCu8C,EACjC54C,EAAA,KAAA//C,GAAA49C,OAAA,EACJx5B,EAAG,IACHC,EAAA,IACAk6B,mBAAem6C,EACjBlhD,cAAAyD,CAEA,GAAuC09C,EAClC34C,EAAA,KAAAhgD,GAAA49C,OAAA,EACHx5B,EAAG,GACHC,EAAA,IACAk6B,mBAAem6C,EACjBlhD,cAAAyD,CAEA,GAAuC09C,EACjC14C,EAAA,KAAAjgD,GAAA49C,OAAA,EACJx5B,EAAG,IACHC,EAAA,GACAk6B,mBAAem6C,EACjBlhD,cAAAyD,CAEA,GAAuC09C,EAClCz4C,EAAA,KAAAlgD,GAAA49C,OAAA,EACHx5B,EAAG,GACHC,EAAA,GACAk6B,mBAAem6C,EACjBlhD,cAAAyD,CAEA,GAAwC09C,EACnCI,GAAA,KAAA/4F,GAAA49C,OAAA,EACHx5B,EAAG,EACHC,EAAA,IACAmzB,cAAAgF,EAAoBlC,oBAAc,CAClCiE,mBAAU/B,EAAAF,oBAAA,CACVjE,QAAA,IACA4F,eAAY,GACdH,WAAA,QAEA,GACE99C,GAAAg5F,OAAA,EAOA,IAAAC,EAAsBj5F,GAAAg5F,OAAA,CAAelkF,SAAG,CAAAuF,QAAA,GACxC4+E,CAAAA,EAAgBF,GAAE,CAAGJ,EAAeI,GAAE,CACtCE,EAAgBj5C,EAAE,CAAG24C,EAAe34C,EAAE,CACtCi5C,EAAgB/4C,EAAE,CAAGy4C,EAAez4C,EAAE,CACtC+4C,EAAgBl5C,EAAE,CAAG44C,EAAe54C,EAAE,CACtCk5C,EAAgBh5C,EAAE,CAAG04C,EAAe14C,EAAE,CACtCg5C,EAAgBt/D,EAAE,CAAGg/D,EAAeh/D,EAAE,CAEtCs/D,EAAgBH,EAAE,CAAGH,EAAWG,EAAA,CAAQG,EACnCJ,EAAA,KAAA74F,GAAA49C,OAAA,EACHx5B,EAAG,GACHC,EAAA,EACAmzB,cAAAgF,EAAoBhB,WAAA,CACpB+C,mBAAYk6C,EACd36C,WAAA,UAEA,GAAwCm7C,EAClCL,EAAA,KAAA54F,GAAA49C,OAAA,EACJx5B,EAAG,IACHC,EAAA,EACAmzB,cAAAgF,EAAoBhB,WAAA,CACpB+C,mBAAYk6C,EACd36C,WAAA,UACD,EACH,KASE99C,GAAI6U,MAAA,CAAAkV,aAAwB,CAAAt0B,IAAM,CAAC,UAC/BwlB,GAAAjb,GAAoB6U,MAAO,CAAAC,SAAO,CAAAowD,aAAU,CAC5ChqD,GAAmBlb,GAAO6U,MAAA,CAAAC,SAAU,CAAQ6vD,gBAAA,CAC5CxpD,GAAAnb,GAAiB6U,MAAO,CAAAC,SAAO,CAAA+yC,QAAU,CACzC7nD,GAAA6U,MAAA,CAAAC,SAAuC,CAAAokF,aAAO,CACfl5F,GAAO6U,MAAA,CAAAC,SAAU,CAAAqkF,4BAAoB,CAEhDn5F,GAAA6U,MAAgB,CAAAC,SAAK,CAAAskF,oBAAA,CAC7Cp5F,GAAO6U,MAAM,CAACC,SAAS,CAACwsD,eAAe,CAAC7rE,IAAI,CAAC,UAE7CuK,GAAA6U,MAAA,CAAAC,SAAA,CAAAusD,eAAA,CAAA5rE,IAAA,WAGmDuK,GACjDwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA6U,MAAA,CAAAC,SAAA,EAYAukF,SAAA,GAMAC,OAAAj8F,KAAAA,EAI8BsnE,iBACrB,UAAkB,CAC3B,OAAAzpD,GAAAgG,IAAA,eAAAo4E,MAAA,EASwCp0B,cACtC,SAAoBroD,CAAA,CAAIyS,CAAO,EACd,GAAjBrU,GAAeiG,IAAE,MAAArE,EAAAyS,GACf,KAAAgqE,MAAA,EAEA,IAAI15F,EAAO,IAAC,CAAAwlE,4BAAgC,EAAI,KAC9C,CAAAk0B,MAAO,CAAAvxB,MAAM,iBAAAuxB,MAAA,CAAAzzF,GAAA,EACb5G,MAAAW,EAAQwkB,CAAK,CACfllB,OAAAU,EAAAykB,CAAA,GAEDpJ,GAAAiG,IAAA,MAAArE,EAAA,KAAAy8E,MAAA,CACH,GAOyCzxC,SACnC,SAASF,CAAqB,MAAC9sD,EAAAsgB,GAAA+F,IAAA,OAAY,WAC/C,CAAA5hB,MAAQ,CAACqoD,IAIX,OAHI,KAAA2xC,MAAO,EAAM,CAAG,IAAI,CAACA,MAAM,CAACtxC,iBAAS,EACtCntD,CAAAA,EAAAy+F,MAAA,MAAAA,MAAA,CAAAzxC,QAAA,CAAAF,EAAA,EAEH9sD,CAGF,CAEA,GACAugB,GAA0Bpb,GAAO2qB,KAAM,CAAA7V,SAAW,CAAAw8D,oBAAA,CAAAtxE,GAChDwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAA2qB,KAAA,CAAA7V,SAAA,EAIyCykF,wBAClB,SAAC9uE,CAAU,EAAQ,IACtC,CAAAhmB,QAAO,CAAAyhB,OAAA,CAAW,SAACrrB,CAAU,EAK/BmF,GAAAw5F,WAAA,CAAA1kF,SAAA,CAAA2kF,sBAAA,CAAAv4E,IAAA,CAAAlhB,GAAAw5F,WAAA,CAAA1kF,SAAA,CAAAja,EAAA4vB,EACF,EAEA,EAIkCivE,qBACd,UAAS,CAC3B,IAAI78D,EAAQ,KAAAy8D,EAAA,KAAAA,MAAA,IACVA,EAAO,CACP,OAAI,KAAAA,MAAY,CAChB,IAAAzyE,EAAagW,EAAUxN,mBAAQ,GAAAiqE,EAC7B1zF,KAAI,UAAW0zF,CAAM,EACrB,IAAAhqE,EAAOuN,EAAWvN,QACf,CAAwBgqE,EACvBz3E,UAAA,SAAAqE,OAAA,UAAAuE,CAAA,EAKA,IAAAkvE,EAAY35F,GAAAwa,IAAuB,CAAA6Q,yBAAM,CAAAxE,EAAA4D,EAAA4E,mBAAA,IACzCrvB,GAAIwa,IAAA,CAAAiU,sBAAU,CAAAhE,EAAAkvE,GACZrqE,EAAoCA,EAC9B1pB,KAAA,UAAag0F,CAAO,EAMxB,IAAAC,EAAM75F,GAAAw5F,WAAwB,CAAA1kF,SAAA,CAAAglF,mBAAA,CAAA54E,IAAA,CAAAlhB,GAAAw5F,WAAA,CAAA1kF,SAAA,CAAA2V,EAAAmvE,EAAA/yE,GAC7BgW,EAAA08D,uBAAA,CAAAM,EAAA,GAAuB,qBAAW,WACvC,EAGCh9D,EAAA08D,uBAAA,CAAA9uE,EAEP,EACD,EACH,GAMkC6mD,qBACd,UAAQ,CAE5B,MADE,CAAO,IAAP,KAAA+nB,QAAO,MAAsB,CAAAK,oBAAS,GACxCt+E,GAAA8F,IAAA,MACF,CAEA,GAOsDlhB,GACpD+5F,MAAA,CAAA/5F,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA2qB,KAAA,EAMAnvB,KAAA,SAKAs7C,QAAA,SAKAC,QAAA,SAA2ButB,WACjB,SAAAznD,CAAA,EACRA,EAAIogC,IAAA,GACJpgC,EAAIqgC,SAAS,CAAC,QACdrgC,EAAI0xC,QAAO,OAAAtvD,KAAA,SAAAC,MAAA,QAAAD,KAAA,MAAAC,MAAA,EACX2d,EAAI0gC,OAAC,GACP,KAAA7gB,SAAA,cAAA7f,EAEA,EAQEu1D,WAAQ,WAIZ,CAEA,GAOuDpyE,GACjD+5F,MAAA,CAAApwE,UAAiB,UAAO9uB,CAAA,CAAA+mB,CAAA,EAC5B,IAAAxb,EAAYvL,EAAAuL,OAAe,CAAqCpG,GAC9Dwa,IAAI,CAAA6O,cAAiB,CAAAjjB,EAAW,SAAOmjB,CAAY,EACnD,IAAAjvB,EAAO0F,GAAQwa,IAAO,CAAA3f,MAAA,CAAA+K,KAAA,CAAA/K,EAAA,GACtB,QAAOP,EAAK8L,OAAA,CAAqDpG,GAC/Dwa,IAAA,CAAAqP,uBAAyB,CAAOhvB,EAAOP,EAAA,UAAkB,CAC3DsnB,GAAAA,EAAA,IAAA5hB,GAAA+5F,MAAA,CAAAxwE,EAAAjvB,EAAA,IACF,EACF,EAEA,EACA+gB,GAAArb,GAAAqT,MAAA,CAAAyB,SAAA,CAAAoxC,cAAA,CAImDlmD,GACjDwa,IAAA,CAAA3f,MAAA,CAAAue,MAAA,CAAApZ,GAAAqT,MAAA,CAAAyB,SAAA,EAIuBklF,UAEnB,UAAK,CAKT,YAAA1gG,aAAA,OAAAmP,gBAAA,kBAAAA,gBAAA,CAAAjN,IAAA,OAAAiN,gBAAA,CAAAwxF,UAAA,EAO+B/zC,eAC7B,SAAqBrpC,CAAA,CAAI,CACzBxB,GAAS6F,IAAS,KAAO,CAAArE,GACvB,IAAI,CAACm9E,SAAA,KAAgB,IAAC,CAAAvxF,gBAAO,CAAA6lB,QAAA,EAC9B,KAAA7lB,gBAAA,CAAA+iD,OAAA,EAEL,CAEA,GAqB6CxrD,GACzCw5F,WAAM,CAAAx5F,GAAAwa,IAAA,CAAAG,WAAA,CAAA3a,GAAA4qD,WAAA,EAENpvD,KAAA,SAKA8yB,SAAA,GAKA2rE,WAAA,GAM+BC,YACtB,SAAOr/F,CAAQ,CAAK,CAC7B,MAAAA,CAAA,IAAAA,EAAAw+F,QAAA,EAe4Ec,4BACjD,SAAUC,CAAK,CAAAv9E,CAAA,CAAAw9E,CAAA,EAAAD,EAClCn0F,aAAI,CAAa,SAAQic,CAAA,EAC3BA,EAAAjc,aAAY,EAAAic,SAAAA,EAAAm3E,QAAA,CAEd,IACK,CAAAc,2BAA0B,CAAAj4E,EAAQrF,EAAIw9E,GACzC,MAAA/rE,QAAA,EAAApM,EAAAm3E,QAAoC,EAAAn3E,EAAA27B,OAAA,EAEpC37B,EAAA27B,OAAW,IACXu8C,EAAAj5B,KAAA,CAAmB,GACnBk5B,EAAmBv7C,UAAU,CAACrpD,IAAI,CAACysB,GACrCm4E,EACcD,UAAgB,CAAA3kG,IAAA,CAAO2kG,IACnC,KAAA9rE,QAAA,EAAApM,EAAA27B,OAAA,GAEE37B,EAAIm3E,QAAO,EAAAn3E,EAAQo3E,MAAO,EAC1Bp3E,EAAIo3E,MAAK,CAAAhrE,QAAO,IAChBpM,EAAAi/C,KAAA,CAAW,GACXi5B,EAAAj5B,KAAA,CAAmB,GACnBk5B,EAAmBf,MAAA,CAAA7jG,IAAW,CAAAysB,GAChCm4E,EACKD,UAAA,CAAA3kG,IAAA,CAAA2kG,KAEHl4E,EAAA27B,OAAW,IACXu8C,EAAAj5B,KAAA,CAAmB,GACnBk5B,EAAmBv7C,UAAU,CAACrpD,IAAI,CAACysB,GACpCm4E,EAAAD,UAAA,CAAA3kG,IAAA,CAAA2kG,IAGP,OAEA,EAM4BE,eAChB,UAAc,CACtB,IAAK,CAAAC,cAAc,EACpB,MAAAA,cAAA,CAAAv6F,GAAAwa,IAAA,CAAAwQ,mBAAA,IAED,IAAArnB,EAAY,IAAG,CAAA42F,cAAiB,CAChC52F,EAAO1E,KAAA,CAAM,IAAG,CAAI0E,MAAC,CAAM1E,KAAC,CAC5B0E,EAAIzE,MAAA,KAAa,CAAAyE,MAAO,CAAAzE,MAAU,CAClC,IAAIyvD,EAAYhrD,EAAAmZ,UAAgB,OAAI,GAClC,IAAI,CAAAnZ,MAAA,CAAAo+C,gBAAqB,GAAO,CAChC,IAAIgT,EAAQ,KAAApxD,MAAmB,CAACq+C,gBAAe,GAChD,KAAAr+C,MAAA,CAAAu+C,mBAAA,CAAA6S,EAAApxD,EAAAgrD,EACD,KAIIjO,EAAmB,KAAA/8C,MAAA,CAAA+8C,eAAqB,CAAA85C,EAAsB95C,GAAO,IAAe,CAAAw5C,WAAG,CAAAx5C,GAAAE,EAAA,KAAAj9C,MAAA,CAAAi9C,YAAA,CAAA65C,EAAA75C,GAAA,KAAAs5C,WAAA,CAAAt5C,GAAA,GACzF,KAAI,CAAAtyB,QAAA,EAAYoyB,CAAAA,GAAA,CAAA85C,GAAA,KAAA72F,MAAA,CAAA1L,eAAA,EAAEuiG,GAA0C,MAAA72F,MAAA,CAAA+8C,eAAA,CAAArjD,KAAAA,CAAA,EAE5D,IAAI,CAAAsG,MAAA,CAAA+hD,iBAAY,CAAAiJ,GAAE6rC,GAAgD,MAAA72F,MAAA,CAAA+8C,eAAA,CAAAA,CAAA,OAGlE,GAAI,KAAQpyB,QAAK,EAAOoyB,GAAe85C,EAAA,CACvC,IAAI9xF,EAAQ,KAAA/E,MAAA,CAAA1L,eAAkB,CAC9B,IAAI,CAAC0L,MAAM,CAAC1L,eAAA,CAAkBoF,KAAAA,EAC9B,IAAI,CAACsG,MAAM,CAAC+hD,iBAAe,CAAGiJ,GAC/B,KAAAhrD,MAAA,CAAA1L,eAAA,CAAAyQ,CACD,GACWu0C,IAAA,GACX0R,EAAI9nC,SAAA,CAAAhG,KAAqB,CAAA8tC,EAAA,KAAAhrD,MAAA,CAAAs9C,iBAAA,MAAEo5C,EAAc,CAAEv7C,WAAU,GAAEw6C,OAAA,GAAec,WAAA,IAUoB,GAR1F,IAAI,CAACD,2BAAsB,MAAAx2F,MAAiB,CAAAgrD,EAAO0rC,GACnD,KAAA12F,MAAA,CAAAgiD,cAAmB,CAAAgJ,EAAmB,KAAAhrD,MAAa,CAAAc,QAAE,EAAA41F,EAAgBv7C,UAAI,CAAA54B,OAAA,UAAAhE,CAAA,EAAEA,EAAA27B,OAAA,GAC3E,GAAiDw8C,EACpCf,MAAQ,CAAGpzE,OAAK,UAAAhE,CAAA,EAC3BA,EAAIo3E,MAAK,CAAAhrE,QAAO,IAClBpM,EAAAi/C,KAAA,GACA,GAAqDk5B,EAAcD,UAAI,CAAAl0E,OAAA,UAAAhE,CAAA,EAAEA,EAAAi/C,KAAA,GACzE,GACAxS,EAAUpR,OAAQ,GAChB,KAAI,CAAAjvB,QAAA,EAAAsyB,CAAAA,GAAiB,CAAA65C,GAAA,KAAA92F,MAAA,CAAAg9C,YAAA,EAAE85C,GAAuC,MAAA92F,MAAA,CAAAi9C,YAAA,CAAAvjD,KAAAA,CAAA,EAE9Dge,GAAI6F,IAAA,CAAiB,KAAAvd,MAAA,CAAAgrD,GAAE8rC,GAA0C,MAAA92F,MAAA,CAAAi9C,YAAA,CAAAA,CAAA,OAGjE,GAAI,KAAQtyB,QAAK,EAAOsyB,GAAY65C,EAAA,CACpC,IAAI/xF,EAAQ,KAAA/E,MAAA,CAAYg9C,YAAG,CAC3B,KAAAh9C,MAAA,CAAAg9C,YAAqB,CAAKtjD,KAAAA,EAC1Bge,GAAY6F,IAAA,KAAY,CAAAvd,MAAG,CAAAgrD,GAC5B,KAAAhrD,MAAA,CAAAg9C,YAAA,CAAAj4C,CACH,GAOgCm7C,gBACf,SAAAhnC,CAAA,EACf,IAAI,CAAA6f,SAAA,CAAW,kBAAG7f,GACpBA,EAAAsgC,WAAA,QAEA,EAckC+M,kBACjB,SAAArtC,CAAA,EACf,IAAI,CAAC6f,SAAA,qBAAgB7f,GACrB,IAAI,CAAAgnC,eAAA,CAAAhnC,GACNA,EAAAspC,wBAAA,CAAAtpC,IAAA,KAAAlZ,MAAA,CAAAmZ,UAAA,oCAM6B2tC,gBAChB,WACb,QAEA,EAMyCW,YAC7B,SAAO9T,CAAA,CAAYh9C,CAAC,CAAQ,CACpC,KAAAqJ,MAAA,CAAA0nD,YAAA,CAAA/wD,EAAAsM,CAAA,IAGF,KAAA0kD,kBAAA,CAAAhU,GAIA,KAAAiU,mBAAuB,CAAAjU,GAEvB,IAAI,CAACgjD,cAAa,GAClB,IAAI,CAACL,UAAO,CAAK,GACjB,IAAI,CAACt2F,MAAA,CAAOod,IAAA,kBACd,KAAAyqC,OAAA,GAEA,EAMqBA,QACf,WAEF,KAAAl9B,QAAA,GAEAzR,EAAK,KAAAlZ,MAAU,CAAAmZ,UAAW,GAC3B,KAAA4f,SAAA,WAAA7f,IAGDA,EAAK,KAAMlZ,MAAC,CAAA2+C,UAAa,CACzB,IAAI,CAAC3+C,MAAA,CAAAqhD,YAAU,CAAAnoC,GACf,IAAI,CAAA6f,SAAI,WAAA7f,GACRA,EAAIogC,IAAI,GACR,IAXIpgC,EAWSgJ,EAAA,EAAT,IAAM,CAAGliB,MAAA,CAAAq+C,gBAAA,GACbnlC,EAAI7X,KAAA,CAAA6gB,EAAAA,GACJhJ,EAAIspC,wBAAe,aACnBtpC,EAAII,SAAO,MAAAs9E,cAAA,MACb19E,EAAA0gC,OAAA,EAEA,EAQgC2O,WAC1B,SAAYn4B,CAAU,EAC1B,IAAAtJ,EAAK,KAAAiS,SAAA,cAAgC3I,GAGvC,OAFEtJ,EAAK07B,wBAAsB,CAAG,KAAA73B,QAAU,CAAO,gCAC/C7D,EAAAkF,MAAO,MAAArB,QAAA,iBACT7D,CAEA,EASiFqvE,oBAC3E,SAAmBrvE,CAAO,CAAI6E,CAAC,CAAAorE,CAAwC,EAQ3E,IAAAC,EAAA36F,GAAAwa,IAAA,CAAA4M,eAAA,CAAAqD,EAAA4E,mBAAmE,IAAAurE,EAAAtrE,EAAAD,mBAAA,GAAAxI,EAAAyI,EAAAkyC,kBAAA,CAAAm5B,EAAA36F,GAAAwa,IAAA,CAAA6Q,yBAAA,CAAAsvE,EAAAD,EAAA,CAgBrE,OAbEprE,EAAOkyC,kBAAK,IAOZxhE,GAAAwa,IAAA,CAAAiU,sBAAA,CAAAa,EAAAtvB,GAAAwa,IAAA,CAAA6Q,yBAAA,CAAAxE,EAAA+zE,IAKAnwE,EAAA6E,QAAO,CAAA7E,EAAA6E,QAAA,CAAAtvB,GAAAwa,IAAA,CAAA0U,cAAA,CAAAI,EAAA7E,EAAA6E,QAAA,EAAAA,CAAA,CACT7E,CAEA,EAQyDowE,sBACpC,SAAOpwE,CAAA,CAAA5vB,CAAA,CAAA+mB,CAAmB,EAC7C,IAAIk5E,EAAWjgG,EAAOw0B,mBAAQ,GAC1BC,EAAQz0B,EAAIy0B,QAAA,CAChBuN,EAAW,KAAiBpS,EAC1B7kB,KAAA,UAAem1F,CAAA,EAAqBzrE,EAClC1pB,KAAS,UAAMg0F,CAAA,EACdh4E,EAAAib,EAAAi9D,mBAAA,CAAAiB,EAAAnB,EAAAkB,GAAA,GAAuB,qBAAW,WACvC,CACF,EAEA,EAO6CrB,uBAC3B,SAAAv3E,CAAA,CAAAuI,CAAA,EAChB,IAAAoS,EAAA,KACkD,GAChD3a,EAAIjc,aAAU,EAAIic,SAAAA,EAAAm3E,QAAe,CAAW,CAAM,IAChD9oC,EAAOruC,EAAKzd,QAAQ,CAAAoF,MAAA,UAAA6nE,CAAA,EACtB,OAAAA,EAAA2nB,QAAA,EAEE9oC,CAAAA,EAAK71D,MAAA,IAAAwnB,EAAqBoN,QAAO,CAAsB,IACrD,CAAAurE,qBAAgB,CAAApwE,EAAcvI,EAAE,SAAA64E,CAAA,EAAAxqC,EAC9BrqC,OAAM,UAAAwrD,CAAA,EACR70C,EAAA48D,sBAAA,CAAA/nB,EAAAqpB,EACF,EACF,GAEExqC,EAAe71D,MAAC,IAAgB61D,EAC9BrqC,OAAM,UAAAwrD,CAAA,EACR70C,EAAA48D,sBAAA,CAAA/nB,EAAAjnD,EACD,GAEF,MACD,KAEI6uE,EAASp3E,EAAAo3E,MAAA,CACXA,IACAA,EAAI,IAASt5F,GAAA+5F,MAAA,CACd73E,EAAAo3E,MAAA,CAAAA,GAE0B7uE,EACzB7kB,KAAA,UAAA6kB,CAAA,EAOA,IAAAuwE,EAAYh7F,GAAAwa,IAAsB,CAAC6Q,yBAAM,CAAArrB,GAAAwa,IAAA,CAAA4M,eAAA,CAAAlF,EAAAmN,mBAAA,IAAA5E,EAAA4E,mBAAA,IACzCrvB,GAAOwa,IAAA,CAAAiU,sBAAc,CAAAhE,EAAAuwE,GACrB1B,EAAO57B,aAAU,CAAIjzC,GACrBvI,EAAIrc,GAAA,CAAI,QAAC,IAAeqc,EACtBnB,IAAA,eAAM,CACR0J,KAAAA,CACA,GACEvI,EAAAoiC,KAAM,EAAAxlD,MAAaC,OAAK,CAAA89B,EAAAo+D,YAAA,GACzBp+D,EAAAo+D,YAAA,CAAAxlG,IAAA,CAAAysB,EAEL,EAEA,EAOqCg5E,oBACjB,SAAMzwE,CAAA,EACxB,IAAI9mB,EAAA,IAAa,CAAAA,MAAA,CACjBw3F,EAAA,GAWF,MAXE,CAEE,kBACA,eAAwB,CAAAj1E,OACpB,UAAW/E,CAAA,CAAM,CACrB,IAAIi6E,EAAAz3F,CAAY,CAAAwd,EAAS,CACvBi6E,GAAKA,EAAA/B,QAAuB,GAC5B,KAAAI,sBAAkB,CAAA2B,EAAA3wE,GACnB0wE,CAAA,CAAAh6E,EAAA,CAAAi6E,EAEH,MAAO,EACTD,CAEA,EAKiCvvC,oBAChB,UAAO,CACtB,IAAI/uC,EAAA,IAAS,CAAAlZ,MAAA,CAAA2+C,UAAA,CAAA3+C,EAAA,KAAAA,MAAA,CACbkZ,EAAIgqC,SAAK,GACP,IAAI,CAACgE,QAAO,EACb,MAAAG,OAAA,MAAAsB,cAAA,MAAAtB,OAAA,MAAAH,QAAA,GAIDlnD,EAAKqhD,YAAa,CAAArhD,EAAK2+C,UAAA,EAEvB,IAAI,CAAA23C,UAAW,IAGf,IAAIlmE,EAAC,IAAY,CAAAi3B,OAAK,OAAAA,OAAgB,CAAAtwD,MAAW,QAAAsxD,sBAAA,MAAAhB,OAAA,UAC/C,CAAAj3B,GAAY,KAAAk4B,eAAA,CAAAl4B,GAAA,CACZpwB,EAAAod,IAAA,gBAKApd,EAAA4C,gBAAA,GACD,MAED,KACAkkB,EAAA,KAAAyhC,UAAA,CAAAn4B,GAEAtJ,EAAAvkB,SAAA,GACmCvC,EAAEod,IAAM,wBAAK0J,KAAAA,CAEhD,GAEA,IAAI0wE,EAAY,KAAAD,mBAAA,CAAAzwE,GACZoS,EAAC,KACL,IAAI,CAAAo+D,YAAY,IAChB,IAAA1qC,EAAO,GAA6B5sD,EAClCsC,aAAgB,UAAQic,CAAA,EACtBA,EAAAm3E,QAAM,EAAAn3E,EAAA6mC,oBAA4B,CAAAt+B,EAAA,SAClCoS,EAAA48D,sBAAa,CAAAv3E,EAAAuI,GACd8lC,EAAA96D,IAAA,CAAAysB,GAEH,GAC2Bve,EACzBod,IAAM,gBACN0J,KAAAA,EACA8lC,QAAAA,EACAgL,WAAW,KAAA0/B,YAAA,CACbE,UAAAA,CACA,GAEA,OAAO,KAAAF,YAAgB,CACvBt3F,EAAK4C,gBAAY,GAEjB,KAAAmkD,YAAA,GAC4B/mD,EAAEod,IAAM,iBAAK0J,KAAAA,CAC3C,EACF,CAGF,EACF,kBCj6uBA,kBCAA,kBCAA,YAAA70B,CAAA,EAAAA,EAAAylG,CAAA,kEAAAzlG,EAAAA,EAAAiwB,CAAA,SAAAy1E,KAAA1lG,EAAAylG,CAAA","sources":["webpack://_N_E/","webpack://_N_E/./src/useCanvas.ts","webpack://_N_E/./src/useTools.ts","webpack://_N_E/./src/CanvasTools.tsx","webpack://_N_E/./src/useWarrior.ts","webpack://_N_E/./src/fabricUtils.ts","webpack://_N_E/./src/imageProcessing.worker.ts","webpack://_N_E/./src/useImageWorker.ts","webpack://_N_E/./src/useSettings.ts","webpack://_N_E/./src/imageUtils.ts","webpack://_N_E/./src/ToolsProvider.tsx","webpack://_N_E/./src/CanvasBackdrop.tsx","webpack://_N_E/./src/CanvasProvider.tsx","webpack://_N_E/./src/CanvasInteractions.tsx","webpack://_N_E/./src/CanvasToggle.tsx","webpack://_N_E/./src/WarriorSelector.tsx","webpack://_N_E/./src/WarriorProvider.tsx","webpack://_N_E/./src/useEnvironment.ts","webpack://_N_E/./src/useSkin.ts","webpack://_N_E/./src/Material.tsx","webpack://_N_E/./src/Materials.tsx","webpack://_N_E/./src/WarriorViewer.tsx","webpack://_N_E/./src/EnvironmentSelector.tsx","webpack://_N_E/./src/AnimationSelector.tsx","webpack://_N_E/./src/EnvironmentProvider.tsx","webpack://_N_E/./src/SkinProvider.tsx","webpack://_N_E/./src/MaterialSelector.tsx","webpack://_N_E/./src/Canvas.tsx","webpack://_N_E/./src/useImageLoader.ts","webpack://_N_E/./src/ColorCanvas.tsx","webpack://_N_E/./src/MetallicCanvas.tsx","webpack://_N_E/./src/MaterialCanvases.tsx","webpack://_N_E/./src/ImageLoaderProvider.tsx","webpack://_N_E/./src/pages/index.tsx","webpack://_N_E/./src/useModelViewer.ts","webpack://_N_E/./vendor/fabric/fabric.js","webpack://_N_E/ignored|/Users/exogen/Projects/t2-model-skinner/vendor/fabric|jsdom","webpack://_N_E/ignored|/Users/exogen/Projects/t2-model-skinner/vendor/fabric|jsdom/lib/jsdom/living/generated/utils","webpack://_N_E/ignored|/Users/exogen/Projects/t2-model-skinner/vendor/fabric|jsdom/lib/jsdom/utils","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import React, { useContext } from \"react\";\nimport { fabric } from \"fabric\";\n\nexport interface CanvasInfo {\n  canvas: fabric.Canvas;\n  notifyChange: () => void;\n  isDrawingMode: boolean;\n  setDrawingMode: (isDrawingMode: boolean) => void;\n  undo: () => void;\n  redo: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n}\n\ninterface CanvasContextValue {\n  canvases: Record<string, CanvasInfo>;\n  registerCanvas: (canvasId: string, canvasInfo: CanvasInfo) => void;\n  unregisterCanvas: (canvasId: string) => void;\n}\n\nconst CanvasContext = React.createContext<CanvasContextValue | null>(null);\nCanvasContext.displayName = \"CanvasContext\";\n\nexport { CanvasContext };\n\nfunction useCanvas(canvasId: string | null): CanvasInfo;\nfunction useCanvas(): CanvasContextValue;\n\nfunction useCanvas(canvasId?: string | null) {\n  const context = useContext(CanvasContext);\n  if (!context) {\n    throw new Error(\"No CanvasContext.Provider\");\n  }\n  if (typeof canvasId === \"undefined\") {\n    return context;\n  } else if (canvasId == null) {\n    return {};\n  } else {\n    return context.canvases[canvasId] ?? {};\n  }\n}\n\nexport default useCanvas;\n","import React, { useContext } from \"react\";\nimport { fabric } from \"fabric\";\n\ninterface ToolsContextValue {\n  activeCanvas: string | null;\n  activeCanvasType: string;\n  setActiveCanvasType: (canvasType: string) => void;\n  selectedObjects: Array<fabric.Object>;\n  brushSize: number;\n  setBrushSize: (brushSize: number) => void;\n  brushColor: number;\n  setBrushColor: (brushColor: number) => void;\n  deleteSelection: () => void;\n  undo: () => void;\n  redo: () => void;\n  canUndo: boolean;\n  canRedo: boolean;\n  addImages: (imageUrls: string[]) => void;\n  duplicate: () => void;\n  sendBackward: () => void;\n  bringForward: () => void;\n  lockSelection: () => void;\n  unlockSelection: () => void;\n  exportSkin: ({\n    name,\n    format,\n  }: {\n    name: string;\n    format: string;\n  }) => Promise<void>;\n  lockedObjects: Set<fabric.Object>;\n  backgroundColor: string;\n  setBackgroundColor: (backgroundColor: string) => void;\n  selectedMaterialIndex: number;\n  setSelectedMaterialIndex: (materialIndex: number) => void;\n  textureSize: [number, number];\n  hasMetallic: boolean;\n}\n\nconst ToolsContext = React.createContext<ToolsContextValue | null>(null);\nToolsContext.displayName = \"ToolsContext\";\n\nexport { ToolsContext };\n\nexport default function useTools() {\n  const context = useContext(ToolsContext);\n  if (!context) {\n    throw new Error(\"No ToolsContext.Provider\");\n  }\n  return context;\n}\n","import { InputHTMLAttributes, useEffect, useRef, useState } from \"react\";\nimport useCanvas from \"./useCanvas\";\nimport useTools from \"./useTools\";\nimport { usePopper } from \"react-popper\";\nimport Slider from \"rc-slider\";\nimport { RiFileCopyFill } from \"react-icons/ri\";\nimport { FaTrashAlt, FaLock, FaUnlock } from \"react-icons/fa\";\nimport { GoArrowUp, GoArrowDown } from \"react-icons/go\";\nimport { GiArrowCursor } from \"react-icons/gi\";\nimport { IoMdBrush } from \"react-icons/io\";\nimport { ImPlus, ImUndo2, ImRedo2 } from \"react-icons/im\";\n\nexport default function CanvasTools() {\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n  const fileTypeRef = useRef<HTMLSelectElement | null>(null);\n  const {\n    activeCanvas,\n    backgroundColor,\n    setBackgroundColor,\n    selectedObjects,\n    lockedObjects,\n    lockSelection,\n    unlockSelection,\n    bringForward,\n    sendBackward,\n    duplicate,\n    deleteSelection,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n    brushColor,\n    setBrushColor,\n    brushSize,\n    setBrushSize,\n    activeCanvasType,\n    addImages,\n    exportSkin,\n  } = useTools();\n  const { isDrawingMode, setDrawingMode } = useCanvas(activeCanvas);\n\n  // Brush popup\n  const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(\n    null\n  );\n  const [popperElement, setPopperElement] = useState<HTMLElement | null>(null);\n  const [arrowElement, setArrowElement] = useState<HTMLElement | null>(null);\n  const [isBrushToolsOpen, setBrushToolsOpen] = useState(false);\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    modifiers: [\n      { name: \"arrow\", options: { element: arrowElement } },\n      {\n        name: \"offset\",\n        options: {\n          offset: [0, 10],\n        },\n      },\n    ],\n  });\n\n  const isSelectionLocked = selectedObjects.length\n    ? selectedObjects.every((object) => lockedObjects.has(object))\n    : false;\n\n  const handleBackgroundColorChange: InputHTMLAttributes<HTMLInputElement>[\"onChange\"] =\n    (event) => {\n      setBackgroundColor(event.target.value);\n    };\n\n  useEffect(() => {\n    if (popperElement) {\n      popperElement.focus();\n    }\n  }, [popperElement]);\n\n  return (\n    <div className=\"CanvasTools\">\n      <div className=\"CanvasBackgroundColor\">\n        <input\n          className=\"ColorSwatch\"\n          type=\"radio\"\n          name=\"backgroundColor\"\n          id=\"canvasBackgroundColorBlack\"\n          value=\"black\"\n          checked={backgroundColor === \"black\"}\n          onChange={handleBackgroundColorChange}\n        />\n        <label htmlFor=\"canvasBackgroundColorBlack\">\n          <span className=\"HiddenLabel\">Black</span>\n        </label>\n        <input\n          className=\"ColorSwatch\"\n          type=\"radio\"\n          name=\"backgroundColor\"\n          id=\"canvasBackgroundColorMagenta\"\n          value=\"magenta\"\n          checked={backgroundColor === \"magenta\"}\n          onChange={handleBackgroundColorChange}\n        />\n        <label htmlFor=\"canvasBackgroundColorMagenta\">\n          <span className=\"HiddenLabel\">Magenta</span>\n        </label>\n        <input\n          className=\"ColorSwatch\"\n          type=\"radio\"\n          name=\"backgroundColor\"\n          id=\"canvasBackgroundColorWhite\"\n          value=\"white\"\n          checked={backgroundColor === \"white\"}\n          onChange={handleBackgroundColorChange}\n        />\n        <label htmlFor=\"canvasBackgroundColorWhite\">\n          <span className=\"HiddenLabel\">White</span>\n        </label>\n      </div>\n      <div className=\"Buttons\">\n        {activeCanvasType === \"color\" ? (\n          <>\n            <input\n              ref={fileInputRef}\n              onChange={async (event) => {\n                const imageUrl = await new Promise<string>(\n                  (resolve, reject) => {\n                    const inputFile = event.target.files?.[0];\n                    if (inputFile) {\n                      const reader = new FileReader();\n                      reader.addEventListener(\"load\", (event) => {\n                        resolve(event.target?.result as string);\n                      });\n                      reader.readAsDataURL(inputFile);\n                    } else {\n                      reject(new Error(\"No input file provided.\"));\n                    }\n                  }\n                );\n                addImages([imageUrl]);\n              }}\n              type=\"file\"\n              accept=\".png, image/png\"\n              hidden\n            />\n            <button\n              type=\"button\"\n              aria-label=\"Add Image\"\n              title=\"Add Image\"\n              onClick={() => {\n                if (fileInputRef.current) {\n                  fileInputRef.current.click();\n                }\n              }}\n            >\n              <ImPlus style={{ fontSize: 14 }} />\n            </button>\n            <button\n              type=\"button\"\n              aria-label={isSelectionLocked ? \"Unlock\" : \"Lock\"}\n              title={isSelectionLocked ? \"Unlock (L)\" : \"Lock (L)\"}\n              onClick={isSelectionLocked ? unlockSelection : lockSelection}\n              data-locked={isSelectionLocked ? \"\" : undefined}\n            >\n              {isSelectionLocked ? (\n                <FaUnlock style={{ fontSize: 14 }} />\n              ) : (\n                <FaLock style={{ fontSize: 14 }} />\n              )}\n            </button>\n            <button\n              type=\"button\"\n              aria-label=\"Bring Forward\"\n              title=\"Bring Forward (F)\"\n              onClick={bringForward}\n            >\n              <GoArrowUp style={{ fontSize: 22 }} />\n            </button>\n            <button\n              type=\"button\"\n              aria-label=\"Send Backward\"\n              title=\"Send Backward (B)\"\n              onClick={sendBackward}\n            >\n              <GoArrowDown style={{ fontSize: 22 }} />\n            </button>\n            <button\n              type=\"button\"\n              aria-label=\"Duplicate\"\n              title=\"Duplicate (D)\"\n              onClick={duplicate}\n            >\n              <RiFileCopyFill />\n            </button>\n            <button\n              type=\"button\"\n              aria-label=\"Delete\"\n              title=\"Delete (Backspace)\"\n              onClick={deleteSelection}\n              disabled={isSelectionLocked}\n            >\n              <FaTrashAlt />\n            </button>\n            <button\n              type=\"button\"\n              aria-label=\"Undo\"\n              title=\"Undo (Ctrl Z)\"\n              onClick={undo}\n              disabled={!canUndo}\n            >\n              <ImUndo2 />\n            </button>\n            <button\n              type=\"button\"\n              aria-label=\"Redo\"\n              title=\"Redo (Ctrl Y)\"\n              onClick={redo}\n              disabled={!canRedo}\n            >\n              <ImRedo2 />\n            </button>\n          </>\n        ) : null}\n\n        {activeCanvasType === \"metallic\" ? (\n          <>\n            <button\n              type=\"button\"\n              data-active={isDrawingMode ? undefined : \"\"}\n              aria-label=\"Select\"\n              title=\"Select (S)\"\n              onClick={() => {\n                setDrawingMode(false);\n              }}\n            >\n              <GiArrowCursor />\n            </button>\n            <button\n              type=\"button\"\n              ref={setReferenceElement}\n              data-active={isDrawingMode ? \"\" : undefined}\n              aria-label=\"Paint\"\n              title=\"Paint (P)\"\n              onClick={() => {\n                setDrawingMode(true);\n                setBrushToolsOpen((isOpen) => !isOpen);\n              }}\n            >\n              <IoMdBrush />\n            </button>\n\n            {isBrushToolsOpen ? (\n              <div\n                className=\"BrushToolsPopup\"\n                ref={setPopperElement}\n                style={styles.popper}\n                tabIndex={-1}\n                onBlur={(event) => {\n                  const newFocusElement = event.relatedTarget;\n                  const isFocusLeaving =\n                    !newFocusElement ||\n                    !event.currentTarget.contains(newFocusElement);\n                  if (isFocusLeaving) {\n                    setBrushToolsOpen(false);\n                  }\n                }}\n                {...attributes.popper}\n              >\n                <div className=\"Fields\">\n                  <div className=\"Field\">\n                    <label>Metallic Amount</label>\n                    <div className=\"SliderContainer\">\n                      <Slider\n                        min={0}\n                        max={255}\n                        trackStyle={{\n                          display: \"none\",\n                        }}\n                        value={brushColor}\n                        onChange={(value) => {\n                          if (Array.isArray(value)) {\n                            value = value[0];\n                          }\n                          setBrushColor(value);\n                        }}\n                        handleStyle={{\n                          width: 20,\n                          height: 20,\n                          marginTop: -6,\n                          borderColor: \"rgb(20, 105, 241)\",\n                          background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                          opacity: 1,\n                        }}\n                        railStyle={{\n                          height: 8,\n                          border: \"1px solid #555\",\n                          background:\n                            \"linear-gradient(to right, black 0%, white 100%)\",\n                        }}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"Field\">\n                    <label>Brush Size</label>\n                    <div className=\"SliderContainer\">\n                      <Slider\n                        min={1}\n                        max={50}\n                        trackStyle={{\n                          height: 8,\n                          background: \"#03fccf\",\n                        }}\n                        value={brushSize}\n                        onChange={(value) => {\n                          if (Array.isArray(value)) {\n                            value = value[0];\n                          }\n                          setBrushSize(value);\n                        }}\n                        handleStyle={{\n                          width: 20,\n                          height: 20,\n                          marginTop: -6,\n                          borderColor: \"#03fccf\",\n                          background: \"rgb(5, 69, 76)\",\n                          // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                          opacity: 1,\n                        }}\n                        railStyle={{\n                          height: 8,\n                          border: \"1px solid #555\",\n                          background: \"rgba(255, 255, 255, 0.3)\",\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div\n                  className=\"PopupArrow\"\n                  ref={setArrowElement}\n                  style={styles.arrow}\n                />\n              </div>\n            ) : null}\n          </>\n        ) : null}\n      </div>\n      <div className=\"Export\">\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          name=\"CustomSkinName\"\n          placeholder=\"Skin Name\"\n          size={12}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            const name = nameInputRef.current ? nameInputRef.current.value : \"\";\n            const format = fileTypeRef.current\n              ? fileTypeRef.current.value\n              : \".png\";\n            exportSkin({ name, format });\n          }}\n        >\n          Export\n        </button>\n        <select ref={fileTypeRef}>\n          <option value=\"png\">.png</option>\n          <option value=\"vl2\">.vl2</option>\n        </select>\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\n\ntype WarriorContextValue = {\n  actualModel: string;\n  selectedModel: string;\n  setSelectedModel: (selectedModel: string) => void;\n  selectedModelType: string;\n  selectedAnimation: string | null;\n  selectedModelUrl: string;\n  setSelectedAnimation: (selectedAnimation: string | null) => void;\n  animationPaused: boolean;\n  setAnimationPaused: (\n    animationPaused: boolean | ((animationPaused: boolean) => boolean)\n  ) => void;\n  skinImageUrls: Record<string, string>;\n  defaultSkinImageUrls: Record<string, string>;\n  setSkinImageUrls: (\n    value:\n      | Record<string, string>\n      | ((prevSkinImageUrls: Record<string, string>) => Record<string, string>)\n  ) => void;\n  selectedSkinType: string | null;\n  setSelectedSkinType: (selectedSkinType: string | null) => void;\n  selectedSkin: string | null;\n  setSelectedSkin: (selectedSkin: string | null) => void;\n  setSelectedModelType: (selectedModelType: string) => void;\n};\n\nconst WarriorContext = React.createContext<WarriorContextValue | null>(null);\nWarriorContext.displayName = \"WarriorContext\";\n\nexport { WarriorContext };\n\nexport default function useWarrior() {\n  const context = useContext(WarriorContext);\n  if (!context) {\n    throw new Error(\"No WarriorContext.Provider\");\n  }\n  return context;\n}\n","import { fabric } from \"fabric\";\n\nexport function createFabricImage(url: string) {\n  return new Promise<fabric.Image>((resolve) =>\n    fabric.Image.fromURL(url, resolve, {\n      crossOrigin: \"anonymous\",\n    })\n  );\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/chunks/imageProcessing.worker-ec557200a46215b3.worker.js\");\n}\n","import { useEffect, useMemo, useRef } from \"react\";\nimport * as Comlink from \"comlink\";\nimport Worker from \"worker-loader!./imageProcessing.worker\";\nimport type { ImageFunctions } from \"./imageProcessing.worker\";\n\nexport default function useImageWorker() {\n  const workerRef = useRef<Worker | null>(null);\n  const functionsRef = useRef<ReturnType<\n    typeof Comlink.wrap<ImageFunctions>\n  > | null>(null);\n\n  const value = useMemo(() => {\n    const getFunctions = () => {\n      return functionsRef.current;\n    };\n    return {\n      async combineColorAndAlphaImageUrls(...args) {\n        const functions = await getFunctions();\n        return functions?.combineColorAndAlphaImageUrls(...args);\n      },\n      async removeAlphaFromArrayBuffer(...args) {\n        const functions = await getFunctions();\n        return functions?.removeAlphaFromArrayBuffer(...args);\n      },\n      async convertArrayBufferAlphaToGrayscale(...args) {\n        const functions = await getFunctions();\n        return functions?.convertArrayBufferAlphaToGrayscale(...args);\n      },\n      async convertGrayscaleImageUrlToMetallicRoughness(...args) {\n        const functions = await getFunctions();\n        return functions?.convertGrayscaleImageUrlToMetallicRoughness(...args);\n      },\n    } as ImageFunctions;\n  }, []);\n\n  useEffect(() => {\n    const worker = new Worker();\n    const functions = Comlink.wrap<ImageFunctions>(worker);\n\n    workerRef.current = worker;\n    functionsRef.current = functions;\n\n    return () => {\n      functions[Comlink.releaseProxy]();\n      worker.terminate();\n    };\n  }, []);\n\n  return value;\n}\n","export default function useSettings() {\n  return {\n    canvasPadding: 64,\n    basePath: process.env.NODE_ENV === \"production\" ? \"/t2-model-skinner\" : \"\",\n  };\n}\n","import { PNG } from \"pngjs/browser\";\nimport getStream from \"get-stream\";\n\nexport function arrayBufferToBase64(arrayBuffer: ArrayBuffer) {\n  let base64 = \"\";\n  const encodings =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  const bytes = new Uint8Array(arrayBuffer);\n  const byteLength = bytes.byteLength;\n  const byteRemainder = byteLength % 3;\n  const mainLength = byteLength - byteRemainder;\n\n  let a, b, c, d;\n  let chunk;\n\n  // Main loop deals with bytes in chunks of 3\n  for (let i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12\n    c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6\n    d = chunk & 63; // 63 = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength];\n\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + \"==\";\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15) << 2; // 15 = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\n  }\n\n  return base64;\n}\n\nexport async function rgbaToArrayBuffer(\n  rgba: Uint8Array,\n  {\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }\n) {\n  const png = new PNG({\n    width,\n    height,\n    inputHasAlpha: true,\n  });\n  png.data = rgba;\n  png.pack();\n  const arrayBuffer = await getStream.buffer(png);\n  return arrayBuffer;\n}\n\nexport function arrayBufferToImageUrl(arrayBuffer: ArrayBuffer) {\n  const base64 = arrayBufferToBase64(arrayBuffer);\n  return `data:image/png;base64,${base64}`;\n}\n\nexport async function imageUrlToArrayBuffer(url: string) {\n  const response = await fetch(url);\n  if (response.ok) {\n    const arrayBuffer = await response.arrayBuffer();\n    return arrayBuffer;\n  } else {\n    throw new Error(`Failed to load image URL: ${url}`);\n  }\n}\n\nexport async function arrayBufferToRgba(arrayBuffer: ArrayBuffer) {\n  const png = await new Promise<PNG>((resolve, reject) =>\n    new PNG().parse(arrayBuffer, (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    })\n  );\n  return { rgba: png.data, width: png.width, height: png.height };\n}\n\nexport async function setGrayscaleFromAlpha(rgba: Uint8Array) {\n  const length = rgba.length;\n  for (let i = 0; i < length; i += 4) {\n    const alpha = rgba[i + 3];\n    rgba[i] = alpha;\n    rgba[i + 1] = alpha;\n    rgba[i + 2] = alpha;\n    rgba[i + 3] = 255;\n  }\n}\n\nexport async function setAlphaFromGrayscale(\n  rgba: Uint8Array,\n  grayscaleRgba: Uint8Array\n) {\n  const length = rgba.length;\n  // Modify image to map white pixels on the metallic canvas\n  // to the alpha channel.\n  for (let i = 0; i < length; i += 4) {\n    rgba[i + 3] = Math.max(1, grayscaleRgba[i]);\n  }\n}\n\nexport async function setAlphaToMax(rgba: Uint8Array) {\n  const length = rgba.length;\n  for (let i = 0; i < length; i += 4) {\n    rgba[i + 3] = 255;\n  }\n}\n\nexport function setMetallicFromGrayscale(rgba: Uint8Array) {\n  const length = rgba.length;\n  for (let i = 0; i < length; i += 4) {\n    const grayscale = rgba[i];\n    // Red meanings nothing, set to 0.\n    rgba[i] = 0;\n    // Green maps to roughness. We want more metallic to be less rough.\n    rgba[i + 1] = grayscale > 0 ? 255 - Math.min(grayscale * 2 + 64, 255) : 255;\n    // Blue and alpha values should already be correct.\n    rgba[i + 2] = grayscale ? Math.min(grayscale * 1 + 64, 255) : 0;\n  }\n}\n\nexport async function imageUrlToRgba(imageUrl: string) {\n  const arrayBuffer = await imageUrlToArrayBuffer(imageUrl);\n  const { rgba, width, height } = await arrayBufferToRgba(arrayBuffer);\n  return { rgba, width, height };\n}\n\ntype ImageSize = {\n  width: number;\n  height: number;\n};\n\nexport async function rgbaToImageUrl(\n  rgba: Uint8Array,\n  { width, height }: ImageSize\n) {\n  const arrayBuffer = await rgbaToArrayBuffer(rgba, {\n    width,\n    height,\n  });\n  const imageUrl = arrayBufferToImageUrl(arrayBuffer);\n  return imageUrl;\n}\n\nexport async function combineColorAndAlphaImageUrls({\n  colorImageUrl,\n  metallicImageUrl,\n}: {\n  colorImageUrl: string;\n  metallicImageUrl: string;\n}) {\n  const [{ rgba, width, height }, { rgba: metallicRgba }] = await Promise.all([\n    imageUrlToRgba(colorImageUrl),\n    imageUrlToRgba(metallicImageUrl),\n  ]);\n  setAlphaFromGrayscale(rgba, metallicRgba);\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\n  return outputImageUrl;\n}\n\nexport async function removeAlphaFromArrayBuffer(arrayBuffer: ArrayBuffer) {\n  const { rgba, width, height } = await arrayBufferToRgba(arrayBuffer);\n  setAlphaToMax(rgba);\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\n  return outputImageUrl;\n}\n\nexport async function convertArrayBufferAlphaToGrayscale(\n  arrayBuffer: ArrayBuffer\n) {\n  const { rgba, width, height } = await arrayBufferToRgba(arrayBuffer);\n  setGrayscaleFromAlpha(rgba);\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\n  return outputImageUrl;\n}\n\nexport async function convertGrayscaleImageUrlToMetallicRoughness(\n  imageUrl: string\n) {\n  const { rgba, width, height } = await imageUrlToRgba(imageUrl);\n  setMetallicFromGrayscale(rgba);\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\n  return outputImageUrl;\n}\n","import { ReactNode, useCallback, useEffect, useMemo, useState } from \"react\";\nimport getConfig from \"next/config\";\nimport { fabric } from \"fabric\";\nimport { ToolsContext } from \"./useTools\";\nimport useCanvas from \"./useCanvas\";\nimport useWarrior from \"./useWarrior\";\nimport { createFabricImage } from \"./fabricUtils\";\nimport useImageWorker from \"./useImageWorker\";\nimport { MaterialDefinition } from \"./Material\";\nimport useSettings from \"./useSettings\";\nimport { imageUrlToArrayBuffer } from \"./imageUtils\";\n\nconst { publicRuntimeConfig } = getConfig();\n\nconst { materials } = publicRuntimeConfig;\n\nfunction lockObject(object: fabric.Object) {\n  object.lockMovementX = true;\n  object.lockMovementY = true;\n  object.lockScalingX = true;\n  object.lockScalingY = true;\n  object.lockRotation = true;\n}\n\nfunction unlockObject(object: fabric.Object) {\n  object.lockMovementX = false;\n  object.lockMovementY = false;\n  object.lockScalingX = false;\n  object.lockScalingY = false;\n  object.lockRotation = false;\n}\n\nfunction isActiveSelection(\n  object: fabric.Object\n): object is fabric.ActiveSelection {\n  return object.type === \"activeSelection\";\n}\n\nexport default function ToolsProvider({ children }: { children: ReactNode }) {\n  const { actualModel, selectedModelType } = useWarrior();\n  const [selectedMaterialIndex, setSelectedMaterialIndex] = useState(0);\n  const materialDefs = materials[actualModel];\n  const materialDef = materialDefs[selectedMaterialIndex] ?? null;\n\n  const textureSize = useMemo(\n    () => materialDef.size ?? [512, 512],\n    [materialDef]\n  );\n\n  const hasMetallic = !(\n    materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1\n  );\n\n  const [activeCanvasType, setActiveCanvasType] = useState(\"color\");\n\n  if (!hasMetallic && activeCanvasType === \"metallic\") {\n    setActiveCanvasType(\"color\");\n  }\n\n  const [backgroundColor, setBackgroundColor] = useState(\"magenta\");\n  const [lockedObjects, setLockedObjects] = useState(\n    () => new Set<fabric.Object>()\n  );\n  const [brushColor, setBrushColor] = useState(200);\n  const [brushSize, setBrushSize] = useState(10);\n  const [selectedObjects, setSelectedObjects] = useState<fabric.Object[]>(\n    () => []\n  );\n\n  const activeCanvas = materialDef\n    ? `${materialDef.name}:${activeCanvasType}`\n    : null;\n  const metallicCanvasId = materialDef ? `${materialDef.name}:metallic` : null;\n  const { canvases } = useCanvas();\n  const { canvas, notifyChange, undo, redo, canUndo, canRedo } =\n    useCanvas(activeCanvas);\n  const { canvas: metallicCanvas } = useCanvas(metallicCanvasId);\n  const [isDrawingMode, setDrawingMode] = useState(false);\n  const { combineColorAndAlphaImageUrls } = useImageWorker();\n  const { canvasPadding } = useSettings();\n\n  const lockSelection = useCallback(() => {\n    if (selectedObjects.length) {\n      setLockedObjects((lockedObjects) => {\n        const newLockedObjects = new Set(lockedObjects);\n        for (const selectedObject of selectedObjects) {\n          newLockedObjects.add(selectedObject);\n          lockObject(selectedObject);\n        }\n        return newLockedObjects;\n      });\n    }\n  }, [selectedObjects]);\n\n  const unlockSelection = useCallback(() => {\n    if (selectedObjects.length) {\n      setLockedObjects((lockedObjects) => {\n        const newLockedObjects = new Set(lockedObjects);\n        for (const selectedObject of selectedObjects) {\n          newLockedObjects.delete(selectedObject);\n          unlockObject(selectedObject);\n        }\n        return newLockedObjects;\n      });\n    }\n  }, [selectedObjects]);\n\n  const bringForward = useCallback(async () => {\n    const object = canvas.getActiveObject();\n    if (object) {\n      canvas.bringForward(object, true);\n      notifyChange();\n    }\n  }, [canvas, notifyChange]);\n\n  const sendBackward = useCallback(async () => {\n    const object = canvas.getActiveObject();\n    if (object) {\n      // Don't allow below base skin.\n      if (canvas._objects[0] === object || canvas._objects[1] === object) {\n        return;\n      }\n      canvas.sendBackwards(object, true);\n      notifyChange();\n    }\n  }, [canvas, notifyChange]);\n\n  const addImages = useCallback(\n    async (imageUrls: string[]) => {\n      let lastAddedImage;\n      for (const imageUrl of imageUrls) {\n        const image = await createFabricImage(imageUrl);\n        if (!image.width || !image.height) {\n          throw new Error(\"Zero-height image\");\n        }\n        const widthRatio = image.width / textureSize[0];\n        const heightRatio = image.height / textureSize[1];\n        if (widthRatio > 1 || heightRatio > 1) {\n          let scale;\n          if (widthRatio > heightRatio) {\n            scale = 1 / widthRatio;\n          } else {\n            scale = 1 / heightRatio;\n          }\n          image.scaleX = scale;\n          image.scaleY = scale;\n        }\n        if (activeCanvasType === \"metallic\") {\n          if (!image.filters) {\n            image.filters = [];\n          }\n          const grayscaleFilter = new fabric.Image.filters.Grayscale();\n          image.filters.push(grayscaleFilter);\n          image.applyFilters();\n        }\n        setDrawingMode(false);\n        canvas.centerObject(image);\n        canvas.add(image);\n        lastAddedImage = image;\n      }\n      if (lastAddedImage) {\n        canvas.setActiveObject(lastAddedImage);\n      }\n    },\n    [canvas, activeCanvasType, textureSize]\n  );\n\n  const duplicate = useCallback(async () => {\n    const object = canvas.getActiveObject();\n    if (object) {\n      const copy = await new Promise<fabric.Object>((resolve) =>\n        object.clone(resolve)\n      );\n      copy.set({\n        top: (copy.top ?? 0) + 20,\n        left: (copy.left ?? 0) + 20,\n        evented: true,\n      });\n\n      if (isActiveSelection(copy)) {\n        copy.canvas = canvas;\n        copy.forEachObject((object) => {\n          canvas.add(object);\n        });\n        copy.setCoords();\n      }\n\n      canvas.discardActiveObject();\n      canvas.add(copy);\n      canvas.setActiveObject(copy);\n    }\n  }, [canvas]);\n\n  const deleteSelection = useCallback(async () => {\n    const objects = canvas.getActiveObjects();\n    canvas.discardActiveObject();\n    canvas.remove(...objects);\n    canvas.requestRenderAll();\n    // forceUpdateRef.current();\n  }, [canvas]);\n\n  const exportSkin = useCallback(\n    async ({ format, name = \"\" }: { format: string; name: string }) => {\n      const { savePngFile, saveZipFile, createZipFile } = await import(\n        \"./exportUtils\"\n      );\n\n      name = name.trim() || \"MyCustomSkin\";\n\n      const materialExports = await Promise.all(\n        materialDefs.map(async (materialDef: MaterialDefinition) => {\n          const colorCanvas = canvases[`${materialDef.name}:color`]?.canvas;\n          const metallicCanvas =\n            canvases[`${materialDef.name}:metallic`]?.canvas;\n\n          const textureSize = materialDef.size ?? [512, 512];\n          let outputImageUrl;\n\n          const colorImageUrl = colorCanvas.toDataURL({\n            top: canvasPadding,\n            left: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1],\n          });\n\n          if (metallicCanvas) {\n            const metallicImageUrl = metallicCanvas.toDataURL({\n              top: canvasPadding,\n              left: canvasPadding,\n              width: textureSize[0],\n              height: textureSize[1],\n            });\n            outputImageUrl = await combineColorAndAlphaImageUrls({\n              colorImageUrl,\n              metallicImageUrl,\n            });\n          } else {\n            outputImageUrl = colorImageUrl;\n          }\n\n          const filename =\n            selectedModelType === \"player\"\n              ? `${name}.${actualModel}.png`\n              : materialDef\n              ? `${materialDef.file ?? materialDef.name}.png`\n              : `weapon_${actualModel}.png`;\n\n          return { imageUrl: outputImageUrl, filename };\n        })\n      );\n\n      switch (format) {\n        case \"png\": {\n          const { imageUrl, filename } = materialExports[selectedMaterialIndex];\n          savePngFile(imageUrl, filename);\n          break;\n        }\n        case \"vl2\": {\n          const files = await Promise.all(\n            materialExports.map(async (materialExport) => ({\n              data: await imageUrlToArrayBuffer(materialExport.imageUrl),\n              name: materialExport.filename,\n            }))\n          );\n          const zip = createZipFile(files);\n          const camelCaseName = actualModel.replace(\n            /(?:^([a-z])|_([a-z]))/g,\n            (match, a, b) => (a || b).toUpperCase()\n          );\n          const zipFileName =\n            selectedModelType === \"player\"\n              ? `zPlayerSkin-${name}.vl2`\n              : `zWeapon${camelCaseName}-${name}.vl2`;\n          await saveZipFile(zip, zipFileName);\n        }\n      }\n      return;\n    },\n    [\n      actualModel,\n      canvasPadding,\n      canvases,\n      combineColorAndAlphaImageUrls,\n      materialDefs,\n      selectedMaterialIndex,\n      selectedModelType,\n    ]\n  );\n\n  const context = useMemo(\n    () => ({\n      activeCanvas,\n      activeCanvasType,\n      setActiveCanvasType,\n      backgroundColor,\n      setBackgroundColor,\n      lockedObjects,\n      setLockedObjects,\n      brushColor,\n      setBrushColor,\n      brushSize,\n      setBrushSize,\n      selectedObjects,\n      lockSelection,\n      unlockSelection,\n      bringForward,\n      sendBackward,\n      addImages,\n      duplicate,\n      deleteSelection,\n      undo,\n      redo,\n      canUndo,\n      canRedo,\n      exportSkin,\n      isDrawingMode,\n      setDrawingMode,\n      selectedMaterialIndex,\n      setSelectedMaterialIndex,\n      textureSize,\n      hasMetallic,\n    }),\n    [\n      activeCanvas,\n      activeCanvasType,\n      backgroundColor,\n      lockedObjects,\n      brushColor,\n      brushSize,\n      selectedObjects,\n      lockSelection,\n      unlockSelection,\n      bringForward,\n      sendBackward,\n      addImages,\n      duplicate,\n      deleteSelection,\n      undo,\n      redo,\n      canUndo,\n      canRedo,\n      exportSkin,\n      isDrawingMode,\n      selectedMaterialIndex,\n      textureSize,\n      hasMetallic,\n    ]\n  );\n\n  useEffect(() => {\n    if (canvas) {\n      const handleSelectionUpdated = () => {\n        setSelectedObjects(canvas.getActiveObjects());\n      };\n      canvas.on(\"selection:cleared\", handleSelectionUpdated);\n      canvas.on(\"selection:updated\", handleSelectionUpdated);\n      canvas.on(\"selection:created\", handleSelectionUpdated);\n\n      return () => {\n        canvas.off(\"selection:cleared\", handleSelectionUpdated);\n        canvas.off(\"selection:updated\", handleSelectionUpdated);\n        canvas.off(\"selection:created\", handleSelectionUpdated);\n      };\n    }\n  }, [canvas]);\n\n  useEffect(() => {\n    if (metallicCanvas) {\n      metallicCanvas.freeDrawingBrush.width = brushSize;\n    }\n  }, [metallicCanvas, brushSize]);\n\n  useEffect(() => {\n    if (metallicCanvas) {\n      metallicCanvas.freeDrawingBrush.color = `rgb(${brushColor}, ${brushColor}, ${brushColor})`;\n    }\n  }, [metallicCanvas, brushColor]);\n\n  return (\n    <ToolsContext.Provider value={context}>{children}</ToolsContext.Provider>\n  );\n}\n","import useTools from \"./useTools\";\nimport useSettings from \"./useSettings\";\n\nexport default function CanvasBackdrop() {\n  const { backgroundColor, textureSize } = useTools();\n  const { canvasPadding } = useSettings();\n\n  return textureSize ? (\n    <div\n      className=\"CanvasBackdrop\"\n      style={{\n        backgroundColor,\n        top: canvasPadding,\n        width: textureSize[0],\n        height: textureSize[1],\n      }}\n    />\n  ) : null;\n}\n","import { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport { CanvasContext, CanvasInfo } from \"./useCanvas\";\n\nexport default function CanvasProvider({ children }: { children: ReactNode }) {\n  const [canvases, setCanvases] = useState<Record<string, CanvasInfo>>({});\n\n  const registerCanvas = useCallback(\n    (canvasId: string, canvasInfo: CanvasInfo) => {\n      setCanvases((canvases) => {\n        return { ...canvases, [canvasId]: canvasInfo };\n      });\n    },\n    []\n  );\n\n  const unregisterCanvas = useCallback((canvasId: string) => {\n    setCanvases((canvases) => {\n      const { [canvasId]: canvas, ...rest } = canvases;\n      return rest;\n    });\n  }, []);\n\n  const context = useMemo(() => {\n    return {\n      canvases,\n      registerCanvas,\n      unregisterCanvas,\n    };\n  }, [canvases, registerCanvas, unregisterCanvas]);\n\n  return (\n    <CanvasContext.Provider value={context}>{children}</CanvasContext.Provider>\n  );\n}\n","import { ReactNode, useRef } from \"react\";\nimport useCanvas from \"./useCanvas\";\nimport useTools from \"./useTools\";\n\nexport default function CanvasInteractions({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  const ref = useRef<HTMLDivElement | null>(null);\n  const {\n    activeCanvas,\n    bringForward,\n    sendBackward,\n    duplicate,\n    deleteSelection,\n    addImages,\n    undo,\n    redo,\n  } = useTools();\n  const { canvas, notifyChange, setDrawingMode } = useCanvas(activeCanvas);\n\n  const nudge = async ({ top = 0, left = 0 } = {}) => {\n    const objects = canvas.getActiveObjects();\n    for (const object of objects) {\n      object.top = (object.top ?? 0) + top;\n      object.left = (object.left ?? 0) + left;\n    }\n    notifyChange();\n  };\n\n  return (\n    <div\n      className=\"CanvasInteractions\"\n      tabIndex={0}\n      ref={ref}\n      onDrop={async (event) => {\n        event.preventDefault();\n        if (ref.current) {\n          ref.current.focus();\n        }\n        const { items } = event.dataTransfer;\n        const images = Array.from(items).filter(\n          (item) => item.kind === \"file\" && item.type.match(/^image\\//)\n        );\n        const imageUrls = await Promise.all(\n          images\n            .map(async (droppedImageFile) => {\n              const file = droppedImageFile.getAsFile();\n              if (!file) {\n                throw new Error(\"Not a file.\");\n              }\n              const reader = new FileReader();\n              const imageUrl = await new Promise<string>((resolve, reject) => {\n                reader.onload = async (event) => {\n                  if (event.target && typeof event.target.result === \"string\") {\n                    resolve(event.target.result);\n                  } else {\n                    reject(new Error(\"Failed to load image data.\"));\n                  }\n                };\n                reader.readAsDataURL(file);\n              });\n              return imageUrl;\n            })\n            .filter(Boolean)\n        );\n\n        await addImages(imageUrls);\n      }}\n      onKeyDown={async (event) => {\n        const target = event.target as HTMLElement;\n        if (target.nodeName === \"INPUT\" || target.nodeName === \"TEXTAREA\") {\n          return;\n        }\n        if (event.ctrlKey || event.metaKey) {\n          switch (event.key) {\n            case \"z\":\n              if (event.altKey) {\n                return;\n              } else if (event.shiftKey) {\n                event.preventDefault();\n                redo();\n                return;\n              } else {\n                event.preventDefault();\n                undo();\n                return;\n              }\n            case \"y\":\n              if (event.altKey || event.shiftKey) {\n                return;\n              } else {\n                event.preventDefault();\n                redo();\n                return;\n              }\n          }\n        }\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n          return;\n        }\n        switch (event.key) {\n          case \"Backspace\":\n          case \"Delete\": {\n            event.preventDefault();\n            await deleteSelection();\n            break;\n          }\n          case \"ArrowLeft\": {\n            event.preventDefault();\n            await nudge({ left: -1 });\n            break;\n          }\n          case \"ArrowRight\": {\n            event.preventDefault();\n            await nudge({ left: 1 });\n            break;\n          }\n          case \"ArrowUp\": {\n            event.preventDefault();\n            await nudge({ top: -1 });\n            break;\n          }\n          case \"ArrowDown\": {\n            event.preventDefault();\n            await nudge({ top: 1 });\n            break;\n          }\n          case \"d\": {\n            event.preventDefault();\n            await duplicate();\n            break;\n          }\n          case \"f\": {\n            event.preventDefault();\n            await bringForward();\n            break;\n          }\n          case \"b\": {\n            event.preventDefault();\n            await sendBackward();\n            break;\n          }\n          case \"p\": {\n            if (activeCanvas === \"metallic\") {\n              event.preventDefault();\n              setDrawingMode(true);\n            }\n            break;\n          }\n          case \"s\":\n            if (activeCanvas === \"color\") {\n              event.preventDefault();\n              setDrawingMode(false);\n            }\n            break;\n        }\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n","import useTools from \"./useTools\";\n\nexport default function CanvasToggle() {\n  const { activeCanvasType, setActiveCanvasType, hasMetallic } = useTools();\n\n  return (\n    <div className=\"CanvasToggle\">\n      <button\n        type=\"button\"\n        data-selected={activeCanvasType === \"color\" ? \"\" : undefined}\n        onClick={() => {\n          setActiveCanvasType(\"color\");\n        }}\n      >\n        Color\n      </button>\n      {hasMetallic ? (\n        <button\n          type=\"button\"\n          data-selected={activeCanvasType === \"metallic\" ? \"\" : undefined}\n          onClick={() => {\n            setActiveCanvasType(\"metallic\");\n          }}\n        >\n          Metallic\n        </button>\n      ) : null}\n    </div>\n  );\n}\n","import getConfig from \"next/config\";\nimport useWarrior from \"./useWarrior\";\nimport { AiTwotoneFolderOpen } from \"react-icons/ai\";\nimport { useRef } from \"react\";\nimport useTools from \"./useTools\";\n\nconst { publicRuntimeConfig } = getConfig();\nconst { defaultSkins, customSkins, modelDefaults, materials } =\n  publicRuntimeConfig;\n\nexport default function WarriorSelector() {\n  const {\n    selectedModel,\n    setSelectedModel,\n    selectedModelType,\n    setSelectedModelType,\n    selectedSkin,\n    setSelectedSkin,\n    setSelectedSkinType,\n    actualModel,\n    setSelectedAnimation,\n    setSkinImageUrls,\n    setAnimationPaused,\n  } = useWarrior();\n  const { selectedMaterialIndex, setSelectedMaterialIndex } = useTools();\n  const materialDefs = materials[actualModel];\n  const materialDef = materialDefs[selectedMaterialIndex];\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n  return (\n    <div className=\"Toolbar\">\n      <div className=\"Field\">\n        <label htmlFor=\"ModelSelect\">Model</label>\n        <select\n          id=\"ModelSelect\"\n          value={selectedModel}\n          onChange={(event) => {\n            const parentNode = event.target.selectedOptions[0]\n              .parentNode as HTMLElement;\n            const newSelectedModel = event.target.value;\n            const { modelType } = parentNode.dataset;\n            if (!modelType) {\n              throw new Error(\"No data-model-type found\");\n            }\n            const newModelHasSkin =\n              defaultSkins[newSelectedModel]?.includes(selectedSkin) ||\n              customSkins[newSelectedModel]?.includes(selectedSkin) ||\n              false;\n            // startTransition(() => {\n            setSelectedAnimation(null);\n            setAnimationPaused(false);\n            setSelectedModelType(modelType);\n            setSelectedModel(newSelectedModel);\n            setSelectedMaterialIndex(0);\n            if (!newModelHasSkin) {\n              setSelectedSkin(modelDefaults[newSelectedModel] ?? null);\n              setSelectedSkinType(\"default\");\n            }\n            // });\n          }}\n        >\n          <optgroup label=\"Players\" data-model-type=\"player\">\n            <option value=\"lmale\">Human Male &bull; Light</option>\n            <option value=\"mmale\">Human Male &bull; Medium</option>\n            <option value=\"hmale\">Human Male &bull; Heavy</option>\n            <option value=\"lfemale\">Human Female &bull; Light</option>\n            <option value=\"mfemale\">Human Female &bull; Medium</option>\n            <option value=\"hfemale\">Human Female &bull; Heavy</option>\n            <option value=\"lbioderm\">Bioderm &bull; Light</option>\n            <option value=\"mbioderm\">Bioderm &bull; Medium</option>\n            <option value=\"hbioderm\">Bioderm &bull; Heavy</option>\n          </optgroup>\n          <optgroup label=\"Weapons\" data-model-type=\"weapon\">\n            <option value=\"disc\">Disc Launcher</option>\n            <option value=\"chaingun\">Chaingun</option>\n            <option value=\"grenade_launcher\">Grenade Launcher</option>\n            <option value=\"sniper\">Laser Rifle</option>\n            {/* <option value=\"plasmathrower\">Plasma Cannon</option> */}\n            <option value=\"energy\">Blaster</option>\n            <option value=\"shocklance\">Shocklance</option>\n            <option value=\"elf\">ELF Projector</option>\n            <option value=\"missile\">Missile Launcher</option>\n            <option value=\"mortar\">Mortar</option>\n            <option value=\"repair\">Repair Pack</option>\n            <option value=\"targeting\">Targeting Laser</option>\n          </optgroup>\n        </select>\n      </div>\n      <div className=\"Field\">\n        <label htmlFor=\"SkinSelect\">Skin</label>\n        <div className=\"Buttons\">\n          <select\n            id=\"SkinSelect\"\n            value={selectedSkin ?? \"\"}\n            onChange={async (event) => {\n              const parentNode = event.target.selectedOptions[0]\n                .parentNode as HTMLElement;\n              const skinType = event.target.value\n                ? parentNode.dataset.skinType ?? null\n                : null;\n              setSelectedSkin(event.target.value || null);\n              setSelectedSkinType(skinType);\n            }}\n          >\n            <option value=\"\">Select a skin…</option>\n            {selectedModelType === \"player\" ? (\n              <>\n                <optgroup label=\"Default Skins\" data-skin-type=\"default\">\n                  {defaultSkins[actualModel]?.map((name: string) => {\n                    return (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    );\n                  })}\n                </optgroup>\n                <optgroup label=\"Custom Skins\" data-skin-type=\"custom\">\n                  {customSkins[actualModel]?.map((name: string) => {\n                    return (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    );\n                  })}\n                </optgroup>\n              </>\n            ) : null}\n            {selectedModelType === \"weapon\" ? (\n              <>\n                {modelDefaults[actualModel] ? (\n                  <optgroup label=\"Default Skins\" data-skin-type=\"default\">\n                    <option value={modelDefaults[actualModel]}>Default</option>\n                  </optgroup>\n                ) : null}\n                {customSkins[actualModel]?.length ? (\n                  <optgroup label=\"Custom Skins\" data-skin-type=\"custom\">\n                    {customSkins[actualModel].map((name: string) => (\n                      <option key={name} value={name}>\n                        {name}\n                      </option>\n                    ))}\n                  </optgroup>\n                ) : null}\n              </>\n            ) : null}\n          </select>\n          <button\n            type=\"button\"\n            aria-label=\"Load Skin\"\n            title=\"Load a Skin\"\n            onClick={() => {\n              if (fileInputRef.current) {\n                fileInputRef.current.click();\n              }\n            }}\n          >\n            <AiTwotoneFolderOpen style={{ fontSize: 18 }} />\n          </button>\n          <input\n            ref={fileInputRef}\n            onChange={async (event) => {\n              const imageUrl = await new Promise<string>((resolve, reject) => {\n                const inputFile = event.target.files?.[0];\n                if (inputFile) {\n                  const reader = new FileReader();\n                  reader.addEventListener(\"load\", (event) => {\n                    resolve(event.target?.result as string);\n                  });\n                  reader.readAsDataURL(inputFile);\n                } else {\n                  reject(new Error(\"No input file provided.\"));\n                }\n              });\n              setSelectedSkin(null);\n              setSkinImageUrls({ [materialDef.name]: imageUrl });\n            }}\n            type=\"file\"\n            accept=\".png, image/png\"\n            hidden\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReactNode, useEffect, useMemo, useState } from \"react\";\nimport getConfig from \"next/config\";\nimport useSettings from \"./useSettings\";\nimport { WarriorContext } from \"./useWarrior\";\nimport type { MaterialDefinition } from \"./Material\";\n\nconst { publicRuntimeConfig } = getConfig();\nconst { materials, modelDefaults } = publicRuntimeConfig;\nconst baseSkinPath = `https://exogen.github.io/t2-skins/skins`;\n\nexport function getSkinImageUrls({\n  basePath,\n  actualModel,\n  selectedModelType,\n  selectedSkin,\n  selectedSkinType,\n}: {\n  basePath: string;\n  actualModel: string;\n  selectedModelType: string;\n  selectedSkin: string | null;\n  selectedSkinType: string | null;\n}): Record<string, string> {\n  const materialDefs = materials[actualModel];\n  switch (selectedModelType) {\n    case \"player\":\n      switch (selectedSkinType) {\n        case \"default\":\n          return {\n            base: `${basePath}/textures/${selectedSkin}.${actualModel}.png`,\n          };\n        case \"custom\":\n          return { base: `${baseSkinPath}/${selectedSkin}.${actualModel}.png` };\n      }\n      break;\n    case \"weapon\":\n      return materialDefs.reduce(\n        (\n          skinImageUrls: Record<string, string>,\n          materialDef: MaterialDefinition\n        ) => {\n          if (materialDef) {\n            switch (selectedSkinType) {\n              case \"default\":\n                if (materialDef.hasDefault !== false) {\n                  skinImageUrls[materialDef.name] = `${basePath}/textures/${\n                    materialDef.file ?? materialDef.name\n                  }.png`;\n                }\n                break;\n              case \"custom\":\n                skinImageUrls[\n                  materialDef.name\n                ] = `${baseSkinPath}/${selectedSkin}/${\n                  materialDef.file ?? materialDef.name\n                }.png`;\n                break;\n            }\n          }\n          return skinImageUrls;\n        },\n        {}\n      );\n  }\n  return {};\n}\n\nfunction getModelUrl(\n  basePath: string,\n  actualModel: string,\n  selectedAnimation: string | null\n) {\n  switch (actualModel) {\n    default:\n      return `${basePath}/${actualModel}${\n        selectedAnimation ? \".anim\" : \"\"\n      }.glb`;\n  }\n}\n\nexport default function WarriorProvider({ children }: { children: ReactNode }) {\n  const [selectedModel, setSelectedModel] = useState<string>(\"lmale\");\n  const [selectedModelType, setSelectedModelType] = useState(\"player\");\n  const [selectedSkin, setSelectedSkin] = useState<string | null>(\n    \"Blood Eagle\"\n  );\n  const [selectedSkinType, setSelectedSkinType] = useState<string | null>(\n    \"default\"\n  );\n  const [selectedAnimation, setSelectedAnimation] = useState<string | null>(\n    null\n  );\n  const [animationPaused, setAnimationPaused] = useState(false);\n  const { basePath } = useSettings();\n  const actualModel = selectedModel === \"hfemale\" ? \"hmale\" : selectedModel;\n  const selectedModelUrl = getModelUrl(\n    basePath,\n    actualModel,\n    selectedAnimation\n  );\n\n  const [skinImageUrls, setSkinImageUrls] = useState<Record<string, string>>(\n    () =>\n      getSkinImageUrls({\n        basePath,\n        actualModel,\n        selectedModelType,\n        selectedSkin,\n        selectedSkinType,\n      })\n  );\n\n  const defaultSkinImageUrls = useMemo(\n    () =>\n      getSkinImageUrls({\n        basePath,\n        actualModel,\n        selectedModelType,\n        selectedSkin: modelDefaults[actualModel],\n        selectedSkinType: \"default\",\n      }),\n    [actualModel, basePath, selectedModelType]\n  );\n\n  const context = useMemo(() => {\n    return {\n      selectedModel,\n      setSelectedModel,\n      selectedModelType,\n      setSelectedModelType,\n      actualModel,\n      selectedModelUrl,\n      animationPaused,\n      setAnimationPaused,\n      selectedSkin,\n      setSelectedSkin,\n      selectedSkinType,\n      setSelectedSkinType,\n      selectedAnimation,\n      setSelectedAnimation,\n      skinImageUrls,\n      setSkinImageUrls,\n      defaultSkinImageUrls,\n    };\n  }, [\n    selectedModel,\n    setSelectedModel,\n    selectedModelType,\n    setSelectedModelType,\n    actualModel,\n    selectedModelUrl,\n    animationPaused,\n    setAnimationPaused,\n    selectedSkin,\n    setSelectedSkin,\n    selectedSkinType,\n    setSelectedSkinType,\n    selectedAnimation,\n    setSelectedAnimation,\n    skinImageUrls,\n    setSkinImageUrls,\n    defaultSkinImageUrls,\n  ]);\n\n  useEffect(() => {\n    if (selectedSkin) {\n      setSkinImageUrls(\n        getSkinImageUrls({\n          basePath,\n          actualModel,\n          selectedModelType,\n          selectedSkin,\n          selectedSkinType,\n        })\n      );\n    }\n  }, [\n    basePath,\n    actualModel,\n    selectedModelType,\n    selectedSkin,\n    selectedSkinType,\n  ]);\n\n  return (\n    <WarriorContext.Provider value={context}>\n      {children}\n    </WarriorContext.Provider>\n  );\n}\n","import React, { useContext } from \"react\";\n\ninterface EnvironmentContextValue {\n  selectedEnvironment: string | null;\n  setSelectedEnvironment: (selectedEnvironment: string | null) => void;\n  environmentImageUrl: string | null;\n}\n\nconst EnvironmentContext = React.createContext<EnvironmentContextValue | null>(\n  null\n);\nEnvironmentContext.displayName = \"EnvironmentContext\";\n\nexport { EnvironmentContext };\n\nexport default function useEnvironment() {\n  const context = useContext(EnvironmentContext);\n  if (!context) {\n    throw new Error(\"No EnvironmentContext.Provider\");\n  }\n  return context;\n}\n","import React, { useContext } from \"react\";\n\nexport type SkinImages = {\n  colorImageUrl?: string;\n  metallicImageUrl?: string;\n};\n\nexport type MaterialSkins = Record<string, SkinImages>;\n\ninterface SkinContextValue {\n  materialSkins: MaterialSkins;\n  getSkinImages: (materialName: string) => SkinImages;\n  setSkinImages: (materialName: string, skinImages: SkinImages) => void;\n  getColorImageUrl: (materialName: string) => string | undefined;\n  setColorImageUrl: (materialName: string, colorImageUrl: string) => void;\n  getMetallicImageUrl: (materialName: string) => string | undefined;\n  setMetallicImageUrl: (materialName: string, colorImageUrl: string) => void;\n}\n\nconst SkinContext = React.createContext<SkinContextValue | null>(null);\nSkinContext.displayName = \"SkinContext\";\n\nexport { SkinContext };\n\nexport default function useSkin() {\n  const context = useContext(SkinContext);\n  if (!context) {\n    throw new Error(\"No SkinContext.Provider\");\n  }\n  return context;\n}\n","import { useEffect } from \"react\";\nimport type { ModelViewerElement } from \"@google/model-viewer\";\nimport useSettings from \"./useSettings\";\nimport useSkin from \"./useSkin\";\nimport useModelViewer from \"./useModelViewer\";\n\n// const secondaryMaterialTextures: Record<string, string[]> = {\n//   disc: [\"textures/discshield2\"],\n// };\n\nexport type ModelMaterial = NonNullable<\n  ModelViewerElement[\"model\"]\n>[\"materials\"][number];\n\nexport type MaterialDefinition = {\n  index?: number;\n  name: string;\n  label?: string;\n  file?: string;\n  hasDefault?: boolean;\n  size?: [number, number];\n  hidden?: boolean;\n  alphaMode?: \"BLEND\" | \"MASK\" | \"OPAQUE\";\n  alphaCutoff?: number;\n  baseColorFactor?: [number, number, number, number];\n  emissiveFactor?: [number, number, number];\n  emissiveTexture?: boolean;\n  metallicFactor?: number;\n  roughnessFactor?: number;\n};\n\nfunction useTexture({\n  material,\n  materialDef,\n  textureType,\n  imageUrl,\n}: {\n  material: ModelMaterial;\n  materialDef?: MaterialDefinition;\n  textureType: \"baseColorTexture\" | \"metallicRoughnessTexture\";\n  imageUrl?: string;\n}) {\n  const { modelViewer } = useModelViewer();\n  const { basePath } = useSettings();\n\n  useEffect(() => {\n    let stale = false;\n\n    const updateTexture = async () => {\n      if (!materialDef || materialDef.hidden) {\n        if (textureType === \"metallicRoughnessTexture\") {\n          return;\n        } else {\n          material.setAlphaMode(\"BLEND\");\n          material.pbrMetallicRoughness.setBaseColorFactor([0, 0, 0, 0]);\n        }\n      } else {\n        const {\n          alphaMode,\n          alphaCutoff,\n          baseColorFactor,\n          emissiveFactor,\n          emissiveTexture = false,\n          metallicFactor = 1,\n          roughnessFactor = 1,\n        } = materialDef;\n        let textureUrl = imageUrl ?? `${basePath}/white.png`;\n        switch (textureType) {\n          case \"baseColorTexture\":\n            if (baseColorFactor) {\n              material.pbrMetallicRoughness.setBaseColorFactor(baseColorFactor);\n            }\n            if (alphaMode) {\n              material.setAlphaMode(alphaMode);\n            }\n            if (alphaCutoff) {\n              material.setAlphaCutoff(alphaCutoff);\n            }\n            if (emissiveFactor) {\n              material.setEmissiveFactor(emissiveFactor);\n            }\n            break;\n          case \"metallicRoughnessTexture\":\n            material.pbrMetallicRoughness.setMetallicFactor(metallicFactor);\n            material.pbrMetallicRoughness.setRoughnessFactor(roughnessFactor);\n            if (metallicFactor === 0 && roughnessFactor === 1) {\n              textureUrl = `${basePath}/green.png`;\n            }\n        }\n        const texture = await modelViewer.createTexture(textureUrl);\n        if (!stale) {\n          material.pbrMetallicRoughness[textureType].setTexture(texture);\n          if (textureType === \"baseColorTexture\" && emissiveTexture) {\n            material.emissiveTexture.setTexture(texture);\n          }\n        }\n      }\n    };\n\n    updateTexture();\n\n    return () => {\n      stale = true;\n    };\n  }, [basePath, modelViewer, material, materialDef, textureType, imageUrl]);\n}\n\ninterface MaterialProps {\n  material: ModelMaterial;\n  materialDef?: MaterialDefinition;\n}\n\nexport default function Material({ material, materialDef }: MaterialProps) {\n  const { getSkinImages } = useSkin();\n  const { colorImageUrl, metallicImageUrl } =\n    getSkinImages(material.name) ?? {};\n\n  useTexture({\n    material,\n    materialDef,\n    textureType: \"baseColorTexture\",\n    imageUrl: colorImageUrl,\n  });\n  useTexture({\n    material,\n    materialDef,\n    textureType: \"metallicRoughnessTexture\",\n    imageUrl: metallicImageUrl,\n  });\n\n  return null;\n}\n","import getConfig from \"next/config\";\nimport Material, { MaterialDefinition } from \"./Material\";\nimport useModelViewer from \"./useModelViewer\";\nimport useWarrior from \"./useWarrior\";\n\nconst { publicRuntimeConfig } = getConfig();\n\nconst { materials } = publicRuntimeConfig;\n\nexport default function Materials() {\n  const { actualModel } = useWarrior();\n  const { model } = useModelViewer();\n  const materialDefs: MaterialDefinition[] = materials[actualModel];\n\n  return (\n    <>\n      {model.materials.map((material, i) => {\n        const materialDef =\n          materialDefs.find((materialDef) => materialDef.index === i) ??\n          materialDefs[i];\n        return (\n          <Material\n            key={material.name}\n            material={material}\n            materialDef={materialDef}\n          />\n        );\n      })}\n    </>\n  );\n}\n","import dynamic from \"next/dynamic\";\nimport getConfig from \"next/config\";\nimport useEnvironment from \"./useEnvironment\";\nimport useWarrior from \"./useWarrior\";\nimport Materials from \"./Materials\";\n\nconst ModelViewer = dynamic(() => import(\"./ModelViewer\"), { ssr: false });\n\nconst { publicRuntimeConfig } = getConfig();\n\nconst { cameraOverrides } = publicRuntimeConfig;\n\nexport default function WarriorViewer() {\n  const {\n    selectedModel,\n    selectedModelUrl,\n    selectedModelType,\n    selectedAnimation,\n    animationPaused,\n  } = useWarrior();\n  const { environmentImageUrl } = useEnvironment();\n\n  return (\n    <ModelViewer\n      modelUrl={selectedModelUrl}\n      environmentImageUrl={environmentImageUrl}\n      animationName={selectedAnimation}\n      animationPaused={animationPaused}\n      cameraOrbit={\n        selectedModelType === \"weapon\" ? \"315deg 70deg 105%\" : undefined\n      }\n      cameraTarget={cameraOverrides[selectedModel]?.target}\n      fieldOfView={cameraOverrides[selectedModel]?.fov}\n    >\n      <Materials />\n    </ModelViewer>\n  );\n}\n","import useEnvironment from \"./useEnvironment\";\n\nexport default function EnvironmentSelector() {\n  const { selectedEnvironment, setSelectedEnvironment } = useEnvironment();\n\n  return (\n    <>\n      <label htmlFor=\"EnvMapSelect\">Environment</label>\n      <select\n        id=\"EnvMapSelect\"\n        value={selectedEnvironment ?? \"\"}\n        onChange={(event) => {\n          setSelectedEnvironment(event.target.value || null);\n        }}\n      >\n        <option value=\"\">Default</option>\n        <option value=\"clarens_night_02_1k.hdr\">Clarens Night</option>\n        <option value=\"dry_cracked_lake_1k.hdr\">Dry Cracked Lake</option>\n        <option value=\"fouriesburg_mountain_midday_1k.hdr\">\n          Fouriesburg Mountain\n        </option>\n        <option value=\"goegap_1k.hdr\">Goegap</option>\n        <option value=\"hilly_terrain_01_1k.hdr\">Hilly Terrain</option>\n        <option value=\"kloofendal_48d_partly_cloudy_puresky_1k.hdr\">\n          Kloofendal Partly Cloudy\n        </option>\n        <option value=\"kloppenheim_06_puresky_1k.hdr\">Kloppenheim</option>\n        <option value=\"lilienstein_1k.hdr\">Lilienstein</option>\n        <option value=\"spruit_sunrise_1k_HDR.hdr\">Spruit Sunrise</option>\n        <option value=\"umhlanga_sunrise_1k.hdr\">Umhlanga Sunrise</option>\n      </select>\n    </>\n  );\n}\n","import { useMemo } from \"react\";\nimport getConfig from \"next/config\";\nimport { IoMdPlay, IoMdPause } from \"react-icons/io\";\nimport useWarrior from \"./useWarrior\";\n\nconst { publicRuntimeConfig } = getConfig();\nconst { animations, animationLabels, animationLabelOverrides } =\n  publicRuntimeConfig;\n\nexport default function AnimationSelector() {\n  const {\n    actualModel,\n    selectedModelType,\n    selectedAnimation,\n    setSelectedAnimation,\n    animationPaused,\n    setAnimationPaused,\n  } = useWarrior();\n\n  const animationList = useMemo(\n    () => [\n      ...(selectedModelType === \"player\" ? animations.global : []),\n      ...(animations[actualModel] ?? []),\n    ],\n    [actualModel, selectedModelType]\n  );\n\n  return (\n    <>\n      <label>Animation</label>\n      <div className=\"Buttons\">\n        <select\n          value={selectedAnimation ?? \"\"}\n          onChange={(event) => {\n            setSelectedAnimation(event.target.value || null);\n            setAnimationPaused(false);\n          }}\n        >\n          <option value=\"\">None</option>\n          {animationList.map((animationName) => {\n            const label =\n              animationLabelOverrides[actualModel]?.[animationName] ??\n              animationLabels[animationName];\n            return (\n              <option key={animationName} value={animationName}>\n                {label ?? animationName}\n              </option>\n            );\n          })}\n        </select>\n        <button\n          type=\"button\"\n          disabled={!selectedAnimation}\n          onClick={() => {\n            setAnimationPaused((animationPaused) => !animationPaused);\n          }}\n        >\n          {animationPaused || !selectedAnimation ? <IoMdPlay /> : <IoMdPause />}\n        </button>\n      </div>\n    </>\n  );\n}\n","import { ReactNode, useMemo, useState } from \"react\";\nimport { EnvironmentContext } from \"./useEnvironment\";\nimport useSettings from \"./useSettings\";\n\nexport default function EnvironmentProvider({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  const [selectedEnvironment, setSelectedEnvironment] = useState<string | null>(\n    null\n  );\n  const { basePath } = useSettings();\n\n  const context = useMemo(() => {\n    const environmentImageUrl = selectedEnvironment\n      ? `${basePath}/${selectedEnvironment}`\n      : null;\n    return {\n      selectedEnvironment,\n      setSelectedEnvironment,\n      environmentImageUrl,\n    };\n  }, [basePath, selectedEnvironment, setSelectedEnvironment]);\n\n  return (\n    <EnvironmentContext.Provider value={context}>\n      {children}\n    </EnvironmentContext.Provider>\n  );\n}\n","import { ReactNode, useMemo, useState } from \"react\";\nimport { SkinContext, MaterialSkins, SkinImages } from \"./useSkin\";\n\nexport default function SkinProvider({ children }: { children: ReactNode }) {\n  const [materialSkins, setMaterialSkins] = useState<MaterialSkins>({});\n\n  const setters = useMemo(\n    () => ({\n      setSkinImages(materialName: string, skinImages: SkinImages) {\n        setMaterialSkins((materialSkins) => {\n          return {\n            ...materialSkins,\n            [materialName]: skinImages,\n          };\n        });\n      },\n      setColorImageUrl(materialName: string, colorImageUrl: string) {\n        setMaterialSkins((materialSkins) => {\n          return {\n            ...materialSkins,\n            [materialName]: {\n              ...materialSkins[materialName],\n              colorImageUrl,\n            },\n          };\n        });\n      },\n      setMetallicImageUrl(materialName: string, metallicImageUrl: string) {\n        setMaterialSkins((materialSkins) => {\n          return {\n            ...materialSkins,\n            [materialName]: {\n              ...materialSkins[materialName],\n              metallicImageUrl,\n            },\n          };\n        });\n      },\n    }),\n    []\n  );\n\n  const context = useMemo(() => {\n    return {\n      materialSkins,\n      getSkinImages(materialName: string) {\n        return materialSkins[materialName];\n      },\n      getColorImageUrl(materialName: string) {\n        return materialSkins[materialName].colorImageUrl;\n      },\n      getMetallicImageUrl(materialName: string) {\n        return materialSkins[materialName].metallicImageUrl;\n      },\n      ...setters,\n    };\n  }, [materialSkins, setters]);\n\n  return (\n    <SkinContext.Provider value={context}>{children}</SkinContext.Provider>\n  );\n}\n","import getConfig from \"next/config\";\nimport useTools from \"./useTools\";\nimport useWarrior from \"./useWarrior\";\nimport { MaterialDefinition } from \"./Material\";\n\nconst { publicRuntimeConfig } = getConfig();\n\nconst { materials } = publicRuntimeConfig;\n\nexport default function MaterialSelector() {\n  const { actualModel } = useWarrior();\n  const { selectedMaterialIndex, setSelectedMaterialIndex } = useTools();\n  const materialDefs: MaterialDefinition[] = materials[actualModel];\n\n  return (\n    <select\n      value={selectedMaterialIndex}\n      onChange={(event) => {\n        setSelectedMaterialIndex(parseInt(event.target.value, 10));\n      }}\n    >\n      {materialDefs.map((materialDef, i) =>\n        materialDef ? (\n          <option key={materialDef.name} value={i}>\n            {materialDef.label ?? materialDef.name}\n          </option>\n        ) : null\n      )}\n    </select>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport useCanvas from \"./useCanvas\";\nimport useSettings from \"./useSettings\";\nimport useTools from \"./useTools\";\nimport { fabric } from \"fabric\";\nimport { createFabricImage } from \"./fabricUtils\";\n\ntype JSONSnapshot = ReturnType<typeof Canvas.prototype[\"toJSON\"]>;\n\nfunction updateObjectControlOptions() {\n  fabric.Object.prototype.set({\n    transparentCorners: false,\n    borderColor: \"#8afff1\",\n    cornerSize: 9,\n    cornerStyle: \"circle\",\n    cornerColor: \"#8afff1\",\n    cornerStrokeColor: \"#1c9f7c\",\n    strokeWidth: 10,\n    perPixelTargetFind: true,\n  });\n}\n\nexport interface CanvasProps {\n  canvasId: string;\n  canvasType: \"color\" | \"metallic\";\n  onChange: (canvas: fabric.Canvas) => void;\n  baseImageUrl: string | null;\n  textureSize: [number, number];\n  defaultDrawingMode?: boolean;\n}\n\nexport default function Canvas({\n  canvasId,\n  onChange,\n  baseImageUrl,\n  textureSize,\n  defaultDrawingMode = false,\n}: CanvasProps) {\n  const canvasElementRef = useRef<HTMLCanvasElement | null>(null);\n  const [canvas, setCanvas] = useState<fabric.Canvas | null>(null);\n  const { activeCanvas } = useTools();\n  const { canvasPadding } = useSettings();\n  const { registerCanvas, unregisterCanvas } = useCanvas();\n  const [isDrawingMode, setDrawingMode] = useState(defaultDrawingMode);\n  const handleChangeRef = useRef<CanvasProps[\"onChange\"]>();\n  const trackChanges = useRef(true);\n  const [undoHistory, setUndoHistory] = useState<JSONSnapshot[]>(() => []);\n  const [redoHistory, setRedoHistory] = useState<JSONSnapshot[]>(() => []);\n\n  const canUndo = undoHistory.length > 1;\n  const canRedo = redoHistory.length > 0;\n\n  const handleChange: CanvasProps[\"onChange\"] = useCallback((canvas) => {\n    const handleChange = handleChangeRef.current;\n    if (handleChange) {\n      handleChange(canvas);\n    }\n  }, []);\n\n  const undo = useCallback(async () => {\n    if (!canvas) {\n      return;\n    }\n    if (undoHistory.length > 1) {\n      const [restoreState, currentState] = undoHistory.slice(-2);\n      trackChanges.current = false;\n      canvas.renderOnAddRemove = false;\n      canvas.clear();\n      canvas.loadFromJSON(restoreState, () => {\n        canvas.renderAll();\n        trackChanges.current = true;\n        canvas.renderOnAddRemove = true;\n      });\n      setUndoHistory((undoHistory) => undoHistory.slice(0, -1));\n      setRedoHistory((redoHistory) => [currentState, ...redoHistory]);\n    }\n  }, [canvas, undoHistory]);\n\n  useEffect(() => {\n    console.log(\"undo:\", undoHistory);\n    console.log(\"redo:\", redoHistory);\n  }, [undoHistory, redoHistory]);\n\n  const redo = useCallback(() => {\n    if (!canvas) {\n      return;\n    }\n    if (redoHistory.length > 0) {\n      const nextState = redoHistory[0];\n      trackChanges.current = false;\n      canvas.renderOnAddRemove = false;\n      canvas.clear();\n      canvas.loadFromJSON(nextState, () => {\n        canvas.renderAll();\n        trackChanges.current = true;\n        canvas.renderOnAddRemove = true;\n      });\n      setUndoHistory((undoHistory) => [...undoHistory, nextState]);\n      setRedoHistory((redoHistory) => redoHistory.slice(1));\n    }\n  }, [canvas, redoHistory]);\n\n  useEffect(() => {\n    handleChangeRef.current = onChange;\n  }, [onChange]);\n\n  const isActive = activeCanvas === canvasId;\n\n  useEffect(() => {\n    const options = {\n      preserveObjectStacking: true,\n      targetFindTolerance: 2,\n    };\n    updateObjectControlOptions();\n\n    const canvas = new fabric.Canvas(canvasElementRef.current, options);\n\n    let isSnapshotting = false;\n    let changeTimer: ReturnType<typeof setTimeout>;\n\n    const handleChangeWithCanvasArg = () => {\n      handleChange(canvas);\n    };\n\n    const handleRender = () => {\n      if (isSnapshotting) {\n        return;\n      }\n      if (!trackChanges.current) {\n        return;\n      }\n      clearTimeout(changeTimer);\n      changeTimer = setTimeout(() => {\n        const snapshot = snapshotCanvas();\n        setUndoHistory((history) => [...history.slice(-2), snapshot]);\n        setRedoHistory([]);\n      }, 150);\n    };\n\n    const snapshotCanvas = () => {\n      isSnapshotting = true;\n      const snapshot = canvas.toJSON();\n      isSnapshotting = false;\n      return snapshot;\n    };\n\n    canvas.on(\"object:modified\", handleChangeWithCanvasArg);\n    canvas.on(\"object:added\", handleChangeWithCanvasArg);\n    canvas.on(\"object:removed\", handleChangeWithCanvasArg);\n    canvas.on(\"after:render\", handleRender);\n\n    setCanvas(canvas);\n\n    return () => {\n      clearTimeout(changeTimer);\n      setCanvas(null);\n      canvas.dispose();\n    };\n  }, [handleChange]);\n\n  useEffect(() => {\n    if (canvas) {\n      canvas.isDrawingMode = isDrawingMode;\n    }\n  }, [canvas, isDrawingMode]);\n\n  useEffect(() => {\n    if (canvas && isActive) {\n      canvas.calcOffset();\n    }\n  }, [canvas, isActive]);\n\n  useEffect(() => {\n    if (canvas) {\n      registerCanvas(canvasId, {\n        canvas,\n        notifyChange: () => {\n          canvas.renderAll();\n          handleChange(canvas);\n        },\n        undo,\n        redo,\n        canUndo,\n        canRedo,\n        isDrawingMode,\n        setDrawingMode,\n      });\n      return () => {\n        unregisterCanvas(canvasId);\n      };\n    }\n  }, [\n    canvas,\n    registerCanvas,\n    unregisterCanvas,\n    canvasId,\n    handleChange,\n    isDrawingMode,\n    setDrawingMode,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n  ]);\n\n  useEffect(() => {\n    if (canvas && textureSize) {\n      trackChanges.current = false;\n      canvas.clear();\n      if (baseImageUrl) {\n        let stale = false;\n        const addImage = async () => {\n          const image = await createFabricImage(baseImageUrl);\n          if (!stale) {\n            if (!image.width || !image.height) {\n              throw new Error(\"Zero-height image\");\n            }\n            image.selectable = false;\n            image.lockMovementX = true;\n            image.lockMovementY = true;\n            image.lockScalingX = true;\n            image.lockScalingY = true;\n            image.lockRotation = true;\n            image.hoverCursor = \"default\";\n            image.moveCursor = \"default\";\n            const [expectedWidth, expectedHeight] = textureSize;\n            const scaleX =\n              image.width === expectedWidth ? 1 : expectedWidth / image.width;\n            const scaleY =\n              image.height === expectedHeight\n                ? 1\n                : expectedHeight / image.height;\n            if (scaleX !== 1 || scaleY !== 1) {\n              image.scaleX = scaleX;\n              image.scaleY = scaleY;\n            }\n            canvas.centerObject(image);\n            canvas.add(image);\n          }\n          trackChanges.current = true;\n          canvas.requestRenderAll();\n        };\n\n        addImage();\n\n        return () => {\n          stale = true;\n        };\n      }\n    }\n  }, [canvas, baseImageUrl, textureSize]);\n\n  return (\n    <div className=\"CanvasContainer\" data-active={isActive ? \"true\" : \"false\"}>\n      <canvas\n        width={textureSize[0] + canvasPadding * 2}\n        height={textureSize[1] + canvasPadding * 2}\n        ref={canvasElementRef}\n      />\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\n\ninterface ImageLoaderContextValue {\n  loadImage: (url: string) => Promise<ArrayBuffer>;\n}\n\nexport const ImageLoaderContext =\n  React.createContext<ImageLoaderContextValue | null>(null);\nImageLoaderContext.displayName = \"ImageLoaderContext\";\n\nexport default function useImageLoader() {\n  const context = useContext(ImageLoaderContext);\n  if (!context) {\n    throw new Error(\"ImageLoaderContext.Provider not found!\");\n  }\n  return context;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Canvas, { CanvasProps } from \"./Canvas\";\nimport useSettings from \"./useSettings\";\nimport useSkin from \"./useSkin\";\nimport type { MaterialDefinition } from \"./Material\";\nimport useWarrior from \"./useWarrior\";\nimport useImageWorker from \"./useImageWorker\";\nimport useImageLoader from \"./useImageLoader\";\n\nconst defaultTextureSize = [512, 512] as [number, number];\n\nexport default function ColorCanvas({\n  materialDef,\n}: {\n  materialDef: MaterialDefinition;\n}) {\n  const { skinImageUrls, defaultSkinImageUrls } = useWarrior();\n  const skinImageUrl = skinImageUrls[materialDef.name];\n  const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\n  const { setColorImageUrl } = useSkin();\n  const { canvasPadding } = useSettings();\n  const [noAlphaImageUrl, setNoAlphaImageUrl] = useState<string | null>(null);\n  const { removeAlphaFromArrayBuffer } = useImageWorker();\n  const { loadImage } = useImageLoader();\n\n  const textureSize = useMemo(\n    () => materialDef.size ?? defaultTextureSize,\n    [materialDef]\n  );\n\n  const handleChange = useCallback<CanvasProps[\"onChange\"]>(\n    async (canvas) => {\n      const imageUrl = canvas.toDataURL({\n        top: canvasPadding,\n        left: canvasPadding,\n        width: textureSize[0],\n        height: textureSize[1],\n      });\n      setColorImageUrl(materialDef.name, imageUrl);\n    },\n    [textureSize, canvasPadding, setColorImageUrl, materialDef]\n  );\n\n  useEffect(() => {\n    if (skinImageUrl) {\n      let stale = false;\n\n      const generateImageUrl = async () => {\n        let arrayBuffer;\n        try {\n          arrayBuffer = await loadImage(skinImageUrl);\n        } catch (err) {\n          if (materialDef.hasDefault !== false) {\n            arrayBuffer = await loadImage(defaultSkinImageUrl);\n          } else {\n            return;\n          }\n        }\n        const outputImageUrl = await removeAlphaFromArrayBuffer(arrayBuffer);\n        if (!stale) {\n          setNoAlphaImageUrl(outputImageUrl);\n        }\n      };\n\n      generateImageUrl();\n\n      return () => {\n        stale = true;\n      };\n    } else {\n      setNoAlphaImageUrl(null);\n    }\n  }, [\n    materialDef,\n    skinImageUrl,\n    defaultSkinImageUrl,\n    removeAlphaFromArrayBuffer,\n    loadImage,\n  ]);\n\n  const canvasId = `${materialDef.name}:color`;\n\n  return textureSize ? (\n    <Canvas\n      key={canvasId}\n      canvasId={canvasId}\n      canvasType=\"color\"\n      onChange={handleChange}\n      baseImageUrl={noAlphaImageUrl}\n      textureSize={textureSize}\n    />\n  ) : null;\n}\n","import { useCallback, useEffect, useRef, useMemo, useState } from \"react\";\nimport Canvas, { CanvasProps } from \"./Canvas\";\nimport useImageWorker from \"./useImageWorker\";\nimport useSettings from \"./useSettings\";\nimport type { MaterialDefinition } from \"./Material\";\nimport useSkin from \"./useSkin\";\nimport useWarrior from \"./useWarrior\";\nimport useImageLoader from \"./useImageLoader\";\n\nconst defaultTextureSize = [512, 512] as [number, number];\n\nexport default function MetallicCanvas({\n  materialDef,\n}: {\n  materialDef: MaterialDefinition;\n}) {\n  const { skinImageUrls, defaultSkinImageUrls } = useWarrior();\n  const skinImageUrl = skinImageUrls[materialDef.name];\n  const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\n  const { setMetallicImageUrl } = useSkin();\n  const { canvasPadding } = useSettings();\n  const [alphaImageUrl, setAlphaImageUrl] = useState<string | null>(null);\n  const runningChangeHandlers = useRef(0);\n  const {\n    convertGrayscaleImageUrlToMetallicRoughness,\n    convertArrayBufferAlphaToGrayscale,\n  } = useImageWorker();\n  const { loadImage } = useImageLoader();\n\n  const textureSize = useMemo(\n    () => materialDef.size ?? defaultTextureSize,\n    [materialDef]\n  );\n\n  const handleChange = useCallback<CanvasProps[\"onChange\"]>(\n    async (canvas) => {\n      runningChangeHandlers.current += 1;\n      const imageUrl = canvas.toDataURL({\n        top: canvasPadding,\n        left: canvasPadding,\n        width: textureSize[0],\n        height: textureSize[1],\n      });\n      let outputImageUrl;\n      try {\n        outputImageUrl = await convertGrayscaleImageUrlToMetallicRoughness(\n          imageUrl\n        );\n      } finally {\n        runningChangeHandlers.current -= 1;\n      }\n      if (runningChangeHandlers.current === 0) {\n        setMetallicImageUrl(materialDef.name, outputImageUrl);\n      }\n    },\n    [\n      textureSize,\n      canvasPadding,\n      setMetallicImageUrl,\n      convertGrayscaleImageUrlToMetallicRoughness,\n      materialDef,\n    ]\n  );\n\n  useEffect(() => {\n    if (skinImageUrl) {\n      let stale = false;\n\n      const generateImageUrl = async () => {\n        let arrayBuffer;\n        try {\n          arrayBuffer = await loadImage(skinImageUrl);\n        } catch (err) {\n          if (materialDef.hasDefault !== false) {\n            arrayBuffer = await loadImage(defaultSkinImageUrl);\n          } else {\n            return;\n          }\n        }\n        const outputImageUrl = await convertArrayBufferAlphaToGrayscale(\n          arrayBuffer\n        );\n        if (!stale) {\n          setAlphaImageUrl(outputImageUrl);\n        }\n      };\n\n      generateImageUrl();\n\n      return () => {\n        stale = true;\n      };\n    } else {\n      setAlphaImageUrl(null);\n    }\n  }, [\n    materialDef,\n    skinImageUrl,\n    defaultSkinImageUrl,\n    textureSize,\n    convertArrayBufferAlphaToGrayscale,\n    loadImage,\n  ]);\n\n  const canvasId = `${materialDef.name}:metallic`;\n\n  return textureSize ? (\n    <Canvas\n      key={canvasId}\n      canvasId={canvasId}\n      canvasType=\"metallic\"\n      onChange={handleChange}\n      baseImageUrl={alphaImageUrl}\n      textureSize={textureSize}\n      defaultDrawingMode\n    />\n  ) : null;\n}\n","import React from \"react\";\nimport getConfig from \"next/config\";\nimport ColorCanvas from \"./ColorCanvas\";\nimport MetallicCanvas from \"./MetallicCanvas\";\nimport useWarrior from \"./useWarrior\";\nimport { MaterialDefinition } from \"./Material\";\n\nconst { publicRuntimeConfig } = getConfig();\n\nconst { materials } = publicRuntimeConfig;\n\nexport default function MaterialCanvases() {\n  const { actualModel } = useWarrior();\n  const materialDefs: MaterialDefinition[] = materials[actualModel];\n\n  return (\n    <>\n      {materialDefs.map((materialDef) => {\n        if (!materialDef) {\n          return null;\n        }\n        const hasMetallic = !(\n          materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1\n        );\n        return (\n          <React.Fragment key={`${actualModel}-${materialDef.name}`}>\n            <ColorCanvas materialDef={materialDef} />\n            {hasMetallic ? <MetallicCanvas materialDef={materialDef} /> : null}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","import { useQueryClient } from \"@tanstack/react-query\";\nimport { ReactNode, useMemo } from \"react\";\nimport { ImageLoaderContext } from \"./useImageLoader\";\nimport { imageUrlToArrayBuffer } from \"./imageUtils\";\n\nexport default function ImageLoaderProvider({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  const queryClient = useQueryClient();\n  const context = useMemo(() => {\n    return {\n      async loadImage(imageUrl: string) {\n        if (imageUrl.startsWith(\"data:\")) {\n          return imageUrlToArrayBuffer(imageUrl);\n        } else {\n          const arrayBuffer = await queryClient.fetchQuery<ArrayBuffer>({\n            queryKey: [imageUrl],\n          });\n          return arrayBuffer;\n        }\n      },\n    };\n  }, [queryClient]);\n\n  return (\n    <ImageLoaderContext.Provider value={context}>\n      {children}\n    </ImageLoaderContext.Provider>\n  );\n}\n","import Head from \"next/head\";\nimport CanvasTools from \"../CanvasTools\";\nimport ToolsProvider from \"../ToolsProvider\";\nimport CanvasBackdrop from \"../CanvasBackdrop\";\nimport CanvasProvider from \"../CanvasProvider\";\nimport CanvasInteractions from \"../CanvasInteractions\";\nimport CanvasToggle from \"../CanvasToggle\";\nimport WarriorSelector from \"../WarriorSelector\";\nimport WarriorProvider from \"../WarriorProvider\";\nimport WarriorViewer from \"../WarriorViewer\";\nimport EnvironmentSelector from \"../EnvironmentSelector\";\nimport AnimationSelector from \"../AnimationSelector\";\nimport EnvironmentProvider from \"../EnvironmentProvider\";\nimport SkinProvider from \"../SkinProvider\";\nimport MaterialSelector from \"../MaterialSelector\";\nimport MaterialCanvases from \"../MaterialCanvases\";\nimport ImageLoaderProvider from \"../ImageLoaderProvider\";\nimport {\n  QueryClient,\n  QueryClientProvider,\n  QueryKey,\n} from \"@tanstack/react-query\";\nimport { imageUrlToArrayBuffer } from \"../imageUtils\";\n\nasync function imageFetcher({ queryKey }: { queryKey: QueryKey }) {\n  const [imageUrl] = queryKey as [string];\n  return imageUrlToArrayBuffer(imageUrl);\n}\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: imageFetcher,\n      staleTime: Infinity,\n      cacheTime: 60000,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n    },\n  },\n});\n\nexport default function HomePage() {\n  return (\n    <>\n      <Head>\n        <title>T2 Model Viewer & Skinner</title>\n      </Head>\n      <QueryClientProvider client={queryClient}>\n        <main>\n          <ImageLoaderProvider>\n            <WarriorProvider>\n              <EnvironmentProvider>\n                <SkinProvider>\n                  <div className=\"Viewport\">\n                    <div className=\"ModelTools\">\n                      <div className=\"Field\">\n                        <EnvironmentSelector />\n                      </div>\n                      <div className=\"Field\">\n                        <AnimationSelector />\n                      </div>\n                    </div>\n                    <WarriorViewer />\n                  </div>\n                  <CanvasProvider>\n                    <ToolsProvider>\n                      <CanvasInteractions>\n                        <WarriorSelector />\n                        <div className=\"CanvasViewport\">\n                          <div className=\"CanvasSelector\">\n                            <CanvasToggle />\n                            <MaterialSelector />\n                          </div>\n                          <CanvasBackdrop />\n                          <MaterialCanvases />\n                        </div>\n                        <CanvasTools />\n                      </CanvasInteractions>\n                    </ToolsProvider>\n                  </CanvasProvider>\n                </SkinProvider>\n              </EnvironmentProvider>\n            </WarriorProvider>\n          </ImageLoaderProvider>\n        </main>\n      </QueryClientProvider>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { ModelViewerElement } from \"@google/model-viewer\";\n\nexport const ModelViewerContext = React.createContext<{\n  modelViewer: ModelViewerElement;\n  model: NonNullable<ModelViewerElement[\"model\"]>;\n  isLoaded: boolean;\n} | null>(null);\nModelViewerContext.displayName = \"ModelViewerContext\";\n\nexport default function useModelViewer() {\n  const context = useContext(ModelViewerContext);\n  if (!context) {\n    throw new Error(\"No ModelViewerContext.Provider\");\n  }\n  return context;\n}\n","/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\n\nvar fabric = fabric || { version: '5.2.1' };\nif (typeof exports !== 'undefined') {\n  exports.fabric = fabric;\n}\n/* _AMD_START_ */\nelse if (typeof define === 'function' && define.amd) {\n  define([], function() { return fabric; });\n}\n/* _AMD_END_ */\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\n  if (document instanceof (typeof HTMLDocument !== 'undefined' ? HTMLDocument : Document)) {\n    fabric.document = document;\n  }\n  else {\n    fabric.document = document.implementation.createHTMLDocument('');\n  }\n  fabric.window = window;\n}\nelse {\n  // assume we're running under node.js when document/window are not present\n  var jsdom = require('jsdom');\n  var virtualWindow = new jsdom.JSDOM(\n    decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\n    {\n      features: {\n        FetchExternalResources: ['img']\n      },\n      resources: 'usable'\n    }).window;\n  fabric.document = virtualWindow.document;\n  fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\n  fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\n  fabric.window = virtualWindow;\n  DOMParser = fabric.window.DOMParser;\n}\n\n/**\n * True when in environment that supports touch events\n * @type boolean\n */\nfabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||\n  (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);\n\n/**\n * True when in environment that's probably Node.js\n * @type boolean\n */\nfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\n                      typeof window === 'undefined';\n\n\n\n/**\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n */\nfabric.DPI = 96;\nfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)';\nfabric.commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)';\nfabric.rePathCommand = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/ig;\nfabric.reNonWord = /[ \\n\\.,;!\\?\\-]/;\nfabric.fontPaths = { };\nfabric.iMatrix = [1, 0, 0, 1, 0, 0];\nfabric.svgNS = 'http://www.w3.org/2000/svg';\n\n/**\n * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.perfLimitSizeTotal = 2097152;\n\n/**\n * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.maxCacheSideLimit = 4096;\n\n/**\n * Lowest pixel limit for cache canvases, set at 256PX\n * @since 1.7.14\n * @type Number\n * @default\n */\nfabric.minCacheSideLimit = 256;\n\n/**\n * Cache Object for widths of chars in text rendering.\n */\nfabric.charWidthsCache = { };\n\n/**\n * if webgl is enabled and available, textureSize will determine the size\n * of the canvas backend\n * @since 2.0.0\n * @type Number\n * @default\n */\nfabric.textureSize = 2048;\n\n/**\n * When 'true', style information is not retained when copy/pasting text, making\n * pasted text use destination style.\n * Defaults to 'false'.\n * @type Boolean\n * @default\n */\nfabric.disableStyleCopyPaste = false;\n\n/**\n * Enable webgl for filtering picture is available\n * A filtering backend will be initialized, this will both take memory and\n * time since a default 2048x2048 canvas will be created for the gl context\n * @since 2.0.0\n * @type Boolean\n * @default\n */\nfabric.enableGLFiltering = true;\n\n/**\n * Device Pixel Ratio\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n */\nfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\n                          fabric.window.webkitDevicePixelRatio ||\n                          fabric.window.mozDevicePixelRatio ||\n                          1;\n/**\n * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n * which is unitless and not rendered equally across browsers.\n *\n * Values that work quite well (as of October 2017) are:\n * - Chrome: 1.5\n * - Edge: 1.75\n * - Firefox: 0.9\n * - Safari: 0.95\n *\n * @since 2.0.0\n * @type Number\n * @default 1\n */\nfabric.browserShadowBlurConstant = 1;\n\n/**\n * This object contains the result of arc to bezier conversion for faster retrieving if the same arc needs to be converted again.\n * It was an internal variable, is accessible since version 2.3.4\n */\nfabric.arcToSegmentsCache = { };\n\n/**\n * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n * you do not get any speed benefit and you get a big object in memory.\n * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n * can eventually clear it.\n * It was an internal variable, is accessible since version 2.3.4\n */\nfabric.boundsOfCurveCache = { };\n\n/**\n * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n * @default true\n */\nfabric.cachesBoundsOfCurve = true;\n\n/**\n * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n * this has to be set before instantiating the filtering backend ( before filtering the first image )\n * @type Boolean\n * @default false\n */\nfabric.forceGLPutImageData = false;\n\nfabric.initFilterBackend = function() {\n  if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\n    console.log('max texture size: ' + fabric.maxTextureSize);\n    return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\n  }\n  else if (fabric.Canvas2dFilterBackend) {\n    return (new fabric.Canvas2dFilterBackend());\n  }\n};\n(function() {\n\n  /**\n   * @private\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  function _removeEventListener(eventName, handler) {\n    if (!this.__eventListeners[eventName]) {\n      return;\n    }\n    var eventListener = this.__eventListeners[eventName];\n    if (handler) {\n      eventListener[eventListener.indexOf(handler)] = false;\n    }\n    else {\n      fabric.util.array.fill(eventListener, false);\n    }\n  }\n\n  /**\n   * Observes specified event\n   * @memberOf fabric.Observable\n   * @alias on\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function on(eventName, handler) {\n    if (!this.__eventListeners) {\n      this.__eventListeners = { };\n    }\n    // one object with key/value pairs was passed\n    if (arguments.length === 1) {\n      for (var prop in eventName) {\n        this.on(prop, eventName[prop]);\n      }\n    }\n    else {\n      if (!this.__eventListeners[eventName]) {\n        this.__eventListeners[eventName] = [];\n      }\n      this.__eventListeners[eventName].push(handler);\n    }\n    return this;\n  }\n\n  function _once(eventName, handler) {\n    var _handler = function () {\n      handler.apply(this, arguments);\n      this.off(eventName, _handler);\n    }.bind(this);\n    this.on(eventName, _handler);\n  }\n\n  function once(eventName, handler) {\n    // one object with key/value pairs was passed\n    if (arguments.length === 1) {\n      for (var prop in eventName) {\n        _once.call(this, prop, eventName[prop]);\n      }\n    }\n    else {\n      _once.call(this, eventName, handler);\n    }\n    return this;\n  }\n\n  /**\n   * Stops event observing for a particular event handler. Calling this method\n   * without arguments removes all handlers for all events\n   * @memberOf fabric.Observable\n   * @alias off\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function to be deleted from EventListeners\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function off(eventName, handler) {\n    if (!this.__eventListeners) {\n      return this;\n    }\n\n    // remove all key/value pairs (event name -> event handler)\n    if (arguments.length === 0) {\n      for (eventName in this.__eventListeners) {\n        _removeEventListener.call(this, eventName);\n      }\n    }\n    // one object with key/value pairs was passed\n    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      for (var prop in eventName) {\n        _removeEventListener.call(this, prop, eventName[prop]);\n      }\n    }\n    else {\n      _removeEventListener.call(this, eventName, handler);\n    }\n    return this;\n  }\n\n  /**\n   * Fires event with an optional options object\n   * @memberOf fabric.Observable\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   * @return {Self} thisArg\n   * @chainable\n   */\n  function fire(eventName, options) {\n    if (!this.__eventListeners) {\n      return this;\n    }\n\n    var listenersForEvent = this.__eventListeners[eventName];\n    if (!listenersForEvent) {\n      return this;\n    }\n\n    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\n      listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\n    }\n    this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\n      return value !== false;\n    });\n    return this;\n  }\n\n  /**\n   * @namespace fabric.Observable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n   * @see {@link http://fabricjs.com/events|Events demo}\n   */\n  fabric.Observable = {\n    fire: fire,\n    on: on,\n    once: once,\n    off: off,\n  };\n})();\n/**\n * @namespace fabric.Collection\n */\nfabric.Collection = {\n\n  _objects: [],\n\n  /**\n   * Adds objects to collection, Canvas or Group, then renders canvas\n   * (if `renderOnAddRemove` is not `false`).\n   * in case of Group no changes to bounding box are made.\n   * Objects should be instances of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the add method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  add: function () {\n    this._objects.push.apply(this._objects, arguments);\n    if (this._onObjectAdded) {\n      for (var i = 0, length = arguments.length; i < length; i++) {\n        this._onObjectAdded(arguments[i]);\n      }\n    }\n    this.renderOnAddRemove && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * An object should be an instance of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the insertAt method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {Object} object Object to insert\n   * @param {Number} index Index to insert object at\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n   * @return {Self} thisArg\n   * @chainable\n   */\n  insertAt: function (object, index, nonSplicing) {\n    var objects = this._objects;\n    if (nonSplicing) {\n      objects[index] = object;\n    }\n    else {\n      objects.splice(index, 0, object);\n    }\n    this._onObjectAdded && this._onObjectAdded(object);\n    this.renderOnAddRemove && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */\n  remove: function() {\n    var objects = this._objects,\n        index, somethingRemoved = false;\n\n    for (var i = 0, length = arguments.length; i < length; i++) {\n      index = objects.indexOf(arguments[i]);\n\n      // only call onObjectRemoved if an object was actually removed\n      if (index !== -1) {\n        somethingRemoved = true;\n        objects.splice(index, 1);\n        this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\n      }\n    }\n\n    this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\n    return this;\n  },\n\n  /**\n   * Executes given function for each object in this group\n   * @param {Function} callback\n   *                   Callback invoked with current object as first argument,\n   *                   index - as second and an array of all objects - as third.\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n   *                   when no `context` argument is given\n   *\n   * @param {Object} context Context (aka thisObject)\n   * @return {Self} thisArg\n   * @chainable\n   */\n  forEachObject: function(callback, context) {\n    var objects = this.getObjects();\n    for (var i = 0, len = objects.length; i < len; i++) {\n      callback.call(context, objects[i], i, objects);\n    }\n    return this;\n  },\n\n  /**\n   * Returns an array of children objects of this instance\n   * Type parameter introduced in 1.3.10\n   * since 2.3.5 this method return always a COPY of the array;\n   * @param {String} [type] When specified, only objects of this type are returned\n   * @return {Array}\n   */\n  getObjects: function(type) {\n    if (typeof type === 'undefined') {\n      return this._objects.concat();\n    }\n    return this._objects.filter(function(o) {\n      return o.type === type;\n    });\n  },\n\n  /**\n   * Returns object at specified index\n   * @param {Number} index\n   * @return {Self} thisArg\n   */\n  item: function (index) {\n    return this._objects[index];\n  },\n\n  /**\n   * Returns true if collection contains no objects\n   * @return {Boolean} true if collection is empty\n   */\n  isEmpty: function () {\n    return this._objects.length === 0;\n  },\n\n  /**\n   * Returns a size of a collection (i.e: length of an array containing its objects)\n   * @return {Number} Collection size\n   */\n  size: function() {\n    return this._objects.length;\n  },\n\n  /**\n   * Returns true if collection contains an object\n   * @param {Object} object Object to check against\n   * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n   * @return {Boolean} `true` if collection contains an object\n   */\n  contains: function (object, deep) {\n    if (this._objects.indexOf(object) > -1) {\n      return true;\n    }\n    else if (deep) {\n      return this._objects.some(function (obj) {\n        return typeof obj.contains === 'function' && obj.contains(object, true);\n      });\n    }\n    return false;\n  },\n\n  /**\n   * Returns number representation of a collection complexity\n   * @return {Number} complexity\n   */\n  complexity: function () {\n    return this._objects.reduce(function (memo, current) {\n      memo += current.complexity ? current.complexity() : 0;\n      return memo;\n    }, 0);\n  }\n};\n/**\n * @namespace fabric.CommonMethods\n */\nfabric.CommonMethods = {\n\n  /**\n   * Sets object's properties from options\n   * @param {Object} [options] Options object\n   */\n  _setOptions: function(options) {\n    for (var prop in options) {\n      this.set(prop, options[prop]);\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Gradient to\n   */\n  _initGradient: function(filler, property) {\n    if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\n      this.set(property, new fabric.Gradient(filler));\n    }\n  },\n\n  /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Pattern to\n   * @param {Function} [callback] callback to invoke after pattern load\n   */\n  _initPattern: function(filler, property, callback) {\n    if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\n      this.set(property, new fabric.Pattern(filler, callback));\n    }\n    else {\n      callback && callback();\n    }\n  },\n\n  /**\n   * @private\n   */\n  _setObject: function(obj) {\n    for (var prop in obj) {\n      this._set(prop, obj[prop]);\n    }\n  },\n\n  /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  set: function(key, value) {\n    if (typeof key === 'object') {\n      this._setObject(key);\n    }\n    else {\n      this._set(key, value);\n    }\n    return this;\n  },\n\n  _set: function(key, value) {\n    this[key] = value;\n  },\n\n  /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  toggle: function(property) {\n    var value = this.get(property);\n    if (typeof value === 'boolean') {\n      this.set(property, !value);\n    }\n    return this;\n  },\n\n  /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */\n  get: function(property) {\n    return this[property];\n  }\n};\n(function(global) {\n\n  var sqrt = Math.sqrt,\n      atan2 = Math.atan2,\n      pow = Math.pow,\n      PiBy180 = Math.PI / 180,\n      PiBy2 = Math.PI / 2;\n\n  /**\n   * @namespace fabric.util\n   */\n  fabric.util = {\n\n    /**\n     * Calculate the cos of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */\n    cos: function(angle) {\n      if (angle === 0) { return 1; }\n      if (angle < 0) {\n        // cos(a) = cos(-a)\n        angle = -angle;\n      }\n      var angleSlice = angle / PiBy2;\n      switch (angleSlice) {\n        case 1: case 3: return 0;\n        case 2: return -1;\n      }\n      return Math.cos(angle);\n    },\n\n    /**\n     * Calculate the sin of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */\n    sin: function(angle) {\n      if (angle === 0) { return 0; }\n      var angleSlice = angle / PiBy2, sign = 1;\n      if (angle < 0) {\n        // sin(-a) = -sin(a)\n        sign = -1;\n      }\n      switch (angleSlice) {\n        case 1: return sign;\n        case 2: return 0;\n        case 3: return -sign;\n      }\n      return Math.sin(angle);\n    },\n\n    /**\n     * Removes value from an array.\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} array\n     * @param {*} value\n     * @return {Array} original array\n     */\n    removeFromArray: function(array, value) {\n      var idx = array.indexOf(value);\n      if (idx !== -1) {\n        array.splice(idx, 1);\n      }\n      return array;\n    },\n\n    /**\n     * Returns random number between 2 specified ones.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} min lower limit\n     * @param {Number} max upper limit\n     * @return {Number} random value (between min and max)\n     */\n    getRandomInt: function(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Transforms degrees to radians.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} degrees value in degrees\n     * @return {Number} value in radians\n     */\n    degreesToRadians: function(degrees) {\n      return degrees * PiBy180;\n    },\n\n    /**\n     * Transforms radians to degrees.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} radians value in radians\n     * @return {Number} value in degrees\n     */\n    radiansToDegrees: function(radians) {\n      return radians / PiBy180;\n    },\n\n    /**\n     * Rotates `point` around `origin` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Point} point The point to rotate\n     * @param {fabric.Point} origin The origin of the rotation\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {fabric.Point} The new rotated point\n     */\n    rotatePoint: function(point, origin, radians) {\n      var newPoint = new fabric.Point(point.x - origin.x, point.y - origin.y),\n          v = fabric.util.rotateVector(newPoint, radians);\n      return new fabric.Point(v.x, v.y).addEquals(origin);\n    },\n\n    /**\n     * Rotates `vector` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} vector The vector to rotate (x and y)\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {Object} The new rotated point\n     */\n    rotateVector: function(vector, radians) {\n      var sin = fabric.util.sin(radians),\n          cos = fabric.util.cos(radians),\n          rx = vector.x * cos - vector.y * sin,\n          ry = vector.x * sin + vector.y * cos;\n      return {\n        x: rx,\n        y: ry\n      };\n    },\n\n    /**\n     * Creates a vetor from points represented as a point\n     * @static\n     * @memberOf fabric.util\n     *\n     * @typedef {Object} Point\n     * @property {number} x\n     * @property {number} y\n     *\n     * @param {Point} from\n     * @param {Point} to\n     * @returns {Point} vector\n     */\n    createVector: function (from, to) {\n      return new fabric.Point(to.x - from.x, to.y - from.y);\n    },\n\n    /**\n     * Calculates angle between 2 vectors using dot product\n     * @static\n     * @memberOf fabric.util\n     * @param {Point} a\n     * @param {Point} b\n     * @returns the angle in radian between the vectors\n     */\n    calcAngleBetweenVectors: function (a, b) {\n      return Math.acos((a.x * b.x + a.y * b.y) / (Math.hypot(a.x, a.y) * Math.hypot(b.x, b.y)));\n    },\n\n    /**\n     * @static\n     * @memberOf fabric.util\n     * @param {Point} v\n     * @returns {Point} vector representing the unit vector of pointing to the direction of `v`\n     */\n    getHatVector: function (v) {\n      return new fabric.Point(v.x, v.y).multiply(1 / Math.hypot(v.x, v.y));\n    },\n\n    /**\n     * @static\n     * @memberOf fabric.util\n     * @param {Point} A\n     * @param {Point} B\n     * @param {Point} C\n     * @returns {{ vector: Point, angle: number }} vector representing the bisector of A and A's angle\n     */\n    getBisector: function (A, B, C) {\n      var AB = fabric.util.createVector(A, B), AC = fabric.util.createVector(A, C);\n      var alpha = fabric.util.calcAngleBetweenVectors(AB, AC);\n      //  check if alpha is relative to AB->BC\n      var ro = fabric.util.calcAngleBetweenVectors(fabric.util.rotateVector(AB, alpha), AC);\n      var phi = alpha * (ro === 0 ? 1 : -1) / 2;\n      return {\n        vector: fabric.util.getHatVector(fabric.util.rotateVector(AB, phi)),\n        angle: alpha\n      };\n    },\n\n    /**\n     * Project stroke width on points returning 2 projections for each point as follows:\n     * - `miter`: 2 points corresponding to the outer boundary and the inner boundary of stroke.\n     * - `bevel`: 2 points corresponding to the bevel boundaries, tangent to the bisector.\n     * - `round`: same as `bevel`\n     * Used to calculate object's bounding box\n     * @static\n     * @memberOf fabric.util\n     * @param {Point[]} points\n     * @param {Object} options\n     * @param {number} options.strokeWidth\n     * @param {'miter'|'bevel'|'round'} options.strokeLineJoin\n     * @param {number} options.strokeMiterLimit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n     * @param {boolean} options.strokeUniform\n     * @param {number} options.scaleX\n     * @param {number} options.scaleY\n     * @param {boolean} [openPath] whether the shape is open or not, affects the calculations of the first and last points\n     * @returns {fabric.Point[]} array of size 2n/4n of all suspected points\n     */\n    projectStrokeOnPoints: function (points, options, openPath) {\n      var coords = [], s = options.strokeWidth / 2,\n          strokeUniformScalar = options.strokeUniform ?\n            new fabric.Point(1 / options.scaleX, 1 / options.scaleY) : new fabric.Point(1, 1),\n          getStrokeHatVector = function (v) {\n            var scalar = s / (Math.hypot(v.x, v.y));\n            return new fabric.Point(v.x * scalar * strokeUniformScalar.x, v.y * scalar * strokeUniformScalar.y);\n          };\n      if (points.length <= 1) {return coords;}\n      points.forEach(function (p, index) {\n        var A = new fabric.Point(p.x, p.y), B, C;\n        if (index === 0) {\n          C = points[index + 1];\n          B = openPath ? getStrokeHatVector(fabric.util.createVector(C, A)).addEquals(A) : points[points.length - 1];\n        }\n        else if (index === points.length - 1) {\n          B = points[index - 1];\n          C = openPath ? getStrokeHatVector(fabric.util.createVector(B, A)).addEquals(A) : points[0];\n        }\n        else {\n          B = points[index - 1];\n          C = points[index + 1];\n        }\n        var bisector = fabric.util.getBisector(A, B, C),\n            bisectorVector = bisector.vector,\n            alpha = bisector.angle,\n            scalar,\n            miterVector;\n        if (options.strokeLineJoin === 'miter') {\n          scalar = -s / Math.sin(alpha / 2);\n          miterVector = new fabric.Point(\n            bisectorVector.x * scalar * strokeUniformScalar.x,\n            bisectorVector.y * scalar * strokeUniformScalar.y\n          );\n          if (Math.hypot(miterVector.x, miterVector.y) / s <= options.strokeMiterLimit) {\n            coords.push(A.add(miterVector));\n            coords.push(A.subtract(miterVector));\n            return;\n          }\n        }\n        scalar = -s * Math.SQRT2;\n        miterVector = new fabric.Point(\n          bisectorVector.x * scalar * strokeUniformScalar.x,\n          bisectorVector.y * scalar * strokeUniformScalar.y\n        );\n        coords.push(A.add(miterVector));\n        coords.push(A.subtract(miterVector));\n      });\n      return coords;\n    },\n\n    /**\n     * Apply transform t to point p\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Point} p The point to transform\n     * @param  {Array} t The transform\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n     * @return {fabric.Point} The transformed point\n     */\n    transformPoint: function(p, t, ignoreOffset) {\n      if (ignoreOffset) {\n        return new fabric.Point(\n          t[0] * p.x + t[2] * p.y,\n          t[1] * p.x + t[3] * p.y\n        );\n      }\n      return new fabric.Point(\n        t[0] * p.x + t[2] * p.y + t[4],\n        t[1] * p.x + t[3] * p.y + t[5]\n      );\n    },\n\n    /**\n     * Returns coordinates of points's bounding rectangle (left, top, width, height)\n     * @param {Array} points 4 points array\n     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix\n     * @return {Object} Object with left, top, width, height properties\n     */\n    makeBoundingBoxFromPoints: function(points, transform) {\n      if (transform) {\n        for (var i = 0; i < points.length; i++) {\n          points[i] = fabric.util.transformPoint(points[i], transform);\n        }\n      }\n      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\n          minX = fabric.util.array.min(xPoints),\n          maxX = fabric.util.array.max(xPoints),\n          width = maxX - minX,\n          yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\n          minY = fabric.util.array.min(yPoints),\n          maxY = fabric.util.array.max(yPoints),\n          height = maxY - minY;\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height\n      };\n    },\n\n    /**\n     * Invert transformation t\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} t The transform\n     * @return {Array} The inverted transform\n     */\n    invertTransform: function(t) {\n      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\n          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\n          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\n      r[4] = -o.x;\n      r[5] = -o.y;\n      return r;\n    },\n\n    /**\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number|String} number number to operate on\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n     * @return {Number}\n     */\n    toFixed: function(number, fractionDigits) {\n      return parseFloat(Number(number).toFixed(fractionDigits));\n    },\n\n    /**\n     * Converts from attribute value to pixel value if applicable.\n     * Returns converted pixels or original value not converted.\n     * @param {Number|String} value number to operate on\n     * @param {Number} fontSize\n     * @return {Number|String}\n     */\n    parseUnit: function(value, fontSize) {\n      var unit = /\\D{0,2}$/.exec(value),\n          number = parseFloat(value);\n      if (!fontSize) {\n        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n      }\n      switch (unit[0]) {\n        case 'mm':\n          return number * fabric.DPI / 25.4;\n\n        case 'cm':\n          return number * fabric.DPI / 2.54;\n\n        case 'in':\n          return number * fabric.DPI;\n\n        case 'pt':\n          return number * fabric.DPI / 72; // or * 4 / 3\n\n        case 'pc':\n          return number * fabric.DPI / 72 * 12; // or * 16\n\n        case 'em':\n          return number * fontSize;\n\n        default:\n          return number;\n      }\n    },\n\n    /**\n     * Function which always returns `false`.\n     * @static\n     * @memberOf fabric.util\n     * @return {Boolean}\n     */\n    falseFunction: function() {\n      return false;\n    },\n\n    /**\n     * Returns klass \"Class\" object of given namespace\n     * @memberOf fabric.util\n     * @param {String} type Type of object (eg. 'circle')\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @return {Object} klass \"Class\"\n     */\n    getKlass: function(type, namespace) {\n      // capitalize first letter only\n      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n      return fabric.util.resolveNamespace(namespace)[type];\n    },\n\n    /**\n     * Returns array of attributes for given svg that fabric parses\n     * @memberOf fabric.util\n     * @param {String} type Type of svg element (eg. 'circle')\n     * @return {Array} string names of supported attributes\n     */\n    getSvgAttributes: function(type) {\n      var attributes = [\n        'instantiated_by_use',\n        'style',\n        'id',\n        'class'\n      ];\n      switch (type) {\n        case 'linearGradient':\n          attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\n          break;\n        case 'radialGradient':\n          attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\n          break;\n        case 'stop':\n          attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\n          break;\n      }\n      return attributes;\n    },\n\n    /**\n     * Returns object of given namespace\n     * @memberOf fabric.util\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n     * @return {Object} Object for given namespace (default fabric)\n     */\n    resolveNamespace: function(namespace) {\n      if (!namespace) {\n        return fabric;\n      }\n\n      var parts = namespace.split('.'),\n          len = parts.length, i,\n          obj = global || fabric.window;\n\n      for (i = 0; i < len; ++i) {\n        obj = obj[parts[i]];\n      }\n\n      return obj;\n    },\n\n    /**\n     * Loads image element from given url and passes it to a callback\n     * @memberOf fabric.util\n     * @param {String} url URL representing an image\n     * @param {Function} callback Callback; invoked with loaded image\n     * @param {*} [context] Context to invoke callback in\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n     */\n    loadImage: function(url, callback, context, crossOrigin) {\n      if (!url) {\n        callback && callback.call(context, url);\n        return;\n      }\n\n      var img = fabric.util.createImage();\n\n      /** @ignore */\n      var onLoadCallback = function () {\n        callback && callback.call(context, img, false);\n        img = img.onload = img.onerror = null;\n      };\n\n      img.onload = onLoadCallback;\n      /** @ignore */\n      img.onerror = function() {\n        fabric.log('Error loading ' + img.src);\n        callback && callback.call(context, null, true);\n        img = img.onload = img.onerror = null;\n      };\n\n      // data-urls appear to be buggy with crossOrigin\n      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n      // see https://code.google.com/p/chromium/issues/detail?id=315152\n      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n      // crossOrigin null is the same as not set.\n      if (url.indexOf('data') !== 0 &&\n        crossOrigin !== undefined &&\n        crossOrigin !== null) {\n        img.crossOrigin = crossOrigin;\n      }\n\n      // IE10 / IE11-Fix: SVG contents from data: URI\n      // will only be available if the IMG is present\n      // in the DOM (and visible)\n      if (url.substring(0,14) === 'data:image/svg') {\n        img.onload = null;\n        fabric.util.loadImageInDom(img, onLoadCallback);\n      }\n\n      img.src = url;\n    },\n\n    /**\n     * Attaches SVG image with data: URL to the dom\n     * @memberOf fabric.util\n     * @param {Object} img Image object with data:image/svg src\n     * @param {Function} callback Callback; invoked with loaded image\n     * @return {Object} DOM element (div containing the SVG image)\n     */\n    loadImageInDom: function(img, onLoadCallback) {\n      var div = fabric.document.createElement('div');\n      div.style.width = div.style.height = '1px';\n      div.style.left = div.style.top = '-100%';\n      div.style.position = 'absolute';\n      div.appendChild(img);\n      fabric.document.querySelector('body').appendChild(div);\n      /**\n       * Wrap in function to:\n       *   1. Call existing callback\n       *   2. Cleanup DOM\n       */\n      img.onload = function () {\n        onLoadCallback();\n        div.parentNode.removeChild(div);\n        div = null;\n      };\n    },\n\n    /**\n     * Creates corresponding fabric instances from their object representations\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} objects Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @param {Function} reviver Method for further parsing of object elements,\n     * called after each fabric object created.\n     */\n    enlivenObjects: function(objects, callback, namespace, reviver) {\n      objects = objects || [];\n\n      var enlivenedObjects = [],\n          numLoadedObjects = 0,\n          numTotalObjects = objects.length;\n\n      function onLoaded() {\n        if (++numLoadedObjects === numTotalObjects) {\n          callback && callback(enlivenedObjects.filter(function(obj) {\n            // filter out undefined objects (objects that gave error)\n            return obj;\n          }));\n        }\n      }\n\n      if (!numTotalObjects) {\n        callback && callback(enlivenedObjects);\n        return;\n      }\n\n      objects.forEach(function (o, index) {\n        // if sparse array\n        if (!o || !o.type) {\n          onLoaded();\n          return;\n        }\n        var klass = fabric.util.getKlass(o.type, namespace);\n        klass.fromObject(o, function (obj, error) {\n          error || (enlivenedObjects[index] = obj);\n          reviver && reviver(o, obj, error);\n          onLoaded();\n        });\n      });\n    },\n\n    /**\n     * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n     * @see {@link fabric.Object.ENLIVEN_PROPS}\n     * @param {Object} object\n     * @param {Object} [context] assign enlived props to this object (pass null to skip this)\n     * @param {(objects:fabric.Object[]) => void} callback\n     */\n    enlivenObjectEnlivables: function (object, context, callback) {\n      var enlivenProps = fabric.Object.ENLIVEN_PROPS.filter(function (key) { return !!object[key]; });\n      fabric.util.enlivenObjects(enlivenProps.map(function (key) { return object[key]; }), function (enlivedProps) {\n        var objects = {};\n        enlivenProps.forEach(function (key, index) {\n          objects[key] = enlivedProps[index];\n          context && (context[key] = enlivedProps[index]);\n        });\n        callback && callback(objects);\n      });\n    },\n\n    /**\n     * Create and wait for loading of patterns\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} patterns Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * called after each fabric object created.\n     */\n    enlivenPatterns: function(patterns, callback) {\n      patterns = patterns || [];\n\n      function onLoaded() {\n        if (++numLoadedPatterns === numPatterns) {\n          callback && callback(enlivenedPatterns);\n        }\n      }\n\n      var enlivenedPatterns = [],\n          numLoadedPatterns = 0,\n          numPatterns = patterns.length;\n\n      if (!numPatterns) {\n        callback && callback(enlivenedPatterns);\n        return;\n      }\n\n      patterns.forEach(function (p, index) {\n        if (p && p.source) {\n          new fabric.Pattern(p, function(pattern) {\n            enlivenedPatterns[index] = pattern;\n            onLoaded();\n          });\n        }\n        else {\n          enlivenedPatterns[index] = p;\n          onLoaded();\n        }\n      });\n    },\n\n    /**\n     * Groups SVG elements (usually those retrieved from SVG document)\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} elements SVG elements to group\n     * @param {Object} [options] Options object\n     * @param {String} path Value to set sourcePath to\n     * @return {fabric.Object|fabric.Group}\n     */\n    groupSVGElements: function(elements, options, path) {\n      var object;\n      if (elements && elements.length === 1) {\n        return elements[0];\n      }\n      if (options) {\n        if (options.width && options.height) {\n          options.centerPoint = {\n            x: options.width / 2,\n            y: options.height / 2\n          };\n        }\n        else {\n          delete options.width;\n          delete options.height;\n        }\n      }\n      object = new fabric.Group(elements, options);\n      if (typeof path !== 'undefined') {\n        object.sourcePath = path;\n      }\n      return object;\n    },\n\n    /**\n     * Populates an object with properties of another object\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} source Source object\n     * @param {Object} destination Destination object\n     * @return {Array} properties Properties names to include\n     */\n    populateWithProperties: function(source, destination, properties) {\n      if (properties && Array.isArray(properties)) {\n        for (var i = 0, len = properties.length; i < len; i++) {\n          if (properties[i] in source) {\n            destination[properties[i]] = source[properties[i]];\n          }\n        }\n      }\n    },\n\n    /**\n     * Creates canvas element\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */\n    createCanvasElement: function() {\n      return fabric.document.createElement('canvas');\n    },\n\n    /**\n     * Creates a canvas element that is a copy of another and is also painted\n     * @param {CanvasElement} canvas to copy size and content of\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */\n    copyCanvasElement: function(canvas) {\n      var newCanvas = fabric.util.createCanvasElement();\n      newCanvas.width = canvas.width;\n      newCanvas.height = canvas.height;\n      newCanvas.getContext('2d').drawImage(canvas, 0, 0);\n      return newCanvas;\n    },\n\n    /**\n     * since 2.6.0 moved from canvas instance to utility.\n     * @param {CanvasElement} canvasEl to copy size and content of\n     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n     * @param {Number} quality <= 1 and > 0\n     * @static\n     * @memberOf fabric.util\n     * @return {String} data url\n     */\n    toDataURL: function(canvasEl, format, quality) {\n      return canvasEl.toDataURL('image/' + format, quality);\n    },\n\n    /**\n     * Creates image element (works on client and node)\n     * @static\n     * @memberOf fabric.util\n     * @return {HTMLImageElement} HTML image element\n     */\n    createImage: function() {\n      return fabric.document.createElement('img');\n    },\n\n    /**\n     * Multiply matrix A by matrix B to nest transformations\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a First transformMatrix\n     * @param  {Array} b Second transformMatrix\n     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n     * @return {Array} The product of the two transform matrices\n     */\n    multiplyTransformMatrices: function(a, b, is2x2) {\n      // Matrix multiply a * b\n      return [\n        a[0] * b[0] + a[2] * b[1],\n        a[1] * b[0] + a[3] * b[1],\n        a[0] * b[2] + a[2] * b[3],\n        a[1] * b[2] + a[3] * b[3],\n        is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n        is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\n      ];\n    },\n\n    /**\n     * Decomposes standard 2x3 matrix into transform components\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a transformMatrix\n     * @return {Object} Components of transform\n     */\n    qrDecompose: function(a) {\n      var angle = atan2(a[1], a[0]),\n          denom = pow(a[0], 2) + pow(a[1], 2),\n          scaleX = sqrt(denom),\n          scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\n          skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\n      return {\n        angle: angle / PiBy180,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        skewX: skewX / PiBy180,\n        skewY: 0,\n        translateX: a[4],\n        translateY: a[5]\n      };\n    },\n\n    /**\n     * Returns a transform matrix starting from an object of the same kind of\n     * the one returned from qrDecompose, useful also if you want to calculate some\n     * transformations from an object that is not enlived yet\n     * @static\n     * @memberOf fabric.util\n     * @param  {Object} options\n     * @param  {Number} [options.angle] angle in degrees\n     * @return {Number[]} transform matrix\n     */\n    calcRotateMatrix: function(options) {\n      if (!options.angle) {\n        return fabric.iMatrix.concat();\n      }\n      var theta = fabric.util.degreesToRadians(options.angle),\n          cos = fabric.util.cos(theta),\n          sin = fabric.util.sin(theta);\n      return [cos, sin, -sin, cos, 0, 0];\n    },\n\n    /**\n     * Returns a transform matrix starting from an object of the same kind of\n     * the one returned from qrDecompose, useful also if you want to calculate some\n     * transformations from an object that is not enlived yet.\n     * is called DimensionsTransformMatrix because those properties are the one that influence\n     * the size of the resulting box of the object.\n     * @static\n     * @memberOf fabric.util\n     * @param  {Object} options\n     * @param  {Number} [options.scaleX]\n     * @param  {Number} [options.scaleY]\n     * @param  {Boolean} [options.flipX]\n     * @param  {Boolean} [options.flipY]\n     * @param  {Number} [options.skewX]\n     * @param  {Number} [options.skewY]\n     * @return {Number[]} transform matrix\n     */\n    calcDimensionsMatrix: function(options) {\n      var scaleX = typeof options.scaleX === 'undefined' ? 1 : options.scaleX,\n          scaleY = typeof options.scaleY === 'undefined' ? 1 : options.scaleY,\n          scaleMatrix = [\n            options.flipX ? -scaleX : scaleX,\n            0,\n            0,\n            options.flipY ? -scaleY : scaleY,\n            0,\n            0],\n          multiply = fabric.util.multiplyTransformMatrices,\n          degreesToRadians = fabric.util.degreesToRadians;\n      if (options.skewX) {\n        scaleMatrix = multiply(\n          scaleMatrix,\n          [1, 0, Math.tan(degreesToRadians(options.skewX)), 1],\n          true);\n      }\n      if (options.skewY) {\n        scaleMatrix = multiply(\n          scaleMatrix,\n          [1, Math.tan(degreesToRadians(options.skewY)), 0, 1],\n          true);\n      }\n      return scaleMatrix;\n    },\n\n    /**\n     * Returns a transform matrix starting from an object of the same kind of\n     * the one returned from qrDecompose, useful also if you want to calculate some\n     * transformations from an object that is not enlived yet\n     * @static\n     * @memberOf fabric.util\n     * @param  {Object} options\n     * @param  {Number} [options.angle]\n     * @param  {Number} [options.scaleX]\n     * @param  {Number} [options.scaleY]\n     * @param  {Boolean} [options.flipX]\n     * @param  {Boolean} [options.flipY]\n     * @param  {Number} [options.skewX]\n     * @param  {Number} [options.skewX]\n     * @param  {Number} [options.translateX]\n     * @param  {Number} [options.translateY]\n     * @return {Number[]} transform matrix\n     */\n    composeMatrix: function(options) {\n      var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0],\n          multiply = fabric.util.multiplyTransformMatrices;\n      if (options.angle) {\n        matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));\n      }\n      if (options.scaleX !== 1 || options.scaleY !== 1 ||\n          options.skewX || options.skewY || options.flipX || options.flipY) {\n        matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));\n      }\n      return matrix;\n    },\n\n    /**\n     * reset an object transform state to neutral. Top and left are not accounted for\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to transform\n     */\n    resetObjectTransform: function (target) {\n      target.scaleX = 1;\n      target.scaleY = 1;\n      target.skewX = 0;\n      target.skewY = 0;\n      target.flipX = false;\n      target.flipY = false;\n      target.rotate(0);\n    },\n\n    /**\n     * Extract Object transform values\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to read from\n     * @return {Object} Components of transform\n     */\n    saveObjectTransform: function (target) {\n      return {\n        scaleX: target.scaleX,\n        scaleY: target.scaleY,\n        skewX: target.skewX,\n        skewY: target.skewY,\n        angle: target.angle,\n        left: target.left,\n        flipX: target.flipX,\n        flipY: target.flipY,\n        top: target.top\n      };\n    },\n\n    /**\n     * Returns true if context has transparent pixel\n     * at specified location (taking tolerance into account)\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x x coordinate\n     * @param {Number} y y coordinate\n     * @param {Number} tolerance Tolerance\n     */\n    isTransparent: function(ctx, x, y, tolerance) {\n\n      // If tolerance is > 0 adjust start coords to take into account.\n      // If moves off Canvas fix to 0\n      if (tolerance > 0) {\n        if (x > tolerance) {\n          x -= tolerance;\n        }\n        else {\n          x = 0;\n        }\n        if (y > tolerance) {\n          y -= tolerance;\n        }\n        else {\n          y = 0;\n        }\n      }\n\n      var _isTransparent = true, i, temp,\n          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\n          l = imageData.data.length;\n\n      // Split image data - for tolerance > 1, pixelDataSize = 4;\n      for (i = 3; i < l; i += 4) {\n        temp = imageData.data[i];\n        _isTransparent = temp <= 0;\n        if (_isTransparent === false) {\n          break; // Stop if colour found\n        }\n      }\n\n      imageData = null;\n\n      return _isTransparent;\n    },\n\n    /**\n     * Parse preserveAspectRatio attribute from element\n     * @param {string} attribute to be parsed\n     * @return {Object} an object containing align and meetOrSlice attribute\n     */\n    parsePreserveAspectRatioAttribute: function(attribute) {\n      var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\n          aspectRatioAttrs = attribute.split(' '), align;\n\n      if (aspectRatioAttrs && aspectRatioAttrs.length) {\n        meetOrSlice = aspectRatioAttrs.pop();\n        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\n          align = meetOrSlice;\n          meetOrSlice = 'meet';\n        }\n        else if (aspectRatioAttrs.length) {\n          align = aspectRatioAttrs.pop();\n        }\n      }\n      //divide align in alignX and alignY\n      alignX = align !== 'none' ? align.slice(1, 4) : 'none';\n      alignY = align !== 'none' ? align.slice(5, 8) : 'none';\n      return {\n        meetOrSlice: meetOrSlice,\n        alignX: alignX,\n        alignY: alignY\n      };\n    },\n\n    /**\n     * Clear char widths cache for the given font family or all the cache if no\n     * fontFamily is specified.\n     * Use it if you know you are loading fonts in a lazy way and you are not waiting\n     * for custom fonts to load properly when adding text objects to the canvas.\n     * If a text object is added when its own font is not loaded yet, you will get wrong\n     * measurement and so wrong bounding boxes.\n     * After the font cache is cleared, either change the textObject text content or call\n     * initDimensions() to trigger a recalculation\n     * @memberOf fabric.util\n     * @param {String} [fontFamily] font family to clear\n     */\n    clearFabricFontCache: function(fontFamily) {\n      fontFamily = (fontFamily || '').toLowerCase();\n      if (!fontFamily) {\n        fabric.charWidthsCache = { };\n      }\n      else if (fabric.charWidthsCache[fontFamily]) {\n        delete fabric.charWidthsCache[fontFamily];\n      }\n    },\n\n    /**\n     * Given current aspect ratio, determines the max width and height that can\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Number} ar aspect ratio\n     * @param {Number} maximumArea Maximum area you want to achieve\n     * @return {Object.x} Limited dimensions by X\n     * @return {Object.y} Limited dimensions by Y\n     */\n    limitDimsByArea: function(ar, maximumArea) {\n      var roughWidth = Math.sqrt(maximumArea * ar),\n          perfLimitSizeY = Math.floor(maximumArea / roughWidth);\n      return { x: Math.floor(roughWidth), y: perfLimitSizeY };\n    },\n\n    capValue: function(min, value, max) {\n      return Math.max(min, Math.min(value, max));\n    },\n\n    /**\n     * Finds the scale for the object source to fit inside the object destination,\n     * keeping aspect ratio intact.\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Object | fabric.Object} source\n     * @param {Number} source.height natural unscaled height of the object\n     * @param {Number} source.width natural unscaled width of the object\n     * @param {Object | fabric.Object} destination\n     * @param {Number} destination.height natural unscaled height of the object\n     * @param {Number} destination.width natural unscaled width of the object\n     * @return {Number} scale factor to apply to source to fit into destination\n     */\n    findScaleToFit: function(source, destination) {\n      return Math.min(destination.width / source.width, destination.height / source.height);\n    },\n\n    /**\n     * Finds the scale for the object source to cover entirely the object destination,\n     * keeping aspect ratio intact.\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Object | fabric.Object} source\n     * @param {Number} source.height natural unscaled height of the object\n     * @param {Number} source.width natural unscaled width of the object\n     * @param {Object | fabric.Object} destination\n     * @param {Number} destination.height natural unscaled height of the object\n     * @param {Number} destination.width natural unscaled width of the object\n     * @return {Number} scale factor to apply to source to cover destination\n     */\n    findScaleToCover: function(source, destination) {\n      return Math.max(destination.width / source.width, destination.height / source.height);\n    },\n\n    /**\n     * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n     * @memberOf fabric.util\n     * @param {Array} transform an array with 6 numbers\n     * @return {String} transform matrix for svg\n     * @return {Object.y} Limited dimensions by Y\n     */\n    matrixToSVG: function(transform) {\n      return 'matrix(' + transform.map(function(value) {\n        return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\n      }).join(' ') + ')';\n    },\n\n    /**\n     * given an object and a transform, apply the inverse transform to the object,\n     * this is equivalent to remove from that object that transformation, so that\n     * added in a space with the removed transform, the object will be the same as before.\n     * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n     * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg\n     * in the opposite direction.\n     * This util is used to add objects inside transformed groups or nested groups.\n     * @memberOf fabric.util\n     * @param {fabric.Object} object the object you want to transform\n     * @param {Array} transform the destination transform\n     */\n    removeTransformFromObject: function(object, transform) {\n      var inverted = fabric.util.invertTransform(transform),\n          finalTransform = fabric.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());\n      fabric.util.applyTransformToObject(object, finalTransform);\n    },\n\n    /**\n     * given an object and a transform, apply the transform to the object.\n     * this is equivalent to change the space where the object is drawn.\n     * Adding to an object a transform that scale by 2 is like scaling it by 2.\n     * This is used when removing an object from an active selection for example.\n     * @memberOf fabric.util\n     * @param {fabric.Object} object the object you want to transform\n     * @param {Array} transform the destination transform\n     */\n    addTransformToObject: function(object, transform) {\n      fabric.util.applyTransformToObject(\n        object,\n        fabric.util.multiplyTransformMatrices(transform, object.calcOwnMatrix())\n      );\n    },\n\n    /**\n     * discard an object transform state and apply the one from the matrix.\n     * @memberOf fabric.util\n     * @param {fabric.Object} object the object you want to transform\n     * @param {Array} transform the destination transform\n     */\n    applyTransformToObject: function(object, transform) {\n      var options = fabric.util.qrDecompose(transform),\n          center = new fabric.Point(options.translateX, options.translateY);\n      object.flipX = false;\n      object.flipY = false;\n      object.set('scaleX', options.scaleX);\n      object.set('scaleY', options.scaleY);\n      object.skewX = options.skewX;\n      object.skewY = options.skewY;\n      object.angle = options.angle;\n      object.setPositionByOrigin(center, 'center', 'center');\n    },\n\n    /**\n     * given a width and height, return the size of the bounding box\n     * that can contains the box with width/height with applied transform\n     * described in options.\n     * Use to calculate the boxes around objects for controls.\n     * @memberOf fabric.util\n     * @param {Number} width\n     * @param {Number} height\n     * @param {Object} options\n     * @param {Number} options.scaleX\n     * @param {Number} options.scaleY\n     * @param {Number} options.skewX\n     * @param {Number} options.skewY\n     * @return {Object.x} width of containing\n     * @return {Object.y} height of containing\n     */\n    sizeAfterTransform: function(width, height, options) {\n      var dimX = width / 2, dimY = height / 2,\n          points = [\n            {\n              x: -dimX,\n              y: -dimY\n            },\n            {\n              x: dimX,\n              y: -dimY\n            },\n            {\n              x: -dimX,\n              y: dimY\n            },\n            {\n              x: dimX,\n              y: dimY\n            }],\n          transformMatrix = fabric.util.calcDimensionsMatrix(options),\n          bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);\n      return {\n        x: bbox.width,\n        y: bbox.height,\n      };\n    },\n\n    /**\n     * Merges 2 clip paths into one visually equal clip path\n     *\n     * **IMPORTANT**:\\\n     * Does **NOT** clone the arguments, clone them proir if necessary.\n     *\n     * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n     * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n     *\n     * In order to handle the `inverted` property we follow logic described in the following cases:\\\n     * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n     * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n     * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n     *\n     * @memberOf fabric.util\n     * @param {fabric.Object} c1\n     * @param {fabric.Object} c2\n     * @returns {fabric.Object} merged clip path\n     */\n    mergeClipPaths: function (c1, c2) {\n      var a = c1, b = c2;\n      if (a.inverted && !b.inverted) {\n        //  case (2)\n        a = c2;\n        b = c1;\n      }\n      //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n      fabric.util.applyTransformToObject(\n        b,\n        fabric.util.multiplyTransformMatrices(\n          fabric.util.invertTransform(a.calcTransformMatrix()),\n          b.calcTransformMatrix()\n        )\n      );\n      //  assign the `inverted` prop to the wrapping group\n      var inverted = a.inverted && b.inverted;\n      if (inverted) {\n        //  case (1)\n        a.inverted = b.inverted = false;\n      }\n      return new fabric.Group([a], { clipPath: b, inverted: inverted });\n    },\n\n    /**\n     * @memberOf fabric.util\n     * @param {Object} prevStyle first style to compare\n     * @param {Object} thisStyle second style to compare\n     * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n     * @return {boolean} true if the style changed\n     */\n    hasStyleChanged: function(prevStyle, thisStyle, forTextSpans) {\n      forTextSpans = forTextSpans || false;\n      return (prevStyle.fill !== thisStyle.fill ||\n              prevStyle.stroke !== thisStyle.stroke ||\n              prevStyle.strokeWidth !== thisStyle.strokeWidth ||\n              prevStyle.fontSize !== thisStyle.fontSize ||\n              prevStyle.fontFamily !== thisStyle.fontFamily ||\n              prevStyle.fontWeight !== thisStyle.fontWeight ||\n              prevStyle.fontStyle !== thisStyle.fontStyle ||\n              prevStyle.deltaY !== thisStyle.deltaY) ||\n              (forTextSpans &&\n                (prevStyle.overline !== thisStyle.overline ||\n                prevStyle.underline !== thisStyle.underline ||\n                prevStyle.linethrough !== thisStyle.linethrough));\n    },\n\n    /**\n     * Returns the array form of a text object's inline styles property with styles grouped in ranges\n     * rather than per character. This format is less verbose, and is better suited for storage\n     * so it is used in serialization (not during runtime).\n     * @memberOf fabric.util\n     * @param {object} styles per character styles for a text object\n     * @param {String} text the text string that the styles are applied to\n     * @return {{start: number, end: number, style: object}[]}\n     */\n    stylesToArray: function(styles, text) {\n      // clone style structure to prevent mutation\n      var styles = fabric.util.object.clone(styles, true),\n          textLines = text.split('\\n'),\n          charIndex = -1, prevStyle = {}, stylesArray = [];\n      //loop through each textLine\n      for (var i = 0; i < textLines.length; i++) {\n        if (!styles[i]) {\n          //no styles exist for this line, so add the line's length to the charIndex total\n          charIndex += textLines[i].length;\n          continue;\n        }\n        //loop through each character of the current line\n        for (var c = 0; c < textLines[i].length; c++) {\n          charIndex++;\n          var thisStyle = styles[i][c];\n          //check if style exists for this character\n          if (thisStyle) {\n            var styleChanged = fabric.util.hasStyleChanged(prevStyle, thisStyle, true);\n            if (styleChanged) {\n              stylesArray.push({\n                start: charIndex,\n                end: charIndex + 1,\n                style: thisStyle\n              });\n            }\n            else {\n              //if style is the same as previous character, increase end index\n              stylesArray[stylesArray.length - 1].end++;\n            }\n          }\n          prevStyle = thisStyle || {};\n        }\n      }\n      return stylesArray;\n    },\n\n    /**\n     * Returns the object form of the styles property with styles that are assigned per\n     * character rather than grouped by range. This format is more verbose, and is\n     * only used during runtime (not for serialization/storage)\n     * @memberOf fabric.util\n     * @param {Array} styles the serialized form of a text object's styles\n     * @param {String} text the text string that the styles are applied to\n     * @return {Object}\n     */\n    stylesFromArray: function(styles, text) {\n      if (!Array.isArray(styles)) {\n        return styles;\n      }\n      var textLines = text.split('\\n'),\n          charIndex = -1, styleIndex = 0, stylesObject = {};\n      //loop through each textLine\n      for (var i = 0; i < textLines.length; i++) {\n        //loop through each character of the current line\n        for (var c = 0; c < textLines[i].length; c++) {\n          charIndex++;\n          //check if there's a style collection that includes the current character\n          if (styles[styleIndex]\n            && styles[styleIndex].start <= charIndex\n            && charIndex < styles[styleIndex].end) {\n            //create object for line index if it doesn't exist\n            stylesObject[i] = stylesObject[i] || {};\n            //assign a style at this character's index\n            stylesObject[i][c] = Object.assign({}, styles[styleIndex].style);\n            //if character is at the end of the current style collection, move to the next\n            if (charIndex === styles[styleIndex].end - 1) {\n              styleIndex++;\n            }\n          }\n        }\n      }\n      return stylesObject;\n    }\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n(function() {\n  var _join = Array.prototype.join,\n      commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n      },\n      repeatedCommands = {\n        m: 'l',\n        M: 'L'\n      };\n  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n    var costh2 = fabric.util.cos(th2),\n        sinth2 = fabric.util.sin(th2),\n        costh3 = fabric.util.cos(th3),\n        sinth3 = fabric.util.sin(th3),\n        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\n        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\n        cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\n        cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\n        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\n        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\n\n    return ['C',\n      cp1X, cp1Y,\n      cp2X, cp2Y,\n      toX, toY\n    ];\n  }\n\n  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n   * http://mozilla.org/MPL/2.0/\n   */\n  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n    var PI = Math.PI, th = rotateX * PI / 180,\n        sinTh = fabric.util.sin(th),\n        cosTh = fabric.util.cos(th),\n        fromX = 0, fromY = 0;\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\n        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\n        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\n        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\n        root = 0;\n\n    if (pl < 0) {\n      var s = Math.sqrt(1 - pl / (rx2 * ry2));\n      rx *= s;\n      ry *= s;\n    }\n    else {\n      root = (large === sweep ? -1.0 : 1.0) *\n              Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\n    }\n\n    var cx = root * rx * py / ry,\n        cy = -root * ry * px / rx,\n        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\n        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\n        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\n        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n\n    if (sweep === 0 && dtheta > 0) {\n      dtheta -= 2 * PI;\n    }\n    else if (sweep === 1 && dtheta < 0) {\n      dtheta += 2 * PI;\n    }\n\n    // Convert into cubic bezier segments <= 90deg\n    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\n        result = [], mDelta = dtheta / segments,\n        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\n        th3 = mTheta + mDelta;\n\n    for (var i = 0; i < segments; i++) {\n      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n      fromX = result[i][5];\n      fromY = result[i][6];\n      mTheta = th3;\n      th3 += mDelta;\n    }\n    return result;\n  }\n\n  /*\n   * Private\n   */\n  function calcVectorAngle(ux, uy, vx, vy) {\n    var ta = Math.atan2(uy, ux),\n        tb = Math.atan2(vy, vx);\n    if (tb >= ta) {\n      return tb - ta;\n    }\n    else {\n      return 2 * Math.PI - (ta - tb);\n    }\n  }\n\n  /**\n   * Calculate bounding box of a beziercurve\n   * @param {Number} x0 starting point\n   * @param {Number} y0\n   * @param {Number} x1 first control point\n   * @param {Number} y1\n   * @param {Number} x2 secondo control point\n   * @param {Number} y2\n   * @param {Number} x3 end of bezier\n   * @param {Number} y3\n   */\n  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n  // TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var argsString;\n    if (fabric.cachesBoundsOfCurve) {\n      argsString = _join.call(arguments);\n      if (fabric.boundsOfCurveCache[argsString]) {\n        return fabric.boundsOfCurveCache[argsString];\n      }\n    }\n\n    var sqrt = Math.sqrt,\n        min = Math.min, max = Math.max,\n        abs = Math.abs, tvalues = [],\n        bounds = [[], []],\n        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n    b = 6 * x0 - 12 * x1 + 6 * x2;\n    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n    c = 3 * x1 - 3 * x0;\n\n    for (var i = 0; i < 2; ++i) {\n      if (i > 0) {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (abs(a) < 1e-12) {\n        if (abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      if (b2ac < 0) {\n        continue;\n      }\n      sqrtb2ac = sqrt(b2ac);\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    var x, y, j = tvalues.length, jlen = j, mt;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n      bounds[0][j] = x;\n\n      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n      bounds[1][j] = y;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    var result = [\n      {\n        x: min.apply(null, bounds[0]),\n        y: min.apply(null, bounds[1])\n      },\n      {\n        x: max.apply(null, bounds[0]),\n        y: max.apply(null, bounds[1])\n      }\n    ];\n    if (fabric.cachesBoundsOfCurve) {\n      fabric.boundsOfCurveCache[argsString] = result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts arc to a bunch of bezier curves\n   * @param {Number} fx starting point x\n   * @param {Number} fy starting point y\n   * @param {Array} coords Arc command\n   */\n  function fromArcToBeziers(fx, fy, coords) {\n    var rx = coords[1],\n        ry = coords[2],\n        rot = coords[3],\n        large = coords[4],\n        sweep = coords[5],\n        tx = coords[6],\n        ty = coords[7],\n        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n\n    for (var i = 0, len = segsNorm.length; i < len; i++) {\n      segsNorm[i][1] += fx;\n      segsNorm[i][2] += fy;\n      segsNorm[i][3] += fx;\n      segsNorm[i][4] += fy;\n      segsNorm[i][5] += fx;\n      segsNorm[i][6] += fy;\n    }\n    return segsNorm;\n  };\n\n  /**\n   * This function take a parsed SVG path and make it simpler for fabricJS logic.\n   * simplification consist of: only UPPERCASE absolute commands ( relative converted to absolute )\n   * S converted in C, T converted in Q, A converted in C.\n   * @param {Array} path the array of commands of a parsed svg path for fabric.Path\n   * @return {Array} the simplified array of commands of a parsed svg path for fabric.Path\n   */\n  function makePathSimpler(path) {\n    // x and y represent the last point of the path. the previous command point.\n    // we add them to each relative command to make it an absolute comment.\n    // we also swap the v V h H with L, because are easier to transform.\n    var x = 0, y = 0, len = path.length,\n        // x1 and y1 represent the last point of the subpath. the subpath is started with\n        // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n        // the last x1 and y1.\n        x1 = 0, y1 = 0, current, i, converted,\n        // previous will host the letter of the previous command, to handle S and T.\n        // controlX and controlY will host the previous reflected control point\n        destinationPath = [], previous, controlX, controlY;\n    for (i = 0; i < len; ++i) {\n      converted = false;\n      current = path[i].slice(0);\n      switch (current[0]) { // first letter\n        case 'l': // lineto, relative\n          current[0] = 'L';\n          current[1] += x;\n          current[2] += y;\n          // falls through\n        case 'L':\n          x = current[1];\n          y = current[2];\n          break;\n        case 'h': // horizontal lineto, relative\n          current[1] += x;\n          // falls through\n        case 'H':\n          current[0] = 'L';\n          current[2] = y;\n          x = current[1];\n          break;\n        case 'v': // vertical lineto, relative\n          current[1] += y;\n          // falls through\n        case 'V':\n          current[0] = 'L';\n          y = current[1];\n          current[1] = x;\n          current[2] = y;\n          break;\n        case 'm': // moveTo, relative\n          current[0] = 'M';\n          current[1] += x;\n          current[2] += y;\n          // falls through\n        case 'M':\n          x = current[1];\n          y = current[2];\n          x1 = current[1];\n          y1 = current[2];\n          break;\n        case 'c': // bezierCurveTo, relative\n          current[0] = 'C';\n          current[1] += x;\n          current[2] += y;\n          current[3] += x;\n          current[4] += y;\n          current[5] += x;\n          current[6] += y;\n          // falls through\n        case 'C':\n          controlX = current[3];\n          controlY = current[4];\n          x = current[5];\n          y = current[6];\n          break;\n        case 's': // shorthand cubic bezierCurveTo, relative\n          current[0] = 'S';\n          current[1] += x;\n          current[2] += y;\n          current[3] += x;\n          current[4] += y;\n          // falls through\n        case 'S':\n          // would be sScC but since we are swapping sSc for C, we check just that.\n          if (previous === 'C') {\n            // calculate reflection of previous control points\n            controlX = 2 * x - controlX;\n            controlY = 2 * y - controlY;\n          }\n          else {\n            // If there is no previous command or if the previous command was not a C, c, S, or s,\n            // the control point is coincident with the current point\n            controlX = x;\n            controlY = y;\n          }\n          x = current[3];\n          y = current[4];\n          current[0] = 'C';\n          current[5] = current[3];\n          current[6] = current[4];\n          current[3] = current[1];\n          current[4] = current[2];\n          current[1] = controlX;\n          current[2] = controlY;\n          // current[3] and current[4] are NOW the second control point.\n          // we keep it for the next reflection.\n          controlX = current[3];\n          controlY = current[4];\n          break;\n        case 'q': // quadraticCurveTo, relative\n          current[0] = 'Q';\n          current[1] += x;\n          current[2] += y;\n          current[3] += x;\n          current[4] += y;\n          // falls through\n        case 'Q':\n          controlX = current[1];\n          controlY = current[2];\n          x = current[3];\n          y = current[4];\n          break;\n        case 't': // shorthand quadraticCurveTo, relative\n          current[0] = 'T';\n          current[1] += x;\n          current[2] += y;\n          // falls through\n        case 'T':\n          if (previous === 'Q') {\n            // calculate reflection of previous control point\n            controlX = 2 * x - controlX;\n            controlY = 2 * y - controlY;\n          }\n          else {\n            // If there is no previous command or if the previous command was not a Q, q, T or t,\n            // assume the control point is coincident with the current point\n            controlX = x;\n            controlY = y;\n          }\n          current[0] = 'Q';\n          x = current[1];\n          y = current[2];\n          current[1] = controlX;\n          current[2] = controlY;\n          current[3] = x;\n          current[4] = y;\n          break;\n        case 'a':\n          current[0] = 'A';\n          current[6] += x;\n          current[7] += y;\n          // falls through\n        case 'A':\n          converted = true;\n          destinationPath = destinationPath.concat(fromArcToBeziers(x, y, current));\n          x = current[6];\n          y = current[7];\n          break;\n        case 'z':\n        case 'Z':\n          x = x1;\n          y = y1;\n          break;\n        default:\n      }\n      if (!converted) {\n        destinationPath.push(current);\n      }\n      previous = current[0];\n    }\n    return destinationPath;\n  };\n\n  /**\n   * Calc length from point x1,y1 to x2,y2\n   * @param {Number} x1 starting point x\n   * @param {Number} y1 starting point y\n   * @param {Number} x2 starting point x\n   * @param {Number} y2 starting point y\n   * @return {Number} length of segment\n   */\n  function calcLineLength(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n\n  // functions for the Cubic beizer\n  // taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\n  function CB1(t) {\n    return t * t * t;\n  }\n  function CB2(t) {\n    return 3 * t * t * (1 - t);\n  }\n  function CB3(t) {\n    return 3 * t * (1 - t) * (1 - t);\n  }\n  function CB4(t) {\n    return (1 - t) * (1 - t) * (1 - t);\n  }\n\n  function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n    return function(pct) {\n      var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);\n      return {\n        x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,\n        y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4\n      };\n    };\n  }\n\n  function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n    return function (pct) {\n      var invT = 1 - pct,\n          tangentX = (3 * invT * invT * (p2x - p1x)) + (6 * invT * pct * (p3x - p2x)) +\n          (3 * pct * pct * (p4x - p3x)),\n          tangentY = (3 * invT * invT * (p2y - p1y)) + (6 * invT * pct * (p3y - p2y)) +\n          (3 * pct * pct * (p4y - p3y));\n      return Math.atan2(tangentY, tangentX);\n    };\n  }\n\n  function QB1(t) {\n    return t * t;\n  }\n\n  function QB2(t) {\n    return 2 * t * (1 - t);\n  }\n\n  function QB3(t) {\n    return (1 - t) * (1 - t);\n  }\n\n  function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\n    return function(pct) {\n      var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);\n      return {\n        x: p3x * c1 + p2x * c2 + p1x * c3,\n        y: p3y * c1 + p2y * c2 + p1y * c3\n      };\n    };\n  }\n\n  function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\n    return function (pct) {\n      var invT = 1 - pct,\n          tangentX = (2 * invT * (p2x - p1x)) + (2 * pct * (p3x - p2x)),\n          tangentY = (2 * invT * (p2y - p1y)) + (2 * pct * (p3y - p2y));\n      return Math.atan2(tangentY, tangentX);\n    };\n  }\n\n\n  // this will run over a path segment ( a cubic or quadratic segment) and approximate it\n  // with 100 segemnts. This will good enough to calculate the length of the curve\n  function pathIterator(iterator, x1, y1) {\n    var tempP = { x: x1, y: y1 }, p, tmpLen = 0, perc;\n    for (perc = 1; perc <= 100; perc += 1) {\n      p = iterator(perc / 100);\n      tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n      tempP = p;\n    }\n    return tmpLen;\n  }\n\n  /**\n   * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n   * that correspond to that pixels run over the path.\n   * The percentage will be then used to find the correct point on the canvas for the path.\n   * @param {Array} segInfo fabricJS collection of information on a parsed path\n   * @param {Number} distance from starting point, in pixels.\n   * @return {Object} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n   */\n  function findPercentageForDistance(segInfo, distance) {\n    var perc = 0, tmpLen = 0, iterator = segInfo.iterator, tempP = { x: segInfo.x, y: segInfo.y },\n        p, nextLen, nextStep = 0.01, angleFinder = segInfo.angleFinder, lastPerc;\n    // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n    // the path\n    while (tmpLen < distance && nextStep > 0.0001) {\n      p = iterator(perc);\n      lastPerc = perc;\n      nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n      // compare tmpLen each cycle with distance, decide next perc to test.\n      if ((nextLen + tmpLen) > distance) {\n        // we discard this step and we make smaller steps.\n        perc -= nextStep;\n        nextStep /= 2;\n      }\n      else {\n        tempP = p;\n        perc += nextStep;\n        tmpLen += nextLen;\n      }\n    }\n    p.angle = angleFinder(lastPerc);\n    return p;\n  }\n\n  /**\n   * Run over a parsed and simplifed path and extrac some informations.\n   * informations are length of each command and starting point\n   * @param {Array} path fabricJS parsed path commands\n   * @return {Array} path commands informations\n   */\n  function getPathSegmentsInfo(path) {\n    var totalLength = 0, len = path.length, current,\n        //x2 and y2 are the coords of segment start\n        //x1 and y1 are the coords of the current point\n        x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo, angleFinder;\n    for (var i = 0; i < len; i++) {\n      current = path[i];\n      tempInfo = {\n        x: x1,\n        y: y1,\n        command: current[0],\n      };\n      switch (current[0]) { //first letter\n        case 'M':\n          tempInfo.length = 0;\n          x2 = x1 = current[1];\n          y2 = y1 = current[2];\n          break;\n        case 'L':\n          tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n          x1 = current[1];\n          y1 = current[2];\n          break;\n        case 'C':\n          iterator = getPointOnCubicBezierIterator(\n            x1,\n            y1,\n            current[1],\n            current[2],\n            current[3],\n            current[4],\n            current[5],\n            current[6]\n          );\n          angleFinder = getTangentCubicIterator(\n            x1,\n            y1,\n            current[1],\n            current[2],\n            current[3],\n            current[4],\n            current[5],\n            current[6]\n          );\n          tempInfo.iterator = iterator;\n          tempInfo.angleFinder = angleFinder;\n          tempInfo.length = pathIterator(iterator, x1, y1);\n          x1 = current[5];\n          y1 = current[6];\n          break;\n        case 'Q':\n          iterator = getPointOnQuadraticBezierIterator(\n            x1,\n            y1,\n            current[1],\n            current[2],\n            current[3],\n            current[4]\n          );\n          angleFinder = getTangentQuadraticIterator(\n            x1,\n            y1,\n            current[1],\n            current[2],\n            current[3],\n            current[4]\n          );\n          tempInfo.iterator = iterator;\n          tempInfo.angleFinder = angleFinder;\n          tempInfo.length = pathIterator(iterator, x1, y1);\n          x1 = current[3];\n          y1 = current[4];\n          break;\n        case 'Z':\n        case 'z':\n          // we add those in order to ease calculations later\n          tempInfo.destX = x2;\n          tempInfo.destY = y2;\n          tempInfo.length = calcLineLength(x1, y1, x2, y2);\n          x1 = x2;\n          y1 = y2;\n          break;\n      }\n      totalLength += tempInfo.length;\n      info.push(tempInfo);\n    }\n    info.push({ length: totalLength, x: x1, y: y1 });\n    return info;\n  }\n\n  function getPointOnPath(path, distance, infos) {\n    if (!infos) {\n      infos = getPathSegmentsInfo(path);\n    }\n    var i = 0;\n    while ((distance - infos[i].length > 0) && i < (infos.length - 2)) {\n      distance -= infos[i].length;\n      i++;\n    }\n    // var distance = infos[infos.length - 1] * perc;\n    var segInfo = infos[i], segPercent = distance / segInfo.length,\n        command = segInfo.command, segment = path[i], info;\n\n    switch (command) {\n      case 'M':\n        return { x: segInfo.x, y: segInfo.y, angle: 0 };\n      case 'Z':\n      case 'z':\n        info = new fabric.Point(segInfo.x, segInfo.y).lerp(\n          new fabric.Point(segInfo.destX, segInfo.destY),\n          segPercent\n        );\n        info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);\n        return info;\n      case 'L':\n        info = new fabric.Point(segInfo.x, segInfo.y).lerp(\n          new fabric.Point(segment[1], segment[2]),\n          segPercent\n        );\n        info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);\n        return info;\n      case 'C':\n        return findPercentageForDistance(segInfo, distance);\n      case 'Q':\n        return findPercentageForDistance(segInfo, distance);\n    }\n  }\n\n  /**\n   *\n   * @param {string} pathString\n   * @return {(string|number)[][]} An array of SVG path commands\n   * @example <caption>Usage</caption>\n   * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n   *   ['M', 3, 4],\n   *   ['Q', 3, 5, 2, 1, 4, 0],\n   *   ['Q', 9, 12, 2, 1, 4, 0],\n   * ];\n   *\n   */\n  function parsePath(pathString) {\n    var result = [],\n        coords = [],\n        currentPath,\n        parsed,\n        re = fabric.rePathCommand,\n        rNumber = '[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?\\\\s*',\n        rNumberCommaWsp = '(' + rNumber + ')' + fabric.commaWsp,\n        rFlagCommaWsp = '([01])' + fabric.commaWsp + '?',\n        rArcSeq = rNumberCommaWsp + '?' + rNumberCommaWsp + '?' + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp +\n          rNumberCommaWsp + '?(' + rNumber + ')',\n        regArcArgumentSequence = new RegExp(rArcSeq, 'g'),\n        match,\n        coordsStr,\n        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        path;\n    if (!pathString || !pathString.match) {\n      return result;\n    }\n    path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n\n    for (var i = 0, coordsParsed, len = path.length; i < len; i++) {\n      currentPath = path[i];\n\n      coordsStr = currentPath.slice(1).trim();\n      coords.length = 0;\n\n      var command = currentPath.charAt(0);\n      coordsParsed = [command];\n\n      if (command.toLowerCase() === 'a') {\n        // arcs have special flags that apparently don't require spaces so handle special\n        for (var args; (args = regArcArgumentSequence.exec(coordsStr));) {\n          for (var j = 1; j < args.length; j++) {\n            coords.push(args[j]);\n          }\n        }\n      }\n      else {\n        while ((match = re.exec(coordsStr))) {\n          coords.push(match[0]);\n        }\n      }\n\n      for (var j = 0, jlen = coords.length; j < jlen; j++) {\n        parsed = parseFloat(coords[j]);\n        if (!isNaN(parsed)) {\n          coordsParsed.push(parsed);\n        }\n      }\n\n      var commandLength = commandLengths[command.toLowerCase()],\n          repeatedCommand = repeatedCommands[command] || command;\n\n      if (coordsParsed.length - 1 > commandLength) {\n        for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\n          result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\n          command = repeatedCommand;\n        }\n      }\n      else {\n        result.push(coordsParsed);\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   *\n   * Converts points to a smooth SVG path\n   * @param {{ x: number,y: number }[]} points Array of points\n   * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n   * @return {(string|number)[][]} An array of SVG path commands\n   */\n  function getSmoothPathFromPoints(points, correction) {\n    var path = [], i,\n        p1 = new fabric.Point(points[0].x, points[0].y),\n        p2 = new fabric.Point(points[1].x, points[1].y),\n        len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;\n    correction = correction || 0;\n\n    if (manyPoints) {\n      multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n      multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n    }\n    path.push(['M', p1.x - multSignX * correction, p1.y - multSignY * correction]);\n    for (i = 1; i < len; i++) {\n      if (!p1.eq(p2)) {\n        var midPoint = p1.midPointFrom(p2);\n        // p1 is our bezier control point\n        // midpoint is our endpoint\n        // start point is p(i-1) value.\n        path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\n      }\n      p1 = points[i];\n      if ((i + 1) < points.length) {\n        p2 = points[i + 1];\n      }\n    }\n    if (manyPoints) {\n      multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n      multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n    }\n    path.push(['L', p1.x + multSignX * correction, p1.y + multSignY * correction]);\n    return path;\n  }\n  /**\n   * Transform a path by transforming each segment.\n   * it has to be a simplified path or it won't work.\n   * WARNING: this depends from pathOffset for correct operation\n   * @param {Array} path fabricJS parsed and simplified path commands\n   * @param {Array} transform matrix that represent the transformation\n   * @param {Object} [pathOffset] the fabric.Path pathOffset\n   * @param {Number} pathOffset.x\n   * @param {Number} pathOffset.y\n   * @returns {Array} the transformed path\n   */\n  function transformPath(path, transform, pathOffset) {\n    if (pathOffset) {\n      transform = fabric.util.multiplyTransformMatrices(\n        transform,\n        [1, 0, 0, 1, -pathOffset.x, -pathOffset.y]\n      );\n    }\n    return path.map(function(pathSegment) {\n      var newSegment = pathSegment.slice(0), point = {};\n      for (var i = 1; i < pathSegment.length - 1; i += 2) {\n        point.x = pathSegment[i];\n        point.y = pathSegment[i + 1];\n        point = fabric.util.transformPoint(point, transform);\n        newSegment[i] = point.x;\n        newSegment[i + 1] = point.y;\n      }\n      return newSegment;\n    });\n  }\n\n  /**\n   * Join path commands to go back to svg format\n   * @param {Array} pathData fabricJS parsed path commands\n   * @return {String} joined path 'M 0 0 L 20 30'\n   */\n  fabric.util.joinPath = function(pathData) {\n    return pathData.map(function (segment) { return segment.join(' '); }).join(' ');\n  };\n  fabric.util.parsePath = parsePath;\n  fabric.util.makePathSimpler = makePathSimpler;\n  fabric.util.getSmoothPathFromPoints = getSmoothPathFromPoints;\n  fabric.util.getPathSegmentsInfo = getPathSegmentsInfo;\n  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n  fabric.util.getPointOnPath = getPointOnPath;\n  fabric.util.transformPath = transformPath;\n})();\n(function() {\n\n  var slice = Array.prototype.slice;\n\n  /**\n   * Invokes method on all items in a given array\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} method Name of a method to invoke\n   * @return {Array}\n   */\n  function invoke(array, method) {\n    var args = slice.call(arguments, 2), result = [];\n    for (var i = 0, len = array.length; i < len; i++) {\n      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * Finds maximum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */\n  function max(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 >= value2;\n    });\n  }\n\n  /**\n   * Finds minimum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */\n  function min(array, byProperty) {\n    return find(array, byProperty, function(value1, value2) {\n      return value1 < value2;\n    });\n  }\n\n  /**\n   * @private\n   */\n  function fill(array, value) {\n    var k = array.length;\n    while (k--) {\n      array[k] = value;\n    }\n    return array;\n  }\n\n  /**\n   * @private\n   */\n  function find(array, byProperty, condition) {\n    if (!array || array.length === 0) {\n      return;\n    }\n\n    var i = array.length - 1,\n        result = byProperty ? array[i][byProperty] : array[i];\n    if (byProperty) {\n      while (i--) {\n        if (condition(array[i][byProperty], result)) {\n          result = array[i][byProperty];\n        }\n      }\n    }\n    else {\n      while (i--) {\n        if (condition(array[i], result)) {\n          result = array[i];\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @namespace fabric.util.array\n   */\n  fabric.util.array = {\n    fill: fill,\n    invoke: invoke,\n    min: min,\n    max: max\n  };\n\n})();\n(function() {\n  /**\n   * Copies all enumerable properties of one js object to another\n   * this does not and cannot compete with generic utils.\n   * Does not clone or extend fabric.Object subclasses.\n   * This is mostly for internal use and has extra handling for fabricJS objects\n   * it skips the canvas and group properties in deep cloning.\n   * @memberOf fabric.util.object\n   * @param {Object} destination Where to copy to\n   * @param {Object} source Where to copy from\n   * @param {Boolean} [deep] Whether to extend nested objects\n   * @return {Object}\n   */\n\n  function extend(destination, source, deep) {\n    // JScript DontEnum bug is not taken care of\n    // the deep clone is for internal use, is not meant to avoid\n    // javascript traps or cloning html element or self referenced objects.\n    if (deep) {\n      if (!fabric.isLikelyNode && source instanceof Element) {\n        // avoid cloning deep images, canvases,\n        destination = source;\n      }\n      else if (source instanceof Array) {\n        destination = [];\n        for (var i = 0, len = source.length; i < len; i++) {\n          destination[i] = extend({ }, source[i], deep);\n        }\n      }\n      else if (source && typeof source === 'object') {\n        for (var property in source) {\n          if (property === 'canvas' || property === 'group') {\n            // we do not want to clone this props at all.\n            // we want to keep the keys in the copy\n            destination[property] = null;\n          }\n          else if (source.hasOwnProperty(property)) {\n            destination[property] = extend({ }, source[property], deep);\n          }\n        }\n      }\n      else {\n        // this sounds odd for an extend but is ok for recursive use\n        destination = source;\n      }\n    }\n    else {\n      for (var property in source) {\n        destination[property] = source[property];\n      }\n    }\n    return destination;\n  }\n\n  /**\n   * Creates an empty object and copies all enumerable properties of another object to it\n   * This method is mostly for internal use, and not intended for duplicating shapes in canvas. \n   * @memberOf fabric.util.object\n   * @param {Object} object Object to clone\n   * @param {Boolean} [deep] Whether to clone nested objects\n   * @return {Object}\n   */\n\n  //TODO: this function return an empty object if you try to clone null\n  function clone(object, deep) {\n    return extend({ }, object, deep);\n  }\n\n  /** @namespace fabric.util.object */\n  fabric.util.object = {\n    extend: extend,\n    clone: clone\n  };\n  fabric.util.object.extend(fabric.util, fabric.Observable);\n})();\n(function() {\n\n  /**\n   * Camelizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to camelize\n   * @return {String} Camelized version of a string\n   */\n  function camelize(string) {\n    return string.replace(/-+(.)?/g, function(match, character) {\n      return character ? character.toUpperCase() : '';\n    });\n  }\n\n  /**\n   * Capitalizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to capitalize\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n   * and other letters stay untouched, if false first letter is capitalized\n   * and other letters are converted to lowercase.\n   * @return {String} Capitalized version of a string\n   */\n  function capitalize(string, firstLetterOnly) {\n    return string.charAt(0).toUpperCase() +\n      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n  }\n\n  /**\n   * Escapes XML in a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to escape\n   * @return {String} Escaped version of a string\n   */\n  function escapeXml(string) {\n    return string.replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  }\n\n  /**\n   * Divide a string in the user perceived single units\n   * @memberOf fabric.util.string\n   * @param {String} textstring String to escape\n   * @return {Array} array containing the graphemes\n   */\n  function graphemeSplit(textstring) {\n    var i = 0, chr, graphemes = [];\n    for (i = 0, chr; i < textstring.length; i++) {\n      if ((chr = getWholeChar(textstring, i)) === false) {\n        continue;\n      }\n      graphemes.push(chr);\n    }\n    return graphemes;\n  }\n\n  // taken from mdn in the charAt doc page.\n  function getWholeChar(str, i) {\n    var code = str.charCodeAt(i);\n\n    if (isNaN(code)) {\n      return ''; // Position not found\n    }\n    if (code < 0xD800 || code > 0xDFFF) {\n      return str.charAt(i);\n    }\n\n    // High surrogate (could change last hex to 0xDB7F to treat high private\n    // surrogates as single characters)\n    if (0xD800 <= code && code <= 0xDBFF) {\n      if (str.length <= (i + 1)) {\n        throw 'High surrogate without following low surrogate';\n      }\n      var next = str.charCodeAt(i + 1);\n      if (0xDC00 > next || next > 0xDFFF) {\n        throw 'High surrogate without following low surrogate';\n      }\n      return str.charAt(i) + str.charAt(i + 1);\n    }\n    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n    if (i === 0) {\n      throw 'Low surrogate without preceding high surrogate';\n    }\n    var prev = str.charCodeAt(i - 1);\n\n    // (could change last hex to 0xDB7F to treat high private\n    // surrogates as single characters)\n    if (0xD800 > prev || prev > 0xDBFF) {\n      throw 'Low surrogate without preceding high surrogate';\n    }\n    // We can pass over low surrogates now as the second component\n    // in a pair which we have already processed\n    return false;\n  }\n\n\n  /**\n   * String utilities\n   * @namespace fabric.util.string\n   */\n  fabric.util.string = {\n    camelize: camelize,\n    capitalize: capitalize,\n    escapeXml: escapeXml,\n    graphemeSplit: graphemeSplit\n  };\n})();\n(function() {\n\n  var slice = Array.prototype.slice, emptyFunction = function() { },\n\n      IS_DONTENUM_BUGGY = (function() {\n        for (var p in { toString: 1 }) {\n          if (p === 'toString') {\n            return false;\n          }\n        }\n        return true;\n      })(),\n\n      /** @ignore */\n      addMethods = function(klass, source, parent) {\n        for (var property in source) {\n\n          if (property in klass.prototype &&\n              typeof klass.prototype[property] === 'function' &&\n              (source[property] + '').indexOf('callSuper') > -1) {\n\n            klass.prototype[property] = (function(property) {\n              return function() {\n\n                var superclass = this.constructor.superclass;\n                this.constructor.superclass = parent;\n                var returnValue = source[property].apply(this, arguments);\n                this.constructor.superclass = superclass;\n\n                if (property !== 'initialize') {\n                  return returnValue;\n                }\n              };\n            })(property);\n          }\n          else {\n            klass.prototype[property] = source[property];\n          }\n\n          if (IS_DONTENUM_BUGGY) {\n            if (source.toString !== Object.prototype.toString) {\n              klass.prototype.toString = source.toString;\n            }\n            if (source.valueOf !== Object.prototype.valueOf) {\n              klass.prototype.valueOf = source.valueOf;\n            }\n          }\n        }\n      };\n\n  function Subclass() { }\n\n  function callSuper(methodName) {\n    var parentMethod = null,\n        _this = this;\n\n    // climb prototype chain to find method not equal to callee's method\n    while (_this.constructor.superclass) {\n      var superClassMethod = _this.constructor.superclass.prototype[methodName];\n      if (_this[methodName] !== superClassMethod) {\n        parentMethod = superClassMethod;\n        break;\n      }\n      // eslint-disable-next-line\n      _this = _this.constructor.superclass.prototype;\n    }\n\n    if (!parentMethod) {\n      return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\n    }\n\n    return (arguments.length > 1)\n      ? parentMethod.apply(this, slice.call(arguments, 1))\n      : parentMethod.call(this);\n  }\n\n  /**\n   * Helper for creation of \"classes\".\n   * @memberOf fabric.util\n   * @param {Function} [parent] optional \"Class\" to inherit from\n   * @param {Object} [properties] Properties shared by all instances of this class\n   *                  (be careful modifying objects defined here as this would affect all instances)\n   */\n  function createClass() {\n    var parent = null,\n        properties = slice.call(arguments, 0);\n\n    if (typeof properties[0] === 'function') {\n      parent = properties.shift();\n    }\n    function klass() {\n      this.initialize.apply(this, arguments);\n    }\n\n    klass.superclass = parent;\n    klass.subclasses = [];\n\n    if (parent) {\n      Subclass.prototype = parent.prototype;\n      klass.prototype = new Subclass();\n      parent.subclasses.push(klass);\n    }\n    for (var i = 0, length = properties.length; i < length; i++) {\n      addMethods(klass, properties[i], parent);\n    }\n    if (!klass.prototype.initialize) {\n      klass.prototype.initialize = emptyFunction;\n    }\n    klass.prototype.constructor = klass;\n    klass.prototype.callSuper = callSuper;\n    return klass;\n  }\n\n  fabric.util.createClass = createClass;\n})();\n(function () {\n  // since ie11 can use addEventListener but they do not support options, i need to check\n  var couldUseAttachEvent = !!fabric.document.createElement('div').attachEvent,\n      touchEvents = ['touchstart', 'touchmove', 'touchend'];\n  /**\n   * Adds an event listener to an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.addListener = function(element, eventName, handler, options) {\n    element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);\n  };\n\n  /**\n   * Removes an event listener from an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */\n  fabric.util.removeListener = function(element, eventName, handler, options) {\n    element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);\n  };\n\n  function getTouchInfo(event) {\n    var touchProp = event.changedTouches;\n    if (touchProp && touchProp[0]) {\n      return touchProp[0];\n    }\n    return event;\n  }\n\n  fabric.util.getPointer = function(event) {\n    var element = event.target,\n        scroll = fabric.util.getScrollLeftTop(element),\n        _evt = getTouchInfo(event);\n    return {\n      x: _evt.clientX + scroll.left,\n      y: _evt.clientY + scroll.top\n    };\n  };\n\n  fabric.util.isTouchEvent = function(event) {\n    return touchEvents.indexOf(event.type) > -1 || event.pointerType === 'touch';\n  };\n})();\n(function () {\n\n  /**\n   * Cross-browser wrapper for setting element's style\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {Object} styles\n   * @return {HTMLElement} Element that was passed as a first argument\n   */\n  function setStyle(element, styles) {\n    var elementStyle = element.style;\n    if (!elementStyle) {\n      return element;\n    }\n    if (typeof styles === 'string') {\n      element.style.cssText += ';' + styles;\n      return styles.indexOf('opacity') > -1\n        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\n        : element;\n    }\n    for (var property in styles) {\n      if (property === 'opacity') {\n        setOpacity(element, styles[property]);\n      }\n      else {\n        var normalizedProperty = (property === 'float' || property === 'cssFloat')\n          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\n          : property;\n        elementStyle.setProperty(normalizedProperty, styles[property]);\n      }\n    }\n    return element;\n  }\n\n  var parseEl = fabric.document.createElement('div'),\n      supportsOpacity = typeof parseEl.style.opacity === 'string',\n      supportsFilters = typeof parseEl.style.filter === 'string',\n      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\n\n      /** @ignore */\n      setOpacity = function (element) { return element; };\n\n  if (supportsOpacity) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      element.style.opacity = value;\n      return element;\n    };\n  }\n  else if (supportsFilters) {\n    /** @ignore */\n    setOpacity = function(element, value) {\n      var es = element.style;\n      if (element.currentStyle && !element.currentStyle.hasLayout) {\n        es.zoom = 1;\n      }\n      if (reOpacity.test(es.filter)) {\n        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\n        es.filter = es.filter.replace(reOpacity, value);\n      }\n      else {\n        es.filter += ' alpha(opacity=' + (value * 100) + ')';\n      }\n      return element;\n    };\n  }\n\n  fabric.util.setStyle = setStyle;\n\n})();\n(function() {\n\n  var _slice = Array.prototype.slice;\n\n  /**\n   * Takes id and returns an element with that id (if one exists in a document)\n   * @memberOf fabric.util\n   * @param {String|HTMLElement} id\n   * @return {HTMLElement|null}\n   */\n  function getById(id) {\n    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\n  }\n\n  var sliceCanConvertNodelists,\n      /**\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\n       * @memberOf fabric.util\n       * @param {Object} arrayLike\n       * @return {Array}\n       */\n      toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n      };\n\n  try {\n    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n  }\n  catch (err) { }\n\n  if (!sliceCanConvertNodelists) {\n    toArray = function(arrayLike) {\n      var arr = new Array(arrayLike.length), i = arrayLike.length;\n      while (i--) {\n        arr[i] = arrayLike[i];\n      }\n      return arr;\n    };\n  }\n\n  /**\n   * Creates specified element with specified attributes\n   * @memberOf fabric.util\n   * @param {String} tagName Type of an element to create\n   * @param {Object} [attributes] Attributes to set on an element\n   * @return {HTMLElement} Newly created element\n   */\n  function makeElement(tagName, attributes) {\n    var el = fabric.document.createElement(tagName);\n    for (var prop in attributes) {\n      if (prop === 'class') {\n        el.className = attributes[prop];\n      }\n      else if (prop === 'for') {\n        el.htmlFor = attributes[prop];\n      }\n      else {\n        el.setAttribute(prop, attributes[prop]);\n      }\n    }\n    return el;\n  }\n\n  /**\n   * Adds class to an element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to add class to\n   * @param {String} className Class to add to an element\n   */\n  function addClass(element, className) {\n    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\n      element.className += (element.className ? ' ' : '') + className;\n    }\n  }\n\n  /**\n   * Wraps element with another element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to wrap\n   * @param {HTMLElement|String} wrapper Element to wrap with\n   * @param {Object} [attributes] Attributes to set on a wrapper\n   * @return {HTMLElement} wrapper\n   */\n  function wrapElement(element, wrapper, attributes) {\n    if (typeof wrapper === 'string') {\n      wrapper = makeElement(wrapper, attributes);\n    }\n    if (element.parentNode) {\n      element.parentNode.replaceChild(wrapper, element);\n    }\n    wrapper.appendChild(element);\n    return wrapper;\n  }\n\n  /**\n   * Returns element scroll offsets\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to operate on\n   * @return {Object} Object with left/top values\n   */\n  function getScrollLeftTop(element) {\n\n    var left = 0,\n        top = 0,\n        docElement = fabric.document.documentElement,\n        body = fabric.document.body || {\n          scrollLeft: 0, scrollTop: 0\n        };\n\n    // While loop checks (and then sets element to) .parentNode OR .host\n    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n    //  but the .parentNode of a root ShadowDOM node will always be null, instead\n    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n    while (element && (element.parentNode || element.host)) {\n\n      // Set element to element parent, or 'host' in case of ShadowDOM\n      element = element.parentNode || element.host;\n\n      if (element === fabric.document) {\n        left = body.scrollLeft || docElement.scrollLeft || 0;\n        top = body.scrollTop ||  docElement.scrollTop || 0;\n      }\n      else {\n        left += element.scrollLeft || 0;\n        top += element.scrollTop || 0;\n      }\n\n      if (element.nodeType === 1 && element.style.position === 'fixed') {\n        break;\n      }\n    }\n\n    return { left: left, top: top };\n  }\n\n  /**\n   * Returns offset for a given element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get offset for\n   * @return {Object} Object with \"left\" and \"top\" properties\n   */\n  function getElementOffset(element) {\n    var docElem,\n        doc = element && element.ownerDocument,\n        box = { left: 0, top: 0 },\n        offset = { left: 0, top: 0 },\n        scrollLeftTop,\n        offsetAttributes = {\n          borderLeftWidth: 'left',\n          borderTopWidth:  'top',\n          paddingLeft:     'left',\n          paddingTop:      'top'\n        };\n\n    if (!doc) {\n      return offset;\n    }\n\n    for (var attr in offsetAttributes) {\n      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n    }\n\n    docElem = doc.documentElement;\n    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\n      box = element.getBoundingClientRect();\n    }\n\n    scrollLeftTop = getScrollLeftTop(element);\n\n    return {\n      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\n    };\n  }\n\n  /**\n   * Returns style attribute value of a given element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get style attribute for\n   * @param {String} attr Style attribute to get for element\n   * @return {String} Style attribute value of the given element.\n   */\n  var getElementStyle;\n  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n    getElementStyle = function(element, attr) {\n      var style = fabric.document.defaultView.getComputedStyle(element, null);\n      return style ? style[attr] : undefined;\n    };\n  }\n  else {\n    getElementStyle = function(element, attr) {\n      var value = element.style[attr];\n      if (!value && element.currentStyle) {\n        value = element.currentStyle[attr];\n      }\n      return value;\n    };\n  }\n\n  (function () {\n    var style = fabric.document.documentElement.style,\n        selectProp = 'userSelect' in style\n          ? 'userSelect'\n          : 'MozUserSelect' in style\n            ? 'MozUserSelect'\n            : 'WebkitUserSelect' in style\n              ? 'WebkitUserSelect'\n              : 'KhtmlUserSelect' in style\n                ? 'KhtmlUserSelect'\n                : '';\n\n    /**\n     * Makes element unselectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make unselectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementUnselectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = fabric.util.falseFunction;\n      }\n      if (selectProp) {\n        element.style[selectProp] = 'none';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = 'on';\n      }\n      return element;\n    }\n\n    /**\n     * Makes element selectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make selectable\n     * @return {HTMLElement} Element that was passed in\n     */\n    function makeElementSelectable(element) {\n      if (typeof element.onselectstart !== 'undefined') {\n        element.onselectstart = null;\n      }\n      if (selectProp) {\n        element.style[selectProp] = '';\n      }\n      else if (typeof element.unselectable === 'string') {\n        element.unselectable = '';\n      }\n      return element;\n    }\n\n    fabric.util.makeElementUnselectable = makeElementUnselectable;\n    fabric.util.makeElementSelectable = makeElementSelectable;\n  })();\n\n  function getNodeCanvas(element) {\n    var impl = fabric.jsdomImplForWrapper(element);\n    return impl._canvas || impl._image;\n  };\n\n  function cleanUpJsdomNode(element) {\n    if (!fabric.isLikelyNode) {\n      return;\n    }\n    var impl = fabric.jsdomImplForWrapper(element);\n    if (impl) {\n      impl._image = null;\n      impl._canvas = null;\n      // unsure if necessary\n      impl._currentSrc = null;\n      impl._attributes = null;\n      impl._classList = null;\n    }\n  }\n\n  function setImageSmoothing(ctx, value) {\n    ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\n      || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\n    ctx.imageSmoothingEnabled = value;\n  }\n\n  /**\n   * setImageSmoothing sets the context imageSmoothingEnabled property.\n   * Used by canvas and by ImageObject.\n   * @memberOf fabric.util\n   * @since 4.0.0\n   * @param {HTMLRenderingContext2D} ctx to set on\n   * @param {Boolean} value true or false\n   */\n  fabric.util.setImageSmoothing = setImageSmoothing;\n  fabric.util.getById = getById;\n  fabric.util.toArray = toArray;\n  fabric.util.addClass = addClass;\n  fabric.util.makeElement = makeElement;\n  fabric.util.wrapElement = wrapElement;\n  fabric.util.getScrollLeftTop = getScrollLeftTop;\n  fabric.util.getElementOffset = getElementOffset;\n  fabric.util.getNodeCanvas = getNodeCanvas;\n  fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\n\n})();\n(function() {\n\n  function addParamToUrl(url, param) {\n    return url + (/\\?/.test(url) ? '&' : '?') + param;\n  }\n\n  function emptyFn() { }\n\n  /**\n   * Cross-browser abstraction for sending XMLHttpRequest\n   * @memberOf fabric.util\n   * @param {String} url URL to send XMLHttpRequest to\n   * @param {Object} [options] Options object\n   * @param {String} [options.method=\"GET\"]\n   * @param {String} [options.parameters] parameters to append to url in GET or in body\n   * @param {String} [options.body] body to send with POST or PUT request\n   * @param {Function} options.onComplete Callback to invoke when request is completed\n   * @return {XMLHttpRequest} request\n   */\n  function request(url, options) {\n    options || (options = { });\n\n    var method = options.method ? options.method.toUpperCase() : 'GET',\n        onComplete = options.onComplete || function() { },\n        xhr = new fabric.window.XMLHttpRequest(),\n        body = options.body || options.parameters;\n\n    /** @ignore */\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === 4) {\n        onComplete(xhr);\n        xhr.onreadystatechange = emptyFn;\n      }\n    };\n\n    if (method === 'GET') {\n      body = null;\n      if (typeof options.parameters === 'string') {\n        url = addParamToUrl(url, options.parameters);\n      }\n    }\n\n    xhr.open(method, url, true);\n\n    if (method === 'POST' || method === 'PUT') {\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n\n    xhr.send(body);\n    return xhr;\n  }\n\n  fabric.util.request = request;\n})();\n/**\n * Wrapper around `console.log` (when available)\n * @param {*} [values] Values to log\n */\nfabric.log = console.log;\n\n/**\n * Wrapper around `console.warn` (when available)\n * @param {*} [values] Values to log as a warning\n */\nfabric.warn = console.warn;\n(function () {\n\n  var extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone;\n\n  /**\n   * @typedef {Object} AnimationOptions\n   * Animation of a value or list of values.\n   * When using lists, think of something like this:\n   * fabric.util.animate({\n   *   startValue: [1, 2, 3],\n   *   endValue: [2, 4, 6],\n   *   onChange: function([a, b, c]) {\n   *     canvas.zoomToPoint({x: b, y: c}, a)\n   *     canvas.renderAll()\n   *   }\n   * });\n   * @example\n   * @property {Function} [onChange] Callback; invoked on every value change\n   * @property {Function} [onComplete] Callback; invoked when value change is completed\n   * @example\n   * // Note: startValue, endValue, and byValue must match the type\n   * var animationOptions = { startValue: 0, endValue: 1, byValue: 0.25 }\n   * var animationOptions = { startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] }\n   * @property {number | number[]} [startValue=0] Starting value\n   * @property {number | number[]} [endValue=100] Ending value\n   * @property {number | number[]} [byValue=100] Value to modify the property by\n   * @property {Function} [easing] Easing function\n   * @property {Number} [duration=500] Duration of change (in ms)\n   * @property {Function} [abort] Additional function with logic. If returns true, animation aborts.\n   *\n   * @typedef {() => void} CancelFunction\n   *\n   * @typedef {Object} AnimationCurrentState\n   * @property {number | number[]} currentValue value in range [`startValue`, `endValue`]\n   * @property {number} completionRate value in range [0, 1]\n   * @property {number} durationRate value in range [0, 1]\n   *\n   * @typedef {(AnimationOptions & AnimationCurrentState & { cancel: CancelFunction }} AnimationContext\n   */\n\n  /**\n   * Array holding all running animations\n   * @memberof fabric\n   * @type {AnimationContext[]}\n   */\n  var RUNNING_ANIMATIONS = [];\n  fabric.util.object.extend(RUNNING_ANIMATIONS, {\n\n    /**\n     * cancel all running animations at the next requestAnimFrame\n     * @returns {AnimationContext[]}\n     */\n    cancelAll: function () {\n      var animations = this.splice(0);\n      animations.forEach(function (animation) {\n        animation.cancel();\n      });\n      return animations;\n    },\n\n    /**\n     * cancel all running animations attached to canvas at the next requestAnimFrame\n     * @param {fabric.Canvas} canvas\n     * @returns {AnimationContext[]}\n     */\n    cancelByCanvas: function (canvas) {\n      if (!canvas) {\n        return [];\n      }\n      var cancelled = this.filter(function (animation) {\n        return typeof animation.target === 'object' && animation.target.canvas === canvas;\n      });\n      cancelled.forEach(function (animation) {\n        animation.cancel();\n      });\n      return cancelled;\n    },\n\n    /**\n     * cancel all running animations for target at the next requestAnimFrame\n     * @param {*} target\n     * @returns {AnimationContext[]}\n     */\n    cancelByTarget: function (target) {\n      var cancelled = this.findAnimationsByTarget(target);\n      cancelled.forEach(function (animation) {\n        animation.cancel();\n      });\n      return cancelled;\n    },\n\n    /**\n     *\n     * @param {CancelFunction} cancelFunc the function returned by animate\n     * @returns {number}\n     */\n    findAnimationIndex: function (cancelFunc) {\n      return this.indexOf(this.findAnimation(cancelFunc));\n    },\n\n    /**\n     *\n     * @param {CancelFunction} cancelFunc the function returned by animate\n     * @returns {AnimationContext | undefined} animation's options object\n     */\n    findAnimation: function (cancelFunc) {\n      return this.find(function (animation) {\n        return animation.cancel === cancelFunc;\n      });\n    },\n\n    /**\n     *\n     * @param {*} target the object that is assigned to the target property of the animation context\n     * @returns {AnimationContext[]} array of animation options object associated with target\n     */\n    findAnimationsByTarget: function (target) {\n      if (!target) {\n        return [];\n      }\n      return this.filter(function (animation) {\n        return animation.target === target;\n      });\n    }\n  });\n\n  function noop() {\n    return false;\n  }\n\n  function defaultEasing(t, b, c, d) {\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n  }\n\n  /**\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {AnimationOptions} [options] Animation options\n   * @example\n   * // Note: startValue, endValue, and byValue must match the type\n   * fabric.util.animate({ startValue: 0, endValue: 1, byValue: 0.25 })\n   * fabric.util.animate({ startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] })\n   * @returns {CancelFunction} cancel function\n   */\n  function animate(options) {\n    options || (options = {});\n    var cancel = false,\n        context,\n        removeFromRegistry = function () {\n          var index = fabric.runningAnimations.indexOf(context);\n          return index > -1 && fabric.runningAnimations.splice(index, 1)[0];\n        };\n\n    context = extend(clone(options), {\n      cancel: function () {\n        cancel = true;\n        return removeFromRegistry();\n      },\n      currentValue: 'startValue' in options ? options.startValue : 0,\n      completionRate: 0,\n      durationRate: 0\n    });\n    fabric.runningAnimations.push(context);\n\n    requestAnimFrame(function(timestamp) {\n      var start = timestamp || +new Date(),\n          duration = options.duration || 500,\n          finish = start + duration, time,\n          onChange = options.onChange || noop,\n          abort = options.abort || noop,\n          onComplete = options.onComplete || noop,\n          easing = options.easing || defaultEasing,\n          isMany = 'startValue' in options ? options.startValue.length > 0 : false,\n          startValue = 'startValue' in options ? options.startValue : 0,\n          endValue = 'endValue' in options ? options.endValue : 100,\n          byValue = options.byValue || (isMany ? startValue.map(function(value, i) {\n            return endValue[i] - startValue[i];\n          }) : endValue - startValue);\n\n      options.onStart && options.onStart();\n\n      (function tick(ticktime) {\n        time = ticktime || +new Date();\n        var currentTime = time > finish ? duration : (time - start),\n            timePerc = currentTime / duration,\n            current = isMany ? startValue.map(function(_value, i) {\n              return easing(currentTime, startValue[i], byValue[i], duration);\n            }) : easing(currentTime, startValue, byValue, duration),\n            valuePerc = isMany ? Math.abs((current[0] - startValue[0]) / byValue[0])\n              : Math.abs((current - startValue) / byValue);\n        //  update context\n        context.currentValue = isMany ? current.slice() : current;\n        context.completionRate = valuePerc;\n        context.durationRate = timePerc;\n        if (cancel) {\n          return;\n        }\n        if (abort(current, valuePerc, timePerc)) {\n          removeFromRegistry();\n          return;\n        }\n        if (time > finish) {\n          //  update context\n          context.currentValue = isMany ? endValue.slice() : endValue;\n          context.completionRate = 1;\n          context.durationRate = 1;\n          //  execute callbacks\n          onChange(isMany ? endValue.slice() : endValue, 1, 1);\n          onComplete(endValue, 1, 1);\n          removeFromRegistry();\n          return;\n        }\n        else {\n          onChange(current, valuePerc, timePerc);\n          requestAnimFrame(tick);\n        }\n      })(start);\n    });\n\n    return context.cancel;\n  }\n\n  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\n                          fabric.window.webkitRequestAnimationFrame ||\n                          fabric.window.mozRequestAnimationFrame    ||\n                          fabric.window.oRequestAnimationFrame      ||\n                          fabric.window.msRequestAnimationFrame     ||\n                          function(callback) {\n                            return fabric.window.setTimeout(callback, 1000 / 60);\n                          };\n\n  var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\n\n  /**\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n   * @memberOf fabric.util\n   * @param {Function} callback Callback to invoke\n   * @param {DOMElement} element optional Element to associate with animation\n   */\n  function requestAnimFrame() {\n    return _requestAnimFrame.apply(fabric.window, arguments);\n  }\n\n  function cancelAnimFrame() {\n    return _cancelAnimFrame.apply(fabric.window, arguments);\n  }\n\n  fabric.util.animate = animate;\n  fabric.util.requestAnimFrame = requestAnimFrame;\n  fabric.util.cancelAnimFrame = cancelAnimFrame;\n  fabric.runningAnimations = RUNNING_ANIMATIONS;\n})();\n(function() {\n  // Calculate an in-between color. Returns a \"rgba()\" string.\n  // Credit: Edwin Martin <edwin@bitstorm.org>\n  //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\n  function calculateColor(begin, end, pos) {\n    var color = 'rgba('\n        + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\n        + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\n        + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\n\n    color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\n    color += ')';\n    return color;\n  }\n\n  /**\n   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {String} fromColor The starting color in hex or rgb(a) format.\n   * @param {String} toColor The starting color in hex or rgb(a) format.\n   * @param {Number} [duration] Duration of change (in ms).\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\n   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\n   * @returns {Function} abort function\n   */\n  function animateColor(fromColor, toColor, duration, options) {\n    var startColor = new fabric.Color(fromColor).getSource(),\n        endColor = new fabric.Color(toColor).getSource(),\n        originalOnComplete = options.onComplete,\n        originalOnChange = options.onChange;\n    options = options || {};\n\n    return fabric.util.animate(fabric.util.object.extend(options, {\n      duration: duration || 500,\n      startValue: startColor,\n      endValue: endColor,\n      byValue: endColor,\n      easing: function (currentTime, startValue, byValue, duration) {\n        var posValue = options.colorEasing\n          ? options.colorEasing(currentTime, duration)\n          : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\n        return calculateColor(startValue, byValue, posValue);\n      },\n      // has to take in account for color restoring;\n      onComplete: function(current, valuePerc, timePerc) {\n        if (originalOnComplete) {\n          return originalOnComplete(\n            calculateColor(endColor, endColor, 0),\n            valuePerc,\n            timePerc\n          );\n        }\n      },\n      onChange: function(current, valuePerc, timePerc) {\n        if (originalOnChange) {\n          if (Array.isArray(current)) {\n            return originalOnChange(\n              calculateColor(current, current, 0),\n              valuePerc,\n              timePerc\n            );\n          }\n          originalOnChange(current, valuePerc, timePerc);\n        }\n      }\n    }));\n  }\n\n  fabric.util.animateColor = animateColor;\n\n})();\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Point) {\n    fabric.warn('fabric.Point is already defined');\n    return;\n  }\n\n  fabric.Point = Point;\n\n  /**\n   * Point class\n   * @class fabric.Point\n   * @memberOf fabric\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @return {fabric.Point} thisArg\n   */\n  function Point(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  Point.prototype = /** @lends fabric.Point.prototype */ {\n\n    type: 'point',\n\n    constructor: Point,\n\n    /**\n     * Adds another point to this one and returns another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point instance with added values\n     */\n    add: function (that) {\n      return new Point(this.x + that.x, this.y + that.y);\n    },\n\n    /**\n     * Adds another point to this one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    addEquals: function (that) {\n      this.x += that.x;\n      this.y += that.y;\n      return this;\n    },\n\n    /**\n     * Adds value to this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point} new Point with added value\n     */\n    scalarAdd: function (scalar) {\n      return new Point(this.x + scalar, this.y + scalar);\n    },\n\n    /**\n     * Adds value to this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    scalarAddEquals: function (scalar) {\n      this.x += scalar;\n      this.y += scalar;\n      return this;\n    },\n\n    /**\n     * Subtracts another point from this point and returns a new one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point object with subtracted values\n     */\n    subtract: function (that) {\n      return new Point(this.x - that.x, this.y - that.y);\n    },\n\n    /**\n     * Subtracts another point from this point\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    subtractEquals: function (that) {\n      this.x -= that.x;\n      this.y -= that.y;\n      return this;\n    },\n\n    /**\n     * Subtracts value from this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    scalarSubtract: function (scalar) {\n      return new Point(this.x - scalar, this.y - scalar);\n    },\n\n    /**\n     * Subtracts value from this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    scalarSubtractEquals: function (scalar) {\n      this.x -= scalar;\n      this.y -= scalar;\n      return this;\n    },\n\n    /**\n     * Multiplies this point by a value and returns a new one\n     * TODO: rename in scalarMultiply in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    multiply: function (scalar) {\n      return new Point(this.x * scalar, this.y * scalar);\n    },\n\n    /**\n     * Multiplies this point by a value\n     * TODO: rename in scalarMultiplyEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    multiplyEquals: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    },\n\n    /**\n     * Divides this point by a value and returns a new one\n     * TODO: rename in scalarDivide in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */\n    divide: function (scalar) {\n      return new Point(this.x / scalar, this.y / scalar);\n    },\n\n    /**\n     * Divides this point by a value\n     * TODO: rename in scalarDivideEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */\n    divideEquals: function (scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    },\n\n    /**\n     * Returns true if this point is equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    eq: function (that) {\n      return (this.x === that.x && this.y === that.y);\n    },\n\n    /**\n     * Returns true if this point is less than another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lt: function (that) {\n      return (this.x < that.x && this.y < that.y);\n    },\n\n    /**\n     * Returns true if this point is less than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    lte: function (that) {\n      return (this.x <= that.x && this.y <= that.y);\n    },\n\n    /**\n\n     * Returns true if this point is greater another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gt: function (that) {\n      return (this.x > that.x && this.y > that.y);\n    },\n\n    /**\n     * Returns true if this point is greater than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */\n    gte: function (that) {\n      return (this.x >= that.x && this.y >= that.y);\n    },\n\n    /**\n     * Returns new point which is the result of linear interpolation with this one and another one\n     * @param {fabric.Point} that\n     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n     * @return {fabric.Point}\n     */\n    lerp: function (that, t) {\n      if (typeof t === 'undefined') {\n        t = 0.5;\n      }\n      t = Math.max(Math.min(1, t), 0);\n      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n    },\n\n    /**\n     * Returns distance from this point and another one\n     * @param {fabric.Point} that\n     * @return {Number}\n     */\n    distanceFrom: function (that) {\n      var dx = this.x - that.x,\n          dy = this.y - that.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    },\n\n    /**\n     * Returns the point between this point and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    midPointFrom: function (that) {\n      return this.lerp(that);\n    },\n\n    /**\n     * Returns a new point which is the min of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    min: function (that) {\n      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n    },\n\n    /**\n     * Returns a new point which is the max of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */\n    max: function (that) {\n      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n    },\n\n    /**\n     * Returns string representation of this point\n     * @return {String}\n     */\n    toString: function () {\n      return this.x + ',' + this.y;\n    },\n\n    /**\n     * Sets x/y of this point\n     * @param {Number} x\n     * @param {Number} y\n     * @chainable\n     */\n    setXY: function (x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets x of this point\n     * @param {Number} x\n     * @chainable\n     */\n    setX: function (x) {\n      this.x = x;\n      return this;\n    },\n\n    /**\n     * Sets y of this point\n     * @param {Number} y\n     * @chainable\n     */\n    setY: function (y) {\n      this.y = y;\n      return this;\n    },\n\n    /**\n     * Sets x/y of this point from another point\n     * @param {fabric.Point} that\n     * @chainable\n     */\n    setFromPoint: function (that) {\n      this.x = that.x;\n      this.y = that.y;\n      return this;\n    },\n\n    /**\n     * Swaps x/y of this point and another point\n     * @param {fabric.Point} that\n     */\n    swap: function (that) {\n      var x = this.x,\n          y = this.y;\n      this.x = that.x;\n      this.y = that.y;\n      that.x = x;\n      that.y = y;\n    },\n\n    /**\n     * return a cloned instance of the point\n     * @return {fabric.Point}\n     */\n    clone: function () {\n      return new Point(this.x, this.y);\n    }\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Intersection) {\n    fabric.warn('fabric.Intersection is already defined');\n    return;\n  }\n\n  /**\n   * Intersection class\n   * @class fabric.Intersection\n   * @memberOf fabric\n   * @constructor\n   */\n  function Intersection(status) {\n    this.status = status;\n    this.points = [];\n  }\n\n  fabric.Intersection = Intersection;\n\n  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n\n    constructor: Intersection,\n\n    /**\n     * Appends a point to intersection\n     * @param {fabric.Point} point\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */\n    appendPoint: function (point) {\n      this.points.push(point);\n      return this;\n    },\n\n    /**\n     * Appends points to intersection\n     * @param {Array} points\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */\n    appendPoints: function (points) {\n      this.points = this.points.concat(points);\n      return this;\n    }\n  };\n\n  /**\n   * Checks if one line intersects another\n   * TODO: rename in intersectSegmentSegment\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {fabric.Point} b1\n   * @param {fabric.Point} b2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\n    var result,\n        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\n        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\n        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n    if (uB !== 0) {\n      var ua = uaT / uB,\n          ub = ubT / uB;\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n        result = new Intersection('Intersection');\n        result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n      }\n      else {\n        result = new Intersection();\n      }\n    }\n    else {\n      if (uaT === 0 || ubT === 0) {\n        result = new Intersection('Coincident');\n      }\n      else {\n        result = new Intersection('Parallel');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Checks if line intersects polygon\n   * TODO: rename in intersectSegmentPolygon\n   * fix detection of coincident\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {Array} points\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n    var result = new Intersection(),\n        length = points.length,\n        b1, b2, inter, i;\n\n    for (i = 0; i < length; i++) {\n      b1 = points[i];\n      b2 = points[(i + 1) % length];\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects another polygon\n   * @static\n   * @param {Array} points1\n   * @param {Array} points2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\n    var result = new Intersection(),\n        length = points1.length, i;\n\n    for (i = 0; i < length; i++) {\n      var a1 = points1[i],\n          a2 = points1[(i + 1) % length],\n          inter = Intersection.intersectLinePolygon(a1, a2, points2);\n\n      result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n  /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @param {Array} points\n   * @param {fabric.Point} r1\n   * @param {fabric.Point} r2\n   * @return {fabric.Intersection}\n   */\n  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\n    var min = r1.min(r2),\n        max = r1.max(r2),\n        topRight = new fabric.Point(max.x, min.y),\n        bottomLeft = new fabric.Point(min.x, max.y),\n        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\n        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\n        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\n        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\n        result = new Intersection();\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n      result.status = 'Intersection';\n    }\n    return result;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.Color) {\n    fabric.warn('fabric.Color is already defined.');\n    return;\n  }\n\n  /**\n   * Color class\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n   *\n   * @class fabric.Color\n   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\n   * @return {fabric.Color} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n   */\n  function Color(color) {\n    if (!color) {\n      this.setSource([0, 0, 0, 1]);\n    }\n    else {\n      this._tryParsingColor(color);\n    }\n  }\n\n  fabric.Color = Color;\n\n  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n\n    /**\n     * @private\n     * @param {String|Array} color Color value to parse\n     */\n    _tryParsingColor: function(color) {\n      var source;\n\n      if (color in Color.colorNameMap) {\n        color = Color.colorNameMap[color];\n      }\n\n      if (color === 'transparent') {\n        source = [255, 255, 255, 0];\n      }\n\n      if (!source) {\n        source = Color.sourceFromHex(color);\n      }\n      if (!source) {\n        source = Color.sourceFromRgb(color);\n      }\n      if (!source) {\n        source = Color.sourceFromHsl(color);\n      }\n      if (!source) {\n        //if color is not recognize let's make black as canvas does\n        source = [0, 0, 0, 1];\n      }\n      if (source) {\n        this.setSource(source);\n      }\n    },\n\n    /**\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @private\n     * @param {Number} r Red color value\n     * @param {Number} g Green color value\n     * @param {Number} b Blue color value\n     * @return {Array} Hsl color\n     */\n    _rgbToHsl: function(r, g, b) {\n      r /= 255; g /= 255; b /= 255;\n\n      var h, s, l,\n          max = fabric.util.array.max([r, g, b]),\n          min = fabric.util.array.min([r, g, b]);\n\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      }\n      else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n            break;\n        }\n        h /= 6;\n      }\n\n      return [\n        Math.round(h * 360),\n        Math.round(s * 100),\n        Math.round(l * 100)\n      ];\n    },\n\n    /**\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @return {Array}\n     */\n    getSource: function() {\n      return this._source;\n    },\n\n    /**\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @param {Array} source\n     */\n    setSource: function(source) {\n      this._source = source;\n    },\n\n    /**\n     * Returns color representation in RGB format\n     * @return {String} ex: rgb(0-255,0-255,0-255)\n     */\n    toRgb: function() {\n      var source = this.getSource();\n      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\n    },\n\n    /**\n     * Returns color representation in RGBA format\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n     */\n    toRgba: function() {\n      var source = this.getSource();\n      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\n    },\n\n    /**\n     * Returns color representation in HSL format\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n     */\n    toHsl: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\n    },\n\n    /**\n     * Returns color representation in HSLA format\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n     */\n    toHsla: function() {\n      var source = this.getSource(),\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\n\n      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\n    },\n\n    /**\n     * Returns color representation in HEX format\n     * @return {String} ex: FF5555\n     */\n    toHex: function() {\n      var source = this.getSource(), r, g, b;\n\n      r = source[0].toString(16);\n      r = (r.length === 1) ? ('0' + r) : r;\n\n      g = source[1].toString(16);\n      g = (g.length === 1) ? ('0' + g) : g;\n\n      b = source[2].toString(16);\n      b = (b.length === 1) ? ('0' + b) : b;\n\n      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n    },\n\n    /**\n     * Returns color representation in HEXA format\n     * @return {String} ex: FF5555CC\n     */\n    toHexa: function() {\n      var source = this.getSource(), a;\n\n      a = Math.round(source[3] * 255);\n      a = a.toString(16);\n      a = (a.length === 1) ? ('0' + a) : a;\n\n      return this.toHex() + a.toUpperCase();\n    },\n\n    /**\n     * Gets value of alpha channel for this color\n     * @return {Number} 0-1\n     */\n    getAlpha: function() {\n      return this.getSource()[3];\n    },\n\n    /**\n     * Sets value of alpha channel for this color\n     * @param {Number} alpha Alpha value 0-1\n     * @return {fabric.Color} thisArg\n     */\n    setAlpha: function(alpha) {\n      var source = this.getSource();\n      source[3] = alpha;\n      this.setSource(source);\n      return this;\n    },\n\n    /**\n     * Transforms color to its grayscale representation\n     * @return {fabric.Color} thisArg\n     */\n    toGrayscale: function() {\n      var source = this.getSource(),\n          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\n          currentAlpha = source[3];\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Transforms color to its black and white representation\n     * @param {Number} threshold\n     * @return {fabric.Color} thisArg\n     */\n    toBlackWhite: function(threshold) {\n      var source = this.getSource(),\n          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\n          currentAlpha = source[3];\n\n      threshold = threshold || 127;\n\n      average = (Number(average) < Number(threshold)) ? 0 : 255;\n      this.setSource([average, average, average, currentAlpha]);\n      return this;\n    },\n\n    /**\n     * Overlays color with another color\n     * @param {String|fabric.Color} otherColor\n     * @return {fabric.Color} thisArg\n     */\n    overlayWith: function(otherColor) {\n      if (!(otherColor instanceof Color)) {\n        otherColor = new Color(otherColor);\n      }\n\n      var result = [],\n          alpha = this.getAlpha(),\n          otherAlpha = 0.5,\n          source = this.getSource(),\n          otherSource = otherColor.getSource(), i;\n\n      for (i = 0; i < 3; i++) {\n        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\n      }\n\n      result[3] = alpha;\n      this.setSource(result);\n      return this;\n    }\n  };\n\n  /**\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  // eslint-disable-next-line max-len\n  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\n\n  /**\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\n\n  /**\n   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */\n  fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n\n  /**\n   * Map of the 148 color names with HEX code\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   * @see: https://www.w3.org/TR/css3-color/#svg-color\n   */\n  fabric.Color.colorNameMap = {\n    aliceblue:            '#F0F8FF',\n    antiquewhite:         '#FAEBD7',\n    aqua:                 '#00FFFF',\n    aquamarine:           '#7FFFD4',\n    azure:                '#F0FFFF',\n    beige:                '#F5F5DC',\n    bisque:               '#FFE4C4',\n    black:                '#000000',\n    blanchedalmond:       '#FFEBCD',\n    blue:                 '#0000FF',\n    blueviolet:           '#8A2BE2',\n    brown:                '#A52A2A',\n    burlywood:            '#DEB887',\n    cadetblue:            '#5F9EA0',\n    chartreuse:           '#7FFF00',\n    chocolate:            '#D2691E',\n    coral:                '#FF7F50',\n    cornflowerblue:       '#6495ED',\n    cornsilk:             '#FFF8DC',\n    crimson:              '#DC143C',\n    cyan:                 '#00FFFF',\n    darkblue:             '#00008B',\n    darkcyan:             '#008B8B',\n    darkgoldenrod:        '#B8860B',\n    darkgray:             '#A9A9A9',\n    darkgrey:             '#A9A9A9',\n    darkgreen:            '#006400',\n    darkkhaki:            '#BDB76B',\n    darkmagenta:          '#8B008B',\n    darkolivegreen:       '#556B2F',\n    darkorange:           '#FF8C00',\n    darkorchid:           '#9932CC',\n    darkred:              '#8B0000',\n    darksalmon:           '#E9967A',\n    darkseagreen:         '#8FBC8F',\n    darkslateblue:        '#483D8B',\n    darkslategray:        '#2F4F4F',\n    darkslategrey:        '#2F4F4F',\n    darkturquoise:        '#00CED1',\n    darkviolet:           '#9400D3',\n    deeppink:             '#FF1493',\n    deepskyblue:          '#00BFFF',\n    dimgray:              '#696969',\n    dimgrey:              '#696969',\n    dodgerblue:           '#1E90FF',\n    firebrick:            '#B22222',\n    floralwhite:          '#FFFAF0',\n    forestgreen:          '#228B22',\n    fuchsia:              '#FF00FF',\n    gainsboro:            '#DCDCDC',\n    ghostwhite:           '#F8F8FF',\n    gold:                 '#FFD700',\n    goldenrod:            '#DAA520',\n    gray:                 '#808080',\n    grey:                 '#808080',\n    green:                '#008000',\n    greenyellow:          '#ADFF2F',\n    honeydew:             '#F0FFF0',\n    hotpink:              '#FF69B4',\n    indianred:            '#CD5C5C',\n    indigo:               '#4B0082',\n    ivory:                '#FFFFF0',\n    khaki:                '#F0E68C',\n    lavender:             '#E6E6FA',\n    lavenderblush:        '#FFF0F5',\n    lawngreen:            '#7CFC00',\n    lemonchiffon:         '#FFFACD',\n    lightblue:            '#ADD8E6',\n    lightcoral:           '#F08080',\n    lightcyan:            '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray:            '#D3D3D3',\n    lightgrey:            '#D3D3D3',\n    lightgreen:           '#90EE90',\n    lightpink:            '#FFB6C1',\n    lightsalmon:          '#FFA07A',\n    lightseagreen:        '#20B2AA',\n    lightskyblue:         '#87CEFA',\n    lightslategray:       '#778899',\n    lightslategrey:       '#778899',\n    lightsteelblue:       '#B0C4DE',\n    lightyellow:          '#FFFFE0',\n    lime:                 '#00FF00',\n    limegreen:            '#32CD32',\n    linen:                '#FAF0E6',\n    magenta:              '#FF00FF',\n    maroon:               '#800000',\n    mediumaquamarine:     '#66CDAA',\n    mediumblue:           '#0000CD',\n    mediumorchid:         '#BA55D3',\n    mediumpurple:         '#9370DB',\n    mediumseagreen:       '#3CB371',\n    mediumslateblue:      '#7B68EE',\n    mediumspringgreen:    '#00FA9A',\n    mediumturquoise:      '#48D1CC',\n    mediumvioletred:      '#C71585',\n    midnightblue:         '#191970',\n    mintcream:            '#F5FFFA',\n    mistyrose:            '#FFE4E1',\n    moccasin:             '#FFE4B5',\n    navajowhite:          '#FFDEAD',\n    navy:                 '#000080',\n    oldlace:              '#FDF5E6',\n    olive:                '#808000',\n    olivedrab:            '#6B8E23',\n    orange:               '#FFA500',\n    orangered:            '#FF4500',\n    orchid:               '#DA70D6',\n    palegoldenrod:        '#EEE8AA',\n    palegreen:            '#98FB98',\n    paleturquoise:        '#AFEEEE',\n    palevioletred:        '#DB7093',\n    papayawhip:           '#FFEFD5',\n    peachpuff:            '#FFDAB9',\n    peru:                 '#CD853F',\n    pink:                 '#FFC0CB',\n    plum:                 '#DDA0DD',\n    powderblue:           '#B0E0E6',\n    purple:               '#800080',\n    rebeccapurple:        '#663399',\n    red:                  '#FF0000',\n    rosybrown:            '#BC8F8F',\n    royalblue:            '#4169E1',\n    saddlebrown:          '#8B4513',\n    salmon:               '#FA8072',\n    sandybrown:           '#F4A460',\n    seagreen:             '#2E8B57',\n    seashell:             '#FFF5EE',\n    sienna:               '#A0522D',\n    silver:               '#C0C0C0',\n    skyblue:              '#87CEEB',\n    slateblue:            '#6A5ACD',\n    slategray:            '#708090',\n    slategrey:            '#708090',\n    snow:                 '#FFFAFA',\n    springgreen:          '#00FF7F',\n    steelblue:            '#4682B4',\n    tan:                  '#D2B48C',\n    teal:                 '#008080',\n    thistle:              '#D8BFD8',\n    tomato:               '#FF6347',\n    turquoise:            '#40E0D0',\n    violet:               '#EE82EE',\n    wheat:                '#F5DEB3',\n    white:                '#FFFFFF',\n    whitesmoke:           '#F5F5F5',\n    yellow:               '#FFFF00',\n    yellowgreen:          '#9ACD32'\n  };\n\n  /**\n   * @private\n   * @param {Number} p\n   * @param {Number} q\n   * @param {Number} t\n   * @return {Number}\n   */\n  function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n    if (t > 1) {\n      t -= 1;\n    }\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n      return q;\n    }\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n  }\n\n  /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgb = function(color) {\n    return Color.fromSource(Color.sourceFromRgb(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromRgb = function(color) {\n    var match = color.match(Color.reRGBa);\n    if (match) {\n      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\n          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\n          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n\n      return [\n        parseInt(r, 10),\n        parseInt(g, 10),\n        parseInt(b, 10),\n        match[4] ? parseFloat(match[4]) : 1\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromRgba = Color.fromRgb;\n\n  /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf fabric.Color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsl = function(color) {\n    return Color.fromSource(Color.sourceFromHsl(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {Array} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */\n  fabric.Color.sourceFromHsl = function(color) {\n    var match = color.match(Color.reHSLa);\n    if (!match) {\n      return;\n    }\n\n    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\n        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\n        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\n        r, g, b;\n\n    if (s === 0) {\n      r = g = b = l;\n    }\n    else {\n      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\n          p = l * 2 - q;\n\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return [\n      Math.round(r * 255),\n      Math.round(g * 255),\n      Math.round(b * 255),\n      match[4] ? parseFloat(match[4]) : 1\n    ];\n  };\n\n  /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHsla = Color.fromHsl;\n\n  /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: FF5555\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromHex = function(color) {\n    return Color.fromSource(Color.sourceFromHex(color));\n  };\n\n  /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {Array} source\n   */\n  fabric.Color.sourceFromHex = function(color) {\n    if (color.match(Color.reHex)) {\n      var value = color.slice(color.indexOf('#') + 1),\n          isShortNotation = (value.length === 3 || value.length === 4),\n          isRGBa = (value.length === 8 || value.length === 4),\n          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\n          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\n          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\n          a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\n\n      return [\n        parseInt(r, 16),\n        parseInt(g, 16),\n        parseInt(b, 16),\n        parseFloat((parseInt(a, 16) / 255).toFixed(2))\n      ];\n    }\n  };\n\n  /**\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n   * @static\n   * @memberOf fabric.Color\n   * @param {Array} source\n   * @return {fabric.Color}\n   */\n  fabric.Color.fromSource = function(source) {\n    var oColor = new Color();\n    oColor.setSource(source);\n    return oColor;\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'],\n      skewMap = ['ns', 'nesw', 'ew', 'nwse'],\n      controls = {},\n      LEFT = 'left', TOP = 'top', RIGHT = 'right', BOTTOM = 'bottom', CENTER = 'center',\n      opposite = {\n        top: BOTTOM,\n        bottom: TOP,\n        left: RIGHT,\n        right: LEFT,\n        center: CENTER,\n      }, radiansToDegrees = fabric.util.radiansToDegrees,\n      sign = (Math.sign || function(x) { return ((x > 0) - (x < 0)) || +x; });\n\n  /**\n   * Combine control position and object angle to find the control direction compared\n   * to the object center.\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\n   * @param {fabric.Control} control the control class\n   * @return {Number} 0 - 7 a quadrant number\n   */\n  function findCornerQuadrant(fabricObject, control) {\n    var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n    return Math.round((cornerAngle % 360) / 45);\n  }\n\n  function fireEvent(eventName, options) {\n    var target = options.transform.target,\n        canvas = target.canvas,\n        canvasOptions = fabric.util.object.clone(options);\n    canvasOptions.target = target;\n    canvas && canvas.fire('object:' + eventName, canvasOptions);\n    target.fire(eventName, options);\n  }\n\n  /**\n   * Inspect event and fabricObject properties to understand if the scaling action\n   * @param {Event} eventData from the user action\n   * @param {fabric.Object} fabricObject the fabric object about to scale\n   * @return {Boolean} true if scale is proportional\n   */\n  function scaleIsProportional(eventData, fabricObject) {\n    var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey,\n        uniformIsToggled = eventData[uniScaleKey];\n    return (canvas.uniformScaling && !uniformIsToggled) ||\n    (!canvas.uniformScaling && uniformIsToggled);\n  }\n\n  /**\n   * Checks if transform is centered\n   * @param {Object} transform transform data\n   * @return {Boolean} true if transform is centered\n   */\n  function isTransformCentered(transform) {\n    return transform.originX === CENTER && transform.originY === CENTER;\n  }\n\n  /**\n   * Inspect fabricObject to understand if the current scaling action is allowed\n   * @param {fabric.Object} fabricObject the fabric object about to scale\n   * @param {String} by 'x' or 'y' or ''\n   * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n   * @return {Boolean} true if scaling is not allowed at current conditions\n   */\n  function scalingIsForbidden(fabricObject, by, scaleProportionally) {\n    var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;\n    if (lockX && lockY) {\n      return true;\n    }\n    if (!by && (lockX || lockY) && scaleProportionally) {\n      return true;\n    }\n    if (lockX && by === 'x') {\n      return true;\n    }\n    if (lockY && by === 'y') {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * return the correct cursor style for the scale action\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */\n  function scaleCursorStyleHandler(eventData, control, fabricObject) {\n    var notAllowed = 'not-allowed',\n        scaleProportionally = scaleIsProportional(eventData, fabricObject),\n        by = '';\n    if (control.x !== 0 && control.y === 0) {\n      by = 'x';\n    }\n    else if (control.x === 0 && control.y !== 0) {\n      by = 'y';\n    }\n    if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n      return notAllowed;\n    }\n    var n = findCornerQuadrant(fabricObject, control);\n    return scaleMap[n] + '-resize';\n  }\n\n  /**\n   * return the correct cursor style for the skew action\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */\n  function skewCursorStyleHandler(eventData, control, fabricObject) {\n    var notAllowed = 'not-allowed';\n    if (control.x !== 0 && fabricObject.lockSkewingY) {\n      return notAllowed;\n    }\n    if (control.y !== 0 && fabricObject.lockSkewingX) {\n      return notAllowed;\n    }\n    var n = findCornerQuadrant(fabricObject, control) % 4;\n    return skewMap[n] + '-resize';\n  }\n\n  /**\n   * Combine skew and scale style handlers to cover fabric standard use case\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */\n  function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {\n    if (eventData[fabricObject.canvas.altActionKey]) {\n      return controls.skewCursorStyleHandler(eventData, control, fabricObject);\n    }\n    return controls.scaleCursorStyleHandler(eventData, control, fabricObject);\n  }\n\n  /**\n   * Inspect event, control and fabricObject to return the correct action name\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} an action name\n   */\n  function scaleOrSkewActionName(eventData, control, fabricObject) {\n    var isAlternative = eventData[fabricObject.canvas.altActionKey];\n    if (control.x === 0) {\n      // then is scaleY or skewX\n      return isAlternative ? 'skewX' : 'scaleY';\n    }\n    if (control.y === 0) {\n      // then is scaleY or skewX\n      return isAlternative ? 'skewY' : 'scaleX';\n    }\n  }\n\n  /**\n   * Find the correct style for the control that is used for rotation.\n   * this function is very simple and it just take care of not-allowed or standard cursor\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */\n  function rotationStyleHandler(eventData, control, fabricObject) {\n    if (fabricObject.lockRotation) {\n      return 'not-allowed';\n    }\n    return control.cursorStyle;\n  }\n\n  function commonEventInfo(eventData, transform, x, y) {\n    return {\n      e: eventData,\n      transform: transform,\n      pointer: {\n        x: x,\n        y: y,\n      }\n    };\n  }\n\n  /**\n   * Wrap an action handler with saving/restoring object position on the transform.\n   * this is the code that permits to objects to keep their position while transforming.\n   * @param {Function} actionHandler the function to wrap\n   * @return {Function} a function with an action handler signature\n   */\n  function wrapWithFixedAnchor(actionHandler) {\n    return function(eventData, transform, x, y) {\n      var target = transform.target, centerPoint = target.getCenterPoint(),\n          constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY),\n          actionPerformed = actionHandler(eventData, transform, x, y);\n      target.setPositionByOrigin(constraint, transform.originX, transform.originY);\n      return actionPerformed;\n    };\n  }\n\n  /**\n   * Wrap an action handler with firing an event if the action is performed\n   * @param {Function} actionHandler the function to wrap\n   * @return {Function} a function with an action handler signature\n   */\n  function wrapWithFireEvent(eventName, actionHandler) {\n    return function(eventData, transform, x, y) {\n      var actionPerformed = actionHandler(eventData, transform, x, y);\n      if (actionPerformed) {\n        fireEvent(eventName, commonEventInfo(eventData, transform, x, y));\n      }\n      return actionPerformed;\n    };\n  }\n\n  /**\n   * Transforms a point described by x and y in a distance from the top left corner of the object\n   * bounding box.\n   * @param {Object} transform\n   * @param {String} originX\n   * @param {String} originY\n   * @param {number} x\n   * @param {number} y\n   * @return {Fabric.Point} the normalized point\n   */\n  function getLocalPoint(transform, originX, originY, x, y) {\n    var target = transform.target,\n        control = target.controls[transform.corner],\n        zoom = target.canvas.getZoom(),\n        padding = target.padding / zoom,\n        localPoint = target.toLocalPoint(new fabric.Point(x, y), originX, originY);\n    if (localPoint.x >= padding) {\n      localPoint.x -= padding;\n    }\n    if (localPoint.x <= -padding) {\n      localPoint.x += padding;\n    }\n    if (localPoint.y >= padding) {\n      localPoint.y -= padding;\n    }\n    if (localPoint.y <= padding) {\n      localPoint.y += padding;\n    }\n    localPoint.x -= control.offsetX;\n    localPoint.y -= control.offsetY;\n    return localPoint;\n  }\n\n  /**\n   * Detect if the fabric object is flipped on one side.\n   * @param {fabric.Object} target\n   * @return {Boolean} true if one flip, but not two.\n   */\n  function targetHasOneFlip(target) {\n    return target.flipX !== target.flipY;\n  }\n\n  /**\n   * Utility function to compensate the scale factor when skew is applied on both axes\n   * @private\n   */\n  function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {\n    if (target[oppositeSkew] !== 0) {\n      var newDim = target._getTransformedDimensions()[axis];\n      var newValue = reference / newDim * target[scaleToCompensate];\n      target.set(scaleToCompensate, newValue);\n    }\n  }\n\n  /**\n   * Action handler for skewing on the X axis\n   * @private\n   */\n  function skewObjectX(eventData, transform, x, y) {\n    var target = transform.target,\n        // find how big the object would be, if there was no skewX. takes in account scaling\n        dimNoSkew = target._getTransformedDimensions(0, target.skewY),\n        localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),\n        // the mouse is in the center of the object, and we want it to stay there.\n        // so the object will grow twice as much as the mouse.\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\n        totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x,\n        currentSkew = target.skewX, newSkew;\n    if (totalSkewSize < 2) {\n      // let's make it easy to go back to position 0.\n      newSkew = 0;\n    }\n    else {\n      newSkew = radiansToDegrees(\n        Math.atan2((totalSkewSize / target.scaleX), (dimNoSkew.y / target.scaleY))\n      );\n      // now we have to find the sign of the skew.\n      // it mostly depend on the origin of transformation.\n      if (transform.originX === LEFT && transform.originY === BOTTOM) {\n        newSkew = -newSkew;\n      }\n      if (transform.originX === RIGHT && transform.originY === TOP) {\n        newSkew = -newSkew;\n      }\n      if (targetHasOneFlip(target)) {\n        newSkew = -newSkew;\n      }\n    }\n    var hasSkewed = currentSkew !== newSkew;\n    if (hasSkewed) {\n      var dimBeforeSkewing = target._getTransformedDimensions().y;\n      target.set('skewX', newSkew);\n      compensateScaleForSkew(target, 'skewY', 'scaleY', 'y', dimBeforeSkewing);\n    }\n    return hasSkewed;\n  }\n\n  /**\n   * Action handler for skewing on the Y axis\n   * @private\n   */\n  function skewObjectY(eventData, transform, x, y) {\n    var target = transform.target,\n        // find how big the object would be, if there was no skewX. takes in account scaling\n        dimNoSkew = target._getTransformedDimensions(target.skewX, 0),\n        localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),\n        // the mouse is in the center of the object, and we want it to stay there.\n        // so the object will grow twice as much as the mouse.\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\n        totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y,\n        currentSkew = target.skewY, newSkew;\n    if (totalSkewSize < 2) {\n      // let's make it easy to go back to position 0.\n      newSkew = 0;\n    }\n    else {\n      newSkew = radiansToDegrees(\n        Math.atan2((totalSkewSize / target.scaleY), (dimNoSkew.x / target.scaleX))\n      );\n      // now we have to find the sign of the skew.\n      // it mostly depend on the origin of transformation.\n      if (transform.originX === LEFT && transform.originY === BOTTOM) {\n        newSkew = -newSkew;\n      }\n      if (transform.originX === RIGHT && transform.originY === TOP) {\n        newSkew = -newSkew;\n      }\n      if (targetHasOneFlip(target)) {\n        newSkew = -newSkew;\n      }\n    }\n    var hasSkewed = currentSkew !== newSkew;\n    if (hasSkewed) {\n      var dimBeforeSkewing = target._getTransformedDimensions().x;\n      target.set('skewY', newSkew);\n      compensateScaleForSkew(target, 'skewX', 'scaleX', 'x', dimBeforeSkewing);\n    }\n    return hasSkewed;\n  }\n\n  /**\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\n   * skew direction and determine the correct transform origin for the anchor point\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function skewHandlerX(eventData, transform, x, y) {\n    // step1 figure out and change transform origin.\n    // if skewX > 0 and originY bottom we anchor on right\n    // if skewX > 0 and originY top we anchor on left\n    // if skewX < 0 and originY bottom we anchor on left\n    // if skewX < 0 and originY top we anchor on right\n    // if skewX is 0, we look for mouse position to understand where are we going.\n    var target = transform.target, currentSkew = target.skewX, originX, originY = transform.originY;\n    if (target.lockSkewingX) {\n      return false;\n    }\n    if (currentSkew === 0) {\n      var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\n      if (localPointFromCenter.x > 0) {\n        // we are pulling right, anchor left;\n        originX = LEFT;\n      }\n      else {\n        // we are pulling right, anchor right\n        originX = RIGHT;\n      }\n    }\n    else {\n      if (currentSkew > 0) {\n        originX = originY === TOP ? LEFT : RIGHT;\n      }\n      if (currentSkew < 0) {\n        originX = originY === TOP ? RIGHT : LEFT;\n      }\n      // is the object flipped on one side only? swap the origin.\n      if (targetHasOneFlip(target)) {\n        originX = originX === LEFT ? RIGHT : LEFT;\n      }\n    }\n\n    // once we have the origin, we find the anchor point\n    transform.originX = originX;\n    var finalHandler = wrapWithFireEvent('skewing', wrapWithFixedAnchor(skewObjectX));\n    return finalHandler(eventData, transform, x, y);\n  }\n\n  /**\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\n   * skew direction and determine the correct transform origin for the anchor point\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function skewHandlerY(eventData, transform, x, y) {\n    // step1 figure out and change transform origin.\n    // if skewY > 0 and originX left we anchor on top\n    // if skewY > 0 and originX right we anchor on bottom\n    // if skewY < 0 and originX left we anchor on bottom\n    // if skewY < 0 and originX right we anchor on top\n    // if skewY is 0, we look for mouse position to understand where are we going.\n    var target = transform.target, currentSkew = target.skewY, originY, originX = transform.originX;\n    if (target.lockSkewingY) {\n      return false;\n    }\n    if (currentSkew === 0) {\n      var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\n      if (localPointFromCenter.y > 0) {\n        // we are pulling down, anchor up;\n        originY = TOP;\n      }\n      else {\n        // we are pulling up, anchor down\n        originY = BOTTOM;\n      }\n    }\n    else {\n      if (currentSkew > 0) {\n        originY = originX === LEFT ? TOP : BOTTOM;\n      }\n      if (currentSkew < 0) {\n        originY = originX === LEFT ? BOTTOM : TOP;\n      }\n      // is the object flipped on one side only? swap the origin.\n      if (targetHasOneFlip(target)) {\n        originY = originY === TOP ? BOTTOM : TOP;\n      }\n    }\n\n    // once we have the origin, we find the anchor point\n    transform.originY = originY;\n    var finalHandler = wrapWithFireEvent('skewing', wrapWithFixedAnchor(skewObjectY));\n    return finalHandler(eventData, transform, x, y);\n  }\n\n  /**\n   * Action handler for rotation and snapping, without anchor point.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   * @private\n   */\n  function rotationWithSnapping(eventData, transform, x, y) {\n    var t = transform,\n        target = t.target,\n        pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\n\n    if (target.lockRotation) {\n      return false;\n    }\n\n    var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x),\n        curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x),\n        angle = radiansToDegrees(curAngle - lastAngle + t.theta),\n        hasRotated = true;\n\n    if (target.snapAngle > 0) {\n      var snapAngle  = target.snapAngle,\n          snapThreshold  = target.snapThreshold || snapAngle,\n          rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\n          leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n\n      if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n        angle = leftAngleLocked;\n      }\n      else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n        angle = rightAngleLocked;\n      }\n    }\n\n    // normalize angle to positive value\n    if (angle < 0) {\n      angle = 360 + angle;\n    }\n    angle %= 360;\n\n    hasRotated = target.angle !== angle;\n    target.angle = angle;\n    return hasRotated;\n  }\n\n  /**\n   * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @param {Object} options additional information for scaling\n   * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n   * @return {Boolean} true if some change happened\n   * @private\n   */\n  function scaleObject(eventData, transform, x, y, options) {\n    options = options || {};\n    var target = transform.target,\n        lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY,\n        by = options.by, newPoint, scaleX, scaleY, dim,\n        scaleProportionally = scaleIsProportional(eventData, target),\n        forbidScaling = scalingIsForbidden(target, by, scaleProportionally),\n        signX, signY, gestureScale = transform.gestureScale;\n\n    if (forbidScaling) {\n      return false;\n    }\n    if (gestureScale) {\n      scaleX = transform.scaleX * gestureScale;\n      scaleY = transform.scaleY * gestureScale;\n    }\n    else {\n      newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y);\n      // use of sign: We use sign to detect change of direction of an action. sign usually change when\n      // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n      // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n      // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n      // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n      signX = by !== 'y' ? sign(newPoint.x) : 1;\n      signY = by !== 'x' ? sign(newPoint.y) : 1;\n      if (!transform.signX) {\n        transform.signX = signX;\n      }\n      if (!transform.signY) {\n        transform.signY = signY;\n      }\n\n      if (target.lockScalingFlip &&\n        (transform.signX !== signX || transform.signY !== signY)\n      ) {\n        return false;\n      }\n\n      dim = target._getTransformedDimensions();\n      // missing detection of flip and logic to switch the origin\n      if (scaleProportionally && !by) {\n        // uniform scaling\n        var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\n            original = transform.original,\n            originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) +\n              Math.abs(dim.y * original.scaleY / target.scaleY),\n            scale = distance / originalDistance;\n        scaleX = original.scaleX * scale;\n        scaleY = original.scaleY * scale;\n      }\n      else {\n        scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);\n        scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);\n      }\n      // if we are scaling by center, we need to double the scale\n      if (isTransformCentered(transform)) {\n        scaleX *= 2;\n        scaleY *= 2;\n      }\n      if (transform.signX !== signX && by !== 'y') {\n        transform.originX = opposite[transform.originX];\n        scaleX *= -1;\n        transform.signX = signX;\n      }\n      if (transform.signY !== signY && by !== 'x') {\n        transform.originY = opposite[transform.originY];\n        scaleY *= -1;\n        transform.signY = signY;\n      }\n    }\n    // minScale is taken are in the setter.\n    var oldScaleX = target.scaleX, oldScaleY = target.scaleY;\n    if (!by) {\n      !lockScalingX && target.set('scaleX', scaleX);\n      !lockScalingY && target.set('scaleY', scaleY);\n    }\n    else {\n      // forbidden cases already handled on top here.\n      by === 'x' && target.set('scaleX', scaleX);\n      by === 'y' && target.set('scaleY', scaleY);\n    }\n    return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n  }\n\n  /**\n   * Generic scaling logic, to scale from corners either equally or freely.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function scaleObjectFromCorner(eventData, transform, x, y) {\n    return scaleObject(eventData, transform, x, y);\n  }\n\n  /**\n   * Scaling logic for the X axis.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function scaleObjectX(eventData, transform, x, y) {\n    return scaleObject(eventData, transform, x, y , { by: 'x' });\n  }\n\n  /**\n   * Scaling logic for the Y axis.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function scaleObjectY(eventData, transform, x, y) {\n    return scaleObject(eventData, transform, x, y , { by: 'y' });\n  }\n\n  /**\n   * Composed action handler to either scale Y or skew X\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function scalingYOrSkewingX(eventData, transform, x, y) {\n    // ok some safety needed here.\n    if (eventData[transform.target.canvas.altActionKey]) {\n      return controls.skewHandlerX(eventData, transform, x, y);\n    }\n    return controls.scalingY(eventData, transform, x, y);\n  }\n\n  /**\n   * Composed action handler to either scale X or skew Y\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function scalingXOrSkewingY(eventData, transform, x, y) {\n    // ok some safety needed here.\n    if (eventData[transform.target.canvas.altActionKey]) {\n      return controls.skewHandlerY(eventData, transform, x, y);\n    }\n    return controls.scalingX(eventData, transform, x, y);\n  }\n\n  /**\n   * Action handler to change textbox width\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */\n  function changeWidth(eventData, transform, x, y) {\n    var target = transform.target, localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),\n        strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\n        multiplier = isTransformCentered(transform) ? 2 : 1,\n        oldWidth = target.width,\n        newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;\n    target.set('width', Math.max(newWidth, 0));\n    return oldWidth !== newWidth;\n  }\n\n  /**\n   * Action handler\n   * @private\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if the translation occurred\n   */\n  function dragHandler(eventData, transform, x, y) {\n    var target = transform.target,\n        newLeft = x - transform.offsetX,\n        newTop = y - transform.offsetY,\n        moveX = !target.get('lockMovementX') && target.left !== newLeft,\n        moveY = !target.get('lockMovementY') && target.top !== newTop;\n    moveX && target.set('left', newLeft);\n    moveY && target.set('top', newTop);\n    if (moveX || moveY) {\n      fireEvent('moving', commonEventInfo(eventData, transform, x, y));\n    }\n    return moveX || moveY;\n  }\n\n  controls.scaleCursorStyleHandler = scaleCursorStyleHandler;\n  controls.skewCursorStyleHandler = skewCursorStyleHandler;\n  controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;\n  controls.rotationWithSnapping = wrapWithFireEvent('rotating', wrapWithFixedAnchor(rotationWithSnapping));\n  controls.scalingEqually = wrapWithFireEvent('scaling', wrapWithFixedAnchor( scaleObjectFromCorner));\n  controls.scalingX = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectX));\n  controls.scalingY = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectY));\n  controls.scalingYOrSkewingX = scalingYOrSkewingX;\n  controls.scalingXOrSkewingY = scalingXOrSkewingY;\n  controls.changeWidth = wrapWithFireEvent('resizing', wrapWithFixedAnchor(changeWidth));\n  controls.skewHandlerX = skewHandlerX;\n  controls.skewHandlerY = skewHandlerY;\n  controls.dragHandler = dragHandler;\n  controls.scaleOrSkewActionName = scaleOrSkewActionName;\n  controls.rotationStyleHandler = rotationStyleHandler;\n  controls.fireEvent = fireEvent;\n  controls.wrapWithFixedAnchor = wrapWithFixedAnchor;\n  controls.wrapWithFireEvent = wrapWithFireEvent;\n  controls.getLocalPoint = getLocalPoint;\n  fabric.controlsUtils = controls;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      degreesToRadians = fabric.util.degreesToRadians,\n      controls = fabric.controlsUtils;\n\n  /**\n   * Render a round control, as per fabric features.\n   * This function is written to respect object properties like transparentCorners, cornerSize\n   * cornerColor, cornerStrokeColor\n   * plus the addition of offsetY and offsetX.\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @param {Number} left x coordinate where the control center should be\n   * @param {Number} top y coordinate where the control center should be\n   * @param {Object} styleOverride override for fabric.Object controls style\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\n   */\n  function renderCircleControl (ctx, left, top, styleOverride, fabricObject) {\n    styleOverride = styleOverride || {};\n    var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n        ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n        transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\n          styleOverride.transparentCorners : fabricObject.transparentCorners,\n        methodName = transparentCorners ? 'stroke' : 'fill',\n        stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\n        myLeft = left,\n        myTop = top, size;\n    ctx.save();\n    ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\n    ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\n    // as soon as fabric react v5, remove ie11, use proper ellipse code.\n    if (xSize > ySize) {\n      size = xSize;\n      ctx.scale(1.0, ySize / xSize);\n      myTop = top * xSize / ySize;\n    }\n    else if (ySize > xSize) {\n      size = ySize;\n      ctx.scale(xSize / ySize, 1.0);\n      myLeft = left * ySize / xSize;\n    }\n    else {\n      size = xSize;\n    }\n    // this is still wrong\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);\n    ctx[methodName]();\n    if (stroke) {\n      ctx.stroke();\n    }\n    ctx.restore();\n  }\n\n  /**\n   * Render a square control, as per fabric features.\n   * This function is written to respect object properties like transparentCorners, cornerSize\n   * cornerColor, cornerStrokeColor\n   * plus the addition of offsetY and offsetX.\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @param {Number} left x coordinate where the control center should be\n   * @param {Number} top y coordinate where the control center should be\n   * @param {Object} styleOverride override for fabric.Object controls style\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\n   */\n  function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {\n    styleOverride = styleOverride || {};\n    var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\n        ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\n        transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\n          styleOverride.transparentCorners : fabricObject.transparentCorners,\n        methodName = transparentCorners ? 'stroke' : 'fill',\n        stroke = !transparentCorners && (\n          styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor\n        ), xSizeBy2 = xSize / 2, ySizeBy2 = ySize / 2;\n    ctx.save();\n    ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\n    ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\n    // this is still wrong\n    ctx.lineWidth = 1;\n    ctx.translate(left, top);\n    ctx.rotate(degreesToRadians(fabricObject.angle));\n    // this does not work, and fixed with ( && ) does not make sense.\n    // to have real transparent corners we need the controls on upperCanvas\n    // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n    ctx[methodName + 'Rect'](-xSizeBy2, -ySizeBy2, xSize, ySize);\n    if (stroke) {\n      ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n    }\n    ctx.restore();\n  }\n\n  controls.renderCircleControl = renderCircleControl;\n  controls.renderSquareControl = renderSquareControl;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  function Control(options) {\n    for (var i in options) {\n      this[i] = options[i];\n    }\n  }\n\n  fabric.Control = Control;\n\n  fabric.Control.prototype = /** @lends fabric.Control.prototype */ {\n\n    /**\n     * keep track of control visibility.\n     * mainly for backward compatibility.\n     * if you do not want to see a control, you can remove it\n     * from the controlset.\n     * @type {Boolean}\n     * @default true\n     */\n    visible: true,\n\n    /**\n     * Name of the action that the control will likely execute.\n     * This is optional. FabricJS uses to identify what the user is doing for some\n     * extra optimizations. If you are writing a custom control and you want to know\n     * somewhere else in the code what is going on, you can use this string here.\n     * you can also provide a custom getActionName if your control run multiple actions\n     * depending on some external state.\n     * default to scale since is the most common, used on 4 corners by default\n     * @type {String}\n     * @default 'scale'\n     */\n    actionName: 'scale',\n\n    /**\n     * Drawing angle of the control.\n     * NOT used for now, but name marked as needed for internal logic\n     * example: to reuse the same drawing function for different rotated controls\n     * @type {Number}\n     * @default 0\n     */\n    angle: 0,\n\n    /**\n     * Relative position of the control. X\n     * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n     * of the bounding box.\n     * @type {Number}\n     * @default 0\n     */\n    x: 0,\n\n    /**\n     * Relative position of the control. Y\n     * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n     * of the bounding box.\n     * @type {Number}\n     * @default 0\n     */\n    y: 0,\n\n    /**\n     * Horizontal offset of the control from the defined position. In pixels\n     * Positive offset moves the control to the right, negative to the left.\n     * It used when you want to have position of control that does not scale with\n     * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n     * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will\n     * stay 30 pixels no matter how the object is big. Another example is having 2\n     * controls in the corner, that stay in the same position when the object scale.\n     * of the bounding box.\n     * @type {Number}\n     * @default 0\n     */\n    offsetX: 0,\n\n    /**\n     * Vertical offset of the control from the defined position. In pixels\n     * Positive offset moves the control to the bottom, negative to the top.\n     * @type {Number}\n     * @default 0\n     */\n    offsetY: 0,\n\n    /**\n     * Sets the length of the control. If null, defaults to object's cornerSize.\n     * Expects both sizeX and sizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */\n    sizeX: null,\n\n    /**\n     * Sets the height of the control. If null, defaults to object's cornerSize.\n     * Expects both sizeX and sizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */\n    sizeY: null,\n\n    /**\n     * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n     * Expects both touchSizeX and touchSizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */\n    touchSizeX: null,\n\n    /**\n     * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n     * Expects both touchSizeX and touchSizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */\n    touchSizeY: null,\n\n    /**\n     * Css cursor style to display when the control is hovered.\n     * if the method `cursorStyleHandler` is provided, this property is ignored.\n     * @type {String}\n     * @default 'crosshair'\n     */\n    cursorStyle: 'crosshair',\n\n    /**\n     * If controls has an offsetY or offsetX, draw a line that connects\n     * the control to the bounding box\n     * @type {Boolean}\n     * @default false\n     */\n    withConnection: false,\n\n    /**\n     * The control actionHandler, provide one to handle action ( control being moved )\n     * @param {Event} eventData the native mouse event\n     * @param {Object} transformData properties of the current transform\n     * @param {Number} x x position of the cursor\n     * @param {Number} y y position of the cursor\n     * @return {Boolean} true if the action/event modified the object\n     */\n    actionHandler: function(/* eventData, transformData, x, y */) { },\n\n    /**\n     * The control handler for mouse down, provide one to handle mouse down on control\n     * @param {Event} eventData the native mouse event\n     * @param {Object} transformData properties of the current transform\n     * @param {Number} x x position of the cursor\n     * @param {Number} y y position of the cursor\n     * @return {Boolean} true if the action/event modified the object\n     */\n    mouseDownHandler: function(/* eventData, transformData, x, y */) { },\n\n    /**\n     * The control mouseUpHandler, provide one to handle an effect on mouse up.\n     * @param {Event} eventData the native mouse event\n     * @param {Object} transformData properties of the current transform\n     * @param {Number} x x position of the cursor\n     * @param {Number} y y position of the cursor\n     * @return {Boolean} true if the action/event modified the object\n     */\n    mouseUpHandler: function(/* eventData, transformData, x, y */) { },\n\n    /**\n     * Returns control actionHandler\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Object} fabricObject on which the control is displayed\n     * @param {fabric.Control} control control for which the action handler is being asked\n     * @return {Function} the action handler\n     */\n    getActionHandler: function(/* eventData, fabricObject, control */) {\n      return this.actionHandler;\n    },\n\n    /**\n     * Returns control mouseDown handler\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Object} fabricObject on which the control is displayed\n     * @param {fabric.Control} control control for which the action handler is being asked\n     * @return {Function} the action handler\n     */\n    getMouseDownHandler: function(/* eventData, fabricObject, control */) {\n      return this.mouseDownHandler;\n    },\n\n    /**\n     * Returns control mouseUp handler\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Object} fabricObject on which the control is displayed\n     * @param {fabric.Control} control control for which the action handler is being asked\n     * @return {Function} the action handler\n     */\n    getMouseUpHandler: function(/* eventData, fabricObject, control */) {\n      return this.mouseUpHandler;\n    },\n\n    /**\n     * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n     * function you can pass one in the constructor\n     * the cursorStyle property\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Control} control the current control ( likely this)\n     * @param {fabric.Object} object on which the control is displayed\n     * @return {String}\n     */\n    cursorStyleHandler: function(eventData, control /* fabricObject */) {\n      return control.cursorStyle;\n    },\n\n    /**\n     * Returns the action name. The basic implementation just return the actionName property.\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Control} control the current control ( likely this)\n     * @param {fabric.Object} object on which the control is displayed\n     * @return {String}\n     */\n    getActionName: function(eventData, control /* fabricObject */) {\n      return control.actionName;\n    },\n\n    /**\n     * Returns controls visibility\n     * @param {fabric.Object} object on which the control is displayed\n     * @param {String} controlKey key where the control is memorized on the\n     * @return {Boolean}\n     */\n    getVisibility: function(fabricObject, controlKey) {\n      var objectVisibility = fabricObject._controlsVisibility;\n      if (objectVisibility && typeof objectVisibility[controlKey] !== 'undefined') {\n        return objectVisibility[controlKey];\n      }\n      return this.visible;\n    },\n\n    /**\n     * Sets controls visibility\n     * @param {Boolean} visibility for the object\n     * @return {Void}\n     */\n    setVisibility: function(visibility /* name, fabricObject */) {\n      this.visible = visibility;\n    },\n\n\n    positionHandler: function(dim, finalMatrix /*, fabricObject, currentControl */) {\n      var point = fabric.util.transformPoint({\n        x: this.x * dim.x + this.offsetX,\n        y: this.y * dim.y + this.offsetY }, finalMatrix);\n      return point;\n    },\n\n    /**\n     * Returns the coords for this control based on object values.\n     * @param {Number} objectAngle angle from the fabric object holding the control\n     * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n     *   isTouch is true)\n     * @param {Number} centerX x coordinate where the control center should be\n     * @param {Number} centerY y coordinate where the control center should be\n     * @param {boolean} isTouch true if touch corner, false if normal corner\n     */\n    calcCornerCoords: function(objectAngle, objectCornerSize, centerX, centerY, isTouch) {\n      var cosHalfOffset,\n          sinHalfOffset,\n          cosHalfOffsetComp,\n          sinHalfOffsetComp,\n          xSize = (isTouch) ? this.touchSizeX : this.sizeX,\n          ySize = (isTouch) ? this.touchSizeY : this.sizeY;\n      if (xSize && ySize && xSize !== ySize) {\n        // handle rectangular corners\n        var controlTriangleAngle = Math.atan2(ySize, xSize);\n        var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;\n        var newTheta = controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\n        var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\n        cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta);\n        sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta);\n        // use complementary angle for two corners\n        cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newThetaComp);\n        sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newThetaComp);\n      }\n      else {\n        // handle square corners\n        // use default object corner size unless size is defined\n        var cornerSize = (xSize && ySize) ? xSize : objectCornerSize;\n        /* 0.7071067812 stands for sqrt(2)/2 */\n        cornerHypotenuse = cornerSize * 0.7071067812;\n        // complementary angles are equal since they're both 45 degrees\n        var newTheta = fabric.util.degreesToRadians(45 - objectAngle);\n        cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newTheta);\n        sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newTheta);\n      }\n\n      return {\n        tl: {\n          x: centerX - sinHalfOffsetComp,\n          y: centerY - cosHalfOffsetComp,\n        },\n        tr: {\n          x: centerX + cosHalfOffset,\n          y: centerY - sinHalfOffset,\n        },\n        bl: {\n          x: centerX - cosHalfOffset,\n          y: centerY + sinHalfOffset,\n        },\n        br: {\n          x: centerX + sinHalfOffsetComp,\n          y: centerY + cosHalfOffsetComp,\n        },\n      };\n    },\n\n    /**\n    * Render function for the control.\n    * When this function runs the context is unscaled. unrotate. Just retina scaled.\n    * all the functions will have to translate to the point left,top before starting Drawing\n    * if they want to draw a control where the position is detected.\n    * left and top are the result of the positionHandler function\n    * @param {RenderingContext2D} ctx the context where the control will be drawn\n    * @param {Number} left position of the canvas where we are about to render the control.\n    * @param {Number} top position of the canvas where we are about to render the control.\n    * @param {Object} styleOverride\n    * @param {fabric.Object} fabricObject the object where the control is about to be rendered\n    */\n    render: function(ctx, left, top, styleOverride, fabricObject) {\n      styleOverride = styleOverride || {};\n      switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\n        case 'circle':\n          fabric.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);\n          break;\n        default:\n          fabric.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);\n      }\n    },\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function () {\n\n  'use strict';\n\n  if (fabric.StaticCanvas) {\n    fabric.warn('fabric.StaticCanvas is already defined.');\n    return;\n  }\n\n  // aliases for faster resolution\n  var extend = fabric.util.object.extend,\n      getElementOffset = fabric.util.getElementOffset,\n      removeFromArray = fabric.util.removeFromArray,\n      toFixed = fabric.util.toFixed,\n      transformPoint = fabric.util.transformPoint,\n      invertTransform = fabric.util.invertTransform,\n      getNodeCanvas = fabric.util.getNodeCanvas,\n      createCanvasElement = fabric.util.createCanvasElement,\n\n      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\n\n  /**\n   * Static canvas class\n   * @class fabric.StaticCanvas\n   * @mixes fabric.Collection\n   * @mixes fabric.Observable\n   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n   * @fires before:render\n   * @fires after:render\n   * @fires canvas:cleared\n   * @fires object:added\n   * @fires object:removed\n   */\n  fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n      this.renderAndResetBound = this.renderAndReset.bind(this);\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\n      this._initStatic(el, options);\n    },\n\n    /**\n     * Background color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    backgroundColor: '',\n\n    /**\n     * Background image of canvas instance.\n     * since 2.4.0 image caching is active, please when putting an image as background, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */\n    backgroundImage: null,\n\n    /**\n     * Overlay color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n     * @since 1.3.9\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */\n    overlayColor: '',\n\n    /**\n     * Overlay image of canvas instance.\n     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */\n    overlayImage: null,\n\n    /**\n     * Indicates whether toObject/toDatalessObject should include default values\n     * if set to false, takes precedence over the object value.\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues: true,\n\n    /**\n     * Indicates whether objects' state should be saved\n     * @type Boolean\n     * @default\n     */\n    stateful: false,\n\n    /**\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\n     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\n     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n     * since the renders are quequed and executed one per frame.\n     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n     * Left default to true to do not break documentation and old app, fiddles.\n     * @type Boolean\n     * @default\n     */\n    renderOnAddRemove: true,\n\n    /**\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\n     * @type Boolean\n     * @default\n     */\n    controlsAboveOverlay: false,\n\n    /**\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n     * @type Boolean\n     * @default\n     */\n    allowTouchScrolling: false,\n\n    /**\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n     * @type Boolean\n     * @default\n     */\n    imageSmoothingEnabled: true,\n\n    /**\n     * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n     * @type Array\n     * @example <caption>Default transform</caption>\n     * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n     * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n     * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n     * @default\n     */\n    viewportTransform: fabric.iMatrix.concat(),\n\n    /**\n     * if set to false background image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    backgroundVpt: true,\n\n    /**\n     * if set to false overlya image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    overlayVpt: true,\n\n    /**\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n     * @type Boolean\n     * @default\n     */\n    enableRetinaScaling: true,\n\n    /**\n     * Describe canvas element extension over design\n     * properties are tl,tr,bl,br.\n     * if canvas is not zoomed/panned those points are the four corner of canvas\n     * if canvas is viewportTransformed you those points indicate the extension\n     * of canvas element in plain untrasformed coordinates\n     * The coordinates get updated with @method calcViewportBoundaries.\n     * @memberOf fabric.StaticCanvas.prototype\n     */\n    vptCoords: { },\n\n    /**\n     * Based on vptCoords and object.aCoords, skip rendering of objects that\n     * are not included in current viewport.\n     * May greatly help in applications with crowded canvas and use of zoom/pan\n     * If One of the corner of the bounding box of the object is on the canvas\n     * the objects get rendered.\n     * @memberOf fabric.StaticCanvas.prototype\n     * @type Boolean\n     * @default\n     */\n    skipOffscreen: true,\n\n    /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n     * top left corner of the canvas.\n     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n     * @type fabric.Object\n     */\n    clipPath: undefined,\n\n    /**\n     * @private\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     */\n    _initStatic: function(el, options) {\n      var cb = this.requestRenderAllBound;\n      this._objects = [];\n      this._createLowerCanvas(el);\n      this._initOptions(options);\n      // only initialize retina scaling once\n      if (!this.interactive) {\n        this._initRetinaScaling();\n      }\n\n      if (options.overlayImage) {\n        this.setOverlayImage(options.overlayImage, cb);\n      }\n      if (options.backgroundImage) {\n        this.setBackgroundImage(options.backgroundImage, cb);\n      }\n      if (options.backgroundColor) {\n        this.setBackgroundColor(options.backgroundColor, cb);\n      }\n      if (options.overlayColor) {\n        this.setOverlayColor(options.overlayColor, cb);\n      }\n      this.calcOffset();\n    },\n\n    /**\n     * @private\n     */\n    _isRetinaScaling: function() {\n      return (fabric.devicePixelRatio > 1 && this.enableRetinaScaling);\n    },\n\n    /**\n     * @private\n     * @return {Number} retinaScaling if applied, otherwise 1;\n     */\n    getRetinaScaling: function() {\n      return this._isRetinaScaling() ? Math.max(1, fabric.devicePixelRatio) : 1;\n    },\n\n    /**\n     * @private\n     */\n    _initRetinaScaling: function() {\n      if (!this._isRetinaScaling()) {\n        return;\n      }\n      var scaleRatio = fabric.devicePixelRatio;\n      this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);\n      if (this.upperCanvasEl) {\n        this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);\n      }\n    },\n\n    __initRetinaScaling: function(scaleRatio, canvas, context) {\n      canvas.setAttribute('width', this.width * scaleRatio);\n      canvas.setAttribute('height', this.height * scaleRatio);\n      context.scale(scaleRatio, scaleRatio);\n    },\n\n\n    /**\n     * Calculates canvas element offset relative to the document\n     * This method is also attached as \"resize\" event handler of window\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    calcOffset: function () {\n      this._offset = getElementOffset(this.lowerCanvasEl);\n      return this;\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage with different properties</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage loaded from cross-origin</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    setOverlayImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('overlayImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage with different properties</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */\n    // TODO: fix stretched examples\n    setBackgroundImage: function (image, callback, options) {\n      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\n     * @param {Function} callback Callback to invoke when foreground color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n     * @example <caption>Normal overlayColor - color value</caption>\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setOverlayColor: function(overlayColor, callback) {\n      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\n    },\n\n    /**\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n     * @example <caption>Normal backgroundColor - color value</caption>\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */\n    setBackgroundColor: function(backgroundColor, callback) {\n      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n     */\n    __setBgOverlayImage: function(property, image, callback, options) {\n      if (typeof image === 'string') {\n        fabric.util.loadImage(image, function(img, isError) {\n          if (img) {\n            var instance = new fabric.Image(img, options);\n            this[property] = instance;\n            instance.canvas = this;\n          }\n          callback && callback(img, isError);\n        }, this, options && options.crossOrigin);\n      }\n      else {\n        options && image.setOptions(options);\n        this[property] = image;\n        image && (image.canvas = this);\n        callback && callback(image, false);\n      }\n\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\n     * @param {Function} [callback] Callback is invoked when color is set\n     */\n    __setBgOverlayColor: function(property, color, callback) {\n      this[property] = color;\n      this._initGradient(color, property);\n      this._initPattern(color, property, callback);\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _createCanvasElement: function() {\n      var element = createCanvasElement();\n      if (!element) {\n        throw CANVAS_INIT_ERROR;\n      }\n      if (!element.style) {\n        element.style = { };\n      }\n      if (typeof element.getContext === 'undefined') {\n        throw CANVAS_INIT_ERROR;\n      }\n      return element;\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initOptions: function (options) {\n      var lowerCanvasEl = this.lowerCanvasEl;\n      this._setOptions(options);\n\n      this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\n      this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\n\n      if (!this.lowerCanvasEl.style) {\n        return;\n      }\n\n      lowerCanvasEl.width = this.width;\n      lowerCanvasEl.height = this.height;\n\n      lowerCanvasEl.style.width = this.width + 'px';\n      lowerCanvasEl.style.height = this.height + 'px';\n\n      this.viewportTransform = this.viewportTransform.slice();\n    },\n\n    /**\n     * Creates a bottom canvas\n     * @private\n     * @param {HTMLElement} [canvasEl]\n     */\n    _createLowerCanvas: function (canvasEl) {\n      // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n      if (canvasEl && canvasEl.getContext) {\n        this.lowerCanvasEl = canvasEl;\n      }\n      else {\n        this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n      }\n\n      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\n      this._originalCanvasStyle = this.lowerCanvasEl.style;\n      if (this.interactive) {\n        this._applyCanvasStyle(this.lowerCanvasEl);\n      }\n\n      this.contextContainer = this.lowerCanvasEl.getContext('2d');\n    },\n\n    /**\n     * Returns canvas width (in px)\n     * @return {Number}\n     */\n    getWidth: function () {\n      return this.width;\n    },\n\n    /**\n     * Returns canvas height (in px)\n     * @return {Number}\n     */\n    getHeight: function () {\n      return this.height;\n    },\n\n    /**\n     * Sets width of this canvas instance\n     * @param {Number|String} value                         Value to set width to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setWidth: function (value, options) {\n      return this.setDimensions({ width: value }, options);\n    },\n\n    /**\n     * Sets height of this canvas instance\n     * @param {Number|String} value                         Value to set height to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setHeight: function (value, options) {\n      return this.setDimensions({ height: value }, options);\n    },\n\n    /**\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n     * @param {Object}        dimensions                    Object with width/height properties\n     * @param {Number|String} [dimensions.width]            Width of canvas element\n     * @param {Number|String} [dimensions.height]           Height of canvas element\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setDimensions: function (dimensions, options) {\n      var cssValue;\n\n      options = options || {};\n\n      for (var prop in dimensions) {\n        cssValue = dimensions[prop];\n\n        if (!options.cssOnly) {\n          this._setBackstoreDimension(prop, dimensions[prop]);\n          cssValue += 'px';\n          this.hasLostContext = true;\n        }\n\n        if (!options.backstoreOnly) {\n          this._setCssDimension(prop, cssValue);\n        }\n      }\n      if (this._isCurrentlyDrawing) {\n        this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\n      }\n      this._initRetinaScaling();\n      this.calcOffset();\n\n      if (!options.cssOnly) {\n        this.requestRenderAll();\n      }\n\n      return this;\n    },\n\n    /**\n     * Helper for setting width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {Number} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setBackstoreDimension: function (prop, value) {\n      this.lowerCanvasEl[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl[prop] = value;\n      }\n\n      if (this.cacheCanvasEl) {\n        this.cacheCanvasEl[prop] = value;\n      }\n\n      this[prop] = value;\n\n      return this;\n    },\n\n    /**\n     * Helper for setting css width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {String} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    _setCssDimension: function (prop, value) {\n      this.lowerCanvasEl.style[prop] = value;\n\n      if (this.upperCanvasEl) {\n        this.upperCanvasEl.style[prop] = value;\n      }\n\n      if (this.wrapperEl) {\n        this.wrapperEl.style[prop] = value;\n      }\n\n      return this;\n    },\n\n    /**\n     * Returns canvas zoom level\n     * @return {Number}\n     */\n    getZoom: function () {\n      return this.viewportTransform[0];\n    },\n\n    /**\n     * Sets viewport transformation of this canvas instance\n     * @param {Array} vpt a Canvas 2D API transform matrix\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setViewportTransform: function (vpt) {\n      var activeObject = this._activeObject,\n          backgroundObject = this.backgroundImage,\n          overlayObject = this.overlayImage,\n          object, i, len;\n      this.viewportTransform = vpt;\n      for (i = 0, len = this._objects.length; i < len; i++) {\n        object = this._objects[i];\n        object.group || object.setCoords(true);\n      }\n      if (activeObject) {\n        activeObject.setCoords();\n      }\n      if (backgroundObject) {\n        backgroundObject.setCoords(true);\n      }\n      if (overlayObject) {\n        overlayObject.setCoords(true);\n      }\n      this.calcViewportBoundaries();\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Sets zoom level of this canvas instance, the zoom centered around point\n     * meaning that following zoom to point with the same point will have the visual\n     * effect of the zoom originating from that point. The point won't move.\n     * It has nothing to do with canvas center or visual center of the viewport.\n     * @param {fabric.Point} point to zoom with respect to\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    zoomToPoint: function (point, value) {\n      // TODO: just change the scale, preserve other transformations\n      var before = point, vpt = this.viewportTransform.slice(0);\n      point = transformPoint(point, invertTransform(this.viewportTransform));\n      vpt[0] = value;\n      vpt[3] = value;\n      var after = transformPoint(point, vpt);\n      vpt[4] += before.x - after.x;\n      vpt[5] += before.y - after.y;\n      return this.setViewportTransform(vpt);\n    },\n\n    /**\n     * Sets zoom level of this canvas instance\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    setZoom: function (value) {\n      this.zoomToPoint(new fabric.Point(0, 0), value);\n      return this;\n    },\n\n    /**\n     * Pan viewport so as to place point at top left corner of canvas\n     * @param {fabric.Point} point to move to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    absolutePan: function (point) {\n      var vpt = this.viewportTransform.slice(0);\n      vpt[4] = -point.x;\n      vpt[5] = -point.y;\n      return this.setViewportTransform(vpt);\n    },\n\n    /**\n     * Pans viewpoint relatively\n     * @param {fabric.Point} point (position vector) to move by\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */\n    relativePan: function (point) {\n      return this.absolutePan(new fabric.Point(\n        -point.x - this.viewportTransform[4],\n        -point.y - this.viewportTransform[5]\n      ));\n    },\n\n    /**\n     * Returns &lt;canvas> element corresponding to this instance\n     * @return {HTMLCanvasElement}\n     */\n    getElement: function () {\n      return this.lowerCanvasEl;\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was added\n     */\n    _onObjectAdded: function(obj) {\n      this.stateful && obj.setupState();\n      obj._set('canvas', this);\n      obj.setCoords();\n      this.fire('object:added', { target: obj });\n      obj.fire('added');\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      this.fire('object:removed', { target: obj });\n      obj.fire('removed');\n      delete obj.canvas;\n    },\n\n    /**\n     * Clears specified context of canvas element\n     * @param {CanvasRenderingContext2D} ctx Context to clear\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clearContext: function(ctx) {\n      ctx.clearRect(0, 0, this.width, this.height);\n      return this;\n    },\n\n    /**\n     * Returns context of canvas where objects are drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getContext: function () {\n      return this.contextContainer;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      this.remove.apply(this, this.getObjects());\n      this.backgroundImage = null;\n      this.overlayImage = null;\n      this.backgroundColor = '';\n      this.overlayColor = '';\n      if (this._hasITextHandlers) {\n        this.off('mouse:up', this._mouseUpITextHandler);\n        this._iTextInstances = null;\n        this._hasITextHandlers = false;\n      }\n      this.clearContext(this.contextContainer);\n      this.fire('canvas:cleared');\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Renders the canvas\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function () {\n      var canvasToDrawOn = this.contextContainer;\n      this.renderCanvas(canvasToDrawOn, this._objects);\n      return this;\n    },\n\n    /**\n     * Function created to be instance bound at initialization\n     * used in requestAnimationFrame rendering\n     * Let the fabricJS call it. If you call it manually you could have more\n     * animationFrame stacking on to of each other\n     * for an imperative rendering, use canvas.renderAll\n     * @private\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAndReset: function() {\n      this.isRendering = 0;\n      this.renderAll();\n    },\n\n    /**\n     * Append a renderAll request to next animation frame.\n     * unless one is already in progress, in that case nothing is done\n     * a boolean flag will avoid appending more.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    requestRenderAll: function () {\n      if (!this.isRendering) {\n        this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\n      }\n      return this;\n    },\n\n    /**\n     * Calculate the position of the 4 corner of canvas with current viewportTransform.\n     * helps to determinate when an object is in the current rendering viewport using\n     * object absolute coordinates ( aCoords )\n     * @return {Object} points.tl\n     * @chainable\n     */\n    calcViewportBoundaries: function() {\n      var points = { }, width = this.width, height = this.height,\n          iVpt = invertTransform(this.viewportTransform);\n      points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\n      points.br = transformPoint({ x: width, y: height }, iVpt);\n      points.tr = new fabric.Point(points.br.x, points.tl.y);\n      points.bl = new fabric.Point(points.tl.x, points.br.y);\n      this.vptCoords = points;\n      return points;\n    },\n\n    cancelRequestedRender: function() {\n      if (this.isRendering) {\n        fabric.util.cancelAnimFrame(this.isRendering);\n        this.isRendering = 0;\n      }\n    },\n\n    /**\n     * Renders background, objects, overlay and controls.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array} objects to render\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderCanvas: function(ctx, objects) {\n      var v = this.viewportTransform, path = this.clipPath;\n      this.cancelRequestedRender();\n      this.calcViewportBoundaries();\n      this.clearContext(ctx);\n      fabric.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);\n      this.fire('before:render', { ctx: ctx, });\n      this._renderBackground(ctx);\n\n      ctx.save();\n      //apply viewport transform once for all rendering process\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      this._renderObjects(ctx, objects);\n      ctx.restore();\n      if (!this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(ctx);\n      }\n      if (path) {\n        path.canvas = this;\n        // needed to setup a couple of variables\n        path.shouldCache();\n        path._transformDone = true;\n        path.renderCache({ forClipping: true });\n        this.drawClipPathOnCanvas(ctx);\n      }\n      this._renderOverlay(ctx);\n      if (this.controlsAboveOverlay && this.interactive) {\n        this.drawControls(ctx);\n      }\n      this.fire('after:render', { ctx: ctx, });\n    },\n\n    /**\n     * Paint the cached clipPath on the lowerCanvasEl\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawClipPathOnCanvas: function(ctx) {\n      var v = this.viewportTransform, path = this.clipPath;\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      // DEBUG: uncomment this line, comment the following\n      // ctx.globalAlpha = 0.4;\n      ctx.globalCompositeOperation = 'destination-in';\n      path.transform(ctx);\n      ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} objects to render\n     */\n    _renderObjects: function(ctx, objects) {\n      var i, len;\n      for (i = 0, len = objects.length; i < len; ++i) {\n        objects[i] && objects[i].render(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {string} property 'background' or 'overlay'\n     */\n    _renderBackgroundOrOverlay: function(ctx, property) {\n      var fill = this[property + 'Color'], object = this[property + 'Image'],\n          v = this.viewportTransform, needsVpt = this[property + 'Vpt'];\n      if (!fill && !object) {\n        return;\n      }\n      if (fill) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(this.width, 0);\n        ctx.lineTo(this.width, this.height);\n        ctx.lineTo(0, this.height);\n        ctx.closePath();\n        ctx.fillStyle = fill.toLive\n          ? fill.toLive(ctx, this)\n          : fill;\n        if (needsVpt) {\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        }\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n        var m = fill.gradientTransform || fill.patternTransform;\n        m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        ctx.fill();\n        ctx.restore();\n      }\n      if (object) {\n        ctx.save();\n        if (needsVpt) {\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n        }\n        object.render(ctx);\n        ctx.restore();\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      this._renderBackgroundOrOverlay(ctx, 'background');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderOverlay: function(ctx) {\n      this._renderBackgroundOrOverlay(ctx, 'overlay');\n    },\n\n    /**\n     * Returns coordinates of a center of canvas.\n     * Returned value is an object with top and left properties\n     * @return {Object} object with \"top\" and \"left\" number values\n     * @deprecated migrate to `getCenterPoint`\n     */\n    getCenter: function () {\n      return {\n        top: this.height / 2,\n        left: this.width / 2\n      };\n    },\n\n    /**\n     * Returns coordinates of a center of canvas.\n     * @return {fabric.Point} \n     */\n    getCenterPoint: function () {\n      return new fabric.Point(this.width / 2, this.height / 2);\n    },\n\n    /**\n     * Centers object horizontally in the canvas\n     * @param {fabric.Object} object Object to center horizontally\n     * @return {fabric.Canvas} thisArg\n     */\n    centerObjectH: function (object) {\n      return this._centerObject(object, new fabric.Point(this.getCenterPoint().x, object.getCenterPoint().y));\n    },\n\n    /**\n     * Centers object vertically in the canvas\n     * @param {fabric.Object} object Object to center vertically\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObjectV: function (object) {\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenterPoint().y));\n    },\n\n    /**\n     * Centers object vertically and horizontally in the canvas\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    centerObject: function(object) {\n      var center = this.getCenterPoint();\n      return this._centerObject(object, center);\n    },\n\n    /**\n     * Centers object vertically and horizontally in the viewport\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObject: function(object) {\n      var vpCenter = this.getVpCenter();\n      return this._centerObject(object, vpCenter);\n    },\n\n    /**\n     * Centers object horizontally in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObjectH: function(object) {\n      var vpCenter = this.getVpCenter();\n      this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\n      return this;\n    },\n\n    /**\n     * Centers object Vertically in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    viewportCenterObjectV: function(object) {\n      var vpCenter = this.getVpCenter();\n\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\n    },\n\n    /**\n     * Calculate the point in canvas that correspond to the center of actual viewport.\n     * @return {fabric.Point} vpCenter, viewport center\n     * @chainable\n     */\n    getVpCenter: function() {\n      var center = this.getCenterPoint(),\n          iVpt = invertTransform(this.viewportTransform);\n      return transformPoint(center, iVpt);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} object Object to center\n     * @param {fabric.Point} center Center point\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    _centerObject: function(object, center) {\n      object.setPositionByOrigin(center, 'center', 'center');\n      object.setCoords();\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Returns dataless JSON representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} json string\n     */\n    toDatalessJSON: function (propertiesToInclude) {\n      return this.toDatalessObject(propertiesToInclude);\n    },\n\n    /**\n     * Returns object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toObject', propertiesToInclude);\n    },\n\n    /**\n     * Returns dataless object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function (propertiesToInclude) {\n      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\n    },\n\n    /**\n     * @private\n     */\n    _toObjectMethod: function (methodName, propertiesToInclude) {\n\n      var clipPath = this.clipPath, data = {\n        version: fabric.version,\n        objects: this._toObjects(methodName, propertiesToInclude),\n      };\n      if (clipPath && !clipPath.excludeFromExport) {\n        data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);\n      }\n      extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\n\n      fabric.util.populateWithProperties(this, data, propertiesToInclude);\n\n      return data;\n    },\n\n    /**\n     * @private\n     */\n    _toObjects: function(methodName, propertiesToInclude) {\n      return this._objects.filter(function(object) {\n        return !object.excludeFromExport;\n      }).map(function(instance) {\n        return this._toObject(instance, methodName, propertiesToInclude);\n      }, this);\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      var originalValue;\n\n      if (!this.includeDefaultValues) {\n        originalValue = instance.includeDefaultValues;\n        instance.includeDefaultValues = false;\n      }\n\n      var object = instance[methodName](propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        instance.includeDefaultValues = originalValue;\n      }\n      return object;\n    },\n\n    /**\n     * @private\n     */\n    __serializeBgOverlay: function(methodName, propertiesToInclude) {\n      var data = {}, bgImage = this.backgroundImage, overlayImage = this.overlayImage,\n          bgColor = this.backgroundColor, overlayColor = this.overlayColor;\n\n      if (bgColor && bgColor.toObject) {\n        if (!bgColor.excludeFromExport) {\n          data.background = bgColor.toObject(propertiesToInclude);\n        }\n      }\n      else if (bgColor) {\n        data.background = bgColor;\n      }\n\n      if (overlayColor && overlayColor.toObject) {\n        if (!overlayColor.excludeFromExport) {\n          data.overlay = overlayColor.toObject(propertiesToInclude);\n        }\n      }\n      else if (overlayColor) {\n        data.overlay = overlayColor;\n      }\n\n      if (bgImage && !bgImage.excludeFromExport) {\n        data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\n      }\n      if (overlayImage && !overlayImage.excludeFromExport) {\n        data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);\n      }\n\n      return data;\n    },\n\n    \n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendToBack: function (object) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, objs;\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = objs.length; i--;) {\n          obj = objs[i];\n          removeFromArray(this._objects, obj);\n          this._objects.unshift(obj);\n        }\n      }\n      else {\n        removeFromArray(this._objects, object);\n        this._objects.unshift(object);\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringToFront: function (object) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, objs;\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = 0; i < objs.length; i++) {\n          obj = objs[i];\n          removeFromArray(this._objects, obj);\n          this._objects.push(obj);\n        }\n      }\n      else {\n        removeFromArray(this._objects, object);\n        this._objects.push(object);\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    sendBackwards: function (object, intersecting) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, idx, newIdx, objs, objsMoved = 0;\n\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = 0; i < objs.length; i++) {\n          obj = objs[i];\n          idx = this._objects.indexOf(obj);\n          if (idx > 0 + objsMoved) {\n            newIdx = idx - 1;\n            removeFromArray(this._objects, obj);\n            this._objects.splice(newIdx, 0, obj);\n          }\n          objsMoved++;\n        }\n      }\n      else {\n        idx = this._objects.indexOf(object);\n        if (idx !== 0) {\n          // if object is not on the bottom of stack\n          newIdx = this._findNewLowerIndex(object, idx, intersecting);\n          removeFromArray(this._objects, object);\n          this._objects.splice(newIdx, 0, object);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewLowerIndex: function(object, idx, intersecting) {\n      var newIdx, i;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse down the stack looking for the nearest intersecting object\n        for (i = idx - 1; i >= 0; --i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx - 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    bringForward: function (object, intersecting) {\n      if (!object) {\n        return this;\n      }\n      var activeSelection = this._activeObject,\n          i, obj, idx, newIdx, objs, objsMoved = 0;\n\n      if (object === activeSelection && object.type === 'activeSelection') {\n        objs = activeSelection._objects;\n        for (i = objs.length; i--;) {\n          obj = objs[i];\n          idx = this._objects.indexOf(obj);\n          if (idx < this._objects.length - 1 - objsMoved) {\n            newIdx = idx + 1;\n            removeFromArray(this._objects, obj);\n            this._objects.splice(newIdx, 0, obj);\n          }\n          objsMoved++;\n        }\n      }\n      else {\n        idx = this._objects.indexOf(object);\n        if (idx !== this._objects.length - 1) {\n          // if object is not on top of stack (last item in an array)\n          newIdx = this._findNewUpperIndex(object, idx, intersecting);\n          removeFromArray(this._objects, object);\n          this._objects.splice(newIdx, 0, object);\n        }\n      }\n      this.renderOnAddRemove && this.requestRenderAll();\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _findNewUpperIndex: function(object, idx, intersecting) {\n      var newIdx, i, len;\n\n      if (intersecting) {\n        newIdx = idx;\n\n        // traverse up the stack looking for the nearest intersecting object\n        for (i = idx + 1, len = this._objects.length; i < len; ++i) {\n\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\n                               object.isContainedWithinObject(this._objects[i]) ||\n                               this._objects[i].isContainedWithinObject(object);\n\n          if (isIntersecting) {\n            newIdx = i;\n            break;\n          }\n        }\n      }\n      else {\n        newIdx = idx + 1;\n      }\n\n      return newIdx;\n    },\n\n    /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Number} index Position to move to\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    moveTo: function (object, index) {\n      removeFromArray(this._objects, object);\n      this._objects.splice(index, 0, object);\n      return this.renderOnAddRemove && this.requestRenderAll();\n    },\n\n    /**\n     * Clears a canvas element and dispose objects\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      // cancel eventually ongoing renders\n      if (this.isRendering) {\n        fabric.util.cancelAnimFrame(this.isRendering);\n        this.isRendering = 0;\n      }\n      this.forEachObject(function(object) {\n        object.dispose && object.dispose();\n      });\n      this._objects = [];\n      if (this.backgroundImage && this.backgroundImage.dispose) {\n        this.backgroundImage.dispose();\n      }\n      this.backgroundImage = null;\n      if (this.overlayImage && this.overlayImage.dispose) {\n        this.overlayImage.dispose();\n      }\n      this.overlayImage = null;\n      this._iTextInstances = null;\n      this.contextContainer = null;\n      // restore canvas style\n      this.lowerCanvasEl.classList.remove('lower-canvas');\n      fabric.util.setStyle(this.lowerCanvasEl, this._originalCanvasStyle);\n      delete this._originalCanvasStyle;\n      // restore canvas size to original size in case retina scaling was applied\n      this.lowerCanvasEl.setAttribute('width', this.width);\n      this.lowerCanvasEl.setAttribute('height', this.height);\n      fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\n      this.lowerCanvasEl = undefined;\n      return this;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function () {\n      return '#<fabric.Canvas (' + this.complexity() + '): ' +\n               '{ objects: ' + this._objects.length + ' }>';\n    }\n  });\n\n  extend(fabric.StaticCanvas.prototype, fabric.Observable);\n  extend(fabric.StaticCanvas.prototype, fabric.Collection);\n  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n\n  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n\n    /**\n     * @static\n     * @type String\n     * @default\n     */\n    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n\n    /**\n     * Provides a way to check support of some of the canvas methods\n     * (either those of HTMLCanvasElement itself, or rendering context)\n     *\n     * @param {String} methodName Method to check support for;\n     *                            Could be one of \"setLineDash\"\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\n     *                          `null` if canvas element or context can not be initialized\n     */\n    supports: function (methodName) {\n      var el = createCanvasElement();\n\n      if (!el || !el.getContext) {\n        return null;\n      }\n\n      var ctx = el.getContext('2d');\n      if (!ctx) {\n        return null;\n      }\n\n      switch (methodName) {\n\n        case 'setLineDash':\n          return typeof ctx.setLineDash !== 'undefined';\n\n        default:\n          return null;\n      }\n    }\n  });\n\n  /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @function\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * canvas.includeDefaultValues = false;\n   * var json = canvas.toJSON();\n   */\n  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n\n  if (fabric.isLikelyNode) {\n    fabric.StaticCanvas.prototype.createPNGStream = function() {\n      var impl = getNodeCanvas(this.lowerCanvasEl);\n      return impl && impl.createPNGStream();\n    };\n    fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n      var impl = getNodeCanvas(this.lowerCanvasEl);\n      return impl && impl.createJPEGStream(opts);\n    };\n  }\n})();\n/**\n * BaseBrush class\n * @class fabric.BaseBrush\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */\nfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n\n  /**\n   * Color of a brush\n   * @type String\n   * @default\n   */\n  color: 'rgb(0, 0, 0)',\n\n  /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */\n  width: 1,\n\n  /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type fabric.Shadow\n   * @default\n   */\n  shadow: null,\n\n  /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */\n  strokeLineCap: 'round',\n\n  /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */\n  strokeLineJoin: 'round',\n\n  /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */\n  strokeMiterLimit:         10,\n\n  /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */\n  strokeDashArray: null,\n\n  /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n  */\n\n  limitedToCanvasSize: false,\n\n\n  /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles: function (ctx) {\n    ctx.strokeStyle = this.color;\n    ctx.lineWidth = this.width;\n    ctx.lineCap = this.strokeLineCap;\n    ctx.miterLimit = this.strokeMiterLimit;\n    ctx.lineJoin = this.strokeLineJoin;\n    ctx.setLineDash(this.strokeDashArray || []);\n  },\n\n  /**\n   * Sets the transformation on given context\n   * @param {RenderingContext2d} ctx context to render on\n   * @private\n   */\n  _saveAndTransform: function(ctx) {\n    var v = this.canvas.viewportTransform;\n    ctx.save();\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n  },\n\n  /**\n   * Sets brush shadow styles\n   * @private\n   */\n  _setShadow: function() {\n    if (!this.shadow) {\n      return;\n    }\n\n    var canvas = this.canvas,\n        shadow = this.shadow,\n        ctx = canvas.contextTop,\n        zoom = canvas.getZoom();\n    if (canvas && canvas._isRetinaScaling()) {\n      zoom *= fabric.devicePixelRatio;\n    }\n\n    ctx.shadowColor = shadow.color;\n    ctx.shadowBlur = shadow.blur * zoom;\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\n  },\n\n  needsFullRender: function() {\n    var color = new fabric.Color(this.color);\n    return color.getAlpha() < 1 || !!this.shadow;\n  },\n\n  /**\n   * Removes brush shadow styles\n   * @private\n   */\n  _resetShadow: function() {\n    var ctx = this.canvas.contextTop;\n\n    ctx.shadowColor = '';\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n  },\n\n  /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n  */\n  _isOutSideCanvas: function(pointer) {\n    return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();\n  }\n});\n(function() {\n  /**\n   * PencilBrush class\n   * @class fabric.PencilBrush\n   * @extends fabric.BaseBrush\n   */\n  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n\n    /**\n     * Discard points that are less than `decimate` pixel distant from each other\n     * @type Number\n     * @default 0.4\n     */\n    decimate: 0.4,\n\n    /**\n     * Draws a straight line between last recorded point to current pointer\n     * Used for `shift` functionality\n     *\n     * @type boolean\n     * @default false\n     */\n    drawStraightLine: false,\n\n    /**\n     * The event modifier key that makes the brush draw a straight line.\n     * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n     * @type {'altKey' | 'shiftKey' | 'ctrlKey' | 'none' | undefined | null}\n     */\n    straightLineKey: 'shiftKey',\n\n    /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.PencilBrush} Instance of a pencil brush\n     */\n    initialize: function(canvas) {\n      this.canvas = canvas;\n      this._points = [];\n    },\n\n    needsFullRender: function () {\n      return this.callSuper('needsFullRender') || this._hasStraightLine;\n    },\n\n    /**\n     * Invoked inside on mouse down and mouse move\n     * @param {Object} pointer\n     */\n    _drawSegment: function (ctx, p1, p2) {\n      var midPoint = p1.midPointFrom(p2);\n      ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n      return midPoint;\n    },\n\n    /**\n     * Invoked on mouse down\n     * @param {Object} pointer\n     */\n    onMouseDown: function(pointer, options) {\n      if (!this.canvas._isMainEvent(options.e)) {\n        return;\n      }\n      this.drawStraightLine = options.e[this.straightLineKey];\n      this._prepareForDrawing(pointer);\n      // capture coordinates immediately\n      // this allows to draw dots (when movement never occurs)\n      this._captureDrawingPath(pointer);\n      this._render();\n    },\n\n    /**\n     * Invoked on mouse move\n     * @param {Object} pointer\n     */\n    onMouseMove: function(pointer, options) {\n      if (!this.canvas._isMainEvent(options.e)) {\n        return;\n      }\n      this.drawStraightLine = options.e[this.straightLineKey];\n      if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n        return;\n      }\n      if (this._captureDrawingPath(pointer) && this._points.length > 1) {\n        if (this.needsFullRender()) {\n          // redraw curve\n          // clear top canvas\n          this.canvas.clearContext(this.canvas.contextTop);\n          this._render();\n        }\n        else {\n          var points = this._points, length = points.length, ctx = this.canvas.contextTop;\n          // draw the curve update\n          this._saveAndTransform(ctx);\n          if (this.oldEnd) {\n            ctx.beginPath();\n            ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n          }\n          this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\n          ctx.stroke();\n          ctx.restore();\n        }\n      }\n    },\n\n    /**\n     * Invoked on mouse up\n     */\n    onMouseUp: function(options) {\n      if (!this.canvas._isMainEvent(options.e)) {\n        return true;\n      }\n      this.drawStraightLine = false;\n      this.oldEnd = undefined;\n      this._finalizeAndAddPath();\n      return false;\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _prepareForDrawing: function(pointer) {\n\n      var p = new fabric.Point(pointer.x, pointer.y);\n\n      this._reset();\n      this._addPoint(p);\n      this.canvas.contextTop.moveTo(p.x, p.y);\n    },\n\n    /**\n     * @private\n     * @param {fabric.Point} point Point to be added to points array\n     */\n    _addPoint: function(point) {\n      if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\n        return false;\n      }\n      if (this.drawStraightLine && this._points.length > 1) {\n        this._hasStraightLine = true;\n        this._points.pop();\n      }\n      this._points.push(point);\n      return true;\n    },\n\n    /**\n     * Clear points array and set contextTop canvas style.\n     * @private\n     */\n    _reset: function() {\n      this._points = [];\n      this._setBrushStyles(this.canvas.contextTop);\n      this._setShadow();\n      this._hasStraightLine = false;\n    },\n\n    /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */\n    _captureDrawingPath: function(pointer) {\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n      return this._addPoint(pointerPoint);\n    },\n\n    /**\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\n     * @private\n     * @param {CanvasRenderingContext2D} [ctx]\n     */\n    _render: function(ctx) {\n      var i, len,\n          p1 = this._points[0],\n          p2 = this._points[1];\n      ctx = ctx || this.canvas.contextTop;\n      this._saveAndTransform(ctx);\n      ctx.beginPath();\n      //if we only have 2 points in the path and they are the same\n      //it means that the user only clicked the canvas without moving the mouse\n      //then we should be drawing a dot. A path isn't drawn between two identical dots\n      //that's why we set them apart a bit\n      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n        var width = this.width / 1000;\n        p1 = new fabric.Point(p1.x, p1.y);\n        p2 = new fabric.Point(p2.x, p2.y);\n        p1.x -= width;\n        p2.x += width;\n      }\n      ctx.moveTo(p1.x, p1.y);\n\n      for (i = 1, len = this._points.length; i < len; i++) {\n        // we pick the point between pi + 1 & pi + 2 as the\n        // end point and p1 as our control point.\n        this._drawSegment(ctx, p1, p2);\n        p1 = this._points[i];\n        p2 = this._points[i + 1];\n      }\n      // Draw last line as a straight line while\n      // we wait for the next point to be able to calculate\n      // the bezier control point\n      ctx.lineTo(p1.x, p1.y);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * Converts points to SVG path\n     * @param {Array} points Array of points\n     * @return {(string|number)[][]} SVG path commands\n     */\n    convertPointsToSVGPath: function (points) {\n      var correction = this.width / 1000;\n      return fabric.util.getSmoothPathFromPoints(points, correction);\n    },\n\n    /**\n     * @private\n     * @param {(string|number)[][]} pathData SVG path commands\n     * @returns {boolean}\n     */\n    _isEmptySVGPath: function (pathData) {\n      var pathString = fabric.util.joinPath(pathData);\n      return pathString === 'M 0 0 Q 0 0 0 0 L 0 0';\n    },\n\n    /**\n     * Creates fabric.Path object to add on canvas\n     * @param {(string|number)[][]} pathData Path data\n     * @return {fabric.Path} Path to add on canvas\n     */\n    createPath: function(pathData) {\n      var path = new fabric.Path(pathData, {\n        fill: null,\n        stroke: this.color,\n        strokeWidth: this.width,\n        strokeLineCap: this.strokeLineCap,\n        strokeMiterLimit: this.strokeMiterLimit,\n        strokeLineJoin: this.strokeLineJoin,\n        strokeDashArray: this.strokeDashArray,\n      });\n      if (this.shadow) {\n        this.shadow.affectStroke = true;\n        path.shadow = new fabric.Shadow(this.shadow);\n      }\n\n      return path;\n    },\n\n    /**\n     * Decimate points array with the decimate value\n     */\n    decimatePoints: function(points, distance) {\n      if (points.length <= 2) {\n        return points;\n      }\n      var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2),\n          i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint],\n          cDistance;\n      for (i = 1; i < l - 1; i++) {\n        cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);\n        if (cDistance >= adjustedDistance) {\n          lastPoint = points[i];\n          newPoints.push(lastPoint);\n        }\n      }\n      /**\n       * Add the last point from the original line to the end of the array.\n       * This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n       */\n      newPoints.push(points[l]);\n      return newPoints;\n    },\n\n    /**\n     * On mouseup after drawing the path on contextTop canvas\n     * we use the points captured to create an new fabric path object\n     * and add it to the fabric canvas.\n     */\n    _finalizeAndAddPath: function() {\n      var ctx = this.canvas.contextTop;\n      ctx.closePath();\n      if (this.decimate) {\n        this._points = this.decimatePoints(this._points, this.decimate);\n      }\n      var pathData = this.convertPointsToSVGPath(this._points);\n      if (this._isEmptySVGPath(pathData)) {\n        // do not create 0 width/height paths, as they are\n        // rendered inconsistently across browsers\n        // Firefox 4, for example, renders a dot,\n        // whereas Chrome 10 renders nothing\n        this.canvas.requestRenderAll();\n        return;\n      }\n\n      var path = this.createPath(pathData);\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.canvas.fire('before:path:created', { path: path });\n      this.canvas.add(path);\n      this.canvas.requestRenderAll();\n      path.setCoords();\n      this._resetShadow();\n\n\n      // fire event 'path' created\n      this.canvas.fire('path:created', { path: path });\n    }\n  });\n})();\n/**\n * CircleBrush class\n * @class fabric.CircleBrush\n */\nfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n\n  /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */\n  width: 10,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.CircleBrush} Instance of a circle brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.points = [];\n  },\n\n  /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Object} pointer\n   */\n  drawDot: function(pointer) {\n    var point = this.addPoint(pointer),\n        ctx = this.canvas.contextTop;\n    this._saveAndTransform(ctx);\n    this.dot(ctx, point);\n    ctx.restore();\n  },\n\n  dot: function(ctx, point) {\n    ctx.fillStyle = point.fill;\n    ctx.beginPath();\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n  },\n\n  /**\n   * Invoked on mouse down\n   */\n  onMouseDown: function(pointer) {\n    this.points.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n    this.drawDot(pointer);\n  },\n\n  /**\n   * Render the full state of the brush\n   * @private\n   */\n  _render: function() {\n    var ctx  = this.canvas.contextTop, i, len,\n        points = this.points;\n    this._saveAndTransform(ctx);\n    for (i = 0, len = points.length; i < len; i++) {\n      this.dot(ctx, points[i]);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    if (this.needsFullRender()) {\n      this.canvas.clearContext(this.canvas.contextTop);\n      this.addPoint(pointer);\n      this._render();\n    }\n    else {\n      this.drawDot(pointer);\n    }\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\n    this.canvas.renderOnAddRemove = false;\n\n    var circles = [];\n\n    for (i = 0, len = this.points.length; i < len; i++) {\n      var point = this.points[i],\n          circle = new fabric.Circle({\n            radius: point.radius,\n            left: point.x,\n            top: point.y,\n            originX: 'center',\n            originY: 'center',\n            fill: point.fill\n          });\n\n      this.shadow && (circle.shadow = new fabric.Shadow(this.shadow));\n\n      circles.push(circle);\n    }\n    var group = new fabric.Group(circles);\n    group.canvas = this.canvas;\n\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  },\n\n  /**\n   * @param {Object} pointer\n   * @return {fabric.Point} Just added pointer point\n   */\n  addPoint: function(pointer) {\n    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\n\n        circleRadius = fabric.util.getRandomInt(\n          Math.max(0, this.width - 20), this.width + 20) / 2,\n\n        circleColor = new fabric.Color(this.color)\n          .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\n          .toRgba();\n\n    pointerPoint.radius = circleRadius;\n    pointerPoint.fill = circleColor;\n\n    this.points.push(pointerPoint);\n\n    return pointerPoint;\n  }\n});\n/**\n * SprayBrush class\n * @class fabric.SprayBrush\n */\nfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n\n  /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */\n  width:              10,\n\n  /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */\n  density:            20,\n\n  /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidth:           1,\n\n  /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */\n  dotWidthVariance:   1,\n\n  /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */\n  randomOpacity:        false,\n\n  /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */\n  optimizeOverlapping:  true,\n\n  /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.SprayBrush} Instance of a spray brush\n   */\n  initialize: function(canvas) {\n    this.canvas = canvas;\n    this.sprayChunks = [];\n  },\n\n  /**\n   * Invoked on mouse down\n   * @param {Object} pointer\n   */\n  onMouseDown: function(pointer) {\n    this.sprayChunks.length = 0;\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._setShadow();\n\n    this.addSprayChunk(pointer);\n    this.render(this.sprayChunkPoints);\n  },\n\n  /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */\n  onMouseMove: function(pointer) {\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n      return;\n    }\n    this.addSprayChunk(pointer);\n    this.render(this.sprayChunkPoints);\n  },\n\n  /**\n   * Invoked on mouse up\n   */\n  onMouseUp: function() {\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n    this.canvas.renderOnAddRemove = false;\n\n    var rects = [];\n\n    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      var sprayChunk = this.sprayChunks[i];\n\n      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\n\n        var rect = new fabric.Rect({\n          width: sprayChunk[j].width,\n          height: sprayChunk[j].width,\n          left: sprayChunk[j].x + 1,\n          top: sprayChunk[j].y + 1,\n          originX: 'center',\n          originY: 'center',\n          fill: this.color\n        });\n        rects.push(rect);\n      }\n    }\n\n    if (this.optimizeOverlapping) {\n      rects = this._getOptimizedRects(rects);\n    }\n\n    var group = new fabric.Group(rects);\n    this.shadow && group.set('shadow', new fabric.Shadow(this.shadow));\n    this.canvas.fire('before:path:created', { path: group });\n    this.canvas.add(group);\n    this.canvas.fire('path:created', { path: group });\n\n    this.canvas.clearContext(this.canvas.contextTop);\n    this._resetShadow();\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n    this.canvas.requestRenderAll();\n  },\n\n  /**\n   * @private\n   * @param {Array} rects\n   */\n  _getOptimizedRects: function(rects) {\n\n    // avoid creating duplicate rects at the same coordinates\n    var uniqueRects = { }, key, i, len;\n\n    for (i = 0, len = rects.length; i < len; i++) {\n      key = rects[i].left + '' + rects[i].top;\n      if (!uniqueRects[key]) {\n        uniqueRects[key] = rects[i];\n      }\n    }\n    var uniqueRectsArray = [];\n    for (key in uniqueRects) {\n      uniqueRectsArray.push(uniqueRects[key]);\n    }\n\n    return uniqueRectsArray;\n  },\n\n  /**\n   * Render new chunk of spray brush\n   */\n  render: function(sprayChunk) {\n    var ctx = this.canvas.contextTop, i, len;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (i = 0, len = sprayChunk.length; i < len; i++) {\n      var point = sprayChunk[i];\n      if (typeof point.opacity !== 'undefined') {\n        ctx.globalAlpha = point.opacity;\n      }\n      ctx.fillRect(point.x, point.y, point.width, point.width);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * Render all spray chunks\n   */\n  _render: function() {\n    var ctx = this.canvas.contextTop, i, ilen;\n    ctx.fillStyle = this.color;\n\n    this._saveAndTransform(ctx);\n\n    for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\n      this.render(this.sprayChunks[i]);\n    }\n    ctx.restore();\n  },\n\n  /**\n   * @param {Object} pointer\n   */\n  addSprayChunk: function(pointer) {\n    this.sprayChunkPoints = [];\n\n    var x, y, width, radius = this.width / 2, i;\n\n    for (i = 0; i < this.density; i++) {\n\n      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n\n      if (this.dotWidthVariance) {\n        width = fabric.util.getRandomInt(\n          // bottom clamp width to 1\n          Math.max(1, this.dotWidth - this.dotWidthVariance),\n          this.dotWidth + this.dotWidthVariance);\n      }\n      else {\n        width = this.dotWidth;\n      }\n\n      var point = new fabric.Point(x, y);\n      point.width = width;\n\n      if (this.randomOpacity) {\n        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n      }\n\n      this.sprayChunkPoints.push(point);\n    }\n\n    this.sprayChunks.push(this.sprayChunkPoints);\n  }\n});\n/**\n * PatternBrush class\n * @class fabric.PatternBrush\n * @extends fabric.BaseBrush\n */\nfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n\n  getPatternSrc: function() {\n\n    var dotWidth = 20,\n        dotDistance = 5,\n        patternCanvas = fabric.util.createCanvasElement(),\n        patternCtx = patternCanvas.getContext('2d');\n\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n\n    patternCtx.fillStyle = this.color;\n    patternCtx.beginPath();\n    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n    patternCtx.closePath();\n    patternCtx.fill();\n\n    return patternCanvas;\n  },\n\n  getPatternSrcFunction: function() {\n    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\n  },\n\n  /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  getPattern: function(ctx) {\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\n  },\n\n  /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  _setBrushStyles: function(ctx) {\n    this.callSuper('_setBrushStyles', ctx);\n    ctx.strokeStyle = this.getPattern(ctx);\n  },\n\n  /**\n   * Creates path\n   */\n  createPath: function(pathData) {\n    var path = this.callSuper('createPath', pathData),\n        topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n\n    path.stroke = new fabric.Pattern({\n      source: this.source || this.getPatternSrcFunction(),\n      offsetX: -topLeft.x,\n      offsetY: -topLeft.y\n    });\n    return path;\n  }\n});\n(function() {\n\n  var getPointer = fabric.util.getPointer,\n      degreesToRadians = fabric.util.degreesToRadians,\n      isTouchEvent = fabric.util.isTouchEvent;\n\n  /**\n   * Canvas class\n   * @class fabric.Canvas\n   * @extends fabric.StaticCanvas\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n   * @see {@link fabric.Canvas#initialize} for constructor definition\n   *\n   * @fires object:modified at the end of a transform or any change when statefull is true\n   * @fires object:rotating while an object is being rotated from the control\n   * @fires object:scaling while an object is being scaled by controls\n   * @fires object:moving while an object is being dragged\n   * @fires object:skewing while an object is being skewed from the controls\n   *\n   * @fires before:transform before a transform is is started\n   * @fires before:selection:cleared\n   * @fires selection:cleared\n   * @fires selection:updated\n   * @fires selection:created\n   *\n   * @fires path:created after a drawing operation ends and the path is added\n   * @fires mouse:down\n   * @fires mouse:move\n   * @fires mouse:up\n   * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n   * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n   * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n   * @fires mouse:over\n   * @fires mouse:out\n   * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop:before before drop event. same native event. This is added to handle edge cases\n   * @fires drop\n   * @fires after:render at the end of the render process, receives the context in the callback\n   * @fires before:render at start the render process, receives the context in the callback\n   *\n   */\n  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(el, options) {\n      options || (options = { });\n      this.renderAndResetBound = this.renderAndReset.bind(this);\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\n      this._initStatic(el, options);\n      this._initInteractive();\n      this._createCacheCanvas();\n    },\n\n    /**\n     * When true, objects can be transformed by one side (unproportionally)\n     * when dragged on the corners that normally would not do that.\n     * @type Boolean\n     * @default\n     * @since fabric 4.0 // changed name and default value\n     */\n    uniformScaling:      true,\n\n    /**\n     * Indicates which key switches uniform scaling.\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled.\n     * totally wrong named. this sounds like `uniform scaling`\n     * if Canvas.uniformScaling is true, pressing this will set it to false\n     * and viceversa.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    uniScaleKey:           'shiftKey',\n\n    /**\n     * When true, objects use center point as the origin of scale transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:        false,\n\n    /**\n     * When true, objects use center point as the origin of rotate transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:       false,\n\n    /**\n     * Indicates which key enable centered Transform\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    centeredKey:           'altKey',\n\n    /**\n     * Indicates which key enable alternate action on corner\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    altActionKey:           'shiftKey',\n\n    /**\n     * Indicates that canvas is interactive. This property should not be changed.\n     * @type Boolean\n     * @default\n     */\n    interactive:            true,\n\n    /**\n     * Indicates whether group selection should be enabled\n     * @type Boolean\n     * @default\n     */\n    selection:              true,\n\n    /**\n     * Indicates which key or keys enable multiple click selection\n     * Pass value as a string or array of strings\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or empty or containing any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.2\n     * @type String|Array\n     * @default\n     */\n    selectionKey:           'shiftKey',\n\n    /**\n     * Indicates which key enable alternative selection\n     * in case of target overlapping with active object\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * For a series of reason that come from the general expectations on how\n     * things should work, this feature works only for preserveObjectStacking true.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.5\n     * @type null|String\n     * @default\n     */\n    altSelectionKey:           null,\n\n    /**\n     * Color of selection\n     * @type String\n     * @default\n     */\n    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\n\n    /**\n     * Default dash array pattern\n     * If not empty the selection border is dashed\n     * @type Array\n     */\n    selectionDashArray:     [],\n\n    /**\n     * Color of the border of selection (usually slightly darker than color of selection itself)\n     * @type String\n     * @default\n     */\n    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\n\n    /**\n     * Width of a line used in object/group selection\n     * @type Number\n     * @default\n     */\n    selectionLineWidth:     1,\n\n    /**\n     * Select only shapes that are fully contained in the dragged selection rectangle.\n     * @type Boolean\n     * @default\n     */\n    selectionFullyContained: false,\n\n    /**\n     * Default cursor value used when hovering over an object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:            'move',\n\n    /**\n     * Default cursor value used when moving an object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:             'move',\n\n    /**\n     * Default cursor value used for the entire canvas\n     * @type String\n     * @default\n     */\n    defaultCursor:          'default',\n\n    /**\n     * Cursor value used during free drawing\n     * @type String\n     * @default\n     */\n    freeDrawingCursor:      'crosshair',\n\n    /**\n     * Cursor value used for disabled elements ( corners with disabled action )\n     * @type String\n     * @since 2.0.0\n     * @default\n     */\n    notAllowedCursor:         'not-allowed',\n\n    /**\n     * Default element class that's given to wrapper (div) element of canvas\n     * @type String\n     * @default\n     */\n    containerClass:         'canvas-container',\n\n    /**\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:     false,\n\n    /**\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\n     * @type Number\n     * @default\n     */\n    targetFindTolerance:    0,\n\n    /**\n     * When true, target detection is skipped. Target detection will return always undefined.\n     * click selection won't work anymore, events will fire with no targets.\n     * if something is selected before setting it to true, it will be deselected at the first click.\n     * area selection will still work. check the `selection` property too.\n     * if you deactivate both, you should look into staticCanvas.\n     * @type Boolean\n     * @default\n     */\n    skipTargetFind:         false,\n\n    /**\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n     * After mousedown, mousemove creates a shape,\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n     * @type Boolean\n     * @default\n     */\n    isDrawingMode:          false,\n\n    /**\n     * Indicates whether objects should remain in current stack position when selected.\n     * When false objects are brought to top and rendered as part of the selection group\n     * @type Boolean\n     * @default\n     */\n    preserveObjectStacking: false,\n\n    /**\n     * Indicates the angle that an object will lock to while rotating.\n     * @type Number\n     * @since 1.6.7\n     * @default\n     */\n    snapAngle: 0,\n\n    /**\n     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\n     * When `null`, the snapThreshold will default to the snapAngle.\n     * @type null|Number\n     * @since 1.6.7\n     * @default\n     */\n    snapThreshold: null,\n\n    /**\n     * Indicates if the right click on canvas can output the context menu or not\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */\n    stopContextMenu: false,\n\n    /**\n     * Indicates if the canvas can fire right click events\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */\n    fireRightClick: false,\n\n    /**\n     * Indicates if the canvas can fire middle click events\n     * @type Boolean\n     * @since 1.7.8\n     * @default\n     */\n    fireMiddleClick: false,\n\n    /**\n     * Keep track of the subTargets for Mouse Events\n     * @type fabric.Object[]\n     */\n    targets: [],\n\n    /**\n     * When the option is enabled, PointerEvent is used instead of MouseEvent.\n     * @type Boolean\n     * @default\n     */\n    enablePointerEvents: false,\n\n    /**\n     * Keep track of the hovered target\n     * @type fabric.Object\n     * @private\n     */\n    _hoveredTarget: null,\n\n    /**\n     * hold the list of nested targets hovered\n     * @type fabric.Object[]\n     * @private\n     */\n    _hoveredTargets: [],\n\n    /**\n     * @private\n     */\n    _initInteractive: function() {\n      this._currentTransform = null;\n      this._groupSelector = null;\n      this._initWrapperElement();\n      this._createUpperCanvas();\n      this._initEventListeners();\n\n      this._initRetinaScaling();\n\n      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n\n      this.calcOffset();\n    },\n\n    /**\n     * Divides objects in two groups, one to render immediately\n     * and one to render as activeGroup.\n     * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n     */\n    _chooseObjectsToRender: function() {\n      var activeObjects = this.getActiveObjects(),\n          object, objsToRender, activeGroupObjects;\n\n      if (activeObjects.length > 0 && !this.preserveObjectStacking) {\n        objsToRender = [];\n        activeGroupObjects = [];\n        for (var i = 0, length = this._objects.length; i < length; i++) {\n          object = this._objects[i];\n          if (activeObjects.indexOf(object) === -1 ) {\n            objsToRender.push(object);\n          }\n          else {\n            activeGroupObjects.push(object);\n          }\n        }\n        if (activeObjects.length > 1) {\n          this._activeObject._objects = activeGroupObjects;\n        }\n        objsToRender.push.apply(objsToRender, activeGroupObjects);\n      }\n      else {\n        objsToRender = this._objects;\n      }\n      return objsToRender;\n    },\n\n    /**\n     * Renders both the top canvas and the secondary container canvas.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */\n    renderAll: function () {\n      if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n        this.clearContext(this.contextTop);\n        this.contextTopDirty = false;\n      }\n      if (this.hasLostContext) {\n        this.renderTopLayer(this.contextTop);\n        this.hasLostContext = false;\n      }\n      var canvasToDrawOn = this.contextContainer;\n      this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\n      return this;\n    },\n\n    renderTopLayer: function(ctx) {\n      ctx.save();\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this.freeDrawingBrush && this.freeDrawingBrush._render();\n        this.contextTopDirty = true;\n      }\n      // we render the top context - last object\n      if (this.selection && this._groupSelector) {\n        this._drawSelection(ctx);\n        this.contextTopDirty = true;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * Method to render only the top canvas.\n     * Also used to render the group selection box.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    renderTop: function () {\n      var ctx = this.contextTop;\n      this.clearContext(ctx);\n      this.renderTopLayer(ctx);\n      this.fire('after:render');\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _normalizePointer: function (object, pointer) {\n      var m = object.calcTransformMatrix(),\n          invertedM = fabric.util.invertTransform(m),\n          vptPointer = this.restorePointerVpt(pointer);\n      return fabric.util.transformPoint(vptPointer, invertedM);\n    },\n\n    /**\n     * Returns true if object is transparent at a certain location\n     * @param {fabric.Object} target Object to check\n     * @param {Number} x Left coordinate\n     * @param {Number} y Top coordinate\n     * @return {Boolean}\n     */\n    isTargetTransparent: function (target, x, y) {\n      // in case the target is the activeObject, we cannot execute this optimization\n      // because we need to draw controls too.\n      if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\n        var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\n            targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),\n            targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);\n\n        var isTransparent = fabric.util.isTransparent(\n          target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\n\n        return isTransparent;\n      }\n\n      var ctx = this.contextCache,\n          originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\n\n      target.selectionBackgroundColor = '';\n\n      this.clearContext(ctx);\n\n      ctx.save();\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n      target.render(ctx);\n      ctx.restore();\n\n      target.selectionBackgroundColor = originalColor;\n\n      var isTransparent = fabric.util.isTransparent(\n        ctx, x, y, this.targetFindTolerance);\n\n      return isTransparent;\n    },\n\n    /**\n     * takes an event and determines if selection key has been pressed\n     * @private\n     * @param {Event} e Event object\n     */\n    _isSelectionKeyPressed: function(e) {\n      var selectionKeyPressed = false;\n\n      if (Array.isArray(this.selectionKey)) {\n        selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\n      }\n      else {\n        selectionKeyPressed = e[this.selectionKey];\n      }\n\n      return selectionKeyPressed;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _shouldClearSelection: function (e, target) {\n      var activeObjects = this.getActiveObjects(),\n          activeObject = this._activeObject;\n\n      return (\n        !target\n        ||\n        (target &&\n          activeObject &&\n          activeObjects.length > 1 &&\n          activeObjects.indexOf(target) === -1 &&\n          activeObject !== target &&\n          !this._isSelectionKeyPressed(e))\n        ||\n        (target && !target.evented)\n        ||\n        (target &&\n          !target.selectable &&\n          activeObject &&\n          activeObject !== target)\n      );\n    },\n\n    /**\n     * centeredScaling from object can't override centeredScaling from canvas.\n     * this should be fixed, since object setting should take precedence over canvas.\n     * also this should be something that will be migrated in the control properties.\n     * as ability to define the origin of the transformation that the control provide.\n     * @private\n     * @param {fabric.Object} target\n     * @param {String} action\n     * @param {Boolean} altKey\n     */\n    _shouldCenterTransform: function (target, action, altKey) {\n      if (!target) {\n        return;\n      }\n\n      var centerTransform;\n\n      if (action === 'scale' || action === 'scaleX' || action === 'scaleY' || action === 'resizing') {\n        centerTransform = this.centeredScaling || target.centeredScaling;\n      }\n      else if (action === 'rotate') {\n        centerTransform = this.centeredRotation || target.centeredRotation;\n      }\n\n      return centerTransform ? !altKey : altKey;\n    },\n\n    /**\n     * should disappear before release 4.0\n     * @private\n     */\n    _getOriginFromCorner: function(target, corner) {\n      var origin = {\n        x: target.originX,\n        y: target.originY\n      };\n\n      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\n        origin.x = 'right';\n      }\n      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\n        origin.x = 'left';\n      }\n\n      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\n        origin.y = 'bottom';\n      }\n      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\n        origin.y = 'top';\n      }\n      return origin;\n    },\n\n    /**\n     * @private\n     * @param {Boolean} alreadySelected true if target is already selected\n     * @param {String} corner a string representing the corner ml, mr, tl ...\n     * @param {Event} e Event object\n     * @param {fabric.Object} [target] inserted back to help overriding. Unused\n     */\n    _getActionFromCorner: function(alreadySelected, corner, e, target) {\n      if (!corner || !alreadySelected) {\n        return 'drag';\n      }\n      var control = target.controls[corner];\n      return control.getActionName(e, control, target);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _setupCurrentTransform: function (e, target, alreadySelected) {\n      if (!target) {\n        return;\n      }\n\n      var pointer = this.getPointer(e), corner = target.__corner,\n          control = target.controls[corner],\n          actionHandler = (alreadySelected && corner) ?\n            control.getActionHandler(e, target, control) : fabric.controlsUtils.dragHandler,\n          action = this._getActionFromCorner(alreadySelected, corner, e, target),\n          origin = this._getOriginFromCorner(target, corner),\n          altKey = e[this.centeredKey],\n          transform = {\n            target: target,\n            action: action,\n            actionHandler: actionHandler,\n            corner: corner,\n            scaleX: target.scaleX,\n            scaleY: target.scaleY,\n            skewX: target.skewX,\n            skewY: target.skewY,\n            // used by transation\n            offsetX: pointer.x - target.left,\n            offsetY: pointer.y - target.top,\n            originX: origin.x,\n            originY: origin.y,\n            ex: pointer.x,\n            ey: pointer.y,\n            lastX: pointer.x,\n            lastY: pointer.y,\n            // unsure they are useful anymore.\n            // left: target.left,\n            // top: target.top,\n            theta: degreesToRadians(target.angle),\n            // end of unsure\n            width: target.width * target.scaleX,\n            shiftKey: e.shiftKey,\n            altKey: altKey,\n            original: fabric.util.saveObjectTransform(target),\n          };\n\n      if (this._shouldCenterTransform(target, action, altKey)) {\n        transform.originX = 'center';\n        transform.originY = 'center';\n      }\n      transform.original.originX = origin.x;\n      transform.original.originY = origin.y;\n      this._currentTransform = transform;\n      this._beforeTransform(e);\n    },\n\n    /**\n     * Set the cursor type of the canvas element\n     * @param {String} value Cursor type of the canvas element.\n     * @see http://www.w3.org/TR/css3-ui/#cursor\n     */\n    setCursor: function (value) {\n      this.upperCanvasEl.style.cursor = value;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx to draw the selection on\n     */\n    _drawSelection: function (ctx) {\n      var selector = this._groupSelector,\n          viewportStart = new fabric.Point(selector.ex, selector.ey),\n          start = fabric.util.transformPoint(viewportStart, this.viewportTransform),\n          viewportExtent = new fabric.Point(selector.ex + selector.left, selector.ey + selector.top),\n          extent = fabric.util.transformPoint(viewportExtent, this.viewportTransform),\n          minX = Math.min(start.x, extent.x),\n          minY = Math.min(start.y, extent.y),\n          maxX = Math.max(start.x, extent.x),\n          maxY = Math.max(start.y, extent.y),\n          strokeOffset = this.selectionLineWidth / 2;\n\n      if (this.selectionColor) {\n        ctx.fillStyle = this.selectionColor;\n        ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n      }\n\n      if (!this.selectionLineWidth || !this.selectionBorderColor) {\n        return;\n      }\n      ctx.lineWidth = this.selectionLineWidth;\n      ctx.strokeStyle = this.selectionBorderColor;\n\n      minX += strokeOffset;\n      minY += strokeOffset;\n      maxX -= strokeOffset;\n      maxY -= strokeOffset;\n      // selection border\n      fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\n      ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n    },\n\n    /**\n     * Method that determines what object we are clicking on\n     * the skipGroup parameter is for internal use, is needed for shift+click action\n     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n     * or the outside part of the corner.\n     * @param {Event} e mouse event\n     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\n     * @return {fabric.Object} the target found\n     */\n    findTarget: function (e, skipGroup) {\n      if (this.skipTargetFind) {\n        return;\n      }\n\n      var ignoreZoom = true,\n          pointer = this.getPointer(e, ignoreZoom),\n          activeObject = this._activeObject,\n          aObjects = this.getActiveObjects(),\n          activeTarget, activeTargetSubs,\n          isTouch = isTouchEvent(e),\n          shouldLookForActive = (aObjects.length > 1 && !skipGroup) || aObjects.length === 1;\n\n      // first check current group (if one exists)\n      // active group does not check sub targets like normal groups.\n      // if active group just exits.\n      this.targets = [];\n\n      // if we hit the corner of an activeObject, let's return that.\n      if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {\n        return activeObject;\n      }\n      if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n        return activeObject;\n      }\n      if (aObjects.length === 1 &&\n        activeObject === this._searchPossibleTargets([activeObject], pointer)) {\n        if (!this.preserveObjectStacking) {\n          return activeObject;\n        }\n        else {\n          activeTarget = activeObject;\n          activeTargetSubs = this.targets;\n          this.targets = [];\n        }\n      }\n      var target = this._searchPossibleTargets(this._objects, pointer);\n      if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\n        target = activeTarget;\n        this.targets = activeTargetSubs;\n      }\n      return target;\n    },\n\n    /**\n     * Checks point is inside the object.\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @param {fabric.Object} obj Object to test against\n     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\n     * @return {Boolean} true if point is contained within an area of given object\n     * @private\n     */\n    _checkTarget: function(pointer, obj, globalPointer) {\n      if (obj &&\n          obj.visible &&\n          obj.evented &&\n          // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n          // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n          obj.containsPoint(pointer)\n      ) {\n        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n          var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\n          if (!isTransparent) {\n            return true;\n          }\n        }\n        else {\n          return true;\n        }\n      }\n    },\n\n    /**\n     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n     * @param {Array} [objects] objects array to look into\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @return {fabric.Object} object that contains pointer\n     * @private\n     */\n    _searchPossibleTargets: function(objects, pointer) {\n      // Cache all targets where their bounding box contains point.\n      var target, i = objects.length, subTarget;\n      // Do not check for currently grouped objects, since we check the parent group itself.\n      // until we call this function specifically to search inside the activeGroup\n      while (i--) {\n        var objToCheck = objects[i];\n        var pointerToUse = objToCheck.group ?\n          this._normalizePointer(objToCheck.group, pointer) : pointer;\n        if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\n          target = objects[i];\n          if (target.subTargetCheck && target instanceof fabric.Group) {\n            subTarget = this._searchPossibleTargets(target._objects, pointer);\n            subTarget && this.targets.push(subTarget);\n          }\n          break;\n        }\n      }\n      return target;\n    },\n\n    /**\n     * Returns pointer coordinates without the effect of the viewport\n     * @param {Object} pointer with \"x\" and \"y\" number values\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    restorePointerVpt: function(pointer) {\n      return fabric.util.transformPoint(\n        pointer,\n        fabric.util.invertTransform(this.viewportTransform)\n      );\n    },\n\n    /**\n     * Returns pointer coordinates relative to canvas.\n     * Can return coordinates with or without viewportTransform.\n     * ignoreZoom false gives back coordinates that represent\n     * the point clicked on canvas element.\n     * ignoreZoom true gives back coordinates after being processed\n     * by the viewportTransform ( sort of coordinates of what is displayed\n     * on the canvas where you are clicking.\n     * ignoreZoom true = HTMLElement coordinates relative to top,left\n     * ignoreZoom false, default = fabric space coordinates, the same used for shape position\n     * To interact with your shapes top and left you want to use ignoreZoom true\n     * most of the time, while ignoreZoom false will give you coordinates\n     * compatible with the object.oCoords system.\n     * of the time.\n     * @param {Event} e\n     * @param {Boolean} ignoreZoom\n     * @return {Object} object with \"x\" and \"y\" number values\n     */\n    getPointer: function (e, ignoreZoom) {\n      // return cached values if we are in the event processing chain\n      if (this._absolutePointer && !ignoreZoom) {\n        return this._absolutePointer;\n      }\n      if (this._pointer && ignoreZoom) {\n        return this._pointer;\n      }\n\n      var pointer = getPointer(e),\n          upperCanvasEl = this.upperCanvasEl,\n          bounds = upperCanvasEl.getBoundingClientRect(),\n          boundsWidth = bounds.width || 0,\n          boundsHeight = bounds.height || 0,\n          cssScale;\n\n      if (!boundsWidth || !boundsHeight ) {\n        if ('top' in bounds && 'bottom' in bounds) {\n          boundsHeight = Math.abs( bounds.top - bounds.bottom );\n        }\n        if ('right' in bounds && 'left' in bounds) {\n          boundsWidth = Math.abs( bounds.right - bounds.left );\n        }\n      }\n\n      this.calcOffset();\n      pointer.x = pointer.x - this._offset.left;\n      pointer.y = pointer.y - this._offset.top;\n      if (!ignoreZoom) {\n        pointer = this.restorePointerVpt(pointer);\n      }\n\n      var retinaScaling = this.getRetinaScaling();\n      if (retinaScaling !== 1) {\n        pointer.x /= retinaScaling;\n        pointer.y /= retinaScaling;\n      }\n\n      if (boundsWidth === 0 || boundsHeight === 0) {\n        // If bounds are not available (i.e. not visible), do not apply scale.\n        cssScale = { width: 1, height: 1 };\n      }\n      else {\n        cssScale = {\n          width: upperCanvasEl.width / boundsWidth,\n          height: upperCanvasEl.height / boundsHeight\n        };\n      }\n\n      return {\n        x: pointer.x * cssScale.width,\n        y: pointer.y * cssScale.height\n      };\n    },\n\n    /**\n     * @private\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n     */\n    _createUpperCanvas: function () {\n      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, ''),\n          lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;\n\n      // there is no need to create a new upperCanvas element if we have already one.\n      if (upperCanvasEl) {\n        upperCanvasEl.className = '';\n      }\n      else {\n        upperCanvasEl = this._createCanvasElement();\n        this.upperCanvasEl = upperCanvasEl;\n      }\n      fabric.util.addClass(upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\n\n      this.wrapperEl.appendChild(upperCanvasEl);\n\n      this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);\n      this._applyCanvasStyle(upperCanvasEl);\n      this.contextTop = upperCanvasEl.getContext('2d');\n    },\n\n    /**\n     * Returns context of top canvas where interactions are drawn\n     * @returns {CanvasRenderingContext2D}\n     */\n    getTopContext: function () {\n      return this.contextTop;\n    },\n\n    /**\n     * @private\n     */\n    _createCacheCanvas: function () {\n      this.cacheCanvasEl = this._createCanvasElement();\n      this.cacheCanvasEl.setAttribute('width', this.width);\n      this.cacheCanvasEl.setAttribute('height', this.height);\n      this.contextCache = this.cacheCanvasEl.getContext('2d');\n    },\n\n    /**\n     * @private\n     */\n    _initWrapperElement: function () {\n      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\n        'class': this.containerClass\n      });\n      fabric.util.setStyle(this.wrapperEl, {\n        width: this.width + 'px',\n        height: this.height + 'px',\n        position: 'relative'\n      });\n      fabric.util.makeElementUnselectable(this.wrapperEl);\n    },\n\n    /**\n     * @private\n     * @param {HTMLElement} element canvas element to apply styles on\n     */\n    _applyCanvasStyle: function (element) {\n      var width = this.width || element.width,\n          height = this.height || element.height;\n\n      fabric.util.setStyle(element, {\n        position: 'absolute',\n        width: width + 'px',\n        height: height + 'px',\n        left: 0,\n        top: 0,\n        'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none',\n        '-ms-touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\n      });\n      element.width = width;\n      element.height = height;\n      fabric.util.makeElementUnselectable(element);\n    },\n\n    /**\n     * Copy the entire inline style from one element (fromEl) to another (toEl)\n     * @private\n     * @param {Element} fromEl Element style is copied from\n     * @param {Element} toEl Element copied style is applied to\n     */\n    _copyCanvasStyle: function (fromEl, toEl) {\n      toEl.style.cssText = fromEl.style.cssText;\n    },\n\n    /**\n     * Returns context of canvas where object selection is drawn\n     * @return {CanvasRenderingContext2D}\n     */\n    getSelectionContext: function() {\n      return this.contextTop;\n    },\n\n    /**\n     * Returns &lt;canvas> element on which object selection is drawn\n     * @return {HTMLCanvasElement}\n     */\n    getSelectionElement: function () {\n      return this.upperCanvasEl;\n    },\n\n    /**\n     * Returns currently active object\n     * @return {fabric.Object} active object\n     */\n    getActiveObject: function () {\n      return this._activeObject;\n    },\n\n    /**\n     * Returns an array with the current selected objects\n     * @return {fabric.Object} active object\n     */\n    getActiveObjects: function () {\n      var active = this._activeObject;\n      if (active) {\n        if (active.type === 'activeSelection' && active._objects) {\n          return active._objects.slice(0);\n        }\n        else {\n          return [active];\n        }\n      }\n      return [];\n    },\n\n    /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */\n    _onObjectRemoved: function(obj) {\n      // removing active object should fire \"selection:cleared\" events\n      if (obj === this._activeObject) {\n        this.fire('before:selection:cleared', { target: obj });\n        this._discardActiveObject();\n        this.fire('selection:cleared', { target: obj });\n        obj.fire('deselected');\n      }\n      if (obj === this._hoveredTarget){\n        this._hoveredTarget = null;\n        this._hoveredTargets = [];\n      }\n      this.callSuper('_onObjectRemoved', obj);\n    },\n\n    /**\n     * @private\n     * Compares the old activeObject with the current one and fires correct events\n     * @param {fabric.Object} obj old activeObject\n     */\n    _fireSelectionEvents: function(oldObjects, e) {\n      var somethingChanged = false, objects = this.getActiveObjects(),\n          added = [], removed = [];\n      oldObjects.forEach(function(oldObject) {\n        if (objects.indexOf(oldObject) === -1) {\n          somethingChanged = true;\n          oldObject.fire('deselected', {\n            e: e,\n            target: oldObject\n          });\n          removed.push(oldObject);\n        }\n      });\n      objects.forEach(function(object) {\n        if (oldObjects.indexOf(object) === -1) {\n          somethingChanged = true;\n          object.fire('selected', {\n            e: e,\n            target: object\n          });\n          added.push(object);\n        }\n      });\n      if (oldObjects.length > 0 && objects.length > 0) {\n        somethingChanged && this.fire('selection:updated', {\n          e: e,\n          selected: added,\n          deselected: removed,\n        });\n      }\n      else if (objects.length > 0) {\n        this.fire('selection:created', {\n          e: e,\n          selected: added,\n        });\n      }\n      else if (oldObjects.length > 0) {\n        this.fire('selection:cleared', {\n          e: e,\n          deselected: removed,\n        });\n      }\n    },\n\n    /**\n     * Sets given object as the only active object on canvas\n     * @param {fabric.Object} object Object to set as an active one\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    setActiveObject: function (object, e) {\n      var currentActives = this.getActiveObjects();\n      this._setActiveObject(object, e);\n      this._fireSelectionEvents(currentActives, e);\n      return this;\n    },\n\n    /**\n     * This is a private method for now.\n     * This is supposed to be equivalent to setActiveObject but without firing\n     * any event. There is commitment to have this stay this way.\n     * This is the functional part of setActiveObject.\n     * @private\n     * @param {Object} object to set as active\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {Boolean} true if the selection happened\n     */\n    _setActiveObject: function(object, e) {\n      if (this._activeObject === object) {\n        return false;\n      }\n      if (!this._discardActiveObject(e, object)) {\n        return false;\n      }\n      if (object.onSelect({ e: e })) {\n        return false;\n      }\n      this._activeObject = object;\n      return true;\n    },\n\n    /**\n     * This is a private method for now.\n     * This is supposed to be equivalent to discardActiveObject but without firing\n     * any events. There is commitment to have this stay this way.\n     * This is the functional part of discardActiveObject.\n     * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n     * @param {Object} object to set as active\n     * @return {Boolean} true if the selection happened\n     * @private\n     */\n    _discardActiveObject: function(e, object) {\n      var obj = this._activeObject;\n      if (obj) {\n        // onDeselect return TRUE to cancel selection;\n        if (obj.onDeselect({ e: e, object: object })) {\n          return false;\n        }\n        this._activeObject = null;\n      }\n      return true;\n    },\n\n    /**\n     * Discards currently active object and fire events. If the function is called by fabric\n     * as a consequence of a mouse event, the event is passed as a parameter and\n     * sent to the fire function for the custom events. When used as a method the\n     * e param does not have any application.\n     * @param {event} e\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    discardActiveObject: function (e) {\n      var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();\n      if (currentActives.length) {\n        this.fire('before:selection:cleared', { target: activeObject, e: e });\n      }\n      this._discardActiveObject(e);\n      this._fireSelectionEvents(currentActives, e);\n      return this;\n    },\n\n    /**\n     * Clears a canvas element and removes all event listeners\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    dispose: function () {\n      var wrapper = this.wrapperEl;\n      this.removeListeners();\n      wrapper.removeChild(this.upperCanvasEl);\n      wrapper.removeChild(this.lowerCanvasEl);\n      this.contextCache = null;\n      this.contextTop = null;\n      ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\n        fabric.util.cleanUpJsdomNode(this[element]);\n        this[element] = undefined;\n      }).bind(this));\n      if (wrapper.parentNode) {\n        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\n      }\n      delete this.wrapperEl;\n      fabric.StaticCanvas.prototype.dispose.call(this);\n      return this;\n    },\n\n    /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */\n    clear: function () {\n      // this.discardActiveGroup();\n      this.discardActiveObject();\n      this.clearContext(this.contextTop);\n      return this.callSuper('clear');\n    },\n\n    /**\n     * Draws objects' controls (borders/controls)\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n     */\n    drawControls: function(ctx) {\n      var activeObject = this._activeObject;\n\n      if (activeObject) {\n        activeObject._renderControls(ctx);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _toObject: function(instance, methodName, propertiesToInclude) {\n      //If the object is part of the current selection group, it should\n      //be transformed appropriately\n      //i.e. it should be serialised as it would appear if the selection group\n      //were to be destroyed.\n      var originalProperties = this._realizeGroupTransformOnObject(instance),\n          object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\n      //Undo the damage we did by changing all of its properties\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n      return object;\n    },\n\n    /**\n     * Realises an object's group transformation on it\n     * @private\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n     * @returns the original values of instance which were changed\n     */\n    _realizeGroupTransformOnObject: function(instance) {\n      if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\n        var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\n        //Copy all the positionally relevant properties across now\n        var originalValues = {};\n        layoutProps.forEach(function(prop) {\n          originalValues[prop] = instance[prop];\n        });\n        fabric.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());\n        return originalValues;\n      }\n      else {\n        return null;\n      }\n    },\n\n    /**\n     * Restores the changed properties of instance\n     * @private\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n     */\n    _unwindGroupTransformOnObject: function(instance, originalValues) {\n      if (originalValues) {\n        instance.set(originalValues);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _setSVGObject: function(markup, instance, reviver) {\n      //If the object is in a selection group, simulate what would happen to that\n      //object when the group is deselected\n      var originalProperties = this._realizeGroupTransformOnObject(instance);\n      this.callSuper('_setSVGObject', markup, instance, reviver);\n      this._unwindGroupTransformOnObject(instance, originalProperties);\n    },\n\n    setViewportTransform: function (vpt) {\n      if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\n        this._activeObject.clearContextTop();\n      }\n      fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\n    }\n  });\n\n  // copying static properties manually to work around Opera's bug,\n  // where \"prototype\" property is enumerable and overrides existing prototype\n  for (var prop in fabric.StaticCanvas) {\n    if (prop !== 'prototype') {\n      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n    }\n  }\n})();\n(function() {\n\n  var addListener = fabric.util.addListener,\n      removeListener = fabric.util.removeListener,\n      RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\n      addEventOptions = { passive: false };\n\n  function checkClick(e, value) {\n    return e.button && (e.button === value - 1);\n  }\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * Contains the id of the touch event that owns the fabric transform\n     * @type Number\n     * @private\n     */\n    mainTouchId: null,\n\n    /**\n     * Adds mouse listeners to canvas\n     * @private\n     */\n    _initEventListeners: function () {\n      // in case we initialized the class twice. This should not happen normally\n      // but in some kind of applications where the canvas element may be changed\n      // this is a workaround to having double listeners.\n      this.removeListeners();\n      this._bindEvents();\n      this.addOrRemove(addListener, 'add');\n    },\n\n    /**\n     * return an event prefix pointer or mouse.\n     * @private\n     */\n    _getEventPrefix: function () {\n      return this.enablePointerEvents ? 'pointer' : 'mouse';\n    },\n\n    addOrRemove: function(functor, eventjsFunctor) {\n      var canvasElement = this.upperCanvasEl,\n          eventTypePrefix = this._getEventPrefix();\n      functor(fabric.window, 'resize', this._onResize);\n      functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n      functor(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\n      functor(canvasElement, eventTypePrefix + 'out', this._onMouseOut);\n      functor(canvasElement, eventTypePrefix + 'enter', this._onMouseEnter);\n      functor(canvasElement, 'wheel', this._onMouseWheel);\n      functor(canvasElement, 'contextmenu', this._onContextMenu);\n      functor(canvasElement, 'dblclick', this._onDoubleClick);\n      functor(canvasElement, 'dragover', this._onDragOver);\n      functor(canvasElement, 'dragenter', this._onDragEnter);\n      functor(canvasElement, 'dragleave', this._onDragLeave);\n      functor(canvasElement, 'drop', this._onDrop);\n      if (!this.enablePointerEvents) {\n        functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\n      }\n      if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\n        eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\n        eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\n        eventjs[eventjsFunctor](canvasElement, 'orientation', this._onOrientationChange);\n        eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\n        eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\n      }\n    },\n\n    /**\n     * Removes all event listeners\n     */\n    removeListeners: function() {\n      this.addOrRemove(removeListener, 'remove');\n      // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n      var eventTypePrefix = this._getEventPrefix();\n      removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\n      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\n      removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n    },\n\n    /**\n     * @private\n     */\n    _bindEvents: function() {\n      if (this.eventsBound) {\n        // for any reason we pass here twice we do not want to bind events twice.\n        return;\n      }\n      this._onMouseDown = this._onMouseDown.bind(this);\n      this._onTouchStart = this._onTouchStart.bind(this);\n      this._onMouseMove = this._onMouseMove.bind(this);\n      this._onMouseUp = this._onMouseUp.bind(this);\n      this._onTouchEnd = this._onTouchEnd.bind(this);\n      this._onResize = this._onResize.bind(this);\n      this._onGesture = this._onGesture.bind(this);\n      this._onDrag = this._onDrag.bind(this);\n      this._onShake = this._onShake.bind(this);\n      this._onLongPress = this._onLongPress.bind(this);\n      this._onOrientationChange = this._onOrientationChange.bind(this);\n      this._onMouseWheel = this._onMouseWheel.bind(this);\n      this._onMouseOut = this._onMouseOut.bind(this);\n      this._onMouseEnter = this._onMouseEnter.bind(this);\n      this._onContextMenu = this._onContextMenu.bind(this);\n      this._onDoubleClick = this._onDoubleClick.bind(this);\n      this._onDragOver = this._onDragOver.bind(this);\n      this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\n      this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\n      this._onDrop = this._onDrop.bind(this);\n      this.eventsBound = true;\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js gesture\n     * @param {Event} [self] Inner Event object\n     */\n    _onGesture: function(e, self) {\n      this.__onTransformGesture && this.__onTransformGesture(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js drag\n     * @param {Event} [self] Inner Event object\n     */\n    _onDrag: function(e, self) {\n      this.__onDrag && this.__onDrag(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on wheel event\n     */\n    _onMouseWheel: function(e) {\n      this.__onMouseWheel(e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseOut: function(e) {\n      var target = this._hoveredTarget;\n      this.fire('mouse:out', { target: target, e: e });\n      this._hoveredTarget = null;\n      target && target.fire('mouseout', { e: e });\n\n      var _this = this;\n      this._hoveredTargets.forEach(function(_target){\n        _this.fire('mouse:out', { target: target, e: e });\n        _target && target.fire('mouseout', { e: e });\n      });\n      this._hoveredTargets = [];\n\n      if (this._iTextInstances) {\n        this._iTextInstances.forEach(function(obj) {\n          if (obj.isEditing) {\n            obj.hiddenTextarea.focus();\n          }\n        });\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseenter\n     */\n    _onMouseEnter: function(e) {\n      // This find target and consequent 'mouse:over' is used to\n      // clear old instances on hovered target.\n      // calling findTarget has the side effect of killing target.__corner.\n      // as a short term fix we are not firing this if we are currently transforming.\n      // as a long term fix we need to separate the action of finding a target with the\n      // side effects we added to it.\n      if (!this._currentTransform && !this.findTarget(e)) {\n        this.fire('mouse:over', { target: null, e: e });\n        this._hoveredTarget = null;\n        this._hoveredTargets = [];\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js orientation change\n     * @param {Event} [self] Inner Event object\n     */\n    _onOrientationChange: function(e, self) {\n      this.__onOrientationChange && this.__onOrientationChange(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onShake: function(e, self) {\n      this.__onShake && this.__onShake(e, self);\n    },\n\n    /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */\n    _onLongPress: function(e, self) {\n      this.__onLongPress && this.__onLongPress(e, self);\n    },\n\n    /**\n     * prevent default to allow drop event to be fired\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     */\n    _onDragOver: function(e) {\n      e.preventDefault();\n      var target = this._simpleEventHandler('dragover', e);\n      this._fireEnterLeaveEvents(target, e);\n    },\n\n    /**\n     * `drop:before` is a an event that allow you to schedule logic\n     * before the `drop` event. Prefer `drop` event always, but if you need\n     * to run some drop-disabling logic on an event, since there is no way\n     * to handle event handlers ordering, use `drop:before`\n     * @param {Event} e\n     */\n    _onDrop: function (e) {\n      this._simpleEventHandler('drop:before', e);\n      return this._simpleEventHandler('drop', e);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onContextMenu: function (e) {\n      if (this.stopContextMenu) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n      return false;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onDoubleClick: function (e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'dblclick');\n      this._resetTransformEventData(e);\n    },\n\n    /**\n     * Return a the id of an event.\n     * returns either the pointerId or the identifier or 0 for the mouse event\n     * @private\n     * @param {Event} evt Event object\n     */\n    getPointerId: function(evt) {\n      var changedTouches = evt.changedTouches;\n\n      if (changedTouches) {\n        return changedTouches[0] && changedTouches[0].identifier;\n      }\n\n      if (this.enablePointerEvents) {\n        return evt.pointerId;\n      }\n\n      return -1;\n    },\n\n    /**\n     * Determines if an event has the id of the event that is considered main\n     * @private\n     * @param {evt} event Event object\n     */\n    _isMainEvent: function(evt) {\n      if (evt.isPrimary === true) {\n        return true;\n      }\n      if (evt.isPrimary === false) {\n        return false;\n      }\n      if (evt.type === 'touchend' && evt.touches.length === 0) {\n        return true;\n      }\n      if (evt.changedTouches) {\n        return evt.changedTouches[0].identifier === this.mainTouchId;\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onTouchStart: function(e) {\n      e.preventDefault();\n      if (this.mainTouchId === null) {\n        this.mainTouchId = this.getPointerId(e);\n      }\n      this.__onMouseDown(e);\n      this._resetTransformEventData();\n      var canvasElement = this.upperCanvasEl,\n          eventTypePrefix = this._getEventPrefix();\n      addListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\n      addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n      // Unbind mousedown to prevent double triggers from touch devices\n      removeListener(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDown: function (e) {\n      this.__onMouseDown(e);\n      this._resetTransformEventData();\n      var canvasElement = this.upperCanvasEl,\n          eventTypePrefix = this._getEventPrefix();\n      removeListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\n      addListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\n      addListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onTouchEnd: function(e) {\n      if (e.touches.length > 0) {\n        // if there are still touches stop here\n        return;\n      }\n      this.__onMouseUp(e);\n      this._resetTransformEventData();\n      this.mainTouchId = null;\n      var eventTypePrefix = this._getEventPrefix();\n      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\n      var _this = this;\n      if (this._willAddMouseDown) {\n        clearTimeout(this._willAddMouseDown);\n      }\n      this._willAddMouseDown = setTimeout(function() {\n        // Wait 400ms before rebinding mousedown to prevent double triggers\n        // from touch devices\n        addListener(_this.upperCanvasEl, eventTypePrefix + 'down', _this._onMouseDown);\n        _this._willAddMouseDown = 0;\n      }, 400);\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUp: function (e) {\n      this.__onMouseUp(e);\n      this._resetTransformEventData();\n      var canvasElement = this.upperCanvasEl,\n          eventTypePrefix = this._getEventPrefix();\n      if (this._isMainEvent(e)) {\n        removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\n        removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\n        addListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMove: function (e) {\n      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n      this.__onMouseMove(e);\n    },\n\n    /**\n     * @private\n     */\n    _onResize: function () {\n      this.calcOffset();\n    },\n\n    /**\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n     * @private\n     * @param {Object} target\n     */\n    _shouldRender: function(target) {\n      var activeObject = this._activeObject;\n\n      if (\n        !!activeObject !== !!target ||\n        (activeObject && target && (activeObject !== target))\n      ) {\n        // this covers: switch of target, from target to no target, selection of target\n        // multiSelection with key and mouse\n        return true;\n      }\n      else if (activeObject && activeObject.isEditing) {\n        // if we mouse up/down over a editing textbox a cursor change,\n        // there is no need to re render\n        return false;\n      }\n      return false;\n    },\n\n    /**\n     * Method that defines the actions when mouse is released on canvas.\n     * The method resets the currentTransform parameters, store the image corner\n     * position in the image object and render the canvas on top.\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseUp: function (e) {\n      var target, transform = this._currentTransform,\n          groupSelector = this._groupSelector, shouldRender = false,\n          isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\n      this._cacheTransformEventData(e);\n      target = this._target;\n      this._handleEvent(e, 'up:before');\n      // if right/middle click just fire events and return\n      // target undefined will make the _handleEvent search the target\n      if (checkClick(e, RIGHT_CLICK)) {\n        if (this.fireRightClick) {\n          this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\n        }\n        return;\n      }\n\n      if (checkClick(e, MIDDLE_CLICK)) {\n        if (this.fireMiddleClick) {\n          this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\n        }\n        this._resetTransformEventData();\n        return;\n      }\n\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\n        this._onMouseUpInDrawingMode(e);\n        return;\n      }\n\n      if (!this._isMainEvent(e)) {\n        return;\n      }\n      if (transform) {\n        this._finalizeCurrentTransform(e);\n        shouldRender = transform.actionPerformed;\n      }\n      if (!isClick) {\n        var targetWasActive = target === this._activeObject;\n        this._maybeGroupObjects(e);\n        if (!shouldRender) {\n          shouldRender = (\n            this._shouldRender(target) ||\n            (!targetWasActive && target === this._activeObject)\n          );\n        }\n      }\n      var corner, pointer;\n      if (target) {\n        corner = target._findTargetCorner(\n          this.getPointer(e, true),\n          fabric.util.isTouchEvent(e)\n        );\n        if (target.selectable && target !== this._activeObject && target.activeOn === 'up') {\n          this.setActiveObject(target, e);\n          shouldRender = true;\n        }\n        else {\n          var control = target.controls[corner],\n              mouseUpHandler = control && control.getMouseUpHandler(e, target, control);\n          if (mouseUpHandler) {\n            pointer = this.getPointer(e);\n            mouseUpHandler(e, transform, pointer.x, pointer.y);\n          }\n        }\n        target.isMoving = false;\n      }\n      // if we are ending up a transform on a different control or a new object\n      // fire the original mouse up from the corner that started the transform\n      if (transform && (transform.target !== target || transform.corner !== corner)) {\n        var originalControl = transform.target && transform.target.controls[transform.corner],\n            originalMouseUpHandler = originalControl && originalControl.getMouseUpHandler(e, target, control);\n        pointer = pointer || this.getPointer(e);\n        originalMouseUpHandler && originalMouseUpHandler(e, transform, pointer.x, pointer.y);\n      }\n      this._setCursorFromEvent(e, target);\n      this._handleEvent(e, 'up', LEFT_CLICK, isClick);\n      this._groupSelector = null;\n      this._currentTransform = null;\n      // reset the target information about which corner is selected\n      target && (target.__corner = 0);\n      if (shouldRender) {\n        this.requestRenderAll();\n      }\n      else if (!isClick) {\n        this.renderTop();\n      }\n    },\n\n    /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @return {Fabric.Object} target return the the target found, for internal reasons.\n     */\n    _simpleEventHandler: function(eventType, e) {\n      var target = this.findTarget(e),\n          targets = this.targets,\n          options = {\n            e: e,\n            target: target,\n            subTargets: targets,\n          };\n      this.fire(eventType, options);\n      target && target.fire(eventType, options);\n      if (!targets) {\n        return target;\n      }\n      for (var i = 0; i < targets.length; i++) {\n        targets[i].fire(eventType, options);\n      }\n      return target;\n    },\n\n    /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @param {fabric.Object} targetObj receiving event\n     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\n     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\n     */\n    _handleEvent: function(e, eventType, button, isClick) {\n      var target = this._target,\n          targets = this.targets || [],\n          options = {\n            e: e,\n            target: target,\n            subTargets: targets,\n            button: button || LEFT_CLICK,\n            isClick: isClick || false,\n            pointer: this._pointer,\n            absolutePointer: this._absolutePointer,\n            transform: this._currentTransform\n          };\n      if (eventType === 'up') {\n        options.currentTarget = this.findTarget(e);\n        options.currentSubTargets = this.targets;\n      }\n      this.fire('mouse:' + eventType, options);\n      target && target.fire('mouse' + eventType, options);\n      for (var i = 0; i < targets.length; i++) {\n        targets[i].fire('mouse' + eventType, options);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n     */\n    _finalizeCurrentTransform: function(e) {\n\n      var transform = this._currentTransform,\n          target = transform.target,\n          options = {\n            e: e,\n            target: target,\n            transform: transform,\n            action: transform.action,\n          };\n\n      if (target._scaling) {\n        target._scaling = false;\n      }\n\n      target.setCoords();\n\n      if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\n        this._fire('modified', options);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    _onMouseDownInDrawingMode: function(e) {\n      this._isCurrentlyDrawing = true;\n      if (this.getActiveObject()) {\n        this.discardActiveObject(e).requestRenderAll();\n      }\n      var pointer = this.getPointer(e);\n      this.freeDrawingBrush.onMouseDown(pointer, { e: e, pointer: pointer });\n      this._handleEvent(e, 'down');\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    _onMouseMoveInDrawingMode: function(e) {\n      if (this._isCurrentlyDrawing) {\n        var pointer = this.getPointer(e);\n        this.freeDrawingBrush.onMouseMove(pointer, { e: e, pointer: pointer });\n      }\n      this.setCursor(this.freeDrawingCursor);\n      this._handleEvent(e, 'move');\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */\n    _onMouseUpInDrawingMode: function(e) {\n      var pointer = this.getPointer(e);\n      this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: e, pointer: pointer });\n      this._handleEvent(e, 'up');\n    },\n\n    /**\n     * Method that defines the actions when mouse is clicked on canvas.\n     * The method inits the currentTransform parameters and renders all the\n     * canvas so the current image can be placed on the top canvas and the rest\n     * in on the container one.\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */\n    __onMouseDown: function (e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'down:before');\n      var target = this._target;\n      // if right click just fire events\n      if (checkClick(e, RIGHT_CLICK)) {\n        if (this.fireRightClick) {\n          this._handleEvent(e, 'down', RIGHT_CLICK);\n        }\n        return;\n      }\n\n      if (checkClick(e, MIDDLE_CLICK)) {\n        if (this.fireMiddleClick) {\n          this._handleEvent(e, 'down', MIDDLE_CLICK);\n        }\n        return;\n      }\n\n      if (this.isDrawingMode) {\n        this._onMouseDownInDrawingMode(e);\n        return;\n      }\n\n      if (!this._isMainEvent(e)) {\n        return;\n      }\n\n      // ignore if some object is being transformed at this moment\n      if (this._currentTransform) {\n        return;\n      }\n\n      var pointer = this._pointer;\n      // save pointer for check in __onMouseUp event\n      this._previousPointer = pointer;\n      var shouldRender = this._shouldRender(target),\n          shouldGroup = this._shouldGroup(e, target);\n      if (this._shouldClearSelection(e, target)) {\n        this.discardActiveObject(e);\n      }\n      else if (shouldGroup) {\n        this._handleGrouping(e, target);\n        target = this._activeObject;\n      }\n\n      if (this.selection && (!target ||\n        (!target.selectable && !target.isEditing && target !== this._activeObject))) {\n        this._groupSelector = {\n          ex: this._absolutePointer.x,\n          ey: this._absolutePointer.y,\n          top: 0,\n          left: 0\n        };\n      }\n\n      if (target) {\n        var alreadySelected = target === this._activeObject;\n        if (target.selectable && target.activeOn === 'down') {\n          this.setActiveObject(target, e);\n        }\n        var corner = target._findTargetCorner(\n          this.getPointer(e, true),\n          fabric.util.isTouchEvent(e)\n        );\n        target.__corner = corner;\n        if (target === this._activeObject && (corner || !shouldGroup)) {\n          this._setupCurrentTransform(e, target, alreadySelected);\n          var control = target.controls[corner],\n              pointer = this.getPointer(e),\n              mouseDownHandler = control && control.getMouseDownHandler(e, target, control);\n          if (mouseDownHandler) {\n            mouseDownHandler(e, this._currentTransform, pointer.x, pointer.y);\n          }\n        }\n      }\n      this._handleEvent(e, 'down');\n      // we must renderAll so that we update the visuals\n      (shouldRender || shouldGroup) && this.requestRenderAll();\n    },\n\n    /**\n     * reset cache form common information needed during event processing\n     * @private\n     */\n    _resetTransformEventData: function() {\n      this._target = null;\n      this._pointer = null;\n      this._absolutePointer = null;\n    },\n\n    /**\n     * Cache common information needed during event processing\n     * @private\n     * @param {Event} e Event object fired on event\n     */\n    _cacheTransformEventData: function(e) {\n      // reset in order to avoid stale caching\n      this._resetTransformEventData();\n      this._pointer = this.getPointer(e, true);\n      this._absolutePointer = this.restorePointerVpt(this._pointer);\n      this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\n    },\n\n    /**\n     * @private\n     */\n    _beforeTransform: function(e) {\n      var t = this._currentTransform;\n      this.stateful && t.target.saveState();\n      this.fire('before:transform', {\n        e: e,\n        transform: t,\n      });\n    },\n\n    /**\n     * Method that defines the actions when mouse is hovering the canvas.\n     * The currentTransform parameter will define whether the user is rotating/scaling/translating\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n     * all any other type of action.\n     * In case of an image transformation only the top canvas will be rendered.\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */\n    __onMouseMove: function (e) {\n      this._handleEvent(e, 'move:before');\n      this._cacheTransformEventData(e);\n      var target, pointer;\n\n      if (this.isDrawingMode) {\n        this._onMouseMoveInDrawingMode(e);\n        return;\n      }\n\n      if (!this._isMainEvent(e)) {\n        return;\n      }\n\n      var groupSelector = this._groupSelector;\n\n      // We initially clicked in an empty area, so we draw a box for multiple selection\n      if (groupSelector) {\n        pointer = this._absolutePointer;\n\n        groupSelector.left = pointer.x - groupSelector.ex;\n        groupSelector.top = pointer.y - groupSelector.ey;\n\n        this.renderTop();\n      }\n      else if (!this._currentTransform) {\n        target = this.findTarget(e) || null;\n        this._setCursorFromEvent(e, target);\n        this._fireOverOutEvents(target, e);\n      }\n      else {\n        this._transformObject(e);\n      }\n      this._handleEvent(e, 'move');\n      this._resetTransformEventData();\n    },\n\n    /**\n     * Manage the mouseout, mouseover events for the fabric object on the canvas\n     * @param {Fabric.Object} target the target where the target from the mousemove event\n     * @param {Event} e Event object fired on mousemove\n     * @private\n     */\n    _fireOverOutEvents: function(target, e) {\n      var _hoveredTarget = this._hoveredTarget,\n          _hoveredTargets = this._hoveredTargets, targets = this.targets,\n          length = Math.max(_hoveredTargets.length, targets.length);\n\n      this.fireSyntheticInOutEvents(target, e, {\n        oldTarget: _hoveredTarget,\n        evtOut: 'mouseout',\n        canvasEvtOut: 'mouse:out',\n        evtIn: 'mouseover',\n        canvasEvtIn: 'mouse:over',\n      });\n      for (var i = 0; i < length; i++){\n        this.fireSyntheticInOutEvents(targets[i], e, {\n          oldTarget: _hoveredTargets[i],\n          evtOut: 'mouseout',\n          evtIn: 'mouseover',\n        });\n      }\n      this._hoveredTarget = target;\n      this._hoveredTargets = this.targets.concat();\n    },\n\n    /**\n     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the onDrag event\n     * @param {Event} e Event object fired on ondrag\n     * @private\n     */\n    _fireEnterLeaveEvents: function(target, e) {\n      var _draggedoverTarget = this._draggedoverTarget,\n          _hoveredTargets = this._hoveredTargets, targets = this.targets,\n          length = Math.max(_hoveredTargets.length, targets.length);\n\n      this.fireSyntheticInOutEvents(target, e, {\n        oldTarget: _draggedoverTarget,\n        evtOut: 'dragleave',\n        evtIn: 'dragenter',\n      });\n      for (var i = 0; i < length; i++) {\n        this.fireSyntheticInOutEvents(targets[i], e, {\n          oldTarget: _hoveredTargets[i],\n          evtOut: 'dragleave',\n          evtIn: 'dragenter',\n        });\n      }\n      this._draggedoverTarget = target;\n    },\n\n    /**\n     * Manage the synthetic in/out events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the supported events\n     * @param {Event} e Event object fired\n     * @param {Object} config configuration for the function to work\n     * @param {String} config.targetName property on the canvas where the old target is stored\n     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n     * @param {String} config.evtOut name of the event to fire for out\n     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n     * @param {String} config.evtIn name of the event to fire for in\n     * @private\n     */\n    fireSyntheticInOutEvents: function(target, e, config) {\n      var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires,\n          targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\n      if (targetChanged) {\n        inOpt = { e: e, target: target, previousTarget: oldTarget };\n        outOpt = { e: e, target: oldTarget, nextTarget: target };\n      }\n      inFires = target && targetChanged;\n      outFires = oldTarget && targetChanged;\n      if (outFires) {\n        canvasEvtOut && this.fire(canvasEvtOut, outOpt);\n        oldTarget.fire(config.evtOut, outOpt);\n      }\n      if (inFires) {\n        canvasEvtIn && this.fire(canvasEvtIn, inOpt);\n        target.fire(config.evtIn, inOpt);\n      }\n    },\n\n    /**\n     * Method that defines actions when an Event Mouse Wheel\n     * @param {Event} e Event object fired on mouseup\n     */\n    __onMouseWheel: function(e) {\n      this._cacheTransformEventData(e);\n      this._handleEvent(e, 'wheel');\n      this._resetTransformEventData();\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event fired on mousemove\n     */\n    _transformObject: function(e) {\n      var pointer = this.getPointer(e),\n          transform = this._currentTransform;\n\n      transform.reset = false;\n      transform.shiftKey = e.shiftKey;\n      transform.altKey = e[this.centeredKey];\n\n      this._performTransformAction(e, transform, pointer);\n      transform.actionPerformed && this.requestRenderAll();\n    },\n\n    /**\n     * @private\n     */\n    _performTransformAction: function(e, transform, pointer) {\n      var x = pointer.x,\n          y = pointer.y,\n          action = transform.action,\n          actionPerformed = false,\n          actionHandler = transform.actionHandler;\n          // this object could be created from the function in the control handlers\n\n\n      if (actionHandler) {\n        actionPerformed = actionHandler(e, transform, x, y);\n      }\n      if (action === 'drag' && actionPerformed) {\n        transform.target.isMoving = true;\n        this.setCursor(transform.target.moveCursor || this.moveCursor);\n      }\n      transform.actionPerformed = transform.actionPerformed || actionPerformed;\n    },\n\n    /**\n     * @private\n     */\n    _fire: fabric.controlsUtils.fireEvent,\n\n    /**\n     * Sets the cursor depending on where the canvas is being hovered.\n     * Note: very buggy in Opera\n     * @param {Event} e Event object\n     * @param {Object} target Object that the mouse is hovering, if so.\n     */\n    _setCursorFromEvent: function (e, target) {\n      if (!target) {\n        this.setCursor(this.defaultCursor);\n        return false;\n      }\n      var hoverCursor = target.hoverCursor || this.hoverCursor,\n          activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\n            this._activeObject : null,\n          // only show proper corner when group selection is not active\n          corner = (!activeSelection || !activeSelection.contains(target))\n          // here we call findTargetCorner always with undefined for the touch parameter.\n          // we assume that if you are using a cursor you do not need to interact with\n          // the bigger touch area.\n                    && target._findTargetCorner(this.getPointer(e, true));\n\n      if (!corner) {\n        if (target.subTargetCheck){\n          // hoverCursor should come from top-most subTarget,\n          // so we walk the array backwards\n          this.targets.concat().reverse().map(function(_target){\n            hoverCursor = _target.hoverCursor || hoverCursor;\n          });\n        }\n        this.setCursor(hoverCursor);\n      }\n      else {\n        this.setCursor(this.getCornerCursor(corner, target, e));\n      }\n    },\n\n    /**\n     * @private\n     */\n    getCornerCursor: function(corner, target, e) {\n      var control = target.controls[corner];\n      return control.cursorStyleHandler(e, control, target);\n    }\n  });\n})();\n(function() {\n\n  var min = Math.min,\n      max = Math.max;\n\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     * @return {Boolean}\n     */\n    _shouldGroup: function(e, target) {\n      var activeObject = this._activeObject;\n      return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\n            (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });\n    },\n\n    /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */\n    _handleGrouping: function (e, target) {\n      var activeObject = this._activeObject;\n      // avoid multi select when shift click on a corner\n      if (activeObject.__corner) {\n        return;\n      }\n      if (target === activeObject) {\n        // if it's a group, find target again, using activeGroup objects\n        target = this.findTarget(e, true);\n        // if even object is not found or we are on activeObjectCorner, bail out\n        if (!target || !target.selectable) {\n          return;\n        }\n      }\n      if (activeObject && activeObject.type === 'activeSelection') {\n        this._updateActiveSelection(target, e);\n      }\n      else {\n        this._createActiveSelection(target, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _updateActiveSelection: function(target, e) {\n      var activeSelection = this._activeObject,\n          currentActiveObjects = activeSelection._objects.slice(0);\n      if (activeSelection.contains(target)) {\n        activeSelection.removeWithUpdate(target);\n        this._hoveredTarget = target;\n        this._hoveredTargets = this.targets.concat();\n        if (activeSelection.size() === 1) {\n          // activate last remaining object\n          this._setActiveObject(activeSelection.item(0), e);\n        }\n      }\n      else {\n        activeSelection.addWithUpdate(target);\n        this._hoveredTarget = activeSelection;\n        this._hoveredTargets = this.targets.concat();\n      }\n      this._fireSelectionEvents(currentActiveObjects, e);\n    },\n\n    /**\n     * @private\n     */\n    _createActiveSelection: function(target, e) {\n      var currentActives = this.getActiveObjects(), group = this._createGroup(target);\n      this._hoveredTarget = group;\n      // ISSUE 4115: should we consider subTargets here?\n      // this._hoveredTargets = [];\n      // this._hoveredTargets = this.targets.concat();\n      this._setActiveObject(group, e);\n      this._fireSelectionEvents(currentActives, e);\n    },\n\n    /**\n     * @private\n     * @param {Object} target\n     */\n    _createGroup: function(target) {\n      var objects = this._objects,\n          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\n          groupObjects = isActiveLower\n            ? [this._activeObject, target]\n            : [target, this._activeObject];\n      this._activeObject.isEditing && this._activeObject.exitEditing();\n      return new fabric.ActiveSelection(groupObjects, {\n        canvas: this\n      });\n    },\n\n    /**\n     * @private\n     * @param {Event} e mouse event\n     */\n    _groupSelectedObjects: function (e) {\n\n      var group = this._collectObjects(e),\n          aGroup;\n\n      // do not create group for 1 element only\n      if (group.length === 1) {\n        this.setActiveObject(group[0], e);\n      }\n      else if (group.length > 1) {\n        aGroup = new fabric.ActiveSelection(group.reverse(), {\n          canvas: this\n        });\n        this.setActiveObject(aGroup, e);\n      }\n    },\n\n    /**\n     * @private\n     */\n    _collectObjects: function(e) {\n      var group = [],\n          currentObject,\n          x1 = this._groupSelector.ex,\n          y1 = this._groupSelector.ey,\n          x2 = x1 + this._groupSelector.left,\n          y2 = y1 + this._groupSelector.top,\n          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\n          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\n          allowIntersect = !this.selectionFullyContained,\n          isClick = x1 === x2 && y1 === y2;\n      // we iterate reverse order to collect top first in case of click.\n      for (var i = this._objects.length; i--; ) {\n        currentObject = this._objects[i];\n\n        if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n          continue;\n        }\n\n        if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true)) ||\n            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) ||\n            (allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true)) ||\n            (allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true))\n        ) {\n          group.push(currentObject);\n          // only add one object if it's a click\n          if (isClick) {\n            break;\n          }\n        }\n      }\n\n      if (group.length > 1) {\n        group = group.filter(function(object) {\n          return !object.onSelect({ e: e });\n        });\n      }\n\n      return group;\n    },\n\n    /**\n     * @private\n     */\n    _maybeGroupObjects: function(e) {\n      if (this.selection && this._groupSelector) {\n        this._groupSelectedObjects(e);\n      }\n      this.setCursor(this.defaultCursor);\n      // clear selection and current transformation\n      this._groupSelector = null;\n    }\n  });\n\n})();\n(function () {\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n    /**\n     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n     * @param {Object} [options] Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n     * @example <caption>Generate jpeg dataURL with lower quality</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'jpeg',\n     *   quality: 0.8\n     * });\n     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   left: 100,\n     *   top: 100,\n     *   width: 200,\n     *   height: 200\n     * });\n     * @example <caption>Generate double scaled png dataURL</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   multiplier: 2\n     * });\n     */\n    toDataURL: function (options) {\n      options || (options = { });\n\n      var format = options.format || 'png',\n          quality = options.quality || 1,\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),\n          canvasEl = this.toCanvasElement(multiplier, options);\n      return fabric.util.toDataURL(canvasEl, format, quality);\n    },\n\n    /**\n     * Create a new HTMLCanvas element painted with the current canvas content.\n     * No need to resize the actual one or repaint it.\n     * Will transfer object ownership to a new canvas, paint it, and set everything back.\n     * This is an intermediary step used to get to a dataUrl but also it is useful to\n     * create quick image copies of a canvas without passing for the dataUrl string\n     * @param {Number} [multiplier] a zoom factor.\n     * @param {Object} [cropping] Cropping informations\n     * @param {Number} [cropping.left] Cropping left offset.\n     * @param {Number} [cropping.top] Cropping top offset.\n     * @param {Number} [cropping.width] Cropping width.\n     * @param {Number} [cropping.height] Cropping height.\n     */\n    toCanvasElement: function(multiplier, cropping) {\n      multiplier = multiplier || 1;\n      cropping = cropping || { };\n      var scaledWidth = (cropping.width || this.width) * multiplier,\n          scaledHeight = (cropping.height || this.height) * multiplier,\n          zoom = this.getZoom(),\n          originalWidth = this.width,\n          originalHeight = this.height,\n          newZoom = zoom * multiplier,\n          vp = this.viewportTransform,\n          translateX = (vp[4] - (cropping.left || 0)) * multiplier,\n          translateY = (vp[5] - (cropping.top || 0)) * multiplier,\n          originalInteractive = this.interactive,\n          newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\n          originalRetina = this.enableRetinaScaling,\n          canvasEl = fabric.util.createCanvasElement(),\n          originalContextTop = this.contextTop;\n      canvasEl.width = scaledWidth;\n      canvasEl.height = scaledHeight;\n      this.contextTop = null;\n      this.enableRetinaScaling = false;\n      this.interactive = false;\n      this.viewportTransform = newVp;\n      this.width = scaledWidth;\n      this.height = scaledHeight;\n      this.calcViewportBoundaries();\n      this.renderCanvas(canvasEl.getContext('2d'), this._objects);\n      this.viewportTransform = vp;\n      this.width = originalWidth;\n      this.height = originalHeight;\n      this.calcViewportBoundaries();\n      this.interactive = originalInteractive;\n      this.enableRetinaScaling = originalRetina;\n      this.contextTop = originalContextTop;\n      return canvasEl;\n    },\n  });\n\n})();\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n  /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * });\n   */\n  loadFromJSON: function (json, callback, reviver) {\n    if (!json) {\n      return;\n    }\n\n    // serialize if it wasn't already\n    var serialized = (typeof json === 'string')\n      ? JSON.parse(json)\n      : fabric.util.object.clone(json);\n\n    var _this = this,\n        clipPath = serialized.clipPath,\n        renderOnAddRemove = this.renderOnAddRemove;\n\n    this.renderOnAddRemove = false;\n\n    delete serialized.clipPath;\n\n    this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\n      _this.clear();\n      _this._setBgOverlay(serialized, function () {\n        if (clipPath) {\n          _this._enlivenObjects([clipPath], function (enlivenedCanvasClip) {\n            _this.clipPath = enlivenedCanvasClip[0];\n            _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\n          });\n        }\n        else {\n          _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\n        }\n      });\n    }, reviver);\n    return this;\n  },\n\n  /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Array} restored canvas objects\n   * @param {Function} cached renderOnAddRemove callback\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */\n  __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {\n    var _this = this;\n    enlivenedObjects.forEach(function(obj, index) {\n      // we splice the array just in case some custom classes restored from JSON\n      // will add more object to canvas at canvas init.\n      _this.insertAt(obj, index);\n    });\n    this.renderOnAddRemove = renderOnAddRemove;\n    // remove parts i cannot set as options\n    delete serialized.objects;\n    delete serialized.backgroundImage;\n    delete serialized.overlayImage;\n    delete serialized.background;\n    delete serialized.overlay;\n    // this._initOptions does too many things to just\n    // call it. Normally loading an Object from JSON\n    // create the Object instance. Here the Canvas is\n    // already an instance and we are just loading things over it\n    this._setOptions(serialized);\n    this.renderAll();\n    callback && callback();\n  },\n\n  /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */\n  _setBgOverlay: function(serialized, callback) {\n    var loaded = {\n      backgroundColor: false,\n      overlayColor: false,\n      backgroundImage: false,\n      overlayImage: false\n    };\n\n    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n      callback && callback();\n      return;\n    }\n\n    var cbIfLoaded = function () {\n      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n        callback && callback();\n      }\n    };\n\n    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\n    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\n    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n   * @param {(Object|String)} value Value to set\n   * @param {Object} loaded Set loaded property to true if property is set\n   * @param {Object} callback Callback function to invoke after property is set\n   */\n  __setBgOverlay: function(property, value, loaded, callback) {\n    var _this = this;\n\n    if (!value) {\n      loaded[property] = true;\n      callback && callback();\n      return;\n    }\n\n    if (property === 'backgroundImage' || property === 'overlayImage') {\n      fabric.util.enlivenObjects([value], function(enlivedObject){\n        _this[property] = enlivedObject[0];\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n    else {\n      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\n        loaded[property] = true;\n        callback && callback();\n      });\n    }\n  },\n\n  /**\n   * @private\n   * @param {Array} objects\n   * @param {Function} callback\n   * @param {Function} [reviver]\n   */\n  _enlivenObjects: function (objects, callback, reviver) {\n    if (!objects || objects.length === 0) {\n      callback && callback([]);\n      return;\n    }\n\n    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n      callback && callback(enlivenedObjects);\n    }, null, reviver);\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Function} callback\n   */\n  _toDataURL: function (format, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURL(format));\n    });\n  },\n\n  /**\n   * @private\n   * @param {String} format\n   * @param {Number} multiplier\n   * @param {Function} callback\n   */\n  _toDataURLWithMultiplier: function (format, multiplier, callback) {\n    this.clone(function (clone) {\n      callback(clone.toDataURLWithMultiplier(format, multiplier));\n    });\n  },\n\n  /**\n   * Clones canvas instance\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n   */\n  clone: function (callback, properties) {\n    var data = JSON.stringify(this.toJSON(properties));\n    this.cloneWithoutData(function(clone) {\n      clone.loadFromJSON(data, function() {\n        callback && callback(clone);\n      });\n    });\n  },\n\n  /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions, clipping properties, etc.\n   * but leaves data empty (so that you can populate it with your own)\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   */\n  cloneWithoutData: function(callback) {\n    var el = fabric.util.createCanvasElement();\n\n    el.width = this.width;\n    el.height = this.height;\n\n    var clone = new fabric.Canvas(el);\n    if (this.backgroundImage) {\n      clone.setBackgroundImage(this.backgroundImage.src, function() {\n        clone.renderAll();\n        callback && callback(clone);\n      });\n      clone.backgroundImageOpacity = this.backgroundImageOpacity;\n      clone.backgroundImageStretch = this.backgroundImageStretch;\n    }\n    else {\n      callback && callback(clone);\n    }\n  }\n});\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed,\n      capitalize = fabric.util.string.capitalize,\n      degreesToRadians = fabric.util.degreesToRadians,\n      objectCaching = !fabric.isLikelyNode,\n      ALIASING_LIMIT = 2;\n\n  if (fabric.Object) {\n    return;\n  }\n\n  /**\n   * Root object class from which all 2d shape classes inherit from\n   * @class fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n   * @see {@link fabric.Object#initialize} for constructor definition\n   *\n   * @fires added\n   * @fires removed\n   *\n   * @fires selected\n   * @fires deselected\n   * @fires modified\n   * @fires modified\n   * @fires moved\n   * @fires scaled\n   * @fires rotated\n   * @fires skewed\n   *\n   * @fires rotating\n   * @fires scaling\n   * @fires moving\n   * @fires skewing\n   *\n   * @fires mousedown\n   * @fires mouseup\n   * @fires mouseover\n   * @fires mouseout\n   * @fires mousewheel\n   * @fires mousedblclick\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop\n   */\n  fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Type of an object (rect, circle, path, etc.).\n     * Note that this property is meant to be read-only and not meant to be modified.\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n     * @type String\n     * @default\n     */\n    type:                     'object',\n\n    /**\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originX:                  'left',\n\n    /**\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */\n    originY:                  'top',\n\n    /**\n     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\n     * @type Number\n     * @default\n     */\n    top:                      0,\n\n    /**\n     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\n     * @type Number\n     * @default\n     */\n    left:                     0,\n\n    /**\n     * Object width\n     * @type Number\n     * @default\n     */\n    width:                    0,\n\n    /**\n     * Object height\n     * @type Number\n     * @default\n     */\n    height:                   0,\n\n    /**\n     * Object scale factor (horizontal)\n     * @type Number\n     * @default\n     */\n    scaleX:                   1,\n\n    /**\n     * Object scale factor (vertical)\n     * @type Number\n     * @default\n     */\n    scaleY:                   1,\n\n    /**\n     * When true, an object is rendered as flipped horizontally\n     * @type Boolean\n     * @default\n     */\n    flipX:                    false,\n\n    /**\n     * When true, an object is rendered as flipped vertically\n     * @type Boolean\n     * @default\n     */\n    flipY:                    false,\n\n    /**\n     * Opacity of an object\n     * @type Number\n     * @default\n     */\n    opacity:                  1,\n\n    /**\n     * Angle of rotation of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    angle:                    0,\n\n    /**\n     * Angle of skew on x axes of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    skewX:                    0,\n\n    /**\n     * Angle of skew on y axes of an object (in degrees)\n     * @type Number\n     * @default\n     */\n    skewY:                    0,\n\n    /**\n     * Size of object's controlling corners (in pixels)\n     * @type Number\n     * @default\n     */\n    cornerSize:               13,\n\n    /**\n     * Size of object's controlling corners when touch interaction is detected\n     * @type Number\n     * @default\n     */\n    touchCornerSize:               24,\n\n    /**\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n     * @type Boolean\n     * @default\n     */\n    transparentCorners:       true,\n\n    /**\n     * Default cursor value used when hovering over this object on canvas\n     * @type String\n     * @default\n     */\n    hoverCursor:              null,\n\n    /**\n     * Default cursor value used when moving this object on canvas\n     * @type String\n     * @default\n     */\n    moveCursor:               null,\n\n    /**\n     * Padding between object and its controlling borders (in pixels)\n     * @type Number\n     * @default\n     */\n    padding:                  0,\n\n    /**\n     * Color of controlling borders of an object (when it's active)\n     * @type String\n     * @default\n     */\n    borderColor:              'rgb(178,204,255)',\n\n    /**\n     * Array specifying dash pattern of an object's borders (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */\n    borderDashArray:          null,\n\n    /**\n     * Color of controlling corners of an object (when it's active)\n     * @type String\n     * @default\n     */\n    cornerColor:              'rgb(178,204,255)',\n\n    /**\n     * Color of controlling corners of an object (when it's active and transparentCorners false)\n     * @since 1.6.2\n     * @type String\n     * @default\n     */\n    cornerStrokeColor:        null,\n\n    /**\n     * Specify style of control, 'rect' or 'circle'\n     * @since 1.6.2\n     * @type String\n     */\n    cornerStyle:          'rect',\n\n    /**\n     * Array specifying dash pattern of an object's control (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */\n    cornerDashArray:          null,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being scaled via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredScaling:          false,\n\n    /**\n     * When true, this object will use center point as the origin of transformation\n     * when being rotated via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */\n    centeredRotation:         true,\n\n    /**\n     * Color of object's fill\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    fill:                     'rgb(0,0,0)',\n\n    /**\n     * Fill rule used to fill an object\n     * accepted values are nonzero, evenodd\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n     * @type String\n     * @default\n     */\n    fillRule:                 'nonzero',\n\n    /**\n     * Composite rule used for canvas globalCompositeOperation\n     * @type String\n     * @default\n     */\n    globalCompositeOperation: 'source-over',\n\n    /**\n     * Background color of an object.\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    backgroundColor:          '',\n\n    /**\n     * Selection Background color of an object. colored layer behind the object when it is active.\n     * does not mix good with globalCompositeOperation methods.\n     * @type String\n     * @default\n     */\n    selectionBackgroundColor:          '',\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */\n    stroke:                   null,\n\n    /**\n     * Width of a stroke used to render this object\n     * @type Number\n     * @default\n     */\n    strokeWidth:              1,\n\n    /**\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n     * @type Array\n     */\n    strokeDashArray:          null,\n\n    /**\n     * Line offset of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeDashOffset: 0,\n\n    /**\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */\n    strokeLineCap:            'butt',\n\n    /**\n     * Corner style of an object's stroke (one of \"bevel\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */\n    strokeLineJoin:           'miter',\n\n    /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n     * @type Number\n     * @default\n     */\n    strokeMiterLimit:         4,\n\n    /**\n     * Shadow object representing shadow of this shape\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:                   null,\n\n    /**\n     * Opacity of object's controlling borders when object is active and moving\n     * @type Number\n     * @default\n     */\n    borderOpacityWhenMoving:  0.4,\n\n    /**\n     * Scale factor of object's controlling borders\n     * bigger number will make a thicker border\n     * border is 1, so this is basically a border thickness\n     * since there is no way to change the border itself.\n     * @type Number\n     * @default\n     */\n    borderScaleFactor:        1,\n\n    /**\n     * Minimum allowed scale value of an object\n     * @type Number\n     * @default\n     */\n    minScaleLimit:            0,\n\n    /**\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n     * But events still fire on it.\n     * @type Boolean\n     * @default\n     */\n    selectable:               true,\n\n    /**\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n     * @type Boolean\n     * @default\n     */\n    evented:                  true,\n\n    /**\n     * When set to `false`, an object is not rendered on canvas\n     * @type Boolean\n     * @default\n     */\n    visible:                  true,\n\n    /**\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n     * @type Boolean\n     * @default\n     */\n    hasControls:              true,\n\n    /**\n     * When set to `false`, object's controlling borders are not rendered\n     * @type Boolean\n     * @default\n     */\n    hasBorders:               true,\n\n    /**\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n     * @type Boolean\n     * @default\n     */\n    perPixelTargetFind:       false,\n\n    /**\n     * When `false`, default object's values are not included in its serialization\n     * @type Boolean\n     * @default\n     */\n    includeDefaultValues:     true,\n\n    /**\n     * When `true`, object horizontal movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementX:            false,\n\n    /**\n     * When `true`, object vertical movement is locked\n     * @type Boolean\n     * @default\n     */\n    lockMovementY:            false,\n\n    /**\n     * When `true`, object rotation is locked\n     * @type Boolean\n     * @default\n     */\n    lockRotation:             false,\n\n    /**\n     * When `true`, object horizontal scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingX:             false,\n\n    /**\n     * When `true`, object vertical scaling is locked\n     * @type Boolean\n     * @default\n     */\n    lockScalingY:             false,\n\n    /**\n     * When `true`, object horizontal skewing is locked\n     * @type Boolean\n     * @default\n     */\n    lockSkewingX:             false,\n\n    /**\n     * When `true`, object vertical skewing is locked\n     * @type Boolean\n     * @default\n     */\n    lockSkewingY:             false,\n\n    /**\n     * When `true`, object cannot be flipped by scaling into negative values\n     * @type Boolean\n     * @default\n     */\n    lockScalingFlip:          false,\n\n    /**\n     * When `true`, object is not exported in OBJECT/JSON\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */\n    excludeFromExport:        false,\n\n    /**\n     * When `true`, object is cached on an additional canvas.\n     * When `false`, object is not cached unless necessary ( clipPath )\n     * default to true\n     * @since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    objectCaching:            objectCaching,\n\n    /**\n     * When `true`, object properties are checked for cache invalidation. In some particular\n     * situation you may want this to be disabled ( spray brush, very big, groups)\n     * or if your application does not allow you to modify properties for groups child you want\n     * to disable it for groups.\n     * default to false\n     * since 1.7.0\n     * @type Boolean\n     * @default false\n     */\n    statefullCache:            false,\n\n    /**\n     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\n     * too much and will be redrawn with correct details at the end of scaling.\n     * this setting is performance and application dependant.\n     * default to true\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    noScaleCache:              true,\n\n    /**\n     * When `false`, the stoke width will scale with the object.\n     * When `true`, the stroke will always match the exact pixel size entered for stroke width.\n     * this Property does not work on Text classes or drawing call that uses strokeText,fillText methods\n     * default to false\n     * @since 2.6.0\n     * @type Boolean\n     * @default false\n     * @type Boolean\n     * @default false\n     */\n    strokeUniform:              false,\n\n    /**\n     * When set to `true`, object's cache will be rerendered next render call.\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */\n    dirty:                true,\n\n    /**\n     * keeps the value of the last hovered corner during mouse move.\n     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n     * It should be private, but there is no harm in using it as\n     * a read-only property.\n     * @type number|string|any\n     * @default 0\n     */\n    __corner: 0,\n\n    /**\n     * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\n     * @type String\n     * @default\n     */\n    paintFirst:           'fill',\n\n    /**\n     * When 'down', object is set to active on mousedown/touchstart\n     * When 'up', object is set to active on mouseup/touchend\n     * Experimental. Let's see if this breaks anything before supporting officially\n     * @private\n     * since 4.4.0\n     * @type String\n     * @default 'down'\n     */\n    activeOn:           'down',\n\n    /**\n     * List of properties to consider when checking if state\n     * of an object is changed (fabric.Object#hasStateChanged)\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: (\n      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\n      'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +\n      'angle opacity fill globalCompositeOperation shadow visible backgroundColor ' +\n      'skewX skewY fillRule paintFirst clipPath strokeUniform'\n    ).split(' '),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n     * and refreshed at the next render\n     * @type Array\n     */\n    cacheProperties: (\n      'fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform' +\n      ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'\n    ).split(' '),\n\n    /**\n     * List of properties to consider for animating colors.\n     * @type Array\n     */\n    colorProperties: (\n      'fill stroke backgroundColor'\n    ).split(' '),\n\n    /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the object has rendered, and the context is placed in the center\n     * of the object cacheCanvas.\n     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\n     * @type fabric.Object\n     */\n    clipPath: undefined,\n\n    /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will make the object clip to the outside of the clipPath\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */\n    inverted: false,\n\n    /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will have its top and left relative to canvas, and will\n     * not be influenced by the object transform. This will make the clipPath relative\n     * to the canvas, but clipping just a particular object.\n     * WARNING this is beta, this feature may change or be renamed.\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */\n    absolutePositioned: false,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      if (options) {\n        this.setOptions(options);\n      }\n    },\n\n    /**\n     * Create a the canvas used to keep the cached copy of the object\n     * @private\n     */\n    _createCacheCanvas: function() {\n      this._cacheProperties = {};\n      this._cacheCanvas = fabric.util.createCanvasElement();\n      this._cacheContext = this._cacheCanvas.getContext('2d');\n      this._updateCacheCanvas();\n      // if canvas gets created, is empty, so dirty.\n      this.dirty = true;\n    },\n\n    /**\n     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\n     * and each side do not cross fabric.cacheSideLimit\n     * those numbers are configurable so that you can get as much detail as you want\n     * making bargain with performances.\n     * @param {Object} dims\n     * @param {Object} dims.width width of canvas\n     * @param {Object} dims.height height of canvas\n     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _limitCacheSize: function(dims) {\n      var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\n          width = dims.width, height = dims.height,\n          max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\n      if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\n        if (width < min) {\n          dims.width = min;\n        }\n        if (height < min) {\n          dims.height = min;\n        }\n        return dims;\n      }\n      var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\n          capValue = fabric.util.capValue,\n          x = capValue(min, limitedDims.x, max),\n          y = capValue(min, limitedDims.y, max);\n      if (width > x) {\n        dims.zoomX /= width / x;\n        dims.width = x;\n        dims.capped = true;\n      }\n      if (height > y) {\n        dims.zoomY /= height / y;\n        dims.height = y;\n        dims.capped = true;\n      }\n      return dims;\n    },\n\n    /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @return {Object}.x width of object to be cached\n     * @return {Object}.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _getCacheCanvasDimensions: function() {\n      var objectScale = this.getTotalObjectScaling(),\n          // caculate dimensions without skewing\n          dim = this._getTransformedDimensions(0, 0),\n          neededX = dim.x * objectScale.scaleX / this.scaleX,\n          neededY = dim.y * objectScale.scaleY / this.scaleY;\n      return {\n        // for sure this ALIASING_LIMIT is slightly creating problem\n        // in situation in which the cache canvas gets an upper limit\n        // also objectScale contains already scaleX and scaleY\n        width: neededX + ALIASING_LIMIT,\n        height: neededY + ALIASING_LIMIT,\n        zoomX: objectScale.scaleX,\n        zoomY: objectScale.scaleY,\n        x: neededX,\n        y: neededY\n      };\n    },\n\n    /**\n     * Update width and height of the canvas for cache\n     * returns true or false if canvas needed resize.\n     * @private\n     * @return {Boolean} true if the canvas has been resized\n     */\n    _updateCacheCanvas: function() {\n      var targetCanvas = this.canvas;\n      if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n        var target = targetCanvas._currentTransform.target,\n            action = targetCanvas._currentTransform.action;\n        if (this === target && action.slice && action.slice(0, 5) === 'scale') {\n          return false;\n        }\n      }\n      var canvas = this._cacheCanvas,\n          dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n          minCacheSize = fabric.minCacheSideLimit,\n          width = dims.width, height = dims.height, drawingWidth, drawingHeight,\n          zoomX = dims.zoomX, zoomY = dims.zoomY,\n          dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\n          zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\n          shouldRedraw = dimensionsChanged || zoomChanged,\n          additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\n      if (dimensionsChanged) {\n        var canvasWidth = this._cacheCanvas.width,\n            canvasHeight = this._cacheCanvas.height,\n            sizeGrowing = width > canvasWidth || height > canvasHeight,\n            sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\n              canvasWidth > minCacheSize && canvasHeight > minCacheSize;\n        shouldResizeCanvas = sizeGrowing || sizeShrinking;\n        if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\n          additionalWidth = width * 0.1;\n          additionalHeight = height * 0.1;\n        }\n      }\n      if (this instanceof fabric.Text && this.path) {\n        shouldRedraw = true;\n        shouldResizeCanvas = true;\n        additionalWidth += this.getHeightOfLine(0) * this.zoomX;\n        additionalHeight += this.getHeightOfLine(0) * this.zoomY;\n      }\n      if (shouldRedraw) {\n        if (shouldResizeCanvas) {\n          canvas.width = Math.ceil(width + additionalWidth);\n          canvas.height = Math.ceil(height + additionalHeight);\n        }\n        else {\n          this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\n          this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\n        }\n        drawingWidth = dims.x / 2;\n        drawingHeight = dims.y / 2;\n        this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n        this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n        this.cacheWidth = width;\n        this.cacheHeight = height;\n        this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\n        this._cacheContext.scale(zoomX, zoomY);\n        this.zoomX = zoomX;\n        this.zoomY = zoomY;\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */\n    setOptions: function(options) {\n      this._setOptions(options);\n      this._initGradient(options.fill, 'fill');\n      this._initGradient(options.stroke, 'stroke');\n      this._initPattern(options.fill, 'fill');\n      this._initPattern(options.stroke, 'stroke');\n    },\n\n    /**\n     * Transforms context when rendering an object\n     * @param {CanvasRenderingContext2D} ctx Context\n     */\n    transform: function(ctx) {\n      var needFullTransform = (this.group && !this.group._transformDone) ||\n         (this.group && this.canvas && ctx === this.canvas.contextTop);\n      var m = this.calcTransformMatrix(!needFullTransform);\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n    },\n\n    /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\n\n          object = {\n            type:                     this.type,\n            version:                  fabric.version,\n            originX:                  this.originX,\n            originY:                  this.originY,\n            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\n            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\n            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\n            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\n            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\n            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\n            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n            strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\n            strokeLineCap:            this.strokeLineCap,\n            strokeDashOffset:         this.strokeDashOffset,\n            strokeLineJoin:           this.strokeLineJoin,\n            strokeUniform:            this.strokeUniform,\n            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n            angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\n            flipX:                    this.flipX,\n            flipY:                    this.flipY,\n            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\n            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\n            visible:                  this.visible,\n            backgroundColor:          this.backgroundColor,\n            fillRule:                 this.fillRule,\n            paintFirst:               this.paintFirst,\n            globalCompositeOperation: this.globalCompositeOperation,\n            skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\n            skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),\n          };\n\n      if (this.clipPath && !this.clipPath.excludeFromExport) {\n        object.clipPath = this.clipPath.toObject(propertiesToInclude);\n        object.clipPath.inverted = this.clipPath.inverted;\n        object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\n      }\n\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\n      if (!this.includeDefaultValues) {\n        object = this._removeDefaultValues(object);\n      }\n\n      return object;\n    },\n\n    /**\n     * Returns (dataless) object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      // will be overwritten by subclasses\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     */\n    _removeDefaultValues: function(object) {\n      var prototype = fabric.util.getKlass(object.type).prototype,\n          stateProperties = prototype.stateProperties;\n      stateProperties.forEach(function(prop) {\n        if (prop === 'left' || prop === 'top') {\n          return;\n        }\n        if (object[prop] === prototype[prop]) {\n          delete object[prop];\n        }\n        // basically a check for [] === []\n        if (Array.isArray(object[prop]) && Array.isArray(prototype[prop])\n          && object[prop].length === 0 && prototype[prop].length === 0) {\n          delete object[prop];\n        }\n      });\n\n      return object;\n    },\n\n    /**\n     * Returns a string representation of an instance\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.' + capitalize(this.type) + '>';\n    },\n\n    /**\n     * Return the object scale factor counting also the group scaling\n     * @return {Object} object with scaleX and scaleY properties\n     */\n    getObjectScaling: function() {\n      // if the object is a top level one, on the canvas, we go for simple aritmetic\n      // otherwise the complex method with angles will return approximations and decimals\n      // and will likely kill the cache when not needed\n      // https://github.com/fabricjs/fabric.js/issues/7157\n      if (!this.group) {\n        return {\n          scaleX: this.scaleX,\n          scaleY: this.scaleY,\n        };\n      }\n      // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n      var options = fabric.util.qrDecompose(this.calcTransformMatrix());\n      return { scaleX: Math.abs(options.scaleX), scaleY: Math.abs(options.scaleY) };\n    },\n\n    /**\n     * Return the object scale factor counting also the group scaling, zoom and retina\n     * @return {Object} object with scaleX and scaleY properties\n     */\n    getTotalObjectScaling: function() {\n      var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\n      if (this.canvas) {\n        var zoom = this.canvas.getZoom();\n        var retina = this.canvas.getRetinaScaling();\n        scaleX *= zoom * retina;\n        scaleY *= zoom * retina;\n      }\n      return { scaleX: scaleX, scaleY: scaleY };\n    },\n\n    /**\n     * Return the object opacity counting also the group property\n     * @return {Number}\n     */\n    getObjectOpacity: function() {\n      var opacity = this.opacity;\n      if (this.group) {\n        opacity *= this.group.getObjectOpacity();\n      }\n      return opacity;\n    },\n\n    /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Object} thisArg\n     */\n    _set: function(key, value) {\n      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\n          isChanged = this[key] !== value, groupNeedsUpdate = false;\n\n      if (shouldConstrainValue) {\n        value = this._constrainScale(value);\n      }\n      if (key === 'scaleX' && value < 0) {\n        this.flipX = !this.flipX;\n        value *= -1;\n      }\n      else if (key === 'scaleY' && value < 0) {\n        this.flipY = !this.flipY;\n        value *= -1;\n      }\n      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\n        value = new fabric.Shadow(value);\n      }\n      else if (key === 'dirty' && this.group) {\n        this.group.set('dirty', value);\n      }\n\n      this[key] = value;\n\n      if (isChanged) {\n        groupNeedsUpdate = this.group && this.group.isOnACache();\n        if (this.cacheProperties.indexOf(key) > -1) {\n          this.dirty = true;\n          groupNeedsUpdate && this.group.set('dirty', true);\n        }\n        else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\n          this.group.set('dirty', true);\n        }\n      }\n      return this;\n    },\n\n    /**\n     * This callback function is called by the parent group of an object every\n     * time a non-delegated property changes on the group. It is passed the key\n     * and value as parameters. Not adding in this function's signature to avoid\n     * Travis build error about unused variables.\n     */\n    setOnGroup: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n    /**\n     * Retrieves viewportTransform from Object's canvas if possible\n     * @method getViewportTransform\n     * @memberOf fabric.Object.prototype\n     * @return {Array}\n     */\n    getViewportTransform: function() {\n      if (this.canvas && this.canvas.viewportTransform) {\n        return this.canvas.viewportTransform;\n      }\n      return fabric.iMatrix.concat();\n    },\n\n    /*\n     * @private\n     * return if the object would be visible in rendering\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean}\n     */\n    isNotVisible: function() {\n      return this.opacity === 0 ||\n        (!this.width && !this.height && this.strokeWidth === 0) ||\n        !this.visible;\n    },\n\n    /**\n     * Renders an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      // do not render if width/height are zeros or object is not visible\n      if (this.isNotVisible()) {\n        return;\n      }\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n        return;\n      }\n      ctx.save();\n      this._setupCompositeOperation(ctx);\n      this.drawSelectionBackground(ctx);\n      this.transform(ctx);\n      this._setOpacity(ctx);\n      this._setShadow(ctx, this);\n      if (this.shouldCache()) {\n        this.renderCache();\n        this.drawCacheOnCanvas(ctx);\n      }\n      else {\n        this._removeCacheCanvas();\n        this.dirty = false;\n        this.drawObject(ctx);\n        if (this.objectCaching && this.statefullCache) {\n          this.saveState({ propertySet: 'cacheProperties' });\n        }\n      }\n      ctx.restore();\n    },\n\n    renderCache: function(options) {\n      options = options || {};\n      if (!this._cacheCanvas || !this._cacheContext) {\n        this._createCacheCanvas();\n      }\n      if (this.isCacheDirty()) {\n        this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\n        this.drawObject(this._cacheContext, options.forClipping);\n        this.dirty = false;\n      }\n    },\n\n    /**\n     * Remove cacheCanvas and its dimensions from the objects\n     */\n    _removeCacheCanvas: function() {\n      this._cacheCanvas = null;\n      this._cacheContext = null;\n      this.cacheWidth = 0;\n      this.cacheHeight = 0;\n    },\n\n    /**\n     * return true if the object will draw a stroke\n     * Does not consider text styles. This is just a shortcut used at rendering time\n     * We want it to be an approximation and be fast.\n     * wrote to avoid extra caching, it has to return true when stroke happens,\n     * can guess when it will not happen at 100% chance, does not matter if it misses\n     * some use case where the stroke is invisible.\n     * @since 3.0.0\n     * @returns Boolean\n     */\n    hasStroke: function() {\n      return this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0;\n    },\n\n    /**\n     * return true if the object will draw a fill\n     * Does not consider text styles. This is just a shortcut used at rendering time\n     * We want it to be an approximation and be fast.\n     * wrote to avoid extra caching, it has to return true when fill happens,\n     * can guess when it will not happen at 100% chance, does not matter if it misses\n     * some use case where the fill is invisible.\n     * @since 3.0.0\n     * @returns Boolean\n     */\n    hasFill: function() {\n      return this.fill && this.fill !== 'transparent';\n    },\n\n    /**\n     * When set to `true`, force the object to have its own cache, even if it is inside a group\n     * it may be needed when your object behave in a particular way on the cache and always needs\n     * its own isolated canvas to render correctly.\n     * Created to be overridden\n     * since 1.7.12\n     * @returns Boolean\n     */\n    needsItsOwnCache: function() {\n      if (this.paintFirst === 'stroke' &&\n        this.hasFill() && this.hasStroke() && typeof this.shadow === 'object') {\n        return true;\n      }\n      if (this.clipPath) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      this.ownCaching = this.needsItsOwnCache() || (\n        this.objectCaching &&\n        (!this.group || !this.group.isOnACache())\n      );\n      return this.ownCaching;\n    },\n\n    /**\n     * Check if this object or a child object will cast a shadow\n     * used by Group.shouldCache to know if child has a shadow recursively\n     * @return {Boolean}\n     */\n    willDrawShadow: function() {\n      return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n    },\n\n    /**\n     * Execute the drawing operation for an object clipPath\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Object} clipPath\n     */\n    drawClipPathOnCache: function(ctx, clipPath) {\n      ctx.save();\n      // DEBUG: uncomment this line, comment the following\n      // ctx.globalAlpha = 0.4\n      if (clipPath.inverted) {\n        ctx.globalCompositeOperation = 'destination-out';\n      }\n      else {\n        ctx.globalCompositeOperation = 'destination-in';\n      }\n      //ctx.scale(1 / 2, 1 / 2);\n      if (clipPath.absolutePositioned) {\n        var m = fabric.util.invertTransform(this.calcTransformMatrix());\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n      }\n      clipPath.transform(ctx);\n      ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n      ctx.drawImage(clipPath._cacheCanvas, -clipPath.cacheTranslationX, -clipPath.cacheTranslationY);\n      ctx.restore();\n    },\n\n    /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawObject: function(ctx, forClipping) {\n      var originalFill = this.fill, originalStroke = this.stroke;\n      if (forClipping) {\n        this.fill = 'black';\n        this.stroke = '';\n        this._setClippingProperties(ctx);\n      }\n      else {\n        this._renderBackground(ctx);\n      }\n      this._render(ctx);\n      this._drawClipPath(ctx, this.clipPath);\n      this.fill = originalFill;\n      this.stroke = originalStroke;\n    },\n\n    /**\n     * Prepare clipPath state and cache and draw it on instance's cache\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {fabric.Object} clipPath\n     */\n    _drawClipPath: function (ctx, clipPath) {\n      if (!clipPath) { return; }\n      // needed to setup a couple of variables\n      // path canvas gets overridden with this one.\n      // TODO find a better solution?\n      clipPath.canvas = this.canvas;\n      clipPath.shouldCache();\n      clipPath._transformDone = true;\n      clipPath.renderCache({ forClipping: true });\n      this.drawClipPathOnCache(ctx, clipPath);\n    },\n\n    /**\n     * Paint the cached copy of the object on the target context.\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawCacheOnCanvas: function(ctx) {\n      ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n      ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n    },\n\n    /**\n     * Check if cache is dirty\n     * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n     * on parent canvas.\n     */\n    isCacheDirty: function(skipCanvas) {\n      if (this.isNotVisible()) {\n        return false;\n      }\n      if (this._cacheCanvas && this._cacheContext && !skipCanvas && this._updateCacheCanvas()) {\n        // in this case the context is already cleared.\n        return true;\n      }\n      else {\n        if (this.dirty ||\n          (this.clipPath && this.clipPath.absolutePositioned) ||\n          (this.statefullCache && this.hasStateChanged('cacheProperties'))\n        ) {\n          if (this._cacheCanvas && this._cacheContext && !skipCanvas) {\n            var width = this.cacheWidth / this.zoomX;\n            var height = this.cacheHeight / this.zoomY;\n            this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Draws a background for the object big as its untransformed dimensions\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderBackground: function(ctx) {\n      if (!this.backgroundColor) {\n        return;\n      }\n      var dim = this._getNonTransformedDimensions();\n      ctx.fillStyle = this.backgroundColor;\n\n      ctx.fillRect(\n        -dim.x / 2,\n        -dim.y / 2,\n        dim.x,\n        dim.y\n      );\n      // if there is background color no other shadows\n      // should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setOpacity: function(ctx) {\n      if (this.group && !this.group._transformDone) {\n        ctx.globalAlpha = this.getObjectOpacity();\n      }\n      else {\n        ctx.globalAlpha *= this.opacity;\n      }\n    },\n\n    _setStrokeStyles: function(ctx, decl) {\n      var stroke = decl.stroke;\n      if (stroke) {\n        ctx.lineWidth = decl.strokeWidth;\n        ctx.lineCap = decl.strokeLineCap;\n        ctx.lineDashOffset = decl.strokeDashOffset;\n        ctx.lineJoin = decl.strokeLineJoin;\n        ctx.miterLimit = decl.strokeMiterLimit;\n        if (stroke.toLive) {\n          if (stroke.gradientUnits === 'percentage' || stroke.gradientTransform || stroke.patternTransform) {\n            // need to transform gradient in a pattern.\n            // this is a slow process. If you are hitting this codepath, and the object\n            // is not using caching, you should consider switching it on.\n            // we need a canvas as big as the current object caching canvas.\n            this._applyPatternForTransformedGradient(ctx, stroke);\n          }\n          else {\n            // is a simple gradient or pattern\n            ctx.strokeStyle = stroke.toLive(ctx, this);\n            this._applyPatternGradientTransform(ctx, stroke);\n          }\n        }\n        else {\n          // is a color\n          ctx.strokeStyle = decl.stroke;\n        }\n      }\n    },\n\n    _setFillStyles: function(ctx, decl) {\n      var fill = decl.fill;\n      if (fill) {\n        if (fill.toLive) {\n          ctx.fillStyle = fill.toLive(ctx, this);\n          this._applyPatternGradientTransform(ctx, decl.fill);\n        }\n        else {\n          ctx.fillStyle = fill;\n        }\n      }\n    },\n\n    _setClippingProperties: function(ctx) {\n      ctx.globalAlpha = 1;\n      ctx.strokeStyle = 'transparent';\n      ctx.fillStyle = '#000000';\n    },\n\n    /**\n     * @private\n     * Sets line dash\n     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n     * @param {Array} dashArray array representing dashes\n     */\n    _setLineDash: function(ctx, dashArray) {\n      if (!dashArray || dashArray.length === 0) {\n        return;\n      }\n      // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n      if (1 & dashArray.length) {\n        dashArray.push.apply(dashArray, dashArray);\n      }\n      ctx.setLineDash(dashArray);\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * the context here is not transformed\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     */\n    _renderControls: function(ctx, styleOverride) {\n      var vpt = this.getViewportTransform(),\n          matrix = this.calcTransformMatrix(),\n          options, drawBorders, drawControls;\n      styleOverride = styleOverride || { };\n      drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\n      drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\n      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\n      options = fabric.util.qrDecompose(matrix);\n      ctx.save();\n      ctx.translate(options.translateX, options.translateY);\n      ctx.lineWidth = 1 * this.borderScaleFactor;\n      if (!this.group) {\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      }\n      if (this.flipX) {\n        options.angle -= 180;\n      }\n      ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n      if (styleOverride.forActiveSelection || this.group) {\n        drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\n      }\n      else {\n        drawBorders && this.drawBorders(ctx, styleOverride);\n      }\n      drawControls && this.drawControls(ctx, styleOverride);\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _setShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      var shadow = this.shadow, canvas = this.canvas, scaling,\n          multX = (canvas && canvas.viewportTransform[0]) || 1,\n          multY = (canvas && canvas.viewportTransform[3]) || 1;\n      if (shadow.nonScaling) {\n        scaling = { scaleX: 1, scaleY: 1 };\n      }\n      else {\n        scaling = this.getObjectScaling();\n      }\n      if (canvas && canvas._isRetinaScaling()) {\n        multX *= fabric.devicePixelRatio;\n        multY *= fabric.devicePixelRatio;\n      }\n      ctx.shadowColor = shadow.color;\n      ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *\n        (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\n      ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\n      ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _removeShadow: function(ctx) {\n      if (!this.shadow) {\n        return;\n      }\n\n      ctx.shadowColor = '';\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} filler fabric.Pattern or fabric.Gradient\n     * @return {Object} offset.offsetX offset for text rendering\n     * @return {Object} offset.offsetY offset for text rendering\n     */\n    _applyPatternGradientTransform: function(ctx, filler) {\n      if (!filler || !filler.toLive) {\n        return { offsetX: 0, offsetY: 0 };\n      }\n      var t = filler.gradientTransform || filler.patternTransform;\n      var offsetX = -this.width / 2 + filler.offsetX || 0,\n          offsetY = -this.height / 2 + filler.offsetY || 0;\n\n      if (filler.gradientUnits === 'percentage') {\n        ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n      }\n      else {\n        ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n      }\n      if (t) {\n        ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n      }\n      return { offsetX: offsetX, offsetY: offsetY };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderPaintInOrder: function(ctx) {\n      if (this.paintFirst === 'stroke') {\n        this._renderStroke(ctx);\n        this._renderFill(ctx);\n      }\n      else {\n        this._renderFill(ctx);\n        this._renderStroke(ctx);\n      }\n    },\n\n    /**\n     * @private\n     * function that actually render something on the context.\n     * empty here to allow Obects to work on tests to benchmark fabric functionalites\n     * not related to rendering\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(/* ctx */) {\n\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderFill: function(ctx) {\n      if (!this.fill) {\n        return;\n      }\n\n      ctx.save();\n      this._setFillStyles(ctx, this);\n      if (this.fillRule === 'evenodd') {\n        ctx.fill('evenodd');\n      }\n      else {\n        ctx.fill();\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderStroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n      if (this.strokeUniform && this.group) {\n        var scaling = this.getObjectScaling();\n        ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);\n      }\n      else if (this.strokeUniform) {\n        ctx.scale(1 / this.scaleX, 1 / this.scaleY);\n      }\n      this._setLineDash(ctx, this.strokeDashArray);\n      this._setStrokeStyles(ctx, this);\n      ctx.stroke();\n      ctx.restore();\n    },\n\n    /**\n     * This function try to patch the missing gradientTransform on canvas gradients.\n     * transforming a context to transform the gradient, is going to transform the stroke too.\n     * we want to transform the gradient but not the stroke operation, so we create\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size\n     * is limited.\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Gradient} filler a fabric gradient instance\n     */\n    _applyPatternForTransformedGradient: function(ctx, filler) {\n      var dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\n          pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(),\n          width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;\n      pCanvas.width = width;\n      pCanvas.height = height;\n      pCtx = pCanvas.getContext('2d');\n      pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);\n      pCtx.lineTo(0, height); pCtx.closePath();\n      pCtx.translate(width / 2, height / 2);\n      pCtx.scale(\n        dims.zoomX / this.scaleX / retinaScaling,\n        dims.zoomY / this.scaleY / retinaScaling\n      );\n      this._applyPatternGradientTransform(pCtx, filler);\n      pCtx.fillStyle = filler.toLive(ctx);\n      pCtx.fill();\n      ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);\n      ctx.scale(\n        retinaScaling * this.scaleX / dims.zoomX,\n        retinaScaling * this.scaleY / dims.zoomY\n      );\n      ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat');\n    },\n\n    /**\n     * This function is an helper for svg import. it returns the center of the object in the svg\n     * untransformed coordinates\n     * @private\n     * @return {Object} center point from element coordinates\n     */\n    _findCenterFromElement: function() {\n      return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\n    },\n\n    /**\n     * This function is an helper for svg import. it decompose the transformMatrix\n     * and assign properties to object.\n     * untransformed coordinates\n     * @private\n     * @chainable\n     */\n    _assignTransformMatrixProps: function() {\n      if (this.transformMatrix) {\n        var options = fabric.util.qrDecompose(this.transformMatrix);\n        this.flipX = false;\n        this.flipY = false;\n        this.set('scaleX', options.scaleX);\n        this.set('scaleY', options.scaleY);\n        this.angle = options.angle;\n        this.skewX = options.skewX;\n        this.skewY = 0;\n      }\n    },\n\n    /**\n     * This function is an helper for svg import. it removes the transform matrix\n     * and set to object properties that fabricjs can handle\n     * @private\n     * @param {Object} preserveAspectRatioOptions\n     * @return {thisArg}\n     */\n    _removeTransformMatrix: function(preserveAspectRatioOptions) {\n      var center = this._findCenterFromElement();\n      if (this.transformMatrix) {\n        this._assignTransformMatrixProps();\n        center = fabric.util.transformPoint(center, this.transformMatrix);\n      }\n      this.transformMatrix = null;\n      if (preserveAspectRatioOptions) {\n        this.scaleX *= preserveAspectRatioOptions.scaleX;\n        this.scaleY *= preserveAspectRatioOptions.scaleY;\n        this.cropX = preserveAspectRatioOptions.cropX;\n        this.cropY = preserveAspectRatioOptions.cropY;\n        center.x += preserveAspectRatioOptions.offsetLeft;\n        center.y += preserveAspectRatioOptions.offsetTop;\n        this.width = preserveAspectRatioOptions.width;\n        this.height = preserveAspectRatioOptions.height;\n      }\n      this.setPositionByOrigin(center, 'center', 'center');\n    },\n\n    /**\n     * Clones an instance, using a callback method will work for every object.\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     */\n    clone: function(callback, propertiesToInclude) {\n      var objectForm = this.toObject(propertiesToInclude);\n      if (this.constructor.fromObject) {\n        this.constructor.fromObject(objectForm, callback);\n      }\n      else {\n        fabric.Object._fromObject('Object', objectForm, callback);\n      }\n    },\n\n    /**\n     * Creates an instance of fabric.Image out of an object\n     * makes use of toCanvasElement.\n     * Once this method was based on toDataUrl and loadImage, so it also had a quality\n     * and format option. toCanvasElement is faster and produce no loss of quality.\n     * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n     * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n     * This method is sync now, but still support the callback because we did not want to break.\n     * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.\n     * @param {Function} callback callback, invoked with an instance as a first argument\n     * @param {Object} [options] for clone as image, passed to toDataURL\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {fabric.Object} thisArg\n     */\n    cloneAsImage: function(callback, options) {\n      var canvasEl = this.toCanvasElement(options);\n      if (callback) {\n        callback(new fabric.Image(canvasEl));\n      }\n      return this;\n    },\n\n    /**\n     * Converts an object into a HTMLCanvas element\n     * @param {Object} options Options object\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object\n     */\n    toCanvasElement: function(options) {\n      options || (options = { });\n\n      var utils = fabric.util, origParams = utils.saveObjectTransform(this),\n          originalGroup = this.group,\n          originalShadow = this.shadow, abs = Math.abs,\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\n      delete this.group;\n      if (options.withoutTransform) {\n        utils.resetObjectTransform(this);\n      }\n      if (options.withoutShadow) {\n        this.shadow = null;\n      }\n\n      var el = fabric.util.createCanvasElement(),\n          // skip canvas zoom and calculate with setCoords now.\n          boundingRect = this.getBoundingRect(true, true),\n          shadow = this.shadow, scaling,\n          shadowOffset = { x: 0, y: 0 }, shadowBlur,\n          width, height;\n\n      if (shadow) {\n        shadowBlur = shadow.blur;\n        if (shadow.nonScaling) {\n          scaling = { scaleX: 1, scaleY: 1 };\n        }\n        else {\n          scaling = this.getObjectScaling();\n        }\n        // consider non scaling shadow.\n        shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * (abs(scaling.scaleX));\n        shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * (abs(scaling.scaleY));\n      }\n      width = boundingRect.width + shadowOffset.x;\n      height = boundingRect.height + shadowOffset.y;\n      // if the current width/height is not an integer\n      // we need to make it so.\n      el.width = Math.ceil(width);\n      el.height = Math.ceil(height);\n      var canvas = new fabric.StaticCanvas(el, {\n        enableRetinaScaling: false,\n        renderOnAddRemove: false,\n        skipOffscreen: false,\n      });\n      if (options.format === 'jpeg') {\n        canvas.backgroundColor = '#fff';\n      }\n      this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\n\n      var originalCanvas = this.canvas;\n      canvas.add(this);\n      var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n      this.shadow = originalShadow;\n      this.set('canvas', originalCanvas);\n      if (originalGroup) {\n        this.group = originalGroup;\n      }\n      this.set(origParams).setCoords();\n      // canvas.dispose will call image.dispose that will nullify the elements\n      // since this canvas is a simple element for the process, we remove references\n      // to objects in this way in order to avoid object trashing.\n      canvas._objects = [];\n      canvas.dispose();\n      canvas = null;\n\n      return canvasEl;\n    },\n\n    /**\n     * Converts an object into a data-url-like string\n     * @param {Object} options Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */\n    toDataURL: function(options) {\n      options || (options = { });\n      return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);\n    },\n\n    /**\n     * Returns true if specified type is identical to the type of an instance\n     * @param {String} type Type to check against\n     * @return {Boolean}\n     */\n    isType: function(type) {\n      return arguments.length > 1 ? Array.from(arguments).includes(this.type) : this.type === type;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance (is 1 unless subclassed)\n     */\n    complexity: function() {\n      return 1;\n    },\n\n    /**\n     * Returns a JSON representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} JSON\n     */\n    toJSON: function(propertiesToInclude) {\n      // delegate, not alias\n      return this.toObject(propertiesToInclude);\n    },\n\n    /**\n     * Sets \"angle\" of an instance with centered rotation\n     * @param {Number} angle Angle value (in degrees)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    rotate: function(angle) {\n      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\n\n      if (shouldCenterOrigin) {\n        this._setOriginToCenter();\n      }\n\n      this.set('angle', angle);\n\n      if (shouldCenterOrigin) {\n        this._resetOrigin();\n      }\n\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerH: function () {\n      this.canvas && this.canvas.centerObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object horizontally on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenterH: function () {\n      this.canvas && this.canvas.viewportCenterObjectH(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    centerV: function () {\n      this.canvas && this.canvas.centerObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenterV: function () {\n      this.canvas && this.canvas.viewportCenterObjectV(this);\n      return this;\n    },\n\n    /**\n     * Centers object vertically and horizontally on canvas to which is was added last\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    center: function () {\n      this.canvas && this.canvas.centerObject(this);\n      return this;\n    },\n\n    /**\n     * Centers object on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    viewportCenter: function () {\n      this.canvas && this.canvas.viewportCenterObject(this);\n      return this;\n    },\n\n    /**\n     * Returns coordinates of a pointer relative to an object\n     * @param {Event} e Event to operate upon\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n     * @return {Object} Coordinates of a pointer (x, y)\n     */\n    getLocalPointer: function(e, pointer) {\n      pointer = pointer || this.canvas.getPointer(e);\n      var pClicked = new fabric.Point(pointer.x, pointer.y),\n          objectLeftTop = this._getLeftTopCoords();\n      if (this.angle) {\n        pClicked = fabric.util.rotatePoint(\n          pClicked, objectLeftTop, degreesToRadians(-this.angle));\n      }\n      return {\n        x: pClicked.x - objectLeftTop.x,\n        y: pClicked.y - objectLeftTop.y\n      };\n    },\n\n    /**\n     * Sets canvas globalCompositeOperation for specific object\n     * custom composition operation for the particular object can be specified using globalCompositeOperation property\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n     */\n    _setupCompositeOperation: function (ctx) {\n      if (this.globalCompositeOperation) {\n        ctx.globalCompositeOperation = this.globalCompositeOperation;\n      }\n    },\n\n    /**\n     * cancel instance's running animations\n     * override if necessary to dispose artifacts such as `clipPath`\n     */\n    dispose: function () {\n      if (fabric.runningAnimations) {\n        fabric.runningAnimations.cancelByTarget(this);\n      }\n    }\n  });\n\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\n\n  extend(fabric.Object.prototype, fabric.Observable);\n\n  /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type Number\n   */\n  fabric.Object.NUM_FRACTION_DIGITS = 2;\n\n  /**\n   * Defines which properties should be enlivened from the object passed to {@link fabric.Object._fromObject}\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type string[]\n   */\n  fabric.Object.ENLIVEN_PROPS = ['clipPath'];\n\n  fabric.Object._fromObject = function(className, object, callback, extraParam) {\n    var klass = fabric[className];\n    object = clone(object, true);\n    fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\n      if (typeof patterns[0] !== 'undefined') {\n        object.fill = patterns[0];\n      }\n      if (typeof patterns[1] !== 'undefined') {\n        object.stroke = patterns[1];\n      }\n      fabric.util.enlivenObjectEnlivables(object, object, function () {\n        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\n        callback && callback(instance);\n      });\n    });\n  };\n\n  /**\n   * Unique id used internally when creating SVG elements\n   * @static\n   * @memberOf fabric.Object\n   * @type Number\n   */\n  fabric.Object.__uid = 0;\n})(typeof exports !== 'undefined' ? exports : this);\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians,\n      originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n      },\n      originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n      };\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n      var x = point.x,\n          y = point.y,\n          offsetX, offsetY, dim;\n\n      if (typeof fromOriginX === 'string') {\n        fromOriginX = originXOffset[fromOriginX];\n      }\n      else {\n        fromOriginX -= 0.5;\n      }\n\n      if (typeof toOriginX === 'string') {\n        toOriginX = originXOffset[toOriginX];\n      }\n      else {\n        toOriginX -= 0.5;\n      }\n\n      offsetX = toOriginX - fromOriginX;\n\n      if (typeof fromOriginY === 'string') {\n        fromOriginY = originYOffset[fromOriginY];\n      }\n      else {\n        fromOriginY -= 0.5;\n      }\n\n      if (typeof toOriginY === 'string') {\n        toOriginY = originYOffset[toOriginY];\n      }\n      else {\n        toOriginY -= 0.5;\n      }\n\n      offsetY = toOriginY - fromOriginY;\n\n      if (offsetX || offsetY) {\n        dim = this._getTransformedDimensions();\n        x = point.x + offsetX * dim.x;\n        y = point.y + offsetY * dim.y;\n      }\n\n      return new fabric.Point(x, y);\n    },\n\n    /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToCenterPoint: function(point, originX, originY) {\n      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n     * @param {fabric.Point} center The point which corresponds to center of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    translateToOriginPoint: function(center, originX, originY) {\n      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      if (this.angle) {\n        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n      }\n      return p;\n    },\n\n    /**\n     * Returns the real center coordinates of the object\n     * @return {fabric.Point}\n     */\n    getCenterPoint: function() {\n      var leftTop = new fabric.Point(this.left, this.top);\n      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n    },\n\n    /**\n     * Returns the coordinates of the object based on center coordinates\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @return {fabric.Point}\n     */\n    // getOriginPoint: function(center) {\n    //   return this.translateToOriginPoint(center, this.originX, this.originY);\n    // },\n\n    /**\n     * Returns the coordinates of the object as if it has a different origin\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    getPointByOrigin: function(originX, originY) {\n      var center = this.getCenterPoint();\n      return this.translateToOriginPoint(center, originX, originY);\n    },\n\n    /**\n     * Returns the point in local coordinates\n     * @param {fabric.Point} point The point relative to the global coordinate system\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */\n    toLocalPoint: function(point, originX, originY) {\n      var center = this.getCenterPoint(),\n          p, p2;\n\n      if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\n        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\n      }\n      else {\n        p = new fabric.Point(this.left, this.top);\n      }\n\n      p2 = new fabric.Point(point.x, point.y);\n      if (this.angle) {\n        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n      }\n      return p2.subtractEquals(p);\n    },\n\n    /**\n     * Returns the point in global coordinates\n     * @param {fabric.Point} The point relative to the local coordinate system\n     * @return {fabric.Point}\n     */\n    // toGlobalPoint: function(point) {\n    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n    // },\n\n    /**\n     * Sets the position of the object taking into consideration the object's origin\n     * @param {fabric.Point} pos The new position of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {void}\n     */\n    setPositionByOrigin: function(pos, originX, originY) {\n      var center = this.translateToCenterPoint(pos, originX, originY),\n          position = this.translateToOriginPoint(center, this.originX, this.originY);\n      this.set('left', position.x);\n      this.set('top', position.y);\n    },\n\n    /**\n     * @param {String} to One of 'left', 'center', 'right'\n     */\n    adjustPosition: function(to) {\n      var angle = degreesToRadians(this.angle),\n          hypotFull = this.getScaledWidth(),\n          xFull = fabric.util.cos(angle) * hypotFull,\n          yFull = fabric.util.sin(angle) * hypotFull,\n          offsetFrom, offsetTo;\n\n      //TODO: this function does not consider mixed situation like top, center.\n      if (typeof this.originX === 'string') {\n        offsetFrom = originXOffset[this.originX];\n      }\n      else {\n        offsetFrom = this.originX - 0.5;\n      }\n      if (typeof to === 'string') {\n        offsetTo = originXOffset[to];\n      }\n      else {\n        offsetTo = to - 0.5;\n      }\n      this.left += xFull * (offsetTo - offsetFrom);\n      this.top += yFull * (offsetTo - offsetFrom);\n      this.setCoords();\n      this.originX = to;\n    },\n\n    /**\n     * Sets the origin/position of the object to it's center point\n     * @private\n     * @return {void}\n     */\n    _setOriginToCenter: function() {\n      this._originalOriginX = this.originX;\n      this._originalOriginY = this.originY;\n\n      var center = this.getCenterPoint();\n\n      this.originX = 'center';\n      this.originY = 'center';\n\n      this.left = center.x;\n      this.top = center.y;\n    },\n\n    /**\n     * Resets the origin/position of the object to it's original origin\n     * @private\n     * @return {void}\n     */\n    _resetOrigin: function() {\n      var originPoint = this.translateToOriginPoint(\n        this.getCenterPoint(),\n        this._originalOriginX,\n        this._originalOriginY);\n\n      this.originX = this._originalOriginX;\n      this.originY = this._originalOriginY;\n\n      this.left = originPoint.x;\n      this.top = originPoint.y;\n\n      this._originalOriginX = null;\n      this._originalOriginY = null;\n    },\n\n    /**\n     * @private\n     */\n    _getLeftTopCoords: function() {\n      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\n    },\n  });\n\n})();\n(function() {\n\n  function arrayFromCoords(coords) {\n    return [\n      new fabric.Point(coords.tl.x, coords.tl.y),\n      new fabric.Point(coords.tr.x, coords.tr.y),\n      new fabric.Point(coords.br.x, coords.br.y),\n      new fabric.Point(coords.bl.x, coords.bl.y)\n    ];\n  }\n\n  var util = fabric.util,\n      degreesToRadians = util.degreesToRadians,\n      multiplyMatrices = util.multiplyTransformMatrices,\n      transformPoint = util.transformPoint;\n\n  util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Describe object's corner position in canvas element coordinates.\n     * properties are depending on control keys and padding the main controls.\n     * each property is an object with x, y and corner.\n     * The `corner` property contains in a similar manner the 4 points of the\n     * interactive area of the corner.\n     * The coordinates depends from the controls positionHandler and are used\n     * to draw and locate controls\n     * @memberOf fabric.Object.prototype\n     */\n    oCoords: null,\n\n    /**\n     * Describe object's corner position in canvas object absolute coordinates\n     * properties are tl,tr,bl,br and describe the four main corner.\n     * each property is an object with x, y, instance of Fabric.Point.\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\n     * skewX, skewY, angle, strokeWidth, top, left.\n     * Those coordinates are useful to understand where an object is. They get updated\n     * with oCoords but they do not need to be updated when zoom or panning change.\n     * The coordinates get updated with @method setCoords.\n     * You can calculate them without updating with @method calcACoords();\n     * @memberOf fabric.Object.prototype\n     */\n    aCoords: null,\n\n    /**\n     * Describe object's corner position in canvas element coordinates.\n     * includes padding. Used of object detection.\n     * set and refreshed with setCoords.\n     * @memberOf fabric.Object.prototype\n     */\n    lineCoords: null,\n\n    /**\n     * storage for object transform matrix\n     */\n    ownMatrixCache: null,\n\n    /**\n     * storage for object full transform matrix\n     */\n    matrixCache: null,\n\n    /**\n     * custom controls interface\n     * controls are added by default_controls.js\n     */\n    controls: { },\n\n    /**\n     * return correct set of coordinates for intersection\n     * this will return either aCoords or lineCoords.\n     * @param {Boolean} absolute will return aCoords if true or lineCoords\n     * @return {Object} {tl, tr, br, bl} points\n     */\n    _getCoords: function(absolute, calculate) {\n      if (calculate) {\n        return (absolute ? this.calcACoords() : this.calcLineCoords());\n      }\n      if (!this.aCoords || !this.lineCoords) {\n        this.setCoords(true);\n      }\n      return (absolute ? this.aCoords : this.lineCoords);\n    },\n\n    /**\n     * return correct set of coordinates for intersection\n     * this will return either aCoords or lineCoords.\n     * The coords are returned in an array.\n     * @return {Array} [tl, tr, br, bl] of points\n     */\n    getCoords: function(absolute, calculate) {\n      return arrayFromCoords(this._getCoords(absolute, calculate));\n    },\n\n    /**\n     * Checks if object intersects with an area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with an area formed by 2 points\n     */\n    intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\n      var coords = this.getCoords(absolute, calculate),\n          intersection = fabric.Intersection.intersectPolygonRectangle(\n            coords,\n            pointTL,\n            pointBR\n          );\n      return intersection.status === 'Intersection';\n    },\n\n    /**\n     * Checks if object intersects with another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with another object\n     */\n    intersectsWithObject: function(other, absolute, calculate) {\n      var intersection = fabric.Intersection.intersectPolygonPolygon(\n        this.getCoords(absolute, calculate),\n        other.getCoords(absolute, calculate)\n      );\n\n      return intersection.status === 'Intersection'\n        || other.isContainedWithinObject(this, absolute, calculate)\n        || this.isContainedWithinObject(other, absolute, calculate);\n    },\n\n    /**\n     * Checks if object is fully contained within area of another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area of another object\n     */\n    isContainedWithinObject: function(other, absolute, calculate) {\n      var points = this.getCoords(absolute, calculate),\n          otherCoords = absolute ? other.aCoords : other.lineCoords,\n          i = 0, lines = other._getImageLines(otherCoords);\n      for (; i < 4; i++) {\n        if (!other.containsPoint(points[i], lines)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Checks if object is fully contained within area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\n     */\n    isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\n      var boundingRect = this.getBoundingRect(absolute, calculate);\n\n      return (\n        boundingRect.left >= pointTL.x &&\n        boundingRect.left + boundingRect.width <= pointBR.x &&\n        boundingRect.top >= pointTL.y &&\n        boundingRect.top + boundingRect.height <= pointBR.y\n      );\n    },\n\n    /**\n     * Checks if point is inside the object\n     * @param {fabric.Point} point Point to check against\n     * @param {Object} [lines] object returned from @method _getImageLines\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if point is inside the object\n     */\n    containsPoint: function(point, lines, absolute, calculate) {\n      var coords = this._getCoords(absolute, calculate),\n          lines = lines || this._getImageLines(coords),\n          xPoints = this._findCrossPoints(point, lines);\n      // if xPoints is odd then point is inside the object\n      return (xPoints !== 0 && xPoints % 2 === 1);\n    },\n\n    /**\n     * Checks if object is contained within the canvas with current viewportTransform\n     * the check is done stopping at first point that appears on screen\n     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\n     * @return {Boolean} true if object is fully or partially contained within canvas\n     */\n    isOnScreen: function(calculate) {\n      if (!this.canvas) {\n        return false;\n      }\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n      var points = this.getCoords(true, calculate);\n      // if some point is on screen, the object is on screen.\n      if (points.some(function(point) {\n        return point.x <= pointBR.x && point.x >= pointTL.x &&\n        point.y <= pointBR.y && point.y >= pointTL.y;\n      })) {\n        return true;\n      }\n      // no points on screen, check intersection with absolute coordinates\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n        return true;\n      }\n      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n    },\n\n    /**\n     * Checks if the object contains the midpoint between canvas extremities\n     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\n     * @private\n     * @param {Fabric.Point} pointTL Top Left point\n     * @param {Fabric.Point} pointBR Top Right point\n     * @param {Boolean} calculate use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if the object contains the point\n     */\n    _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\n      // worst case scenario the object is so big that contains the screen\n      var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\n      if (this.containsPoint(centerPoint, null, true, calculate)) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Checks if object is partially contained within the canvas with current viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is partially contained within canvas\n     */\n    isPartiallyOnScreen: function(calculate) {\n      if (!this.canvas) {\n        return false;\n      }\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n        return true;\n      }\n      var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {\n        return (point.x >= pointBR.x || point.x <= pointTL.x) &&\n        (point.y >= pointBR.y || point.y <= pointTL.y);\n      });\n      return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n    },\n\n    /**\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\n     * @private\n     * @param {Object} oCoords Coordinates of the object corners\n     */\n    _getImageLines: function(oCoords) {\n\n      var lines = {\n        topline: {\n          o: oCoords.tl,\n          d: oCoords.tr\n        },\n        rightline: {\n          o: oCoords.tr,\n          d: oCoords.br\n        },\n        bottomline: {\n          o: oCoords.br,\n          d: oCoords.bl\n        },\n        leftline: {\n          o: oCoords.bl,\n          d: oCoords.tl\n        }\n      };\n\n      // // debugging\n      // if (this.canvas.contextTop) {\n      //   this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n      //   this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n      //\n      //   this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n      //   this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n      //\n      //   this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n      //   this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n      //\n      //   this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n      //   this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n      // }\n\n      return lines;\n    },\n\n    /**\n     * Helper method to determine how many cross points are between the 4 object edges\n     * and the horizontal line determined by a point on canvas\n     * @private\n     * @param {fabric.Point} point Point to check\n     * @param {Object} lines Coordinates of the object being evaluated\n     */\n    // remove yi, not used but left code here just in case.\n    _findCrossPoints: function(point, lines) {\n      var b1, b2, a1, a2, xi, // yi,\n          xcount = 0,\n          iLine;\n\n      for (var lineKey in lines) {\n        iLine = lines[lineKey];\n        // optimisation 1: line below point. no cross\n        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\n          continue;\n        }\n        // optimisation 2: line above point. no cross\n        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\n          continue;\n        }\n        // optimisation 3: vertical line case\n        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\n          xi = iLine.o.x;\n          // yi = point.y;\n        }\n        // calculate the intersection point\n        else {\n          b1 = 0;\n          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n          a1 = point.y - b1 * point.x;\n          a2 = iLine.o.y - b2 * iLine.o.x;\n\n          xi = -(a1 - a2) / (b1 - b2);\n          // yi = a1 + b1 * xi;\n        }\n        // dont count xi < point.x cases\n        if (xi >= point.x) {\n          xcount += 1;\n        }\n        // optimisation 4: specific for square images\n        if (xcount === 2) {\n          break;\n        }\n      }\n      return xcount;\n    },\n\n    /**\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n     * the box is intended as aligned to axis of canvas.\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\n     * @return {Object} Object with left, top, width, height properties\n     */\n    getBoundingRect: function(absolute, calculate) {\n      var coords = this.getCoords(absolute, calculate);\n      return util.makeBoundingBoxFromPoints(coords);\n    },\n\n    /**\n     * Returns width of an object's bounding box counting transformations\n     * before 2.0 it was named getWidth();\n     * @return {Number} width value\n     */\n    getScaledWidth: function() {\n      return this._getTransformedDimensions().x;\n    },\n\n    /**\n     * Returns height of an object bounding box counting transformations\n     * before 2.0 it was named getHeight();\n     * @return {Number} height value\n     */\n    getScaledHeight: function() {\n      return this._getTransformedDimensions().y;\n    },\n\n    /**\n     * Makes sure the scale is valid and modifies it if necessary\n     * @private\n     * @param {Number} value\n     * @return {Number}\n     */\n    _constrainScale: function(value) {\n      if (Math.abs(value) < this.minScaleLimit) {\n        if (value < 0) {\n          return -this.minScaleLimit;\n        }\n        else {\n          return this.minScaleLimit;\n        }\n      }\n      else if (value === 0) {\n        return 0.0001;\n      }\n      return value;\n    },\n\n    /**\n     * Scales an object (equally by x and y)\n     * @param {Number} value Scale factor\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scale: function(value) {\n      this._set('scaleX', value);\n      this._set('scaleY', value);\n      return this.setCoords();\n    },\n\n    /**\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New width value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToWidth: function(value, absolute) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\n      return this.scale(value / this.width / boundingRectFactor);\n    },\n\n    /**\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New height value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    scaleToHeight: function(value, absolute) {\n      // adjust to bounding rect factor so that rotated shapes would fit as well\n      var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\n      return this.scale(value / this.height / boundingRectFactor);\n    },\n\n    calcLineCoords: function() {\n      var vpt = this.getViewportTransform(),\n          padding = this.padding, angle = degreesToRadians(this.angle),\n          cos = util.cos(angle), sin = util.sin(angle),\n          cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\n          cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();\n\n      var lineCoords = {\n        tl: transformPoint(aCoords.tl, vpt),\n        tr: transformPoint(aCoords.tr, vpt),\n        bl: transformPoint(aCoords.bl, vpt),\n        br: transformPoint(aCoords.br, vpt),\n      };\n\n      if (padding) {\n        lineCoords.tl.x -= cosPMinusSinP;\n        lineCoords.tl.y -= cosPSinP;\n        lineCoords.tr.x += cosPSinP;\n        lineCoords.tr.y -= cosPMinusSinP;\n        lineCoords.bl.x -= cosPSinP;\n        lineCoords.bl.y += cosPMinusSinP;\n        lineCoords.br.x += cosPMinusSinP;\n        lineCoords.br.y += cosPSinP;\n      }\n\n      return lineCoords;\n    },\n\n    calcOCoords: function() {\n      var rotateMatrix = this._calcRotateMatrix(),\n          translateMatrix = this._calcTranslateMatrix(),\n          vpt = this.getViewportTransform(),\n          startMatrix = multiplyMatrices(vpt, translateMatrix),\n          finalMatrix = multiplyMatrices(startMatrix, rotateMatrix),\n          finalMatrix = multiplyMatrices(finalMatrix, [1 / vpt[0], 0, 0, 1 / vpt[3], 0, 0]),\n          dim = this._calculateCurrentDimensions(),\n          coords = {};\n      this.forEachControl(function(control, key, fabricObject) {\n        coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);\n      });\n\n      // debug code\n      // var canvas = this.canvas;\n      // setTimeout(function() {\n      //   canvas.contextTop.clearRect(0, 0, 700, 700);\n      //   canvas.contextTop.fillStyle = 'green';\n      //   Object.keys(coords).forEach(function(key) {\n      //     var control = coords[key];\n      //     canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n      //   });\n      // }, 50);\n      return coords;\n    },\n\n    calcACoords: function() {\n      var rotateMatrix = this._calcRotateMatrix(),\n          translateMatrix = this._calcTranslateMatrix(),\n          finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\n          dim = this._getTransformedDimensions(),\n          w = dim.x / 2, h = dim.y / 2;\n      return {\n        // corners\n        tl: transformPoint({ x: -w, y: -h }, finalMatrix),\n        tr: transformPoint({ x: w, y: -h }, finalMatrix),\n        bl: transformPoint({ x: -w, y: h }, finalMatrix),\n        br: transformPoint({ x: w, y: h }, finalMatrix)\n      };\n    },\n\n    /**\n     * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n     * oCoords are used to find the corners\n     * aCoords are used to quickly find an object on the canvas\n     * lineCoords are used to quickly find object during pointer events.\n     * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n     *\n     * @param {Boolean} [skipCorners] skip calculation of oCoords.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setCoords: function(skipCorners) {\n      this.aCoords = this.calcACoords();\n      // in case we are in a group, for how the inner group target check works,\n      // lineCoords are exactly aCoords. Since the vpt gets absorbed by the normalized pointer.\n      this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();\n      if (skipCorners) {\n        return this;\n      }\n      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n      this.oCoords = this.calcOCoords();\n      this._setCornerCoords && this._setCornerCoords();\n      return this;\n    },\n\n    /**\n     * calculate rotation matrix of an object\n     * @return {Array} rotation matrix for the object\n     */\n    _calcRotateMatrix: function() {\n      return util.calcRotateMatrix(this);\n    },\n\n    /**\n     * calculate the translation matrix for an object transform\n     * @return {Array} rotation matrix for the object\n     */\n    _calcTranslateMatrix: function() {\n      var center = this.getCenterPoint();\n      return [1, 0, 0, 1, center.x, center.y];\n    },\n\n    transformMatrixKey: function(skipGroup) {\n      var sep = '_', prefix = '';\n      if (!skipGroup && this.group) {\n        prefix = this.group.transformMatrixKey(skipGroup) + sep;\n      };\n      return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\n        sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\n        sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\n    },\n\n    /**\n     * calculate transform matrix that represents the current transformations from the\n     * object's properties.\n     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n     * There are some situation in which this is useful to avoid the fake rotation.\n     * @return {Array} transform matrix for the object\n     */\n    calcTransformMatrix: function(skipGroup) {\n      var matrix = this.calcOwnMatrix();\n      if (skipGroup || !this.group) {\n        return matrix;\n      }\n      var key = this.transformMatrixKey(skipGroup), cache = this.matrixCache || (this.matrixCache = {});\n      if (cache.key === key) {\n        return cache.value;\n      }\n      if (this.group) {\n        matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);\n      }\n      cache.key = key;\n      cache.value = matrix;\n      return matrix;\n    },\n\n    /**\n     * calculate transform matrix that represents the current transformations from the\n     * object's properties, this matrix does not include the group transformation\n     * @return {Array} transform matrix for the object\n     */\n    calcOwnMatrix: function() {\n      var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\n      if (cache.key === key) {\n        return cache.value;\n      }\n      var tMatrix = this._calcTranslateMatrix(),\n          options = {\n            angle: this.angle,\n            translateX: tMatrix[4],\n            translateY: tMatrix[5],\n            scaleX: this.scaleX,\n            scaleY: this.scaleY,\n            skewX: this.skewX,\n            skewY: this.skewY,\n            flipX: this.flipX,\n            flipY: this.flipY,\n          };\n      cache.key = key;\n      cache.value = util.composeMatrix(options);\n      return cache.value;\n    },\n\n    /*\n     * Calculate object dimensions from its properties\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */\n    _getNonTransformedDimensions: function() {\n      var strokeWidth = this.strokeWidth,\n          w = this.width + strokeWidth,\n          h = this.height + strokeWidth;\n      return { x: w, y: h };\n    },\n\n    /*\n     * Calculate object bounding box dimensions from its properties scale, skew.\n     * @param {Number} skewX, a value to override current skewX\n     * @param {Number} skewY, a value to override current skewY\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */\n    _getTransformedDimensions: function(skewX, skewY) {\n      if (typeof skewX === 'undefined') {\n        skewX = this.skewX;\n      }\n      if (typeof skewY === 'undefined') {\n        skewY = this.skewY;\n      }\n      var dimensions, dimX, dimY,\n          noSkew = skewX === 0 && skewY === 0;\n\n      if (this.strokeUniform) {\n        dimX = this.width;\n        dimY = this.height;\n      }\n      else {\n        dimensions = this._getNonTransformedDimensions();\n        dimX = dimensions.x;\n        dimY = dimensions.y;\n      }\n      if (noSkew) {\n        return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);\n      }\n      var bbox = util.sizeAfterTransform(dimX, dimY, {\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        skewX: skewX,\n        skewY: skewY,\n      });\n      return this._finalizeDimensions(bbox.x, bbox.y);\n    },\n\n    /*\n     * Calculate object bounding box dimensions from its properties scale, skew.\n     * @param Number width width of the bbox\n     * @param Number height height of the bbox\n     * @private\n     * @return {Object} .x finalized width dimension\n     * @return {Object} .y finalized height dimension\n     */\n    _finalizeDimensions: function(width, height) {\n      return this.strokeUniform ?\n        { x: width + this.strokeWidth, y: height + this.strokeWidth }\n        :\n        { x: width, y: height };\n    },\n\n    /*\n     * Calculate object dimensions for controls box, including padding and canvas zoom.\n     * and active selection\n     * private\n     */\n    _calculateCurrentDimensions: function()  {\n      var vpt = this.getViewportTransform(),\n          dim = this._getTransformedDimensions(),\n          p = transformPoint(dim, vpt, true);\n      return p.scalarAdd(2 * this.padding);\n    },\n  });\n})();\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n  /**\n   * Moves an object to the bottom of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendToBack: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n    }\n    else if (this.canvas) {\n      this.canvas.sendToBack(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to the top of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringToFront: function() {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n    }\n    else if (this.canvas) {\n      this.canvas.bringToFront(this);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object down in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  sendBackwards: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n    }\n    else if (this.canvas) {\n      this.canvas.sendBackwards(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object up in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  bringForward: function(intersecting) {\n    if (this.group) {\n      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n    }\n    else if (this.canvas) {\n      this.canvas.bringForward(this, intersecting);\n    }\n    return this;\n  },\n\n  /**\n   * Moves an object to specified level in stack of drawn objects\n   * @param {Number} index New position of object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */\n  moveTo: function(index) {\n    if (this.group && this.group.type !== 'activeSelection') {\n      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n    }\n    else if (this.canvas) {\n      this.canvas.moveTo(this, index);\n    }\n    return this;\n  }\n});\n\n(function() {\n\n  var extend = fabric.util.object.extend,\n      originalSet = 'stateProperties';\n\n  /*\n    Depends on `stateProperties`\n  */\n  function saveProps(origin, destination, props) {\n    var tmpObj = { }, deep = true;\n    props.forEach(function(prop) {\n      tmpObj[prop] = origin[prop];\n    });\n\n    extend(origin[destination], tmpObj, deep);\n  }\n\n  function _isEqual(origValue, currentValue, firstPass) {\n    if (origValue === currentValue) {\n      // if the objects are identical, return\n      return true;\n    }\n    else if (Array.isArray(origValue)) {\n      if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\n        return false;\n      }\n      for (var i = 0, len = origValue.length; i < len; i++) {\n        if (!_isEqual(origValue[i], currentValue[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    else if (origValue && typeof origValue === 'object') {\n      var keys = Object.keys(origValue), key;\n      if (!currentValue ||\n          typeof currentValue !== 'object' ||\n          (!firstPass && keys.length !== Object.keys(currentValue).length)\n      ) {\n        return false;\n      }\n      for (var i = 0, len = keys.length; i < len; i++) {\n        key = keys[i];\n        // since clipPath is in the statefull cache list and the clipPath objects\n        // would be iterated as an object, this would lead to possible infinite recursion\n        // we do not want to compare those.\n        if (key === 'canvas' || key === 'group') {\n          continue;\n        }\n        if (!_isEqual(origValue[key], currentValue[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n\n    /**\n     * Returns true if object state (one of its state properties) was changed\n     * @param {String} [propertySet] optional name for the set of property we want to save\n     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n     */\n    hasStateChanged: function(propertySet) {\n      propertySet = propertySet || originalSet;\n      var dashedPropertySet = '_' + propertySet;\n      if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\n        return true;\n      }\n      return !_isEqual(this[dashedPropertySet], this, true);\n    },\n\n    /**\n     * Saves state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */\n    saveState: function(options) {\n      var propertySet = options && options.propertySet || originalSet,\n          destination = '_' + propertySet;\n      if (!this[destination]) {\n        return this.setupState(options);\n      }\n      saveProps(this, destination, this[propertySet]);\n      if (options && options.stateProperties) {\n        saveProps(this, destination, options.stateProperties);\n      }\n      return this;\n    },\n\n    /**\n     * Setups state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */\n    setupState: function(options) {\n      options = options || { };\n      var propertySet = options.propertySet || originalSet;\n      options.propertySet = propertySet;\n      this['_' + propertySet] = { };\n      this.saveState(options);\n      return this;\n    }\n  });\n})();\n(function() {\n\n  var degreesToRadians = fabric.util.degreesToRadians;\n\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\n     * Determines which corner has been clicked\n     * @private\n     * @param {Object} pointer The pointer indicating the mouse position\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n     */\n    _findTargetCorner: function(pointer, forTouch) {\n      // objects in group, anykind, are not self modificable,\n      // must not return an hovered corner.\n      if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\n        return false;\n      }\n\n      var ex = pointer.x,\n          ey = pointer.y,\n          xPoints,\n          lines, keys = Object.keys(this.oCoords),\n          j = keys.length - 1, i;\n      this.__corner = 0;\n\n      // cycle in reverse order so we pick first the one on top\n      for (; j >= 0; j--) {\n        i = keys[j];\n        if (!this.isControlVisible(i)) {\n          continue;\n        }\n\n        lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);\n        // // debugging\n        //\n        // this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n        // this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n        //\n        // this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n        // this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n        //\n        // this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n        // this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n        //\n        // this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n        // this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n\n        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\n        if (xPoints !== 0 && xPoints % 2 === 1) {\n          this.__corner = i;\n          return i;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Calls a function for each control. The function gets called,\n     * with the control, the object that is calling the iterator and the control's key\n     * @param {Function} fn function to iterate over the controls over\n     */\n    forEachControl: function(fn) {\n      for (var i in this.controls) {\n        fn(this.controls[i], i, this);\n      };\n    },\n\n    /**\n     * Sets the coordinates of the draggable boxes in the corners of\n     * the image used to scale/rotate it.\n     * note: if we would switch to ROUND corner area, all of this would disappear.\n     * everything would resolve to a single point and a pythagorean theorem for the distance\n     * @private\n     */\n    _setCornerCoords: function() {\n      var coords = this.oCoords;\n\n      for (var control in coords) {\n        var controlObject = this.controls[control];\n        coords[control].corner = controlObject.calcCornerCoords(\n          this.angle, this.cornerSize, coords[control].x, coords[control].y, false);\n        coords[control].touchCorner = controlObject.calcCornerCoords(\n          this.angle, this.touchCornerSize, coords[control].x, coords[control].y, true);\n      }\n    },\n\n    /**\n     * Draws a colored layer behind the object, inside its selection borders.\n     * Requires public options: padding, selectionBackgroundColor\n     * this function is called when the context is transformed\n     * has checks to be skipped when the object is on a staticCanvas\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawSelectionBackground: function(ctx) {\n      if (!this.selectionBackgroundColor ||\n        (this.canvas && !this.canvas.interactive) ||\n        (this.canvas && this.canvas._activeObject !== this)\n      ) {\n        return this;\n      }\n      ctx.save();\n      var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\n          vpt = this.canvas.viewportTransform;\n      ctx.translate(center.x, center.y);\n      ctx.scale(1 / vpt[0], 1 / vpt[3]);\n      ctx.rotate(degreesToRadians(this.angle));\n      ctx.fillStyle = this.selectionBackgroundColor;\n      ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws borders of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBorders: function(ctx, styleOverride) {\n      styleOverride = styleOverride || {};\n      var wh = this._calculateCurrentDimensions(),\n          strokeWidth = this.borderScaleFactor,\n          width = wh.x + strokeWidth,\n          height = wh.y + strokeWidth,\n          hasControls = typeof styleOverride.hasControls !== 'undefined' ?\n            styleOverride.hasControls : this.hasControls,\n          shouldStroke = false;\n\n      ctx.save();\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\n\n      ctx.strokeRect(\n        -width / 2,\n        -height / 2,\n        width,\n        height\n      );\n\n      if (hasControls) {\n        ctx.beginPath();\n        this.forEachControl(function(control, key, fabricObject) {\n          // in this moment, the ctx is centered on the object.\n          // width and height of the above function are the size of the bbox.\n          if (control.withConnection && control.getVisibility(fabricObject, key)) {\n            // reset movement for each control\n            shouldStroke = true;\n            ctx.moveTo(control.x * width, control.y * height);\n            ctx.lineTo(\n              control.x * width + control.offsetX,\n              control.y * height + control.offsetY\n            );\n          }\n        });\n        if (shouldStroke) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws borders of an object's bounding box when it is inside a group.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {object} options object representing current object parameters\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawBordersInGroup: function(ctx, options, styleOverride) {\n      styleOverride = styleOverride || {};\n      var bbox = fabric.util.sizeAfterTransform(this.width, this.height, options),\n          strokeWidth = this.strokeWidth,\n          strokeUniform = this.strokeUniform,\n          borderScaleFactor = this.borderScaleFactor,\n          width =\n            bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor,\n          height =\n            bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;\n      ctx.save();\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n      ctx.strokeRect(\n        -width / 2,\n        -height / 2,\n        width,\n        height\n      );\n\n      ctx.restore();\n      return this;\n    },\n\n    /**\n     * Draws corners of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: cornerSize, padding\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    drawControls: function(ctx, styleOverride) {\n      styleOverride = styleOverride || {};\n      ctx.save();\n      var retinaScaling = this.canvas.getRetinaScaling(), matrix, p;\n      ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n      ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\n      if (!this.transparentCorners) {\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\n      }\n      this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);\n      this.setCoords();\n      if (this.group) {\n        // fabricJS does not really support drawing controls inside groups,\n        // this piece of code here helps having at least the control in places.\n        // If an application needs to show some objects as selected because of some UI state\n        // can still call Object._renderControls() on any object they desire, independently of groups.\n        // using no padding, circular controls and hiding the rotating cursor is higly suggested,\n        matrix = this.group.calcTransformMatrix();\n      }\n      this.forEachControl(function(control, key, fabricObject) {\n        p = fabricObject.oCoords[key];\n        if (control.getVisibility(fabricObject, key)) {\n          if (matrix) {\n            p = fabric.util.transformPoint(p, matrix);\n          }\n          control.render(ctx, p.x, p.y, styleOverride, fabricObject);\n        }\n      });\n      ctx.restore();\n\n      return this;\n    },\n\n    /**\n     * Returns true if the specified control is visible, false otherwise.\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @returns {Boolean} true if the specified control is visible, false otherwise\n     */\n    isControlVisible: function(controlKey) {\n      return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);\n    },\n\n    /**\n     * Sets the visibility of the specified control.\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlVisible: function(controlKey, visible) {\n      if (!this._controlsVisibility) {\n        this._controlsVisibility = {};\n      }\n      this._controlsVisibility[controlKey] = visible;\n      return this;\n    },\n\n    /**\n     * Sets the visibility state of object controls.\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    setControlsVisibility: function(options) {\n      options || (options = { });\n\n      for (var p in options) {\n        this.setControlVisible(p, options[p]);\n      }\n      return this;\n    },\n\n\n    /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to deselect this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */\n    onDeselect: function() {\n      // implemented by sub-classes, as needed.\n    },\n\n\n    /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to select this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */\n    onSelect: function() {\n      // implemented by sub-classes, as needed.\n    }\n  });\n})();\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n\n  /**\n   * Animation duration (in ms) for fx* methods\n   * @type Number\n   * @default\n   */\n  FX_DURATION: 500,\n\n  /**\n   * Centers object horizontally with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.AnimationContext} context\n   */\n  fxCenterObjectH: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    return fabric.util.animate({\n      target: this,\n      startValue: object.left,\n      endValue: this.getCenterPoint().x,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('left', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n  },\n\n  /**\n   * Centers object vertically with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.AnimationContext} context\n   */\n  fxCenterObjectV: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    return fabric.util.animate({\n      target: this,\n      startValue: object.top,\n      endValue: this.getCenterPoint().y,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('top', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function() {\n        object.setCoords();\n        onComplete();\n      }\n    });\n  },\n\n  /**\n   * Same as `fabric.Canvas#remove` but animated\n   * @param {fabric.Object} object Object to remove\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.AnimationContext} context\n   */\n  fxRemove: function (object, callbacks) {\n    callbacks = callbacks || { };\n\n    var empty = function() { },\n        onComplete = callbacks.onComplete || empty,\n        onChange = callbacks.onChange || empty,\n        _this = this;\n\n    return fabric.util.animate({\n      target: this,\n      startValue: object.opacity,\n      endValue: 0,\n      duration: this.FX_DURATION,\n      onChange: function(value) {\n        object.set('opacity', value);\n        _this.requestRenderAll();\n        onChange();\n      },\n      onComplete: function () {\n        _this.remove(object);\n        onComplete();\n      }\n    });\n  }\n});\n\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n  /**\n   * Animates object's properties\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n   * @return {fabric.Object} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {fabric.AnimationContext | fabric.AnimationContext[]} animation context (or an array if passed multiple properties)\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   *\n   * As string — one property\n   *\n   * object.animate('left', ...);\n   * object.animate('left', { duration: ... });\n   *\n   */\n  animate: function () {\n    if (arguments[0] && typeof arguments[0] === 'object') {\n      var propsToAnimate = [], prop, skipCallbacks, out = [];\n      for (prop in arguments[0]) {\n        propsToAnimate.push(prop);\n      }\n      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\n        prop = propsToAnimate[i];\n        skipCallbacks = i !== len - 1;\n        out.push(this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks));\n      }\n      return out;\n    }\n    else {\n      return this._animate.apply(this, arguments);\n    }\n  },\n\n  /**\n   * @private\n   * @param {String} property Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n   */\n  _animate: function(property, to, options, skipCallbacks) {\n    var _this = this, propPair;\n\n    to = to.toString();\n\n    if (!options) {\n      options = { };\n    }\n    else {\n      options = fabric.util.object.clone(options);\n    }\n\n    if (~property.indexOf('.')) {\n      propPair = property.split('.');\n    }\n\n    var propIsColor =\n      _this.colorProperties.indexOf(property) > -1 ||\n      (propPair && _this.colorProperties.indexOf(propPair[1]) > -1);\n\n    var currentValue = propPair\n      ? this.get(propPair[0])[propPair[1]]\n      : this.get(property);\n\n    if (!('from' in options)) {\n      options.from = currentValue;\n    }\n\n    if (!propIsColor) {\n      if (~to.indexOf('=')) {\n        to = currentValue + parseFloat(to.replace('=', ''));\n      }\n      else {\n        to = parseFloat(to);\n      }\n    }\n\n    var _options = {\n      target: this,\n      startValue: options.from,\n      endValue: to,\n      byValue: options.by,\n      easing: options.easing,\n      duration: options.duration,\n      abort: options.abort && function(value, valueProgress, timeProgress) {\n        return options.abort.call(_this, value, valueProgress, timeProgress);\n      },\n      onChange: function (value, valueProgress, timeProgress) {\n        if (propPair) {\n          _this[propPair[0]][propPair[1]] = value;\n        }\n        else {\n          _this.set(property, value);\n        }\n        if (skipCallbacks) {\n          return;\n        }\n        options.onChange && options.onChange(value, valueProgress, timeProgress);\n      },\n      onComplete: function (value, valueProgress, timeProgress) {\n        if (skipCallbacks) {\n          return;\n        }\n\n        _this.setCoords();\n        options.onComplete && options.onComplete(value, valueProgress, timeProgress);\n      }\n    };\n\n    if (propIsColor) {\n      return fabric.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);\n    }\n    else {\n      return fabric.util.animate(_options);\n    }\n  }\n});\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend;\n\n  if (fabric.Rect) {\n    fabric.warn('fabric.Rect is already defined');\n    return;\n  }\n\n  /**\n   * Rectangle class\n   * @class fabric.Rect\n   * @extends fabric.Object\n   * @return {fabric.Rect} thisArg\n   * @see {@link fabric.Rect#initialize} for constructor definition\n   */\n  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n\n    /**\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'rect',\n\n    /**\n     * Horizontal border radius\n     * @type Number\n     * @default\n     */\n    rx:   0,\n\n    /**\n     * Vertical border radius\n     * @type Number\n     * @default\n     */\n    ry:   0,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      this._initRxRy();\n    },\n\n    /**\n     * Initializes rx/ry attributes\n     * @private\n     */\n    _initRxRy: function() {\n      if (this.rx && !this.ry) {\n        this.ry = this.rx;\n      }\n      else if (this.ry && !this.rx) {\n        this.rx = this.ry;\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n\n      // 1x1 case (used in spray brush) optimization was removed because\n      // with caching and higher zoom level this makes more damage than help\n\n      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\n          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\n          w = this.width,\n          h = this.height,\n          x = -this.width / 2,\n          y = -this.height / 2,\n          isRounded = rx !== 0 || ry !== 0,\n          /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\n          k = 1 - 0.5522847498;\n      ctx.beginPath();\n\n      ctx.moveTo(x + rx, y);\n\n      ctx.lineTo(x + w - rx, y);\n      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n\n      ctx.lineTo(x + w, y + h - ry);\n      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n\n      ctx.lineTo(x + rx, y + h);\n      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n\n      ctx.lineTo(x, y + ry);\n      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n\n      ctx.closePath();\n\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\n    },\n\n    \n  });\n\n  \n\n  /**\n   * Returns {@link fabric.Rect} instance from an object representation\n   * @static\n   * @memberOf fabric.Rect\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\n   */\n  fabric.Rect.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Rect', object, callback);\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      toFixed = fabric.util.toFixed,\n      projectStrokeOnPoints = fabric.util.projectStrokeOnPoints;\n\n  if (fabric.Polyline) {\n    fabric.warn('fabric.Polyline is already defined');\n    return;\n  }\n\n  /**\n   * Polyline class\n   * @class fabric.Polyline\n   * @extends fabric.Object\n   * @see {@link fabric.Polyline#initialize} for constructor definition\n   */\n  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'polyline',\n\n    /**\n     * Points array\n     * @type Array\n     * @default\n     */\n    points: null,\n\n    /**\n     * WARNING: Feature in progress\n     * Calculate the exact bounding box taking in account strokeWidth on acute angles\n     * this will be turned to true by default on fabric 6.0\n     * maybe will be left in as an optimization since calculations may be slow\n     * @deprecated\n     * @type Boolean\n     * @default false\n     */\n    exactBoundingBox: false,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\n\n    /**\n     * Constructor\n     * @param {Array} points Array of points (where each point is an object with x and y)\n     * @param {Object} [options] Options object\n     * @return {fabric.Polyline} thisArg\n     * @example\n     * var poly = new fabric.Polyline([\n     *     { x: 10, y: 10 },\n     *     { x: 50, y: 30 },\n     *     { x: 40, y: 70 },\n     *     { x: 60, y: 50 },\n     *     { x: 100, y: 150 },\n     *     { x: 40, y: 100 }\n     *   ], {\n     *   stroke: 'red',\n     *   left: 100,\n     *   top: 100\n     * });\n     */\n    initialize: function(points, options) {\n      options = options || {};\n      this.points = points || [];\n      this.callSuper('initialize', options);\n      this._setPositionDimensions(options);\n    },\n\n    /**\n     * @private\n     */\n    _projectStrokeOnPoints: function () {\n      return projectStrokeOnPoints(this.points, this, true);\n    },\n\n    _setPositionDimensions: function(options) {\n      var calcDim = this._calcDimensions(options), correctLeftTop,\n          correctSize = this.exactBoundingBox ? this.strokeWidth : 0;\n      this.width = calcDim.width - correctSize;\n      this.height = calcDim.height - correctSize;\n      if (!options.fromSVG) {\n        correctLeftTop = this.translateToGivenOrigin(\n          {\n            // this looks bad, but is one way to keep it optional for now.\n            x: calcDim.left - this.strokeWidth / 2 + correctSize / 2,\n            y: calcDim.top - this.strokeWidth / 2 + correctSize / 2\n          },\n          'left',\n          'top',\n          this.originX,\n          this.originY\n        );\n      }\n      if (typeof options.left === 'undefined') {\n        this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;\n      }\n      if (typeof options.top === 'undefined') {\n        this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;\n      }\n      this.pathOffset = {\n        x: calcDim.left + this.width / 2 + correctSize / 2,\n        y: calcDim.top + this.height / 2 + correctSize / 2\n      };\n    },\n\n    /**\n     * Calculate the polygon min and max point from points array,\n     * returning an object with left, top, width, height to measure the\n     * polygon size\n     * @return {Object} object.left X coordinate of the polygon leftmost point\n     * @return {Object} object.top Y coordinate of the polygon topmost point\n     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\n     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\n     * @private\n     */\n    _calcDimensions: function() {\n\n      var points = this.exactBoundingBox ? this._projectStrokeOnPoints() : this.points,\n          minX = min(points, 'x') || 0,\n          minY = min(points, 'y') || 0,\n          maxX = max(points, 'x') || 0,\n          maxY = max(points, 'y') || 0,\n          width = (maxX - minX),\n          height = (maxY - minY);\n\n      return {\n        left: minX,\n        top: minY,\n        width: width,\n        height: height,\n      };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        points: this.points.concat()\n      });\n    },\n\n    \n\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    commonRender: function(ctx) {\n      var point, len = this.points.length,\n          x = this.pathOffset.x,\n          y = this.pathOffset.y;\n\n      if (!len || isNaN(this.points[len - 1].y)) {\n        // do not draw if no points or odd points\n        // NaN comes from parseFloat of a empty string in parser\n        return false;\n      }\n      ctx.beginPath();\n      ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n      for (var i = 0; i < len; i++) {\n        point = this.points[i];\n        ctx.lineTo(point.x - x, point.y - y);\n      }\n      return true;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      if (!this.commonRender(ctx)) {\n        return;\n      }\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.get('points').length;\n    }\n  });\n\n  \n\n  /**\n   * Returns fabric.Polyline instance from an object representation\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Polyline.fromObject = function(object, callback) {\n    return fabric.Object._fromObject('Polyline', object, callback, 'points');\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max,\n      extend = fabric.util.object.extend,\n      clone = fabric.util.object.clone,\n      toFixed = fabric.util.toFixed;\n\n  if (fabric.Path) {\n    fabric.warn('fabric.Path is already defined');\n    return;\n  }\n\n  /**\n   * Path class\n   * @class fabric.Path\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\n   * @see {@link fabric.Path#initialize} for constructor definition\n   */\n  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'path',\n\n    /**\n     * Array of path points\n     * @type Array\n     * @default\n     */\n    path: null,\n\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\n\n    stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\n\n    /**\n     * Constructor\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n     * @param {Object} [options] Options object\n     * @return {fabric.Path} thisArg\n     */\n    initialize: function (path, options) {\n      options = clone(options || {});\n      delete options.path;\n      this.callSuper('initialize', options);\n      this._setPath(path || [], options);\n    },\n\n    /**\n    * @private\n    * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n    * @param {Object} [options] Options object\n    */\n    _setPath: function (path, options) {\n      this.path = fabric.util.makePathSimpler(\n        Array.isArray(path) ? path : fabric.util.parsePath(path)\n      );\n\n      fabric.Polyline.prototype._setPositionDimensions.call(this, options || {});\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _renderPathCommands: function(ctx) {\n      var current, // current instruction\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          controlX = 0, // current control point x\n          controlY = 0, // current control point y\n          l = -this.pathOffset.x,\n          t = -this.pathOffset.y;\n\n      ctx.beginPath();\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            ctx.lineTo(x + l, y + t);\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            ctx.moveTo(x + l, y + t);\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            x = current[5];\n            y = current[6];\n            controlX = current[3];\n            controlY = current[4];\n            ctx.bezierCurveTo(\n              current[1] + l,\n              current[2] + t,\n              controlX + l,\n              controlY + t,\n              x + l,\n              y + t\n            );\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            ctx.quadraticCurveTo(\n              current[1] + l,\n              current[2] + t,\n              current[3] + l,\n              current[4] + t\n            );\n            x = current[3];\n            y = current[4];\n            controlX = current[1];\n            controlY = current[2];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            ctx.closePath();\n            break;\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */\n    _render: function(ctx) {\n      this._renderPathCommands(ctx);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} string representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Path (' + this.complexity() +\n        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      return extend(this.callSuper('toObject', propertiesToInclude), {\n        path: this.path.map(function(item) { return item.slice(); }),\n      });\n    },\n\n    /**\n     * Returns dataless object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\n      if (o.sourcePath) {\n        delete o.path;\n      }\n      return o;\n    },\n\n    \n\n    /**\n     * Returns number representation of an instance complexity\n     * @return {Number} complexity of this instance\n     */\n    complexity: function() {\n      return this.path.length;\n    },\n\n    /**\n     * @private\n     */\n    _calcDimensions: function() {\n\n      var aX = [],\n          aY = [],\n          current, // current instruction\n          subpathStartX = 0,\n          subpathStartY = 0,\n          x = 0, // current x\n          y = 0, // current y\n          bounds;\n\n      for (var i = 0, len = this.path.length; i < len; ++i) {\n\n        current = this.path[i];\n\n        switch (current[0]) { // first letter\n\n          case 'L': // lineto, absolute\n            x = current[1];\n            y = current[2];\n            bounds = [];\n            break;\n\n          case 'M': // moveTo, absolute\n            x = current[1];\n            y = current[2];\n            subpathStartX = x;\n            subpathStartY = y;\n            bounds = [];\n            break;\n\n          case 'C': // bezierCurveTo, absolute\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              current[1],\n              current[2],\n              current[3],\n              current[4],\n              current[5],\n              current[6]\n            );\n            x = current[5];\n            y = current[6];\n            break;\n\n          case 'Q': // quadraticCurveTo, absolute\n            bounds = fabric.util.getBoundsOfCurve(x, y,\n              current[1],\n              current[2],\n              current[1],\n              current[2],\n              current[3],\n              current[4]\n            );\n            x = current[3];\n            y = current[4];\n            break;\n\n          case 'z':\n          case 'Z':\n            x = subpathStartX;\n            y = subpathStartY;\n            break;\n        }\n        bounds.forEach(function (point) {\n          aX.push(point.x);\n          aY.push(point.y);\n        });\n        aX.push(x);\n        aY.push(y);\n      }\n\n      var minX = min(aX) || 0,\n          minY = min(aY) || 0,\n          maxX = max(aX) || 0,\n          maxY = max(aY) || 0,\n          deltaX = maxX - minX,\n          deltaY = maxY - minY;\n\n      return {\n        left: minX,\n        top: minY,\n        width: deltaX,\n        height: deltaY\n      };\n    }\n  });\n\n  /**\n   * Creates an instance of fabric.Path from an object\n   * @static\n   * @memberOf fabric.Path\n   * @param {Object} object\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */\n  fabric.Path.fromObject = function(object, callback) {\n    if (typeof object.sourcePath === 'string') {\n      var pathUrl = object.sourcePath;\n      fabric.loadSVGFromURL(pathUrl, function (elements) {\n        var path = elements[0];\n        path.setOptions(object);\n        callback && callback(path);\n      });\n    }\n    else {\n      fabric.Object._fromObject('Path', object, callback, 'path');\n    }\n  };\n\n  \n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      min = fabric.util.array.min,\n      max = fabric.util.array.max;\n\n  if (fabric.Group) {\n    return;\n  }\n\n  /**\n   * Group class\n   * @class fabric.Group\n   * @extends fabric.Object\n   * @mixes fabric.Collection\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.Group#initialize} for constructor definition\n   */\n  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'group',\n\n    /**\n     * Width of stroke\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets\n     * @type Boolean\n     * @default\n     */\n    subTargetCheck: false,\n\n    /**\n     * Groups are container, do not render anything on theyr own, ence no cache properties\n     * @type Array\n     * @default\n     */\n    cacheProperties: [],\n\n    /**\n     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\n     * available setting this boolean to true.\n     * @type Boolean\n     * @since 2.0.0\n     * @default\n     */\n    useSetOnGroup: false,\n\n    /**\n     * Constructor\n     * @param {Object} objects Group objects\n     * @param {Object} [options] Options object\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options, isAlreadyGrouped) {\n      options = options || {};\n      this._objects = [];\n      // if objects enclosed in a group have been grouped already,\n      // we cannot change properties of objects.\n      // Thus we need to set options to group without objects,\n      isAlreadyGrouped && this.callSuper('initialize', options);\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      if (!isAlreadyGrouped) {\n        var center = options && options.centerPoint;\n        // we want to set origins before calculating the bounding box.\n        // so that the topleft can be set with that in mind.\n        // if specific top and left are passed, are overwritten later\n        // with the callSuper('initialize', options)\n        if (options.originX !== undefined) {\n          this.originX = options.originX;\n        }\n        if (options.originY !== undefined) {\n          this.originY = options.originY;\n        }\n        // if coming from svg i do not want to calc bounds.\n        // i assume width and height are passed along options\n        center || this._calcBounds();\n        this._updateObjectsCoords(center);\n        delete options.centerPoint;\n        this.callSuper('initialize', options);\n      }\n      else {\n        this._updateObjectsACoords();\n      }\n\n      this.setCoords();\n    },\n\n    /**\n     * @private\n     */\n    _updateObjectsACoords: function() {\n      var skipControls = true;\n      for (var i = this._objects.length; i--; ){\n        this._objects[i].setCoords(skipControls);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */\n    _updateObjectsCoords: function(center) {\n      var center = center || this.getCenterPoint();\n      for (var i = this._objects.length; i--; ){\n        this._updateObjectCoords(this._objects[i], center);\n      }\n    },\n\n    /**\n     * @private\n     * @param {Object} object\n     * @param {fabric.Point} center, current center of group.\n     */\n    _updateObjectCoords: function(object, center) {\n      var objectLeft = object.left,\n          objectTop = object.top,\n          skipControls = true;\n\n      object.set({\n        left: objectLeft - center.x,\n        top: objectTop - center.y\n      });\n      object.group = this;\n      object.setCoords(skipControls);\n    },\n\n    /**\n     * Returns string represenation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.Group: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Adds an object to a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    addWithUpdate: function(object) {\n      var nested = !!this.group;\n      this._restoreObjectsState();\n      fabric.util.resetObjectTransform(this);\n      if (object) {\n        if (nested) {\n          // if this group is inside another group, we need to pre transform the object\n          fabric.util.removeTransformFromObject(object, this.group.calcTransformMatrix());\n        }\n        this._objects.push(object);\n        object.group = this;\n        object._set('canvas', this.canvas);\n      }\n      this._calcBounds();\n      this._updateObjectsCoords();\n      this.dirty = true;\n      if (nested) {\n        this.group.addWithUpdate();\n      }\n      else {\n        this.setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Removes an object from a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    removeWithUpdate: function(object) {\n      this._restoreObjectsState();\n      fabric.util.resetObjectTransform(this);\n\n      this.remove(object);\n      this._calcBounds();\n      this._updateObjectsCoords();\n      this.setCoords();\n      this.dirty = true;\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _onObjectAdded: function(object) {\n      this.dirty = true;\n      object.group = this;\n      object._set('canvas', this.canvas);\n    },\n\n    /**\n     * @private\n     */\n    _onObjectRemoved: function(object) {\n      this.dirty = true;\n      delete object.group;\n    },\n\n    /**\n     * @private\n     */\n    _set: function(key, value) {\n      var i = this._objects.length;\n      if (this.useSetOnGroup) {\n        while (i--) {\n          this._objects[i].setOnGroup(key, value);\n        }\n      }\n      if (key === 'canvas') {\n        while (i--) {\n          this._objects[i]._set(key, value);\n        }\n      }\n      fabric.Object.prototype._set.call(this, key, value);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var _includeDefaultValues = this.includeDefaultValues;\n      var objsToObject = this._objects\n        .filter(function (obj) {\n          return !obj.excludeFromExport;\n        })\n        .map(function (obj) {\n          var originalDefaults = obj.includeDefaultValues;\n          obj.includeDefaultValues = _includeDefaultValues;\n          var _obj = obj.toObject(propertiesToInclude);\n          obj.includeDefaultValues = originalDefaults;\n          return _obj;\n        });\n      var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\n      obj.objects = objsToObject;\n      return obj;\n    },\n\n    /**\n     * Returns object representation of an instance, in dataless mode.\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */\n    toDatalessObject: function(propertiesToInclude) {\n      var objsToObject, sourcePath = this.sourcePath;\n      if (sourcePath) {\n        objsToObject = sourcePath;\n      }\n      else {\n        var _includeDefaultValues = this.includeDefaultValues;\n        objsToObject = this._objects.map(function(obj) {\n          var originalDefaults = obj.includeDefaultValues;\n          obj.includeDefaultValues = _includeDefaultValues;\n          var _obj = obj.toDatalessObject(propertiesToInclude);\n          obj.includeDefaultValues = originalDefaults;\n          return _obj;\n        });\n      }\n      var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\n      obj.objects = objsToObject;\n      return obj;\n    },\n\n    /**\n     * Renders instance on a given context\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\n     */\n    render: function(ctx) {\n      this._transformDone = true;\n      this.callSuper('render', ctx);\n      this._transformDone = false;\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group is already cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      var ownCache = fabric.Object.prototype.shouldCache.call(this);\n      if (ownCache) {\n        for (var i = 0, len = this._objects.length; i < len; i++) {\n          if (this._objects[i].willDrawShadow()) {\n            this.ownCaching = false;\n            return false;\n          }\n        }\n      }\n      return ownCache;\n    },\n\n    /**\n     * Check if this object or a child object will cast a shadow\n     * @return {Boolean}\n     */\n    willDrawShadow: function() {\n      if (fabric.Object.prototype.willDrawShadow.call(this)) {\n        return true;\n      }\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        if (this._objects[i].willDrawShadow()) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */\n    isOnACache: function() {\n      return this.ownCaching || (this.group && this.group.isOnACache());\n    },\n\n    /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawObject: function(ctx) {\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i].render(ctx);\n      }\n      this._drawClipPath(ctx, this.clipPath);\n    },\n\n    /**\n     * Check if cache is dirty\n     */\n    isCacheDirty: function(skipCanvas) {\n      if (this.callSuper('isCacheDirty', skipCanvas)) {\n        return true;\n      }\n      if (!this.statefullCache) {\n        return false;\n      }\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        if (this._objects[i].isCacheDirty(true)) {\n          if (this._cacheCanvas) {\n            // if this group has not a cache canvas there is nothing to clean\n            var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\n            this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Restores original state of each of group objects (original state is that which was before group was created).\n     * if the nested boolean is true, the original state will be restored just for the\n     * first group and not for all the group chain\n     * @private\n     * @param {Boolean} nested tell the function to restore object state up to the parent group and not more\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    _restoreObjectsState: function() {\n      var groupMatrix = this.calcOwnMatrix();\n      this._objects.forEach(function(object) {\n        // instead of using _this = this;\n        fabric.util.addTransformToObject(object, groupMatrix);\n        delete object.group;\n        object.setCoords();\n      });\n      return this;\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    destroy: function() {\n      // when group is destroyed objects needs to get a repaint to be eventually\n      // displayed on canvas.\n      this._objects.forEach(function(object) {\n        object.set('dirty', true);\n      });\n      return this._restoreObjectsState();\n    },\n\n    dispose: function () {\n      this.callSuper('dispose');\n      this.forEachObject(function (object) {\n        object.dispose && object.dispose();\n      });\n      this._objects = [];\n    },\n\n    /**\n     * make a group an active selection, remove the group from canvas\n     * the group has to be on canvas for this to work.\n     * @return {fabric.ActiveSelection} thisArg\n     * @chainable\n     */\n    toActiveSelection: function() {\n      if (!this.canvas) {\n        return;\n      }\n      var objects = this._objects, canvas = this.canvas;\n      this._objects = [];\n      var options = this.toObject();\n      delete options.objects;\n      var activeSelection = new fabric.ActiveSelection([]);\n      activeSelection.set(options);\n      activeSelection.type = 'activeSelection';\n      canvas.remove(this);\n      objects.forEach(function(object) {\n        object.group = activeSelection;\n        object.dirty = true;\n        canvas.add(object);\n      });\n      activeSelection.canvas = canvas;\n      activeSelection._objects = objects;\n      canvas._activeObject = activeSelection;\n      activeSelection.setCoords();\n      return activeSelection;\n    },\n\n    /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    ungroupOnCanvas: function() {\n      return this._restoreObjectsState();\n    },\n\n    /**\n     * Sets coordinates of all objects inside group\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */\n    setObjectsCoords: function() {\n      var skipControls = true;\n      this.forEachObject(function(object) {\n        object.setCoords(skipControls);\n      });\n      return this;\n    },\n\n    /**\n     * @private\n     */\n    _calcBounds: function(onlyWidthHeight) {\n      var aX = [],\n          aY = [],\n          o, prop, coords,\n          props = ['tr', 'br', 'bl', 'tl'],\n          i = 0, iLen = this._objects.length,\n          j, jLen = props.length;\n\n      for ( ; i < iLen; ++i) {\n        o = this._objects[i];\n        coords = o.calcACoords();\n        for (j = 0; j < jLen; j++) {\n          prop = props[j];\n          aX.push(coords[prop].x);\n          aY.push(coords[prop].y);\n        }\n        o.aCoords = coords;\n      }\n\n      this._getBounds(aX, aY, onlyWidthHeight);\n    },\n\n    /**\n     * @private\n     */\n    _getBounds: function(aX, aY, onlyWidthHeight) {\n      var minXY = new fabric.Point(min(aX), min(aY)),\n          maxXY = new fabric.Point(max(aX), max(aY)),\n          top = minXY.y || 0, left = minXY.x || 0,\n          width = (maxXY.x - minXY.x) || 0,\n          height = (maxXY.y - minXY.y) || 0;\n      this.width = width;\n      this.height = height;\n      if (!onlyWidthHeight) {\n        // the bounding box always finds the topleft most corner.\n        // whatever is the group origin, we set up here the left/top position.\n        this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\n      }\n    },\n\n    \n  });\n\n  /**\n   * Returns {@link fabric.Group} instance from an object representation\n   * @static\n   * @memberOf fabric.Group\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an group instance is created\n   */\n  fabric.Group.fromObject = function(object, callback) {\n    var objects = object.objects,\n        options = fabric.util.object.clone(object, true);\n    delete options.objects;\n    if (typeof objects === 'string') {\n      // it has to be an url or something went wrong.\n      fabric.loadSVGFromURL(objects, function (elements) {\n        var group = fabric.util.groupSVGElements(elements, object, objects);\n        group.set(options);\n        callback && callback(group);\n      });\n      return;\n    }\n    fabric.util.enlivenObjects(objects, function (enlivenedObjects) {\n      var options = fabric.util.object.clone(object, true);\n      delete options.objects;\n      fabric.util.enlivenObjectEnlivables(object, options, function () {\n        callback && callback(new fabric.Group(enlivenedObjects, options, true));\n      });\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { });\n\n  if (fabric.ActiveSelection) {\n    return;\n  }\n\n  /**\n   * Group class\n   * @class fabric.ActiveSelection\n   * @extends fabric.Group\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.ActiveSelection#initialize} for constructor definition\n   */\n  fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'activeSelection',\n\n    /**\n     * Constructor\n     * @param {Object} objects ActiveSelection objects\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */\n    initialize: function(objects, options) {\n      options = options || {};\n      this._objects = objects || [];\n      for (var i = this._objects.length; i--; ) {\n        this._objects[i].group = this;\n      }\n\n      if (options.originX) {\n        this.originX = options.originX;\n      }\n      if (options.originY) {\n        this.originY = options.originY;\n      }\n      this._calcBounds();\n      this._updateObjectsCoords();\n      fabric.Object.prototype.initialize.call(this, options);\n      this.setCoords();\n    },\n\n    /**\n     * Change te activeSelection to a normal group,\n     * High level function that automatically adds it to canvas as\n     * active object. no events fired.\n     * @since 2.0.0\n     * @return {fabric.Group}\n     */\n    toGroup: function() {\n      var objects = this._objects.concat();\n      this._objects = [];\n      var options = fabric.Object.prototype.toObject.call(this);\n      var newGroup = new fabric.Group([]);\n      delete options.type;\n      newGroup.set(options);\n      objects.forEach(function(object) {\n        object.canvas.remove(object);\n        object.group = newGroup;\n      });\n      newGroup._objects = objects;\n      if (!this.canvas) {\n        return newGroup;\n      }\n      var canvas = this.canvas;\n      canvas.add(newGroup);\n      canvas._activeObject = newGroup;\n      newGroup.setCoords();\n      return newGroup;\n    },\n\n    /**\n     * If returns true, deselection is cancelled.\n     * @since 2.0.0\n     * @return {Boolean} [cancel]\n     */\n    onDeselect: function() {\n      this.destroy();\n      return false;\n    },\n\n    /**\n     * Returns string representation of a group\n     * @return {String}\n     */\n    toString: function() {\n      return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      return false;\n    },\n\n    /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */\n    isOnACache: function() {\n      return false;\n    },\n\n    /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     * @param {Object} [childrenOverride] properties to override the children overrides\n     */\n    _renderControls: function(ctx, styleOverride, childrenOverride) {\n      ctx.save();\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n      this.callSuper('_renderControls', ctx, styleOverride);\n      childrenOverride = childrenOverride || { };\n      if (typeof childrenOverride.hasControls === 'undefined') {\n        childrenOverride.hasControls = false;\n      }\n      childrenOverride.forActiveSelection = true;\n      for (var i = 0, len = this._objects.length; i < len; i++) {\n        this._objects[i]._renderControls(ctx, childrenOverride);\n      }\n      ctx.restore();\n    },\n  });\n\n  /**\n   * Returns {@link fabric.ActiveSelection} instance from an object representation\n   * @static\n   * @memberOf fabric.ActiveSelection\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\n   */\n  fabric.ActiveSelection.fromObject = function(object, callback) {\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n      delete object.objects;\n      callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var extend = fabric.util.object.extend;\n\n  if (!global.fabric) {\n    global.fabric = { };\n  }\n\n  if (global.fabric.Image) {\n    fabric.warn('fabric.Image is already defined.');\n    return;\n  }\n\n  /**\n   * Image class\n   * @class fabric.Image\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n   * @see {@link fabric.Image#initialize} for constructor definition\n   */\n  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type: 'image',\n\n    /**\n     * Width of a stroke.\n     * For image quality a stroke multiple of 2 gives better results.\n     * @type Number\n     * @default\n     */\n    strokeWidth: 0,\n\n    /**\n     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.\n     * This allows for relative urls as image src.\n     * @since 2.7.0\n     * @type Boolean\n     * @default\n     */\n    srcFromAttribute: false,\n\n    /**\n     * private\n     * contains last value of scaleX to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleX: 1,\n\n    /**\n     * private\n     * contains last value of scaleY to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */\n    _lastScaleY: 1,\n\n    /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */\n    _filterScalingX: 1,\n\n    /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */\n    _filterScalingY: 1,\n\n    /**\n     * minimum scale factor under which any resizeFilter is triggered to resize the image\n     * 0 will disable the automatic resize. 1 will trigger automatically always.\n     * number bigger than 1 are not implemented yet.\n     * @type Number\n     */\n    minimumScaleTrigger: 0.5,\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n     * and refreshed at the next render\n     * @type Array\n     */\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('cropX', 'cropY'),\n\n    /**\n     * key used to retrieve the texture representing this image\n     * @since 2.0.0\n     * @type String\n     * @default\n     */\n    cacheKey: '',\n\n    /**\n     * Image crop in pixels from original image size.\n     * @since 2.0.0\n     * @type Number\n     * @default\n     */\n    cropX: 0,\n\n    /**\n     * Image crop in pixels from original image size.\n     * @since 2.0.0\n     * @type Number\n     * @default\n     */\n    cropY: 0,\n\n    /**\n     * Indicates whether this canvas will use image smoothing when painting this image.\n     * Also influence if the cacheCanvas for this image uses imageSmoothing\n     * @since 4.0.0-beta.11\n     * @type Boolean\n     * @default\n     */\n    imageSmoothing: true,\n\n    /**\n     * Constructor\n     * Image can be initialized with any canvas drawable or a string.\n     * The string should be a url and will be loaded as an image.\n     * Canvas and Image element work out of the box, while videos require extra code to work.\n     * Please check video element events for seeking.\n     * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element\n     * @param {Object} [options] Options object\n     * @param {function} [callback] callback function to call after eventual filters applied.\n     * @return {fabric.Image} thisArg\n     */\n    initialize: function(element, options) {\n      options || (options = { });\n      this.filters = [];\n      this.cacheKey = 'texture' + fabric.Object.__uid++;\n      this.callSuper('initialize', options);\n      this._initElement(element, options);\n    },\n\n    /**\n     * Returns image element which this instance if based on\n     * @return {HTMLImageElement} Image element\n     */\n    getElement: function() {\n      return this._element || {};\n    },\n\n    /**\n     * Sets image element for this instance to a specified one.\n     * If filters defined they are applied to new image.\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n     * @param {HTMLImageElement} element\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setElement: function(element, options) {\n      this.removeTexture(this.cacheKey);\n      this.removeTexture(this.cacheKey + '_filtered');\n      this._element = element;\n      this._originalElement = element;\n      this._initConfig(options);\n      if (this.filters.length !== 0) {\n        this.applyFilters();\n      }\n      // resizeFilters work on the already filtered copy.\n      // we need to apply resizeFilters AFTER normal filters.\n      // applyResizeFilters is run more often than normal filters\n      // and is triggered by user interactions rather than dev code\n      if (this.resizeFilter) {\n        this.applyResizeFilters();\n      }\n      return this;\n    },\n\n    /**\n     * Delete a single texture if in webgl mode\n     */\n    removeTexture: function(key) {\n      var backend = fabric.filterBackend;\n      if (backend && backend.evictCachesForKey) {\n        backend.evictCachesForKey(key);\n      }\n    },\n\n    /**\n     * Delete textures, reference to elements and eventually JSDOM cleanup\n     */\n    dispose: function () {\n      this.callSuper('dispose');\n      this.removeTexture(this.cacheKey);\n      this.removeTexture(this.cacheKey + '_filtered');\n      this._cacheContext = undefined;\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\n        fabric.util.cleanUpJsdomNode(this[element]);\n        this[element] = undefined;\n      }).bind(this));\n    },\n\n    /**\n     * Get the crossOrigin value (of the corresponding image element)\n     */\n    getCrossOrigin: function() {\n      return this._originalElement && (this._originalElement.crossOrigin || null);\n    },\n\n    /**\n     * Returns original size of an image\n     * @return {Object} Object with \"width\" and \"height\" properties\n     */\n    getOriginalSize: function() {\n      var element = this.getElement();\n      return {\n        width: element.naturalWidth || element.width,\n        height: element.naturalHeight || element.height\n      };\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _stroke: function(ctx) {\n      if (!this.stroke || this.strokeWidth === 0) {\n        return;\n      }\n      var w = this.width / 2, h = this.height / 2;\n      ctx.beginPath();\n      ctx.moveTo(-w, -h);\n      ctx.lineTo(w, -h);\n      ctx.lineTo(w, h);\n      ctx.lineTo(-w, h);\n      ctx.lineTo(-w, -h);\n      ctx.closePath();\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var filters = [];\n\n      this.filters.forEach(function(filterObj) {\n        if (filterObj) {\n          filters.push(filterObj.toObject());\n        }\n      });\n      var object = extend(\n        this.callSuper(\n          'toObject',\n          ['cropX', 'cropY'].concat(propertiesToInclude)\n        ), {\n          src: this.getSrc(),\n          crossOrigin: this.getCrossOrigin(),\n          filters: filters,\n        });\n      if (this.resizeFilter) {\n        object.resizeFilter = this.resizeFilter.toObject();\n      }\n      return object;\n    },\n\n    /**\n     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n     * @return {Boolean}\n     */\n    hasCrop: function() {\n      return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\n    },\n\n    \n\n    /**\n     * Returns source of an image\n     * @param {Boolean} filtered indicates if the src is needed for svg\n     * @return {String} Source of an image\n     */\n    getSrc: function(filtered) {\n      var element = filtered ? this._element : this._originalElement;\n      if (element) {\n        if (element.toDataURL) {\n          return element.toDataURL();\n        }\n\n        if (this.srcFromAttribute) {\n          return element.getAttribute('src');\n        }\n        else {\n          return element.src;\n        }\n      }\n      else {\n        return this.src || '';\n      }\n    },\n\n    /**\n     * Sets source of an image\n     * @param {String} src Source string (URL)\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n     * @param {Object} [options] Options object\n     * @param {String} [options.crossOrigin] crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */\n    setSrc: function(src, callback, options) {\n      fabric.util.loadImage(src, function(img, isError) {\n        this.setElement(img, options);\n        this._setWidthHeight();\n        callback && callback(this, isError);\n      }, this, options && options.crossOrigin);\n      return this;\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of an instance\n     */\n    toString: function() {\n      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n    },\n\n    applyResizeFilters: function() {\n      var filter = this.resizeFilter,\n          minimumScale = this.minimumScaleTrigger,\n          objectScale = this.getTotalObjectScaling(),\n          scaleX = objectScale.scaleX,\n          scaleY = objectScale.scaleY,\n          elementToFilter = this._filteredEl || this._originalElement;\n      if (this.group) {\n        this.set('dirty', true);\n      }\n      if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\n        this._element = elementToFilter;\n        this._filterScalingX = 1;\n        this._filterScalingY = 1;\n        this._lastScaleX = scaleX;\n        this._lastScaleY = scaleY;\n        return;\n      }\n      if (!fabric.filterBackend) {\n        fabric.filterBackend = fabric.initFilterBackend();\n      }\n      var canvasEl = fabric.util.createCanvasElement(),\n          cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\n          sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\n      canvasEl.width = sourceWidth;\n      canvasEl.height = sourceHeight;\n      this._element = canvasEl;\n      this._lastScaleX = filter.scaleX = scaleX;\n      this._lastScaleY = filter.scaleY = scaleY;\n      fabric.filterBackend.applyFilters(\n        [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\n      this._filterScalingX = canvasEl.width / this._originalElement.width;\n      this._filterScalingY = canvasEl.height / this._originalElement.height;\n    },\n\n    /**\n     * Applies filters assigned to this image (from \"filters\" array) or from filter param\n     * @method applyFilters\n     * @param {Array} filters to be applied\n     * @param {Boolean} forResizing specify if the filter operation is a resize operation\n     * @return {thisArg} return the fabric.Image object\n     * @chainable\n     */\n    applyFilters: function(filters) {\n\n      filters = filters || this.filters || [];\n      filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\n      this.set('dirty', true);\n\n      // needs to clear out or WEBGL will not resize correctly\n      this.removeTexture(this.cacheKey + '_filtered');\n\n      if (filters.length === 0) {\n        this._element = this._originalElement;\n        this._filteredEl = null;\n        this._filterScalingX = 1;\n        this._filterScalingY = 1;\n        return this;\n      }\n\n      var imgElement = this._originalElement,\n          sourceWidth = imgElement.naturalWidth || imgElement.width,\n          sourceHeight = imgElement.naturalHeight || imgElement.height;\n\n      if (this._element === this._originalElement) {\n        // if the element is the same we need to create a new element\n        var canvasEl = fabric.util.createCanvasElement();\n        canvasEl.width = sourceWidth;\n        canvasEl.height = sourceHeight;\n        this._element = canvasEl;\n        this._filteredEl = canvasEl;\n      }\n      else {\n        // clear the existing element to get new filter data\n        // also dereference the eventual resized _element\n        this._element = this._filteredEl;\n        this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\n        // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n        this._lastScaleX = 1;\n        this._lastScaleY = 1;\n      }\n      if (!fabric.filterBackend) {\n        fabric.filterBackend = fabric.initFilterBackend();\n      }\n      fabric.filterBackend.applyFilters(\n        filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\n      if (this._originalElement.width !== this._element.width ||\n        this._originalElement.height !== this._element.height) {\n        this._filterScalingX = this._element.width / this._originalElement.width;\n        this._filterScalingY = this._element.height / this._originalElement.height;\n      }\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\n      if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n        this.applyResizeFilters();\n      }\n      this._stroke(ctx);\n      this._renderPaintInOrder(ctx);\n    },\n\n    /**\n     * Paint the cached copy of the object on the target context.\n     * it will set the imageSmoothing for the draw operation\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    drawCacheOnCanvas: function(ctx) {\n      fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\n      fabric.Object.prototype.drawCacheOnCanvas.call(this, ctx);\n    },\n\n    /**\n     * Decide if the object should cache or not. Create its own cache level\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * This is the special image version where we would like to avoid caching where possible.\n     * Essentially images do not benefit from caching. They may require caching, and in that\n     * case we do it. Also caching an image usually ends in a loss of details.\n     * A full performance audit should be done.\n     * @return {Boolean}\n     */\n    shouldCache: function() {\n      return this.needsItsOwnCache();\n    },\n\n    _renderFill: function(ctx) {\n      var elementToDraw = this._element;\n      if (!elementToDraw) {\n        return;\n      }\n      var scaleX = this._filterScalingX, scaleY = this._filterScalingY,\n          w = this.width, h = this.height, min = Math.min, max = Math.max,\n          // crop values cannot be lesser than 0.\n          cropX = max(this.cropX, 0), cropY = max(this.cropY, 0),\n          elWidth = elementToDraw.naturalWidth || elementToDraw.width,\n          elHeight = elementToDraw.naturalHeight || elementToDraw.height,\n          sX = cropX * scaleX,\n          sY = cropY * scaleY,\n          // the width height cannot exceed element width/height, starting from the crop offset.\n          sW = min(w * scaleX, elWidth - sX),\n          sH = min(h * scaleY, elHeight - sY),\n          x = -w / 2, y = -h / 2,\n          maxDestW = min(w, elWidth / scaleX - cropX),\n          maxDestH = min(h, elHeight / scaleY - cropY);\n\n      elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n    },\n\n    /**\n     * needed to check if image needs resize\n     * @private\n     */\n    _needsResize: function() {\n      var scale = this.getTotalObjectScaling();\n      return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\n    },\n\n    /**\n     * @private\n     */\n    _resetWidthHeight: function() {\n      this.set(this.getOriginalSize());\n    },\n\n    /**\n     * The Image class's initialization method. This method is automatically\n     * called by the constructor.\n     * @private\n     * @param {HTMLImageElement|String} element The element representing the image\n     * @param {Object} [options] Options object\n     */\n    _initElement: function(element, options) {\n      this.setElement(fabric.util.getById(element), options);\n      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n    },\n\n    /**\n     * @private\n     * @param {Object} [options] Options object\n     */\n    _initConfig: function(options) {\n      options || (options = { });\n      this.setOptions(options);\n      this._setWidthHeight(options);\n    },\n\n    /**\n     * @private\n     * @param {Array} filters to be initialized\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n     */\n    _initFilters: function(filters, callback) {\n      if (filters && filters.length) {\n        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n          callback && callback(enlivenedObjects);\n        }, 'fabric.Image.filters');\n      }\n      else {\n        callback && callback();\n      }\n    },\n\n    /**\n     * @private\n     * Set the width and the height of the image object, using the element or the\n     * options.\n     * @param {Object} [options] Object with width/height properties\n     */\n    _setWidthHeight: function(options) {\n      options || (options = { });\n      var el = this.getElement();\n      this.width = options.width || el.naturalWidth || el.width || 0;\n      this.height = options.height || el.naturalHeight || el.height || 0;\n    },\n\n    /**\n     * Calculate offset for center and scale factor for the image in order to respect\n     * the preserveAspectRatio attribute\n     * @private\n     * @return {Object}\n     */\n    parsePreserveAspectRatioAttribute: function() {\n      var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\n          rWidth = this._element.width, rHeight = this._element.height,\n          scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\n          offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\n      if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\n        if (pAR.meetOrSlice === 'meet') {\n          scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\n          offset = (pWidth - rWidth * scaleX) / 2;\n          if (pAR.alignX === 'Min') {\n            offsetLeft = -offset;\n          }\n          if (pAR.alignX === 'Max') {\n            offsetLeft = offset;\n          }\n          offset = (pHeight - rHeight * scaleY) / 2;\n          if (pAR.alignY === 'Min') {\n            offsetTop = -offset;\n          }\n          if (pAR.alignY === 'Max') {\n            offsetTop = offset;\n          }\n        }\n        if (pAR.meetOrSlice === 'slice') {\n          scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\n          offset = rWidth - pWidth / scaleX;\n          if (pAR.alignX === 'Mid') {\n            cropX = offset / 2;\n          }\n          if (pAR.alignX === 'Max') {\n            cropX = offset;\n          }\n          offset = rHeight - pHeight / scaleY;\n          if (pAR.alignY === 'Mid') {\n            cropY = offset / 2;\n          }\n          if (pAR.alignY === 'Max') {\n            cropY = offset;\n          }\n          rWidth = pWidth / scaleX;\n          rHeight = pHeight / scaleY;\n        }\n      }\n      else {\n        scaleX = pWidth / rWidth;\n        scaleY = pHeight / rHeight;\n      }\n      return {\n        width: rWidth,\n        height: rHeight,\n        scaleX: scaleX,\n        scaleY: scaleY,\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        cropX: cropX,\n        cropY: cropY\n      };\n    }\n  });\n\n  /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */\n  fabric.Image.CSS_CANVAS = 'canvas-img';\n\n  /**\n   * Alias for getSrc\n   * @static\n   */\n  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n\n  /**\n   * Creates an instance of fabric.Image from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} callback Callback to invoke when an image instance is created\n   */\n  fabric.Image.fromObject = function(_object, callback) {\n    var object = fabric.util.object.clone(_object);\n    fabric.util.loadImage(object.src, function(img, isError) {\n      if (isError) {\n        callback && callback(null, true);\n        return;\n      }\n      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n        object.filters = filters || [];\n        fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\n          object.resizeFilter = resizeFilters[0];\n          fabric.util.enlivenObjectEnlivables(object, object, function () {\n            var image = new fabric.Image(img, object);\n            callback(image, false);\n          });\n        });\n      });\n    }, null, object.crossOrigin);\n  };\n\n  /**\n   * Creates an instance of fabric.Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument). Second argument is a boolean indicating if an error occurred or not.\n   * @param {Object} [imgOptions] Options object\n   */\n  fabric.Image.fromURL = function(url, callback, imgOptions) {\n    fabric.util.loadImage(url, function(img, isError) {\n      callback && callback(new fabric.Image(img, imgOptions), isError);\n    }, null, imgOptions && imgOptions.crossOrigin);\n  };\n\n  \n\n})(typeof exports !== 'undefined' ? exports : this);\n(function() {\n\n  'use strict';\n\n  /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */\n  function testPrecision(gl, precision){\n    var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Indicate whether this filtering backend is supported by the user's browser.\n   * @param {Number} tileSize check if the tileSize is supported\n   * @returns {Boolean} Whether the user's browser supports WebGL.\n   */\n  fabric.isWebglSupported = function(tileSize) {\n    if (fabric.isLikelyNode) {\n      return false;\n    }\n    tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\n    var canvas = document.createElement('canvas');\n    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    var isSupported = false;\n    // eslint-disable-next-line\n    if (gl) {\n      fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      isSupported = fabric.maxTextureSize >= tileSize;\n      var precisions = ['highp', 'mediump', 'lowp'];\n      for (var i = 0; i < 3; i++){\n        if (testPrecision(gl, precisions[i])){\n          fabric.webGlPrecision = precisions[i];\n          break;\n        };\n      }\n    }\n    this.isSupported = isSupported;\n    return isSupported;\n  };\n\n  fabric.WebglFilterBackend = WebglFilterBackend;\n\n  /**\n   * WebGL filter backend.\n   */\n  function WebglFilterBackend(options) {\n    if (options && options.tileSize) {\n      this.tileSize = options.tileSize;\n    }\n    this.setupGLContext(this.tileSize, this.tileSize);\n    this.captureGPUInfo();\n  };\n\n  WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\n\n    tileSize: 2048,\n\n    /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you probably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/\n    resources: {\n\n    },\n\n    /**\n     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n     */\n    setupGLContext: function(width, height) {\n      this.dispose();\n      this.createWebGLCanvas(width, height);\n      // eslint-disable-next-line\n      this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n      this.chooseFastestCopyGLTo2DMethod(width, height);\n    },\n\n    /**\n     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n     * putImageData is faster than drawImage for that specific operation.\n     */\n    chooseFastestCopyGLTo2DMethod: function(width, height) {\n      var canMeasurePerf = typeof window.performance !== 'undefined', canUseImageData;\n      try {\n        new ImageData(1, 1);\n        canUseImageData = true;\n      }\n      catch (e) {\n        canUseImageData = false;\n      }\n      // eslint-disable-next-line no-undef\n      var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\n      // eslint-disable-next-line no-undef\n      var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\n\n      if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\n        return;\n      }\n\n      var targetCanvas = fabric.util.createCanvasElement();\n      // eslint-disable-next-line no-undef\n      var imageBuffer = new ArrayBuffer(width * height * 4);\n      if (fabric.forceGLPutImageData) {\n        this.imageBuffer = imageBuffer;\n        this.copyGLTo2D = copyGLTo2DPutImageData;\n        return;\n      }\n      var testContext = {\n        imageBuffer: imageBuffer,\n        destinationWidth: width,\n        destinationHeight: height,\n        targetCanvas: targetCanvas\n      };\n      var startTime, drawImageTime, putImageDataTime;\n      targetCanvas.width = width;\n      targetCanvas.height = height;\n\n      startTime = window.performance.now();\n      copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\n      drawImageTime = window.performance.now() - startTime;\n\n      startTime = window.performance.now();\n      copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\n      putImageDataTime = window.performance.now() - startTime;\n\n      if (drawImageTime > putImageDataTime) {\n        this.imageBuffer = imageBuffer;\n        this.copyGLTo2D = copyGLTo2DPutImageData;\n      }\n      else {\n        this.copyGLTo2D = copyGLTo2DDrawImage;\n      }\n    },\n\n    /**\n     * Create a canvas element and associated WebGL context and attaches them as\n     * class properties to the GLFilterBackend class.\n     */\n    createWebGLCanvas: function(width, height) {\n      var canvas = fabric.util.createCanvasElement();\n      canvas.width = width;\n      canvas.height = height;\n      var glOptions = {\n            alpha: true,\n            premultipliedAlpha: false,\n            depth: false,\n            stencil: false,\n            antialias: false\n          },\n          gl = canvas.getContext('webgl', glOptions);\n      if (!gl) {\n        gl = canvas.getContext('experimental-webgl', glOptions);\n      }\n      if (!gl) {\n        return;\n      }\n      gl.clearColor(0, 0, 0, 0);\n      // this canvas can fire webglcontextlost and webglcontextrestored\n      this.canvas = canvas;\n      this.gl = gl;\n    },\n\n    /**\n     * Attempts to apply the requested filters to the source provided, drawing the filtered output\n     * to the provided target canvas.\n     *\n     * @param {Array} filters The filters to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\n     * @param {Number} width The width of the source input.\n     * @param {Number} height The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n     * omitted, caching will be skipped.\n     */\n    applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\n      var gl = this.gl;\n      var cachedTexture;\n      if (cacheKey) {\n        cachedTexture = this.getCachedTexture(cacheKey, source);\n      }\n      var pipelineState = {\n        originalWidth: source.width || source.originalWidth,\n        originalHeight: source.height || source.originalHeight,\n        sourceWidth: width,\n        sourceHeight: height,\n        destinationWidth: width,\n        destinationHeight: height,\n        context: gl,\n        sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\n        targetTexture: this.createTexture(gl, width, height),\n        originalTexture: cachedTexture ||\n          this.createTexture(gl, width, height, !cachedTexture && source),\n        passes: filters.length,\n        webgl: true,\n        aPosition: this.aPosition,\n        programCache: this.programCache,\n        pass: 0,\n        filterBackend: this,\n        targetCanvas: targetCanvas\n      };\n      var tempFbo = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n      filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\n      resizeCanvasIfNeeded(pipelineState);\n      this.copyGLTo2D(gl, pipelineState);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n      gl.deleteTexture(pipelineState.sourceTexture);\n      gl.deleteTexture(pipelineState.targetTexture);\n      gl.deleteFramebuffer(tempFbo);\n      targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\n      return pipelineState;\n    },\n\n    /**\n     * Detach event listeners, remove references, and clean up caches.\n     */\n    dispose: function() {\n      if (this.canvas) {\n        this.canvas = null;\n        this.gl = null;\n      }\n      this.clearWebGLCaches();\n    },\n\n    /**\n     * Wipe out WebGL-related caches.\n     */\n    clearWebGLCaches: function() {\n      this.programCache = {};\n      this.textureCache = {};\n    },\n\n    /**\n     * Create a WebGL texture object.\n     *\n     * Accepts specific dimensions to initialize the texture to or a source image.\n     *\n     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n     * @param {Number} width The width to initialize the texture at.\n     * @param {Number} height The height to initialize the texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\n     * @returns {WebGLTexture}\n     */\n    createTexture: function(gl, width, height, textureImageSource) {\n      var texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      if (textureImageSource) {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\n      }\n      else {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      }\n      return texture;\n    },\n\n    /**\n     * Can be optionally used to get a texture from the cache array\n     *\n     * If an existing texture is not found, a new texture is created and cached.\n     *\n     * @param {String} uniqueId A cache key to use to find an existing texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n     * texture cache entry if one does not already exist.\n     */\n    getCachedTexture: function(uniqueId, textureImageSource) {\n      if (this.textureCache[uniqueId]) {\n        return this.textureCache[uniqueId];\n      }\n      else {\n        var texture = this.createTexture(\n          this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\n        this.textureCache[uniqueId] = texture;\n        return texture;\n      }\n    },\n\n    /**\n     * Clear out cached resources related to a source image that has been\n     * filtered previously.\n     *\n     * @param {String} cacheKey The cache key provided when the source image was filtered.\n     */\n    evictCachesForKey: function(cacheKey) {\n      if (this.textureCache[cacheKey]) {\n        this.gl.deleteTexture(this.textureCache[cacheKey]);\n        delete this.textureCache[cacheKey];\n      }\n    },\n\n    copyGLTo2D: copyGLTo2DDrawImage,\n\n    /**\n     * Attempt to extract GPU information strings from a WebGL context.\n     *\n     * Useful information when debugging or blacklisting specific GPUs.\n     *\n     * @returns {Object} A GPU info object with renderer and vendor strings.\n     */\n    captureGPUInfo: function() {\n      if (this.gpuInfo) {\n        return this.gpuInfo;\n      }\n      var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };\n      if (!gl) {\n        return gpuInfo;\n      }\n      var ext = gl.getExtension('WEBGL_debug_renderer_info');\n      if (ext) {\n        var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n        var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n        if (renderer) {\n          gpuInfo.renderer = renderer.toLowerCase();\n        }\n        if (vendor) {\n          gpuInfo.vendor = vendor.toLowerCase();\n        }\n      }\n      this.gpuInfo = gpuInfo;\n      return gpuInfo;\n    },\n  };\n})();\n\nfunction resizeCanvasIfNeeded(pipelineState) {\n  var targetCanvas = pipelineState.targetCanvas,\n      width = targetCanvas.width, height = targetCanvas.height,\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight;\n\n  if (width !== dWidth || height !== dHeight) {\n    targetCanvas.width = dWidth;\n    targetCanvas.height = dHeight;\n  }\n}\n\n/**\n * Copy an input WebGL canvas on to an output 2D canvas.\n *\n * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n * desired output image appearing in the bottom-left corner of the WebGL canvas.\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */\nfunction copyGLTo2DDrawImage(gl, pipelineState) {\n  var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\n      ctx = targetCanvas.getContext('2d');\n  ctx.translate(0, targetCanvas.height); // move it down again\n  ctx.scale(1, -1); // vertical flip\n  // where is my image on the big glcanvas?\n  var sourceY = glCanvas.height - targetCanvas.height;\n  ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\n    targetCanvas.width, targetCanvas.height);\n}\n\n/**\n * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */\nfunction copyGLTo2DPutImageData(gl, pipelineState) {\n  var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\n      dWidth = pipelineState.destinationWidth,\n      dHeight = pipelineState.destinationHeight,\n      numBytes = dWidth * dHeight * 4;\n\n  // eslint-disable-next-line no-undef\n  var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n  // eslint-disable-next-line no-undef\n  var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n\n  gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n  var imgData = new ImageData(u8Clamped, dWidth, dHeight);\n  ctx.putImageData(imgData, 0, 0);\n}\n(function() {\n\n  'use strict';\n\n  var noop = function() {};\n\n  fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\n\n  /**\n   * Canvas 2D filter backend.\n   */\n  function Canvas2dFilterBackend() {};\n\n  Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\n    evictCachesForKey: noop,\n    dispose: noop,\n    clearWebGLCaches: noop,\n\n    /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you probably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/\n    resources: {\n\n    },\n\n    /**\n     * Apply a set of filters against a source image and draw the filtered output\n     * to the provided destination canvas.\n     *\n     * @param {EnhancedFilter} filters The filter to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n     * @param {Number} sourceWidth The width of the source input.\n     * @param {Number} sourceHeight The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     */\n    applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\n      var ctx = targetCanvas.getContext('2d');\n      ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n      var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n      var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n      var pipelineState = {\n        sourceWidth: sourceWidth,\n        sourceHeight: sourceHeight,\n        imageData: imageData,\n        originalEl: sourceElement,\n        originalImageData: originalImageData,\n        canvasEl: targetCanvas,\n        ctx: ctx,\n        filterBackend: this,\n      };\n      filters.forEach(function(filter) { filter.applyTo(pipelineState); });\n      if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\n        targetCanvas.width = pipelineState.imageData.width;\n        targetCanvas.height = pipelineState.imageData.height;\n      }\n      ctx.putImageData(pipelineState.imageData, 0, 0);\n      return pipelineState;\n    },\n\n  };\n})();\n/**\n * @namespace fabric.Image.filters\n * @memberOf fabric.Image\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\n * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n */\nfabric.Image = fabric.Image || { };\nfabric.Image.filters = fabric.Image.filters || { };\n\n/**\n * Root filter class from which all filter classes inherit from\n * @class fabric.Image.filters.BaseFilter\n * @memberOf fabric.Image.filters\n */\nfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n\n  /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */\n  type: 'BaseFilter',\n\n  /**\n   * Array of attributes to send with buffers. do not modify\n   * @private\n   */\n\n  vertexSource: 'attribute vec2 aPosition;\\n' +\n    'varying vec2 vTexCoord;\\n' +\n    'void main() {\\n' +\n      'vTexCoord = aPosition;\\n' +\n      'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n    '}',\n\n  fragmentSource: 'precision highp float;\\n' +\n    'varying vec2 vTexCoord;\\n' +\n    'uniform sampler2D uTexture;\\n' +\n    'void main() {\\n' +\n      'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n    '}',\n\n  /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */\n  initialize: function(options) {\n    if (options) {\n      this.setOptions(options);\n    }\n  },\n\n  /**\n   * Sets filter's properties from options\n   * @param {Object} [options] Options object\n   */\n  setOptions: function(options) {\n    for (var prop in options) {\n      this[prop] = options[prop];\n    }\n  },\n\n  /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */\n  createProgram: function(gl, fragmentSource, vertexSource) {\n    fragmentSource = fragmentSource || this.fragmentSource;\n    vertexSource = vertexSource || this.vertexSource;\n    if (fabric.webGlPrecision !== 'highp'){\n      fragmentSource = fragmentSource.replace(\n        /precision highp float/g,\n        'precision ' + fabric.webGlPrecision + ' float'\n      );\n    }\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexSource);\n    gl.compileShader(vertexShader);\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Vertex shader compile error for ' + this.type + ': ' +\n        gl.getShaderInfoLog(vertexShader)\n      );\n    }\n\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentSource);\n    gl.compileShader(fragmentShader);\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Fragment shader compile error for ' + this.type + ': ' +\n        gl.getShaderInfoLog(fragmentShader)\n      );\n    }\n\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      throw new Error(\n        // eslint-disable-next-line prefer-template\n        'Shader link error for \"${this.type}\" ' +\n        gl.getProgramInfoLog(program)\n      );\n    }\n\n    var attributeLocations = this.getAttributeLocations(gl, program);\n    var uniformLocations = this.getUniformLocations(gl, program) || { };\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\n    return {\n      program: program,\n      attributeLocations: attributeLocations,\n      uniformLocations: uniformLocations\n    };\n  },\n\n  /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */\n  getAttributeLocations: function(gl, program) {\n    return {\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\n    };\n  },\n\n  /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */\n  getUniformLocations: function (/* gl, program */) {\n    // in case i do not need any special uniform i need to return an empty object\n    return { };\n  },\n\n  /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */\n  sendAttributeData: function(gl, attributeLocations, aPositionData) {\n    var attributeLocation = attributeLocations.aPosition;\n    var buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.enableVertexAttribArray(attributeLocation);\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n  },\n\n  _setupFrameBuffer: function(options) {\n    var gl = options.context, width, height;\n    if (options.passes > 1) {\n      width = options.destinationWidth;\n      height = options.destinationHeight;\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\n        gl.deleteTexture(options.targetTexture);\n        options.targetTexture = options.filterBackend.createTexture(gl, width, height);\n      }\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\n        options.targetTexture, 0);\n    }\n    else {\n      // draw last filter on canvas and not to framebuffer.\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      gl.finish();\n    }\n  },\n\n  _swapTextures: function(options) {\n    options.passes--;\n    options.pass++;\n    var temp = options.targetTexture;\n    options.targetTexture = options.sourceTexture;\n    options.sourceTexture = temp;\n  },\n\n  /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/\n  isNeutralState: function(/* options */) {\n    var main = this.mainParameter,\n        _class = fabric.Image.filters[this.type].prototype;\n    if (main) {\n      if (Array.isArray(_class[main])) {\n        for (var i = _class[main].length; i--;) {\n          if (this[main][i] !== _class[main][i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n      else {\n        return _class[main] === this[main];\n      }\n    }\n    else {\n      return false;\n    }\n  },\n\n  /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyTo: function(options) {\n    if (options.webgl) {\n      this._setupFrameBuffer(options);\n      this.applyToWebGL(options);\n      this._swapTextures(options);\n    }\n    else {\n      this.applyTo2d(options);\n    }\n  },\n\n  /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  retrieveShader: function(options) {\n    if (!options.programCache.hasOwnProperty(this.type)) {\n      options.programCache[this.type] = this.createProgram(options.context);\n    }\n    return options.programCache[this.type];\n  },\n\n  /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */\n  applyToWebGL: function(options) {\n    var gl = options.context;\n    var shader = this.retrieveShader(options);\n    if (options.pass === 0 && options.originalTexture) {\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n    }\n    else {\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n    }\n    gl.useProgram(shader.program);\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n\n    this.sendUniformData(gl, shader.uniformLocations);\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n  },\n\n  bindAdditionalTexture: function(gl, texture, textureUnit) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // reset active texture to 0 as usual\n    gl.activeTexture(gl.TEXTURE0);\n  },\n\n  unbindAdditionalTexture: function(gl, textureUnit) {\n    gl.activeTexture(textureUnit);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.activeTexture(gl.TEXTURE0);\n  },\n\n  getMainParameter: function() {\n    return this[this.mainParameter];\n  },\n\n  setMainParameter: function(value) {\n    this[this.mainParameter] = value;\n  },\n\n  /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\n   */\n  sendUniformData: function(/* gl, uniformLocations */) {\n    // Intentionally left blank.  Override me in subclasses.\n  },\n\n  /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */\n  createHelpLayer: function(options) {\n    if (!options.helpLayer) {\n      var helpLayer = document.createElement('canvas');\n      helpLayer.width = options.sourceWidth;\n      helpLayer.height = options.sourceHeight;\n      options.helpLayer = helpLayer;\n    }\n  },\n\n  /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */\n  toObject: function() {\n    var object = { type: this.type }, mainP = this.mainParameter;\n    if (mainP) {\n      object[mainP] = this[mainP];\n    }\n    return object;\n  },\n\n  /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */\n  toJSON: function() {\n    // delegate, not alias\n    return this.toObject();\n  }\n});\n\nfabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\n  var filter = new fabric.Image.filters[object.type](object);\n  callback && callback(filter);\n  return filter;\n};\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Color Matrix filter class\n   * @class fabric.Image.filters.ColorMatrix\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\n   * @example <caption>Kodachrome filter</caption>\n   * var filter = new fabric.Image.filters.ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'ColorMatrix',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'uniform mat4 uColorMatrix;\\n' +\n      'uniform vec4 uConstants;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color *= uColorMatrix;\\n' +\n        'color += uConstants;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Colormatrix for pixels.\n     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n     * outside the -1, 1 range.\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Array} matrix array of 20 numbers.\n     * @default\n     */\n    matrix: [\n      1, 0, 0, 0, 0,\n      0, 1, 0, 0, 0,\n      0, 0, 1, 0, 0,\n      0, 0, 0, 1, 0\n    ],\n\n    mainParameter: 'matrix',\n\n    /**\n     * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n     * to save some calculation\n     * @type Boolean\n     * @default true\n     */\n    colorsOnly: true,\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      // create a new array instead mutating the prototype with push\n      this.matrix = this.matrix.slice(0);\n    },\n\n    /**\n     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          iLen = data.length,\n          m = this.matrix,\n          r, g, b, a, i, colorsOnly = this.colorsOnly;\n\n      for (i = 0; i < iLen; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n        if (colorsOnly) {\n          data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n        }\n        else {\n          a = data[i + 3];\n          data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n          data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\n        uConstants: gl.getUniformLocation(program, 'uConstants'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var m = this.matrix,\n          matrix = [\n            m[0], m[1], m[2], m[3],\n            m[5], m[6], m[7], m[8],\n            m[10], m[11], m[12], m[13],\n            m[15], m[16], m[17], m[18]\n          ],\n          constants = [m[4], m[9], m[14], m[19]];\n      gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n      gl.uniform4fv(uniformLocations.uConstants, constants);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] function to invoke after filter creation\n   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\n   */\n  fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Brightness filter class\n   * @class fabric.Image.filters.Brightness\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Brightness({\n   *   brightness: 0.05\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Brightness',\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uBrightness;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color.rgb += uBrightness;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Brightness value, from -1 to 1.\n     * translated to -255 to 255 for 2d\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Number} brightness\n     * @default\n     */\n    brightness: 0,\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'brightness',\n\n    /**\n    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n    *\n    * @param {Object} options\n    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n    */\n    applyTo2d: function(options) {\n      if (this.brightness === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, i, len = data.length,\n          brightness = Math.round(this.brightness * 255);\n      for (i = 0; i < len; i += 4) {\n        data[i] = data[i] + brightness;\n        data[i + 1] = data[i + 1] + brightness;\n        data[i + 2] = data[i + 2] + brightness;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uBrightness: gl.getUniformLocation(program, 'uBrightness'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n   */\n  fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n   * @class fabric.Image.filters.Convolute\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example <caption>Sharpen filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 0, -1,  0,\n   *            -1,  5, -1,\n   *             0, -1,  0 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Blur filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter with opaqueness</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   opaque: true,\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Convolute',\n\n    /*\n     * Opaque value (true/false)\n     */\n    opaque: false,\n\n    /*\n     * matrix for the filter, max 9x9\n     */\n    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: {\n      Convolute_3_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[9];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_3_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[9];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_5_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[25];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_5_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[25];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_7_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[49];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_7_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[49];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n      Convolute_9_1: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[81];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      Convolute_9_0: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform float uMatrix[81];\\n' +\n        'uniform float uStepW;\\n' +\n        'uniform float uStepH;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\n            '}\\n' +\n          '}\\n' +\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\n          'gl_FragColor = color;\\n' +\n          'gl_FragColor.a = alpha;\\n' +\n        '}',\n    },\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Convolute.prototype\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n     * @param {Array} [options.matrix] Filter matrix\n     */\n\n\n    /**\n    * Retrieves the cached shader.\n    * @param {Object} options\n    * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n    */\n    retrieveShader: function(options) {\n      var size = Math.sqrt(this.matrix.length);\n      var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\n      var shaderSource = this.fragmentSource[cacheKey];\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          weights = this.matrix,\n          side = Math.round(Math.sqrt(weights.length)),\n          halfSide = Math.floor(side / 2),\n          sw = imageData.width,\n          sh = imageData.height,\n          output = options.ctx.createImageData(sw, sh),\n          dst = output.data,\n          // go through the destination image pixels\n          alphaFac = this.opaque ? 1 : 0,\n          r, g, b, a, dstOff,\n          scx, scy, srcOff, wt,\n          x, y, cx, cy;\n\n      for (y = 0; y < sh; y++) {\n        for (x = 0; x < sw; x++) {\n          dstOff = (y * sw + x) * 4;\n          // calculate the weighed sum of the source image pixels that\n          // fall under the convolution matrix\n          r = 0; g = 0; b = 0; a = 0;\n\n          for (cy = 0; cy < side; cy++) {\n            for (cx = 0; cx < side; cx++) {\n              scy = y + cy - halfSide;\n              scx = x + cx - halfSide;\n\n              // eslint-disable-next-line max-depth\n              if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n                continue;\n              }\n\n              srcOff = (scy * sw + scx) * 4;\n              wt = weights[cy * side + cx];\n\n              r += data[srcOff] * wt;\n              g += data[srcOff + 1] * wt;\n              b += data[srcOff + 2] * wt;\n              // eslint-disable-next-line max-depth\n              if (!alphaFac) {\n                a += data[srcOff + 3] * wt;\n              }\n            }\n          }\n          dst[dstOff] = r;\n          dst[dstOff + 1] = g;\n          dst[dstOff + 2] = b;\n          if (!alphaFac) {\n            dst[dstOff + 3] = a;\n          }\n          else {\n            dst[dstOff + 3] = data[dstOff + 3];\n          }\n        }\n      }\n      options.imageData = output;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uMatrix: gl.getUniformLocation(program, 'uMatrix'),\n        uOpaque: gl.getUniformLocation(program, 'uOpaque'),\n        uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\n        uSize: gl.getUniformLocation(program, 'uSize'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        opaque: this.opaque,\n        matrix: this.matrix\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n   */\n  fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Grayscale image filter class\n   * @class fabric.Image.filters.Grayscale\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Grayscale();\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Grayscale',\n\n    fragmentSource: {\n      average: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = (color.r + color.b + color.g) / 3.0;\\n' +\n          'gl_FragColor = vec4(average, average, average, color.a);\\n' +\n        '}',\n      lightness: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uMode;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n        '}',\n      luminosity: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform int uMode;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\n          'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\n        '}',\n    },\n\n\n    /**\n     * Grayscale mode, between 'average', 'lightness', 'luminosity'\n     * @param {String} type\n     * @default\n     */\n    mode: 'average',\n\n    mainParameter: 'mode',\n\n    /**\n     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          len = data.length, value,\n          mode = this.mode;\n      for (i = 0; i < len; i += 4) {\n        if (mode === 'average') {\n          value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n        }\n        else if (mode === 'lightness') {\n          value = (Math.min(data[i], data[i + 1], data[i + 2]) +\n            Math.max(data[i], data[i + 1], data[i + 2])) / 2;\n        }\n        else if (mode === 'luminosity') {\n          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n        }\n        data[i] = value;\n        data[i + 1] = value;\n        data[i + 2] = value;\n      }\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        var shaderSource = this.fragmentSource[this.mode];\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uMode: gl.getUniformLocation(program, 'uMode'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      // default average mode.\n      var mode = 1;\n      gl.uniform1i(uniformLocations.uMode, mode);\n    },\n\n    /**\n     * Grayscale filter isNeutralState implementation\n     * The filter is never neutral\n     * on the image\n     **/\n    isNeutralState: function() {\n      return false;\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n   */\n  fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Invert filter class\n   * @class fabric.Image.filters.Invert\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Invert();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Invert',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform int uInvert;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'if (uInvert == 1) {\\n' +\n          'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\n        '} else {\\n' +\n          'gl_FragColor = color;\\n' +\n        '}\\n' +\n      '}',\n\n    /**\n     * Filter invert. if false, does nothing\n     * @param {Boolean} invert\n     * @default\n     */\n    invert: true,\n\n    mainParameter: 'invert',\n\n    /**\n     * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          len = data.length;\n      for (i = 0; i < len; i += 4) {\n        data[i] = 255 - data[i];\n        data[i + 1] = 255 - data[i + 1];\n        data[i + 2] = 255 - data[i + 2];\n      }\n    },\n\n    /**\n     * Invert filter isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/\n    isNeutralState: function() {\n      return !this.invert;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uInvert: gl.getUniformLocation(program, 'uInvert'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1i(uniformLocations.uInvert, this.invert);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n   */\n  fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Noise filter class\n   * @class fabric.Image.filters.Noise\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Noise({\n   *   noise: 700\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Noise',\n\n    /**\n     * Fragment source for the noise program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uStepH;\\n' +\n      'uniform float uNoise;\\n' +\n      'uniform float uSeed;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'float rand(vec2 co, float seed, float vScale) {\\n' +\n        'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\n      '}\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'noise',\n\n    /**\n     * Noise value, from\n     * @param {Number} noise\n     * @default\n     */\n    noise: 0,\n\n    /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      if (this.noise === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, i, len = data.length,\n          noise = this.noise, rand;\n\n      for (i = 0, len = data.length; i < len; i += 4) {\n\n        rand = (0.5 - Math.random()) * noise;\n\n        data[i] += rand;\n        data[i + 1] += rand;\n        data[i + 2] += rand;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uNoise: gl.getUniformLocation(program, 'uNoise'),\n        uSeed: gl.getUniformLocation(program, 'uSeed'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n      gl.uniform1f(uniformLocations.uSeed, Math.random());\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        noise: this.noise\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n   */\n  fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Pixelate filter class\n   * @class fabric.Image.filters.Pixelate\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Pixelate({\n   *   blocksize: 8\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Pixelate',\n\n    blocksize: 4,\n\n    mainParameter: 'blocksize',\n\n    /**\n     * Fragment source for the Pixelate program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uBlocksize;\\n' +\n      'uniform float uStepW;\\n' +\n      'uniform float uStepH;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'float blockW = uBlocksize * uStepW;\\n' +\n        'float blockH = uBlocksize * uStepW;\\n' +\n        'int posX = int(vTexCoord.x / blockW);\\n' +\n        'int posY = int(vTexCoord.y / blockH);\\n' +\n        'float fposX = float(posX);\\n' +\n        'float fposY = float(posY);\\n' +\n        'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\n        'vec4 color = texture2D(uTexture, squareCoords);\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data,\n          iLen = imageData.height,\n          jLen = imageData.width,\n          index, i, j, r, g, b, a,\n          _i, _j, _iLen, _jLen;\n\n      for (i = 0; i < iLen; i += this.blocksize) {\n        for (j = 0; j < jLen; j += this.blocksize) {\n\n          index = (i * 4) * jLen + (j * 4);\n\n          r = data[index];\n          g = data[index + 1];\n          b = data[index + 2];\n          a = data[index + 3];\n\n          _iLen = Math.min(i + this.blocksize, iLen);\n          _jLen = Math.min(j + this.blocksize, jLen);\n          for (_i = i; _i < _iLen; _i++) {\n            for (_j = j; _j < _jLen; _j++) {\n              index = (_i * 4) * jLen + (_j * 4);\n              data[index] = r;\n              data[index + 1] = g;\n              data[index + 2] = b;\n              data[index + 3] = a;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Indicate when the filter is not gonna apply changes to the image\n     **/\n    isNeutralState: function() {\n      return this.blocksize === 1;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\n        uStepW: gl.getUniformLocation(program, 'uStepW'),\n        uStepH: gl.getUniformLocation(program, 'uStepH'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n   */\n  fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      extend = fabric.util.object.extend,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Remove white filter class\n   * @class fabric.Image.filters.RemoveColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.RemoveColor({\n   *   threshold: 0.2,\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'RemoveColor',\n\n    /**\n     * Color to remove, in any format understood by fabric.Color.\n     * @param {String} type\n     * @default\n     */\n    color: '#FFFFFF',\n\n    /**\n     * Fragment source for the brightness program\n     */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec4 uLow;\\n' +\n      'uniform vec4 uHigh;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\n        'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\n          'gl_FragColor.a = 0.0;\\n' +\n        '}\\n' +\n      '}',\n\n    /**\n     * distance to actual color, as value up or down from each r,g,b\n     * between 0 and 1\n     **/\n    distance: 0.02,\n\n    /**\n     * For color to remove inside distance, use alpha channel for a smoother deletion\n     * NOT IMPLEMENTED YET\n     **/\n    useAlpha: false,\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.color=#RRGGBB] Threshold value\n     * @param {Number} [options.distance=10] Distance value\n     */\n\n    /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, i,\n          distance = this.distance * 255,\n          r, g, b,\n          source = new fabric.Color(this.color).getSource(),\n          lowC = [\n            source[0] - distance,\n            source[1] - distance,\n            source[2] - distance,\n          ],\n          highC = [\n            source[0] + distance,\n            source[1] + distance,\n            source[2] + distance,\n          ];\n\n\n      for (i = 0; i < data.length; i += 4) {\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        if (r > lowC[0] &&\n            g > lowC[1] &&\n            b > lowC[2] &&\n            r < highC[0] &&\n            g < highC[1] &&\n            b < highC[2]) {\n          data[i + 3] = 0;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uLow: gl.getUniformLocation(program, 'uLow'),\n        uHigh: gl.getUniformLocation(program, 'uHigh'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var source = new fabric.Color(this.color).getSource(),\n          distance = parseFloat(this.distance),\n          lowC = [\n            0 + source[0] / 255 - distance,\n            0 + source[1] / 255 - distance,\n            0 + source[2] / 255 - distance,\n            1\n          ],\n          highC = [\n            source[0] / 255 + distance,\n            source[1] / 255 + distance,\n            source[2] / 255 + distance,\n            1\n          ];\n      gl.uniform4fv(uniformLocations.uLow, lowC);\n      gl.uniform4fv(uniformLocations.uHigh, highC);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return extend(this.callSuper('toObject'), {\n        color: this.color,\n        distance: this.distance\n      });\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\n   */\n  fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  var matrices = {\n    Brownie: [\n      0.59970,0.34553,-0.27082,0,0.186,\n      -0.03770,0.86095,0.15059,0,-0.1449,\n      0.24113,-0.07441,0.44972,0,-0.02965,\n      0,0,0,1,0\n    ],\n    Vintage: [\n      0.62793,0.32021,-0.03965,0,0.03784,\n      0.02578,0.64411,0.03259,0,0.02926,\n      0.04660,-0.08512,0.52416,0,0.02023,\n      0,0,0,1,0\n    ],\n    Kodachrome: [\n      1.12855,-0.39673,-0.03992,0,0.24991,\n      -0.16404,1.08352,-0.05498,0,0.09698,\n      -0.16786,-0.56034,1.60148,0,0.13972,\n      0,0,0,1,0\n    ],\n    Technicolor: [\n      1.91252,-0.85453,-0.09155,0,0.04624,\n      -0.30878,1.76589,-0.10601,0,-0.27589,\n      -0.23110,-0.75018,1.84759,0,0.12137,\n      0,0,0,1,0\n    ],\n    Polaroid: [\n      1.438,-0.062,-0.062,0,0,\n      -0.122,1.378,-0.122,0,0,\n      -0.016,-0.016,1.483,0,0,\n      0,0,0,1,0\n    ],\n    Sepia: [\n      0.393, 0.769, 0.189, 0, 0,\n      0.349, 0.686, 0.168, 0, 0,\n      0.272, 0.534, 0.131, 0, 0,\n      0, 0, 0, 1, 0\n    ],\n    BlackWhite: [\n      1.5, 1.5, 1.5, 0, -1,\n      1.5, 1.5, 1.5, 0, -1,\n      1.5, 1.5, 1.5, 0, -1,\n      0, 0, 0, 1, 0,\n    ]\n  };\n\n  for (var key in matrices) {\n    filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\n\n      /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */\n      type: key,\n\n      /**\n       * Colormatrix for the effect\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n       * outside the -1, 1 range.\n       * @param {Array} matrix array of 20 numbers.\n       * @default\n       */\n      matrix: matrices[key],\n\n      /**\n       * Lock the matrix export for this kind of static, parameter less filters.\n       */\n      mainParameter: false,\n      /**\n       * Lock the colormatrix on the color part, skipping alpha\n       */\n      colorsOnly: true,\n\n    });\n    fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\n  }\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Color Blend filter class\n   * @class fabric.Image.filter.BlendColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n\n  filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\n    type: 'BlendColor',\n\n    /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     * @type String\n     * @default\n     **/\n    color: '#F95C63',\n\n    /**\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n     * darken, lighten, overlay, exclusion, tint.\n     * @type String\n     * @default\n     **/\n    mode: 'multiply',\n\n    /**\n     * alpha value. represent the strength of the blend color operation.\n     * @type Number\n     * @default\n     **/\n    alpha: 1,\n\n    /**\n     * Fragment source for the Multiply program\n     */\n    fragmentSource: {\n      multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\n      screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\n      add: 'gl_FragColor.rgb += uColor.rgb;\\n',\n      diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\n      subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\n      lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\n      darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\n      exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\n      overlay: 'if (uColor.r < 0.5) {\\n' +\n          'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\n        '}\\n' +\n        'if (uColor.g < 0.5) {\\n' +\n          'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\n        '}\\n' +\n        'if (uColor.b < 0.5) {\\n' +\n          'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\n        '} else {\\n' +\n          'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\n        '}\\n',\n      tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\n        'gl_FragColor.rgb += uColor.rgb;\\n',\n    },\n\n    /**\n     * build the fragment source for the filters, joining the common part with\n     * the specific one.\n     * @param {String} mode the mode of the filter, a key of this.fragmentSource\n     * @return {String} the source to be compiled\n     * @private\n     */\n    buildSource: function(mode) {\n      return 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'gl_FragColor = color;\\n' +\n          'if (color.a > 0.0) {\\n' +\n            this.fragmentSource[mode] +\n          '}\\n' +\n        '}';\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode, shaderSource;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        shaderSource = this.buildSource(this.mode);\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          data = imageData.data, iLen = data.length,\n          tr, tg, tb,\n          r, g, b,\n          source, alpha1 = 1 - this.alpha;\n\n      source = new fabric.Color(this.color).getSource();\n      tr = source[0] * this.alpha;\n      tg = source[1] * this.alpha;\n      tb = source[2] * this.alpha;\n\n      for (var i = 0; i < iLen; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            break;\n          case 'screen':\n            data[i] = 255 - (255 - r) * (255 - tr) / 255;\n            data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\n            data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\n            break;\n          case 'add':\n            data[i] = r + tr;\n            data[i + 1] = g + tg;\n            data[i + 2] = b + tb;\n            break;\n          case 'diff':\n          case 'difference':\n            data[i] = Math.abs(r - tr);\n            data[i + 1] = Math.abs(g - tg);\n            data[i + 2] = Math.abs(b - tb);\n            break;\n          case 'subtract':\n            data[i] = r - tr;\n            data[i + 1] = g - tg;\n            data[i + 2] = b - tb;\n            break;\n          case 'darken':\n            data[i] = Math.min(r, tr);\n            data[i + 1] = Math.min(g, tg);\n            data[i + 2] = Math.min(b, tb);\n            break;\n          case 'lighten':\n            data[i] = Math.max(r, tr);\n            data[i + 1] = Math.max(g, tg);\n            data[i + 2] = Math.max(b, tb);\n            break;\n          case 'overlay':\n            data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\n            data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\n            data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\n            break;\n          case 'exclusion':\n            data[i] = tr + r - ((2 * tr * r) / 255);\n            data[i + 1] = tg + g - ((2 * tg * g) / 255);\n            data[i + 2] = tb + b - ((2 * tb * b) / 255);\n            break;\n          case 'tint':\n            data[i] = tr + r * alpha1;\n            data[i + 1] = tg + g * alpha1;\n            data[i + 2] = tb + b * alpha1;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uColor: gl.getUniformLocation(program, 'uColor'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var source = new fabric.Color(this.color).getSource();\n      source[0] = this.alpha * source[0] / 255;\n      source[1] = this.alpha * source[1] / 255;\n      source[2] = this.alpha * source[2] / 255;\n      source[3] = this.alpha;\n      gl.uniform4fv(uniformLocations.uColor, source);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        color: this.color,\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\n   */\n  fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n  'use strict';\n\n  var fabric = global.fabric,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Image Blend filter class\n   * @class fabric.Image.filter.BlendImage\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n\n  filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\n    type: 'BlendImage',\n\n    /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     **/\n    image: null,\n\n    /**\n     * Blend mode for the filter (one of \"multiply\", \"mask\")\n     * @type String\n     * @default\n     **/\n    mode: 'multiply',\n\n    /**\n     * alpha value. represent the strength of the blend image operation.\n     * not implemented.\n     **/\n    alpha: 1,\n\n    vertexSource: 'attribute vec2 aPosition;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'varying vec2 vTexCoord2;\\n' +\n      'uniform mat3 uTransformMatrix;\\n' +\n      'void main() {\\n' +\n        'vTexCoord = aPosition;\\n' +\n        'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\n      '}',\n\n    /**\n     * Fragment source for the Multiply program\n     */\n    fragmentSource: {\n      multiply: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform sampler2D uImage;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n          'color.rgba *= color2.rgba;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n      mask: 'precision highp float;\\n' +\n        'uniform sampler2D uTexture;\\n' +\n        'uniform sampler2D uImage;\\n' +\n        'uniform vec4 uColor;\\n' +\n        'varying vec2 vTexCoord;\\n' +\n        'varying vec2 vTexCoord2;\\n' +\n        'void main() {\\n' +\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\n          'color.a = color2.a;\\n' +\n          'gl_FragColor = color;\\n' +\n        '}',\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var cacheKey = this.type + '_' + this.mode;\n      var shaderSource = this.fragmentSource[this.mode];\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    applyToWebGL: function(options) {\n      // load texture to blend.\n      var gl = options.context,\n          texture = this.createTexture(options.filterBackend, this.image);\n      this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\n      this.callSuper('applyToWebGL', options);\n      this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n    },\n\n    createTexture: function(backend, image) {\n      return backend.getCachedTexture(image.cacheKey, image._element);\n    },\n\n    /**\n     * Calculate a transformMatrix to adapt the image to blend over\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    calculateMatrix: function() {\n      var image = this.image,\n          width = image._element.width,\n          height = image._element.height;\n      return [\n        1 / image.scaleX, 0, 0,\n        0, 1 / image.scaleY, 0,\n        -image.left / width, -image.top / height, 1\n      ];\n    },\n\n    /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          resources = options.filterBackend.resources,\n          data = imageData.data, iLen = data.length,\n          width = imageData.width,\n          height = imageData.height,\n          tr, tg, tb, ta,\n          r, g, b, a,\n          canvas1, context, image = this.image, blendData;\n\n      if (!resources.blendImage) {\n        resources.blendImage = fabric.util.createCanvasElement();\n      }\n      canvas1 = resources.blendImage;\n      context = canvas1.getContext('2d');\n      if (canvas1.width !== width || canvas1.height !== height) {\n        canvas1.width = width;\n        canvas1.height = height;\n      }\n      else {\n        context.clearRect(0, 0, width, height);\n      }\n      context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\n      context.drawImage(image._element, 0, 0, width, height);\n      blendData = context.getImageData(0, 0, width, height).data;\n      for (var i = 0; i < iLen; i += 4) {\n\n        r = data[i];\n        g = data[i + 1];\n        b = data[i + 2];\n        a = data[i + 3];\n\n        tr = blendData[i];\n        tg = blendData[i + 1];\n        tb = blendData[i + 2];\n        ta = blendData[i + 3];\n\n        switch (this.mode) {\n          case 'multiply':\n            data[i] = r * tr / 255;\n            data[i + 1] = g * tg / 255;\n            data[i + 2] = b * tb / 255;\n            data[i + 3] = a * ta / 255;\n            break;\n          case 'mask':\n            data[i + 3] = ta;\n            break;\n        }\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\n        uImage: gl.getUniformLocation(program, 'uImage'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var matrix = this.calculateMatrix();\n      gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n      gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        image: this.image && this.image.toObject(),\n        mode: this.mode,\n        alpha: this.alpha\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} callback to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\n   */\n  fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\n    fabric.Image.fromObject(object.image, function(image) {\n      var options = fabric.util.object.clone(object);\n      options.image = image;\n      callback(new fabric.Image.filters.BlendImage(options));\n    });\n  };\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\n      sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\n      ceil = Math.ceil,\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Resize image filter class\n   * @class fabric.Image.filters.Resize\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Resize();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */\n  filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Resize',\n\n    /**\n     * Resize type\n     * for webgl resizeType is just lanczos, for canvas2d can be:\n     * bilinear, hermite, sliceHack, lanczos.\n     * @param {String} resizeType\n     * @default\n     */\n    resizeType: 'hermite',\n\n    /**\n     * Scale factor for resizing, x axis\n     * @param {Number} scaleX\n     * @default\n     */\n    scaleX: 1,\n\n    /**\n     * Scale factor for resizing, y axis\n     * @param {Number} scaleY\n     * @default\n     */\n    scaleY: 1,\n\n    /**\n     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n     * @param {Number} lanczosLobes\n     * @default\n     */\n    lanczosLobes: 3,\n\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uDelta: gl.getUniformLocation(program, 'uDelta'),\n        uTaps: gl.getUniformLocation(program, 'uTaps'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\n      gl.uniform1fv(uniformLocations.uTaps, this.taps);\n    },\n\n    /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    retrieveShader: function(options) {\n      var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\n        var fragmentShader = this.generateShader(filterWindow);\n        options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\n      }\n      return options.programCache[cacheKey];\n    },\n\n    getFilterWindow: function() {\n      var scale = this.tempScale;\n      return Math.ceil(this.lanczosLobes / scale);\n    },\n\n    getTaps: function() {\n      var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\n          filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\n      for (var i = 1; i <= filterWindow; i++) {\n        taps[i - 1] = lobeFunction(i * scale);\n      }\n      return taps;\n    },\n\n    /**\n     * Generate vertex and shader sources from the necessary steps numbers\n     * @param {Number} filterWindow\n     */\n    generateShader: function(filterWindow) {\n      var offsets = new Array(filterWindow),\n          fragmentShader = this.fragmentSourceTOP, filterWindow;\n\n      for (var i = 1; i <= filterWindow; i++) {\n        offsets[i - 1] = i + '.0 * uDelta';\n      }\n\n      fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\n      fragmentShader += 'void main() {\\n';\n      fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\n      fragmentShader += '  float sum = 1.0;\\n';\n\n      offsets.forEach(function(offset, i) {\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\n        fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\n      });\n      fragmentShader += '  gl_FragColor = color / sum;\\n';\n      fragmentShader += '}';\n      return fragmentShader;\n    },\n\n    fragmentSourceTOP: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec2 uDelta;\\n' +\n      'varying vec2 vTexCoord;\\n',\n\n    /**\n     * Apply the resize filter to the image\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      if (options.webgl) {\n        options.passes++;\n        this.width = options.sourceWidth;\n        this.horizontal = true;\n        this.dW = Math.round(this.width * this.scaleX);\n        this.dH = options.sourceHeight;\n        this.tempScale = this.dW / this.width;\n        this.taps = this.getTaps();\n        options.destinationWidth = this.dW;\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        options.sourceWidth = options.destinationWidth;\n\n        this.height = options.sourceHeight;\n        this.horizontal = false;\n        this.dH = Math.round(this.height * this.scaleY);\n        this.tempScale = this.dH / this.height;\n        this.taps = this.getTaps();\n        options.destinationHeight = this.dH;\n        this._setupFrameBuffer(options);\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        options.sourceHeight = options.destinationHeight;\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    isNeutralState: function() {\n      return this.scaleX === 1 && this.scaleY === 1;\n    },\n\n    lanczosCreate: function(lobes) {\n      return function(x) {\n        if (x >= lobes || x <= -lobes) {\n          return 0.0;\n        }\n        if (x < 1.19209290E-07 && x > -1.19209290E-07) {\n          return 1.0;\n        }\n        x *= Math.PI;\n        var xx = x / lobes;\n        return (sin(x) / x) * sin(xx) / xx;\n      };\n    },\n\n    /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Resize.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData,\n          scaleX = this.scaleX,\n          scaleY = this.scaleY;\n\n      this.rcpScaleX = 1 / scaleX;\n      this.rcpScaleY = 1 / scaleY;\n\n      var oW = imageData.width, oH = imageData.height,\n          dW = round(oW * scaleX), dH = round(oH * scaleY),\n          newData;\n\n      if (this.resizeType === 'sliceHack') {\n        newData = this.sliceByTwo(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'hermite') {\n        newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'bilinear') {\n        newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n      }\n      else if (this.resizeType === 'lanczos') {\n        newData = this.lanczosResize(options, oW, oH, dW, dH);\n      }\n      options.imageData = newData;\n    },\n\n    /**\n     * Filter sliceByTwo\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    sliceByTwo: function(options, oW, oH, dW, dH) {\n      var imageData = options.imageData,\n          mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\n          stepH = oH * mult, resources = fabric.filterBackend.resources,\n          tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\n      if (!resources.sliceByTwo) {\n        resources.sliceByTwo = document.createElement('canvas');\n      }\n      tmpCanvas = resources.sliceByTwo;\n      if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n        tmpCanvas.width = oW * 1.5;\n        tmpCanvas.height = oH;\n      }\n      ctx = tmpCanvas.getContext('2d');\n      ctx.clearRect(0, 0, oW * 1.5, oH);\n      ctx.putImageData(imageData, 0, 0);\n\n      dW = floor(dW);\n      dH = floor(dH);\n\n      while (!doneW || !doneH) {\n        oW = stepW;\n        oH = stepH;\n        if (dW < floor(stepW * mult)) {\n          stepW = floor(stepW * mult);\n        }\n        else {\n          stepW = dW;\n          doneW = true;\n        }\n        if (dH < floor(stepH * mult)) {\n          stepH = floor(stepH * mult);\n        }\n        else {\n          stepH = dH;\n          doneH = true;\n        }\n        ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n        sX = dX;\n        sY = dY;\n        dY += stepH;\n      }\n      return ctx.getImageData(sX, sY, dW, dH);\n    },\n\n    /**\n     * Filter lanczosResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    lanczosResize: function(options, oW, oH, dW, dH) {\n\n      function process(u) {\n        var v, i, weight, idx, a, red, green,\n            blue, alpha, fX, fY;\n        center.x = (u + 0.5) * ratioX;\n        icenter.x = floor(center.x);\n        for (v = 0; v < dH; v++) {\n          center.y = (v + 0.5) * ratioY;\n          icenter.y = floor(center.y);\n          a = 0; red = 0; green = 0; blue = 0; alpha = 0;\n          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\n            if (i < 0 || i >= oW) {\n              continue;\n            }\n            fX = floor(1000 * abs(i - center.x));\n            if (!cacheLanc[fX]) {\n              cacheLanc[fX] = { };\n            }\n            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\n              if (j < 0 || j >= oH) {\n                continue;\n              }\n              fY = floor(1000 * abs(j - center.y));\n              if (!cacheLanc[fX][fY]) {\n                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n              }\n              weight = cacheLanc[fX][fY];\n              if (weight > 0) {\n                idx = (j * oW + i) * 4;\n                a += weight;\n                red += weight * srcData[idx];\n                green += weight * srcData[idx + 1];\n                blue += weight * srcData[idx + 2];\n                alpha += weight * srcData[idx + 3];\n              }\n            }\n          }\n          idx = (v * dW + u) * 4;\n          destData[idx] = red / a;\n          destData[idx + 1] = green / a;\n          destData[idx + 2] = blue / a;\n          destData[idx + 3] = alpha / a;\n        }\n\n        if (++u < dW) {\n          return process(u);\n        }\n        else {\n          return destImg;\n        }\n      }\n\n      var srcData = options.imageData.data,\n          destImg = options.ctx.createImageData(dW, dH),\n          destData = destImg.data,\n          lanczos = this.lanczosCreate(this.lanczosLobes),\n          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\n          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\n          range2X = ceil(ratioX * this.lanczosLobes / 2),\n          range2Y = ceil(ratioY * this.lanczosLobes / 2),\n          cacheLanc = { }, center = { }, icenter = { };\n\n      return process(0);\n    },\n\n    /**\n     * bilinearFiltering\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    bilinearFiltering: function(options, oW, oH, dW, dH) {\n      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\n          color, offset = 0, origPix, ratioX = this.rcpScaleX,\n          ratioY = this.rcpScaleY,\n          w4 = 4 * (oW - 1), img = options.imageData,\n          pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\n          destPixels = destImage.data;\n      for (i = 0; i < dH; i++) {\n        for (j = 0; j < dW; j++) {\n          x = floor(ratioX * j);\n          y = floor(ratioY * i);\n          xDiff = ratioX * j - x;\n          yDiff = ratioY * i - y;\n          origPix = 4 * (y * oW + x);\n\n          for (chnl = 0; chnl < 4; chnl++) {\n            a = pixels[origPix + chnl];\n            b = pixels[origPix + 4 + chnl];\n            c = pixels[origPix + w4 + chnl];\n            d = pixels[origPix + w4 + 4 + chnl];\n            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\n                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n            destPixels[offset++] = color;\n          }\n        }\n      }\n      return destImage;\n    },\n\n    /**\n     * hermiteFastResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */\n    hermiteFastResize: function(options, oW, oH, dW, dH) {\n      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\n          ratioWHalf = ceil(ratioW / 2),\n          ratioHHalf = ceil(ratioH / 2),\n          img = options.imageData, data = img.data,\n          img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\n      for (var j = 0; j < dH; j++) {\n        for (var i = 0; i < dW; i++) {\n          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\n              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\n            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\n                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\n              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\n                  w = sqrt(w0 + dx * dx);\n              /* eslint-disable max-depth */\n              if (w > 1 && w < -1) {\n                continue;\n              }\n              //hermite filter\n              weight = 2 * w * w * w - 3 * w * w + 1;\n              if (weight > 0) {\n                dx = 4 * (xx + yy * oW);\n                //alpha\n                gxA += weight * data[dx + 3];\n                weightsAlpha += weight;\n                //colors\n                if (data[dx + 3] < 255) {\n                  weight = weight * data[dx + 3] / 250;\n                }\n                gxR += weight * data[dx];\n                gxG += weight * data[dx + 1];\n                gxB += weight * data[dx + 2];\n                weights += weight;\n              }\n              /* eslint-enable max-depth */\n            }\n          }\n          data2[x2] = gxR / weights;\n          data2[x2 + 1] = gxG / weights;\n          data2[x2 + 2] = gxB / weights;\n          data2[x2 + 3] = gxA / weightsAlpha;\n        }\n      }\n      return img2;\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function() {\n      return {\n        type: this.type,\n        scaleX: this.scaleX,\n        scaleY: this.scaleY,\n        resizeType: this.resizeType,\n        lanczosLobes: this.lanczosLobes\n      };\n    }\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n   */\n  fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Contrast filter class\n   * @class fabric.Image.filters.Contrast\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Contrast({\n   *   contrast: 0.25\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Contrast',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uContrast;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\n        'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * contrast value, range from -1 to 1.\n     * @param {Number} contrast\n     * @default 0\n     */\n    contrast: 0,\n\n    mainParameter: 'contrast',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Contrast.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\n     */\n\n    /**\n      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n      *\n      * @param {Object} options\n      * @param {ImageData} options.imageData The Uint8Array to be filtered.\n      */\n    applyTo2d: function(options) {\n      if (this.contrast === 0) {\n        return;\n      }\n      var imageData = options.imageData, i, len,\n          data = imageData.data, len = data.length,\n          contrast = Math.floor(this.contrast * 255),\n          contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\n\n      for (i = 0; i < len; i += 4) {\n        data[i] = contrastF * (data[i] - 128) + 128;\n        data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n        data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uContrast: gl.getUniformLocation(program, 'uContrast'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uContrast, this.contrast);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\n   */\n  fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Saturate filter class\n   * @class fabric.Image.filters.Saturation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Saturation({\n   *   saturation: 1\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Saturation',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform float uSaturation;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'float rgMax = max(color.r, color.g);\\n' +\n        'float rgbMax = max(rgMax, color.b);\\n' +\n        'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\n        'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\n        'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\n        'gl_FragColor = color;\\n' +\n      '}',\n\n    /**\n     * Saturation value, from -1 to 1.\n     * Increases/decreases the color saturation.\n     * A value of 0 has no effect.\n     * \n     * @param {Number} saturation\n     * @default\n     */\n    saturation: 0,\n\n    mainParameter: 'saturation',\n\n    /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Saturate.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\n     */\n\n    /**\n     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */\n    applyTo2d: function(options) {\n      if (this.saturation === 0) {\n        return;\n      }\n      var imageData = options.imageData,\n          data = imageData.data, len = data.length,\n          adjust = -this.saturation, i, max;\n\n      for (i = 0; i < len; i += 4) {\n        max = Math.max(data[i], data[i + 1], data[i + 2]);\n        data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uSaturation: gl.getUniformLocation(program, 'uSaturation'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\n   */\n  fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Blur filter class\n   * @class fabric.Image.filters.Blur\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Blur({\n   *   blur: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */\n  filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\n\n    type: 'Blur',\n\n    /*\n'gl_FragColor = vec4(0.0);',\n'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\n'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\n'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\n*/\n\n    /* eslint-disable max-len */\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec2 uDelta;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'const float nSamples = 15.0;\\n' +\n      'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\n      'float random(vec3 scale) {\\n' +\n        /* use the fragment position for a different seed per-pixel */\n        'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\n      '}\\n' +\n      'void main() {\\n' +\n        'vec4 color = vec4(0.0);\\n' +\n        'float total = 0.0;\\n' +\n        'float offset = random(v3offset);\\n' +\n        'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\n          'float percent = (t + offset - 0.5) / nSamples;\\n' +\n          'float weight = 1.0 - abs(percent);\\n' +\n          'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\n          'total += weight;\\n' +\n        '}\\n' +\n        'gl_FragColor = color / total;\\n' +\n      '}',\n    /* eslint-enable max-len */\n\n    /**\n     * blur value, in percentage of image dimensions.\n     * specific to keep the image blur constant at different resolutions\n     * range between 0 and 1.\n     * @type Number\n     * @default\n     */\n    blur: 0,\n\n    mainParameter: 'blur',\n\n    applyTo: function(options) {\n      if (options.webgl) {\n        // this aspectRatio is used to give the same blur to vertical and horizontal\n        this.aspectRatio = options.sourceWidth / options.sourceHeight;\n        options.passes++;\n        this._setupFrameBuffer(options);\n        this.horizontal = true;\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n        this._setupFrameBuffer(options);\n        this.horizontal = false;\n        this.applyToWebGL(options);\n        this._swapTextures(options);\n      }\n      else {\n        this.applyTo2d(options);\n      }\n    },\n\n    applyTo2d: function(options) {\n      // paint canvasEl with current image data.\n      //options.ctx.putImageData(options.imageData, 0, 0);\n      options.imageData = this.simpleBlur(options);\n    },\n\n    simpleBlur: function(options) {\n      var resources = options.filterBackend.resources, canvas1, canvas2,\n          width = options.imageData.width,\n          height = options.imageData.height;\n\n      if (!resources.blurLayer1) {\n        resources.blurLayer1 = fabric.util.createCanvasElement();\n        resources.blurLayer2 = fabric.util.createCanvasElement();\n      }\n      canvas1 = resources.blurLayer1;\n      canvas2 = resources.blurLayer2;\n      if (canvas1.width !== width || canvas1.height !== height) {\n        canvas2.width = canvas1.width = width;\n        canvas2.height = canvas1.height = height;\n      }\n      var ctx1 = canvas1.getContext('2d'),\n          ctx2 = canvas2.getContext('2d'),\n          nSamples = 15,\n          random, percent, j, i,\n          blur = this.blur * 0.06 * 0.5;\n\n      // load first canvas\n      ctx1.putImageData(options.imageData, 0, 0);\n      ctx2.clearRect(0, 0, width, height);\n\n      for (i = -nSamples; i <= nSamples; i++) {\n        random = (Math.random() - 0.5) / 4;\n        percent = i / nSamples;\n        j = blur * percent * width + random;\n        ctx2.globalAlpha = 1 - Math.abs(percent);\n        ctx2.drawImage(canvas1, j, random);\n        ctx1.drawImage(canvas2, 0, 0);\n        ctx2.globalAlpha = 1;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      }\n      for (i = -nSamples; i <= nSamples; i++) {\n        random = (Math.random() - 0.5) / 4;\n        percent = i / nSamples;\n        j = blur * percent * height + random;\n        ctx2.globalAlpha = 1 - Math.abs(percent);\n        ctx2.drawImage(canvas1, random, j);\n        ctx1.drawImage(canvas2, 0, 0);\n        ctx2.globalAlpha = 1;\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n      }\n      options.ctx.drawImage(canvas1, 0, 0);\n      var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n      ctx1.globalAlpha = 1;\n      ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n      return newImageData;\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        delta: gl.getUniformLocation(program, 'uDelta'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      var delta = this.chooseRightDelta();\n      gl.uniform2fv(uniformLocations.delta, delta);\n    },\n\n    /**\n     * choose right value of image percentage to blur with\n     * @returns {Array} a numeric array with delta values\n     */\n    chooseRightDelta: function() {\n      var blurScale = 1, delta = [0, 0], blur;\n      if (this.horizontal) {\n        if (this.aspectRatio > 1) {\n          // image is wide, i want to shrink radius horizontal\n          blurScale = 1 / this.aspectRatio;\n        }\n      }\n      else {\n        if (this.aspectRatio < 1) {\n          // image is tall, i want to shrink radius vertical\n          blurScale = this.aspectRatio;\n        }\n      }\n      blur = blurScale * this.blur * 0.12;\n      if (this.horizontal) {\n        delta[0] = blur;\n      }\n      else {\n        delta[1] = blur;\n      }\n      return delta;\n    },\n  });\n\n  /**\n   * Deserialize a JSON definition of a BlurFilter into a concrete instance.\n   */\n  filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * Gamma filter class\n   * @class fabric.Image.filters.Gamma\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Gamma({\n   *   gamma: [1, 0.5, 2.1]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'Gamma',\n\n    fragmentSource: 'precision highp float;\\n' +\n      'uniform sampler2D uTexture;\\n' +\n      'uniform vec3 uGamma;\\n' +\n      'varying vec2 vTexCoord;\\n' +\n      'void main() {\\n' +\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\n        'vec3 correction = (1.0 / uGamma);\\n' +\n        'color.r = pow(color.r, correction.r);\\n' +\n        'color.g = pow(color.g, correction.g);\\n' +\n        'color.b = pow(color.b, correction.b);\\n' +\n        'gl_FragColor = color;\\n' +\n        'gl_FragColor.rgb *= color.a;\\n' +\n      '}',\n\n    /**\n     * Gamma array value, from 0.01 to 2.2.\n     * @param {Array} gamma\n     * @default\n     */\n    gamma: [1, 1, 1],\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'gamma',\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.gamma = [1, 1, 1];\n      filters.BaseFilter.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */\n    applyTo2d: function(options) {\n      var imageData = options.imageData, data = imageData.data,\n          gamma = this.gamma, len = data.length,\n          rInv = 1 / gamma[0], gInv = 1 / gamma[1],\n          bInv = 1 / gamma[2], i;\n\n      if (!this.rVals) {\n        // eslint-disable-next-line\n        this.rVals = new Uint8Array(256);\n        // eslint-disable-next-line\n        this.gVals = new Uint8Array(256);\n        // eslint-disable-next-line\n        this.bVals = new Uint8Array(256);\n      }\n\n      // This is an optimization - pre-compute a look-up table for each color channel\n      // instead of performing these pow calls for each pixel in the image.\n      for (i = 0, len = 256; i < len; i++) {\n        this.rVals[i] = Math.pow(i / 255, rInv) * 255;\n        this.gVals[i] = Math.pow(i / 255, gInv) * 255;\n        this.bVals[i] = Math.pow(i / 255, bInv) * 255;\n      }\n      for (i = 0, len = data.length; i < len; i += 4) {\n        data[i] = this.rVals[data[i]];\n        data[i + 1] = this.gVals[data[i + 1]];\n        data[i + 2] = this.bVals[data[i + 2]];\n      }\n    },\n\n    /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */\n    getUniformLocations: function(gl, program) {\n      return {\n        uGamma: gl.getUniformLocation(program, 'uGamma'),\n      };\n    },\n\n    /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */\n    sendUniformData: function(gl, uniformLocations) {\n      gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n    },\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\n   */\n  fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * A container class that knows how to apply a sequence of filters to an input image.\n   */\n  filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\n\n    type: 'Composed',\n\n    /**\n     * A non sparse array of filters to apply\n     */\n    subFilters: [],\n\n    /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */\n    initialize: function(options) {\n      this.callSuper('initialize', options);\n      // create a new array instead mutating the prototype with push\n      this.subFilters = this.subFilters.slice(0);\n    },\n\n    /**\n     * Apply this container's filters to the input image provided.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be applied.\n     */\n    applyTo: function(options) {\n      options.passes += this.subFilters.length - 1;\n      this.subFilters.forEach(function(filter) {\n        filter.applyTo(options);\n      });\n    },\n\n    /**\n     * Serialize this filter into JSON.\n     *\n     * @returns {Object} A JSON representation of this filter.\n     */\n    toObject: function() {\n      return fabric.util.object.extend(this.callSuper('toObject'), {\n        subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\n      });\n    },\n\n    isNeutralState: function() {\n      return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\n    }\n  });\n\n  /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   */\n  fabric.Image.filters.Composed.fromObject = function(object, callback) {\n    var filters = object.subFilters || [],\n        subFilters = filters.map(function(filter) {\n          return new fabric.Image.filters[filter.type](filter);\n        }),\n        instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\n    callback && callback(instance);\n    return instance;\n  };\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric  = global.fabric || (global.fabric = { }),\n      filters = fabric.Image.filters,\n      createClass = fabric.util.createClass;\n\n  /**\n   * HueRotation filter class\n   * @class fabric.Image.filters.HueRotation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.HueRotation({\n   *   rotation: -0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */\n  filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\n\n    /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */\n    type: 'HueRotation',\n\n    /**\n     * HueRotation value, from -1 to 1.\n     * the unit is radians\n     * @param {Number} myParameter\n     * @default\n     */\n    rotation: 0,\n\n    /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */\n    mainParameter: 'rotation',\n\n    calculateMatrix: function() {\n      var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\n          aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\n      this.matrix = [\n        1, 0, 0, 0, 0,\n        0, 1, 0, 0, 0,\n        0, 0, 1, 0, 0,\n        0, 0, 0, 1, 0\n      ];\n      this.matrix[0] = cos + OneMinusCos / 3;\n      this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[6] = cos + aThird * OneMinusCos;\n      this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n      this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n      this.matrix[12] = cos + aThird * OneMinusCos;\n    },\n\n    /**\n     * HueRotation isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/\n    isNeutralState: function(options) {\n      this.calculateMatrix();\n      return filters.BaseFilter.prototype.isNeutralState.call(this, options);\n    },\n\n    /**\n     * Apply this filter to the input image data provided.\n     *\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */\n    applyTo: function(options) {\n      this.calculateMatrix();\n      filters.BaseFilter.prototype.applyTo.call(this, options);\n    },\n\n  });\n\n  /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\n   */\n  fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function(global) {\n\n  'use strict';\n\n  var fabric = global.fabric || (global.fabric = { }),\n      clone = fabric.util.object.clone;\n\n  if (fabric.Text) {\n    fabric.warn('fabric.Text is already defined');\n    return;\n  }\n\n  var additionalProps =\n    ('fontFamily fontWeight fontSize text underline overline linethrough' +\n    ' textAlign fontStyle lineHeight textBackgroundColor charSpacing styles' +\n    ' direction path pathStartOffset pathSide pathAlign').split(' ');\n\n  /**\n   * Text class\n   * @class fabric.Text\n   * @extends fabric.Object\n   * @return {fabric.Text} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n   * @see {@link fabric.Text#initialize} for constructor definition\n   */\n  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n\n    /**\n     * Properties which when set cause object to change dimensions\n     * @type Array\n     * @private\n     */\n    _dimensionAffectingProps: [\n      'fontSize',\n      'fontWeight',\n      'fontFamily',\n      'fontStyle',\n      'lineHeight',\n      'text',\n      'charSpacing',\n      'textAlign',\n      'styles',\n      'path',\n      'pathStartOffset',\n      'pathSide',\n      'pathAlign'\n    ],\n\n    /**\n     * @private\n     */\n    _reNewline: /\\r?\\n/,\n\n    /**\n     * Use this regular expression to filter for whitespaces that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpacesAndTabs: /[ \\t\\r]/g,\n\n    /**\n     * Use this regular expression to filter for whitespace that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reSpaceAndTab: /[ \\t\\r]/,\n\n    /**\n     * Use this regular expression to filter consecutive groups of non spaces.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */\n    _reWords: /\\S+/g,\n\n    /**\n     * Type of an object\n     * @type String\n     * @default\n     */\n    type:                 'text',\n\n    /**\n     * Font size (in pixels)\n     * @type Number\n     * @default\n     */\n    fontSize:             40,\n\n    /**\n     * Font weight (e.g. bold, normal, 400, 600, 800)\n     * @type {(Number|String)}\n     * @default\n     */\n    fontWeight:           'normal',\n\n    /**\n     * Font family\n     * @type String\n     * @default\n     */\n    fontFamily:           'Times New Roman',\n\n    /**\n     * Text decoration underline.\n     * @type Boolean\n     * @default\n     */\n    underline:       false,\n\n    /**\n     * Text decoration overline.\n     * @type Boolean\n     * @default\n     */\n    overline:       false,\n\n    /**\n     * Text decoration linethrough.\n     * @type Boolean\n     * @default\n     */\n    linethrough:       false,\n\n    /**\n     * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n     * \"justify-left\", \"justify-center\" or \"justify-right\".\n     * @type String\n     * @default\n     */\n    textAlign:            'left',\n\n    /**\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n     * @type String\n     * @default\n     */\n    fontStyle:            'normal',\n\n    /**\n     * Line height\n     * @type Number\n     * @default\n     */\n    lineHeight:           1.16,\n\n    /**\n     * Superscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */\n    superscript: {\n      size:      0.60, // fontSize factor\n      baseline: -0.35  // baseline-shift factor (upwards)\n    },\n\n    /**\n     * Subscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */\n    subscript: {\n      size:      0.60, // fontSize factor\n      baseline:  0.11  // baseline-shift factor (downwards)\n    },\n\n    /**\n     * Background color of text lines\n     * @type String\n     * @default\n     */\n    textBackgroundColor:  '',\n\n    /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */\n    stateProperties: fabric.Object.prototype.stateProperties.concat(additionalProps),\n\n    /**\n     * List of properties to consider when checking if cache needs refresh\n     * @type Array\n     */\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat(additionalProps),\n\n    /**\n     * When defined, an object is rendered via stroke and this property specifies its color.\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n     * @type String\n     * @default\n     */\n    stroke:               null,\n\n    /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n     * @type fabric.Shadow\n     * @default\n     */\n    shadow:               null,\n\n    /**\n     * fabric.Path that the text should follow.\n     * since 4.6.0 the path will be drawn automatically.\n     * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n     * if you want it to be hidden, assign visible = false to the path.\n     * This feature is in BETA, and SVG import/export is not yet supported.\n     * @type fabric.Path\n     * @example\n     * var textPath = new fabric.Text('Text on a path', {\n     *     top: 150,\n     *     left: 150,\n     *     textAlign: 'center',\n     *     charSpacing: -50,\n     *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {\n     *         strokeWidth: 1,\n     *         visible: false\n     *     }),\n     *     pathSide: 'left',\n     *     pathStartOffset: 0\n     * });\n     * @default\n     */\n    path:               null,\n\n    /**\n     * Offset amount for text path starting position\n     * Only used when text has a path\n     * @type Number\n     * @default\n     */\n    pathStartOffset:               0,\n\n    /**\n     * Which side of the path the text should be drawn on.\n     * Only used when text has a path\n     * @type {String} 'left|right'\n     * @default\n     */\n    pathSide:               'left',\n\n    /**\n     * How text is aligned to the path. This property determines\n     * the perpendicular position of each character relative to the path.\n     * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n     * This feature is in BETA, and its behavior may change\n     * @type String\n     * @default\n     */\n    pathAlign:               'baseline',\n\n    /**\n     * @private\n     */\n    _fontSizeFraction: 0.222,\n\n    /**\n     * @private\n     */\n    offsets: {\n      underline: 0.10,\n      linethrough: -0.315,\n      overline: -0.88\n    },\n\n    /**\n     * Text Line proportion to font Size (in pixels)\n     * @type Number\n     * @default\n     */\n    _fontSizeMult:             1.13,\n\n    /**\n     * additional space between characters\n     * expressed in thousands of em unit\n     * @type Number\n     * @default\n     */\n    charSpacing:             0,\n\n    /**\n     * Object containing character styles - top-level properties -> line numbers,\n     * 2nd-level properties - character numbers\n     * @type Object\n     * @default\n     */\n    styles: null,\n\n    /**\n     * Reference to a context to measure text char or couple of chars\n     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\n     * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every\n     * text object created.\n     * @type {CanvasRenderingContext2D}\n     * @default\n     */\n    _measuringContext: null,\n\n    /**\n     * Baseline shift, styles only, keep at 0 for the main text object\n     * @type {Number}\n     * @default\n     */\n    deltaY: 0,\n\n    /**\n     * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n     * determine the direction of the text.\n     * This has to be set manually together with textAlign and originX for proper\n     * experience.\n     * some interesting link for the future\n     * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n     * @since 4.5.0\n     * @type {String} 'ltr|rtl'\n     * @default\n     */\n    direction: 'ltr',\n\n    /**\n     * Array of properties that define a style unit (of 'styles').\n     * @type {Array}\n     * @default\n     */\n    _styleProperties: [\n      'stroke',\n      'strokeWidth',\n      'fill',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontStyle',\n      'underline',\n      'overline',\n      'linethrough',\n      'deltaY',\n      'textBackgroundColor',\n    ],\n\n    /**\n     * contains characters bounding boxes\n     */\n    __charBounds: [],\n\n    /**\n     * use this size when measuring text. To avoid IE11 rounding errors\n     * @type {Number}\n     * @default\n     * @readonly\n     * @private\n     */\n    CACHE_FONT_SIZE: 400,\n\n    /**\n     * contains the min text width to avoid getting 0\n     * @type {Number}\n     * @default\n     */\n    MIN_TEXT_WIDTH: 2,\n\n    /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    initialize: function(text, options) {\n      this.styles = options ? (options.styles || { }) : { };\n      this.text = text;\n      this.__skipDimension = true;\n      this.callSuper('initialize', options);\n      if (this.path) {\n        this.setPathInfo();\n      }\n      this.__skipDimension = false;\n      this.initDimensions();\n      this.setCoords();\n      this.setupState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * If text has a path, it will add the extra information needed\n     * for path and text calculations\n     * @return {fabric.Text} thisArg\n     */\n    setPathInfo: function() {\n      var path = this.path;\n      if (path) {\n        path.segmentsInfo = fabric.util.getPathSegmentsInfo(path.path);\n      }\n    },\n\n    /**\n     * Return a context for measurement of text string.\n     * if created it gets stored for reuse\n     * this is for internal use, please do not use it\n     * @private\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */\n    getMeasuringContext: function() {\n      // if we did not return we have to measure something.\n      if (!fabric._measuringContext) {\n        fabric._measuringContext = this.canvas && this.canvas.contextCache ||\n          fabric.util.createCanvasElement().getContext('2d');\n      }\n      return fabric._measuringContext;\n    },\n\n    /**\n     * @private\n     * Divides text into lines of text and lines of graphemes.\n     */\n    _splitText: function() {\n      var newLines = this._splitTextIntoLines(this.text);\n      this.textLines = newLines.lines;\n      this._textLines = newLines.graphemeLines;\n      this._unwrappedTextLines = newLines._unwrappedLines;\n      this._text = newLines.graphemeText;\n      return newLines;\n    },\n\n    /**\n     * Initialize or update text dimensions.\n     * Updates this.width and this.height with the proper values.\n     * Does not return dimensions.\n     */\n    initDimensions: function() {\n      if (this.__skipDimension) {\n        return;\n      }\n      this._splitText();\n      this._clearCache();\n      if (this.path) {\n        this.width = this.path.width;\n        this.height = this.path.height;\n      }\n      else {\n        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n        this.height = this.calcTextHeight();\n      }\n      if (this.textAlign.indexOf('justify') !== -1) {\n        // once text is measured we need to make space fatter to make justified text.\n        this.enlargeSpaces();\n      }\n      this.saveState({ propertySet: '_dimensionAffectingProps' });\n    },\n\n    /**\n     * Enlarge space boxes and shift the others\n     */\n    enlargeSpaces: function() {\n      var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\n          continue;\n        }\n        accumulatedSpace = 0;\n        line = this._textLines[i];\n        currentLineWidth = this.getLineWidth(i);\n        if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\n          numberOfSpaces = spaces.length;\n          diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n          for (var j = 0, jlen = line.length; j <= jlen; j++) {\n            charBound = this.__charBounds[i][j];\n            if (this._reSpaceAndTab.test(line[j])) {\n              charBound.width += diffSpace;\n              charBound.kernedWidth += diffSpace;\n              charBound.left += accumulatedSpace;\n              accumulatedSpace += diffSpace;\n            }\n            else {\n              charBound.left += accumulatedSpace;\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Detect if the text line is ended with an hard break\n     * text and itext do not have wrapping, return false\n     * @return {Boolean}\n     */\n    isEndOfWrapping: function(lineIndex) {\n      return lineIndex === this._textLines.length - 1;\n    },\n\n    /**\n     * Detect if a line has a linebreak and so we need to account for it when moving\n     * and counting style.\n     * It return always for text and Itext.\n     * @return Number\n     */\n    missingNewlineOffset: function() {\n      return 1;\n    },\n\n    /**\n     * Returns string representation of an instance\n     * @return {String} String representation of text object\n     */\n    toString: function() {\n      return '#<fabric.Text (' + this.complexity() +\n        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n    },\n\n    /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @param {Object} dim.x width of object to be cached\n     * @param {Object} dim.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */\n    _getCacheCanvasDimensions: function() {\n      var dims = this.callSuper('_getCacheCanvasDimensions');\n      var fontSize = this.fontSize;\n      dims.width += fontSize * dims.zoomX;\n      dims.height += fontSize * dims.zoomY;\n      return dims;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _render: function(ctx) {\n      var path = this.path;\n      path && !path.isNotVisible() && path._render(ctx);\n      this._setTextStyles(ctx);\n      this._renderTextLinesBackground(ctx);\n      this._renderTextDecoration(ctx, 'underline');\n      this._renderText(ctx);\n      this._renderTextDecoration(ctx, 'overline');\n      this._renderTextDecoration(ctx, 'linethrough');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderText: function(ctx) {\n      if (this.paintFirst === 'stroke') {\n        this._renderTextStroke(ctx);\n        this._renderTextFill(ctx);\n      }\n      else {\n        this._renderTextFill(ctx);\n        this._renderTextStroke(ctx);\n      }\n    },\n\n    /**\n     * Set the font parameter of the context with the object properties or with charStyle\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [charStyle] object with font style properties\n     * @param {String} [charStyle.fontFamily] Font Family\n     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n     * @param {String} [charStyle.fontWeight] Font weight\n     * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n     */\n    _setTextStyles: function(ctx, charStyle, forMeasuring) {\n      ctx.textBaseline = 'alphabetical';\n      if (this.path) {\n        switch (this.pathAlign) {\n          case 'center':\n            ctx.textBaseline = 'middle';\n            break;\n          case 'ascender':\n            ctx.textBaseline = 'top';\n            break;\n          case 'descender':\n            ctx.textBaseline = 'bottom';\n            break;\n        }\n      }\n      ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n    },\n\n    /**\n     * calculate and return the text Width measuring each line.\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Maximum width of fabric.Text object\n     */\n    calcTextWidth: function() {\n      var maxWidth = this.getLineWidth(0);\n\n      for (var i = 1, len = this._textLines.length; i < len; i++) {\n        var currentLineWidth = this.getLineWidth(i);\n        if (currentLineWidth > maxWidth) {\n          maxWidth = currentLineWidth;\n        }\n      }\n      return maxWidth;\n    },\n\n    /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Text to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     * @param {Number} lineIndex Index of a line in a text\n     */\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n      this._renderChars(method, ctx, line, left, top, lineIndex);\n    },\n\n    /**\n     * Renders the text background for lines, taking care of style\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextLinesBackground: function(ctx) {\n      if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\n        return;\n      }\n      var heightOfLine,\n          lineLeftOffset, originalFill = ctx.fillStyle,\n          line, lastColor,\n          leftOffset = this._getLeftOffset(),\n          lineTopOffset = this._getTopOffset(),\n          boxStart = 0, boxWidth = 0, charBox, currentColor, path = this.path,\n          drawStart;\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        heightOfLine = this.getHeightOfLine(i);\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\n          lineTopOffset += heightOfLine;\n          continue;\n        }\n        line = this._textLines[i];\n        lineLeftOffset = this._getLineLeftOffset(i);\n        boxWidth = 0;\n        boxStart = 0;\n        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\n          if (path) {\n            ctx.save();\n            ctx.translate(charBox.renderLeft, charBox.renderTop);\n            ctx.rotate(charBox.angle);\n            ctx.fillStyle = currentColor;\n            currentColor && ctx.fillRect(\n              -charBox.width / 2,\n              -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction),\n              charBox.width,\n              heightOfLine / this.lineHeight\n            );\n            ctx.restore();\n          }\n          else if (currentColor !== lastColor) {\n            drawStart = leftOffset + lineLeftOffset + boxStart;\n            if (this.direction === 'rtl') {\n              drawStart = this.width - drawStart - boxWidth;\n            }\n            ctx.fillStyle = lastColor;\n            lastColor && ctx.fillRect(\n              drawStart,\n              lineTopOffset,\n              boxWidth,\n              heightOfLine / this.lineHeight\n            );\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastColor = currentColor;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        if (currentColor && !path) {\n          drawStart = leftOffset + lineLeftOffset + boxStart;\n          if (this.direction === 'rtl') {\n            drawStart = this.width - drawStart - boxWidth;\n          }\n          ctx.fillStyle = currentColor;\n          ctx.fillRect(\n            drawStart,\n            lineTopOffset,\n            boxWidth,\n            heightOfLine / this.lineHeight\n          );\n        }\n        lineTopOffset += heightOfLine;\n      }\n      ctx.fillStyle = originalFill;\n      // if there is text background color no\n      // other shadows should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * @private\n     * @param {Object} decl style declaration for cache\n     * @param {String} decl.fontFamily fontFamily\n     * @param {String} decl.fontStyle fontStyle\n     * @param {String} decl.fontWeight fontWeight\n     * @return {Object} reference to cache\n     */\n    getFontCache: function(decl) {\n      var fontFamily = decl.fontFamily.toLowerCase();\n      if (!fabric.charWidthsCache[fontFamily]) {\n        fabric.charWidthsCache[fontFamily] = { };\n      }\n      var cache = fabric.charWidthsCache[fontFamily],\n          cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\n      if (!cache[cacheProp]) {\n        cache[cacheProp] = { };\n      }\n      return cache[cacheProp];\n    },\n\n    /**\n     * measure and return the width of a single character.\n     * possibly overridden to accommodate different measure logic or\n     * to hook some external lib for character measurement\n     * @private\n     * @param {String} _char, char to be measured\n     * @param {Object} charStyle style of char to be measured\n     * @param {String} [previousChar] previous char\n     * @param {Object} [prevCharStyle] style of previous char\n     */\n    _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\n      // first i try to return from cache\n      var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\n          previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\n          stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\n          fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\n\n      if (previousChar && fontCache[previousChar] !== undefined) {\n        previousWidth = fontCache[previousChar];\n      }\n      if (fontCache[_char] !== undefined) {\n        kernedWidth = width = fontCache[_char];\n      }\n      if (stylesAreEqual && fontCache[couple] !== undefined) {\n        coupleWidth = fontCache[couple];\n        kernedWidth = coupleWidth - previousWidth;\n      }\n      if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\n        var ctx = this.getMeasuringContext();\n        // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n        this._setTextStyles(ctx, charStyle, true);\n      }\n      if (width === undefined) {\n        kernedWidth = width = ctx.measureText(_char).width;\n        fontCache[_char] = width;\n      }\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\n        previousWidth = ctx.measureText(previousChar).width;\n        fontCache[previousChar] = previousWidth;\n      }\n      if (stylesAreEqual && coupleWidth === undefined) {\n        // we can measure the kerning couple and subtract the width of the previous character\n        coupleWidth = ctx.measureText(couple).width;\n        fontCache[couple] = coupleWidth;\n        kernedWidth = coupleWidth - previousWidth;\n      }\n      return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\n    },\n\n    /**\n     * Computes height of character at given position\n     * @param {Number} line the line index number\n     * @param {Number} _char the character index number\n     * @return {Number} fontSize of the character\n     */\n    getHeightOfChar: function(line, _char) {\n      return this.getValueOfPropertyAt(line, _char, 'fontSize');\n    },\n\n    /**\n     * measure a text line measuring all characters.\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    measureLine: function(lineIndex) {\n      var lineInfo = this._measureLine(lineIndex);\n      if (this.charSpacing !== 0) {\n        lineInfo.width -= this._getWidthOfCharSpacing();\n      }\n      if (lineInfo.width < 0) {\n        lineInfo.width = 0;\n      }\n      return lineInfo;\n    },\n\n    /**\n     * measure every grapheme of a line, populating __charBounds\n     * @param {Number} lineIndex\n     * @return {Object} object.width total width of characters\n     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\n     */\n    _measureLine: function(lineIndex) {\n      var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\n          graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length),\n          positionInPath = 0, startingPoint, totalPathLength, path = this.path,\n          reverse = this.pathSide === 'right';\n\n      this.__charBounds[lineIndex] = lineBounds;\n      for (i = 0; i < line.length; i++) {\n        grapheme = line[i];\n        graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n        lineBounds[i] = graphemeInfo;\n        width += graphemeInfo.kernedWidth;\n        prevGrapheme = grapheme;\n      }\n      // this latest bound box represent the last character of the line\n      // to simplify cursor handling in interactive mode.\n      lineBounds[i] = {\n        left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n        width: 0,\n        kernedWidth: 0,\n        height: this.fontSize\n      };\n      if (path) {\n        totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;\n        startingPoint = fabric.util.getPointOnPath(path.path, 0, path.segmentsInfo);\n        startingPoint.x += path.pathOffset.x;\n        startingPoint.y += path.pathOffset.y;\n        switch (this.textAlign) {\n          case 'left':\n            positionInPath = reverse ? (totalPathLength - width) : 0;\n            break;\n          case 'center':\n            positionInPath = (totalPathLength - width) / 2;\n            break;\n          case 'right':\n            positionInPath = reverse ? 0 : (totalPathLength - width);\n            break;\n          //todo - add support for justify\n        }\n        positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n        for (i = reverse ? line.length - 1 : 0;\n          reverse ? i >= 0 : i < line.length;\n          reverse ? i-- : i++) {\n          graphemeInfo = lineBounds[i];\n          if (positionInPath > totalPathLength) {\n            positionInPath %= totalPathLength;\n          }\n          else if (positionInPath < 0) {\n            positionInPath += totalPathLength;\n          }\n          // it would probably much faster to send all the grapheme position for a line\n          // and calculate path position/angle at once.\n          this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);\n          positionInPath += graphemeInfo.kernedWidth;\n        }\n      }\n      return { width: width, numOfSpaces: numOfSpaces };\n    },\n\n    /**\n     * Calculate the angle  and the left,top position of the char that follow a path.\n     * It appends it to graphemeInfo to be reused later at rendering\n     * @private\n     * @param {Number} positionInPath to be measured\n     * @param {Object} graphemeInfo current grapheme box information\n     * @param {Object} startingPoint position of the point\n     */\n    _setGraphemeOnPath: function(positionInPath, graphemeInfo, startingPoint) {\n      var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\n          path = this.path;\n\n      // we are at currentPositionOnPath. we want to know what point on the path is.\n      var info = fabric.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);\n      graphemeInfo.renderLeft = info.x - startingPoint.x;\n      graphemeInfo.renderTop = info.y - startingPoint.y;\n      graphemeInfo.angle = info.angle + (this.pathSide ===  'right' ? Math.PI : 0);\n    },\n\n    /**\n     * Measure and return the info of a single grapheme.\n     * needs the the info of previous graphemes already filled\n     * @private\n     * @param {String} grapheme to be measured\n     * @param {Number} lineIndex index of the line where the char is\n     * @param {Number} charIndex position in the line\n     * @param {String} [prevGrapheme] character preceding the one to be measured\n     */\n    _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\n      var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n          prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\n          info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\n          kernedWidth = info.kernedWidth,\n          width = info.width, charSpacing;\n\n      if (this.charSpacing !== 0) {\n        charSpacing = this._getWidthOfCharSpacing();\n        width += charSpacing;\n        kernedWidth += charSpacing;\n      }\n\n      var box = {\n        width: width,\n        left: 0,\n        height: style.fontSize,\n        kernedWidth: kernedWidth,\n        deltaY: style.deltaY,\n      };\n      if (charIndex > 0 && !skipLeft) {\n        var previousBox = this.__charBounds[lineIndex][charIndex - 1];\n        box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\n      }\n      return box;\n    },\n\n    /**\n     * Calculate height of line at 'lineIndex'\n     * @param {Number} lineIndex index of line to calculate\n     * @return {Number}\n     */\n    getHeightOfLine: function(lineIndex) {\n      if (this.__lineHeights[lineIndex]) {\n        return this.__lineHeights[lineIndex];\n      }\n\n      var line = this._textLines[lineIndex],\n          // char 0 is measured before the line cycle because it nneds to char\n          // emptylines\n          maxHeight = this.getHeightOfChar(lineIndex, 0);\n      for (var i = 1, len = line.length; i < len; i++) {\n        maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n      }\n\n      return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n    },\n\n    /**\n     * Calculate text box height\n     */\n    calcTextHeight: function() {\n      var lineHeight, height = 0;\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        lineHeight = this.getHeightOfLine(i);\n        height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\n      }\n      return height;\n    },\n\n    /**\n     * @private\n     * @return {Number} Left offset\n     */\n    _getLeftOffset: function() {\n      return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\n    },\n\n    /**\n     * @private\n     * @return {Number} Top offset\n     */\n    _getTopOffset: function() {\n      return -this.height / 2;\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     */\n    _renderTextCommon: function(ctx, method) {\n      ctx.save();\n      var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset();\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        var heightOfLine = this.getHeightOfLine(i),\n            maxHeight = heightOfLine / this.lineHeight,\n            leftOffset = this._getLineLeftOffset(i);\n        this._renderTextLine(\n          method,\n          ctx,\n          this._textLines[i],\n          left + leftOffset,\n          top + lineHeights + maxHeight,\n          i\n        );\n        lineHeights += heightOfLine;\n      }\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextFill: function(ctx) {\n      if (!this.fill && !this.styleHas('fill')) {\n        return;\n      }\n\n      this._renderTextCommon(ctx, 'fillText');\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextStroke: function(ctx) {\n      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n        return;\n      }\n\n      if (this.shadow && !this.shadow.affectStroke) {\n        this._removeShadow(ctx);\n      }\n\n      ctx.save();\n      this._setLineDash(ctx, this.strokeDashArray);\n      ctx.beginPath();\n      this._renderTextCommon(ctx, 'strokeText');\n      ctx.closePath();\n      ctx.restore();\n    },\n\n    /**\n     * @private\n     * @param {String} method fillText or strokeText.\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} line Content of the line, splitted in an array by grapheme\n     * @param {Number} left\n     * @param {Number} top\n     * @param {Number} lineIndex\n     */\n    _renderChars: function(method, ctx, line, left, top, lineIndex) {\n      // set proper line offset\n      var lineHeight = this.getHeightOfLine(lineIndex),\n          isJustify = this.textAlign.indexOf('justify') !== -1,\n          actualStyle,\n          nextStyle,\n          charsToRender = '',\n          charBox,\n          boxWidth = 0,\n          timeToRender,\n          path = this.path,\n          shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path,\n          isLtr = this.direction === 'ltr', sign = this.direction === 'ltr' ? 1 : -1,\n          drawingLeft, currentDirection = ctx.canvas.getAttribute('dir');\n      ctx.save();\n      if (currentDirection !== this.direction) {\n        ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\n        ctx.direction = isLtr ? 'ltr' : 'rtl';\n        ctx.textAlign = isLtr ? 'left' : 'right';\n      }\n      top -= lineHeight * this._fontSizeFraction / this.lineHeight;\n      if (shortCut) {\n        // render all the line in one pass without checking\n        // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n        this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top, lineHeight);\n        ctx.restore();\n        return;\n      }\n      for (var i = 0, len = line.length - 1; i <= len; i++) {\n        timeToRender = i === len || this.charSpacing || path;\n        charsToRender += line[i];\n        charBox = this.__charBounds[lineIndex][i];\n        if (boxWidth === 0) {\n          left += sign * (charBox.kernedWidth - charBox.width);\n          boxWidth += charBox.width;\n        }\n        else {\n          boxWidth += charBox.kernedWidth;\n        }\n        if (isJustify && !timeToRender) {\n          if (this._reSpaceAndTab.test(line[i])) {\n            timeToRender = true;\n          }\n        }\n        if (!timeToRender) {\n          // if we have charSpacing, we render char by char\n          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n          timeToRender = fabric.util.hasStyleChanged(actualStyle, nextStyle, false);\n        }\n        if (timeToRender) {\n          if (path) {\n            ctx.save();\n            ctx.translate(charBox.renderLeft, charBox.renderTop);\n            ctx.rotate(charBox.angle);\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, -boxWidth / 2, 0, lineHeight);\n            ctx.restore();\n          }\n          else {\n            drawingLeft = left;\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, drawingLeft, top, lineHeight);\n          }\n          charsToRender = '';\n          actualStyle = nextStyle;\n          left += sign * boxWidth;\n          boxWidth = 0;\n        }\n      }\n      ctx.restore();\n    },\n\n    /**\n     * This function try to patch the missing gradientTransform on canvas gradients.\n     * transforming a context to transform the gradient, is going to transform the stroke too.\n     * we want to transform the gradient but not the stroke operation, so we create\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n     * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n     * is limited.\n     * @private\n     * @param {fabric.Gradient} filler a fabric gradient instance\n     * @return {CanvasPattern} a pattern to use as fill/stroke style\n     */\n    _applyPatternGradientTransformText: function(filler) {\n      var pCanvas = fabric.util.createCanvasElement(), pCtx,\n          // TODO: verify compatibility with strokeUniform\n          width = this.width + this.strokeWidth, height = this.height + this.strokeWidth;\n      pCanvas.width = width;\n      pCanvas.height = height;\n      pCtx = pCanvas.getContext('2d');\n      pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);\n      pCtx.lineTo(0, height); pCtx.closePath();\n      pCtx.translate(width / 2, height / 2);\n      pCtx.fillStyle = filler.toLive(pCtx);\n      this._applyPatternGradientTransform(pCtx, filler);\n      pCtx.fill();\n      return pCtx.createPattern(pCanvas, 'no-repeat');\n    },\n\n    handleFiller: function(ctx, property, filler) {\n      var offsetX, offsetY;\n      if (filler.toLive) {\n        if (filler.gradientUnits === 'percentage' || filler.gradientTransform || filler.patternTransform) {\n          // need to transform gradient in a pattern.\n          // this is a slow process. If you are hitting this codepath, and the object\n          // is not using caching, you should consider switching it on.\n          // we need a canvas as big as the current object caching canvas.\n          offsetX = -this.width / 2;\n          offsetY = -this.height / 2;\n          ctx.translate(offsetX, offsetY);\n          ctx[property] = this._applyPatternGradientTransformText(filler);\n          return { offsetX: offsetX, offsetY: offsetY };\n        }\n        else {\n          // is a simple gradient or pattern\n          ctx[property] = filler.toLive(ctx, this);\n          return this._applyPatternGradientTransform(ctx, filler);\n        }\n      }\n      else {\n        // is a color\n        ctx[property] = filler;\n      }\n      return { offsetX: 0, offsetY: 0 };\n    },\n\n    _setStrokeStyles: function(ctx, decl) {\n      ctx.lineWidth = decl.strokeWidth;\n      ctx.lineCap = this.strokeLineCap;\n      ctx.lineDashOffset = this.strokeDashOffset;\n      ctx.lineJoin = this.strokeLineJoin;\n      ctx.miterLimit = this.strokeMiterLimit;\n      return this.handleFiller(ctx, 'strokeStyle', decl.stroke);\n    },\n\n    _setFillStyles: function(ctx, decl) {\n      return this.handleFiller(ctx, 'fillStyle', decl.fill);\n    },\n\n    /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {String} _char\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     * @param {Number} lineHeight Height of the line\n     */\n    _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\n      var decl = this._getStyleDeclaration(lineIndex, charIndex),\n          fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\n          shouldFill = method === 'fillText' && fullDecl.fill,\n          shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth,\n          fillOffsets, strokeOffsets;\n\n      if (!shouldStroke && !shouldFill) {\n        return;\n      }\n      ctx.save();\n\n      shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));\n      shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));\n\n      ctx.font = this._getFontDeclaration(fullDecl);\n\n\n      if (decl && decl.textBackgroundColor) {\n        this._removeShadow(ctx);\n      }\n      if (decl && decl.deltaY) {\n        top += decl.deltaY;\n      }\n      shouldFill && ctx.fillText(_char, left - fillOffsets.offsetX, top - fillOffsets.offsetY);\n      shouldStroke && ctx.strokeText(_char, left - strokeOffsets.offsetX, top - strokeOffsets.offsetY);\n      ctx.restore();\n    },\n\n    /**\n     * Turns the character into a 'superior figure' (i.e. 'superscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    setSuperscript: function(start, end) {\n      return this._setScript(start, end, this.superscript);\n    },\n\n    /**\n     * Turns the character into an 'inferior figure' (i.e. 'subscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    setSubscript: function(start, end) {\n      return this._setScript(start, end, this.subscript);\n    },\n\n    /**\n     * Applies 'schema' at given position\n     * @private\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @param {Number} schema\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */\n    _setScript: function(start, end, schema) {\n      var loc = this.get2DCursorLocation(start, true),\n          fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\n          dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\n          style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\n      this.setSelectionStyles(style, start, end);\n      return this;\n    },\n\n    /**\n     * @private\n     * @param {Number} lineIndex index text line\n     * @return {Number} Line left offset\n     */\n    _getLineLeftOffset: function(lineIndex) {\n      var lineWidth = this.getLineWidth(lineIndex),\n          lineDiff = this.width - lineWidth, textAlign = this.textAlign, direction = this.direction,\n          isEndOfWrapping, leftOffset = 0, isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n      if (textAlign === 'justify'\n        || (textAlign === 'justify-center' && !isEndOfWrapping)\n        || (textAlign === 'justify-right' && !isEndOfWrapping)\n        || (textAlign === 'justify-left' && !isEndOfWrapping)\n      ) {\n        return 0;\n      }\n      if (textAlign === 'center') {\n        leftOffset = lineDiff / 2;\n      }\n      if (textAlign === 'right') {\n        leftOffset = lineDiff;\n      }\n      if (textAlign === 'justify-center') {\n        leftOffset = lineDiff / 2;\n      }\n      if (textAlign === 'justify-right') {\n        leftOffset = lineDiff;\n      }\n      if (direction === 'rtl') {\n        leftOffset -= lineDiff;\n      }\n      return leftOffset;\n    },\n\n    /**\n     * @private\n     */\n    _clearCache: function() {\n      this.__lineWidths = [];\n      this.__lineHeights = [];\n      this.__charBounds = [];\n    },\n\n    /**\n     * @private\n     */\n    _shouldClearDimensionCache: function() {\n      var shouldClear = this._forceClearCache;\n      shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\n      if (shouldClear) {\n        this.dirty = true;\n        this._forceClearCache = false;\n      }\n      return shouldClear;\n    },\n\n    /**\n     * Measure a single line given its index. Used to calculate the initial\n     * text bounding box. The values are calculated and stored in __lineWidths cache.\n     * @private\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */\n    getLineWidth: function(lineIndex) {\n      if (this.__lineWidths[lineIndex] !== undefined) {\n        return this.__lineWidths[lineIndex];\n      }\n\n      var lineInfo = this.measureLine(lineIndex);\n      var width = lineInfo.width;\n      this.__lineWidths[lineIndex] = width;\n      return width;\n    },\n\n    _getWidthOfCharSpacing: function() {\n      if (this.charSpacing !== 0) {\n        return this.fontSize * this.charSpacing / 1000;\n      }\n      return 0;\n    },\n\n    /**\n     * Retrieves the value of property at given character position\n     * @param {Number} lineIndex the line number\n     * @param {Number} charIndex the character number\n     * @param {String} property the property name\n     * @returns the value of 'property'\n     */\n    getValueOfPropertyAt: function(lineIndex, charIndex, property) {\n      var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n      if (charStyle && typeof charStyle[property] !== 'undefined') {\n        return charStyle[property];\n      }\n      return this[property];\n    },\n\n    /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    _renderTextDecoration: function(ctx, type) {\n      if (!this[type] && !this.styleHas(type)) {\n        return;\n      }\n      var heightOfLine, size, _size,\n          lineLeftOffset, dy, _dy,\n          line, lastDecoration,\n          leftOffset = this._getLeftOffset(),\n          topOffset = this._getTopOffset(), top,\n          boxStart, boxWidth, charBox, currentDecoration,\n          maxHeight, currentFill, lastFill, path = this.path,\n          charSpacing = this._getWidthOfCharSpacing(),\n          offsetY = this.offsets[type];\n\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\n        heightOfLine = this.getHeightOfLine(i);\n        if (!this[type] && !this.styleHas(type, i)) {\n          topOffset += heightOfLine;\n          continue;\n        }\n        line = this._textLines[i];\n        maxHeight = heightOfLine / this.lineHeight;\n        lineLeftOffset = this._getLineLeftOffset(i);\n        boxStart = 0;\n        boxWidth = 0;\n        lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n        lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\n        top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n        size = this.getHeightOfChar(i, 0);\n        dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\n          charBox = this.__charBounds[i][j];\n          currentDecoration = this.getValueOfPropertyAt(i, j, type);\n          currentFill = this.getValueOfPropertyAt(i, j, 'fill');\n          _size = this.getHeightOfChar(i, j);\n          _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\n          if (path && currentDecoration && currentFill) {\n            ctx.save();\n            ctx.fillStyle = lastFill;\n            ctx.translate(charBox.renderLeft, charBox.renderTop);\n            ctx.rotate(charBox.angle);\n            ctx.fillRect(\n              -charBox.kernedWidth / 2,\n              offsetY * _size + _dy,\n              charBox.kernedWidth,\n              this.fontSize / 15\n            );\n            ctx.restore();\n          }\n          else if (\n            (currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy)\n            && boxWidth > 0\n          ) {\n            var drawStart = leftOffset + lineLeftOffset + boxStart;\n            if (this.direction === 'rtl') {\n              drawStart = this.width - drawStart - boxWidth;\n            }\n            if (lastDecoration && lastFill) {\n              ctx.fillStyle = lastFill;\n              ctx.fillRect(\n                drawStart,\n                top + offsetY * size + dy,\n                boxWidth,\n                this.fontSize / 15\n              );\n            }\n            boxStart = charBox.left;\n            boxWidth = charBox.width;\n            lastDecoration = currentDecoration;\n            lastFill = currentFill;\n            size = _size;\n            dy = _dy;\n          }\n          else {\n            boxWidth += charBox.kernedWidth;\n          }\n        }\n        var drawStart = leftOffset + lineLeftOffset + boxStart;\n        if (this.direction === 'rtl') {\n          drawStart = this.width - drawStart - boxWidth;\n        }\n        ctx.fillStyle = currentFill;\n        currentDecoration && currentFill && ctx.fillRect(\n          drawStart,\n          top + offsetY * size + dy,\n          boxWidth - charSpacing,\n          this.fontSize / 15\n        );\n        topOffset += heightOfLine;\n      }\n      // if there is text background color no\n      // other shadows should be casted\n      this._removeShadow(ctx);\n    },\n\n    /**\n     * return font declaration string for canvas context\n     * @param {Object} [styleObject] object\n     * @returns {String} font declaration formatted for canvas context.\n     */\n    _getFontDeclaration: function(styleObject, forMeasuring) {\n      var style = styleObject || this, family = this.fontFamily,\n          fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\n      var fontFamily = family === undefined ||\n      family.indexOf('\\'') > -1 || family.indexOf(',') > -1 ||\n      family.indexOf('\"') > -1 || fontIsGeneric\n        ? style.fontFamily : '\"' + style.fontFamily + '\"';\n      return [\n        // node-canvas needs \"weight style\", while browsers need \"style weight\"\n        // verify if this can be fixed in JSDOM\n        (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\n        (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\n        forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\n        fontFamily\n      ].join(' ');\n    },\n\n    /**\n     * Renders text instance on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */\n    render: function(ctx) {\n      // do not render if object is not visible\n      if (!this.visible) {\n        return;\n      }\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n        return;\n      }\n      if (this._shouldClearDimensionCache()) {\n        this.initDimensions();\n      }\n      this.callSuper('render', ctx);\n    },\n\n    /**\n     * Returns the text as an array of lines.\n     * @param {String} text text to split\n     * @returns {Array} Lines in the text\n     */\n    _splitTextIntoLines: function(text) {\n      var lines = text.split(this._reNewline),\n          newLines = new Array(lines.length),\n          newLine = ['\\n'],\n          newText = [];\n      for (var i = 0; i < lines.length; i++) {\n        newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\n        newText = newText.concat(newLines[i], newLine);\n      }\n      newText.pop();\n      return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\n    },\n\n    /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function(propertiesToInclude) {\n      var allProperties = additionalProps.concat(propertiesToInclude);\n      var obj = this.callSuper('toObject', allProperties);\n      obj.styles = fabric.util.stylesToArray(this.styles, this.text);\n      if (obj.path) {\n        obj.path = this.path.toObject();\n      }\n      return obj;\n    },\n\n    /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */\n    set: function(key, value) {\n      this.callSuper('set', key, value);\n      var needsDims = false;\n      var isAddingPath = false;\n      if (typeof key === 'object') {\n        for (var _key in key) {\n          if (_key === 'path') {\n            this.setPathInfo();\n          }\n          needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\n          isAddingPath = isAddingPath || _key === 'path';\n        }\n      }\n      else {\n        needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\n        isAddingPath = key === 'path';\n      }\n      if (isAddingPath) {\n        this.setPathInfo();\n      }\n      if (needsDims) {\n        this.initDimensions();\n        this.setCoords();\n      }\n      return this;\n    },\n\n    /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */\n    complexity: function() {\n      return 1;\n    }\n  });\n\n  \n\n  /**\n   * Returns fabric.Text instance from an object representation\n   * @static\n   * @memberOf fabric.Text\n   * @param {Object} object plain js Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\n   */\n  fabric.Text.fromObject = function(object, callback) {\n    var objectCopy = clone(object), path = object.path;\n    delete objectCopy.path;\n    return fabric.Object._fromObject('Text', objectCopy, function(textInstance) {\n      textInstance.styles = fabric.util.stylesFromArray(object.styles, object.text);\n      if (path) {\n        fabric.Object._fromObject('Path', path, function(pathInstance) {\n          textInstance.set('path', pathInstance);\n          callback(textInstance);\n        }, 'path');\n      }\n      else {\n        callback(textInstance);\n      }\n    }, 'text');\n  };\n\n  fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\n\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\n\n})(typeof exports !== 'undefined' ? exports : this);\n(function() {\n  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n    /**\n     * Returns true if object has no styling or no styling in a line\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\n     * @return {Boolean}\n     */\n    isEmptyStyles: function(lineIndex) {\n      if (!this.styles) {\n        return true;\n      }\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n        return true;\n      }\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\n      for (var p1 in obj) {\n        for (var p2 in obj[p1]) {\n          // eslint-disable-next-line no-unused-vars\n          for (var p3 in obj[p1][p2]) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Returns true if object has a style property or has it ina specified line\n     * This function is used to detect if a text will use a particular property or not.\n     * @param {String} property to check for\n     * @param {Number} lineIndex to check the style on\n     * @return {Boolean}\n     */\n    styleHas: function(property, lineIndex) {\n      if (!this.styles || !property || property === '') {\n        return false;\n      }\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\n        return false;\n      }\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { 0: this.styles[lineIndex] };\n      // eslint-disable-next-line\n      for (var p1 in obj) {\n        // eslint-disable-next-line\n        for (var p2 in obj[p1]) {\n          if (typeof obj[p1][p2][property] !== 'undefined') {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Check if characters in a text have a value for a property\n     * whose value matches the textbox's value for that property.  If so,\n     * the character-level property is deleted.  If the character\n     * has no other properties, then it is also deleted.  Finally,\n     * if the line containing that character has no other characters\n     * then it also is deleted.\n     *\n     * @param {string} property The property to compare between characters and text.\n     */\n    cleanStyle: function(property) {\n      if (!this.styles || !property || property === '') {\n        return false;\n      }\n      var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\n          allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\n      // eslint-disable-next-line\n      for (var p1 in obj) {\n        letterCount = 0;\n        // eslint-disable-next-line\n        for (var p2 in obj[p1]) {\n          var styleObject = obj[p1][p2],\n              stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\n\n          stylesCount++;\n\n          if (stylePropertyHasBeenSet) {\n            if (!stylePropertyValue) {\n              stylePropertyValue = styleObject[property];\n            }\n            else if (styleObject[property] !== stylePropertyValue) {\n              allStyleObjectPropertiesMatch = false;\n            }\n\n            if (styleObject[property] === this[property]) {\n              delete styleObject[property];\n            }\n          }\n          else {\n            allStyleObjectPropertiesMatch = false;\n          }\n\n          if (Object.keys(styleObject).length !== 0) {\n            letterCount++;\n          }\n          else {\n            delete obj[p1][p2];\n          }\n        }\n\n        if (letterCount === 0) {\n          delete obj[p1];\n        }\n      }\n      // if every grapheme has the same style set then\n      // delete those styles and set it on the parent\n      for (var i = 0; i < this._textLines.length; i++) {\n        graphemeCount += this._textLines[i].length;\n      }\n      if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n        this[property] = stylePropertyValue;\n        this.removeStyle(property);\n      }\n    },\n\n    /**\n     * Remove a style property or properties from all individual character styles\n     * in a text object.  Deletes the character style object if it contains no other style\n     * props.  Deletes a line style object if it contains no other character styles.\n     *\n     * @param {String} props The property to remove from character styles.\n     */\n    removeStyle: function(property) {\n      if (!this.styles || !property || property === '') {\n        return;\n      }\n      var obj = this.styles, line, lineNum, charNum;\n      for (lineNum in obj) {\n        line = obj[lineNum];\n        for (charNum in line) {\n          delete line[charNum][property];\n          if (Object.keys(line[charNum]).length === 0) {\n            delete line[charNum];\n          }\n        }\n        if (Object.keys(line).length === 0) {\n          delete obj[lineNum];\n        }\n      }\n    },\n\n    /**\n     * @private\n     */\n    _extendStyles: function(index, styles) {\n      var loc = this.get2DCursorLocation(index);\n\n      if (!this._getLineStyle(loc.lineIndex)) {\n        this._setLineStyle(loc.lineIndex);\n      }\n\n      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n      }\n\n      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n    },\n\n    /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n     */\n    get2DCursorLocation: function(selectionStart, skipWrapping) {\n      if (typeof selectionStart === 'undefined') {\n        selectionStart = this.selectionStart;\n      }\n      var lines = skipWrapping ? this._unwrappedTextLines : this._textLines,\n          len = lines.length;\n      for (var i = 0; i < len; i++) {\n        if (selectionStart <= lines[i].length) {\n          return {\n            lineIndex: i,\n            charIndex: selectionStart\n          };\n        }\n        selectionStart -= lines[i].length + this.missingNewlineOffset(i);\n      }\n      return {\n        lineIndex: i - 1,\n        charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\n      };\n    },\n\n    /**\n     * Gets style of a current selection/cursor (at the start position)\n     * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @param {Boolean} [complete] get full style or not\n     * @return {Array} styles an array with one, zero or more Style objects\n     */\n    getSelectionStyles: function(startIndex, endIndex, complete) {\n      if (typeof startIndex === 'undefined') {\n        startIndex = this.selectionStart || 0;\n      }\n      if (typeof endIndex === 'undefined') {\n        endIndex = this.selectionEnd || startIndex;\n      }\n      var styles = [];\n      for (var i = startIndex; i < endIndex; i++) {\n        styles.push(this.getStyleAtPosition(i, complete));\n      }\n      return styles;\n    },\n\n    /**\n     * Gets style of a current selection/cursor position\n     * @param {Number} position  to get styles at\n     * @param {Boolean} [complete] full style if true\n     * @return {Object} style Style object at a specified index\n     * @private\n     */\n    getStyleAtPosition: function(position, complete) {\n      var loc = this.get2DCursorLocation(position),\n          style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\n            this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n      return style || {};\n    },\n\n    /**\n     * Sets style of a current selection, if no selection exist, do not set anything.\n     * @param {Object} [styles] Styles object\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */\n    setSelectionStyles: function(styles, startIndex, endIndex) {\n      if (typeof startIndex === 'undefined') {\n        startIndex = this.selectionStart || 0;\n      }\n      if (typeof endIndex === 'undefined') {\n        endIndex = this.selectionEnd || startIndex;\n      }\n      for (var i = startIndex; i < endIndex; i++) {\n        this._extendStyles(i, styles);\n      }\n      /* not included in _extendStyles to avoid clearing cache more than once */\n      this._forceClearCache = true;\n      return this;\n    },\n\n    /**\n     * get the reference, not a clone, of the style object for a given character\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @return {Object} style object\n     */\n    _getStyleDeclaration: function(lineIndex, charIndex) {\n      var lineStyle = this.styles && this.styles[lineIndex];\n      if (!lineStyle) {\n        return null;\n      }\n      return lineStyle[charIndex];\n    },\n\n    /**\n     * return a new object that contains all the style property for a character\n     * the object returned is newly created\n     * @param {Number} lineIndex of the line where the character is\n     * @param {Number} charIndex position of the character on the line\n     * @return {Object} style object\n     */\n    getCompleteStyleDeclaration: function(lineIndex, charIndex) {\n      var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\n          styleObject = { }, prop;\n      for (var i = 0; i < this._styleProperties.length; i++) {\n        prop = this._styleProperties[i];\n        styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\n      }\n      return styleObject;\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\n      this.styles[lineIndex][charIndex] = style;\n    },\n\n    /**\n     *\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\n      delete this.styles[lineIndex][charIndex];\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @return {Boolean} if the line exists or not\n     * @private\n     */\n    _getLineStyle: function(lineIndex) {\n      return !!this.styles[lineIndex];\n    },\n\n    /**\n     * Set the line style to an empty object so that is initialized\n     * @param {Number} lineIndex\n     * @private\n     */\n    _setLineStyle: function(lineIndex) {\n      this.styles[lineIndex] = {};\n    },\n\n    /**\n     * @param {Number} lineIndex\n     * @private\n     */\n    _deleteLineStyle: function(lineIndex) {\n      delete this.styles[lineIndex];\n    }\n  });\n})();\n(function() {\n\n  var controlsUtils = fabric.controlsUtils,\n      scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler,\n      scaleStyleHandler = controlsUtils.scaleCursorStyleHandler,\n      scalingEqually = controlsUtils.scalingEqually,\n      scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX,\n      scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY,\n      scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName,\n      objectControls = fabric.Object.prototype.controls;\n\n  objectControls.ml = new fabric.Control({\n    x: -0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  });\n\n  objectControls.mr = new fabric.Control({\n    x: 0.5,\n    y: 0,\n    cursorStyleHandler: scaleSkewStyleHandler,\n    actionHandler: scalingXOrSkewingY,\n    getActionName: scaleOrSkewActionName,\n  });\n\n  objectControls.mb = new fabric.Control({\n    x: 0,\n    y: 0.5,\n    cursorStyleHandler: scaleSkewStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  });\n\n  objectControls.mt = new fabric.Control({\n    x: 0,\n    y: -0.5,\n    cursorStyleHandler: scaleSkewStyleHandler,\n    actionHandler: scalingYOrSkewingX,\n    getActionName: scaleOrSkewActionName,\n  });\n\n  objectControls.tl = new fabric.Control({\n    x: -0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleStyleHandler,\n    actionHandler: scalingEqually\n  });\n\n  objectControls.tr = new fabric.Control({\n    x: 0.5,\n    y: -0.5,\n    cursorStyleHandler: scaleStyleHandler,\n    actionHandler: scalingEqually\n  });\n\n  objectControls.bl = new fabric.Control({\n    x: -0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleStyleHandler,\n    actionHandler: scalingEqually\n  });\n\n  objectControls.br = new fabric.Control({\n    x: 0.5,\n    y: 0.5,\n    cursorStyleHandler: scaleStyleHandler,\n    actionHandler: scalingEqually\n  });\n\n  objectControls.mtr = new fabric.Control({\n    x: 0,\n    y: -0.5,\n    actionHandler: controlsUtils.rotationWithSnapping,\n    cursorStyleHandler: controlsUtils.rotationStyleHandler,\n    offsetY: -40,\n    withConnection: true,\n    actionName: 'rotate',\n  });\n\n  if (fabric.Textbox) {\n    // this is breaking the prototype inheritance, no time / ideas to fix it.\n    // is important to document that if you want to have all objects to have a\n    // specific custom control, you have to add it to Object prototype and to Textbox\n    // prototype. The controls are shared as references. So changes to control `tr`\n    // can still apply to all objects if needed.\n    var textBoxControls = fabric.Textbox.prototype.controls = { };\n\n    textBoxControls.mtr = objectControls.mtr;\n    textBoxControls.tr = objectControls.tr;\n    textBoxControls.br = objectControls.br;\n    textBoxControls.tl = objectControls.tl;\n    textBoxControls.bl = objectControls.bl;\n    textBoxControls.mt = objectControls.mt;\n    textBoxControls.mb = objectControls.mb;\n\n    textBoxControls.mr = new fabric.Control({\n      x: 0.5,\n      y: 0,\n      actionHandler: controlsUtils.changeWidth,\n      cursorStyleHandler: scaleSkewStyleHandler,\n      actionName: 'resizing',\n    });\n\n    textBoxControls.ml = new fabric.Control({\n      x: -0.5,\n      y: 0,\n      actionHandler: controlsUtils.changeWidth,\n      cursorStyleHandler: scaleSkewStyleHandler,\n      actionName: 'resizing',\n    });\n  }\n})();\n(function () {\n  /** ERASER_START */\n\n  /**\n   * add `eraser` to enlivened props\n   */\n  fabric.Object.ENLIVEN_PROPS.push('eraser');\n\n  var __drawClipPath = fabric.Object.prototype._drawClipPath;\n  var _needsItsOwnCache = fabric.Object.prototype.needsItsOwnCache;\n  var _toObject = fabric.Object.prototype.toObject;\n  var _getSvgCommons = fabric.Object.prototype.getSvgCommons;\n  var __createBaseClipPathSVGMarkup = fabric.Object.prototype._createBaseClipPathSVGMarkup;\n  var __createBaseSVGMarkup = fabric.Object.prototype._createBaseSVGMarkup;\n\n  fabric.Object.prototype.cacheProperties.push('eraser');\n  fabric.Object.prototype.stateProperties.push('eraser');\n\n  /**\n   * @fires erasing:end\n   */\n  fabric.util.object.extend(fabric.Object.prototype, {\n    /**\n     * Indicates whether this object can be erased by {@link fabric.EraserBrush}\n     * The `deep` option introduces fine grained control over a group's `erasable` property.\n     * When set to `deep` the eraser will erase nested objects if they are erasable, leaving the group and the other objects untouched.\n     * When set to `true` the eraser will erase the entire group. Once the group changes the eraser is propagated to its children for proper functionality.\n     * When set to `false` the eraser will leave all objects including the group untouched.\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\n     * @type boolean | 'deep'\n     * @default true\n     */\n    erasable: true,\n\n    /**\n     * @tutorial {@link http://fabricjs.com/erasing#eraser}\n     * @type fabric.Eraser\n     */\n    eraser: undefined,\n\n    /**\n     * @override\n     * @returns Boolean\n     */\n    needsItsOwnCache: function () {\n      return _needsItsOwnCache.call(this) || !!this.eraser;\n    },\n\n    /**\n     * draw eraser above clip path\n     * @override\n     * @private\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {fabric.Object} clipPath\n     */\n    _drawClipPath: function (ctx, clipPath) {\n      __drawClipPath.call(this, ctx, clipPath);\n      if (this.eraser) {\n        //  update eraser size to match instance\n        var size = this._getNonTransformedDimensions();\n        this.eraser.isType('eraser') && this.eraser.set({\n          width: size.x,\n          height: size.y\n        });\n        __drawClipPath.call(this, ctx, this.eraser);\n      }\n    },\n\n    /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */\n    toObject: function (propertiesToInclude) {\n      var object = _toObject.call(this, ['erasable'].concat(propertiesToInclude));\n      if (this.eraser && !this.eraser.excludeFromExport) {\n        object.eraser = this.eraser.toObject(propertiesToInclude);\n      }\n      return object;\n    },\n\n    \n  });\n\n  var __restoreObjectsState = fabric.Group.prototype._restoreObjectsState;\n  fabric.util.object.extend(fabric.Group.prototype, {\n    /**\n     * @private\n     * @param {fabric.Path} path\n     */\n    _addEraserPathToObjects: function (path) {\n      this._objects.forEach(function (object) {\n        fabric.EraserBrush.prototype._addPathToObjectEraser.call(\n          fabric.EraserBrush.prototype,\n          object,\n          path\n        );\n      });\n    },\n\n    /**\n     * Applies the group's eraser to its objects\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\n     */\n    applyEraserToObjects: function () {\n      var _this = this, eraser = this.eraser;\n      if (eraser) {\n        delete this.eraser;\n        var transform = _this.calcTransformMatrix();\n        eraser.clone(function (eraser) {\n          var clipPath = _this.clipPath;\n          eraser.getObjects('path')\n            .forEach(function (path) {\n              //  first we transform the path from the group's coordinate system to the canvas'\n              var originalTransform = fabric.util.multiplyTransformMatrices(\n                transform,\n                path.calcTransformMatrix()\n              );\n              fabric.util.applyTransformToObject(path, originalTransform);\n              if (clipPath) {\n                clipPath.clone(function (_clipPath) {\n                  var eraserPath = fabric.EraserBrush.prototype.applyClipPathToPath.call(\n                    fabric.EraserBrush.prototype,\n                    path,\n                    _clipPath,\n                    transform\n                  );\n                  _this._addEraserPathToObjects(eraserPath);\n                }, ['absolutePositioned', 'inverted']);\n              }\n              else {\n                _this._addEraserPathToObjects(path);\n              }\n            });\n        });\n      }\n    },\n\n    /**\n     * Propagate the group's eraser to its objects, crucial for proper functionality of the eraser within the group and nested objects.\n     * @private\n     */\n    _restoreObjectsState: function () {\n      this.erasable === true && this.applyEraserToObjects();\n      return __restoreObjectsState.call(this);\n    }\n  });\n\n  /**\n   * An object's Eraser\n   * @private\n   * @class fabric.Eraser\n   * @extends fabric.Group\n   * @memberof fabric\n   */\n  fabric.Eraser = fabric.util.createClass(fabric.Group, {\n    /**\n     * @readonly\n     * @static\n     */\n    type: 'eraser',\n\n    /**\n     * @default\n     */\n    originX: 'center',\n\n    /**\n     * @default\n     */\n    originY: 'center',\n\n    drawObject: function (ctx) {\n      ctx.save();\n      ctx.fillStyle = 'black';\n      ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n      ctx.restore();\n      this.callSuper('drawObject', ctx);\n    },\n\n    /**\n     * eraser should retain size\n     * dimensions should not change when paths are added or removed\n     * handled by {@link fabric.Object#_drawClipPath}\n     * @override\n     * @private\n     */\n    _getBounds: function () {\n      //  noop\n    },\n\n    \n  });\n\n  /**\n   * Returns {@link fabric.Eraser} instance from an object representation\n   * @static\n   * @memberOf fabric.Eraser\n   * @param {Object} object Object to create an Eraser from\n   * @param {Function} [callback] Callback to invoke when an eraser instance is created\n   */\n  fabric.Eraser.fromObject = function (object, callback) {\n    var objects = object.objects;\n    fabric.util.enlivenObjects(objects, function (enlivenedObjects) {\n      var options = fabric.util.object.clone(object, true);\n      delete options.objects;\n      fabric.util.enlivenObjectEnlivables(object, options, function () {\n        callback && callback(new fabric.Eraser(enlivenedObjects, options, true));\n      });\n    });\n  };\n\n  var __renderOverlay = fabric.Canvas.prototype._renderOverlay;\n  /**\n   * @fires erasing:start\n   * @fires erasing:end\n   */\n  fabric.util.object.extend(fabric.Canvas.prototype, {\n    /**\n     * Used by {@link #renderAll}\n     * @returns boolean\n     */\n    isErasing: function () {\n      return (\n        this.isDrawingMode &&\n        this.freeDrawingBrush &&\n        this.freeDrawingBrush.type === 'eraser' &&\n        this.freeDrawingBrush._isErasing\n      );\n    },\n\n    /**\n     * While erasing the brush clips out the erasing path from canvas\n     * so we need to render it on top of canvas every render\n     * @param {CanvasRenderingContext2D} ctx\n     */\n    _renderOverlay: function (ctx) {\n      __renderOverlay.call(this, ctx);\n      if (this.isErasing() && !this.freeDrawingBrush.inverted) {\n        this.freeDrawingBrush._render();\n      }\n    }\n  });\n\n  /**\n   * EraserBrush class\n   * Supports selective erasing meaning that only erasable objects are affected by the eraser brush.\n   * Supports **inverted** erasing meaning that the brush can \"undo\" erasing.\n   *\n   * In order to support selective erasing, the brush clips the entire canvas\n   * and then draws all non-erasable objects over the erased path using a pattern brush so to speak (masking).\n   * If brush is **inverted** there is no need to clip canvas. The brush draws all erasable objects without their eraser.\n   * This achieves the desired effect of seeming to erase or unerase only erasable objects.\n   * After erasing is done the created path is added to all intersected objects' `eraser` property.\n   *\n   * In order to update the EraserBrush call `preparePattern`.\n   * It may come in handy when canvas changes during erasing (i.e animations) and you want the eraser to reflect the changes.\n   *\n   * @tutorial {@link http://fabricjs.com/erasing}\n   * @class fabric.EraserBrush\n   * @extends fabric.PencilBrush\n   * @memberof fabric\n   */\n  fabric.EraserBrush = fabric.util.createClass(\n    fabric.PencilBrush,\n    /** @lends fabric.EraserBrush.prototype */ {\n      type: 'eraser',\n\n      /**\n       * When set to `true` the brush will create a visual effect of undoing erasing\n       */\n      inverted: false,\n\n      /**\n       * @private\n       */\n      _isErasing: false,\n\n      /**\n       *\n       * @private\n       * @param {fabric.Object} object\n       * @returns boolean\n       */\n      _isErasable: function (object) {\n        return object.erasable !== false;\n      },\n\n      /**\n       * @private\n       * This is designed to support erasing a collection with both erasable and non-erasable objects.\n       * Iterates over collections to allow nested selective erasing.\n       * Prepares the pattern brush that will draw on the top context to achieve the desired visual effect.\n       * If brush is **NOT** inverted render all non-erasable objects.\n       * If brush is inverted render all erasable objects that have been erased with their clip path inverted.\n       * This will render the erased parts as if they were not erased.\n       *\n       * @param {fabric.Collection} collection\n       * @param {CanvasRenderingContext2D} ctx\n       * @param {{ visibility: fabric.Object[], eraser: fabric.Object[], collection: fabric.Object[] }} restorationContext\n       */\n      _prepareCollectionTraversal: function (collection, ctx, restorationContext) {\n        collection.forEachObject(function (obj) {\n          if (obj.forEachObject && obj.erasable === 'deep') {\n            //  traverse\n            this._prepareCollectionTraversal(obj, ctx, restorationContext);\n          }\n          else if (!this.inverted && obj.erasable && obj.visible) {\n            //  render only non-erasable objects\n            obj.visible = false;\n            collection.dirty = true;\n            restorationContext.visibility.push(obj);\n            restorationContext.collection.push(collection);\n          }\n          else if (this.inverted && obj.visible) {\n            //  render only erasable objects that were erased\n            if (obj.erasable && obj.eraser) {\n              obj.eraser.inverted = true;\n              obj.dirty = true;\n              collection.dirty = true;\n              restorationContext.eraser.push(obj);\n              restorationContext.collection.push(collection);\n            }\n            else {\n              obj.visible = false;\n              collection.dirty = true;\n              restorationContext.visibility.push(obj);\n              restorationContext.collection.push(collection);\n            }\n          }\n        }, this);\n      },\n\n      /**\n       * Prepare the pattern for the erasing brush\n       * This pattern will be drawn on the top context, achieving a visual effect of erasing only erasable objects\n       * @todo decide how overlay color should behave when `inverted === true`, currently draws over it which is undesirable\n       * @private\n       */\n      preparePattern: function () {\n        if (!this._patternCanvas) {\n          this._patternCanvas = fabric.util.createCanvasElement();\n        }\n        var canvas = this._patternCanvas;\n        canvas.width = this.canvas.width;\n        canvas.height = this.canvas.height;\n        var patternCtx = canvas.getContext('2d');\n        if (this.canvas._isRetinaScaling()) {\n          var retinaScaling = this.canvas.getRetinaScaling();\n          this.canvas.__initRetinaScaling(retinaScaling, canvas, patternCtx);\n        }\n        var backgroundImage = this.canvas.backgroundImage,\n            bgErasable = backgroundImage && this._isErasable(backgroundImage),\n            overlayImage = this.canvas.overlayImage,\n            overlayErasable = overlayImage && this._isErasable(overlayImage);\n        if (!this.inverted && ((backgroundImage && !bgErasable) || !!this.canvas.backgroundColor)) {\n          if (bgErasable) { this.canvas.backgroundImage = undefined; }\n          this.canvas._renderBackground(patternCtx);\n          if (bgErasable) { this.canvas.backgroundImage = backgroundImage; }\n        }\n        else if (this.inverted && (backgroundImage && bgErasable)) {\n          var color = this.canvas.backgroundColor;\n          this.canvas.backgroundColor = undefined;\n          this.canvas._renderBackground(patternCtx);\n          this.canvas.backgroundColor = color;\n        }\n        patternCtx.save();\n        patternCtx.transform.apply(patternCtx, this.canvas.viewportTransform);\n        var restorationContext = { visibility: [], eraser: [], collection: [] };\n        this._prepareCollectionTraversal(this.canvas, patternCtx, restorationContext);\n        this.canvas._renderObjects(patternCtx, this.canvas._objects);\n        restorationContext.visibility.forEach(function (obj) { obj.visible = true; });\n        restorationContext.eraser.forEach(function (obj) {\n          obj.eraser.inverted = false;\n          obj.dirty = true;\n        });\n        restorationContext.collection.forEach(function (obj) { obj.dirty = true; });\n        patternCtx.restore();\n        if (!this.inverted && ((overlayImage && !overlayErasable) || !!this.canvas.overlayColor)) {\n          if (overlayErasable) { this.canvas.overlayImage = undefined; }\n          __renderOverlay.call(this.canvas, patternCtx);\n          if (overlayErasable) { this.canvas.overlayImage = overlayImage; }\n        }\n        else if (this.inverted && (overlayImage && overlayErasable)) {\n          var color = this.canvas.overlayColor;\n          this.canvas.overlayColor = undefined;\n          __renderOverlay.call(this.canvas, patternCtx);\n          this.canvas.overlayColor = color;\n        }\n      },\n\n      /**\n       * Sets brush styles\n       * @private\n       * @param {CanvasRenderingContext2D} ctx\n       */\n      _setBrushStyles: function (ctx) {\n        this.callSuper('_setBrushStyles', ctx);\n        ctx.strokeStyle = 'black';\n      },\n\n      /**\n       * **Customiztion**\n       *\n       * if you need the eraser to update on each render (i.e animating during erasing) override this method by **adding** the following (performance may suffer):\n       * @example\n       * ```\n       * if(ctx === this.canvas.contextTop) {\n       *  this.preparePattern();\n       * }\n       * ```\n       *\n       * @override fabric.BaseBrush#_saveAndTransform\n       * @param {CanvasRenderingContext2D} ctx\n       */\n      _saveAndTransform: function (ctx) {\n        this.callSuper('_saveAndTransform', ctx);\n        this._setBrushStyles(ctx);\n        ctx.globalCompositeOperation = ctx === this.canvas.getContext() ? 'destination-out' : 'source-over';\n      },\n\n      /**\n       * We indicate {@link fabric.PencilBrush} to repaint itself if necessary\n       * @returns\n       */\n      needsFullRender: function () {\n        return true;\n      },\n\n      /**\n       *\n       * @param {fabric.Point} pointer\n       * @param {fabric.IEvent} options\n       * @returns\n       */\n      onMouseDown: function (pointer, options) {\n        if (!this.canvas._isMainEvent(options.e)) {\n          return;\n        }\n        this._prepareForDrawing(pointer);\n        // capture coordinates immediately\n        // this allows to draw dots (when movement never occurs)\n        this._captureDrawingPath(pointer);\n\n        //  prepare for erasing\n        this.preparePattern();\n        this._isErasing = true;\n        this.canvas.fire('erasing:start');\n        this._render();\n      },\n\n      /**\n       * Rendering Logic:\n       * 1. Use brush to clip canvas by rendering it on top of canvas (unnecessary if `inverted === true`)\n       * 2. Render brush with canvas pattern on top context\n       *\n       */\n      _render: function () {\n        var ctx;\n        if (!this.inverted) {\n          //  clip canvas\n          ctx = this.canvas.getContext();\n          this.callSuper('_render', ctx);\n        }\n        //  render brush and mask it with image of non erasables\n        ctx = this.canvas.contextTop;\n        this.canvas.clearContext(ctx);\n        this.callSuper('_render', ctx);\n        ctx.save();\n        var t = this.canvas.getRetinaScaling(), s = 1 / t;\n        ctx.scale(s, s);\n        ctx.globalCompositeOperation = 'source-in';\n        ctx.drawImage(this._patternCanvas, 0, 0);\n        ctx.restore();\n      },\n\n      /**\n       * Creates fabric.Path object\n       * @override\n       * @private\n       * @param {(string|number)[][]} pathData Path data\n       * @return {fabric.Path} Path to add on canvas\n       * @returns\n       */\n      createPath: function (pathData) {\n        var path = this.callSuper('createPath', pathData);\n        path.globalCompositeOperation = this.inverted ? 'source-over' : 'destination-out';\n        path.stroke = this.inverted ? 'white' : 'black';\n        return path;\n      },\n\n      /**\n       * Utility to apply a clip path to a path.\n       * Used to preserve clipping on eraser paths in nested objects.\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\n       * @param {fabric.Path} path The eraser path in canvas coordinate plane\n       * @param {fabric.Object} clipPath The clipPath to apply to the path\n       * @param {number[]} clipPathContainerTransformMatrix The transform matrix of the object that the clip path belongs to\n       * @returns {fabric.Path} path with clip path\n       */\n      applyClipPathToPath: function (path, clipPath, clipPathContainerTransformMatrix) {\n        var pathInvTransform = fabric.util.invertTransform(path.calcTransformMatrix()),\n            clipPathTransform = clipPath.calcTransformMatrix(),\n            transform = clipPath.absolutePositioned ?\n              pathInvTransform :\n              fabric.util.multiplyTransformMatrices(\n                pathInvTransform,\n                clipPathContainerTransformMatrix\n              );\n        //  when passing down a clip path it becomes relative to the parent\n        //  so we transform it acoordingly and set `absolutePositioned` to false\n        clipPath.absolutePositioned = false;\n        fabric.util.applyTransformToObject(\n          clipPath,\n          fabric.util.multiplyTransformMatrices(\n            transform,\n            clipPathTransform\n          )\n        );\n        //  We need to clip `path` with both `clipPath` and it's own clip path if existing (`path.clipPath`)\n        //  so in turn `path` erases an object only where it overlaps with all it's clip paths, regardless of how many there are.\n        //  this is done because both clip paths may have nested clip paths of their own (this method walks down a collection => this may reccur),\n        //  so we can't assign one to the other's clip path property.\n        path.clipPath = path.clipPath ? fabric.util.mergeClipPaths(clipPath, path.clipPath) : clipPath;\n        return path;\n      },\n\n      /**\n       * Utility to apply a clip path to a path.\n       * Used to preserve clipping on eraser paths in nested objects.\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\n       * @param {fabric.Path} path The eraser path\n       * @param {fabric.Object} object The clipPath to apply to path belongs to object\n       * @param {Function} callback Callback to be invoked with the cloned path after applying the clip path\n       */\n      clonePathWithClipPath: function (path, object, callback) {\n        var objTransform = object.calcTransformMatrix();\n        var clipPath = object.clipPath;\n        var _this = this;\n        path.clone(function (_path) {\n          clipPath.clone(function (_clipPath) {\n            callback(_this.applyClipPathToPath(_path, _clipPath, objTransform));\n          }, ['absolutePositioned', 'inverted']);\n        });\n      },\n\n      /**\n       * Adds path to object's eraser, walks down object's descendants if necessary\n       *\n       * @fires erasing:end on object\n       * @param {fabric.Object} obj\n       * @param {fabric.Path} path\n       */\n      _addPathToObjectEraser: function (obj, path) {\n        var _this = this;\n        //  object is collection, i.e group\n        if (obj.forEachObject && obj.erasable === 'deep') {\n          var targets = obj._objects.filter(function (_obj) {\n            return _obj.erasable;\n          });\n          if (targets.length > 0 && obj.clipPath) {\n            this.clonePathWithClipPath(path, obj, function (_path) {\n              targets.forEach(function (_obj) {\n                _this._addPathToObjectEraser(_obj, _path);\n              });\n            });\n          }\n          else if (targets.length > 0) {\n            targets.forEach(function (_obj) {\n              _this._addPathToObjectEraser(_obj, path);\n            });\n          }\n          return;\n        }\n        //  prepare eraser\n        var eraser = obj.eraser;\n        if (!eraser) {\n          eraser = new fabric.Eraser();\n          obj.eraser = eraser;\n        }\n        //  clone and add path\n        path.clone(function (path) {\n          // http://fabricjs.com/using-transformations\n          var desiredTransform = fabric.util.multiplyTransformMatrices(\n            fabric.util.invertTransform(\n              obj.calcTransformMatrix()\n            ),\n            path.calcTransformMatrix()\n          );\n          fabric.util.applyTransformToObject(path, desiredTransform);\n          eraser.addWithUpdate(path);\n          obj.set('dirty', true);\n          obj.fire('erasing:end', {\n            path: path\n          });\n          if (obj.group && Array.isArray(_this.__subTargets)) {\n            _this.__subTargets.push(obj);\n          }\n        });\n      },\n\n      /**\n       * Add the eraser path to canvas drawables' clip paths\n       *\n       * @param {fabric.Canvas} source\n       * @param {fabric.Canvas} path\n       * @returns {Object} canvas drawables that were erased by the path\n       */\n      applyEraserToCanvas: function (path) {\n        var canvas = this.canvas;\n        var drawables = {};\n        [\n          'backgroundImage',\n          'overlayImage',\n        ].forEach(function (prop) {\n          var drawable = canvas[prop];\n          if (drawable && drawable.erasable) {\n            this._addPathToObjectEraser(drawable, path);\n            drawables[prop] = drawable;\n          }\n        }, this);\n        return drawables;\n      },\n\n      /**\n       * On mouseup after drawing the path on contextTop canvas\n       * we use the points captured to create an new fabric path object\n       * and add it to every intersected erasable object.\n       */\n      _finalizeAndAddPath: function () {\n        var ctx = this.canvas.contextTop, canvas = this.canvas;\n        ctx.closePath();\n        if (this.decimate) {\n          this._points = this.decimatePoints(this._points, this.decimate);\n        }\n\n        // clear\n        canvas.clearContext(canvas.contextTop);\n        this._isErasing = false;\n\n        var pathData = this._points && this._points.length > 1 ?\n          this.convertPointsToSVGPath(this._points) :\n          null;\n        if (!pathData || this._isEmptySVGPath(pathData)) {\n          canvas.fire('erasing:end');\n          // do not create 0 width/height paths, as they are\n          // rendered inconsistently across browsers\n          // Firefox 4, for example, renders a dot,\n          // whereas Chrome 10 renders nothing\n          canvas.requestRenderAll();\n          return;\n        }\n\n        var path = this.createPath(pathData);\n        //  needed for `intersectsWithObject`\n        path.setCoords();\n        //  commense event sequence\n        canvas.fire('before:path:created', { path: path });\n\n        // finalize erasing\n        var drawables = this.applyEraserToCanvas(path);\n        var _this = this;\n        this.__subTargets = [];\n        var targets = [];\n        canvas.forEachObject(function (obj) {\n          if (obj.erasable && obj.intersectsWithObject(path, true, true)) {\n            _this._addPathToObjectEraser(obj, path);\n            targets.push(obj);\n          }\n        });\n        //  fire erasing:end\n        canvas.fire('erasing:end', {\n          path: path,\n          targets: targets,\n          subTargets: this.__subTargets,\n          drawables: drawables\n        });\n        delete this.__subTargets;\n\n        canvas.requestRenderAll();\n        this._resetShadow();\n\n        // fire event 'path' created\n        canvas.fire('path:created', { path: path });\n      }\n    }\n  );\n\n  /** ERASER_END */\n})();\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[405],{\n\n/***/ 8312:\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {\n\n\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(7381);\n      }\n    ]);\n    if(false) {}\n  \n\n/***/ }),\n\n/***/ 7381:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ HomePage; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(5893);\n// EXTERNAL MODULE: ./node_modules/next/head.js\nvar head = __webpack_require__(9008);\nvar head_default = /*#__PURE__*/__webpack_require__.n(head);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n;// CONCATENATED MODULE: ./src/useCanvas.ts\n\nconst CanvasContext = react.createContext(null);\nCanvasContext.displayName = \"CanvasContext\";\n\nfunction useCanvas(canvasId) {\n    const context = (0,react.useContext)(CanvasContext);\n    if (!context) {\n        throw new Error(\"No CanvasContext.Provider\");\n    }\n    if (typeof canvasId === \"undefined\") {\n        return context;\n    } else if (canvasId == null) {\n        return {};\n    } else {\n        var _context_canvases_canvasId;\n        return (_context_canvases_canvasId = context.canvases[canvasId]) !== null && _context_canvases_canvasId !== void 0 ? _context_canvases_canvasId : {};\n    }\n}\n/* harmony default export */ var src_useCanvas = (useCanvas);\n\n;// CONCATENATED MODULE: ./src/useTools.ts\n\nconst ToolsContext = react.createContext(null);\nToolsContext.displayName = \"ToolsContext\";\n\nfunction useTools() {\n    const context = (0,react.useContext)(ToolsContext);\n    if (!context) {\n        throw new Error(\"No ToolsContext.Provider\");\n    }\n    return context;\n}\n\n// EXTERNAL MODULE: ./node_modules/react-popper/lib/esm/usePopper.js + 55 modules\nvar usePopper = __webpack_require__(5237);\n// EXTERNAL MODULE: ./node_modules/rc-slider/es/index.js + 36 modules\nvar es = __webpack_require__(6863);\n// EXTERNAL MODULE: ./node_modules/react-icons/ri/index.esm.js\nvar index_esm = __webpack_require__(9352);\n// EXTERNAL MODULE: ./node_modules/react-icons/fa/index.esm.js\nvar fa_index_esm = __webpack_require__(9583);\n// EXTERNAL MODULE: ./node_modules/react-icons/go/index.esm.js\nvar go_index_esm = __webpack_require__(6653);\n// EXTERNAL MODULE: ./node_modules/react-icons/gi/index.esm.js\nvar gi_index_esm = __webpack_require__(2585);\n// EXTERNAL MODULE: ./node_modules/react-icons/io/index.esm.js\nvar io_index_esm = __webpack_require__(1649);\n// EXTERNAL MODULE: ./node_modules/react-icons/im/index.esm.js\nvar im_index_esm = __webpack_require__(3990);\n;// CONCATENATED MODULE: ./src/CanvasTools.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nfunction CanvasTools() {\n    const nameInputRef = (0,react.useRef)(null);\n    const fileInputRef = (0,react.useRef)(null);\n    const fileTypeRef = (0,react.useRef)(null);\n    const { activeCanvas , backgroundColor , setBackgroundColor , selectedObjects , lockedObjects , lockSelection , unlockSelection , bringForward , sendBackward , duplicate , deleteSelection , undo , redo , canUndo , canRedo , brushColor , setBrushColor , brushSize , setBrushSize , activeCanvasType , addImages , exportSkin  } = useTools();\n    const { isDrawingMode , setDrawingMode  } = src_useCanvas(activeCanvas);\n    // Brush popup\n    const [referenceElement, setReferenceElement] = (0,react.useState)(null);\n    const [popperElement, setPopperElement] = (0,react.useState)(null);\n    const [arrowElement, setArrowElement] = (0,react.useState)(null);\n    const [isBrushToolsOpen, setBrushToolsOpen] = (0,react.useState)(false);\n    const { styles , attributes  } = (0,usePopper/* usePopper */.D)(referenceElement, popperElement, {\n        modifiers: [\n            {\n                name: \"arrow\",\n                options: {\n                    element: arrowElement\n                }\n            },\n            {\n                name: \"offset\",\n                options: {\n                    offset: [\n                        0,\n                        10\n                    ]\n                }\n            }\n        ]\n    });\n    const isSelectionLocked = selectedObjects.length ? selectedObjects.every((object)=>lockedObjects.has(object)) : false;\n    const handleBackgroundColorChange = (event)=>{\n        setBackgroundColor(event.target.value);\n    };\n    (0,react.useEffect)(()=>{\n        if (popperElement) {\n            popperElement.focus();\n        }\n    }, [\n        popperElement\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n        className: \"CanvasTools\",\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"CanvasBackgroundColor\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        className: \"ColorSwatch\",\n                        type: \"radio\",\n                        name: \"backgroundColor\",\n                        id: \"canvasBackgroundColorBlack\",\n                        value: \"black\",\n                        checked: backgroundColor === \"black\",\n                        onChange: handleBackgroundColorChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"canvasBackgroundColorBlack\",\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"span\", {\n                            className: \"HiddenLabel\",\n                            children: \"Black\"\n                        })\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        className: \"ColorSwatch\",\n                        type: \"radio\",\n                        name: \"backgroundColor\",\n                        id: \"canvasBackgroundColorMagenta\",\n                        value: \"magenta\",\n                        checked: backgroundColor === \"magenta\",\n                        onChange: handleBackgroundColorChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"canvasBackgroundColorMagenta\",\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"span\", {\n                            className: \"HiddenLabel\",\n                            children: \"Magenta\"\n                        })\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        className: \"ColorSwatch\",\n                        type: \"radio\",\n                        name: \"backgroundColor\",\n                        id: \"canvasBackgroundColorWhite\",\n                        value: \"white\",\n                        checked: backgroundColor === \"white\",\n                        onChange: handleBackgroundColorChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"canvasBackgroundColorWhite\",\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"span\", {\n                            className: \"HiddenLabel\",\n                            children: \"White\"\n                        })\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Buttons\",\n                children: [\n                    activeCanvasType === \"color\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                                ref: fileInputRef,\n                                onChange: async (event)=>{\n                                    const imageUrl = await new Promise((resolve, reject)=>{\n                                        var _event_target_files;\n                                        const inputFile = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n                                        if (inputFile) {\n                                            const reader = new FileReader();\n                                            reader.addEventListener(\"load\", (event)=>{\n                                                var _event_target;\n                                                resolve((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result);\n                                            });\n                                            reader.readAsDataURL(inputFile);\n                                        } else {\n                                            reject(new Error(\"No input file provided.\"));\n                                        }\n                                    });\n                                    addImages([\n                                        imageUrl\n                                    ]);\n                                },\n                                type: \"file\",\n                                accept: \".png, image/png\",\n                                hidden: true\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Add Image\",\n                                title: \"Add Image\",\n                                onClick: ()=>{\n                                    if (fileInputRef.current) {\n                                        fileInputRef.current.click();\n                                    }\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImPlus */.yAv, {\n                                    style: {\n                                        fontSize: 14\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": isSelectionLocked ? \"Unlock\" : \"Lock\",\n                                title: isSelectionLocked ? \"Unlock (L)\" : \"Lock (L)\",\n                                onClick: isSelectionLocked ? unlockSelection : lockSelection,\n                                \"data-locked\": isSelectionLocked ? \"\" : undefined,\n                                children: isSelectionLocked ? /*#__PURE__*/ (0,jsx_runtime.jsx)(fa_index_esm/* FaUnlock */.D5B, {\n                                    style: {\n                                        fontSize: 14\n                                    }\n                                }) : /*#__PURE__*/ (0,jsx_runtime.jsx)(fa_index_esm/* FaLock */.kUi, {\n                                    style: {\n                                        fontSize: 14\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Bring Forward\",\n                                title: \"Bring Forward (F)\",\n                                onClick: bringForward,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(go_index_esm/* GoArrowUp */.KhA, {\n                                    style: {\n                                        fontSize: 22\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Send Backward\",\n                                title: \"Send Backward (B)\",\n                                onClick: sendBackward,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(go_index_esm/* GoArrowDown */.O9L, {\n                                    style: {\n                                        fontSize: 22\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Duplicate\",\n                                title: \"Duplicate (D)\",\n                                onClick: duplicate,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(index_esm/* RiFileCopyFill */.xvH, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Delete\",\n                                title: \"Delete (Backspace)\",\n                                onClick: deleteSelection,\n                                disabled: isSelectionLocked,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(fa_index_esm/* FaTrashAlt */.AMf, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Undo\",\n                                title: \"Undo (Ctrl Z)\",\n                                onClick: undo,\n                                disabled: !canUndo,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImUndo2 */.UIL, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Redo\",\n                                title: \"Redo (Ctrl Y)\",\n                                onClick: redo,\n                                disabled: !canRedo,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImRedo2 */.rks, {})\n                            })\n                        ]\n                    }) : null,\n                    activeCanvasType === \"metallic\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"data-active\": isDrawingMode ? undefined : \"\",\n                                \"aria-label\": \"Select\",\n                                title: \"Select (S)\",\n                                onClick: ()=>{\n                                    setDrawingMode(false);\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(gi_index_esm/* GiArrowCursor */.Pvc, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                ref: setReferenceElement,\n                                \"data-active\": isDrawingMode ? \"\" : undefined,\n                                \"aria-label\": \"Paint\",\n                                title: \"Paint (P)\",\n                                onClick: ()=>{\n                                    setDrawingMode(true);\n                                    setBrushToolsOpen((isOpen)=>!isOpen);\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(io_index_esm/* IoMdBrush */.VUP, {})\n                            }),\n                            isBrushToolsOpen ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                className: \"BrushToolsPopup\",\n                                ref: setPopperElement,\n                                style: styles.popper,\n                                tabIndex: -1,\n                                onBlur: (event)=>{\n                                    const newFocusElement = event.relatedTarget;\n                                    const isFocusLeaving = !newFocusElement || !event.currentTarget.contains(newFocusElement);\n                                    if (isFocusLeaving) {\n                                        setBrushToolsOpen(false);\n                                    }\n                                },\n                                ...attributes.popper,\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                        className: \"Fields\",\n                                        children: [\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                                                        children: \"Metallic Amount\"\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: 0,\n                                                            max: 255,\n                                                            trackStyle: {\n                                                                display: \"none\"\n                                                            },\n                                                            value: brushColor,\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setBrushColor(value);\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"rgb(20, 105, 241)\",\n                                                                background: \"rgb(\".concat(brushColor, \", \").concat(brushColor, \", \").concat(brushColor, \")\"),\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"linear-gradient(to right, black 0%, white 100%)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            }),\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                                                        children: \"Brush Size\"\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: 1,\n                                                            max: 50,\n                                                            trackStyle: {\n                                                                height: 8,\n                                                                background: \"#03fccf\"\n                                                            },\n                                                            value: brushSize,\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setBrushSize(value);\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"#03fccf\",\n                                                                background: \"rgb(5, 69, 76)\",\n                                                                // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"rgba(255, 255, 255, 0.3)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                        className: \"PopupArrow\",\n                                        ref: setArrowElement,\n                                        style: styles.arrow\n                                    })\n                                ]\n                            }) : null\n                        ]\n                    }) : null\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Export\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        ref: nameInputRef,\n                        type: \"text\",\n                        name: \"CustomSkinName\",\n                        placeholder: \"Skin Name\",\n                        size: 12\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: ()=>{\n                            const name = nameInputRef.current ? nameInputRef.current.value : \"\";\n                            const format = fileTypeRef.current ? fileTypeRef.current.value : \".png\";\n                            exportSkin({\n                                name,\n                                format\n                            });\n                        },\n                        children: \"Export\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                        ref: fileTypeRef,\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                value: \"png\",\n                                children: \".png\"\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                value: \"vl2\",\n                                children: \".vl2\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/next/config.js\nvar config = __webpack_require__(1752);\nvar config_default = /*#__PURE__*/__webpack_require__.n(config);\n// EXTERNAL MODULE: ./vendor/fabric/fabric.js\nvar fabric = __webpack_require__(6287);\n;// CONCATENATED MODULE: ./src/useWarrior.ts\n\nconst WarriorContext = react.createContext(null);\nWarriorContext.displayName = \"WarriorContext\";\n\nfunction useWarrior() {\n    const context = (0,react.useContext)(WarriorContext);\n    if (!context) {\n        throw new Error(\"No WarriorContext.Provider\");\n    }\n    return context;\n}\n\n;// CONCATENATED MODULE: ./src/fabricUtils.ts\n\nfunction createFabricImage(url) {\n    return new Promise((resolve)=>fabric.fabric.Image.fromURL(url, resolve, {\n            crossOrigin: \"anonymous\"\n        }));\n}\n\n// EXTERNAL MODULE: ./node_modules/comlink/dist/esm/comlink.mjs\nvar comlink = __webpack_require__(4375);\n;// CONCATENATED MODULE: ./node_modules/worker-loader/dist/cjs.js!./src/imageProcessing.worker.ts\nfunction Worker_fn() {\n  return new Worker(__webpack_require__.p + \"static/chunks/imageProcessing.worker-ec557200a46215b3.worker.js\");\n}\n\n;// CONCATENATED MODULE: ./src/useImageWorker.ts\n\n\n\nfunction useImageWorker() {\n    const workerRef = (0,react.useRef)(null);\n    const functionsRef = (0,react.useRef)(null);\n    const value = (0,react.useMemo)(()=>{\n        const getFunctions = ()=>{\n            return functionsRef.current;\n        };\n        return {\n            async combineColorAndAlphaImageUrls () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.combineColorAndAlphaImageUrls(...args);\n            },\n            async removeAlphaFromArrayBuffer () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.removeAlphaFromArrayBuffer(...args);\n            },\n            async convertArrayBufferAlphaToGrayscale () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.convertArrayBufferAlphaToGrayscale(...args);\n            },\n            async convertGrayscaleImageUrlToMetallicRoughness () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.convertGrayscaleImageUrlToMetallicRoughness(...args);\n            }\n        };\n    }, []);\n    (0,react.useEffect)(()=>{\n        const worker = new Worker_fn();\n        const functions = comlink/* wrap */.Ud(worker);\n        workerRef.current = worker;\n        functionsRef.current = functions;\n        return ()=>{\n            functions[comlink/* releaseProxy */.Yy]();\n            worker.terminate();\n        };\n    }, []);\n    return value;\n}\n\n;// CONCATENATED MODULE: ./src/useSettings.ts\nfunction useSettings() {\n    return {\n        canvasPadding: 64,\n        basePath:  true ? \"/t2-model-skinner\" : 0\n    };\n}\n\n// EXTERNAL MODULE: ./node_modules/pngjs/browser.js\nvar browser = __webpack_require__(7113);\n// EXTERNAL MODULE: ./node_modules/get-stream/index.js\nvar get_stream = __webpack_require__(31);\n;// CONCATENATED MODULE: ./src/imageUtils.ts\n\n\nfunction arrayBufferToBase64(arrayBuffer) {\n    let base64 = \"\";\n    const encodings = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    const bytes = new Uint8Array(arrayBuffer);\n    const byteLength = bytes.byteLength;\n    const byteRemainder = byteLength % 3;\n    const mainLength = byteLength - byteRemainder;\n    let a, b, c, d;\n    let chunk;\n    // Main loop deals with bytes in chunks of 3\n    for(let i = 0; i < mainLength; i = i + 3){\n        // Combine the three bytes into a single integer\n        chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6\n        d = chunk & 63; // 63 = 2^6 - 1\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    }\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n        chunk = bytes[mainLength];\n        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4; // 3   = 2^2 - 1\n        base64 += encodings[a] + encodings[b] + \"==\";\n    } else if (byteRemainder == 2) {\n        chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2; // 15 = 2^4 - 1\n        base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\n    }\n    return base64;\n}\nasync function rgbaToArrayBuffer(rgba, param) {\n    let { width , height  } = param;\n    const png = new PNG({\n        width,\n        height,\n        inputHasAlpha: true\n    });\n    png.data = rgba;\n    png.pack();\n    const arrayBuffer = await getStream.buffer(png);\n    return arrayBuffer;\n}\nfunction arrayBufferToImageUrl(arrayBuffer) {\n    const base64 = arrayBufferToBase64(arrayBuffer);\n    return \"data:image/png;base64,\".concat(base64);\n}\nasync function imageUrlToArrayBuffer(url) {\n    const response = await fetch(url);\n    if (response.ok) {\n        const arrayBuffer = await response.arrayBuffer();\n        return arrayBuffer;\n    } else {\n        throw new Error(\"Failed to load image URL: \".concat(url));\n    }\n}\nasync function arrayBufferToRgba(arrayBuffer) {\n    const png = await new Promise((resolve, reject)=>new PNG().parse(arrayBuffer, (err, data)=>{\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        }));\n    return {\n        rgba: png.data,\n        width: png.width,\n        height: png.height\n    };\n}\nasync function setGrayscaleFromAlpha(rgba) {\n    const length = rgba.length;\n    for(let i = 0; i < length; i += 4){\n        const alpha = rgba[i + 3];\n        rgba[i] = alpha;\n        rgba[i + 1] = alpha;\n        rgba[i + 2] = alpha;\n        rgba[i + 3] = 255;\n    }\n}\nasync function setAlphaFromGrayscale(rgba, grayscaleRgba) {\n    const length = rgba.length;\n    // Modify image to map white pixels on the metallic canvas\n    // to the alpha channel.\n    for(let i = 0; i < length; i += 4){\n        rgba[i + 3] = Math.max(1, grayscaleRgba[i]);\n    }\n}\nasync function setAlphaToMax(rgba) {\n    const length = rgba.length;\n    for(let i = 0; i < length; i += 4){\n        rgba[i + 3] = 255;\n    }\n}\nfunction setMetallicFromGrayscale(rgba) {\n    const length = rgba.length;\n    for(let i = 0; i < length; i += 4){\n        const grayscale = rgba[i];\n        // Red meanings nothing, set to 0.\n        rgba[i] = 0;\n        // Green maps to roughness. We want more metallic to be less rough.\n        rgba[i + 1] = grayscale > 0 ? 255 - Math.min(grayscale * 2 + 64, 255) : 255;\n        // Blue and alpha values should already be correct.\n        rgba[i + 2] = grayscale ? Math.min(grayscale * 1 + 64, 255) : 0;\n    }\n}\nasync function imageUrlToRgba(imageUrl) {\n    const arrayBuffer = await imageUrlToArrayBuffer(imageUrl);\n    const { rgba , width , height  } = await arrayBufferToRgba(arrayBuffer);\n    return {\n        rgba,\n        width,\n        height\n    };\n}\nasync function rgbaToImageUrl(rgba, param) {\n    let { width , height  } = param;\n    const arrayBuffer = await rgbaToArrayBuffer(rgba, {\n        width,\n        height\n    });\n    const imageUrl = arrayBufferToImageUrl(arrayBuffer);\n    return imageUrl;\n}\nasync function combineColorAndAlphaImageUrls(param) {\n    let { colorImageUrl , metallicImageUrl  } = param;\n    const [{ rgba , width , height  }, { rgba: metallicRgba  }] = await Promise.all([\n        imageUrlToRgba(colorImageUrl),\n        imageUrlToRgba(metallicImageUrl)\n    ]);\n    setAlphaFromGrayscale(rgba, metallicRgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\nasync function removeAlphaFromArrayBuffer(arrayBuffer) {\n    const { rgba , width , height  } = await arrayBufferToRgba(arrayBuffer);\n    setAlphaToMax(rgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\nasync function convertArrayBufferAlphaToGrayscale(arrayBuffer) {\n    const { rgba , width , height  } = await arrayBufferToRgba(arrayBuffer);\n    setGrayscaleFromAlpha(rgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\nasync function convertGrayscaleImageUrlToMetallicRoughness(imageUrl) {\n    const { rgba , width , height  } = await imageUrlToRgba(imageUrl);\n    setMetallicFromGrayscale(rgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\n\n;// CONCATENATED MODULE: ./src/ToolsProvider.tsx\n\n\n\n\n\n\n\n\n\n\n\nconst { publicRuntimeConfig  } = config_default()();\nconst { materials  } = publicRuntimeConfig;\nfunction lockObject(object) {\n    object.lockMovementX = true;\n    object.lockMovementY = true;\n    object.lockScalingX = true;\n    object.lockScalingY = true;\n    object.lockRotation = true;\n}\nfunction unlockObject(object) {\n    object.lockMovementX = false;\n    object.lockMovementY = false;\n    object.lockScalingX = false;\n    object.lockScalingY = false;\n    object.lockRotation = false;\n}\nfunction isActiveSelection(object) {\n    return object.type === \"activeSelection\";\n}\nfunction ToolsProvider(param) {\n    let { children  } = param;\n    const { actualModel , selectedModelType  } = useWarrior();\n    const [selectedMaterialIndex, setSelectedMaterialIndex] = (0,react.useState)(0);\n    const materialDefs = materials[actualModel];\n    var _materialDefs_selectedMaterialIndex;\n    const materialDef = (_materialDefs_selectedMaterialIndex = materialDefs[selectedMaterialIndex]) !== null && _materialDefs_selectedMaterialIndex !== void 0 ? _materialDefs_selectedMaterialIndex : null;\n    var _materialDef_size;\n    const textureSize = (0,react.useMemo)(()=>(_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : [\n            512,\n            512\n        ], [\n        materialDef\n    ]);\n    const hasMetallic = !(materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1);\n    const [activeCanvasType, setActiveCanvasType] = (0,react.useState)(\"color\");\n    if (!hasMetallic && activeCanvasType === \"metallic\") {\n        setActiveCanvasType(\"color\");\n    }\n    const [backgroundColor, setBackgroundColor] = (0,react.useState)(\"magenta\");\n    const [lockedObjects, setLockedObjects] = (0,react.useState)(()=>new Set());\n    const [brushColor, setBrushColor] = (0,react.useState)(200);\n    const [brushSize, setBrushSize] = (0,react.useState)(10);\n    const [selectedObjects, setSelectedObjects] = (0,react.useState)(()=>[]);\n    const activeCanvas = materialDef ? \"\".concat(materialDef.name, \":\").concat(activeCanvasType) : null;\n    const metallicCanvasId = materialDef ? \"\".concat(materialDef.name, \":metallic\") : null;\n    const { canvases  } = src_useCanvas();\n    const { canvas , notifyChange , undo , redo , canUndo , canRedo  } = src_useCanvas(activeCanvas);\n    const { canvas: metallicCanvas  } = src_useCanvas(metallicCanvasId);\n    const [isDrawingMode, setDrawingMode] = (0,react.useState)(false);\n    const { combineColorAndAlphaImageUrls  } = useImageWorker();\n    const { canvasPadding  } = useSettings();\n    const lockSelection = (0,react.useCallback)(()=>{\n        if (selectedObjects.length) {\n            setLockedObjects((lockedObjects)=>{\n                const newLockedObjects = new Set(lockedObjects);\n                for (const selectedObject of selectedObjects){\n                    newLockedObjects.add(selectedObject);\n                    lockObject(selectedObject);\n                }\n                return newLockedObjects;\n            });\n        }\n    }, [\n        selectedObjects\n    ]);\n    const unlockSelection = (0,react.useCallback)(()=>{\n        if (selectedObjects.length) {\n            setLockedObjects((lockedObjects)=>{\n                const newLockedObjects = new Set(lockedObjects);\n                for (const selectedObject of selectedObjects){\n                    newLockedObjects.delete(selectedObject);\n                    unlockObject(selectedObject);\n                }\n                return newLockedObjects;\n            });\n        }\n    }, [\n        selectedObjects\n    ]);\n    const bringForward = (0,react.useCallback)(async ()=>{\n        const object = canvas.getActiveObject();\n        if (object) {\n            canvas.bringForward(object, true);\n            notifyChange();\n        }\n    }, [\n        canvas,\n        notifyChange\n    ]);\n    const sendBackward = (0,react.useCallback)(async ()=>{\n        const object = canvas.getActiveObject();\n        if (object) {\n            // Don't allow below base skin.\n            if (canvas._objects[0] === object || canvas._objects[1] === object) {\n                return;\n            }\n            canvas.sendBackwards(object, true);\n            notifyChange();\n        }\n    }, [\n        canvas,\n        notifyChange\n    ]);\n    const addImages = (0,react.useCallback)(async (imageUrls)=>{\n        let lastAddedImage;\n        for (const imageUrl of imageUrls){\n            const image = await createFabricImage(imageUrl);\n            if (!image.width || !image.height) {\n                throw new Error(\"Zero-height image\");\n            }\n            const widthRatio = image.width / textureSize[0];\n            const heightRatio = image.height / textureSize[1];\n            if (widthRatio > 1 || heightRatio > 1) {\n                let scale;\n                if (widthRatio > heightRatio) {\n                    scale = 1 / widthRatio;\n                } else {\n                    scale = 1 / heightRatio;\n                }\n                image.scaleX = scale;\n                image.scaleY = scale;\n            }\n            if (activeCanvasType === \"metallic\") {\n                if (!image.filters) {\n                    image.filters = [];\n                }\n                const grayscaleFilter = new fabric.fabric.Image.filters.Grayscale();\n                image.filters.push(grayscaleFilter);\n                image.applyFilters();\n            }\n            setDrawingMode(false);\n            canvas.centerObject(image);\n            canvas.add(image);\n            lastAddedImage = image;\n        }\n        if (lastAddedImage) {\n            canvas.setActiveObject(lastAddedImage);\n        }\n    }, [\n        canvas,\n        activeCanvasType,\n        textureSize\n    ]);\n    const duplicate = (0,react.useCallback)(async ()=>{\n        const object = canvas.getActiveObject();\n        if (object) {\n            const copy = await new Promise((resolve)=>object.clone(resolve));\n            var _copy_top, _copy_left;\n            copy.set({\n                top: ((_copy_top = copy.top) !== null && _copy_top !== void 0 ? _copy_top : 0) + 20,\n                left: ((_copy_left = copy.left) !== null && _copy_left !== void 0 ? _copy_left : 0) + 20,\n                evented: true\n            });\n            if (isActiveSelection(copy)) {\n                copy.canvas = canvas;\n                copy.forEachObject((object)=>{\n                    canvas.add(object);\n                });\n                copy.setCoords();\n            }\n            canvas.discardActiveObject();\n            canvas.add(copy);\n            canvas.setActiveObject(copy);\n        }\n    }, [\n        canvas\n    ]);\n    const deleteSelection = (0,react.useCallback)(async ()=>{\n        const objects = canvas.getActiveObjects();\n        canvas.discardActiveObject();\n        canvas.remove(...objects);\n        canvas.requestRenderAll();\n    // forceUpdateRef.current();\n    }, [\n        canvas\n    ]);\n    const exportSkin = (0,react.useCallback)(async (param)=>{\n        let { format , name =\"\"  } = param;\n        const { savePngFile , saveZipFile , createZipFile  } = await Promise.all(/* import() */[__webpack_require__.e(354), __webpack_require__.e(70)]).then(__webpack_require__.bind(__webpack_require__, 8070));\n        name = name.trim() || \"MyCustomSkin\";\n        const materialExports = await Promise.all(materialDefs.map(async (materialDef)=>{\n            var _canvases_, _canvases_1;\n            const colorCanvas = (_canvases_ = canvases[\"\".concat(materialDef.name, \":color\")]) === null || _canvases_ === void 0 ? void 0 : _canvases_.canvas;\n            const metallicCanvas = (_canvases_1 = canvases[\"\".concat(materialDef.name, \":metallic\")]) === null || _canvases_1 === void 0 ? void 0 : _canvases_1.canvas;\n            var _materialDef_size;\n            const textureSize = (_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : [\n                512,\n                512\n            ];\n            let outputImageUrl;\n            const colorImageUrl = colorCanvas.toDataURL({\n                top: canvasPadding,\n                left: canvasPadding,\n                width: textureSize[0],\n                height: textureSize[1]\n            });\n            if (metallicCanvas) {\n                const metallicImageUrl = metallicCanvas.toDataURL({\n                    top: canvasPadding,\n                    left: canvasPadding,\n                    width: textureSize[0],\n                    height: textureSize[1]\n                });\n                outputImageUrl = await combineColorAndAlphaImageUrls({\n                    colorImageUrl,\n                    metallicImageUrl\n                });\n            } else {\n                outputImageUrl = colorImageUrl;\n            }\n            var _materialDef_file;\n            const filename = selectedModelType === \"player\" ? \"\".concat(name, \".\").concat(actualModel, \".png\") : materialDef ? \"\".concat((_materialDef_file = materialDef.file) !== null && _materialDef_file !== void 0 ? _materialDef_file : materialDef.name, \".png\") : \"weapon_\".concat(actualModel, \".png\");\n            return {\n                imageUrl: outputImageUrl,\n                filename\n            };\n        }));\n        switch(format){\n            case \"png\":\n                {\n                    const { imageUrl , filename  } = materialExports[selectedMaterialIndex];\n                    savePngFile(imageUrl, filename);\n                    break;\n                }\n            case \"vl2\":\n                {\n                    const files = await Promise.all(materialExports.map(async (materialExport)=>({\n                            data: await imageUrlToArrayBuffer(materialExport.imageUrl),\n                            name: materialExport.filename\n                        })));\n                    const zip = createZipFile(files);\n                    const camelCaseName = actualModel.replace(/(?:^([a-z])|_([a-z]))/g, (match, a, b)=>(a || b).toUpperCase());\n                    const zipFileName = selectedModelType === \"player\" ? \"zPlayerSkin-\".concat(name, \".vl2\") : \"zWeapon\".concat(camelCaseName, \"-\").concat(name, \".vl2\");\n                    await saveZipFile(zip, zipFileName);\n                }\n        }\n        return;\n    }, [\n        actualModel,\n        canvasPadding,\n        canvases,\n        combineColorAndAlphaImageUrls,\n        materialDefs,\n        selectedMaterialIndex,\n        selectedModelType\n    ]);\n    const context = (0,react.useMemo)(()=>({\n            activeCanvas,\n            activeCanvasType,\n            setActiveCanvasType,\n            backgroundColor,\n            setBackgroundColor,\n            lockedObjects,\n            setLockedObjects,\n            brushColor,\n            setBrushColor,\n            brushSize,\n            setBrushSize,\n            selectedObjects,\n            lockSelection,\n            unlockSelection,\n            bringForward,\n            sendBackward,\n            addImages,\n            duplicate,\n            deleteSelection,\n            undo,\n            redo,\n            canUndo,\n            canRedo,\n            exportSkin,\n            isDrawingMode,\n            setDrawingMode,\n            selectedMaterialIndex,\n            setSelectedMaterialIndex,\n            textureSize,\n            hasMetallic\n        }), [\n        activeCanvas,\n        activeCanvasType,\n        backgroundColor,\n        lockedObjects,\n        brushColor,\n        brushSize,\n        selectedObjects,\n        lockSelection,\n        unlockSelection,\n        bringForward,\n        sendBackward,\n        addImages,\n        duplicate,\n        deleteSelection,\n        undo,\n        redo,\n        canUndo,\n        canRedo,\n        exportSkin,\n        isDrawingMode,\n        selectedMaterialIndex,\n        textureSize,\n        hasMetallic\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas) {\n            const handleSelectionUpdated = ()=>{\n                setSelectedObjects(canvas.getActiveObjects());\n            };\n            canvas.on(\"selection:cleared\", handleSelectionUpdated);\n            canvas.on(\"selection:updated\", handleSelectionUpdated);\n            canvas.on(\"selection:created\", handleSelectionUpdated);\n            return ()=>{\n                canvas.off(\"selection:cleared\", handleSelectionUpdated);\n                canvas.off(\"selection:updated\", handleSelectionUpdated);\n                canvas.off(\"selection:created\", handleSelectionUpdated);\n            };\n        }\n    }, [\n        canvas\n    ]);\n    (0,react.useEffect)(()=>{\n        if (metallicCanvas) {\n            metallicCanvas.freeDrawingBrush.width = brushSize;\n        }\n    }, [\n        metallicCanvas,\n        brushSize\n    ]);\n    (0,react.useEffect)(()=>{\n        if (metallicCanvas) {\n            metallicCanvas.freeDrawingBrush.color = \"rgb(\".concat(brushColor, \", \").concat(brushColor, \", \").concat(brushColor, \")\");\n        }\n    }, [\n        metallicCanvas,\n        brushColor\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(ToolsContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CanvasBackdrop.tsx\n\n\n\nfunction CanvasBackdrop() {\n    const { backgroundColor , textureSize  } = useTools();\n    const { canvasPadding  } = useSettings();\n    return textureSize ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: \"CanvasBackdrop\",\n        style: {\n            backgroundColor,\n            top: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1]\n        }\n    }) : null;\n}\n\n;// CONCATENATED MODULE: ./src/CanvasProvider.tsx\n\n\n\nfunction CanvasProvider(param) {\n    let { children  } = param;\n    const [canvases, setCanvases] = (0,react.useState)({});\n    const registerCanvas = (0,react.useCallback)((canvasId, canvasInfo)=>{\n        setCanvases((canvases)=>{\n            return {\n                ...canvases,\n                [canvasId]: canvasInfo\n            };\n        });\n    }, []);\n    const unregisterCanvas = (0,react.useCallback)((canvasId)=>{\n        setCanvases((canvases)=>{\n            const { [canvasId]: canvas , ...rest } = canvases;\n            return rest;\n        });\n    }, []);\n    const context = (0,react.useMemo)(()=>{\n        return {\n            canvases,\n            registerCanvas,\n            unregisterCanvas\n        };\n    }, [\n        canvases,\n        registerCanvas,\n        unregisterCanvas\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CanvasInteractions.tsx\n\n\n\n\nfunction CanvasInteractions(param) {\n    let { children  } = param;\n    const ref = (0,react.useRef)(null);\n    const { activeCanvas , bringForward , sendBackward , duplicate , deleteSelection , addImages , undo , redo  } = useTools();\n    const { canvas , notifyChange , setDrawingMode  } = src_useCanvas(activeCanvas);\n    const nudge = async function() {\n        let { top =0 , left =0  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const objects = canvas.getActiveObjects();\n        for (const object of objects){\n            var _object_top;\n            object.top = ((_object_top = object.top) !== null && _object_top !== void 0 ? _object_top : 0) + top;\n            var _object_left;\n            object.left = ((_object_left = object.left) !== null && _object_left !== void 0 ? _object_left : 0) + left;\n        }\n        notifyChange();\n    };\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: \"CanvasInteractions\",\n        tabIndex: 0,\n        ref: ref,\n        onDrop: async (event)=>{\n            event.preventDefault();\n            if (ref.current) {\n                ref.current.focus();\n            }\n            const { items  } = event.dataTransfer;\n            const images = Array.from(items).filter((item)=>item.kind === \"file\" && item.type.match(/^image\\//));\n            const imageUrls = await Promise.all(images.map(async (droppedImageFile)=>{\n                const file = droppedImageFile.getAsFile();\n                if (!file) {\n                    throw new Error(\"Not a file.\");\n                }\n                const reader = new FileReader();\n                const imageUrl = await new Promise((resolve, reject)=>{\n                    reader.onload = async (event)=>{\n                        if (event.target && typeof event.target.result === \"string\") {\n                            resolve(event.target.result);\n                        } else {\n                            reject(new Error(\"Failed to load image data.\"));\n                        }\n                    };\n                    reader.readAsDataURL(file);\n                });\n                return imageUrl;\n            }).filter(Boolean));\n            await addImages(imageUrls);\n        },\n        onKeyDown: async (event)=>{\n            const target = event.target;\n            if (target.nodeName === \"INPUT\" || target.nodeName === \"TEXTAREA\") {\n                return;\n            }\n            if (event.ctrlKey || event.metaKey) {\n                switch(event.key){\n                    case \"z\":\n                        if (event.altKey) {\n                            return;\n                        } else if (event.shiftKey) {\n                            event.preventDefault();\n                            redo();\n                            return;\n                        } else {\n                            event.preventDefault();\n                            undo();\n                            return;\n                        }\n                    case \"y\":\n                        if (event.altKey || event.shiftKey) {\n                            return;\n                        } else {\n                            event.preventDefault();\n                            redo();\n                            return;\n                        }\n                }\n            }\n            if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n                return;\n            }\n            switch(event.key){\n                case \"Backspace\":\n                case \"Delete\":\n                    {\n                        event.preventDefault();\n                        await deleteSelection();\n                        break;\n                    }\n                case \"ArrowLeft\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            left: -1\n                        });\n                        break;\n                    }\n                case \"ArrowRight\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            left: 1\n                        });\n                        break;\n                    }\n                case \"ArrowUp\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            top: -1\n                        });\n                        break;\n                    }\n                case \"ArrowDown\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            top: 1\n                        });\n                        break;\n                    }\n                case \"d\":\n                    {\n                        event.preventDefault();\n                        await duplicate();\n                        break;\n                    }\n                case \"f\":\n                    {\n                        event.preventDefault();\n                        await bringForward();\n                        break;\n                    }\n                case \"b\":\n                    {\n                        event.preventDefault();\n                        await sendBackward();\n                        break;\n                    }\n                case \"p\":\n                    {\n                        if (activeCanvas === \"metallic\") {\n                            event.preventDefault();\n                            setDrawingMode(true);\n                        }\n                        break;\n                    }\n                case \"s\":\n                    if (activeCanvas === \"color\") {\n                        event.preventDefault();\n                        setDrawingMode(false);\n                    }\n                    break;\n            }\n        },\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CanvasToggle.tsx\n\n\nfunction CanvasToggle() {\n    const { activeCanvasType , setActiveCanvasType , hasMetallic  } = useTools();\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n        className: \"CanvasToggle\",\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                type: \"button\",\n                \"data-selected\": activeCanvasType === \"color\" ? \"\" : undefined,\n                onClick: ()=>{\n                    setActiveCanvasType(\"color\");\n                },\n                children: \"Color\"\n            }),\n            hasMetallic ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                type: \"button\",\n                \"data-selected\": activeCanvasType === \"metallic\" ? \"\" : undefined,\n                onClick: ()=>{\n                    setActiveCanvasType(\"metallic\");\n                },\n                children: \"Metallic\"\n            }) : null\n        ]\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/react-icons/ai/index.esm.js\nvar ai_index_esm = __webpack_require__(8193);\n;// CONCATENATED MODULE: ./src/WarriorSelector.tsx\n\n\n\n\n\n\nconst { publicRuntimeConfig: WarriorSelector_publicRuntimeConfig  } = config_default()();\nconst { defaultSkins , customSkins , modelDefaults , materials: WarriorSelector_materials  } = WarriorSelector_publicRuntimeConfig;\nfunction WarriorSelector() {\n    var _defaultSkins_actualModel, _customSkins_actualModel, _customSkins_actualModel1;\n    const { selectedModel , setSelectedModel , selectedModelType , setSelectedModelType , selectedSkin , setSelectedSkin , setSelectedSkinType , actualModel , setSelectedAnimation , setSkinImageUrls , setAnimationPaused  } = useWarrior();\n    const { selectedMaterialIndex , setSelectedMaterialIndex  } = useTools();\n    const materialDefs = WarriorSelector_materials[actualModel];\n    const materialDef = materialDefs[selectedMaterialIndex];\n    const fileInputRef = (0,react.useRef)(null);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n        className: \"Toolbar\",\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Field\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"ModelSelect\",\n                        children: \"Model\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                        id: \"ModelSelect\",\n                        value: selectedModel,\n                        onChange: (event)=>{\n                            var _defaultSkins_newSelectedModel, _customSkins_newSelectedModel;\n                            const parentNode = event.target.selectedOptions[0].parentNode;\n                            const newSelectedModel = event.target.value;\n                            const { modelType  } = parentNode.dataset;\n                            if (!modelType) {\n                                throw new Error(\"No data-model-type found\");\n                            }\n                            const newModelHasSkin = ((_defaultSkins_newSelectedModel = defaultSkins[newSelectedModel]) === null || _defaultSkins_newSelectedModel === void 0 ? void 0 : _defaultSkins_newSelectedModel.includes(selectedSkin)) || ((_customSkins_newSelectedModel = customSkins[newSelectedModel]) === null || _customSkins_newSelectedModel === void 0 ? void 0 : _customSkins_newSelectedModel.includes(selectedSkin)) || false;\n                            // startTransition(() => {\n                            setSelectedAnimation(null);\n                            setAnimationPaused(false);\n                            setSelectedModelType(modelType);\n                            setSelectedModel(newSelectedModel);\n                            setSelectedMaterialIndex(0);\n                            if (!newModelHasSkin) {\n                                var _modelDefaults_newSelectedModel;\n                                setSelectedSkin((_modelDefaults_newSelectedModel = modelDefaults[newSelectedModel]) !== null && _modelDefaults_newSelectedModel !== void 0 ? _modelDefaults_newSelectedModel : null);\n                                setSelectedSkinType(\"default\");\n                            }\n                        // });\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"optgroup\", {\n                                label: \"Players\",\n                                \"data-model-type\": \"player\",\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"lmale\",\n                                        children: \"Human Male • Light\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mmale\",\n                                        children: \"Human Male • Medium\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"hmale\",\n                                        children: \"Human Male • Heavy\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"lfemale\",\n                                        children: \"Human Female • Light\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mfemale\",\n                                        children: \"Human Female • Medium\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"hfemale\",\n                                        children: \"Human Female • Heavy\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"lbioderm\",\n                                        children: \"Bioderm • Light\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mbioderm\",\n                                        children: \"Bioderm • Medium\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"hbioderm\",\n                                        children: \"Bioderm • Heavy\"\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"optgroup\", {\n                                label: \"Weapons\",\n                                \"data-model-type\": \"weapon\",\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"disc\",\n                                        children: \"Disc Launcher\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"chaingun\",\n                                        children: \"Chaingun\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"grenade_launcher\",\n                                        children: \"Grenade Launcher\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"sniper\",\n                                        children: \"Laser Rifle\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"energy\",\n                                        children: \"Blaster\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"shocklance\",\n                                        children: \"Shocklance\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"elf\",\n                                        children: \"ELF Projector\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"missile\",\n                                        children: \"Missile Launcher\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mortar\",\n                                        children: \"Mortar\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"repair\",\n                                        children: \"Repair Pack\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"targeting\",\n                                        children: \"Targeting Laser\"\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Field\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"SkinSelect\",\n                        children: \"Skin\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                        className: \"Buttons\",\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                                id: \"SkinSelect\",\n                                value: selectedSkin !== null && selectedSkin !== void 0 ? selectedSkin : \"\",\n                                onChange: async (event)=>{\n                                    const parentNode = event.target.selectedOptions[0].parentNode;\n                                    var _parentNode_dataset_skinType;\n                                    const skinType = event.target.value ? (_parentNode_dataset_skinType = parentNode.dataset.skinType) !== null && _parentNode_dataset_skinType !== void 0 ? _parentNode_dataset_skinType : null : null;\n                                    setSelectedSkin(event.target.value || null);\n                                    setSelectedSkinType(skinType);\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"\",\n                                        children: \"Select a skin…\"\n                                    }),\n                                    selectedModelType === \"player\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                                        children: [\n                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Default Skins\",\n                                                \"data-skin-type\": \"default\",\n                                                children: (_defaultSkins_actualModel = defaultSkins[actualModel]) === null || _defaultSkins_actualModel === void 0 ? void 0 : _defaultSkins_actualModel.map((name)=>{\n                                                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                        value: name,\n                                                        children: name\n                                                    }, name);\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Custom Skins\",\n                                                \"data-skin-type\": \"custom\",\n                                                children: (_customSkins_actualModel = customSkins[actualModel]) === null || _customSkins_actualModel === void 0 ? void 0 : _customSkins_actualModel.map((name)=>{\n                                                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                        value: name,\n                                                        children: name\n                                                    }, name);\n                                                })\n                                            })\n                                        ]\n                                    }) : null,\n                                    selectedModelType === \"weapon\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                                        children: [\n                                            modelDefaults[actualModel] ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Default Skins\",\n                                                \"data-skin-type\": \"default\",\n                                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                    value: modelDefaults[actualModel],\n                                                    children: \"Default\"\n                                                })\n                                            }) : null,\n                                            ((_customSkins_actualModel1 = customSkins[actualModel]) === null || _customSkins_actualModel1 === void 0 ? void 0 : _customSkins_actualModel1.length) ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Custom Skins\",\n                                                \"data-skin-type\": \"custom\",\n                                                children: customSkins[actualModel].map((name)=>/*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                        value: name,\n                                                        children: name\n                                                    }, name))\n                                            }) : null\n                                        ]\n                                    }) : null\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Load Skin\",\n                                title: \"Load a Skin\",\n                                onClick: ()=>{\n                                    if (fileInputRef.current) {\n                                        fileInputRef.current.click();\n                                    }\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(ai_index_esm/* AiTwotoneFolderOpen */.FjK, {\n                                    style: {\n                                        fontSize: 18\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                                ref: fileInputRef,\n                                onChange: async (event)=>{\n                                    const imageUrl = await new Promise((resolve, reject)=>{\n                                        var _event_target_files;\n                                        const inputFile = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n                                        if (inputFile) {\n                                            const reader = new FileReader();\n                                            reader.addEventListener(\"load\", (event)=>{\n                                                var _event_target;\n                                                resolve((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result);\n                                            });\n                                            reader.readAsDataURL(inputFile);\n                                        } else {\n                                            reject(new Error(\"No input file provided.\"));\n                                        }\n                                    });\n                                    setSelectedSkin(null);\n                                    setSkinImageUrls({\n                                        [materialDef.name]: imageUrl\n                                    });\n                                },\n                                type: \"file\",\n                                accept: \".png, image/png\",\n                                hidden: true\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n;// CONCATENATED MODULE: ./src/WarriorProvider.tsx\n\n\n\n\n\nconst { publicRuntimeConfig: WarriorProvider_publicRuntimeConfig  } = config_default()();\nconst { materials: WarriorProvider_materials , modelDefaults: WarriorProvider_modelDefaults  } = WarriorProvider_publicRuntimeConfig;\nconst baseSkinPath = \"https://exogen.github.io/t2-skins/skins\";\nfunction getSkinImageUrls(param) {\n    let { basePath , actualModel , selectedModelType , selectedSkin , selectedSkinType  } = param;\n    const materialDefs = WarriorProvider_materials[actualModel];\n    switch(selectedModelType){\n        case \"player\":\n            switch(selectedSkinType){\n                case \"default\":\n                    return {\n                        base: \"\".concat(basePath, \"/textures/\").concat(selectedSkin, \".\").concat(actualModel, \".png\")\n                    };\n                case \"custom\":\n                    return {\n                        base: \"\".concat(baseSkinPath, \"/\").concat(selectedSkin, \".\").concat(actualModel, \".png\")\n                    };\n            }\n            break;\n        case \"weapon\":\n            return materialDefs.reduce((skinImageUrls, materialDef)=>{\n                if (materialDef) {\n                    switch(selectedSkinType){\n                        case \"default\":\n                            if (materialDef.hasDefault !== false) {\n                                var _materialDef_file;\n                                skinImageUrls[materialDef.name] = \"\".concat(basePath, \"/textures/\").concat((_materialDef_file = materialDef.file) !== null && _materialDef_file !== void 0 ? _materialDef_file : materialDef.name, \".png\");\n                            }\n                            break;\n                        case \"custom\":\n                            var _materialDef_file1;\n                            skinImageUrls[materialDef.name] = \"\".concat(baseSkinPath, \"/\").concat(selectedSkin, \"/\").concat((_materialDef_file1 = materialDef.file) !== null && _materialDef_file1 !== void 0 ? _materialDef_file1 : materialDef.name, \".png\");\n                            break;\n                    }\n                }\n                return skinImageUrls;\n            }, {});\n    }\n    return {};\n}\nfunction getModelUrl(basePath, actualModel, selectedAnimation) {\n    switch(actualModel){\n        default:\n            return \"\".concat(basePath, \"/\").concat(actualModel).concat(selectedAnimation ? \".anim\" : \"\", \".glb\");\n    }\n}\nfunction WarriorProvider(param) {\n    let { children  } = param;\n    const [selectedModel, setSelectedModel] = (0,react.useState)(\"lmale\");\n    const [selectedModelType, setSelectedModelType] = (0,react.useState)(\"player\");\n    const [selectedSkin, setSelectedSkin] = (0,react.useState)(\"Blood Eagle\");\n    const [selectedSkinType, setSelectedSkinType] = (0,react.useState)(\"default\");\n    const [selectedAnimation, setSelectedAnimation] = (0,react.useState)(null);\n    const [animationPaused, setAnimationPaused] = (0,react.useState)(false);\n    const { basePath  } = useSettings();\n    const actualModel = selectedModel === \"hfemale\" ? \"hmale\" : selectedModel;\n    const selectedModelUrl = getModelUrl(basePath, actualModel, selectedAnimation);\n    const [skinImageUrls, setSkinImageUrls] = (0,react.useState)(()=>getSkinImageUrls({\n            basePath,\n            actualModel,\n            selectedModelType,\n            selectedSkin,\n            selectedSkinType\n        }));\n    const defaultSkinImageUrls = (0,react.useMemo)(()=>getSkinImageUrls({\n            basePath,\n            actualModel,\n            selectedModelType,\n            selectedSkin: WarriorProvider_modelDefaults[actualModel],\n            selectedSkinType: \"default\"\n        }), [\n        actualModel,\n        basePath,\n        selectedModelType\n    ]);\n    const context = (0,react.useMemo)(()=>{\n        return {\n            selectedModel,\n            setSelectedModel,\n            selectedModelType,\n            setSelectedModelType,\n            actualModel,\n            selectedModelUrl,\n            animationPaused,\n            setAnimationPaused,\n            selectedSkin,\n            setSelectedSkin,\n            selectedSkinType,\n            setSelectedSkinType,\n            selectedAnimation,\n            setSelectedAnimation,\n            skinImageUrls,\n            setSkinImageUrls,\n            defaultSkinImageUrls\n        };\n    }, [\n        selectedModel,\n        setSelectedModel,\n        selectedModelType,\n        setSelectedModelType,\n        actualModel,\n        selectedModelUrl,\n        animationPaused,\n        setAnimationPaused,\n        selectedSkin,\n        setSelectedSkin,\n        selectedSkinType,\n        setSelectedSkinType,\n        selectedAnimation,\n        setSelectedAnimation,\n        skinImageUrls,\n        setSkinImageUrls,\n        defaultSkinImageUrls\n    ]);\n    (0,react.useEffect)(()=>{\n        if (selectedSkin) {\n            setSkinImageUrls(getSkinImageUrls({\n                basePath,\n                actualModel,\n                selectedModelType,\n                selectedSkin,\n                selectedSkinType\n            }));\n        }\n    }, [\n        basePath,\n        actualModel,\n        selectedModelType,\n        selectedSkin,\n        selectedSkinType\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/next/dynamic.js\nvar dynamic = __webpack_require__(5152);\nvar dynamic_default = /*#__PURE__*/__webpack_require__.n(dynamic);\n;// CONCATENATED MODULE: ./src/useEnvironment.ts\n\nconst EnvironmentContext = react.createContext(null);\nEnvironmentContext.displayName = \"EnvironmentContext\";\n\nfunction useEnvironment() {\n    const context = (0,react.useContext)(EnvironmentContext);\n    if (!context) {\n        throw new Error(\"No EnvironmentContext.Provider\");\n    }\n    return context;\n}\n\n;// CONCATENATED MODULE: ./src/useSkin.ts\n\nconst SkinContext = react.createContext(null);\nSkinContext.displayName = \"SkinContext\";\n\nfunction useSkin() {\n    const context = (0,react.useContext)(SkinContext);\n    if (!context) {\n        throw new Error(\"No SkinContext.Provider\");\n    }\n    return context;\n}\n\n// EXTERNAL MODULE: ./src/useModelViewer.ts\nvar useModelViewer = __webpack_require__(8496);\n;// CONCATENATED MODULE: ./src/Material.tsx\n\n\n\n\nfunction useTexture(param) {\n    let { material , materialDef , textureType , imageUrl  } = param;\n    const { modelViewer  } = (0,useModelViewer/* default */.Z)();\n    const { basePath  } = useSettings();\n    (0,react.useEffect)(()=>{\n        let stale = false;\n        const updateTexture = async ()=>{\n            if (!materialDef || materialDef.hidden) {\n                if (textureType === \"metallicRoughnessTexture\") {\n                    return;\n                } else {\n                    material.setAlphaMode(\"BLEND\");\n                    material.pbrMetallicRoughness.setBaseColorFactor([\n                        0,\n                        0,\n                        0,\n                        0\n                    ]);\n                }\n            } else {\n                const { alphaMode , alphaCutoff , baseColorFactor , emissiveFactor , emissiveTexture =false , metallicFactor =1 , roughnessFactor =1  } = materialDef;\n                let textureUrl = imageUrl !== null && imageUrl !== void 0 ? imageUrl : \"\".concat(basePath, \"/white.png\");\n                switch(textureType){\n                    case \"baseColorTexture\":\n                        if (baseColorFactor) {\n                            material.pbrMetallicRoughness.setBaseColorFactor(baseColorFactor);\n                        }\n                        if (alphaMode) {\n                            material.setAlphaMode(alphaMode);\n                        }\n                        if (alphaCutoff) {\n                            material.setAlphaCutoff(alphaCutoff);\n                        }\n                        if (emissiveFactor) {\n                            material.setEmissiveFactor(emissiveFactor);\n                        }\n                        break;\n                    case \"metallicRoughnessTexture\":\n                        material.pbrMetallicRoughness.setMetallicFactor(metallicFactor);\n                        material.pbrMetallicRoughness.setRoughnessFactor(roughnessFactor);\n                        if (metallicFactor === 0 && roughnessFactor === 1) {\n                            textureUrl = \"\".concat(basePath, \"/green.png\");\n                        }\n                }\n                const texture = await modelViewer.createTexture(textureUrl);\n                if (!stale) {\n                    material.pbrMetallicRoughness[textureType].setTexture(texture);\n                    if (textureType === \"baseColorTexture\" && emissiveTexture) {\n                        material.emissiveTexture.setTexture(texture);\n                    }\n                }\n            }\n        };\n        updateTexture();\n        return ()=>{\n            stale = true;\n        };\n    }, [\n        basePath,\n        modelViewer,\n        material,\n        materialDef,\n        textureType,\n        imageUrl\n    ]);\n}\nfunction Material(param) {\n    let { material , materialDef  } = param;\n    const { getSkinImages  } = useSkin();\n    var _getSkinImages;\n    const { colorImageUrl , metallicImageUrl  } = (_getSkinImages = getSkinImages(material.name)) !== null && _getSkinImages !== void 0 ? _getSkinImages : {};\n    useTexture({\n        material,\n        materialDef,\n        textureType: \"baseColorTexture\",\n        imageUrl: colorImageUrl\n    });\n    useTexture({\n        material,\n        materialDef,\n        textureType: \"metallicRoughnessTexture\",\n        imageUrl: metallicImageUrl\n    });\n    return null;\n}\n\n;// CONCATENATED MODULE: ./src/Materials.tsx\n\n\n\n\n\nconst { publicRuntimeConfig: Materials_publicRuntimeConfig  } = config_default()();\nconst { materials: Materials_materials  } = Materials_publicRuntimeConfig;\nfunction Materials() {\n    const { actualModel  } = useWarrior();\n    const { model  } = (0,useModelViewer/* default */.Z)();\n    const materialDefs = Materials_materials[actualModel];\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, {\n        children: model.materials.map((material, i)=>{\n            var _materialDefs_find;\n            const materialDef = (_materialDefs_find = materialDefs.find((materialDef)=>materialDef.index === i)) !== null && _materialDefs_find !== void 0 ? _materialDefs_find : materialDefs[i];\n            return /*#__PURE__*/ (0,jsx_runtime.jsx)(Material, {\n                material: material,\n                materialDef: materialDef\n            }, material.name);\n        })\n    });\n}\n\n;// CONCATENATED MODULE: ./src/WarriorViewer.tsx\n\n\n\n\n\n\nconst ModelViewer = dynamic_default()(()=>Promise.all(/* import() */[__webpack_require__.e(737), __webpack_require__.e(258), __webpack_require__.e(990)]).then(__webpack_require__.bind(__webpack_require__, 85)), {\n    loadableGenerated: {\n        webpack: ()=>[\n                /*require.resolve*/(85)\n            ]\n    },\n    ssr: false\n});\nconst { publicRuntimeConfig: WarriorViewer_publicRuntimeConfig  } = config_default()();\nconst { cameraOverrides  } = WarriorViewer_publicRuntimeConfig;\nfunction WarriorViewer() {\n    var _cameraOverrides_selectedModel, _cameraOverrides_selectedModel1;\n    const { selectedModel , selectedModelUrl , selectedModelType , selectedAnimation , animationPaused  } = useWarrior();\n    const { environmentImageUrl  } = useEnvironment();\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(ModelViewer, {\n        modelUrl: selectedModelUrl,\n        environmentImageUrl: environmentImageUrl,\n        animationName: selectedAnimation,\n        animationPaused: animationPaused,\n        cameraOrbit: selectedModelType === \"weapon\" ? \"315deg 70deg 105%\" : undefined,\n        cameraTarget: (_cameraOverrides_selectedModel = cameraOverrides[selectedModel]) === null || _cameraOverrides_selectedModel === void 0 ? void 0 : _cameraOverrides_selectedModel.target,\n        fieldOfView: (_cameraOverrides_selectedModel1 = cameraOverrides[selectedModel]) === null || _cameraOverrides_selectedModel1 === void 0 ? void 0 : _cameraOverrides_selectedModel1.fov,\n        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(Materials, {})\n    });\n}\n\n;// CONCATENATED MODULE: ./src/EnvironmentSelector.tsx\n\n\nfunction EnvironmentSelector() {\n    const { selectedEnvironment , setSelectedEnvironment  } = useEnvironment();\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                htmlFor: \"EnvMapSelect\",\n                children: \"Environment\"\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                id: \"EnvMapSelect\",\n                value: selectedEnvironment !== null && selectedEnvironment !== void 0 ? selectedEnvironment : \"\",\n                onChange: (event)=>{\n                    setSelectedEnvironment(event.target.value || null);\n                },\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"\",\n                        children: \"Default\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"clarens_night_02_1k.hdr\",\n                        children: \"Clarens Night\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"dry_cracked_lake_1k.hdr\",\n                        children: \"Dry Cracked Lake\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"fouriesburg_mountain_midday_1k.hdr\",\n                        children: \"Fouriesburg Mountain\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"goegap_1k.hdr\",\n                        children: \"Goegap\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"hilly_terrain_01_1k.hdr\",\n                        children: \"Hilly Terrain\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"kloofendal_48d_partly_cloudy_puresky_1k.hdr\",\n                        children: \"Kloofendal Partly Cloudy\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"kloppenheim_06_puresky_1k.hdr\",\n                        children: \"Kloppenheim\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"lilienstein_1k.hdr\",\n                        children: \"Lilienstein\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"spruit_sunrise_1k_HDR.hdr\",\n                        children: \"Spruit Sunrise\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"umhlanga_sunrise_1k.hdr\",\n                        children: \"Umhlanga Sunrise\"\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n;// CONCATENATED MODULE: ./src/AnimationSelector.tsx\n\n\n\n\n\nconst { publicRuntimeConfig: AnimationSelector_publicRuntimeConfig  } = config_default()();\nconst { animations , animationLabels , animationLabelOverrides  } = AnimationSelector_publicRuntimeConfig;\nfunction AnimationSelector() {\n    const { actualModel , selectedModelType , selectedAnimation , setSelectedAnimation , animationPaused , setAnimationPaused  } = useWarrior();\n    var _animations_actualModel;\n    const animationList = (0,react.useMemo)(()=>[\n            ...selectedModelType === \"player\" ? animations.global : [],\n            ...(_animations_actualModel = animations[actualModel]) !== null && _animations_actualModel !== void 0 ? _animations_actualModel : []\n        ], [\n        actualModel,\n        selectedModelType\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                children: \"Animation\"\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Buttons\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                        value: selectedAnimation !== null && selectedAnimation !== void 0 ? selectedAnimation : \"\",\n                        onChange: (event)=>{\n                            setSelectedAnimation(event.target.value || null);\n                            setAnimationPaused(false);\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                value: \"\",\n                                children: \"None\"\n                            }),\n                            animationList.map((animationName)=>{\n                                var _animationLabelOverrides_actualModel;\n                                var _animationLabelOverrides_actualModel_animationName;\n                                const label = (_animationLabelOverrides_actualModel_animationName = (_animationLabelOverrides_actualModel = animationLabelOverrides[actualModel]) === null || _animationLabelOverrides_actualModel === void 0 ? void 0 : _animationLabelOverrides_actualModel[animationName]) !== null && _animationLabelOverrides_actualModel_animationName !== void 0 ? _animationLabelOverrides_actualModel_animationName : animationLabels[animationName];\n                                return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                    value: animationName,\n                                    children: label !== null && label !== void 0 ? label : animationName\n                                }, animationName);\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                        type: \"button\",\n                        disabled: !selectedAnimation,\n                        onClick: ()=>{\n                            setAnimationPaused((animationPaused)=>!animationPaused);\n                        },\n                        children: animationPaused || !selectedAnimation ? /*#__PURE__*/ (0,jsx_runtime.jsx)(io_index_esm/* IoMdPlay */.v$e, {}) : /*#__PURE__*/ (0,jsx_runtime.jsx)(io_index_esm/* IoMdPause */.IWN, {})\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n;// CONCATENATED MODULE: ./src/EnvironmentProvider.tsx\n\n\n\n\nfunction EnvironmentProvider(param) {\n    let { children  } = param;\n    const [selectedEnvironment, setSelectedEnvironment] = (0,react.useState)(null);\n    const { basePath  } = useSettings();\n    const context = (0,react.useMemo)(()=>{\n        const environmentImageUrl = selectedEnvironment ? \"\".concat(basePath, \"/\").concat(selectedEnvironment) : null;\n        return {\n            selectedEnvironment,\n            setSelectedEnvironment,\n            environmentImageUrl\n        };\n    }, [\n        basePath,\n        selectedEnvironment,\n        setSelectedEnvironment\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(EnvironmentContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/SkinProvider.tsx\n\n\n\nfunction SkinProvider(param) {\n    let { children  } = param;\n    const [materialSkins, setMaterialSkins] = (0,react.useState)({});\n    const setters = (0,react.useMemo)(()=>({\n            setSkinImages (materialName, skinImages) {\n                setMaterialSkins((materialSkins)=>{\n                    return {\n                        ...materialSkins,\n                        [materialName]: skinImages\n                    };\n                });\n            },\n            setColorImageUrl (materialName, colorImageUrl) {\n                setMaterialSkins((materialSkins)=>{\n                    return {\n                        ...materialSkins,\n                        [materialName]: {\n                            ...materialSkins[materialName],\n                            colorImageUrl\n                        }\n                    };\n                });\n            },\n            setMetallicImageUrl (materialName, metallicImageUrl) {\n                setMaterialSkins((materialSkins)=>{\n                    return {\n                        ...materialSkins,\n                        [materialName]: {\n                            ...materialSkins[materialName],\n                            metallicImageUrl\n                        }\n                    };\n                });\n            }\n        }), []);\n    const context = (0,react.useMemo)(()=>{\n        return {\n            materialSkins,\n            getSkinImages (materialName) {\n                return materialSkins[materialName];\n            },\n            getColorImageUrl (materialName) {\n                return materialSkins[materialName].colorImageUrl;\n            },\n            getMetallicImageUrl (materialName) {\n                return materialSkins[materialName].metallicImageUrl;\n            },\n            ...setters\n        };\n    }, [\n        materialSkins,\n        setters\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(SkinContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/MaterialSelector.tsx\n\n\n\n\nconst { publicRuntimeConfig: MaterialSelector_publicRuntimeConfig  } = config_default()();\nconst { materials: MaterialSelector_materials  } = MaterialSelector_publicRuntimeConfig;\nfunction MaterialSelector() {\n    const { actualModel  } = useWarrior();\n    const { selectedMaterialIndex , setSelectedMaterialIndex  } = useTools();\n    const materialDefs = MaterialSelector_materials[actualModel];\n    var _materialDef_label;\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"select\", {\n        value: selectedMaterialIndex,\n        onChange: (event)=>{\n            setSelectedMaterialIndex(parseInt(event.target.value, 10));\n        },\n        children: materialDefs.map((materialDef, i)=>materialDef ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                value: i,\n                children: (_materialDef_label = materialDef.label) !== null && _materialDef_label !== void 0 ? _materialDef_label : materialDef.name\n            }, materialDef.name) : null)\n    });\n}\n\n;// CONCATENATED MODULE: ./src/Canvas.tsx\n\n\n\n\n\n\n\nfunction updateObjectControlOptions() {\n    fabric.fabric.Object.prototype.set({\n        transparentCorners: false,\n        borderColor: \"#8afff1\",\n        cornerSize: 9,\n        cornerStyle: \"circle\",\n        cornerColor: \"#8afff1\",\n        cornerStrokeColor: \"#1c9f7c\",\n        strokeWidth: 10,\n        perPixelTargetFind: true\n    });\n}\nfunction Canvas(param) {\n    let { canvasId , onChange , baseImageUrl , textureSize , defaultDrawingMode =false  } = param;\n    const canvasElementRef = (0,react.useRef)(null);\n    const [canvas, setCanvas] = (0,react.useState)(null);\n    const { activeCanvas  } = useTools();\n    const { canvasPadding  } = useSettings();\n    const { registerCanvas , unregisterCanvas  } = src_useCanvas();\n    const [isDrawingMode, setDrawingMode] = (0,react.useState)(defaultDrawingMode);\n    const handleChangeRef = (0,react.useRef)();\n    const trackChanges = (0,react.useRef)(true);\n    const [undoHistory, setUndoHistory] = (0,react.useState)(()=>[]);\n    const [redoHistory, setRedoHistory] = (0,react.useState)(()=>[]);\n    const canUndo = undoHistory.length > 1;\n    const canRedo = redoHistory.length > 0;\n    const handleChange = (0,react.useCallback)((canvas)=>{\n        const handleChange = handleChangeRef.current;\n        if (handleChange) {\n            handleChange(canvas);\n        }\n    }, []);\n    const undo = (0,react.useCallback)(async ()=>{\n        if (!canvas) {\n            return;\n        }\n        if (undoHistory.length > 1) {\n            const [restoreState, currentState] = undoHistory.slice(-2);\n            trackChanges.current = false;\n            canvas.renderOnAddRemove = false;\n            canvas.clear();\n            canvas.loadFromJSON(restoreState, ()=>{\n                canvas.renderAll();\n                trackChanges.current = true;\n                canvas.renderOnAddRemove = true;\n            });\n            setUndoHistory((undoHistory)=>undoHistory.slice(0, -1));\n            setRedoHistory((redoHistory)=>[\n                    currentState,\n                    ...redoHistory\n                ]);\n        }\n    }, [\n        canvas,\n        undoHistory\n    ]);\n    (0,react.useEffect)(()=>{\n        console.log(\"undo:\", undoHistory);\n        console.log(\"redo:\", redoHistory);\n    }, [\n        undoHistory,\n        redoHistory\n    ]);\n    const redo = (0,react.useCallback)(()=>{\n        if (!canvas) {\n            return;\n        }\n        if (redoHistory.length > 0) {\n            const nextState = redoHistory[0];\n            trackChanges.current = false;\n            canvas.renderOnAddRemove = false;\n            canvas.clear();\n            canvas.loadFromJSON(nextState, ()=>{\n                canvas.renderAll();\n                trackChanges.current = true;\n                canvas.renderOnAddRemove = true;\n            });\n            setUndoHistory((undoHistory)=>[\n                    ...undoHistory,\n                    nextState\n                ]);\n            setRedoHistory((redoHistory)=>redoHistory.slice(1));\n        }\n    }, [\n        canvas,\n        redoHistory\n    ]);\n    (0,react.useEffect)(()=>{\n        handleChangeRef.current = onChange;\n    }, [\n        onChange\n    ]);\n    const isActive = activeCanvas === canvasId;\n    (0,react.useEffect)(()=>{\n        const options = {\n            preserveObjectStacking: true,\n            targetFindTolerance: 2\n        };\n        updateObjectControlOptions();\n        const canvas = new fabric.fabric.Canvas(canvasElementRef.current, options);\n        let isSnapshotting = false;\n        let changeTimer;\n        const handleChangeWithCanvasArg = ()=>{\n            handleChange(canvas);\n        };\n        const handleRender = ()=>{\n            if (isSnapshotting) {\n                return;\n            }\n            if (!trackChanges.current) {\n                return;\n            }\n            clearTimeout(changeTimer);\n            changeTimer = setTimeout(()=>{\n                const snapshot = snapshotCanvas();\n                setUndoHistory((history)=>[\n                        ...history.slice(-2),\n                        snapshot\n                    ]);\n                setRedoHistory([]);\n            }, 150);\n        };\n        const snapshotCanvas = ()=>{\n            isSnapshotting = true;\n            const snapshot = canvas.toJSON();\n            isSnapshotting = false;\n            return snapshot;\n        };\n        canvas.on(\"object:modified\", handleChangeWithCanvasArg);\n        canvas.on(\"object:added\", handleChangeWithCanvasArg);\n        canvas.on(\"object:removed\", handleChangeWithCanvasArg);\n        canvas.on(\"after:render\", handleRender);\n        setCanvas(canvas);\n        return ()=>{\n            clearTimeout(changeTimer);\n            setCanvas(null);\n            canvas.dispose();\n        };\n    }, [\n        handleChange\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas) {\n            canvas.isDrawingMode = isDrawingMode;\n        }\n    }, [\n        canvas,\n        isDrawingMode\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas && isActive) {\n            canvas.calcOffset();\n        }\n    }, [\n        canvas,\n        isActive\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas) {\n            registerCanvas(canvasId, {\n                canvas,\n                notifyChange: ()=>{\n                    canvas.renderAll();\n                    handleChange(canvas);\n                },\n                undo,\n                redo,\n                canUndo,\n                canRedo,\n                isDrawingMode,\n                setDrawingMode\n            });\n            return ()=>{\n                unregisterCanvas(canvasId);\n            };\n        }\n    }, [\n        canvas,\n        registerCanvas,\n        unregisterCanvas,\n        canvasId,\n        handleChange,\n        isDrawingMode,\n        setDrawingMode,\n        undo,\n        redo,\n        canUndo,\n        canRedo\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas && textureSize) {\n            trackChanges.current = false;\n            canvas.clear();\n            if (baseImageUrl) {\n                let stale = false;\n                const addImage = async ()=>{\n                    const image = await createFabricImage(baseImageUrl);\n                    if (!stale) {\n                        if (!image.width || !image.height) {\n                            throw new Error(\"Zero-height image\");\n                        }\n                        image.selectable = false;\n                        image.lockMovementX = true;\n                        image.lockMovementY = true;\n                        image.lockScalingX = true;\n                        image.lockScalingY = true;\n                        image.lockRotation = true;\n                        image.hoverCursor = \"default\";\n                        image.moveCursor = \"default\";\n                        const [expectedWidth, expectedHeight] = textureSize;\n                        const scaleX = image.width === expectedWidth ? 1 : expectedWidth / image.width;\n                        const scaleY = image.height === expectedHeight ? 1 : expectedHeight / image.height;\n                        if (scaleX !== 1 || scaleY !== 1) {\n                            image.scaleX = scaleX;\n                            image.scaleY = scaleY;\n                        }\n                        canvas.centerObject(image);\n                        canvas.add(image);\n                    }\n                    trackChanges.current = true;\n                    canvas.requestRenderAll();\n                };\n                addImage();\n                return ()=>{\n                    stale = true;\n                };\n            }\n        }\n    }, [\n        canvas,\n        baseImageUrl,\n        textureSize\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: \"CanvasContainer\",\n        \"data-active\": isActive ? \"true\" : \"false\",\n        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"canvas\", {\n            width: textureSize[0] + canvasPadding * 2,\n            height: textureSize[1] + canvasPadding * 2,\n            ref: canvasElementRef\n        })\n    });\n}\n\n;// CONCATENATED MODULE: ./src/useImageLoader.ts\n\nconst ImageLoaderContext = react.createContext(null);\nImageLoaderContext.displayName = \"ImageLoaderContext\";\nfunction useImageLoader() {\n    const context = (0,react.useContext)(ImageLoaderContext);\n    if (!context) {\n        throw new Error(\"ImageLoaderContext.Provider not found!\");\n    }\n    return context;\n}\n\n;// CONCATENATED MODULE: ./src/ColorCanvas.tsx\n\n\n\n\n\n\n\n\nconst defaultTextureSize = [\n    512,\n    512\n];\nfunction ColorCanvas(param) {\n    let { materialDef  } = param;\n    const { skinImageUrls , defaultSkinImageUrls  } = useWarrior();\n    const skinImageUrl = skinImageUrls[materialDef.name];\n    const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\n    const { setColorImageUrl  } = useSkin();\n    const { canvasPadding  } = useSettings();\n    const [noAlphaImageUrl, setNoAlphaImageUrl] = (0,react.useState)(null);\n    const { removeAlphaFromArrayBuffer  } = useImageWorker();\n    const { loadImage  } = useImageLoader();\n    var _materialDef_size;\n    const textureSize = (0,react.useMemo)(()=>(_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : defaultTextureSize, [\n        materialDef\n    ]);\n    const handleChange = (0,react.useCallback)(async (canvas)=>{\n        const imageUrl = canvas.toDataURL({\n            top: canvasPadding,\n            left: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1]\n        });\n        setColorImageUrl(materialDef.name, imageUrl);\n    }, [\n        textureSize,\n        canvasPadding,\n        setColorImageUrl,\n        materialDef\n    ]);\n    (0,react.useEffect)(()=>{\n        if (skinImageUrl) {\n            let stale = false;\n            const generateImageUrl = async ()=>{\n                let arrayBuffer;\n                try {\n                    arrayBuffer = await loadImage(skinImageUrl);\n                } catch (err) {\n                    if (materialDef.hasDefault !== false) {\n                        arrayBuffer = await loadImage(defaultSkinImageUrl);\n                    } else {\n                        return;\n                    }\n                }\n                const outputImageUrl = await removeAlphaFromArrayBuffer(arrayBuffer);\n                if (!stale) {\n                    setNoAlphaImageUrl(outputImageUrl);\n                }\n            };\n            generateImageUrl();\n            return ()=>{\n                stale = true;\n            };\n        } else {\n            setNoAlphaImageUrl(null);\n        }\n    }, [\n        materialDef,\n        skinImageUrl,\n        defaultSkinImageUrl,\n        removeAlphaFromArrayBuffer,\n        loadImage\n    ]);\n    const canvasId = \"\".concat(materialDef.name, \":color\");\n    return textureSize ? /*#__PURE__*/ (0,jsx_runtime.jsx)(Canvas, {\n        canvasId: canvasId,\n        canvasType: \"color\",\n        onChange: handleChange,\n        baseImageUrl: noAlphaImageUrl,\n        textureSize: textureSize\n    }, canvasId) : null;\n}\n\n;// CONCATENATED MODULE: ./src/MetallicCanvas.tsx\n\n\n\n\n\n\n\n\nconst MetallicCanvas_defaultTextureSize = [\n    512,\n    512\n];\nfunction MetallicCanvas(param) {\n    let { materialDef  } = param;\n    const { skinImageUrls , defaultSkinImageUrls  } = useWarrior();\n    const skinImageUrl = skinImageUrls[materialDef.name];\n    const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\n    const { setMetallicImageUrl  } = useSkin();\n    const { canvasPadding  } = useSettings();\n    const [alphaImageUrl, setAlphaImageUrl] = (0,react.useState)(null);\n    const runningChangeHandlers = (0,react.useRef)(0);\n    const { convertGrayscaleImageUrlToMetallicRoughness , convertArrayBufferAlphaToGrayscale  } = useImageWorker();\n    const { loadImage  } = useImageLoader();\n    var _materialDef_size;\n    const textureSize = (0,react.useMemo)(()=>(_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : MetallicCanvas_defaultTextureSize, [\n        materialDef\n    ]);\n    const handleChange = (0,react.useCallback)(async (canvas)=>{\n        runningChangeHandlers.current += 1;\n        const imageUrl = canvas.toDataURL({\n            top: canvasPadding,\n            left: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1]\n        });\n        let outputImageUrl;\n        try {\n            outputImageUrl = await convertGrayscaleImageUrlToMetallicRoughness(imageUrl);\n        } finally{\n            runningChangeHandlers.current -= 1;\n        }\n        if (runningChangeHandlers.current === 0) {\n            setMetallicImageUrl(materialDef.name, outputImageUrl);\n        }\n    }, [\n        textureSize,\n        canvasPadding,\n        setMetallicImageUrl,\n        convertGrayscaleImageUrlToMetallicRoughness,\n        materialDef\n    ]);\n    (0,react.useEffect)(()=>{\n        if (skinImageUrl) {\n            let stale = false;\n            const generateImageUrl = async ()=>{\n                let arrayBuffer;\n                try {\n                    arrayBuffer = await loadImage(skinImageUrl);\n                } catch (err) {\n                    if (materialDef.hasDefault !== false) {\n                        arrayBuffer = await loadImage(defaultSkinImageUrl);\n                    } else {\n                        return;\n                    }\n                }\n                const outputImageUrl = await convertArrayBufferAlphaToGrayscale(arrayBuffer);\n                if (!stale) {\n                    setAlphaImageUrl(outputImageUrl);\n                }\n            };\n            generateImageUrl();\n            return ()=>{\n                stale = true;\n            };\n        } else {\n            setAlphaImageUrl(null);\n        }\n    }, [\n        materialDef,\n        skinImageUrl,\n        defaultSkinImageUrl,\n        textureSize,\n        convertArrayBufferAlphaToGrayscale,\n        loadImage\n    ]);\n    const canvasId = \"\".concat(materialDef.name, \":metallic\");\n    return textureSize ? /*#__PURE__*/ (0,jsx_runtime.jsx)(Canvas, {\n        canvasId: canvasId,\n        canvasType: \"metallic\",\n        onChange: handleChange,\n        baseImageUrl: alphaImageUrl,\n        textureSize: textureSize,\n        defaultDrawingMode: true\n    }, canvasId) : null;\n}\n\n;// CONCATENATED MODULE: ./src/MaterialCanvases.tsx\n\n\n\n\n\n\nconst { publicRuntimeConfig: MaterialCanvases_publicRuntimeConfig  } = config_default()();\nconst { materials: MaterialCanvases_materials  } = MaterialCanvases_publicRuntimeConfig;\nfunction MaterialCanvases() {\n    const { actualModel  } = useWarrior();\n    const materialDefs = MaterialCanvases_materials[actualModel];\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, {\n        children: materialDefs.map((materialDef)=>{\n            if (!materialDef) {\n                return null;\n            }\n            const hasMetallic = !(materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1);\n            return /*#__PURE__*/ (0,jsx_runtime.jsxs)(react.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(ColorCanvas, {\n                        materialDef: materialDef\n                    }),\n                    hasMetallic ? /*#__PURE__*/ (0,jsx_runtime.jsx)(MetallicCanvas, {\n                        materialDef: materialDef\n                    }) : null\n                ]\n            }, \"\".concat(actualModel, \"-\").concat(materialDef.name));\n        })\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\nvar QueryClientProvider = __webpack_require__(5945);\n;// CONCATENATED MODULE: ./src/ImageLoaderProvider.tsx\n\n\n\n\n\nfunction ImageLoaderProvider(param) {\n    let { children  } = param;\n    const queryClient = (0,QueryClientProvider/* useQueryClient */.NL)();\n    const context = (0,react.useMemo)(()=>{\n        return {\n            async loadImage (imageUrl) {\n                if (imageUrl.startsWith(\"data:\")) {\n                    return imageUrlToArrayBuffer(imageUrl);\n                } else {\n                    const arrayBuffer = await queryClient.fetchQuery({\n                        queryKey: [\n                            imageUrl\n                        ]\n                    });\n                    return arrayBuffer;\n                }\n            }\n        };\n    }, [\n        queryClient\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(ImageLoaderContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/@tanstack/query-core/build/lib/queryClient.mjs + 13 modules\nvar queryClient = __webpack_require__(8709);\n;// CONCATENATED MODULE: ./src/pages/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function imageFetcher(param) {\n    let { queryKey  } = param;\n    const [imageUrl] = queryKey;\n    return imageUrlToArrayBuffer(imageUrl);\n}\nconst pages_queryClient = new queryClient/* QueryClient */.S({\n    defaultOptions: {\n        queries: {\n            queryFn: imageFetcher,\n            staleTime: Infinity,\n            cacheTime: 60000,\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false\n        }\n    }\n});\nfunction HomePage() {\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)((head_default()), {\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"title\", {\n                    children: \"T2 Model Viewer & Skinner\"\n                })\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(QueryClientProvider/* QueryClientProvider */.aH, {\n                client: pages_queryClient,\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"main\", {\n                    children: /*#__PURE__*/ (0,jsx_runtime.jsx)(ImageLoaderProvider, {\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorProvider, {\n                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(EnvironmentProvider, {\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsxs)(SkinProvider, {\n                                    children: [\n                                        /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                            className: \"Viewport\",\n                                            children: [\n                                                /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                    className: \"ModelTools\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                            className: \"Field\",\n                                                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(EnvironmentSelector, {})\n                                                        }),\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                            className: \"Field\",\n                                                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(AnimationSelector, {})\n                                                        })\n                                                    ]\n                                                }),\n                                                /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorViewer, {})\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasProvider, {\n                                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(ToolsProvider, {\n                                                children: /*#__PURE__*/ (0,jsx_runtime.jsxs)(CanvasInteractions, {\n                                                    children: [\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorSelector, {}),\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                            className: \"CanvasViewport\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                                    className: \"CanvasSelector\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasToggle, {}),\n                                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(MaterialSelector, {})\n                                                                    ]\n                                                                }),\n                                                                /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasBackdrop, {}),\n                                                                /*#__PURE__*/ (0,jsx_runtime.jsx)(MaterialCanvases, {})\n                                                            ]\n                                                        }),\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasTools, {})\n                                                    ]\n                                                })\n                                            })\n                                        })\n                                    ]\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        ]\n    });\n}\n\n\n/***/ }),\n\n/***/ 8496:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"K\": function() { return /* binding */ ModelViewerContext; },\n/* harmony export */   \"Z\": function() { return /* binding */ useModelViewer; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\nconst ModelViewerContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nModelViewerContext.displayName = \"ModelViewerContext\";\nfunction useModelViewer() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ModelViewerContext);\n    if (!context) {\n        throw new Error(\"No ModelViewerContext.Provider\");\n    }\n    return context;\n}\n\n\n/***/ }),\n\n/***/ 6287:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n/* provided dependency */ var Buffer = __webpack_require__(1876)[\"Buffer\"];\n/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */ var fabric = fabric || {\n    version: \"5.2.1\"\n};\nif (true) {\n    exports.fabric = fabric;\n} else {}\n/* _AMD_END_ */ if (typeof document !== \"undefined\" && \"object\" !== \"undefined\") {\n    if (document instanceof (typeof HTMLDocument !== \"undefined\" ? HTMLDocument : Document)) {\n        fabric.document = document;\n    } else {\n        fabric.document = document.implementation.createHTMLDocument(\"\");\n    }\n    fabric.window = window;\n} else {\n    // assume we're running under node.js when document/window are not present\n    var jsdom = __webpack_require__(6734);\n    var virtualWindow = new jsdom.JSDOM(decodeURIComponent(\"%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\"), {\n        features: {\n            FetchExternalResources: [\n                \"img\"\n            ]\n        },\n        resources: \"usable\"\n    }).window;\n    fabric.document = virtualWindow.document;\n    fabric.jsdomImplForWrapper = (__webpack_require__(6907).implForWrapper);\n    fabric.nodeCanvas = (__webpack_require__(4866).Canvas);\n    fabric.window = virtualWindow;\n    DOMParser = fabric.window.DOMParser;\n}\n/**\n * True when in environment that supports touch events\n * @type boolean\n */ fabric.isTouchSupported = \"ontouchstart\" in fabric.window || \"ontouchstart\" in fabric.document || fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0;\n/**\n * True when in environment that's probably Node.js\n * @type boolean\n */ fabric.isLikelyNode = typeof Buffer !== \"undefined\" && \"object\" === \"undefined\";\n/**\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\n */ fabric.DPI = 96;\nfabric.reNum = \"(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)\";\nfabric.commaWsp = \"(?:\\\\s+,?\\\\s*|,\\\\s*)\";\nfabric.rePathCommand = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/ig;\nfabric.reNonWord = /[ \\n\\.,;!\\?\\-]/;\nfabric.fontPaths = {};\nfabric.iMatrix = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n];\nfabric.svgNS = \"http://www.w3.org/2000/svg\";\n/**\n * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\n * @since 1.7.14\n * @type Number\n * @default\n */ fabric.perfLimitSizeTotal = 2097152;\n/**\n * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\n * @since 1.7.14\n * @type Number\n * @default\n */ fabric.maxCacheSideLimit = 4096;\n/**\n * Lowest pixel limit for cache canvases, set at 256PX\n * @since 1.7.14\n * @type Number\n * @default\n */ fabric.minCacheSideLimit = 256;\n/**\n * Cache Object for widths of chars in text rendering.\n */ fabric.charWidthsCache = {};\n/**\n * if webgl is enabled and available, textureSize will determine the size\n * of the canvas backend\n * @since 2.0.0\n * @type Number\n * @default\n */ fabric.textureSize = 2048;\n/**\n * When 'true', style information is not retained when copy/pasting text, making\n * pasted text use destination style.\n * Defaults to 'false'.\n * @type Boolean\n * @default\n */ fabric.disableStyleCopyPaste = false;\n/**\n * Enable webgl for filtering picture is available\n * A filtering backend will be initialized, this will both take memory and\n * time since a default 2048x2048 canvas will be created for the gl context\n * @since 2.0.0\n * @type Boolean\n * @default\n */ fabric.enableGLFiltering = true;\n/**\n * Device Pixel Ratio\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\n */ fabric.devicePixelRatio = fabric.window.devicePixelRatio || fabric.window.webkitDevicePixelRatio || fabric.window.mozDevicePixelRatio || 1;\n/**\n * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\n * which is unitless and not rendered equally across browsers.\n *\n * Values that work quite well (as of October 2017) are:\n * - Chrome: 1.5\n * - Edge: 1.75\n * - Firefox: 0.9\n * - Safari: 0.95\n *\n * @since 2.0.0\n * @type Number\n * @default 1\n */ fabric.browserShadowBlurConstant = 1;\n/**\n * This object contains the result of arc to bezier conversion for faster retrieving if the same arc needs to be converted again.\n * It was an internal variable, is accessible since version 2.3.4\n */ fabric.arcToSegmentsCache = {};\n/**\n * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\n * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\n * you do not get any speed benefit and you get a big object in memory.\n * The object was a private variable before, while now is appended to the lib so that you have access to it and you\n * can eventually clear it.\n * It was an internal variable, is accessible since version 2.3.4\n */ fabric.boundsOfCurveCache = {};\n/**\n * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\n * @default true\n */ fabric.cachesBoundsOfCurve = true;\n/**\n * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\n * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\n * this has to be set before instantiating the filtering backend ( before filtering the first image )\n * @type Boolean\n * @default false\n */ fabric.forceGLPutImageData = false;\nfabric.initFilterBackend = function() {\n    if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\n        console.log(\"max texture size: \" + fabric.maxTextureSize);\n        return new fabric.WebglFilterBackend({\n            tileSize: fabric.textureSize\n        });\n    } else if (fabric.Canvas2dFilterBackend) {\n        return new fabric.Canvas2dFilterBackend();\n    }\n};\n(function() {\n    /**\n   * @private\n   * @param {String} eventName\n   * @param {Function} handler\n   */ function _removeEventListener(eventName, handler) {\n        if (!this.__eventListeners[eventName]) {\n            return;\n        }\n        var eventListener = this.__eventListeners[eventName];\n        if (handler) {\n            eventListener[eventListener.indexOf(handler)] = false;\n        } else {\n            fabric.util.array.fill(eventListener, false);\n        }\n    }\n    /**\n   * Observes specified event\n   * @memberOf fabric.Observable\n   * @alias on\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\n   * @return {Self} thisArg\n   * @chainable\n   */ function on(eventName, handler) {\n        if (!this.__eventListeners) {\n            this.__eventListeners = {};\n        }\n        // one object with key/value pairs was passed\n        if (arguments.length === 1) {\n            for(var prop in eventName){\n                this.on(prop, eventName[prop]);\n            }\n        } else {\n            if (!this.__eventListeners[eventName]) {\n                this.__eventListeners[eventName] = [];\n            }\n            this.__eventListeners[eventName].push(handler);\n        }\n        return this;\n    }\n    function _once(eventName, handler) {\n        var _handler = (function() {\n            handler.apply(this, arguments);\n            this.off(eventName, _handler);\n        }).bind(this);\n        this.on(eventName, _handler);\n    }\n    function once(eventName, handler) {\n        // one object with key/value pairs was passed\n        if (arguments.length === 1) {\n            for(var prop in eventName){\n                _once.call(this, prop, eventName[prop]);\n            }\n        } else {\n            _once.call(this, eventName, handler);\n        }\n        return this;\n    }\n    /**\n   * Stops event observing for a particular event handler. Calling this method\n   * without arguments removes all handlers for all events\n   * @memberOf fabric.Observable\n   * @alias off\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\n   * @param {Function} handler Function to be deleted from EventListeners\n   * @return {Self} thisArg\n   * @chainable\n   */ function off(eventName, handler) {\n        if (!this.__eventListeners) {\n            return this;\n        }\n        // remove all key/value pairs (event name -> event handler)\n        if (arguments.length === 0) {\n            for(eventName in this.__eventListeners){\n                _removeEventListener.call(this, eventName);\n            }\n        } else if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n            for(var prop in eventName){\n                _removeEventListener.call(this, prop, eventName[prop]);\n            }\n        } else {\n            _removeEventListener.call(this, eventName, handler);\n        }\n        return this;\n    }\n    /**\n   * Fires event with an optional options object\n   * @memberOf fabric.Observable\n   * @param {String} eventName Event name to fire\n   * @param {Object} [options] Options object\n   * @return {Self} thisArg\n   * @chainable\n   */ function fire(eventName, options) {\n        if (!this.__eventListeners) {\n            return this;\n        }\n        var listenersForEvent = this.__eventListeners[eventName];\n        if (!listenersForEvent) {\n            return this;\n        }\n        for(var i = 0, len = listenersForEvent.length; i < len; i++){\n            listenersForEvent[i] && listenersForEvent[i].call(this, options || {});\n        }\n        this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\n            return value !== false;\n        });\n        return this;\n    }\n    /**\n   * @namespace fabric.Observable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\n   * @see {@link http://fabricjs.com/events|Events demo}\n   */ fabric.Observable = {\n        fire: fire,\n        on: on,\n        once: once,\n        off: off\n    };\n})();\n/**\n * @namespace fabric.Collection\n */ fabric.Collection = {\n    _objects: [],\n    /**\n   * Adds objects to collection, Canvas or Group, then renders canvas\n   * (if `renderOnAddRemove` is not `false`).\n   * in case of Group no changes to bounding box are made.\n   * Objects should be instances of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the add method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */ add: function() {\n        this._objects.push.apply(this._objects, arguments);\n        if (this._onObjectAdded) {\n            for(var i = 0, length = arguments.length; i < length; i++){\n                this._onObjectAdded(arguments[i]);\n            }\n        }\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n    },\n    /**\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * An object should be an instance of (or inherit from) fabric.Object\n   * Use of this function is highly discouraged for groups.\n   * you can add a bunch of objects with the insertAt method but then you NEED\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\n   * @param {Object} object Object to insert\n   * @param {Number} index Index to insert object at\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\n   * @return {Self} thisArg\n   * @chainable\n   */ insertAt: function(object, index, nonSplicing) {\n        var objects = this._objects;\n        if (nonSplicing) {\n            objects[index] = object;\n        } else {\n            objects.splice(index, 0, object);\n        }\n        this._onObjectAdded && this._onObjectAdded(object);\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n    },\n    /**\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\n   * @param {...fabric.Object} object Zero or more fabric instances\n   * @return {Self} thisArg\n   * @chainable\n   */ remove: function() {\n        var objects = this._objects, index, somethingRemoved = false;\n        for(var i = 0, length = arguments.length; i < length; i++){\n            index = objects.indexOf(arguments[i]);\n            // only call onObjectRemoved if an object was actually removed\n            if (index !== -1) {\n                somethingRemoved = true;\n                objects.splice(index, 1);\n                this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\n            }\n        }\n        this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\n        return this;\n    },\n    /**\n   * Executes given function for each object in this group\n   * @param {Function} callback\n   *                   Callback invoked with current object as first argument,\n   *                   index - as second and an array of all objects - as third.\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\n   *                   when no `context` argument is given\n   *\n   * @param {Object} context Context (aka thisObject)\n   * @return {Self} thisArg\n   * @chainable\n   */ forEachObject: function(callback, context) {\n        var objects = this.getObjects();\n        for(var i = 0, len = objects.length; i < len; i++){\n            callback.call(context, objects[i], i, objects);\n        }\n        return this;\n    },\n    /**\n   * Returns an array of children objects of this instance\n   * Type parameter introduced in 1.3.10\n   * since 2.3.5 this method return always a COPY of the array;\n   * @param {String} [type] When specified, only objects of this type are returned\n   * @return {Array}\n   */ getObjects: function(type) {\n        if (typeof type === \"undefined\") {\n            return this._objects.concat();\n        }\n        return this._objects.filter(function(o) {\n            return o.type === type;\n        });\n    },\n    /**\n   * Returns object at specified index\n   * @param {Number} index\n   * @return {Self} thisArg\n   */ item: function(index) {\n        return this._objects[index];\n    },\n    /**\n   * Returns true if collection contains no objects\n   * @return {Boolean} true if collection is empty\n   */ isEmpty: function() {\n        return this._objects.length === 0;\n    },\n    /**\n   * Returns a size of a collection (i.e: length of an array containing its objects)\n   * @return {Number} Collection size\n   */ size: function() {\n        return this._objects.length;\n    },\n    /**\n   * Returns true if collection contains an object\n   * @param {Object} object Object to check against\n   * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\n   * @return {Boolean} `true` if collection contains an object\n   */ contains: function(object, deep) {\n        if (this._objects.indexOf(object) > -1) {\n            return true;\n        } else if (deep) {\n            return this._objects.some(function(obj) {\n                return typeof obj.contains === \"function\" && obj.contains(object, true);\n            });\n        }\n        return false;\n    },\n    /**\n   * Returns number representation of a collection complexity\n   * @return {Number} complexity\n   */ complexity: function() {\n        return this._objects.reduce(function(memo, current) {\n            memo += current.complexity ? current.complexity() : 0;\n            return memo;\n        }, 0);\n    }\n};\n/**\n * @namespace fabric.CommonMethods\n */ fabric.CommonMethods = {\n    /**\n   * Sets object's properties from options\n   * @param {Object} [options] Options object\n   */ _setOptions: function(options) {\n        for(var prop in options){\n            this.set(prop, options[prop]);\n        }\n    },\n    /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Gradient to\n   */ _initGradient: function(filler, property) {\n        if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\n            this.set(property, new fabric.Gradient(filler));\n        }\n    },\n    /**\n   * @private\n   * @param {Object} [filler] Options object\n   * @param {String} [property] property to set the Pattern to\n   * @param {Function} [callback] callback to invoke after pattern load\n   */ _initPattern: function(filler, property, callback) {\n        if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\n            this.set(property, new fabric.Pattern(filler, callback));\n        } else {\n            callback && callback();\n        }\n    },\n    /**\n   * @private\n   */ _setObject: function(obj) {\n        for(var prop in obj){\n            this._set(prop, obj[prop]);\n        }\n    },\n    /**\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ set: function(key, value) {\n        if (typeof key === \"object\") {\n            this._setObject(key);\n        } else {\n            this._set(key, value);\n        }\n        return this;\n    },\n    _set: function(key, value) {\n        this[key] = value;\n    },\n    /**\n   * Toggles specified property from `true` to `false` or from `false` to `true`\n   * @param {String} property Property to toggle\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ toggle: function(property) {\n        var value = this.get(property);\n        if (typeof value === \"boolean\") {\n            this.set(property, !value);\n        }\n        return this;\n    },\n    /**\n   * Basic getter\n   * @param {String} property Property name\n   * @return {*} value of a property\n   */ get: function(property) {\n        return this[property];\n    }\n};\n(function(global) {\n    var sqrt = Math.sqrt, atan2 = Math.atan2, pow = Math.pow, PiBy180 = Math.PI / 180, PiBy2 = Math.PI / 2;\n    /**\n   * @namespace fabric.util\n   */ fabric.util = {\n        /**\n     * Calculate the cos of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */ cos: function(angle) {\n            if (angle === 0) {\n                return 1;\n            }\n            if (angle < 0) {\n                // cos(a) = cos(-a)\n                angle = -angle;\n            }\n            var angleSlice = angle / PiBy2;\n            switch(angleSlice){\n                case 1:\n                case 3:\n                    return 0;\n                case 2:\n                    return -1;\n            }\n            return Math.cos(angle);\n        },\n        /**\n     * Calculate the sin of an angle, avoiding returning floats for known results\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} angle the angle in radians or in degree\n     * @return {Number}\n     */ sin: function(angle) {\n            if (angle === 0) {\n                return 0;\n            }\n            var angleSlice = angle / PiBy2, sign = 1;\n            if (angle < 0) {\n                // sin(-a) = -sin(a)\n                sign = -1;\n            }\n            switch(angleSlice){\n                case 1:\n                    return sign;\n                case 2:\n                    return 0;\n                case 3:\n                    return -sign;\n            }\n            return Math.sin(angle);\n        },\n        /**\n     * Removes value from an array.\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} array\n     * @param {*} value\n     * @return {Array} original array\n     */ removeFromArray: function(array, value) {\n            var idx = array.indexOf(value);\n            if (idx !== -1) {\n                array.splice(idx, 1);\n            }\n            return array;\n        },\n        /**\n     * Returns random number between 2 specified ones.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} min lower limit\n     * @param {Number} max upper limit\n     * @return {Number} random value (between min and max)\n     */ getRandomInt: function(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        },\n        /**\n     * Transforms degrees to radians.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} degrees value in degrees\n     * @return {Number} value in radians\n     */ degreesToRadians: function(degrees) {\n            return degrees * PiBy180;\n        },\n        /**\n     * Transforms radians to degrees.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number} radians value in radians\n     * @return {Number} value in degrees\n     */ radiansToDegrees: function(radians) {\n            return radians / PiBy180;\n        },\n        /**\n     * Rotates `point` around `origin` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {fabric.Point} point The point to rotate\n     * @param {fabric.Point} origin The origin of the rotation\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {fabric.Point} The new rotated point\n     */ rotatePoint: function(point, origin, radians) {\n            var newPoint = new fabric.Point(point.x - origin.x, point.y - origin.y), v = fabric.util.rotateVector(newPoint, radians);\n            return new fabric.Point(v.x, v.y).addEquals(origin);\n        },\n        /**\n     * Rotates `vector` with `radians`\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} vector The vector to rotate (x and y)\n     * @param {Number} radians The radians of the angle for the rotation\n     * @return {Object} The new rotated point\n     */ rotateVector: function(vector, radians) {\n            var sin = fabric.util.sin(radians), cos = fabric.util.cos(radians), rx = vector.x * cos - vector.y * sin, ry = vector.x * sin + vector.y * cos;\n            return {\n                x: rx,\n                y: ry\n            };\n        },\n        /**\n     * Creates a vetor from points represented as a point\n     * @static\n     * @memberOf fabric.util\n     *\n     * @typedef {Object} Point\n     * @property {number} x\n     * @property {number} y\n     *\n     * @param {Point} from\n     * @param {Point} to\n     * @returns {Point} vector\n     */ createVector: function(from, to) {\n            return new fabric.Point(to.x - from.x, to.y - from.y);\n        },\n        /**\n     * Calculates angle between 2 vectors using dot product\n     * @static\n     * @memberOf fabric.util\n     * @param {Point} a\n     * @param {Point} b\n     * @returns the angle in radian between the vectors\n     */ calcAngleBetweenVectors: function(a, b) {\n            return Math.acos((a.x * b.x + a.y * b.y) / (Math.hypot(a.x, a.y) * Math.hypot(b.x, b.y)));\n        },\n        /**\n     * @static\n     * @memberOf fabric.util\n     * @param {Point} v\n     * @returns {Point} vector representing the unit vector of pointing to the direction of `v`\n     */ getHatVector: function(v) {\n            return new fabric.Point(v.x, v.y).multiply(1 / Math.hypot(v.x, v.y));\n        },\n        /**\n     * @static\n     * @memberOf fabric.util\n     * @param {Point} A\n     * @param {Point} B\n     * @param {Point} C\n     * @returns {{ vector: Point, angle: number }} vector representing the bisector of A and A's angle\n     */ getBisector: function(A, B, C) {\n            var AB = fabric.util.createVector(A, B), AC = fabric.util.createVector(A, C);\n            var alpha = fabric.util.calcAngleBetweenVectors(AB, AC);\n            //  check if alpha is relative to AB->BC\n            var ro = fabric.util.calcAngleBetweenVectors(fabric.util.rotateVector(AB, alpha), AC);\n            var phi = alpha * (ro === 0 ? 1 : -1) / 2;\n            return {\n                vector: fabric.util.getHatVector(fabric.util.rotateVector(AB, phi)),\n                angle: alpha\n            };\n        },\n        /**\n     * Project stroke width on points returning 2 projections for each point as follows:\n     * - `miter`: 2 points corresponding to the outer boundary and the inner boundary of stroke.\n     * - `bevel`: 2 points corresponding to the bevel boundaries, tangent to the bisector.\n     * - `round`: same as `bevel`\n     * Used to calculate object's bounding box\n     * @static\n     * @memberOf fabric.util\n     * @param {Point[]} points\n     * @param {Object} options\n     * @param {number} options.strokeWidth\n     * @param {'miter'|'bevel'|'round'} options.strokeLineJoin\n     * @param {number} options.strokeMiterLimit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\n     * @param {boolean} options.strokeUniform\n     * @param {number} options.scaleX\n     * @param {number} options.scaleY\n     * @param {boolean} [openPath] whether the shape is open or not, affects the calculations of the first and last points\n     * @returns {fabric.Point[]} array of size 2n/4n of all suspected points\n     */ projectStrokeOnPoints: function(points, options, openPath) {\n            var coords = [], s = options.strokeWidth / 2, strokeUniformScalar = options.strokeUniform ? new fabric.Point(1 / options.scaleX, 1 / options.scaleY) : new fabric.Point(1, 1), getStrokeHatVector = function(v) {\n                var scalar = s / Math.hypot(v.x, v.y);\n                return new fabric.Point(v.x * scalar * strokeUniformScalar.x, v.y * scalar * strokeUniformScalar.y);\n            };\n            if (points.length <= 1) {\n                return coords;\n            }\n            points.forEach(function(p, index) {\n                var A = new fabric.Point(p.x, p.y), B, C;\n                if (index === 0) {\n                    C = points[index + 1];\n                    B = openPath ? getStrokeHatVector(fabric.util.createVector(C, A)).addEquals(A) : points[points.length - 1];\n                } else if (index === points.length - 1) {\n                    B = points[index - 1];\n                    C = openPath ? getStrokeHatVector(fabric.util.createVector(B, A)).addEquals(A) : points[0];\n                } else {\n                    B = points[index - 1];\n                    C = points[index + 1];\n                }\n                var bisector = fabric.util.getBisector(A, B, C), bisectorVector = bisector.vector, alpha = bisector.angle, scalar, miterVector;\n                if (options.strokeLineJoin === \"miter\") {\n                    scalar = -s / Math.sin(alpha / 2);\n                    miterVector = new fabric.Point(bisectorVector.x * scalar * strokeUniformScalar.x, bisectorVector.y * scalar * strokeUniformScalar.y);\n                    if (Math.hypot(miterVector.x, miterVector.y) / s <= options.strokeMiterLimit) {\n                        coords.push(A.add(miterVector));\n                        coords.push(A.subtract(miterVector));\n                        return;\n                    }\n                }\n                scalar = -s * Math.SQRT2;\n                miterVector = new fabric.Point(bisectorVector.x * scalar * strokeUniformScalar.x, bisectorVector.y * scalar * strokeUniformScalar.y);\n                coords.push(A.add(miterVector));\n                coords.push(A.subtract(miterVector));\n            });\n            return coords;\n        },\n        /**\n     * Apply transform t to point p\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Point} p The point to transform\n     * @param  {Array} t The transform\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\n     * @return {fabric.Point} The transformed point\n     */ transformPoint: function(p, t, ignoreOffset) {\n            if (ignoreOffset) {\n                return new fabric.Point(t[0] * p.x + t[2] * p.y, t[1] * p.x + t[3] * p.y);\n            }\n            return new fabric.Point(t[0] * p.x + t[2] * p.y + t[4], t[1] * p.x + t[3] * p.y + t[5]);\n        },\n        /**\n     * Returns coordinates of points's bounding rectangle (left, top, width, height)\n     * @param {Array} points 4 points array\n     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix\n     * @return {Object} Object with left, top, width, height properties\n     */ makeBoundingBoxFromPoints: function(points, transform) {\n            if (transform) {\n                for(var i = 0; i < points.length; i++){\n                    points[i] = fabric.util.transformPoint(points[i], transform);\n                }\n            }\n            var xPoints = [\n                points[0].x,\n                points[1].x,\n                points[2].x,\n                points[3].x\n            ], minX = fabric.util.array.min(xPoints), maxX = fabric.util.array.max(xPoints), width = maxX - minX, yPoints = [\n                points[0].y,\n                points[1].y,\n                points[2].y,\n                points[3].y\n            ], minY = fabric.util.array.min(yPoints), maxY = fabric.util.array.max(yPoints), height = maxY - minY;\n            return {\n                left: minX,\n                top: minY,\n                width: width,\n                height: height\n            };\n        },\n        /**\n     * Invert transformation t\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} t The transform\n     * @return {Array} The inverted transform\n     */ invertTransform: function(t) {\n            var a = 1 / (t[0] * t[3] - t[1] * t[2]), r = [\n                a * t[3],\n                -a * t[1],\n                -a * t[2],\n                a * t[0]\n            ], o = fabric.util.transformPoint({\n                x: t[4],\n                y: t[5]\n            }, r, true);\n            r[4] = -o.x;\n            r[5] = -o.y;\n            return r;\n        },\n        /**\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\n     * @static\n     * @memberOf fabric.util\n     * @param {Number|String} number number to operate on\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\n     * @return {Number}\n     */ toFixed: function(number, fractionDigits) {\n            return parseFloat(Number(number).toFixed(fractionDigits));\n        },\n        /**\n     * Converts from attribute value to pixel value if applicable.\n     * Returns converted pixels or original value not converted.\n     * @param {Number|String} value number to operate on\n     * @param {Number} fontSize\n     * @return {Number|String}\n     */ parseUnit: function(value, fontSize) {\n            var unit = /\\D{0,2}$/.exec(value), number = parseFloat(value);\n            if (!fontSize) {\n                fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n            }\n            switch(unit[0]){\n                case \"mm\":\n                    return number * fabric.DPI / 25.4;\n                case \"cm\":\n                    return number * fabric.DPI / 2.54;\n                case \"in\":\n                    return number * fabric.DPI;\n                case \"pt\":\n                    return number * fabric.DPI / 72; // or * 4 / 3\n                case \"pc\":\n                    return number * fabric.DPI / 72 * 12; // or * 16\n                case \"em\":\n                    return number * fontSize;\n                default:\n                    return number;\n            }\n        },\n        /**\n     * Function which always returns `false`.\n     * @static\n     * @memberOf fabric.util\n     * @return {Boolean}\n     */ falseFunction: function() {\n            return false;\n        },\n        /**\n     * Returns klass \"Class\" object of given namespace\n     * @memberOf fabric.util\n     * @param {String} type Type of object (eg. 'circle')\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @return {Object} klass \"Class\"\n     */ getKlass: function(type, namespace) {\n            // capitalize first letter only\n            type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n            return fabric.util.resolveNamespace(namespace)[type];\n        },\n        /**\n     * Returns array of attributes for given svg that fabric parses\n     * @memberOf fabric.util\n     * @param {String} type Type of svg element (eg. 'circle')\n     * @return {Array} string names of supported attributes\n     */ getSvgAttributes: function(type) {\n            var attributes = [\n                \"instantiated_by_use\",\n                \"style\",\n                \"id\",\n                \"class\"\n            ];\n            switch(type){\n                case \"linearGradient\":\n                    attributes = attributes.concat([\n                        \"x1\",\n                        \"y1\",\n                        \"x2\",\n                        \"y2\",\n                        \"gradientUnits\",\n                        \"gradientTransform\"\n                    ]);\n                    break;\n                case \"radialGradient\":\n                    attributes = attributes.concat([\n                        \"gradientUnits\",\n                        \"gradientTransform\",\n                        \"cx\",\n                        \"cy\",\n                        \"r\",\n                        \"fx\",\n                        \"fy\",\n                        \"fr\"\n                    ]);\n                    break;\n                case \"stop\":\n                    attributes = attributes.concat([\n                        \"offset\",\n                        \"stop-color\",\n                        \"stop-opacity\"\n                    ]);\n                    break;\n            }\n            return attributes;\n        },\n        /**\n     * Returns object of given namespace\n     * @memberOf fabric.util\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\n     * @return {Object} Object for given namespace (default fabric)\n     */ resolveNamespace: function(namespace) {\n            if (!namespace) {\n                return fabric;\n            }\n            var parts = namespace.split(\".\"), len = parts.length, i, obj = global || fabric.window;\n            for(i = 0; i < len; ++i){\n                obj = obj[parts[i]];\n            }\n            return obj;\n        },\n        /**\n     * Loads image element from given url and passes it to a callback\n     * @memberOf fabric.util\n     * @param {String} url URL representing an image\n     * @param {Function} callback Callback; invoked with loaded image\n     * @param {*} [context] Context to invoke callback in\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\n     */ loadImage: function(url, callback, context, crossOrigin) {\n            if (!url) {\n                callback && callback.call(context, url);\n                return;\n            }\n            var img = fabric.util.createImage();\n            /** @ignore */ var onLoadCallback = function() {\n                callback && callback.call(context, img, false);\n                img = img.onload = img.onerror = null;\n            };\n            img.onload = onLoadCallback;\n            /** @ignore */ img.onerror = function() {\n                fabric.log(\"Error loading \" + img.src);\n                callback && callback.call(context, null, true);\n                img = img.onload = img.onerror = null;\n            };\n            // data-urls appear to be buggy with crossOrigin\n            // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n            // see https://code.google.com/p/chromium/issues/detail?id=315152\n            //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n            // crossOrigin null is the same as not set.\n            if (url.indexOf(\"data\") !== 0 && crossOrigin !== undefined && crossOrigin !== null) {\n                img.crossOrigin = crossOrigin;\n            }\n            // IE10 / IE11-Fix: SVG contents from data: URI\n            // will only be available if the IMG is present\n            // in the DOM (and visible)\n            if (url.substring(0, 14) === \"data:image/svg\") {\n                img.onload = null;\n                fabric.util.loadImageInDom(img, onLoadCallback);\n            }\n            img.src = url;\n        },\n        /**\n     * Attaches SVG image with data: URL to the dom\n     * @memberOf fabric.util\n     * @param {Object} img Image object with data:image/svg src\n     * @param {Function} callback Callback; invoked with loaded image\n     * @return {Object} DOM element (div containing the SVG image)\n     */ loadImageInDom: function(img, onLoadCallback) {\n            var div = fabric.document.createElement(\"div\");\n            div.style.width = div.style.height = \"1px\";\n            div.style.left = div.style.top = \"-100%\";\n            div.style.position = \"absolute\";\n            div.appendChild(img);\n            fabric.document.querySelector(\"body\").appendChild(div);\n            /**\n       * Wrap in function to:\n       *   1. Call existing callback\n       *   2. Cleanup DOM\n       */ img.onload = function() {\n                onLoadCallback();\n                div.parentNode.removeChild(div);\n                div = null;\n            };\n        },\n        /**\n     * Creates corresponding fabric instances from their object representations\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} objects Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * @param {String} namespace Namespace to get klass \"Class\" object from\n     * @param {Function} reviver Method for further parsing of object elements,\n     * called after each fabric object created.\n     */ enlivenObjects: function(objects, callback, namespace, reviver) {\n            objects = objects || [];\n            var enlivenedObjects = [], numLoadedObjects = 0, numTotalObjects = objects.length;\n            function onLoaded() {\n                if (++numLoadedObjects === numTotalObjects) {\n                    callback && callback(enlivenedObjects.filter(function(obj) {\n                        // filter out undefined objects (objects that gave error)\n                        return obj;\n                    }));\n                }\n            }\n            if (!numTotalObjects) {\n                callback && callback(enlivenedObjects);\n                return;\n            }\n            objects.forEach(function(o, index) {\n                // if sparse array\n                if (!o || !o.type) {\n                    onLoaded();\n                    return;\n                }\n                var klass = fabric.util.getKlass(o.type, namespace);\n                klass.fromObject(o, function(obj, error) {\n                    error || (enlivenedObjects[index] = obj);\n                    reviver && reviver(o, obj, error);\n                    onLoaded();\n                });\n            });\n        },\n        /**\n     * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\n     * @see {@link fabric.Object.ENLIVEN_PROPS}\n     * @param {Object} object\n     * @param {Object} [context] assign enlived props to this object (pass null to skip this)\n     * @param {(objects:fabric.Object[]) => void} callback\n     */ enlivenObjectEnlivables: function(object, context, callback) {\n            var enlivenProps = fabric.Object.ENLIVEN_PROPS.filter(function(key) {\n                return !!object[key];\n            });\n            fabric.util.enlivenObjects(enlivenProps.map(function(key) {\n                return object[key];\n            }), function(enlivedProps) {\n                var objects = {};\n                enlivenProps.forEach(function(key, index) {\n                    objects[key] = enlivedProps[index];\n                    context && (context[key] = enlivedProps[index]);\n                });\n                callback && callback(objects);\n            });\n        },\n        /**\n     * Create and wait for loading of patterns\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} patterns Objects to enliven\n     * @param {Function} callback Callback to invoke when all objects are created\n     * called after each fabric object created.\n     */ enlivenPatterns: function(patterns, callback) {\n            patterns = patterns || [];\n            function onLoaded() {\n                if (++numLoadedPatterns === numPatterns) {\n                    callback && callback(enlivenedPatterns);\n                }\n            }\n            var enlivenedPatterns = [], numLoadedPatterns = 0, numPatterns = patterns.length;\n            if (!numPatterns) {\n                callback && callback(enlivenedPatterns);\n                return;\n            }\n            patterns.forEach(function(p, index) {\n                if (p && p.source) {\n                    new fabric.Pattern(p, function(pattern) {\n                        enlivenedPatterns[index] = pattern;\n                        onLoaded();\n                    });\n                } else {\n                    enlivenedPatterns[index] = p;\n                    onLoaded();\n                }\n            });\n        },\n        /**\n     * Groups SVG elements (usually those retrieved from SVG document)\n     * @static\n     * @memberOf fabric.util\n     * @param {Array} elements SVG elements to group\n     * @param {Object} [options] Options object\n     * @param {String} path Value to set sourcePath to\n     * @return {fabric.Object|fabric.Group}\n     */ groupSVGElements: function(elements, options, path) {\n            var object;\n            if (elements && elements.length === 1) {\n                return elements[0];\n            }\n            if (options) {\n                if (options.width && options.height) {\n                    options.centerPoint = {\n                        x: options.width / 2,\n                        y: options.height / 2\n                    };\n                } else {\n                    delete options.width;\n                    delete options.height;\n                }\n            }\n            object = new fabric.Group(elements, options);\n            if (typeof path !== \"undefined\") {\n                object.sourcePath = path;\n            }\n            return object;\n        },\n        /**\n     * Populates an object with properties of another object\n     * @static\n     * @memberOf fabric.util\n     * @param {Object} source Source object\n     * @param {Object} destination Destination object\n     * @return {Array} properties Properties names to include\n     */ populateWithProperties: function(source, destination, properties) {\n            if (properties && Array.isArray(properties)) {\n                for(var i = 0, len = properties.length; i < len; i++){\n                    if (properties[i] in source) {\n                        destination[properties[i]] = source[properties[i]];\n                    }\n                }\n            }\n        },\n        /**\n     * Creates canvas element\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */ createCanvasElement: function() {\n            return fabric.document.createElement(\"canvas\");\n        },\n        /**\n     * Creates a canvas element that is a copy of another and is also painted\n     * @param {CanvasElement} canvas to copy size and content of\n     * @static\n     * @memberOf fabric.util\n     * @return {CanvasElement} initialized canvas element\n     */ copyCanvasElement: function(canvas) {\n            var newCanvas = fabric.util.createCanvasElement();\n            newCanvas.width = canvas.width;\n            newCanvas.height = canvas.height;\n            newCanvas.getContext(\"2d\").drawImage(canvas, 0, 0);\n            return newCanvas;\n        },\n        /**\n     * since 2.6.0 moved from canvas instance to utility.\n     * @param {CanvasElement} canvasEl to copy size and content of\n     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\n     * @param {Number} quality <= 1 and > 0\n     * @static\n     * @memberOf fabric.util\n     * @return {String} data url\n     */ toDataURL: function(canvasEl, format, quality) {\n            return canvasEl.toDataURL(\"image/\" + format, quality);\n        },\n        /**\n     * Creates image element (works on client and node)\n     * @static\n     * @memberOf fabric.util\n     * @return {HTMLImageElement} HTML image element\n     */ createImage: function() {\n            return fabric.document.createElement(\"img\");\n        },\n        /**\n     * Multiply matrix A by matrix B to nest transformations\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a First transformMatrix\n     * @param  {Array} b Second transformMatrix\n     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\n     * @return {Array} The product of the two transform matrices\n     */ multiplyTransformMatrices: function(a, b, is2x2) {\n            // Matrix multiply a * b\n            return [\n                a[0] * b[0] + a[2] * b[1],\n                a[1] * b[0] + a[3] * b[1],\n                a[0] * b[2] + a[2] * b[3],\n                a[1] * b[2] + a[3] * b[3],\n                is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n                is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\n            ];\n        },\n        /**\n     * Decomposes standard 2x3 matrix into transform components\n     * @static\n     * @memberOf fabric.util\n     * @param  {Array} a transformMatrix\n     * @return {Object} Components of transform\n     */ qrDecompose: function(a) {\n            var angle = atan2(a[1], a[0]), denom = pow(a[0], 2) + pow(a[1], 2), scaleX = sqrt(denom), scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX, skewX = atan2(a[0] * a[2] + a[1] * a[3], denom);\n            return {\n                angle: angle / PiBy180,\n                scaleX: scaleX,\n                scaleY: scaleY,\n                skewX: skewX / PiBy180,\n                skewY: 0,\n                translateX: a[4],\n                translateY: a[5]\n            };\n        },\n        /**\n     * Returns a transform matrix starting from an object of the same kind of\n     * the one returned from qrDecompose, useful also if you want to calculate some\n     * transformations from an object that is not enlived yet\n     * @static\n     * @memberOf fabric.util\n     * @param  {Object} options\n     * @param  {Number} [options.angle] angle in degrees\n     * @return {Number[]} transform matrix\n     */ calcRotateMatrix: function(options) {\n            if (!options.angle) {\n                return fabric.iMatrix.concat();\n            }\n            var theta = fabric.util.degreesToRadians(options.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);\n            return [\n                cos,\n                sin,\n                -sin,\n                cos,\n                0,\n                0\n            ];\n        },\n        /**\n     * Returns a transform matrix starting from an object of the same kind of\n     * the one returned from qrDecompose, useful also if you want to calculate some\n     * transformations from an object that is not enlived yet.\n     * is called DimensionsTransformMatrix because those properties are the one that influence\n     * the size of the resulting box of the object.\n     * @static\n     * @memberOf fabric.util\n     * @param  {Object} options\n     * @param  {Number} [options.scaleX]\n     * @param  {Number} [options.scaleY]\n     * @param  {Boolean} [options.flipX]\n     * @param  {Boolean} [options.flipY]\n     * @param  {Number} [options.skewX]\n     * @param  {Number} [options.skewY]\n     * @return {Number[]} transform matrix\n     */ calcDimensionsMatrix: function(options) {\n            var scaleX = typeof options.scaleX === \"undefined\" ? 1 : options.scaleX, scaleY = typeof options.scaleY === \"undefined\" ? 1 : options.scaleY, scaleMatrix = [\n                options.flipX ? -scaleX : scaleX,\n                0,\n                0,\n                options.flipY ? -scaleY : scaleY,\n                0,\n                0\n            ], multiply = fabric.util.multiplyTransformMatrices, degreesToRadians = fabric.util.degreesToRadians;\n            if (options.skewX) {\n                scaleMatrix = multiply(scaleMatrix, [\n                    1,\n                    0,\n                    Math.tan(degreesToRadians(options.skewX)),\n                    1\n                ], true);\n            }\n            if (options.skewY) {\n                scaleMatrix = multiply(scaleMatrix, [\n                    1,\n                    Math.tan(degreesToRadians(options.skewY)),\n                    0,\n                    1\n                ], true);\n            }\n            return scaleMatrix;\n        },\n        /**\n     * Returns a transform matrix starting from an object of the same kind of\n     * the one returned from qrDecompose, useful also if you want to calculate some\n     * transformations from an object that is not enlived yet\n     * @static\n     * @memberOf fabric.util\n     * @param  {Object} options\n     * @param  {Number} [options.angle]\n     * @param  {Number} [options.scaleX]\n     * @param  {Number} [options.scaleY]\n     * @param  {Boolean} [options.flipX]\n     * @param  {Boolean} [options.flipY]\n     * @param  {Number} [options.skewX]\n     * @param  {Number} [options.skewX]\n     * @param  {Number} [options.translateX]\n     * @param  {Number} [options.translateY]\n     * @return {Number[]} transform matrix\n     */ composeMatrix: function(options) {\n            var matrix = [\n                1,\n                0,\n                0,\n                1,\n                options.translateX || 0,\n                options.translateY || 0\n            ], multiply = fabric.util.multiplyTransformMatrices;\n            if (options.angle) {\n                matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));\n            }\n            if (options.scaleX !== 1 || options.scaleY !== 1 || options.skewX || options.skewY || options.flipX || options.flipY) {\n                matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));\n            }\n            return matrix;\n        },\n        /**\n     * reset an object transform state to neutral. Top and left are not accounted for\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to transform\n     */ resetObjectTransform: function(target) {\n            target.scaleX = 1;\n            target.scaleY = 1;\n            target.skewX = 0;\n            target.skewY = 0;\n            target.flipX = false;\n            target.flipY = false;\n            target.rotate(0);\n        },\n        /**\n     * Extract Object transform values\n     * @static\n     * @memberOf fabric.util\n     * @param  {fabric.Object} target object to read from\n     * @return {Object} Components of transform\n     */ saveObjectTransform: function(target) {\n            return {\n                scaleX: target.scaleX,\n                scaleY: target.scaleY,\n                skewX: target.skewX,\n                skewY: target.skewY,\n                angle: target.angle,\n                left: target.left,\n                flipX: target.flipX,\n                flipY: target.flipY,\n                top: target.top\n            };\n        },\n        /**\n     * Returns true if context has transparent pixel\n     * at specified location (taking tolerance into account)\n     * @param {CanvasRenderingContext2D} ctx context\n     * @param {Number} x x coordinate\n     * @param {Number} y y coordinate\n     * @param {Number} tolerance Tolerance\n     */ isTransparent: function(ctx, x, y, tolerance) {\n            // If tolerance is > 0 adjust start coords to take into account.\n            // If moves off Canvas fix to 0\n            if (tolerance > 0) {\n                if (x > tolerance) {\n                    x -= tolerance;\n                } else {\n                    x = 0;\n                }\n                if (y > tolerance) {\n                    y -= tolerance;\n                } else {\n                    y = 0;\n                }\n            }\n            var _isTransparent = true, i, temp, imageData = ctx.getImageData(x, y, tolerance * 2 || 1, tolerance * 2 || 1), l = imageData.data.length;\n            // Split image data - for tolerance > 1, pixelDataSize = 4;\n            for(i = 3; i < l; i += 4){\n                temp = imageData.data[i];\n                _isTransparent = temp <= 0;\n                if (_isTransparent === false) {\n                    break; // Stop if colour found\n                }\n            }\n            imageData = null;\n            return _isTransparent;\n        },\n        /**\n     * Parse preserveAspectRatio attribute from element\n     * @param {string} attribute to be parsed\n     * @return {Object} an object containing align and meetOrSlice attribute\n     */ parsePreserveAspectRatioAttribute: function(attribute) {\n            var meetOrSlice = \"meet\", alignX = \"Mid\", alignY = \"Mid\", aspectRatioAttrs = attribute.split(\" \"), align;\n            if (aspectRatioAttrs && aspectRatioAttrs.length) {\n                meetOrSlice = aspectRatioAttrs.pop();\n                if (meetOrSlice !== \"meet\" && meetOrSlice !== \"slice\") {\n                    align = meetOrSlice;\n                    meetOrSlice = \"meet\";\n                } else if (aspectRatioAttrs.length) {\n                    align = aspectRatioAttrs.pop();\n                }\n            }\n            //divide align in alignX and alignY\n            alignX = align !== \"none\" ? align.slice(1, 4) : \"none\";\n            alignY = align !== \"none\" ? align.slice(5, 8) : \"none\";\n            return {\n                meetOrSlice: meetOrSlice,\n                alignX: alignX,\n                alignY: alignY\n            };\n        },\n        /**\n     * Clear char widths cache for the given font family or all the cache if no\n     * fontFamily is specified.\n     * Use it if you know you are loading fonts in a lazy way and you are not waiting\n     * for custom fonts to load properly when adding text objects to the canvas.\n     * If a text object is added when its own font is not loaded yet, you will get wrong\n     * measurement and so wrong bounding boxes.\n     * After the font cache is cleared, either change the textObject text content or call\n     * initDimensions() to trigger a recalculation\n     * @memberOf fabric.util\n     * @param {String} [fontFamily] font family to clear\n     */ clearFabricFontCache: function(fontFamily) {\n            fontFamily = (fontFamily || \"\").toLowerCase();\n            if (!fontFamily) {\n                fabric.charWidthsCache = {};\n            } else if (fabric.charWidthsCache[fontFamily]) {\n                delete fabric.charWidthsCache[fontFamily];\n            }\n        },\n        /**\n     * Given current aspect ratio, determines the max width and height that can\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Number} ar aspect ratio\n     * @param {Number} maximumArea Maximum area you want to achieve\n     * @return {Object.x} Limited dimensions by X\n     * @return {Object.y} Limited dimensions by Y\n     */ limitDimsByArea: function(ar, maximumArea) {\n            var roughWidth = Math.sqrt(maximumArea * ar), perfLimitSizeY = Math.floor(maximumArea / roughWidth);\n            return {\n                x: Math.floor(roughWidth),\n                y: perfLimitSizeY\n            };\n        },\n        capValue: function(min, value, max) {\n            return Math.max(min, Math.min(value, max));\n        },\n        /**\n     * Finds the scale for the object source to fit inside the object destination,\n     * keeping aspect ratio intact.\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Object | fabric.Object} source\n     * @param {Number} source.height natural unscaled height of the object\n     * @param {Number} source.width natural unscaled width of the object\n     * @param {Object | fabric.Object} destination\n     * @param {Number} destination.height natural unscaled height of the object\n     * @param {Number} destination.width natural unscaled width of the object\n     * @return {Number} scale factor to apply to source to fit into destination\n     */ findScaleToFit: function(source, destination) {\n            return Math.min(destination.width / source.width, destination.height / source.height);\n        },\n        /**\n     * Finds the scale for the object source to cover entirely the object destination,\n     * keeping aspect ratio intact.\n     * respect the total allowed area for the cache.\n     * @memberOf fabric.util\n     * @param {Object | fabric.Object} source\n     * @param {Number} source.height natural unscaled height of the object\n     * @param {Number} source.width natural unscaled width of the object\n     * @param {Object | fabric.Object} destination\n     * @param {Number} destination.height natural unscaled height of the object\n     * @param {Number} destination.width natural unscaled width of the object\n     * @return {Number} scale factor to apply to source to cover destination\n     */ findScaleToCover: function(source, destination) {\n            return Math.max(destination.width / source.width, destination.height / source.height);\n        },\n        /**\n     * given an array of 6 number returns something like `\"matrix(...numbers)\"`\n     * @memberOf fabric.util\n     * @param {Array} transform an array with 6 numbers\n     * @return {String} transform matrix for svg\n     * @return {Object.y} Limited dimensions by Y\n     */ matrixToSVG: function(transform) {\n            return \"matrix(\" + transform.map(function(value) {\n                return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\n            }).join(\" \") + \")\";\n        },\n        /**\n     * given an object and a transform, apply the inverse transform to the object,\n     * this is equivalent to remove from that object that transformation, so that\n     * added in a space with the removed transform, the object will be the same as before.\n     * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\n     * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg\n     * in the opposite direction.\n     * This util is used to add objects inside transformed groups or nested groups.\n     * @memberOf fabric.util\n     * @param {fabric.Object} object the object you want to transform\n     * @param {Array} transform the destination transform\n     */ removeTransformFromObject: function(object, transform) {\n            var inverted = fabric.util.invertTransform(transform), finalTransform = fabric.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());\n            fabric.util.applyTransformToObject(object, finalTransform);\n        },\n        /**\n     * given an object and a transform, apply the transform to the object.\n     * this is equivalent to change the space where the object is drawn.\n     * Adding to an object a transform that scale by 2 is like scaling it by 2.\n     * This is used when removing an object from an active selection for example.\n     * @memberOf fabric.util\n     * @param {fabric.Object} object the object you want to transform\n     * @param {Array} transform the destination transform\n     */ addTransformToObject: function(object, transform) {\n            fabric.util.applyTransformToObject(object, fabric.util.multiplyTransformMatrices(transform, object.calcOwnMatrix()));\n        },\n        /**\n     * discard an object transform state and apply the one from the matrix.\n     * @memberOf fabric.util\n     * @param {fabric.Object} object the object you want to transform\n     * @param {Array} transform the destination transform\n     */ applyTransformToObject: function(object, transform) {\n            var options = fabric.util.qrDecompose(transform), center = new fabric.Point(options.translateX, options.translateY);\n            object.flipX = false;\n            object.flipY = false;\n            object.set(\"scaleX\", options.scaleX);\n            object.set(\"scaleY\", options.scaleY);\n            object.skewX = options.skewX;\n            object.skewY = options.skewY;\n            object.angle = options.angle;\n            object.setPositionByOrigin(center, \"center\", \"center\");\n        },\n        /**\n     * given a width and height, return the size of the bounding box\n     * that can contains the box with width/height with applied transform\n     * described in options.\n     * Use to calculate the boxes around objects for controls.\n     * @memberOf fabric.util\n     * @param {Number} width\n     * @param {Number} height\n     * @param {Object} options\n     * @param {Number} options.scaleX\n     * @param {Number} options.scaleY\n     * @param {Number} options.skewX\n     * @param {Number} options.skewY\n     * @return {Object.x} width of containing\n     * @return {Object.y} height of containing\n     */ sizeAfterTransform: function(width, height, options) {\n            var dimX = width / 2, dimY = height / 2, points = [\n                {\n                    x: -dimX,\n                    y: -dimY\n                },\n                {\n                    x: dimX,\n                    y: -dimY\n                },\n                {\n                    x: -dimX,\n                    y: dimY\n                },\n                {\n                    x: dimX,\n                    y: dimY\n                }\n            ], transformMatrix = fabric.util.calcDimensionsMatrix(options), bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);\n            return {\n                x: bbox.width,\n                y: bbox.height\n            };\n        },\n        /**\n     * Merges 2 clip paths into one visually equal clip path\n     *\n     * **IMPORTANT**:\\\n     * Does **NOT** clone the arguments, clone them proir if necessary.\n     *\n     * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\n     * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\n     *\n     * In order to handle the `inverted` property we follow logic described in the following cases:\\\n     * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\n     * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\n     * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\n     *\n     * @memberOf fabric.util\n     * @param {fabric.Object} c1\n     * @param {fabric.Object} c2\n     * @returns {fabric.Object} merged clip path\n     */ mergeClipPaths: function(c1, c2) {\n            var a = c1, b = c2;\n            if (a.inverted && !b.inverted) {\n                //  case (2)\n                a = c2;\n                b = c1;\n            }\n            //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n            fabric.util.applyTransformToObject(b, fabric.util.multiplyTransformMatrices(fabric.util.invertTransform(a.calcTransformMatrix()), b.calcTransformMatrix()));\n            //  assign the `inverted` prop to the wrapping group\n            var inverted = a.inverted && b.inverted;\n            if (inverted) {\n                //  case (1)\n                a.inverted = b.inverted = false;\n            }\n            return new fabric.Group([\n                a\n            ], {\n                clipPath: b,\n                inverted: inverted\n            });\n        },\n        /**\n     * @memberOf fabric.util\n     * @param {Object} prevStyle first style to compare\n     * @param {Object} thisStyle second style to compare\n     * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\n     * @return {boolean} true if the style changed\n     */ hasStyleChanged: function(prevStyle, thisStyle, forTextSpans) {\n            forTextSpans = forTextSpans || false;\n            return prevStyle.fill !== thisStyle.fill || prevStyle.stroke !== thisStyle.stroke || prevStyle.strokeWidth !== thisStyle.strokeWidth || prevStyle.fontSize !== thisStyle.fontSize || prevStyle.fontFamily !== thisStyle.fontFamily || prevStyle.fontWeight !== thisStyle.fontWeight || prevStyle.fontStyle !== thisStyle.fontStyle || prevStyle.deltaY !== thisStyle.deltaY || forTextSpans && (prevStyle.overline !== thisStyle.overline || prevStyle.underline !== thisStyle.underline || prevStyle.linethrough !== thisStyle.linethrough);\n        },\n        /**\n     * Returns the array form of a text object's inline styles property with styles grouped in ranges\n     * rather than per character. This format is less verbose, and is better suited for storage\n     * so it is used in serialization (not during runtime).\n     * @memberOf fabric.util\n     * @param {object} styles per character styles for a text object\n     * @param {String} text the text string that the styles are applied to\n     * @return {{start: number, end: number, style: object}[]}\n     */ stylesToArray: function(styles, text) {\n            // clone style structure to prevent mutation\n            var styles = fabric.util.object.clone(styles, true), textLines = text.split(\"\\n\"), charIndex = -1, prevStyle = {}, stylesArray = [];\n            //loop through each textLine\n            for(var i = 0; i < textLines.length; i++){\n                if (!styles[i]) {\n                    //no styles exist for this line, so add the line's length to the charIndex total\n                    charIndex += textLines[i].length;\n                    continue;\n                }\n                //loop through each character of the current line\n                for(var c = 0; c < textLines[i].length; c++){\n                    charIndex++;\n                    var thisStyle = styles[i][c];\n                    //check if style exists for this character\n                    if (thisStyle) {\n                        var styleChanged = fabric.util.hasStyleChanged(prevStyle, thisStyle, true);\n                        if (styleChanged) {\n                            stylesArray.push({\n                                start: charIndex,\n                                end: charIndex + 1,\n                                style: thisStyle\n                            });\n                        } else {\n                            //if style is the same as previous character, increase end index\n                            stylesArray[stylesArray.length - 1].end++;\n                        }\n                    }\n                    prevStyle = thisStyle || {};\n                }\n            }\n            return stylesArray;\n        },\n        /**\n     * Returns the object form of the styles property with styles that are assigned per\n     * character rather than grouped by range. This format is more verbose, and is\n     * only used during runtime (not for serialization/storage)\n     * @memberOf fabric.util\n     * @param {Array} styles the serialized form of a text object's styles\n     * @param {String} text the text string that the styles are applied to\n     * @return {Object}\n     */ stylesFromArray: function(styles, text) {\n            if (!Array.isArray(styles)) {\n                return styles;\n            }\n            var textLines = text.split(\"\\n\"), charIndex = -1, styleIndex = 0, stylesObject = {};\n            //loop through each textLine\n            for(var i = 0; i < textLines.length; i++){\n                //loop through each character of the current line\n                for(var c = 0; c < textLines[i].length; c++){\n                    charIndex++;\n                    //check if there's a style collection that includes the current character\n                    if (styles[styleIndex] && styles[styleIndex].start <= charIndex && charIndex < styles[styleIndex].end) {\n                        //create object for line index if it doesn't exist\n                        stylesObject[i] = stylesObject[i] || {};\n                        //assign a style at this character's index\n                        stylesObject[i][c] = Object.assign({}, styles[styleIndex].style);\n                        //if character is at the end of the current style collection, move to the next\n                        if (charIndex === styles[styleIndex].end - 1) {\n                            styleIndex++;\n                        }\n                    }\n                }\n            }\n            return stylesObject;\n        }\n    };\n})( true ? exports : 0);\n(function() {\n    var _join = Array.prototype.join, commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n    }, repeatedCommands = {\n        m: \"l\",\n        M: \"L\"\n    };\n    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n        var costh2 = fabric.util.cos(th2), sinth2 = fabric.util.sin(th2), costh3 = fabric.util.cos(th3), sinth3 = fabric.util.sin(th3), toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1, toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1, cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2), cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2), cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3), cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);\n        return [\n            \"C\",\n            cp1X,\n            cp1Y,\n            cp2X,\n            cp2Y,\n            toX,\n            toY\n        ];\n    }\n    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\n   * http://mozilla.org/MPL/2.0/\n   */ function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n        var PI = Math.PI, th = rotateX * PI / 180, sinTh = fabric.util.sin(th), cosTh = fabric.util.cos(th), fromX = 0, fromY = 0;\n        rx = Math.abs(rx);\n        ry = Math.abs(ry);\n        var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5, py = -cosTh * toY * 0.5 + sinTh * toX * 0.5, rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px, pl = rx2 * ry2 - rx2 * py2 - ry2 * px2, root = 0;\n        if (pl < 0) {\n            var s = Math.sqrt(1 - pl / (rx2 * ry2));\n            rx *= s;\n            ry *= s;\n        } else {\n            root = (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n        }\n        var cx = root * rx * py / ry, cy = -root * ry * px / rx, cx1 = cosTh * cx - sinTh * cy + toX * 0.5, cy1 = sinTh * cx + cosTh * cy + toY * 0.5, mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry), dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n        if (sweep === 0 && dtheta > 0) {\n            dtheta -= 2 * PI;\n        } else if (sweep === 1 && dtheta < 0) {\n            dtheta += 2 * PI;\n        }\n        // Convert into cubic bezier segments <= 90deg\n        var segments = Math.ceil(Math.abs(dtheta / PI * 2)), result = [], mDelta = dtheta / segments, mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2), th3 = mTheta + mDelta;\n        for(var i = 0; i < segments; i++){\n            result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n            fromX = result[i][5];\n            fromY = result[i][6];\n            mTheta = th3;\n            th3 += mDelta;\n        }\n        return result;\n    }\n    /*\n   * Private\n   */ function calcVectorAngle(ux, uy, vx, vy) {\n        var ta = Math.atan2(uy, ux), tb = Math.atan2(vy, vx);\n        if (tb >= ta) {\n            return tb - ta;\n        } else {\n            return 2 * Math.PI - (ta - tb);\n        }\n    }\n    /**\n   * Calculate bounding box of a beziercurve\n   * @param {Number} x0 starting point\n   * @param {Number} y0\n   * @param {Number} x1 first control point\n   * @param {Number} y1\n   * @param {Number} x2 secondo control point\n   * @param {Number} y2\n   * @param {Number} x3 end of bezier\n   * @param {Number} y3\n   */ // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n    // TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var argsString;\n        if (fabric.cachesBoundsOfCurve) {\n            argsString = _join.call(arguments);\n            if (fabric.boundsOfCurveCache[argsString]) {\n                return fabric.boundsOfCurveCache[argsString];\n            }\n        }\n        var sqrt = Math.sqrt, min = Math.min, max = Math.max, abs = Math.abs, tvalues = [], bounds = [\n            [],\n            []\n        ], a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n        for(var i = 0; i < 2; ++i){\n            if (i > 0) {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            if (b2ac < 0) {\n                continue;\n            }\n            sqrtb2ac = sqrt(b2ac);\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n        var x, y, j = tvalues.length, jlen = j, mt;\n        while(j--){\n            t = tvalues[j];\n            mt = 1 - t;\n            x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[0][j] = x;\n            y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n            bounds[1][j] = y;\n        }\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        var result = [\n            {\n                x: min.apply(null, bounds[0]),\n                y: min.apply(null, bounds[1])\n            },\n            {\n                x: max.apply(null, bounds[0]),\n                y: max.apply(null, bounds[1])\n            }\n        ];\n        if (fabric.cachesBoundsOfCurve) {\n            fabric.boundsOfCurveCache[argsString] = result;\n        }\n        return result;\n    }\n    /**\n   * Converts arc to a bunch of bezier curves\n   * @param {Number} fx starting point x\n   * @param {Number} fy starting point y\n   * @param {Array} coords Arc command\n   */ function fromArcToBeziers(fx, fy, coords) {\n        var rx = coords[1], ry = coords[2], rot = coords[3], large = coords[4], sweep = coords[5], tx = coords[6], ty = coords[7], segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n        for(var i = 0, len = segsNorm.length; i < len; i++){\n            segsNorm[i][1] += fx;\n            segsNorm[i][2] += fy;\n            segsNorm[i][3] += fx;\n            segsNorm[i][4] += fy;\n            segsNorm[i][5] += fx;\n            segsNorm[i][6] += fy;\n        }\n        return segsNorm;\n    }\n    ;\n    /**\n   * This function take a parsed SVG path and make it simpler for fabricJS logic.\n   * simplification consist of: only UPPERCASE absolute commands ( relative converted to absolute )\n   * S converted in C, T converted in Q, A converted in C.\n   * @param {Array} path the array of commands of a parsed svg path for fabric.Path\n   * @return {Array} the simplified array of commands of a parsed svg path for fabric.Path\n   */ function makePathSimpler(path) {\n        // x and y represent the last point of the path. the previous command point.\n        // we add them to each relative command to make it an absolute comment.\n        // we also swap the v V h H with L, because are easier to transform.\n        var x = 0, y = 0, len = path.length, // x1 and y1 represent the last point of the subpath. the subpath is started with\n        // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n        // the last x1 and y1.\n        x1 = 0, y1 = 0, current, i, converted, // previous will host the letter of the previous command, to handle S and T.\n        // controlX and controlY will host the previous reflected control point\n        destinationPath = [], previous, controlX, controlY;\n        for(i = 0; i < len; ++i){\n            converted = false;\n            current = path[i].slice(0);\n            switch(current[0]){\n                case \"l\":\n                    current[0] = \"L\";\n                    current[1] += x;\n                    current[2] += y;\n                // falls through\n                case \"L\":\n                    x = current[1];\n                    y = current[2];\n                    break;\n                case \"h\":\n                    current[1] += x;\n                // falls through\n                case \"H\":\n                    current[0] = \"L\";\n                    current[2] = y;\n                    x = current[1];\n                    break;\n                case \"v\":\n                    current[1] += y;\n                // falls through\n                case \"V\":\n                    current[0] = \"L\";\n                    y = current[1];\n                    current[1] = x;\n                    current[2] = y;\n                    break;\n                case \"m\":\n                    current[0] = \"M\";\n                    current[1] += x;\n                    current[2] += y;\n                // falls through\n                case \"M\":\n                    x = current[1];\n                    y = current[2];\n                    x1 = current[1];\n                    y1 = current[2];\n                    break;\n                case \"c\":\n                    current[0] = \"C\";\n                    current[1] += x;\n                    current[2] += y;\n                    current[3] += x;\n                    current[4] += y;\n                    current[5] += x;\n                    current[6] += y;\n                // falls through\n                case \"C\":\n                    controlX = current[3];\n                    controlY = current[4];\n                    x = current[5];\n                    y = current[6];\n                    break;\n                case \"s\":\n                    current[0] = \"S\";\n                    current[1] += x;\n                    current[2] += y;\n                    current[3] += x;\n                    current[4] += y;\n                // falls through\n                case \"S\":\n                    // would be sScC but since we are swapping sSc for C, we check just that.\n                    if (previous === \"C\") {\n                        // calculate reflection of previous control points\n                        controlX = 2 * x - controlX;\n                        controlY = 2 * y - controlY;\n                    } else {\n                        // If there is no previous command or if the previous command was not a C, c, S, or s,\n                        // the control point is coincident with the current point\n                        controlX = x;\n                        controlY = y;\n                    }\n                    x = current[3];\n                    y = current[4];\n                    current[0] = \"C\";\n                    current[5] = current[3];\n                    current[6] = current[4];\n                    current[3] = current[1];\n                    current[4] = current[2];\n                    current[1] = controlX;\n                    current[2] = controlY;\n                    // current[3] and current[4] are NOW the second control point.\n                    // we keep it for the next reflection.\n                    controlX = current[3];\n                    controlY = current[4];\n                    break;\n                case \"q\":\n                    current[0] = \"Q\";\n                    current[1] += x;\n                    current[2] += y;\n                    current[3] += x;\n                    current[4] += y;\n                // falls through\n                case \"Q\":\n                    controlX = current[1];\n                    controlY = current[2];\n                    x = current[3];\n                    y = current[4];\n                    break;\n                case \"t\":\n                    current[0] = \"T\";\n                    current[1] += x;\n                    current[2] += y;\n                // falls through\n                case \"T\":\n                    if (previous === \"Q\") {\n                        // calculate reflection of previous control point\n                        controlX = 2 * x - controlX;\n                        controlY = 2 * y - controlY;\n                    } else {\n                        // If there is no previous command or if the previous command was not a Q, q, T or t,\n                        // assume the control point is coincident with the current point\n                        controlX = x;\n                        controlY = y;\n                    }\n                    current[0] = \"Q\";\n                    x = current[1];\n                    y = current[2];\n                    current[1] = controlX;\n                    current[2] = controlY;\n                    current[3] = x;\n                    current[4] = y;\n                    break;\n                case \"a\":\n                    current[0] = \"A\";\n                    current[6] += x;\n                    current[7] += y;\n                // falls through\n                case \"A\":\n                    converted = true;\n                    destinationPath = destinationPath.concat(fromArcToBeziers(x, y, current));\n                    x = current[6];\n                    y = current[7];\n                    break;\n                case \"z\":\n                case \"Z\":\n                    x = x1;\n                    y = y1;\n                    break;\n                default:\n            }\n            if (!converted) {\n                destinationPath.push(current);\n            }\n            previous = current[0];\n        }\n        return destinationPath;\n    }\n    ;\n    /**\n   * Calc length from point x1,y1 to x2,y2\n   * @param {Number} x1 starting point x\n   * @param {Number} y1 starting point y\n   * @param {Number} x2 starting point x\n   * @param {Number} y2 starting point y\n   * @return {Number} length of segment\n   */ function calcLineLength(x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    // functions for the Cubic beizer\n    // taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\n    function CB1(t) {\n        return t * t * t;\n    }\n    function CB2(t) {\n        return 3 * t * t * (1 - t);\n    }\n    function CB3(t) {\n        return 3 * t * (1 - t) * (1 - t);\n    }\n    function CB4(t) {\n        return (1 - t) * (1 - t) * (1 - t);\n    }\n    function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        return function(pct) {\n            var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);\n            return {\n                x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,\n                y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4\n            };\n        };\n    }\n    function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        return function(pct) {\n            var invT = 1 - pct, tangentX = 3 * invT * invT * (p2x - p1x) + 6 * invT * pct * (p3x - p2x) + 3 * pct * pct * (p4x - p3x), tangentY = 3 * invT * invT * (p2y - p1y) + 6 * invT * pct * (p3y - p2y) + 3 * pct * pct * (p4y - p3y);\n            return Math.atan2(tangentY, tangentX);\n        };\n    }\n    function QB1(t) {\n        return t * t;\n    }\n    function QB2(t) {\n        return 2 * t * (1 - t);\n    }\n    function QB3(t) {\n        return (1 - t) * (1 - t);\n    }\n    function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return function(pct) {\n            var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);\n            return {\n                x: p3x * c1 + p2x * c2 + p1x * c3,\n                y: p3y * c1 + p2y * c2 + p1y * c3\n            };\n        };\n    }\n    function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return function(pct) {\n            var invT = 1 - pct, tangentX = 2 * invT * (p2x - p1x) + 2 * pct * (p3x - p2x), tangentY = 2 * invT * (p2y - p1y) + 2 * pct * (p3y - p2y);\n            return Math.atan2(tangentY, tangentX);\n        };\n    }\n    // this will run over a path segment ( a cubic or quadratic segment) and approximate it\n    // with 100 segemnts. This will good enough to calculate the length of the curve\n    function pathIterator(iterator, x1, y1) {\n        var tempP = {\n            x: x1,\n            y: y1\n        }, p, tmpLen = 0, perc;\n        for(perc = 1; perc <= 100; perc += 1){\n            p = iterator(perc / 100);\n            tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n            tempP = p;\n        }\n        return tmpLen;\n    }\n    /**\n   * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\n   * that correspond to that pixels run over the path.\n   * The percentage will be then used to find the correct point on the canvas for the path.\n   * @param {Array} segInfo fabricJS collection of information on a parsed path\n   * @param {Number} distance from starting point, in pixels.\n   * @return {Object} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\n   */ function findPercentageForDistance(segInfo, distance) {\n        var perc = 0, tmpLen = 0, iterator = segInfo.iterator, tempP = {\n            x: segInfo.x,\n            y: segInfo.y\n        }, p, nextLen, nextStep = 0.01, angleFinder = segInfo.angleFinder, lastPerc;\n        // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n        // the path\n        while(tmpLen < distance && nextStep > 0.0001){\n            p = iterator(perc);\n            lastPerc = perc;\n            nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n            // compare tmpLen each cycle with distance, decide next perc to test.\n            if (nextLen + tmpLen > distance) {\n                // we discard this step and we make smaller steps.\n                perc -= nextStep;\n                nextStep /= 2;\n            } else {\n                tempP = p;\n                perc += nextStep;\n                tmpLen += nextLen;\n            }\n        }\n        p.angle = angleFinder(lastPerc);\n        return p;\n    }\n    /**\n   * Run over a parsed and simplifed path and extrac some informations.\n   * informations are length of each command and starting point\n   * @param {Array} path fabricJS parsed path commands\n   * @return {Array} path commands informations\n   */ function getPathSegmentsInfo(path) {\n        var totalLength = 0, len = path.length, current, //x2 and y2 are the coords of segment start\n        //x1 and y1 are the coords of the current point\n        x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo, angleFinder;\n        for(var i = 0; i < len; i++){\n            current = path[i];\n            tempInfo = {\n                x: x1,\n                y: y1,\n                command: current[0]\n            };\n            switch(current[0]){\n                case \"M\":\n                    tempInfo.length = 0;\n                    x2 = x1 = current[1];\n                    y2 = y1 = current[2];\n                    break;\n                case \"L\":\n                    tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n                    x1 = current[1];\n                    y1 = current[2];\n                    break;\n                case \"C\":\n                    iterator = getPointOnCubicBezierIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);\n                    angleFinder = getTangentCubicIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);\n                    tempInfo.iterator = iterator;\n                    tempInfo.angleFinder = angleFinder;\n                    tempInfo.length = pathIterator(iterator, x1, y1);\n                    x1 = current[5];\n                    y1 = current[6];\n                    break;\n                case \"Q\":\n                    iterator = getPointOnQuadraticBezierIterator(x1, y1, current[1], current[2], current[3], current[4]);\n                    angleFinder = getTangentQuadraticIterator(x1, y1, current[1], current[2], current[3], current[4]);\n                    tempInfo.iterator = iterator;\n                    tempInfo.angleFinder = angleFinder;\n                    tempInfo.length = pathIterator(iterator, x1, y1);\n                    x1 = current[3];\n                    y1 = current[4];\n                    break;\n                case \"Z\":\n                case \"z\":\n                    // we add those in order to ease calculations later\n                    tempInfo.destX = x2;\n                    tempInfo.destY = y2;\n                    tempInfo.length = calcLineLength(x1, y1, x2, y2);\n                    x1 = x2;\n                    y1 = y2;\n                    break;\n            }\n            totalLength += tempInfo.length;\n            info.push(tempInfo);\n        }\n        info.push({\n            length: totalLength,\n            x: x1,\n            y: y1\n        });\n        return info;\n    }\n    function getPointOnPath(path, distance, infos) {\n        if (!infos) {\n            infos = getPathSegmentsInfo(path);\n        }\n        var i = 0;\n        while(distance - infos[i].length > 0 && i < infos.length - 2){\n            distance -= infos[i].length;\n            i++;\n        }\n        // var distance = infos[infos.length - 1] * perc;\n        var segInfo = infos[i], segPercent = distance / segInfo.length, command = segInfo.command, segment = path[i], info;\n        switch(command){\n            case \"M\":\n                return {\n                    x: segInfo.x,\n                    y: segInfo.y,\n                    angle: 0\n                };\n            case \"Z\":\n            case \"z\":\n                info = new fabric.Point(segInfo.x, segInfo.y).lerp(new fabric.Point(segInfo.destX, segInfo.destY), segPercent);\n                info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);\n                return info;\n            case \"L\":\n                info = new fabric.Point(segInfo.x, segInfo.y).lerp(new fabric.Point(segment[1], segment[2]), segPercent);\n                info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);\n                return info;\n            case \"C\":\n                return findPercentageForDistance(segInfo, distance);\n            case \"Q\":\n                return findPercentageForDistance(segInfo, distance);\n        }\n    }\n    /**\n   *\n   * @param {string} pathString\n   * @return {(string|number)[][]} An array of SVG path commands\n   * @example <caption>Usage</caption>\n   * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\n   *   ['M', 3, 4],\n   *   ['Q', 3, 5, 2, 1, 4, 0],\n   *   ['Q', 9, 12, 2, 1, 4, 0],\n   * ];\n   *\n   */ function parsePath(pathString) {\n        var result = [], coords = [], currentPath, parsed, re = fabric.rePathCommand, rNumber = \"[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?\\\\s*\", rNumberCommaWsp = \"(\" + rNumber + \")\" + fabric.commaWsp, rFlagCommaWsp = \"([01])\" + fabric.commaWsp + \"?\", rArcSeq = rNumberCommaWsp + \"?\" + rNumberCommaWsp + \"?\" + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp + rNumberCommaWsp + \"?(\" + rNumber + \")\", regArcArgumentSequence = new RegExp(rArcSeq, \"g\"), match, coordsStr, // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        path;\n        if (!pathString || !pathString.match) {\n            return result;\n        }\n        path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n        for(var i = 0, coordsParsed, len = path.length; i < len; i++){\n            currentPath = path[i];\n            coordsStr = currentPath.slice(1).trim();\n            coords.length = 0;\n            var command = currentPath.charAt(0);\n            coordsParsed = [\n                command\n            ];\n            if (command.toLowerCase() === \"a\") {\n                // arcs have special flags that apparently don't require spaces so handle special\n                for(var args; args = regArcArgumentSequence.exec(coordsStr);){\n                    for(var j = 1; j < args.length; j++){\n                        coords.push(args[j]);\n                    }\n                }\n            } else {\n                while(match = re.exec(coordsStr)){\n                    coords.push(match[0]);\n                }\n            }\n            for(var j = 0, jlen = coords.length; j < jlen; j++){\n                parsed = parseFloat(coords[j]);\n                if (!isNaN(parsed)) {\n                    coordsParsed.push(parsed);\n                }\n            }\n            var commandLength = commandLengths[command.toLowerCase()], repeatedCommand = repeatedCommands[command] || command;\n            if (coordsParsed.length - 1 > commandLength) {\n                for(var k = 1, klen = coordsParsed.length; k < klen; k += commandLength){\n                    result.push([\n                        command\n                    ].concat(coordsParsed.slice(k, k + commandLength)));\n                    command = repeatedCommand;\n                }\n            } else {\n                result.push(coordsParsed);\n            }\n        }\n        return result;\n    }\n    ;\n    /**\n   *\n   * Converts points to a smooth SVG path\n   * @param {{ x: number,y: number }[]} points Array of points\n   * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\n   * @return {(string|number)[][]} An array of SVG path commands\n   */ function getSmoothPathFromPoints(points, correction) {\n        var path = [], i, p1 = new fabric.Point(points[0].x, points[0].y), p2 = new fabric.Point(points[1].x, points[1].y), len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;\n        correction = correction || 0;\n        if (manyPoints) {\n            multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n            multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n        }\n        path.push([\n            \"M\",\n            p1.x - multSignX * correction,\n            p1.y - multSignY * correction\n        ]);\n        for(i = 1; i < len; i++){\n            if (!p1.eq(p2)) {\n                var midPoint = p1.midPointFrom(p2);\n                // p1 is our bezier control point\n                // midpoint is our endpoint\n                // start point is p(i-1) value.\n                path.push([\n                    \"Q\",\n                    p1.x,\n                    p1.y,\n                    midPoint.x,\n                    midPoint.y\n                ]);\n            }\n            p1 = points[i];\n            if (i + 1 < points.length) {\n                p2 = points[i + 1];\n            }\n        }\n        if (manyPoints) {\n            multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n            multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n        }\n        path.push([\n            \"L\",\n            p1.x + multSignX * correction,\n            p1.y + multSignY * correction\n        ]);\n        return path;\n    }\n    /**\n   * Transform a path by transforming each segment.\n   * it has to be a simplified path or it won't work.\n   * WARNING: this depends from pathOffset for correct operation\n   * @param {Array} path fabricJS parsed and simplified path commands\n   * @param {Array} transform matrix that represent the transformation\n   * @param {Object} [pathOffset] the fabric.Path pathOffset\n   * @param {Number} pathOffset.x\n   * @param {Number} pathOffset.y\n   * @returns {Array} the transformed path\n   */ function transformPath(path, transform, pathOffset) {\n        if (pathOffset) {\n            transform = fabric.util.multiplyTransformMatrices(transform, [\n                1,\n                0,\n                0,\n                1,\n                -pathOffset.x,\n                -pathOffset.y\n            ]);\n        }\n        return path.map(function(pathSegment) {\n            var newSegment = pathSegment.slice(0), point = {};\n            for(var i = 1; i < pathSegment.length - 1; i += 2){\n                point.x = pathSegment[i];\n                point.y = pathSegment[i + 1];\n                point = fabric.util.transformPoint(point, transform);\n                newSegment[i] = point.x;\n                newSegment[i + 1] = point.y;\n            }\n            return newSegment;\n        });\n    }\n    /**\n   * Join path commands to go back to svg format\n   * @param {Array} pathData fabricJS parsed path commands\n   * @return {String} joined path 'M 0 0 L 20 30'\n   */ fabric.util.joinPath = function(pathData) {\n        return pathData.map(function(segment) {\n            return segment.join(\" \");\n        }).join(\" \");\n    };\n    fabric.util.parsePath = parsePath;\n    fabric.util.makePathSimpler = makePathSimpler;\n    fabric.util.getSmoothPathFromPoints = getSmoothPathFromPoints;\n    fabric.util.getPathSegmentsInfo = getPathSegmentsInfo;\n    fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n    fabric.util.getPointOnPath = getPointOnPath;\n    fabric.util.transformPath = transformPath;\n})();\n(function() {\n    var slice = Array.prototype.slice;\n    /**\n   * Invokes method on all items in a given array\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} method Name of a method to invoke\n   * @return {Array}\n   */ function invoke(array, method) {\n        var args = slice.call(arguments, 2), result = [];\n        for(var i = 0, len = array.length; i < len; i++){\n            result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n        }\n        return result;\n    }\n    /**\n   * Finds maximum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */ function max(array, byProperty) {\n        return find(array, byProperty, function(value1, value2) {\n            return value1 >= value2;\n        });\n    }\n    /**\n   * Finds minimum value in array (not necessarily \"first\" one)\n   * @memberOf fabric.util.array\n   * @param {Array} array Array to iterate over\n   * @param {String} byProperty\n   * @return {*}\n   */ function min(array, byProperty) {\n        return find(array, byProperty, function(value1, value2) {\n            return value1 < value2;\n        });\n    }\n    /**\n   * @private\n   */ function fill(array, value) {\n        var k = array.length;\n        while(k--){\n            array[k] = value;\n        }\n        return array;\n    }\n    /**\n   * @private\n   */ function find(array, byProperty, condition) {\n        if (!array || array.length === 0) {\n            return;\n        }\n        var i = array.length - 1, result = byProperty ? array[i][byProperty] : array[i];\n        if (byProperty) {\n            while(i--){\n                if (condition(array[i][byProperty], result)) {\n                    result = array[i][byProperty];\n                }\n            }\n        } else {\n            while(i--){\n                if (condition(array[i], result)) {\n                    result = array[i];\n                }\n            }\n        }\n        return result;\n    }\n    /**\n   * @namespace fabric.util.array\n   */ fabric.util.array = {\n        fill: fill,\n        invoke: invoke,\n        min: min,\n        max: max\n    };\n})();\n(function() {\n    /**\n   * Copies all enumerable properties of one js object to another\n   * this does not and cannot compete with generic utils.\n   * Does not clone or extend fabric.Object subclasses.\n   * This is mostly for internal use and has extra handling for fabricJS objects\n   * it skips the canvas and group properties in deep cloning.\n   * @memberOf fabric.util.object\n   * @param {Object} destination Where to copy to\n   * @param {Object} source Where to copy from\n   * @param {Boolean} [deep] Whether to extend nested objects\n   * @return {Object}\n   */ function extend(destination, source, deep) {\n        // JScript DontEnum bug is not taken care of\n        // the deep clone is for internal use, is not meant to avoid\n        // javascript traps or cloning html element or self referenced objects.\n        if (deep) {\n            if (!fabric.isLikelyNode && source instanceof Element) {\n                // avoid cloning deep images, canvases,\n                destination = source;\n            } else if (source instanceof Array) {\n                destination = [];\n                for(var i = 0, len = source.length; i < len; i++){\n                    destination[i] = extend({}, source[i], deep);\n                }\n            } else if (source && typeof source === \"object\") {\n                for(var property in source){\n                    if (property === \"canvas\" || property === \"group\") {\n                        // we do not want to clone this props at all.\n                        // we want to keep the keys in the copy\n                        destination[property] = null;\n                    } else if (source.hasOwnProperty(property)) {\n                        destination[property] = extend({}, source[property], deep);\n                    }\n                }\n            } else {\n                // this sounds odd for an extend but is ok for recursive use\n                destination = source;\n            }\n        } else {\n            for(var property in source){\n                destination[property] = source[property];\n            }\n        }\n        return destination;\n    }\n    /**\n   * Creates an empty object and copies all enumerable properties of another object to it\n   * This method is mostly for internal use, and not intended for duplicating shapes in canvas. \n   * @memberOf fabric.util.object\n   * @param {Object} object Object to clone\n   * @param {Boolean} [deep] Whether to clone nested objects\n   * @return {Object}\n   */ //TODO: this function return an empty object if you try to clone null\n    function clone(object, deep) {\n        return extend({}, object, deep);\n    }\n    /** @namespace fabric.util.object */ fabric.util.object = {\n        extend: extend,\n        clone: clone\n    };\n    fabric.util.object.extend(fabric.util, fabric.Observable);\n})();\n(function() {\n    /**\n   * Camelizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to camelize\n   * @return {String} Camelized version of a string\n   */ function camelize(string) {\n        return string.replace(/-+(.)?/g, function(match, character) {\n            return character ? character.toUpperCase() : \"\";\n        });\n    }\n    /**\n   * Capitalizes a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to capitalize\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\n   * and other letters stay untouched, if false first letter is capitalized\n   * and other letters are converted to lowercase.\n   * @return {String} Capitalized version of a string\n   */ function capitalize(string, firstLetterOnly) {\n        return string.charAt(0).toUpperCase() + (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n    }\n    /**\n   * Escapes XML in a string\n   * @memberOf fabric.util.string\n   * @param {String} string String to escape\n   * @return {String} Escaped version of a string\n   */ function escapeXml(string) {\n        return string.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    }\n    /**\n   * Divide a string in the user perceived single units\n   * @memberOf fabric.util.string\n   * @param {String} textstring String to escape\n   * @return {Array} array containing the graphemes\n   */ function graphemeSplit(textstring) {\n        var i = 0, chr, graphemes = [];\n        for(i = 0, chr; i < textstring.length; i++){\n            if ((chr = getWholeChar(textstring, i)) === false) {\n                continue;\n            }\n            graphemes.push(chr);\n        }\n        return graphemes;\n    }\n    // taken from mdn in the charAt doc page.\n    function getWholeChar(str, i) {\n        var code = str.charCodeAt(i);\n        if (isNaN(code)) {\n            return \"\"; // Position not found\n        }\n        if (code < 0xD800 || code > 0xDFFF) {\n            return str.charAt(i);\n        }\n        // High surrogate (could change last hex to 0xDB7F to treat high private\n        // surrogates as single characters)\n        if (0xD800 <= code && code <= 0xDBFF) {\n            if (str.length <= i + 1) {\n                throw \"High surrogate without following low surrogate\";\n            }\n            var next = str.charCodeAt(i + 1);\n            if (0xDC00 > next || next > 0xDFFF) {\n                throw \"High surrogate without following low surrogate\";\n            }\n            return str.charAt(i) + str.charAt(i + 1);\n        }\n        // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n        if (i === 0) {\n            throw \"Low surrogate without preceding high surrogate\";\n        }\n        var prev = str.charCodeAt(i - 1);\n        // (could change last hex to 0xDB7F to treat high private\n        // surrogates as single characters)\n        if (0xD800 > prev || prev > 0xDBFF) {\n            throw \"Low surrogate without preceding high surrogate\";\n        }\n        // We can pass over low surrogates now as the second component\n        // in a pair which we have already processed\n        return false;\n    }\n    /**\n   * String utilities\n   * @namespace fabric.util.string\n   */ fabric.util.string = {\n        camelize: camelize,\n        capitalize: capitalize,\n        escapeXml: escapeXml,\n        graphemeSplit: graphemeSplit\n    };\n})();\n(function() {\n    var slice = Array.prototype.slice, emptyFunction = function() {}, IS_DONTENUM_BUGGY = function() {\n        for(var p in {\n            toString: 1\n        }){\n            if (p === \"toString\") {\n                return false;\n            }\n        }\n        return true;\n    }(), /** @ignore */ addMethods = function(klass, source, parent) {\n        for(var property in source){\n            if (property in klass.prototype && typeof klass.prototype[property] === \"function\" && (source[property] + \"\").indexOf(\"callSuper\") > -1) {\n                klass.prototype[property] = function(property) {\n                    return function() {\n                        var superclass = this.constructor.superclass;\n                        this.constructor.superclass = parent;\n                        var returnValue = source[property].apply(this, arguments);\n                        this.constructor.superclass = superclass;\n                        if (property !== \"initialize\") {\n                            return returnValue;\n                        }\n                    };\n                }(property);\n            } else {\n                klass.prototype[property] = source[property];\n            }\n            if (IS_DONTENUM_BUGGY) {\n                if (source.toString !== Object.prototype.toString) {\n                    klass.prototype.toString = source.toString;\n                }\n                if (source.valueOf !== Object.prototype.valueOf) {\n                    klass.prototype.valueOf = source.valueOf;\n                }\n            }\n        }\n    };\n    function Subclass() {}\n    function callSuper(methodName) {\n        var parentMethod = null, _this = this;\n        // climb prototype chain to find method not equal to callee's method\n        while(_this.constructor.superclass){\n            var superClassMethod = _this.constructor.superclass.prototype[methodName];\n            if (_this[methodName] !== superClassMethod) {\n                parentMethod = superClassMethod;\n                break;\n            }\n            // eslint-disable-next-line\n            _this = _this.constructor.superclass.prototype;\n        }\n        if (!parentMethod) {\n            return console.log(\"tried to callSuper \" + methodName + \", method not found in prototype chain\", this);\n        }\n        return arguments.length > 1 ? parentMethod.apply(this, slice.call(arguments, 1)) : parentMethod.call(this);\n    }\n    /**\n   * Helper for creation of \"classes\".\n   * @memberOf fabric.util\n   * @param {Function} [parent] optional \"Class\" to inherit from\n   * @param {Object} [properties] Properties shared by all instances of this class\n   *                  (be careful modifying objects defined here as this would affect all instances)\n   */ function createClass() {\n        var parent = null, properties = slice.call(arguments, 0);\n        if (typeof properties[0] === \"function\") {\n            parent = properties.shift();\n        }\n        function klass() {\n            this.initialize.apply(this, arguments);\n        }\n        klass.superclass = parent;\n        klass.subclasses = [];\n        if (parent) {\n            Subclass.prototype = parent.prototype;\n            klass.prototype = new Subclass();\n            parent.subclasses.push(klass);\n        }\n        for(var i = 0, length = properties.length; i < length; i++){\n            addMethods(klass, properties[i], parent);\n        }\n        if (!klass.prototype.initialize) {\n            klass.prototype.initialize = emptyFunction;\n        }\n        klass.prototype.constructor = klass;\n        klass.prototype.callSuper = callSuper;\n        return klass;\n    }\n    fabric.util.createClass = createClass;\n})();\n(function() {\n    // since ie11 can use addEventListener but they do not support options, i need to check\n    var couldUseAttachEvent = !!fabric.document.createElement(\"div\").attachEvent, touchEvents = [\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\"\n    ];\n    /**\n   * Adds an event listener to an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */ fabric.util.addListener = function(element, eventName, handler, options) {\n        element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);\n    };\n    /**\n   * Removes an event listener from an element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {String} eventName\n   * @param {Function} handler\n   */ fabric.util.removeListener = function(element, eventName, handler, options) {\n        element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);\n    };\n    function getTouchInfo(event) {\n        var touchProp = event.changedTouches;\n        if (touchProp && touchProp[0]) {\n            return touchProp[0];\n        }\n        return event;\n    }\n    fabric.util.getPointer = function(event) {\n        var element = event.target, scroll = fabric.util.getScrollLeftTop(element), _evt = getTouchInfo(event);\n        return {\n            x: _evt.clientX + scroll.left,\n            y: _evt.clientY + scroll.top\n        };\n    };\n    fabric.util.isTouchEvent = function(event) {\n        return touchEvents.indexOf(event.type) > -1 || event.pointerType === \"touch\";\n    };\n})();\n(function() {\n    /**\n   * Cross-browser wrapper for setting element's style\n   * @memberOf fabric.util\n   * @param {HTMLElement} element\n   * @param {Object} styles\n   * @return {HTMLElement} Element that was passed as a first argument\n   */ function setStyle(element, styles) {\n        var elementStyle = element.style;\n        if (!elementStyle) {\n            return element;\n        }\n        if (typeof styles === \"string\") {\n            element.style.cssText += \";\" + styles;\n            return styles.indexOf(\"opacity\") > -1 ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1]) : element;\n        }\n        for(var property in styles){\n            if (property === \"opacity\") {\n                setOpacity(element, styles[property]);\n            } else {\n                var normalizedProperty = property === \"float\" || property === \"cssFloat\" ? typeof elementStyle.styleFloat === \"undefined\" ? \"cssFloat\" : \"styleFloat\" : property;\n                elementStyle.setProperty(normalizedProperty, styles[property]);\n            }\n        }\n        return element;\n    }\n    var parseEl = fabric.document.createElement(\"div\"), supportsOpacity = typeof parseEl.style.opacity === \"string\", supportsFilters = typeof parseEl.style.filter === \"string\", reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/, /** @ignore */ setOpacity = function(element) {\n        return element;\n    };\n    if (supportsOpacity) {\n        /** @ignore */ setOpacity = function(element, value) {\n            element.style.opacity = value;\n            return element;\n        };\n    } else if (supportsFilters) {\n        /** @ignore */ setOpacity = function(element, value) {\n            var es = element.style;\n            if (element.currentStyle && !element.currentStyle.hasLayout) {\n                es.zoom = 1;\n            }\n            if (reOpacity.test(es.filter)) {\n                value = value >= 0.9999 ? \"\" : \"alpha(opacity=\" + value * 100 + \")\";\n                es.filter = es.filter.replace(reOpacity, value);\n            } else {\n                es.filter += \" alpha(opacity=\" + value * 100 + \")\";\n            }\n            return element;\n        };\n    }\n    fabric.util.setStyle = setStyle;\n})();\n(function() {\n    var _slice = Array.prototype.slice;\n    /**\n   * Takes id and returns an element with that id (if one exists in a document)\n   * @memberOf fabric.util\n   * @param {String|HTMLElement} id\n   * @return {HTMLElement|null}\n   */ function getById(id) {\n        return typeof id === \"string\" ? fabric.document.getElementById(id) : id;\n    }\n    var sliceCanConvertNodelists, /**\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\n       * @memberOf fabric.util\n       * @param {Object} arrayLike\n       * @return {Array}\n       */ toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n    };\n    try {\n        sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n    } catch (err) {}\n    if (!sliceCanConvertNodelists) {\n        toArray = function(arrayLike) {\n            var arr = new Array(arrayLike.length), i = arrayLike.length;\n            while(i--){\n                arr[i] = arrayLike[i];\n            }\n            return arr;\n        };\n    }\n    /**\n   * Creates specified element with specified attributes\n   * @memberOf fabric.util\n   * @param {String} tagName Type of an element to create\n   * @param {Object} [attributes] Attributes to set on an element\n   * @return {HTMLElement} Newly created element\n   */ function makeElement(tagName, attributes) {\n        var el = fabric.document.createElement(tagName);\n        for(var prop in attributes){\n            if (prop === \"class\") {\n                el.className = attributes[prop];\n            } else if (prop === \"for\") {\n                el.htmlFor = attributes[prop];\n            } else {\n                el.setAttribute(prop, attributes[prop]);\n            }\n        }\n        return el;\n    }\n    /**\n   * Adds class to an element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to add class to\n   * @param {String} className Class to add to an element\n   */ function addClass(element, className) {\n        if (element && (\" \" + element.className + \" \").indexOf(\" \" + className + \" \") === -1) {\n            element.className += (element.className ? \" \" : \"\") + className;\n        }\n    }\n    /**\n   * Wraps element with another element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to wrap\n   * @param {HTMLElement|String} wrapper Element to wrap with\n   * @param {Object} [attributes] Attributes to set on a wrapper\n   * @return {HTMLElement} wrapper\n   */ function wrapElement(element, wrapper, attributes) {\n        if (typeof wrapper === \"string\") {\n            wrapper = makeElement(wrapper, attributes);\n        }\n        if (element.parentNode) {\n            element.parentNode.replaceChild(wrapper, element);\n        }\n        wrapper.appendChild(element);\n        return wrapper;\n    }\n    /**\n   * Returns element scroll offsets\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to operate on\n   * @return {Object} Object with left/top values\n   */ function getScrollLeftTop(element) {\n        var left = 0, top = 0, docElement = fabric.document.documentElement, body = fabric.document.body || {\n            scrollLeft: 0,\n            scrollTop: 0\n        };\n        // While loop checks (and then sets element to) .parentNode OR .host\n        //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n        //  but the .parentNode of a root ShadowDOM node will always be null, instead\n        //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n        while(element && (element.parentNode || element.host)){\n            // Set element to element parent, or 'host' in case of ShadowDOM\n            element = element.parentNode || element.host;\n            if (element === fabric.document) {\n                left = body.scrollLeft || docElement.scrollLeft || 0;\n                top = body.scrollTop || docElement.scrollTop || 0;\n            } else {\n                left += element.scrollLeft || 0;\n                top += element.scrollTop || 0;\n            }\n            if (element.nodeType === 1 && element.style.position === \"fixed\") {\n                break;\n            }\n        }\n        return {\n            left: left,\n            top: top\n        };\n    }\n    /**\n   * Returns offset for a given element\n   * @function\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get offset for\n   * @return {Object} Object with \"left\" and \"top\" properties\n   */ function getElementOffset(element) {\n        var docElem, doc = element && element.ownerDocument, box = {\n            left: 0,\n            top: 0\n        }, offset = {\n            left: 0,\n            top: 0\n        }, scrollLeftTop, offsetAttributes = {\n            borderLeftWidth: \"left\",\n            borderTopWidth: \"top\",\n            paddingLeft: \"left\",\n            paddingTop: \"top\"\n        };\n        if (!doc) {\n            return offset;\n        }\n        for(var attr in offsetAttributes){\n            offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n        }\n        docElem = doc.documentElement;\n        if (typeof element.getBoundingClientRect !== \"undefined\") {\n            box = element.getBoundingClientRect();\n        }\n        scrollLeftTop = getScrollLeftTop(element);\n        return {\n            left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n            top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top\n        };\n    }\n    /**\n   * Returns style attribute value of a given element\n   * @memberOf fabric.util\n   * @param {HTMLElement} element Element to get style attribute for\n   * @param {String} attr Style attribute to get for element\n   * @return {String} Style attribute value of the given element.\n   */ var getElementStyle;\n    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n        getElementStyle = function(element, attr) {\n            var style = fabric.document.defaultView.getComputedStyle(element, null);\n            return style ? style[attr] : undefined;\n        };\n    } else {\n        getElementStyle = function(element, attr) {\n            var value = element.style[attr];\n            if (!value && element.currentStyle) {\n                value = element.currentStyle[attr];\n            }\n            return value;\n        };\n    }\n    (function() {\n        var style = fabric.document.documentElement.style, selectProp = \"userSelect\" in style ? \"userSelect\" : \"MozUserSelect\" in style ? \"MozUserSelect\" : \"WebkitUserSelect\" in style ? \"WebkitUserSelect\" : \"KhtmlUserSelect\" in style ? \"KhtmlUserSelect\" : \"\";\n        /**\n     * Makes element unselectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make unselectable\n     * @return {HTMLElement} Element that was passed in\n     */ function makeElementUnselectable(element) {\n            if (typeof element.onselectstart !== \"undefined\") {\n                element.onselectstart = fabric.util.falseFunction;\n            }\n            if (selectProp) {\n                element.style[selectProp] = \"none\";\n            } else if (typeof element.unselectable === \"string\") {\n                element.unselectable = \"on\";\n            }\n            return element;\n        }\n        /**\n     * Makes element selectable\n     * @memberOf fabric.util\n     * @param {HTMLElement} element Element to make selectable\n     * @return {HTMLElement} Element that was passed in\n     */ function makeElementSelectable(element) {\n            if (typeof element.onselectstart !== \"undefined\") {\n                element.onselectstart = null;\n            }\n            if (selectProp) {\n                element.style[selectProp] = \"\";\n            } else if (typeof element.unselectable === \"string\") {\n                element.unselectable = \"\";\n            }\n            return element;\n        }\n        fabric.util.makeElementUnselectable = makeElementUnselectable;\n        fabric.util.makeElementSelectable = makeElementSelectable;\n    })();\n    function getNodeCanvas(element) {\n        var impl = fabric.jsdomImplForWrapper(element);\n        return impl._canvas || impl._image;\n    }\n    ;\n    function cleanUpJsdomNode(element) {\n        if (!fabric.isLikelyNode) {\n            return;\n        }\n        var impl = fabric.jsdomImplForWrapper(element);\n        if (impl) {\n            impl._image = null;\n            impl._canvas = null;\n            // unsure if necessary\n            impl._currentSrc = null;\n            impl._attributes = null;\n            impl._classList = null;\n        }\n    }\n    function setImageSmoothing(ctx, value) {\n        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\n        ctx.imageSmoothingEnabled = value;\n    }\n    /**\n   * setImageSmoothing sets the context imageSmoothingEnabled property.\n   * Used by canvas and by ImageObject.\n   * @memberOf fabric.util\n   * @since 4.0.0\n   * @param {HTMLRenderingContext2D} ctx to set on\n   * @param {Boolean} value true or false\n   */ fabric.util.setImageSmoothing = setImageSmoothing;\n    fabric.util.getById = getById;\n    fabric.util.toArray = toArray;\n    fabric.util.addClass = addClass;\n    fabric.util.makeElement = makeElement;\n    fabric.util.wrapElement = wrapElement;\n    fabric.util.getScrollLeftTop = getScrollLeftTop;\n    fabric.util.getElementOffset = getElementOffset;\n    fabric.util.getNodeCanvas = getNodeCanvas;\n    fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\n})();\n(function() {\n    function addParamToUrl(url, param) {\n        return url + (/\\?/.test(url) ? \"&\" : \"?\") + param;\n    }\n    function emptyFn() {}\n    /**\n   * Cross-browser abstraction for sending XMLHttpRequest\n   * @memberOf fabric.util\n   * @param {String} url URL to send XMLHttpRequest to\n   * @param {Object} [options] Options object\n   * @param {String} [options.method=\"GET\"]\n   * @param {String} [options.parameters] parameters to append to url in GET or in body\n   * @param {String} [options.body] body to send with POST or PUT request\n   * @param {Function} options.onComplete Callback to invoke when request is completed\n   * @return {XMLHttpRequest} request\n   */ function request(url, options) {\n        options || (options = {});\n        var method = options.method ? options.method.toUpperCase() : \"GET\", onComplete = options.onComplete || function() {}, xhr = new fabric.window.XMLHttpRequest(), body = options.body || options.parameters;\n        /** @ignore */ xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                onComplete(xhr);\n                xhr.onreadystatechange = emptyFn;\n            }\n        };\n        if (method === \"GET\") {\n            body = null;\n            if (typeof options.parameters === \"string\") {\n                url = addParamToUrl(url, options.parameters);\n            }\n        }\n        xhr.open(method, url, true);\n        if (method === \"POST\" || method === \"PUT\") {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n        xhr.send(body);\n        return xhr;\n    }\n    fabric.util.request = request;\n})();\n/**\n * Wrapper around `console.log` (when available)\n * @param {*} [values] Values to log\n */ fabric.log = console.log;\n/**\n * Wrapper around `console.warn` (when available)\n * @param {*} [values] Values to log as a warning\n */ fabric.warn = console.warn;\n(function() {\n    var extend = fabric.util.object.extend, clone = fabric.util.object.clone;\n    /**\n   * @typedef {Object} AnimationOptions\n   * Animation of a value or list of values.\n   * When using lists, think of something like this:\n   * fabric.util.animate({\n   *   startValue: [1, 2, 3],\n   *   endValue: [2, 4, 6],\n   *   onChange: function([a, b, c]) {\n   *     canvas.zoomToPoint({x: b, y: c}, a)\n   *     canvas.renderAll()\n   *   }\n   * });\n   * @example\n   * @property {Function} [onChange] Callback; invoked on every value change\n   * @property {Function} [onComplete] Callback; invoked when value change is completed\n   * @example\n   * // Note: startValue, endValue, and byValue must match the type\n   * var animationOptions = { startValue: 0, endValue: 1, byValue: 0.25 }\n   * var animationOptions = { startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] }\n   * @property {number | number[]} [startValue=0] Starting value\n   * @property {number | number[]} [endValue=100] Ending value\n   * @property {number | number[]} [byValue=100] Value to modify the property by\n   * @property {Function} [easing] Easing function\n   * @property {Number} [duration=500] Duration of change (in ms)\n   * @property {Function} [abort] Additional function with logic. If returns true, animation aborts.\n   *\n   * @typedef {() => void} CancelFunction\n   *\n   * @typedef {Object} AnimationCurrentState\n   * @property {number | number[]} currentValue value in range [`startValue`, `endValue`]\n   * @property {number} completionRate value in range [0, 1]\n   * @property {number} durationRate value in range [0, 1]\n   *\n   * @typedef {(AnimationOptions & AnimationCurrentState & { cancel: CancelFunction }} AnimationContext\n   */ /**\n   * Array holding all running animations\n   * @memberof fabric\n   * @type {AnimationContext[]}\n   */ var RUNNING_ANIMATIONS = [];\n    fabric.util.object.extend(RUNNING_ANIMATIONS, {\n        /**\n     * cancel all running animations at the next requestAnimFrame\n     * @returns {AnimationContext[]}\n     */ cancelAll: function() {\n            var animations = this.splice(0);\n            animations.forEach(function(animation) {\n                animation.cancel();\n            });\n            return animations;\n        },\n        /**\n     * cancel all running animations attached to canvas at the next requestAnimFrame\n     * @param {fabric.Canvas} canvas\n     * @returns {AnimationContext[]}\n     */ cancelByCanvas: function(canvas) {\n            if (!canvas) {\n                return [];\n            }\n            var cancelled = this.filter(function(animation) {\n                return typeof animation.target === \"object\" && animation.target.canvas === canvas;\n            });\n            cancelled.forEach(function(animation) {\n                animation.cancel();\n            });\n            return cancelled;\n        },\n        /**\n     * cancel all running animations for target at the next requestAnimFrame\n     * @param {*} target\n     * @returns {AnimationContext[]}\n     */ cancelByTarget: function(target) {\n            var cancelled = this.findAnimationsByTarget(target);\n            cancelled.forEach(function(animation) {\n                animation.cancel();\n            });\n            return cancelled;\n        },\n        /**\n     *\n     * @param {CancelFunction} cancelFunc the function returned by animate\n     * @returns {number}\n     */ findAnimationIndex: function(cancelFunc) {\n            return this.indexOf(this.findAnimation(cancelFunc));\n        },\n        /**\n     *\n     * @param {CancelFunction} cancelFunc the function returned by animate\n     * @returns {AnimationContext | undefined} animation's options object\n     */ findAnimation: function(cancelFunc) {\n            return this.find(function(animation) {\n                return animation.cancel === cancelFunc;\n            });\n        },\n        /**\n     *\n     * @param {*} target the object that is assigned to the target property of the animation context\n     * @returns {AnimationContext[]} array of animation options object associated with target\n     */ findAnimationsByTarget: function(target) {\n            if (!target) {\n                return [];\n            }\n            return this.filter(function(animation) {\n                return animation.target === target;\n            });\n        }\n    });\n    function noop() {\n        return false;\n    }\n    function defaultEasing(t, b, c, d) {\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n    }\n    /**\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {AnimationOptions} [options] Animation options\n   * @example\n   * // Note: startValue, endValue, and byValue must match the type\n   * fabric.util.animate({ startValue: 0, endValue: 1, byValue: 0.25 })\n   * fabric.util.animate({ startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] })\n   * @returns {CancelFunction} cancel function\n   */ function animate(options) {\n        options || (options = {});\n        var cancel = false, context, removeFromRegistry = function() {\n            var index = fabric.runningAnimations.indexOf(context);\n            return index > -1 && fabric.runningAnimations.splice(index, 1)[0];\n        };\n        context = extend(clone(options), {\n            cancel: function() {\n                cancel = true;\n                return removeFromRegistry();\n            },\n            currentValue: \"startValue\" in options ? options.startValue : 0,\n            completionRate: 0,\n            durationRate: 0\n        });\n        fabric.runningAnimations.push(context);\n        requestAnimFrame(function(timestamp) {\n            var start = timestamp || +new Date(), duration = options.duration || 500, finish = start + duration, time, onChange = options.onChange || noop, abort = options.abort || noop, onComplete = options.onComplete || noop, easing = options.easing || defaultEasing, isMany = \"startValue\" in options ? options.startValue.length > 0 : false, startValue = \"startValue\" in options ? options.startValue : 0, endValue = \"endValue\" in options ? options.endValue : 100, byValue = options.byValue || (isMany ? startValue.map(function(value, i) {\n                return endValue[i] - startValue[i];\n            }) : endValue - startValue);\n            options.onStart && options.onStart();\n            (function tick(ticktime) {\n                time = ticktime || +new Date();\n                var currentTime = time > finish ? duration : time - start, timePerc = currentTime / duration, current = isMany ? startValue.map(function(_value, i) {\n                    return easing(currentTime, startValue[i], byValue[i], duration);\n                }) : easing(currentTime, startValue, byValue, duration), valuePerc = isMany ? Math.abs((current[0] - startValue[0]) / byValue[0]) : Math.abs((current - startValue) / byValue);\n                //  update context\n                context.currentValue = isMany ? current.slice() : current;\n                context.completionRate = valuePerc;\n                context.durationRate = timePerc;\n                if (cancel) {\n                    return;\n                }\n                if (abort(current, valuePerc, timePerc)) {\n                    removeFromRegistry();\n                    return;\n                }\n                if (time > finish) {\n                    //  update context\n                    context.currentValue = isMany ? endValue.slice() : endValue;\n                    context.completionRate = 1;\n                    context.durationRate = 1;\n                    //  execute callbacks\n                    onChange(isMany ? endValue.slice() : endValue, 1, 1);\n                    onComplete(endValue, 1, 1);\n                    removeFromRegistry();\n                    return;\n                } else {\n                    onChange(current, valuePerc, timePerc);\n                    requestAnimFrame(tick);\n                }\n            })(start);\n        });\n        return context.cancel;\n    }\n    var _requestAnimFrame = fabric.window.requestAnimationFrame || fabric.window.webkitRequestAnimationFrame || fabric.window.mozRequestAnimationFrame || fabric.window.oRequestAnimationFrame || fabric.window.msRequestAnimationFrame || function(callback) {\n        return fabric.window.setTimeout(callback, 1000 / 60);\n    };\n    var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\n    /**\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\n   * @memberOf fabric.util\n   * @param {Function} callback Callback to invoke\n   * @param {DOMElement} element optional Element to associate with animation\n   */ function requestAnimFrame() {\n        return _requestAnimFrame.apply(fabric.window, arguments);\n    }\n    function cancelAnimFrame() {\n        return _cancelAnimFrame.apply(fabric.window, arguments);\n    }\n    fabric.util.animate = animate;\n    fabric.util.requestAnimFrame = requestAnimFrame;\n    fabric.util.cancelAnimFrame = cancelAnimFrame;\n    fabric.runningAnimations = RUNNING_ANIMATIONS;\n})();\n(function() {\n    // Calculate an in-between color. Returns a \"rgba()\" string.\n    // Credit: Edwin Martin <edwin@bitstorm.org>\n    //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\n    function calculateColor(begin, end, pos) {\n        var color = \"rgba(\" + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + \",\" + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + \",\" + parseInt(begin[2] + pos * (end[2] - begin[2]), 10);\n        color += \",\" + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\n        color += \")\";\n        return color;\n    }\n    /**\n   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\n   * @memberOf fabric.util\n   * @param {String} fromColor The starting color in hex or rgb(a) format.\n   * @param {String} toColor The starting color in hex or rgb(a) format.\n   * @param {Number} [duration] Duration of change (in ms).\n   * @param {Object} [options] Animation options\n   * @param {Function} [options.onChange] Callback; invoked on every value change\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\n   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\n   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\n   * @returns {Function} abort function\n   */ function animateColor(fromColor, toColor, duration, options) {\n        var startColor = new fabric.Color(fromColor).getSource(), endColor = new fabric.Color(toColor).getSource(), originalOnComplete = options.onComplete, originalOnChange = options.onChange;\n        options = options || {};\n        return fabric.util.animate(fabric.util.object.extend(options, {\n            duration: duration || 500,\n            startValue: startColor,\n            endValue: endColor,\n            byValue: endColor,\n            easing: function(currentTime, startValue, byValue, duration) {\n                var posValue = options.colorEasing ? options.colorEasing(currentTime, duration) : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\n                return calculateColor(startValue, byValue, posValue);\n            },\n            // has to take in account for color restoring;\n            onComplete: function(current, valuePerc, timePerc) {\n                if (originalOnComplete) {\n                    return originalOnComplete(calculateColor(endColor, endColor, 0), valuePerc, timePerc);\n                }\n            },\n            onChange: function(current, valuePerc, timePerc) {\n                if (originalOnChange) {\n                    if (Array.isArray(current)) {\n                        return originalOnChange(calculateColor(current, current, 0), valuePerc, timePerc);\n                    }\n                    originalOnChange(current, valuePerc, timePerc);\n                }\n            }\n        }));\n    }\n    fabric.util.animateColor = animateColor;\n})();\n(function(global) {\n    \"use strict\";\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */ var fabric = global.fabric || (global.fabric = {});\n    if (fabric.Point) {\n        fabric.warn(\"fabric.Point is already defined\");\n        return;\n    }\n    fabric.Point = Point;\n    /**\n   * Point class\n   * @class fabric.Point\n   * @memberOf fabric\n   * @constructor\n   * @param {Number} x\n   * @param {Number} y\n   * @return {fabric.Point} thisArg\n   */ function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    Point.prototype = /** @lends fabric.Point.prototype */ {\n        type: \"point\",\n        constructor: Point,\n        /**\n     * Adds another point to this one and returns another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point instance with added values\n     */ add: function(that) {\n            return new Point(this.x + that.x, this.y + that.y);\n        },\n        /**\n     * Adds another point to this one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */ addEquals: function(that) {\n            this.x += that.x;\n            this.y += that.y;\n            return this;\n        },\n        /**\n     * Adds value to this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point} new Point with added value\n     */ scalarAdd: function(scalar) {\n            return new Point(this.x + scalar, this.y + scalar);\n        },\n        /**\n     * Adds value to this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */ scalarAddEquals: function(scalar) {\n            this.x += scalar;\n            this.y += scalar;\n            return this;\n        },\n        /**\n     * Subtracts another point from this point and returns a new one\n     * @param {fabric.Point} that\n     * @return {fabric.Point} new Point object with subtracted values\n     */ subtract: function(that) {\n            return new Point(this.x - that.x, this.y - that.y);\n        },\n        /**\n     * Subtracts another point from this point\n     * @param {fabric.Point} that\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */ subtractEquals: function(that) {\n            this.x -= that.x;\n            this.y -= that.y;\n            return this;\n        },\n        /**\n     * Subtracts value from this point and returns a new one\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */ scalarSubtract: function(scalar) {\n            return new Point(this.x - scalar, this.y - scalar);\n        },\n        /**\n     * Subtracts value from this point\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */ scalarSubtractEquals: function(scalar) {\n            this.x -= scalar;\n            this.y -= scalar;\n            return this;\n        },\n        /**\n     * Multiplies this point by a value and returns a new one\n     * TODO: rename in scalarMultiply in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */ multiply: function(scalar) {\n            return new Point(this.x * scalar, this.y * scalar);\n        },\n        /**\n     * Multiplies this point by a value\n     * TODO: rename in scalarMultiplyEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */ multiplyEquals: function(scalar) {\n            this.x *= scalar;\n            this.y *= scalar;\n            return this;\n        },\n        /**\n     * Divides this point by a value and returns a new one\n     * TODO: rename in scalarDivide in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point}\n     */ divide: function(scalar) {\n            return new Point(this.x / scalar, this.y / scalar);\n        },\n        /**\n     * Divides this point by a value\n     * TODO: rename in scalarDivideEquals in 2.0\n     * @param {Number} scalar\n     * @return {fabric.Point} thisArg\n     * @chainable\n     */ divideEquals: function(scalar) {\n            this.x /= scalar;\n            this.y /= scalar;\n            return this;\n        },\n        /**\n     * Returns true if this point is equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */ eq: function(that) {\n            return this.x === that.x && this.y === that.y;\n        },\n        /**\n     * Returns true if this point is less than another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */ lt: function(that) {\n            return this.x < that.x && this.y < that.y;\n        },\n        /**\n     * Returns true if this point is less than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */ lte: function(that) {\n            return this.x <= that.x && this.y <= that.y;\n        },\n        /**\n\n     * Returns true if this point is greater another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */ gt: function(that) {\n            return this.x > that.x && this.y > that.y;\n        },\n        /**\n     * Returns true if this point is greater than or equal to another one\n     * @param {fabric.Point} that\n     * @return {Boolean}\n     */ gte: function(that) {\n            return this.x >= that.x && this.y >= that.y;\n        },\n        /**\n     * Returns new point which is the result of linear interpolation with this one and another one\n     * @param {fabric.Point} that\n     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\n     * @return {fabric.Point}\n     */ lerp: function(that, t) {\n            if (typeof t === \"undefined\") {\n                t = 0.5;\n            }\n            t = Math.max(Math.min(1, t), 0);\n            return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n        },\n        /**\n     * Returns distance from this point and another one\n     * @param {fabric.Point} that\n     * @return {Number}\n     */ distanceFrom: function(that) {\n            var dx = this.x - that.x, dy = this.y - that.y;\n            return Math.sqrt(dx * dx + dy * dy);\n        },\n        /**\n     * Returns the point between this point and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */ midPointFrom: function(that) {\n            return this.lerp(that);\n        },\n        /**\n     * Returns a new point which is the min of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */ min: function(that) {\n            return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n        },\n        /**\n     * Returns a new point which is the max of this and another one\n     * @param {fabric.Point} that\n     * @return {fabric.Point}\n     */ max: function(that) {\n            return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n        },\n        /**\n     * Returns string representation of this point\n     * @return {String}\n     */ toString: function() {\n            return this.x + \",\" + this.y;\n        },\n        /**\n     * Sets x/y of this point\n     * @param {Number} x\n     * @param {Number} y\n     * @chainable\n     */ setXY: function(x, y) {\n            this.x = x;\n            this.y = y;\n            return this;\n        },\n        /**\n     * Sets x of this point\n     * @param {Number} x\n     * @chainable\n     */ setX: function(x) {\n            this.x = x;\n            return this;\n        },\n        /**\n     * Sets y of this point\n     * @param {Number} y\n     * @chainable\n     */ setY: function(y) {\n            this.y = y;\n            return this;\n        },\n        /**\n     * Sets x/y of this point from another point\n     * @param {fabric.Point} that\n     * @chainable\n     */ setFromPoint: function(that) {\n            this.x = that.x;\n            this.y = that.y;\n            return this;\n        },\n        /**\n     * Swaps x/y of this point and another point\n     * @param {fabric.Point} that\n     */ swap: function(that) {\n            var x = this.x, y = this.y;\n            this.x = that.x;\n            this.y = that.y;\n            that.x = x;\n            that.y = y;\n        },\n        /**\n     * return a cloned instance of the point\n     * @return {fabric.Point}\n     */ clone: function() {\n            return new Point(this.x, this.y);\n        }\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */ var fabric = global.fabric || (global.fabric = {});\n    if (fabric.Intersection) {\n        fabric.warn(\"fabric.Intersection is already defined\");\n        return;\n    }\n    /**\n   * Intersection class\n   * @class fabric.Intersection\n   * @memberOf fabric\n   * @constructor\n   */ function Intersection(status) {\n        this.status = status;\n        this.points = [];\n    }\n    fabric.Intersection = Intersection;\n    fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n        constructor: Intersection,\n        /**\n     * Appends a point to intersection\n     * @param {fabric.Point} point\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */ appendPoint: function(point) {\n            this.points.push(point);\n            return this;\n        },\n        /**\n     * Appends points to intersection\n     * @param {Array} points\n     * @return {fabric.Intersection} thisArg\n     * @chainable\n     */ appendPoints: function(points) {\n            this.points = this.points.concat(points);\n            return this;\n        }\n    };\n    /**\n   * Checks if one line intersects another\n   * TODO: rename in intersectSegmentSegment\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {fabric.Point} b1\n   * @param {fabric.Point} b2\n   * @return {fabric.Intersection}\n   */ fabric.Intersection.intersectLineLine = function(a1, a2, b1, b2) {\n        var result, uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x), ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x), uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n        if (uB !== 0) {\n            var ua = uaT / uB, ub = ubT / uB;\n            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n            } else {\n                result = new Intersection();\n            }\n        } else {\n            if (uaT === 0 || ubT === 0) {\n                result = new Intersection(\"Coincident\");\n            } else {\n                result = new Intersection(\"Parallel\");\n            }\n        }\n        return result;\n    };\n    /**\n   * Checks if line intersects polygon\n   * TODO: rename in intersectSegmentPolygon\n   * fix detection of coincident\n   * @static\n   * @param {fabric.Point} a1\n   * @param {fabric.Point} a2\n   * @param {Array} points\n   * @return {fabric.Intersection}\n   */ fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n        var result = new Intersection(), length = points.length, b1, b2, inter, i;\n        for(i = 0; i < length; i++){\n            b1 = points[i];\n            b2 = points[(i + 1) % length];\n            inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n            result.appendPoints(inter.points);\n        }\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        return result;\n    };\n    /**\n   * Checks if polygon intersects another polygon\n   * @static\n   * @param {Array} points1\n   * @param {Array} points2\n   * @return {fabric.Intersection}\n   */ fabric.Intersection.intersectPolygonPolygon = function(points1, points2) {\n        var result = new Intersection(), length = points1.length, i;\n        for(i = 0; i < length; i++){\n            var a1 = points1[i], a2 = points1[(i + 1) % length], inter = Intersection.intersectLinePolygon(a1, a2, points2);\n            result.appendPoints(inter.points);\n        }\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        return result;\n    };\n    /**\n   * Checks if polygon intersects rectangle\n   * @static\n   * @param {Array} points\n   * @param {fabric.Point} r1\n   * @param {fabric.Point} r2\n   * @return {fabric.Intersection}\n   */ fabric.Intersection.intersectPolygonRectangle = function(points, r1, r2) {\n        var min = r1.min(r2), max = r1.max(r2), topRight = new fabric.Point(max.x, min.y), bottomLeft = new fabric.Point(min.x, max.y), inter1 = Intersection.intersectLinePolygon(min, topRight, points), inter2 = Intersection.intersectLinePolygon(topRight, max, points), inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points), inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points), result = new Intersection();\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        return result;\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {});\n    if (fabric.Color) {\n        fabric.warn(\"fabric.Color is already defined.\");\n        return;\n    }\n    /**\n   * Color class\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\n   *\n   * @class fabric.Color\n   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\n   * @return {fabric.Color} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\n   */ function Color(color) {\n        if (!color) {\n            this.setSource([\n                0,\n                0,\n                0,\n                1\n            ]);\n        } else {\n            this._tryParsingColor(color);\n        }\n    }\n    fabric.Color = Color;\n    fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n        /**\n     * @private\n     * @param {String|Array} color Color value to parse\n     */ _tryParsingColor: function(color) {\n            var source;\n            if (color in Color.colorNameMap) {\n                color = Color.colorNameMap[color];\n            }\n            if (color === \"transparent\") {\n                source = [\n                    255,\n                    255,\n                    255,\n                    0\n                ];\n            }\n            if (!source) {\n                source = Color.sourceFromHex(color);\n            }\n            if (!source) {\n                source = Color.sourceFromRgb(color);\n            }\n            if (!source) {\n                source = Color.sourceFromHsl(color);\n            }\n            if (!source) {\n                //if color is not recognize let's make black as canvas does\n                source = [\n                    0,\n                    0,\n                    0,\n                    1\n                ];\n            }\n            if (source) {\n                this.setSource(source);\n            }\n        },\n        /**\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n     * @private\n     * @param {Number} r Red color value\n     * @param {Number} g Green color value\n     * @param {Number} b Blue color value\n     * @return {Array} Hsl color\n     */ _rgbToHsl: function(r, g, b) {\n            r /= 255;\n            g /= 255;\n            b /= 255;\n            var h, s, l, max = fabric.util.array.max([\n                r,\n                g,\n                b\n            ]), min = fabric.util.array.min([\n                r,\n                g,\n                b\n            ]);\n            l = (max + min) / 2;\n            if (max === min) {\n                h = s = 0; // achromatic\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch(max){\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n                h /= 6;\n            }\n            return [\n                Math.round(h * 360),\n                Math.round(s * 100),\n                Math.round(l * 100)\n            ];\n        },\n        /**\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @return {Array}\n     */ getSource: function() {\n            return this._source;\n        },\n        /**\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\n     * @param {Array} source\n     */ setSource: function(source) {\n            this._source = source;\n        },\n        /**\n     * Returns color representation in RGB format\n     * @return {String} ex: rgb(0-255,0-255,0-255)\n     */ toRgb: function() {\n            var source = this.getSource();\n            return \"rgb(\" + source[0] + \",\" + source[1] + \",\" + source[2] + \")\";\n        },\n        /**\n     * Returns color representation in RGBA format\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\n     */ toRgba: function() {\n            var source = this.getSource();\n            return \"rgba(\" + source[0] + \",\" + source[1] + \",\" + source[2] + \",\" + source[3] + \")\";\n        },\n        /**\n     * Returns color representation in HSL format\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\n     */ toHsl: function() {\n            var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);\n            return \"hsl(\" + hsl[0] + \",\" + hsl[1] + \"%,\" + hsl[2] + \"%)\";\n        },\n        /**\n     * Returns color representation in HSLA format\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\n     */ toHsla: function() {\n            var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);\n            return \"hsla(\" + hsl[0] + \",\" + hsl[1] + \"%,\" + hsl[2] + \"%,\" + source[3] + \")\";\n        },\n        /**\n     * Returns color representation in HEX format\n     * @return {String} ex: FF5555\n     */ toHex: function() {\n            var source = this.getSource(), r, g, b;\n            r = source[0].toString(16);\n            r = r.length === 1 ? \"0\" + r : r;\n            g = source[1].toString(16);\n            g = g.length === 1 ? \"0\" + g : g;\n            b = source[2].toString(16);\n            b = b.length === 1 ? \"0\" + b : b;\n            return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n        },\n        /**\n     * Returns color representation in HEXA format\n     * @return {String} ex: FF5555CC\n     */ toHexa: function() {\n            var source = this.getSource(), a;\n            a = Math.round(source[3] * 255);\n            a = a.toString(16);\n            a = a.length === 1 ? \"0\" + a : a;\n            return this.toHex() + a.toUpperCase();\n        },\n        /**\n     * Gets value of alpha channel for this color\n     * @return {Number} 0-1\n     */ getAlpha: function() {\n            return this.getSource()[3];\n        },\n        /**\n     * Sets value of alpha channel for this color\n     * @param {Number} alpha Alpha value 0-1\n     * @return {fabric.Color} thisArg\n     */ setAlpha: function(alpha) {\n            var source = this.getSource();\n            source[3] = alpha;\n            this.setSource(source);\n            return this;\n        },\n        /**\n     * Transforms color to its grayscale representation\n     * @return {fabric.Color} thisArg\n     */ toGrayscale: function() {\n            var source = this.getSource(), average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10), currentAlpha = source[3];\n            this.setSource([\n                average,\n                average,\n                average,\n                currentAlpha\n            ]);\n            return this;\n        },\n        /**\n     * Transforms color to its black and white representation\n     * @param {Number} threshold\n     * @return {fabric.Color} thisArg\n     */ toBlackWhite: function(threshold) {\n            var source = this.getSource(), average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), currentAlpha = source[3];\n            threshold = threshold || 127;\n            average = Number(average) < Number(threshold) ? 0 : 255;\n            this.setSource([\n                average,\n                average,\n                average,\n                currentAlpha\n            ]);\n            return this;\n        },\n        /**\n     * Overlays color with another color\n     * @param {String|fabric.Color} otherColor\n     * @return {fabric.Color} thisArg\n     */ overlayWith: function(otherColor) {\n            if (!(otherColor instanceof Color)) {\n                otherColor = new Color(otherColor);\n            }\n            var result = [], alpha = this.getAlpha(), otherAlpha = 0.5, source = this.getSource(), otherSource = otherColor.getSource(), i;\n            for(i = 0; i < 3; i++){\n                result.push(Math.round(source[i] * (1 - otherAlpha) + otherSource[i] * otherAlpha));\n            }\n            result[3] = alpha;\n            this.setSource(result);\n            return this;\n        }\n    };\n    /**\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */ // eslint-disable-next-line max-len\n    fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\n    /**\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */ fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\n    /**\n   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   */ fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n    /**\n   * Map of the 148 color names with HEX code\n   * @static\n   * @field\n   * @memberOf fabric.Color\n   * @see: https://www.w3.org/TR/css3-color/#svg-color\n   */ fabric.Color.colorNameMap = {\n        aliceblue: \"#F0F8FF\",\n        antiquewhite: \"#FAEBD7\",\n        aqua: \"#00FFFF\",\n        aquamarine: \"#7FFFD4\",\n        azure: \"#F0FFFF\",\n        beige: \"#F5F5DC\",\n        bisque: \"#FFE4C4\",\n        black: \"#000000\",\n        blanchedalmond: \"#FFEBCD\",\n        blue: \"#0000FF\",\n        blueviolet: \"#8A2BE2\",\n        brown: \"#A52A2A\",\n        burlywood: \"#DEB887\",\n        cadetblue: \"#5F9EA0\",\n        chartreuse: \"#7FFF00\",\n        chocolate: \"#D2691E\",\n        coral: \"#FF7F50\",\n        cornflowerblue: \"#6495ED\",\n        cornsilk: \"#FFF8DC\",\n        crimson: \"#DC143C\",\n        cyan: \"#00FFFF\",\n        darkblue: \"#00008B\",\n        darkcyan: \"#008B8B\",\n        darkgoldenrod: \"#B8860B\",\n        darkgray: \"#A9A9A9\",\n        darkgrey: \"#A9A9A9\",\n        darkgreen: \"#006400\",\n        darkkhaki: \"#BDB76B\",\n        darkmagenta: \"#8B008B\",\n        darkolivegreen: \"#556B2F\",\n        darkorange: \"#FF8C00\",\n        darkorchid: \"#9932CC\",\n        darkred: \"#8B0000\",\n        darksalmon: \"#E9967A\",\n        darkseagreen: \"#8FBC8F\",\n        darkslateblue: \"#483D8B\",\n        darkslategray: \"#2F4F4F\",\n        darkslategrey: \"#2F4F4F\",\n        darkturquoise: \"#00CED1\",\n        darkviolet: \"#9400D3\",\n        deeppink: \"#FF1493\",\n        deepskyblue: \"#00BFFF\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1E90FF\",\n        firebrick: \"#B22222\",\n        floralwhite: \"#FFFAF0\",\n        forestgreen: \"#228B22\",\n        fuchsia: \"#FF00FF\",\n        gainsboro: \"#DCDCDC\",\n        ghostwhite: \"#F8F8FF\",\n        gold: \"#FFD700\",\n        goldenrod: \"#DAA520\",\n        gray: \"#808080\",\n        grey: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#ADFF2F\",\n        honeydew: \"#F0FFF0\",\n        hotpink: \"#FF69B4\",\n        indianred: \"#CD5C5C\",\n        indigo: \"#4B0082\",\n        ivory: \"#FFFFF0\",\n        khaki: \"#F0E68C\",\n        lavender: \"#E6E6FA\",\n        lavenderblush: \"#FFF0F5\",\n        lawngreen: \"#7CFC00\",\n        lemonchiffon: \"#FFFACD\",\n        lightblue: \"#ADD8E6\",\n        lightcoral: \"#F08080\",\n        lightcyan: \"#E0FFFF\",\n        lightgoldenrodyellow: \"#FAFAD2\",\n        lightgray: \"#D3D3D3\",\n        lightgrey: \"#D3D3D3\",\n        lightgreen: \"#90EE90\",\n        lightpink: \"#FFB6C1\",\n        lightsalmon: \"#FFA07A\",\n        lightseagreen: \"#20B2AA\",\n        lightskyblue: \"#87CEFA\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#B0C4DE\",\n        lightyellow: \"#FFFFE0\",\n        lime: \"#00FF00\",\n        limegreen: \"#32CD32\",\n        linen: \"#FAF0E6\",\n        magenta: \"#FF00FF\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66CDAA\",\n        mediumblue: \"#0000CD\",\n        mediumorchid: \"#BA55D3\",\n        mediumpurple: \"#9370DB\",\n        mediumseagreen: \"#3CB371\",\n        mediumslateblue: \"#7B68EE\",\n        mediumspringgreen: \"#00FA9A\",\n        mediumturquoise: \"#48D1CC\",\n        mediumvioletred: \"#C71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#F5FFFA\",\n        mistyrose: \"#FFE4E1\",\n        moccasin: \"#FFE4B5\",\n        navajowhite: \"#FFDEAD\",\n        navy: \"#000080\",\n        oldlace: \"#FDF5E6\",\n        olive: \"#808000\",\n        olivedrab: \"#6B8E23\",\n        orange: \"#FFA500\",\n        orangered: \"#FF4500\",\n        orchid: \"#DA70D6\",\n        palegoldenrod: \"#EEE8AA\",\n        palegreen: \"#98FB98\",\n        paleturquoise: \"#AFEEEE\",\n        palevioletred: \"#DB7093\",\n        papayawhip: \"#FFEFD5\",\n        peachpuff: \"#FFDAB9\",\n        peru: \"#CD853F\",\n        pink: \"#FFC0CB\",\n        plum: \"#DDA0DD\",\n        powderblue: \"#B0E0E6\",\n        purple: \"#800080\",\n        rebeccapurple: \"#663399\",\n        red: \"#FF0000\",\n        rosybrown: \"#BC8F8F\",\n        royalblue: \"#4169E1\",\n        saddlebrown: \"#8B4513\",\n        salmon: \"#FA8072\",\n        sandybrown: \"#F4A460\",\n        seagreen: \"#2E8B57\",\n        seashell: \"#FFF5EE\",\n        sienna: \"#A0522D\",\n        silver: \"#C0C0C0\",\n        skyblue: \"#87CEEB\",\n        slateblue: \"#6A5ACD\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#FFFAFA\",\n        springgreen: \"#00FF7F\",\n        steelblue: \"#4682B4\",\n        tan: \"#D2B48C\",\n        teal: \"#008080\",\n        thistle: \"#D8BFD8\",\n        tomato: \"#FF6347\",\n        turquoise: \"#40E0D0\",\n        violet: \"#EE82EE\",\n        wheat: \"#F5DEB3\",\n        white: \"#FFFFFF\",\n        whitesmoke: \"#F5F5F5\",\n        yellow: \"#FFFF00\",\n        yellowgreen: \"#9ACD32\"\n    };\n    /**\n   * @private\n   * @param {Number} p\n   * @param {Number} q\n   * @param {Number} t\n   * @return {Number}\n   */ function hue2rgb(p, q, t) {\n        if (t < 0) {\n            t += 1;\n        }\n        if (t > 1) {\n            t -= 1;\n        }\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n            return q;\n        }\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n    }\n    /**\n   * Returns new color object, when given a color in RGB format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\n   * @return {fabric.Color}\n   */ fabric.Color.fromRgb = function(color) {\n        return Color.fromSource(Color.sourceFromRgb(color));\n    };\n    /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\n   * @return {Array} source\n   */ fabric.Color.sourceFromRgb = function(color) {\n        var match = color.match(Color.reRGBa);\n        if (match) {\n            var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1), g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1), b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n            return [\n                parseInt(r, 10),\n                parseInt(g, 10),\n                parseInt(b, 10),\n                match[4] ? parseFloat(match[4]) : 1\n            ];\n        }\n    };\n    /**\n   * Returns new color object, when given a color in RGBA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */ fabric.Color.fromRgba = Color.fromRgb;\n    /**\n   * Returns new color object, when given a color in HSL format\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\n   * @memberOf fabric.Color\n   * @return {fabric.Color}\n   */ fabric.Color.fromHsl = function(color) {\n        return Color.fromSource(Color.sourceFromHsl(color));\n    };\n    /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\n   * @return {Array} source\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\n   */ fabric.Color.sourceFromHsl = function(color) {\n        var match = color.match(Color.reHSLa);\n        if (!match) {\n            return;\n        }\n        var h = (parseFloat(match[1]) % 360 + 360) % 360 / 360, s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1), l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1), r, g, b;\n        if (s === 0) {\n            r = g = b = l;\n        } else {\n            var q = l <= 0.5 ? l * (s + 1) : l + s - l * s, p = l * 2 - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n        return [\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255),\n            match[4] ? parseFloat(match[4]) : 1\n        ];\n    };\n    /**\n   * Returns new color object, when given a color in HSLA format\n   * @static\n   * @function\n   * @memberOf fabric.Color\n   * @param {String} color\n   * @return {fabric.Color}\n   */ fabric.Color.fromHsla = Color.fromHsl;\n    /**\n   * Returns new color object, when given a color in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color Color value ex: FF5555\n   * @return {fabric.Color}\n   */ fabric.Color.fromHex = function(color) {\n        return Color.fromSource(Color.sourceFromHex(color));\n    };\n    /**\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\n   * @static\n   * @memberOf fabric.Color\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\n   * @return {Array} source\n   */ fabric.Color.sourceFromHex = function(color) {\n        if (color.match(Color.reHex)) {\n            var value = color.slice(color.indexOf(\"#\") + 1), isShortNotation = value.length === 3 || value.length === 4, isRGBa = value.length === 8 || value.length === 4, r = isShortNotation ? value.charAt(0) + value.charAt(0) : value.substring(0, 2), g = isShortNotation ? value.charAt(1) + value.charAt(1) : value.substring(2, 4), b = isShortNotation ? value.charAt(2) + value.charAt(2) : value.substring(4, 6), a = isRGBa ? isShortNotation ? value.charAt(3) + value.charAt(3) : value.substring(6, 8) : \"FF\";\n            return [\n                parseInt(r, 16),\n                parseInt(g, 16),\n                parseInt(b, 16),\n                parseFloat((parseInt(a, 16) / 255).toFixed(2))\n            ];\n        }\n    };\n    /**\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\n   * @static\n   * @memberOf fabric.Color\n   * @param {Array} source\n   * @return {fabric.Color}\n   */ fabric.Color.fromSource = function(source) {\n        var oColor = new Color();\n        oColor.setSource(source);\n        return oColor;\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), scaleMap = [\n        \"e\",\n        \"se\",\n        \"s\",\n        \"sw\",\n        \"w\",\n        \"nw\",\n        \"n\",\n        \"ne\",\n        \"e\"\n    ], skewMap = [\n        \"ns\",\n        \"nesw\",\n        \"ew\",\n        \"nwse\"\n    ], controls = {}, LEFT = \"left\", TOP = \"top\", RIGHT = \"right\", BOTTOM = \"bottom\", CENTER = \"center\", opposite = {\n        top: BOTTOM,\n        bottom: TOP,\n        left: RIGHT,\n        right: LEFT,\n        center: CENTER\n    }, radiansToDegrees = fabric.util.radiansToDegrees, sign = Math.sign || function(x) {\n        return (x > 0) - (x < 0) || +x;\n    };\n    /**\n   * Combine control position and object angle to find the control direction compared\n   * to the object center.\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\n   * @param {fabric.Control} control the control class\n   * @return {Number} 0 - 7 a quadrant number\n   */ function findCornerQuadrant(fabricObject, control) {\n        var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n        return Math.round(cornerAngle % 360 / 45);\n    }\n    function fireEvent(eventName, options) {\n        var target = options.transform.target, canvas = target.canvas, canvasOptions = fabric.util.object.clone(options);\n        canvasOptions.target = target;\n        canvas && canvas.fire(\"object:\" + eventName, canvasOptions);\n        target.fire(eventName, options);\n    }\n    /**\n   * Inspect event and fabricObject properties to understand if the scaling action\n   * @param {Event} eventData from the user action\n   * @param {fabric.Object} fabricObject the fabric object about to scale\n   * @return {Boolean} true if scale is proportional\n   */ function scaleIsProportional(eventData, fabricObject) {\n        var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey, uniformIsToggled = eventData[uniScaleKey];\n        return canvas.uniformScaling && !uniformIsToggled || !canvas.uniformScaling && uniformIsToggled;\n    }\n    /**\n   * Checks if transform is centered\n   * @param {Object} transform transform data\n   * @return {Boolean} true if transform is centered\n   */ function isTransformCentered(transform) {\n        return transform.originX === CENTER && transform.originY === CENTER;\n    }\n    /**\n   * Inspect fabricObject to understand if the current scaling action is allowed\n   * @param {fabric.Object} fabricObject the fabric object about to scale\n   * @param {String} by 'x' or 'y' or ''\n   * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\n   * @return {Boolean} true if scaling is not allowed at current conditions\n   */ function scalingIsForbidden(fabricObject, by, scaleProportionally) {\n        var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;\n        if (lockX && lockY) {\n            return true;\n        }\n        if (!by && (lockX || lockY) && scaleProportionally) {\n            return true;\n        }\n        if (lockX && by === \"x\") {\n            return true;\n        }\n        if (lockY && by === \"y\") {\n            return true;\n        }\n        return false;\n    }\n    /**\n   * return the correct cursor style for the scale action\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */ function scaleCursorStyleHandler(eventData, control, fabricObject) {\n        var notAllowed = \"not-allowed\", scaleProportionally = scaleIsProportional(eventData, fabricObject), by = \"\";\n        if (control.x !== 0 && control.y === 0) {\n            by = \"x\";\n        } else if (control.x === 0 && control.y !== 0) {\n            by = \"y\";\n        }\n        if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n            return notAllowed;\n        }\n        var n = findCornerQuadrant(fabricObject, control);\n        return scaleMap[n] + \"-resize\";\n    }\n    /**\n   * return the correct cursor style for the skew action\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */ function skewCursorStyleHandler(eventData, control, fabricObject) {\n        var notAllowed = \"not-allowed\";\n        if (control.x !== 0 && fabricObject.lockSkewingY) {\n            return notAllowed;\n        }\n        if (control.y !== 0 && fabricObject.lockSkewingX) {\n            return notAllowed;\n        }\n        var n = findCornerQuadrant(fabricObject, control) % 4;\n        return skewMap[n] + \"-resize\";\n    }\n    /**\n   * Combine skew and scale style handlers to cover fabric standard use case\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */ function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {\n        if (eventData[fabricObject.canvas.altActionKey]) {\n            return controls.skewCursorStyleHandler(eventData, control, fabricObject);\n        }\n        return controls.scaleCursorStyleHandler(eventData, control, fabricObject);\n    }\n    /**\n   * Inspect event, control and fabricObject to return the correct action name\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} an action name\n   */ function scaleOrSkewActionName(eventData, control, fabricObject) {\n        var isAlternative = eventData[fabricObject.canvas.altActionKey];\n        if (control.x === 0) {\n            // then is scaleY or skewX\n            return isAlternative ? \"skewX\" : \"scaleY\";\n        }\n        if (control.y === 0) {\n            // then is scaleY or skewX\n            return isAlternative ? \"skewY\" : \"scaleX\";\n        }\n    }\n    /**\n   * Find the correct style for the control that is used for rotation.\n   * this function is very simple and it just take care of not-allowed or standard cursor\n   * @param {Event} eventData the javascript event that is causing the scale\n   * @param {fabric.Control} control the control that is interested in the action\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\n   * @return {String} a valid css string for the cursor\n   */ function rotationStyleHandler(eventData, control, fabricObject) {\n        if (fabricObject.lockRotation) {\n            return \"not-allowed\";\n        }\n        return control.cursorStyle;\n    }\n    function commonEventInfo(eventData, transform, x, y) {\n        return {\n            e: eventData,\n            transform: transform,\n            pointer: {\n                x: x,\n                y: y\n            }\n        };\n    }\n    /**\n   * Wrap an action handler with saving/restoring object position on the transform.\n   * this is the code that permits to objects to keep their position while transforming.\n   * @param {Function} actionHandler the function to wrap\n   * @return {Function} a function with an action handler signature\n   */ function wrapWithFixedAnchor(actionHandler) {\n        return function(eventData, transform, x, y) {\n            var target = transform.target, centerPoint = target.getCenterPoint(), constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY), actionPerformed = actionHandler(eventData, transform, x, y);\n            target.setPositionByOrigin(constraint, transform.originX, transform.originY);\n            return actionPerformed;\n        };\n    }\n    /**\n   * Wrap an action handler with firing an event if the action is performed\n   * @param {Function} actionHandler the function to wrap\n   * @return {Function} a function with an action handler signature\n   */ function wrapWithFireEvent(eventName, actionHandler) {\n        return function(eventData, transform, x, y) {\n            var actionPerformed = actionHandler(eventData, transform, x, y);\n            if (actionPerformed) {\n                fireEvent(eventName, commonEventInfo(eventData, transform, x, y));\n            }\n            return actionPerformed;\n        };\n    }\n    /**\n   * Transforms a point described by x and y in a distance from the top left corner of the object\n   * bounding box.\n   * @param {Object} transform\n   * @param {String} originX\n   * @param {String} originY\n   * @param {number} x\n   * @param {number} y\n   * @return {Fabric.Point} the normalized point\n   */ function getLocalPoint(transform, originX, originY, x, y) {\n        var target = transform.target, control = target.controls[transform.corner], zoom = target.canvas.getZoom(), padding = target.padding / zoom, localPoint = target.toLocalPoint(new fabric.Point(x, y), originX, originY);\n        if (localPoint.x >= padding) {\n            localPoint.x -= padding;\n        }\n        if (localPoint.x <= -padding) {\n            localPoint.x += padding;\n        }\n        if (localPoint.y >= padding) {\n            localPoint.y -= padding;\n        }\n        if (localPoint.y <= padding) {\n            localPoint.y += padding;\n        }\n        localPoint.x -= control.offsetX;\n        localPoint.y -= control.offsetY;\n        return localPoint;\n    }\n    /**\n   * Detect if the fabric object is flipped on one side.\n   * @param {fabric.Object} target\n   * @return {Boolean} true if one flip, but not two.\n   */ function targetHasOneFlip(target) {\n        return target.flipX !== target.flipY;\n    }\n    /**\n   * Utility function to compensate the scale factor when skew is applied on both axes\n   * @private\n   */ function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {\n        if (target[oppositeSkew] !== 0) {\n            var newDim = target._getTransformedDimensions()[axis];\n            var newValue = reference / newDim * target[scaleToCompensate];\n            target.set(scaleToCompensate, newValue);\n        }\n    }\n    /**\n   * Action handler for skewing on the X axis\n   * @private\n   */ function skewObjectX(eventData, transform, x, y) {\n        var target = transform.target, // find how big the object would be, if there was no skewX. takes in account scaling\n        dimNoSkew = target._getTransformedDimensions(0, target.skewY), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), // the mouse is in the center of the object, and we want it to stay there.\n        // so the object will grow twice as much as the mouse.\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\n        totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x, currentSkew = target.skewX, newSkew;\n        if (totalSkewSize < 2) {\n            // let's make it easy to go back to position 0.\n            newSkew = 0;\n        } else {\n            newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleX, dimNoSkew.y / target.scaleY));\n            // now we have to find the sign of the skew.\n            // it mostly depend on the origin of transformation.\n            if (transform.originX === LEFT && transform.originY === BOTTOM) {\n                newSkew = -newSkew;\n            }\n            if (transform.originX === RIGHT && transform.originY === TOP) {\n                newSkew = -newSkew;\n            }\n            if (targetHasOneFlip(target)) {\n                newSkew = -newSkew;\n            }\n        }\n        var hasSkewed = currentSkew !== newSkew;\n        if (hasSkewed) {\n            var dimBeforeSkewing = target._getTransformedDimensions().y;\n            target.set(\"skewX\", newSkew);\n            compensateScaleForSkew(target, \"skewY\", \"scaleY\", \"y\", dimBeforeSkewing);\n        }\n        return hasSkewed;\n    }\n    /**\n   * Action handler for skewing on the Y axis\n   * @private\n   */ function skewObjectY(eventData, transform, x, y) {\n        var target = transform.target, // find how big the object would be, if there was no skewX. takes in account scaling\n        dimNoSkew = target._getTransformedDimensions(target.skewX, 0), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), // the mouse is in the center of the object, and we want it to stay there.\n        // so the object will grow twice as much as the mouse.\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\n        totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y, currentSkew = target.skewY, newSkew;\n        if (totalSkewSize < 2) {\n            // let's make it easy to go back to position 0.\n            newSkew = 0;\n        } else {\n            newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleY, dimNoSkew.x / target.scaleX));\n            // now we have to find the sign of the skew.\n            // it mostly depend on the origin of transformation.\n            if (transform.originX === LEFT && transform.originY === BOTTOM) {\n                newSkew = -newSkew;\n            }\n            if (transform.originX === RIGHT && transform.originY === TOP) {\n                newSkew = -newSkew;\n            }\n            if (targetHasOneFlip(target)) {\n                newSkew = -newSkew;\n            }\n        }\n        var hasSkewed = currentSkew !== newSkew;\n        if (hasSkewed) {\n            var dimBeforeSkewing = target._getTransformedDimensions().x;\n            target.set(\"skewY\", newSkew);\n            compensateScaleForSkew(target, \"skewX\", \"scaleX\", \"x\", dimBeforeSkewing);\n        }\n        return hasSkewed;\n    }\n    /**\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\n   * skew direction and determine the correct transform origin for the anchor point\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function skewHandlerX(eventData, transform, x, y) {\n        // step1 figure out and change transform origin.\n        // if skewX > 0 and originY bottom we anchor on right\n        // if skewX > 0 and originY top we anchor on left\n        // if skewX < 0 and originY bottom we anchor on left\n        // if skewX < 0 and originY top we anchor on right\n        // if skewX is 0, we look for mouse position to understand where are we going.\n        var target = transform.target, currentSkew = target.skewX, originX, originY = transform.originY;\n        if (target.lockSkewingX) {\n            return false;\n        }\n        if (currentSkew === 0) {\n            var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\n            if (localPointFromCenter.x > 0) {\n                // we are pulling right, anchor left;\n                originX = LEFT;\n            } else {\n                // we are pulling right, anchor right\n                originX = RIGHT;\n            }\n        } else {\n            if (currentSkew > 0) {\n                originX = originY === TOP ? LEFT : RIGHT;\n            }\n            if (currentSkew < 0) {\n                originX = originY === TOP ? RIGHT : LEFT;\n            }\n            // is the object flipped on one side only? swap the origin.\n            if (targetHasOneFlip(target)) {\n                originX = originX === LEFT ? RIGHT : LEFT;\n            }\n        }\n        // once we have the origin, we find the anchor point\n        transform.originX = originX;\n        var finalHandler = wrapWithFireEvent(\"skewing\", wrapWithFixedAnchor(skewObjectX));\n        return finalHandler(eventData, transform, x, y);\n    }\n    /**\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\n   * skew direction and determine the correct transform origin for the anchor point\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function skewHandlerY(eventData, transform, x, y) {\n        // step1 figure out and change transform origin.\n        // if skewY > 0 and originX left we anchor on top\n        // if skewY > 0 and originX right we anchor on bottom\n        // if skewY < 0 and originX left we anchor on bottom\n        // if skewY < 0 and originX right we anchor on top\n        // if skewY is 0, we look for mouse position to understand where are we going.\n        var target = transform.target, currentSkew = target.skewY, originY, originX = transform.originX;\n        if (target.lockSkewingY) {\n            return false;\n        }\n        if (currentSkew === 0) {\n            var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\n            if (localPointFromCenter.y > 0) {\n                // we are pulling down, anchor up;\n                originY = TOP;\n            } else {\n                // we are pulling up, anchor down\n                originY = BOTTOM;\n            }\n        } else {\n            if (currentSkew > 0) {\n                originY = originX === LEFT ? TOP : BOTTOM;\n            }\n            if (currentSkew < 0) {\n                originY = originX === LEFT ? BOTTOM : TOP;\n            }\n            // is the object flipped on one side only? swap the origin.\n            if (targetHasOneFlip(target)) {\n                originY = originY === TOP ? BOTTOM : TOP;\n            }\n        }\n        // once we have the origin, we find the anchor point\n        transform.originY = originY;\n        var finalHandler = wrapWithFireEvent(\"skewing\", wrapWithFixedAnchor(skewObjectY));\n        return finalHandler(eventData, transform, x, y);\n    }\n    /**\n   * Action handler for rotation and snapping, without anchor point.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   * @private\n   */ function rotationWithSnapping(eventData, transform, x, y) {\n        var t = transform, target = t.target, pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\n        if (target.lockRotation) {\n            return false;\n        }\n        var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x), curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x), angle = radiansToDegrees(curAngle - lastAngle + t.theta), hasRotated = true;\n        if (target.snapAngle > 0) {\n            var snapAngle = target.snapAngle, snapThreshold = target.snapThreshold || snapAngle, rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle, leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n            if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n                angle = leftAngleLocked;\n            } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n                angle = rightAngleLocked;\n            }\n        }\n        // normalize angle to positive value\n        if (angle < 0) {\n            angle = 360 + angle;\n        }\n        angle %= 360;\n        hasRotated = target.angle !== angle;\n        target.angle = angle;\n        return hasRotated;\n    }\n    /**\n   * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @param {Object} options additional information for scaling\n   * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\n   * @return {Boolean} true if some change happened\n   * @private\n   */ function scaleObject(eventData, transform, x, y, options) {\n        options = options || {};\n        var target = transform.target, lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY, by = options.by, newPoint, scaleX, scaleY, dim, scaleProportionally = scaleIsProportional(eventData, target), forbidScaling = scalingIsForbidden(target, by, scaleProportionally), signX, signY, gestureScale = transform.gestureScale;\n        if (forbidScaling) {\n            return false;\n        }\n        if (gestureScale) {\n            scaleX = transform.scaleX * gestureScale;\n            scaleY = transform.scaleY * gestureScale;\n        } else {\n            newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y);\n            // use of sign: We use sign to detect change of direction of an action. sign usually change when\n            // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n            // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n            // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n            // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n            signX = by !== \"y\" ? sign(newPoint.x) : 1;\n            signY = by !== \"x\" ? sign(newPoint.y) : 1;\n            if (!transform.signX) {\n                transform.signX = signX;\n            }\n            if (!transform.signY) {\n                transform.signY = signY;\n            }\n            if (target.lockScalingFlip && (transform.signX !== signX || transform.signY !== signY)) {\n                return false;\n            }\n            dim = target._getTransformedDimensions();\n            // missing detection of flip and logic to switch the origin\n            if (scaleProportionally && !by) {\n                // uniform scaling\n                var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y), original = transform.original, originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) + Math.abs(dim.y * original.scaleY / target.scaleY), scale = distance / originalDistance;\n                scaleX = original.scaleX * scale;\n                scaleY = original.scaleY * scale;\n            } else {\n                scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);\n                scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);\n            }\n            // if we are scaling by center, we need to double the scale\n            if (isTransformCentered(transform)) {\n                scaleX *= 2;\n                scaleY *= 2;\n            }\n            if (transform.signX !== signX && by !== \"y\") {\n                transform.originX = opposite[transform.originX];\n                scaleX *= -1;\n                transform.signX = signX;\n            }\n            if (transform.signY !== signY && by !== \"x\") {\n                transform.originY = opposite[transform.originY];\n                scaleY *= -1;\n                transform.signY = signY;\n            }\n        }\n        // minScale is taken are in the setter.\n        var oldScaleX = target.scaleX, oldScaleY = target.scaleY;\n        if (!by) {\n            !lockScalingX && target.set(\"scaleX\", scaleX);\n            !lockScalingY && target.set(\"scaleY\", scaleY);\n        } else {\n            // forbidden cases already handled on top here.\n            by === \"x\" && target.set(\"scaleX\", scaleX);\n            by === \"y\" && target.set(\"scaleY\", scaleY);\n        }\n        return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n    }\n    /**\n   * Generic scaling logic, to scale from corners either equally or freely.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function scaleObjectFromCorner(eventData, transform, x, y) {\n        return scaleObject(eventData, transform, x, y);\n    }\n    /**\n   * Scaling logic for the X axis.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function scaleObjectX(eventData, transform, x, y) {\n        return scaleObject(eventData, transform, x, y, {\n            by: \"x\"\n        });\n    }\n    /**\n   * Scaling logic for the Y axis.\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function scaleObjectY(eventData, transform, x, y) {\n        return scaleObject(eventData, transform, x, y, {\n            by: \"y\"\n        });\n    }\n    /**\n   * Composed action handler to either scale Y or skew X\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function scalingYOrSkewingX(eventData, transform, x, y) {\n        // ok some safety needed here.\n        if (eventData[transform.target.canvas.altActionKey]) {\n            return controls.skewHandlerX(eventData, transform, x, y);\n        }\n        return controls.scalingY(eventData, transform, x, y);\n    }\n    /**\n   * Composed action handler to either scale X or skew Y\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function scalingXOrSkewingY(eventData, transform, x, y) {\n        // ok some safety needed here.\n        if (eventData[transform.target.canvas.altActionKey]) {\n            return controls.skewHandlerY(eventData, transform, x, y);\n        }\n        return controls.scalingX(eventData, transform, x, y);\n    }\n    /**\n   * Action handler to change textbox width\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if some change happened\n   */ function changeWidth(eventData, transform, x, y) {\n        var target = transform.target, localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1), multiplier = isTransformCentered(transform) ? 2 : 1, oldWidth = target.width, newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;\n        target.set(\"width\", Math.max(newWidth, 0));\n        return oldWidth !== newWidth;\n    }\n    /**\n   * Action handler\n   * @private\n   * @param {Event} eventData javascript event that is doing the transform\n   * @param {Object} transform javascript object containing a series of information around the current transform\n   * @param {number} x current mouse x position, canvas normalized\n   * @param {number} y current mouse y position, canvas normalized\n   * @return {Boolean} true if the translation occurred\n   */ function dragHandler(eventData, transform, x, y) {\n        var target = transform.target, newLeft = x - transform.offsetX, newTop = y - transform.offsetY, moveX = !target.get(\"lockMovementX\") && target.left !== newLeft, moveY = !target.get(\"lockMovementY\") && target.top !== newTop;\n        moveX && target.set(\"left\", newLeft);\n        moveY && target.set(\"top\", newTop);\n        if (moveX || moveY) {\n            fireEvent(\"moving\", commonEventInfo(eventData, transform, x, y));\n        }\n        return moveX || moveY;\n    }\n    controls.scaleCursorStyleHandler = scaleCursorStyleHandler;\n    controls.skewCursorStyleHandler = skewCursorStyleHandler;\n    controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;\n    controls.rotationWithSnapping = wrapWithFireEvent(\"rotating\", wrapWithFixedAnchor(rotationWithSnapping));\n    controls.scalingEqually = wrapWithFireEvent(\"scaling\", wrapWithFixedAnchor(scaleObjectFromCorner));\n    controls.scalingX = wrapWithFireEvent(\"scaling\", wrapWithFixedAnchor(scaleObjectX));\n    controls.scalingY = wrapWithFireEvent(\"scaling\", wrapWithFixedAnchor(scaleObjectY));\n    controls.scalingYOrSkewingX = scalingYOrSkewingX;\n    controls.scalingXOrSkewingY = scalingXOrSkewingY;\n    controls.changeWidth = wrapWithFireEvent(\"resizing\", wrapWithFixedAnchor(changeWidth));\n    controls.skewHandlerX = skewHandlerX;\n    controls.skewHandlerY = skewHandlerY;\n    controls.dragHandler = dragHandler;\n    controls.scaleOrSkewActionName = scaleOrSkewActionName;\n    controls.rotationStyleHandler = rotationStyleHandler;\n    controls.fireEvent = fireEvent;\n    controls.wrapWithFixedAnchor = wrapWithFixedAnchor;\n    controls.wrapWithFireEvent = wrapWithFireEvent;\n    controls.getLocalPoint = getLocalPoint;\n    fabric.controlsUtils = controls;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), degreesToRadians = fabric.util.degreesToRadians, controls = fabric.controlsUtils;\n    /**\n   * Render a round control, as per fabric features.\n   * This function is written to respect object properties like transparentCorners, cornerSize\n   * cornerColor, cornerStrokeColor\n   * plus the addition of offsetY and offsetX.\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @param {Number} left x coordinate where the control center should be\n   * @param {Number} top y coordinate where the control center should be\n   * @param {Object} styleOverride override for fabric.Object controls style\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\n   */ function renderCircleControl(ctx, left, top, styleOverride, fabricObject) {\n        styleOverride = styleOverride || {};\n        var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== \"undefined\" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? \"stroke\" : \"fill\", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), myLeft = left, myTop = top, size;\n        ctx.save();\n        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\n        // as soon as fabric react v5, remove ie11, use proper ellipse code.\n        if (xSize > ySize) {\n            size = xSize;\n            ctx.scale(1.0, ySize / xSize);\n            myTop = top * xSize / ySize;\n        } else if (ySize > xSize) {\n            size = ySize;\n            ctx.scale(xSize / ySize, 1.0);\n            myLeft = left * ySize / xSize;\n        } else {\n            size = xSize;\n        }\n        // this is still wrong\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);\n        ctx[methodName]();\n        if (stroke) {\n            ctx.stroke();\n        }\n        ctx.restore();\n    }\n    /**\n   * Render a square control, as per fabric features.\n   * This function is written to respect object properties like transparentCorners, cornerSize\n   * cornerColor, cornerStrokeColor\n   * plus the addition of offsetY and offsetX.\n   * @param {CanvasRenderingContext2D} ctx context to render on\n   * @param {Number} left x coordinate where the control center should be\n   * @param {Number} top y coordinate where the control center should be\n   * @param {Object} styleOverride override for fabric.Object controls style\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\n   */ function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {\n        styleOverride = styleOverride || {};\n        var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== \"undefined\" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? \"stroke\" : \"fill\", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), xSizeBy2 = xSize / 2, ySizeBy2 = ySize / 2;\n        ctx.save();\n        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\n        // this is still wrong\n        ctx.lineWidth = 1;\n        ctx.translate(left, top);\n        ctx.rotate(degreesToRadians(fabricObject.angle));\n        // this does not work, and fixed with ( && ) does not make sense.\n        // to have real transparent corners we need the controls on upperCanvas\n        // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n        ctx[methodName + \"Rect\"](-xSizeBy2, -ySizeBy2, xSize, ySize);\n        if (stroke) {\n            ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n        }\n        ctx.restore();\n    }\n    controls.renderCircleControl = renderCircleControl;\n    controls.renderSquareControl = renderSquareControl;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {});\n    function Control(options) {\n        for(var i in options){\n            this[i] = options[i];\n        }\n    }\n    fabric.Control = Control;\n    fabric.Control.prototype = /** @lends fabric.Control.prototype */ {\n        /**\n     * keep track of control visibility.\n     * mainly for backward compatibility.\n     * if you do not want to see a control, you can remove it\n     * from the controlset.\n     * @type {Boolean}\n     * @default true\n     */ visible: true,\n        /**\n     * Name of the action that the control will likely execute.\n     * This is optional. FabricJS uses to identify what the user is doing for some\n     * extra optimizations. If you are writing a custom control and you want to know\n     * somewhere else in the code what is going on, you can use this string here.\n     * you can also provide a custom getActionName if your control run multiple actions\n     * depending on some external state.\n     * default to scale since is the most common, used on 4 corners by default\n     * @type {String}\n     * @default 'scale'\n     */ actionName: \"scale\",\n        /**\n     * Drawing angle of the control.\n     * NOT used for now, but name marked as needed for internal logic\n     * example: to reuse the same drawing function for different rotated controls\n     * @type {Number}\n     * @default 0\n     */ angle: 0,\n        /**\n     * Relative position of the control. X\n     * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\n     * of the bounding box.\n     * @type {Number}\n     * @default 0\n     */ x: 0,\n        /**\n     * Relative position of the control. Y\n     * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\n     * of the bounding box.\n     * @type {Number}\n     * @default 0\n     */ y: 0,\n        /**\n     * Horizontal offset of the control from the defined position. In pixels\n     * Positive offset moves the control to the right, negative to the left.\n     * It used when you want to have position of control that does not scale with\n     * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\n     * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will\n     * stay 30 pixels no matter how the object is big. Another example is having 2\n     * controls in the corner, that stay in the same position when the object scale.\n     * of the bounding box.\n     * @type {Number}\n     * @default 0\n     */ offsetX: 0,\n        /**\n     * Vertical offset of the control from the defined position. In pixels\n     * Positive offset moves the control to the bottom, negative to the top.\n     * @type {Number}\n     * @default 0\n     */ offsetY: 0,\n        /**\n     * Sets the length of the control. If null, defaults to object's cornerSize.\n     * Expects both sizeX and sizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */ sizeX: null,\n        /**\n     * Sets the height of the control. If null, defaults to object's cornerSize.\n     * Expects both sizeX and sizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */ sizeY: null,\n        /**\n     * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\n     * Expects both touchSizeX and touchSizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */ touchSizeX: null,\n        /**\n     * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\n     * Expects both touchSizeX and touchSizeY to be set when set.\n     * @type {?Number}\n     * @default null\n     */ touchSizeY: null,\n        /**\n     * Css cursor style to display when the control is hovered.\n     * if the method `cursorStyleHandler` is provided, this property is ignored.\n     * @type {String}\n     * @default 'crosshair'\n     */ cursorStyle: \"crosshair\",\n        /**\n     * If controls has an offsetY or offsetX, draw a line that connects\n     * the control to the bounding box\n     * @type {Boolean}\n     * @default false\n     */ withConnection: false,\n        /**\n     * The control actionHandler, provide one to handle action ( control being moved )\n     * @param {Event} eventData the native mouse event\n     * @param {Object} transformData properties of the current transform\n     * @param {Number} x x position of the cursor\n     * @param {Number} y y position of the cursor\n     * @return {Boolean} true if the action/event modified the object\n     */ actionHandler: function() {},\n        /**\n     * The control handler for mouse down, provide one to handle mouse down on control\n     * @param {Event} eventData the native mouse event\n     * @param {Object} transformData properties of the current transform\n     * @param {Number} x x position of the cursor\n     * @param {Number} y y position of the cursor\n     * @return {Boolean} true if the action/event modified the object\n     */ mouseDownHandler: function() {},\n        /**\n     * The control mouseUpHandler, provide one to handle an effect on mouse up.\n     * @param {Event} eventData the native mouse event\n     * @param {Object} transformData properties of the current transform\n     * @param {Number} x x position of the cursor\n     * @param {Number} y y position of the cursor\n     * @return {Boolean} true if the action/event modified the object\n     */ mouseUpHandler: function() {},\n        /**\n     * Returns control actionHandler\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Object} fabricObject on which the control is displayed\n     * @param {fabric.Control} control control for which the action handler is being asked\n     * @return {Function} the action handler\n     */ getActionHandler: function() {\n            return this.actionHandler;\n        },\n        /**\n     * Returns control mouseDown handler\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Object} fabricObject on which the control is displayed\n     * @param {fabric.Control} control control for which the action handler is being asked\n     * @return {Function} the action handler\n     */ getMouseDownHandler: function() {\n            return this.mouseDownHandler;\n        },\n        /**\n     * Returns control mouseUp handler\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Object} fabricObject on which the control is displayed\n     * @param {fabric.Control} control control for which the action handler is being asked\n     * @return {Function} the action handler\n     */ getMouseUpHandler: function() {\n            return this.mouseUpHandler;\n        },\n        /**\n     * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\n     * function you can pass one in the constructor\n     * the cursorStyle property\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Control} control the current control ( likely this)\n     * @param {fabric.Object} object on which the control is displayed\n     * @return {String}\n     */ cursorStyleHandler: function(eventData, control /* fabricObject */ ) {\n            return control.cursorStyle;\n        },\n        /**\n     * Returns the action name. The basic implementation just return the actionName property.\n     * @param {Event} eventData the native mouse event\n     * @param {fabric.Control} control the current control ( likely this)\n     * @param {fabric.Object} object on which the control is displayed\n     * @return {String}\n     */ getActionName: function(eventData, control /* fabricObject */ ) {\n            return control.actionName;\n        },\n        /**\n     * Returns controls visibility\n     * @param {fabric.Object} object on which the control is displayed\n     * @param {String} controlKey key where the control is memorized on the\n     * @return {Boolean}\n     */ getVisibility: function(fabricObject, controlKey) {\n            var objectVisibility = fabricObject._controlsVisibility;\n            if (objectVisibility && typeof objectVisibility[controlKey] !== \"undefined\") {\n                return objectVisibility[controlKey];\n            }\n            return this.visible;\n        },\n        /**\n     * Sets controls visibility\n     * @param {Boolean} visibility for the object\n     * @return {Void}\n     */ setVisibility: function(visibility /* name, fabricObject */ ) {\n            this.visible = visibility;\n        },\n        positionHandler: function(dim, finalMatrix /*, fabricObject, currentControl */ ) {\n            var point = fabric.util.transformPoint({\n                x: this.x * dim.x + this.offsetX,\n                y: this.y * dim.y + this.offsetY\n            }, finalMatrix);\n            return point;\n        },\n        /**\n     * Returns the coords for this control based on object values.\n     * @param {Number} objectAngle angle from the fabric object holding the control\n     * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\n     *   isTouch is true)\n     * @param {Number} centerX x coordinate where the control center should be\n     * @param {Number} centerY y coordinate where the control center should be\n     * @param {boolean} isTouch true if touch corner, false if normal corner\n     */ calcCornerCoords: function(objectAngle, objectCornerSize, centerX, centerY, isTouch) {\n            var cosHalfOffset, sinHalfOffset, cosHalfOffsetComp, sinHalfOffsetComp, xSize = isTouch ? this.touchSizeX : this.sizeX, ySize = isTouch ? this.touchSizeY : this.sizeY;\n            if (xSize && ySize && xSize !== ySize) {\n                // handle rectangular corners\n                var controlTriangleAngle = Math.atan2(ySize, xSize);\n                var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;\n                var newTheta = controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\n                var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\n                cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta);\n                sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta);\n                // use complementary angle for two corners\n                cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newThetaComp);\n                sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newThetaComp);\n            } else {\n                // handle square corners\n                // use default object corner size unless size is defined\n                var cornerSize = xSize && ySize ? xSize : objectCornerSize;\n                /* 0.7071067812 stands for sqrt(2)/2 */ cornerHypotenuse = cornerSize * 0.7071067812;\n                // complementary angles are equal since they're both 45 degrees\n                var newTheta = fabric.util.degreesToRadians(45 - objectAngle);\n                cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newTheta);\n                sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newTheta);\n            }\n            return {\n                tl: {\n                    x: centerX - sinHalfOffsetComp,\n                    y: centerY - cosHalfOffsetComp\n                },\n                tr: {\n                    x: centerX + cosHalfOffset,\n                    y: centerY - sinHalfOffset\n                },\n                bl: {\n                    x: centerX - cosHalfOffset,\n                    y: centerY + sinHalfOffset\n                },\n                br: {\n                    x: centerX + sinHalfOffsetComp,\n                    y: centerY + cosHalfOffsetComp\n                }\n            };\n        },\n        /**\n    * Render function for the control.\n    * When this function runs the context is unscaled. unrotate. Just retina scaled.\n    * all the functions will have to translate to the point left,top before starting Drawing\n    * if they want to draw a control where the position is detected.\n    * left and top are the result of the positionHandler function\n    * @param {RenderingContext2D} ctx the context where the control will be drawn\n    * @param {Number} left position of the canvas where we are about to render the control.\n    * @param {Number} top position of the canvas where we are about to render the control.\n    * @param {Object} styleOverride\n    * @param {fabric.Object} fabricObject the object where the control is about to be rendered\n    */ render: function(ctx, left, top, styleOverride, fabricObject) {\n            styleOverride = styleOverride || {};\n            switch(styleOverride.cornerStyle || fabricObject.cornerStyle){\n                case \"circle\":\n                    fabric.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);\n                    break;\n                default:\n                    fabric.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);\n            }\n        }\n    };\n})( true ? exports : 0);\n(function() {\n    \"use strict\";\n    if (fabric.StaticCanvas) {\n        fabric.warn(\"fabric.StaticCanvas is already defined.\");\n        return;\n    }\n    // aliases for faster resolution\n    var extend = fabric.util.object.extend, getElementOffset = fabric.util.getElementOffset, removeFromArray = fabric.util.removeFromArray, toFixed = fabric.util.toFixed, transformPoint = fabric.util.transformPoint, invertTransform = fabric.util.invertTransform, getNodeCanvas = fabric.util.getNodeCanvas, createCanvasElement = fabric.util.createCanvasElement, CANVAS_INIT_ERROR = new Error(\"Could not initialize `canvas` element\");\n    /**\n   * Static canvas class\n   * @class fabric.StaticCanvas\n   * @mixes fabric.Collection\n   * @mixes fabric.Observable\n   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\n   * @fires before:render\n   * @fires after:render\n   * @fires canvas:cleared\n   * @fires object:added\n   * @fires object:removed\n   */ fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\n        /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */ initialize: function(el, options) {\n            options || (options = {});\n            this.renderAndResetBound = this.renderAndReset.bind(this);\n            this.requestRenderAllBound = this.requestRenderAll.bind(this);\n            this._initStatic(el, options);\n        },\n        /**\n     * Background color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */ backgroundColor: \"\",\n        /**\n     * Background image of canvas instance.\n     * since 2.4.0 image caching is active, please when putting an image as background, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */ backgroundImage: null,\n        /**\n     * Overlay color of canvas instance.\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\n     * @since 1.3.9\n     * @type {(String|fabric.Pattern)}\n     * @default\n     */ overlayColor: \"\",\n        /**\n     * Overlay image of canvas instance.\n     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\n     * vale. As an alternative you can disable image objectCaching\n     * @type fabric.Image\n     * @default\n     */ overlayImage: null,\n        /**\n     * Indicates whether toObject/toDatalessObject should include default values\n     * if set to false, takes precedence over the object value.\n     * @type Boolean\n     * @default\n     */ includeDefaultValues: true,\n        /**\n     * Indicates whether objects' state should be saved\n     * @type Boolean\n     * @default\n     */ stateful: false,\n        /**\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\n     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\n     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\n     * since the renders are quequed and executed one per frame.\n     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\n     * Left default to true to do not break documentation and old app, fiddles.\n     * @type Boolean\n     * @default\n     */ renderOnAddRemove: true,\n        /**\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\n     * @type Boolean\n     * @default\n     */ controlsAboveOverlay: false,\n        /**\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\n     * @type Boolean\n     * @default\n     */ allowTouchScrolling: false,\n        /**\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\n     * @type Boolean\n     * @default\n     */ imageSmoothingEnabled: true,\n        /**\n     * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\n     * @type Array\n     * @example <caption>Default transform</caption>\n     * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\n     * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\n     * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\n     * @default\n     */ viewportTransform: fabric.iMatrix.concat(),\n        /**\n     * if set to false background image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */ backgroundVpt: true,\n        /**\n     * if set to false overlya image is not affected by viewport transform\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */ overlayVpt: true,\n        /**\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\n     * @type Boolean\n     * @default\n     */ enableRetinaScaling: true,\n        /**\n     * Describe canvas element extension over design\n     * properties are tl,tr,bl,br.\n     * if canvas is not zoomed/panned those points are the four corner of canvas\n     * if canvas is viewportTransformed you those points indicate the extension\n     * of canvas element in plain untrasformed coordinates\n     * The coordinates get updated with @method calcViewportBoundaries.\n     * @memberOf fabric.StaticCanvas.prototype\n     */ vptCoords: {},\n        /**\n     * Based on vptCoords and object.aCoords, skip rendering of objects that\n     * are not included in current viewport.\n     * May greatly help in applications with crowded canvas and use of zoom/pan\n     * If One of the corner of the bounding box of the object is on the canvas\n     * the objects get rendered.\n     * @memberOf fabric.StaticCanvas.prototype\n     * @type Boolean\n     * @default\n     */ skipOffscreen: true,\n        /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the canvas has rendered, and the context is placed in the\n     * top left corner of the canvas.\n     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\n     * @type fabric.Object\n     */ clipPath: undefined,\n        /**\n     * @private\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     */ _initStatic: function(el, options) {\n            var cb = this.requestRenderAllBound;\n            this._objects = [];\n            this._createLowerCanvas(el);\n            this._initOptions(options);\n            // only initialize retina scaling once\n            if (!this.interactive) {\n                this._initRetinaScaling();\n            }\n            if (options.overlayImage) {\n                this.setOverlayImage(options.overlayImage, cb);\n            }\n            if (options.backgroundImage) {\n                this.setBackgroundImage(options.backgroundImage, cb);\n            }\n            if (options.backgroundColor) {\n                this.setBackgroundColor(options.backgroundColor, cb);\n            }\n            if (options.overlayColor) {\n                this.setOverlayColor(options.overlayColor, cb);\n            }\n            this.calcOffset();\n        },\n        /**\n     * @private\n     */ _isRetinaScaling: function() {\n            return fabric.devicePixelRatio > 1 && this.enableRetinaScaling;\n        },\n        /**\n     * @private\n     * @return {Number} retinaScaling if applied, otherwise 1;\n     */ getRetinaScaling: function() {\n            return this._isRetinaScaling() ? Math.max(1, fabric.devicePixelRatio) : 1;\n        },\n        /**\n     * @private\n     */ _initRetinaScaling: function() {\n            if (!this._isRetinaScaling()) {\n                return;\n            }\n            var scaleRatio = fabric.devicePixelRatio;\n            this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);\n            if (this.upperCanvasEl) {\n                this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);\n            }\n        },\n        __initRetinaScaling: function(scaleRatio, canvas, context) {\n            canvas.setAttribute(\"width\", this.width * scaleRatio);\n            canvas.setAttribute(\"height\", this.height * scaleRatio);\n            context.scale(scaleRatio, scaleRatio);\n        },\n        /**\n     * Calculates canvas element offset relative to the document\n     * This method is also attached as \"resize\" event handler of window\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */ calcOffset: function() {\n            this._offset = getElementOffset(this.lowerCanvasEl);\n            return this;\n        },\n        /**\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage with different properties</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position overlayImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>overlayImage loaded from cross-origin</caption>\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */ setOverlayImage: function(image, callback, options) {\n            return this.__setBgOverlayImage(\"overlayImage\", image, callback, options);\n        },\n        /**\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage with different properties</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\n     * });\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   width: canvas.width,\n     *   height: canvas.height,\n     *   // Needed to position backgroundImage at 0/0\n     *   originX: 'left',\n     *   originY: 'top'\n     * });\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\n     *   opacity: 0.5,\n     *   angle: 45,\n     *   left: 400,\n     *   top: 400,\n     *   originX: 'left',\n     *   originY: 'top',\n     *   crossOrigin: 'anonymous'\n     * });\n     */ // TODO: fix stretched examples\n        setBackgroundImage: function(image, callback, options) {\n            return this.__setBgOverlayImage(\"backgroundImage\", image, callback, options);\n        },\n        /**\n     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\n     * @param {Function} callback Callback to invoke when foreground color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\n     * @example <caption>Normal overlayColor - color value</caption>\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\n     * canvas.setOverlayColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */ setOverlayColor: function(overlayColor, callback) {\n            return this.__setBgOverlayColor(\"overlayColor\", overlayColor, callback);\n        },\n        /**\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\n     * @param {Function} callback Callback to invoke when background color is set\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\n     * @example <caption>Normal backgroundColor - color value</caption>\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\n     * }, canvas.renderAll.bind(canvas));\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\n     * canvas.setBackgroundColor({\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\n     *   repeat: 'repeat',\n     *   offsetX: 200,\n     *   offsetY: 100\n     * }, canvas.renderAll.bind(canvas));\n     */ setBackgroundColor: function(backgroundColor, callback) {\n            return this.__setBgOverlayColor(\"backgroundColor\", backgroundColor, callback);\n        },\n        /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\n     */ __setBgOverlayImage: function(property, image, callback, options) {\n            if (typeof image === \"string\") {\n                fabric.util.loadImage(image, function(img, isError) {\n                    if (img) {\n                        var instance = new fabric.Image(img, options);\n                        this[property] = instance;\n                        instance.canvas = this;\n                    }\n                    callback && callback(img, isError);\n                }, this, options && options.crossOrigin);\n            } else {\n                options && image.setOptions(options);\n                this[property] = image;\n                image && (image.canvas = this);\n                callback && callback(image, false);\n            }\n            return this;\n        },\n        /**\n     * @private\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\n     * @param {Function} [callback] Callback is invoked when color is set\n     */ __setBgOverlayColor: function(property, color, callback) {\n            this[property] = color;\n            this._initGradient(color, property);\n            this._initPattern(color, property, callback);\n            return this;\n        },\n        /**\n     * @private\n     */ _createCanvasElement: function() {\n            var element = createCanvasElement();\n            if (!element) {\n                throw CANVAS_INIT_ERROR;\n            }\n            if (!element.style) {\n                element.style = {};\n            }\n            if (typeof element.getContext === \"undefined\") {\n                throw CANVAS_INIT_ERROR;\n            }\n            return element;\n        },\n        /**\n     * @private\n     * @param {Object} [options] Options object\n     */ _initOptions: function(options) {\n            var lowerCanvasEl = this.lowerCanvasEl;\n            this._setOptions(options);\n            this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\n            this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\n            if (!this.lowerCanvasEl.style) {\n                return;\n            }\n            lowerCanvasEl.width = this.width;\n            lowerCanvasEl.height = this.height;\n            lowerCanvasEl.style.width = this.width + \"px\";\n            lowerCanvasEl.style.height = this.height + \"px\";\n            this.viewportTransform = this.viewportTransform.slice();\n        },\n        /**\n     * Creates a bottom canvas\n     * @private\n     * @param {HTMLElement} [canvasEl]\n     */ _createLowerCanvas: function(canvasEl) {\n            // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n            if (canvasEl && canvasEl.getContext) {\n                this.lowerCanvasEl = canvasEl;\n            } else {\n                this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n            }\n            fabric.util.addClass(this.lowerCanvasEl, \"lower-canvas\");\n            this._originalCanvasStyle = this.lowerCanvasEl.style;\n            if (this.interactive) {\n                this._applyCanvasStyle(this.lowerCanvasEl);\n            }\n            this.contextContainer = this.lowerCanvasEl.getContext(\"2d\");\n        },\n        /**\n     * Returns canvas width (in px)\n     * @return {Number}\n     */ getWidth: function() {\n            return this.width;\n        },\n        /**\n     * Returns canvas height (in px)\n     * @return {Number}\n     */ getHeight: function() {\n            return this.height;\n        },\n        /**\n     * Sets width of this canvas instance\n     * @param {Number|String} value                         Value to set width to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ setWidth: function(value, options) {\n            return this.setDimensions({\n                width: value\n            }, options);\n        },\n        /**\n     * Sets height of this canvas instance\n     * @param {Number|String} value                         Value to set height to\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ setHeight: function(value, options) {\n            return this.setDimensions({\n                height: value\n            }, options);\n        },\n        /**\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\n     * @param {Object}        dimensions                    Object with width/height properties\n     * @param {Number|String} [dimensions.width]            Width of canvas element\n     * @param {Number|String} [dimensions.height]           Height of canvas element\n     * @param {Object}        [options]                     Options object\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ setDimensions: function(dimensions, options) {\n            var cssValue;\n            options = options || {};\n            for(var prop in dimensions){\n                cssValue = dimensions[prop];\n                if (!options.cssOnly) {\n                    this._setBackstoreDimension(prop, dimensions[prop]);\n                    cssValue += \"px\";\n                    this.hasLostContext = true;\n                }\n                if (!options.backstoreOnly) {\n                    this._setCssDimension(prop, cssValue);\n                }\n            }\n            if (this._isCurrentlyDrawing) {\n                this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\n            }\n            this._initRetinaScaling();\n            this.calcOffset();\n            if (!options.cssOnly) {\n                this.requestRenderAll();\n            }\n            return this;\n        },\n        /**\n     * Helper for setting width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {Number} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ _setBackstoreDimension: function(prop, value) {\n            this.lowerCanvasEl[prop] = value;\n            if (this.upperCanvasEl) {\n                this.upperCanvasEl[prop] = value;\n            }\n            if (this.cacheCanvasEl) {\n                this.cacheCanvasEl[prop] = value;\n            }\n            this[prop] = value;\n            return this;\n        },\n        /**\n     * Helper for setting css width/height\n     * @private\n     * @param {String} prop property (width|height)\n     * @param {String} value value to set property to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ _setCssDimension: function(prop, value) {\n            this.lowerCanvasEl.style[prop] = value;\n            if (this.upperCanvasEl) {\n                this.upperCanvasEl.style[prop] = value;\n            }\n            if (this.wrapperEl) {\n                this.wrapperEl.style[prop] = value;\n            }\n            return this;\n        },\n        /**\n     * Returns canvas zoom level\n     * @return {Number}\n     */ getZoom: function() {\n            return this.viewportTransform[0];\n        },\n        /**\n     * Sets viewport transformation of this canvas instance\n     * @param {Array} vpt a Canvas 2D API transform matrix\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ setViewportTransform: function(vpt) {\n            var activeObject = this._activeObject, backgroundObject = this.backgroundImage, overlayObject = this.overlayImage, object, i, len;\n            this.viewportTransform = vpt;\n            for(i = 0, len = this._objects.length; i < len; i++){\n                object = this._objects[i];\n                object.group || object.setCoords(true);\n            }\n            if (activeObject) {\n                activeObject.setCoords();\n            }\n            if (backgroundObject) {\n                backgroundObject.setCoords(true);\n            }\n            if (overlayObject) {\n                overlayObject.setCoords(true);\n            }\n            this.calcViewportBoundaries();\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * Sets zoom level of this canvas instance, the zoom centered around point\n     * meaning that following zoom to point with the same point will have the visual\n     * effect of the zoom originating from that point. The point won't move.\n     * It has nothing to do with canvas center or visual center of the viewport.\n     * @param {fabric.Point} point to zoom with respect to\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ zoomToPoint: function(point, value) {\n            // TODO: just change the scale, preserve other transformations\n            var before = point, vpt = this.viewportTransform.slice(0);\n            point = transformPoint(point, invertTransform(this.viewportTransform));\n            vpt[0] = value;\n            vpt[3] = value;\n            var after = transformPoint(point, vpt);\n            vpt[4] += before.x - after.x;\n            vpt[5] += before.y - after.y;\n            return this.setViewportTransform(vpt);\n        },\n        /**\n     * Sets zoom level of this canvas instance\n     * @param {Number} value to set zoom to, less than 1 zooms out\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ setZoom: function(value) {\n            this.zoomToPoint(new fabric.Point(0, 0), value);\n            return this;\n        },\n        /**\n     * Pan viewport so as to place point at top left corner of canvas\n     * @param {fabric.Point} point to move to\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ absolutePan: function(point) {\n            var vpt = this.viewportTransform.slice(0);\n            vpt[4] = -point.x;\n            vpt[5] = -point.y;\n            return this.setViewportTransform(vpt);\n        },\n        /**\n     * Pans viewpoint relatively\n     * @param {fabric.Point} point (position vector) to move by\n     * @return {fabric.Canvas} instance\n     * @chainable true\n     */ relativePan: function(point) {\n            return this.absolutePan(new fabric.Point(-point.x - this.viewportTransform[4], -point.y - this.viewportTransform[5]));\n        },\n        /**\n     * Returns &lt;canvas> element corresponding to this instance\n     * @return {HTMLCanvasElement}\n     */ getElement: function() {\n            return this.lowerCanvasEl;\n        },\n        /**\n     * @private\n     * @param {fabric.Object} obj Object that was added\n     */ _onObjectAdded: function(obj) {\n            this.stateful && obj.setupState();\n            obj._set(\"canvas\", this);\n            obj.setCoords();\n            this.fire(\"object:added\", {\n                target: obj\n            });\n            obj.fire(\"added\");\n        },\n        /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */ _onObjectRemoved: function(obj) {\n            this.fire(\"object:removed\", {\n                target: obj\n            });\n            obj.fire(\"removed\");\n            delete obj.canvas;\n        },\n        /**\n     * Clears specified context of canvas element\n     * @param {CanvasRenderingContext2D} ctx Context to clear\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ clearContext: function(ctx) {\n            ctx.clearRect(0, 0, this.width, this.height);\n            return this;\n        },\n        /**\n     * Returns context of canvas where objects are drawn\n     * @return {CanvasRenderingContext2D}\n     */ getContext: function() {\n            return this.contextContainer;\n        },\n        /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ clear: function() {\n            this.remove.apply(this, this.getObjects());\n            this.backgroundImage = null;\n            this.overlayImage = null;\n            this.backgroundColor = \"\";\n            this.overlayColor = \"\";\n            if (this._hasITextHandlers) {\n                this.off(\"mouse:up\", this._mouseUpITextHandler);\n                this._iTextInstances = null;\n                this._hasITextHandlers = false;\n            }\n            this.clearContext(this.contextContainer);\n            this.fire(\"canvas:cleared\");\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * Renders the canvas\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */ renderAll: function() {\n            var canvasToDrawOn = this.contextContainer;\n            this.renderCanvas(canvasToDrawOn, this._objects);\n            return this;\n        },\n        /**\n     * Function created to be instance bound at initialization\n     * used in requestAnimationFrame rendering\n     * Let the fabricJS call it. If you call it manually you could have more\n     * animationFrame stacking on to of each other\n     * for an imperative rendering, use canvas.renderAll\n     * @private\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */ renderAndReset: function() {\n            this.isRendering = 0;\n            this.renderAll();\n        },\n        /**\n     * Append a renderAll request to next animation frame.\n     * unless one is already in progress, in that case nothing is done\n     * a boolean flag will avoid appending more.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */ requestRenderAll: function() {\n            if (!this.isRendering) {\n                this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\n            }\n            return this;\n        },\n        /**\n     * Calculate the position of the 4 corner of canvas with current viewportTransform.\n     * helps to determinate when an object is in the current rendering viewport using\n     * object absolute coordinates ( aCoords )\n     * @return {Object} points.tl\n     * @chainable\n     */ calcViewportBoundaries: function() {\n            var points = {}, width = this.width, height = this.height, iVpt = invertTransform(this.viewportTransform);\n            points.tl = transformPoint({\n                x: 0,\n                y: 0\n            }, iVpt);\n            points.br = transformPoint({\n                x: width,\n                y: height\n            }, iVpt);\n            points.tr = new fabric.Point(points.br.x, points.tl.y);\n            points.bl = new fabric.Point(points.tl.x, points.br.y);\n            this.vptCoords = points;\n            return points;\n        },\n        cancelRequestedRender: function() {\n            if (this.isRendering) {\n                fabric.util.cancelAnimFrame(this.isRendering);\n                this.isRendering = 0;\n            }\n        },\n        /**\n     * Renders background, objects, overlay and controls.\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {Array} objects to render\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */ renderCanvas: function(ctx, objects) {\n            var v = this.viewportTransform, path = this.clipPath;\n            this.cancelRequestedRender();\n            this.calcViewportBoundaries();\n            this.clearContext(ctx);\n            fabric.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);\n            this.fire(\"before:render\", {\n                ctx: ctx\n            });\n            this._renderBackground(ctx);\n            ctx.save();\n            //apply viewport transform once for all rendering process\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n            this._renderObjects(ctx, objects);\n            ctx.restore();\n            if (!this.controlsAboveOverlay && this.interactive) {\n                this.drawControls(ctx);\n            }\n            if (path) {\n                path.canvas = this;\n                // needed to setup a couple of variables\n                path.shouldCache();\n                path._transformDone = true;\n                path.renderCache({\n                    forClipping: true\n                });\n                this.drawClipPathOnCanvas(ctx);\n            }\n            this._renderOverlay(ctx);\n            if (this.controlsAboveOverlay && this.interactive) {\n                this.drawControls(ctx);\n            }\n            this.fire(\"after:render\", {\n                ctx: ctx\n            });\n        },\n        /**\n     * Paint the cached clipPath on the lowerCanvasEl\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ drawClipPathOnCanvas: function(ctx) {\n            var v = this.viewportTransform, path = this.clipPath;\n            ctx.save();\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n            // DEBUG: uncomment this line, comment the following\n            // ctx.globalAlpha = 0.4;\n            ctx.globalCompositeOperation = \"destination-in\";\n            path.transform(ctx);\n            ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n            ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n            ctx.restore();\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} objects to render\n     */ _renderObjects: function(ctx, objects) {\n            var i, len;\n            for(i = 0, len = objects.length; i < len; ++i){\n                objects[i] && objects[i].render(ctx);\n            }\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {string} property 'background' or 'overlay'\n     */ _renderBackgroundOrOverlay: function(ctx, property) {\n            var fill = this[property + \"Color\"], object = this[property + \"Image\"], v = this.viewportTransform, needsVpt = this[property + \"Vpt\"];\n            if (!fill && !object) {\n                return;\n            }\n            if (fill) {\n                ctx.save();\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.lineTo(this.width, 0);\n                ctx.lineTo(this.width, this.height);\n                ctx.lineTo(0, this.height);\n                ctx.closePath();\n                ctx.fillStyle = fill.toLive ? fill.toLive(ctx, this) : fill;\n                if (needsVpt) {\n                    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n                }\n                ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n                var m = fill.gradientTransform || fill.patternTransform;\n                m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n                ctx.fill();\n                ctx.restore();\n            }\n            if (object) {\n                ctx.save();\n                if (needsVpt) {\n                    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n                }\n                object.render(ctx);\n                ctx.restore();\n            }\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderBackground: function(ctx) {\n            this._renderBackgroundOrOverlay(ctx, \"background\");\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderOverlay: function(ctx) {\n            this._renderBackgroundOrOverlay(ctx, \"overlay\");\n        },\n        /**\n     * Returns coordinates of a center of canvas.\n     * Returned value is an object with top and left properties\n     * @return {Object} object with \"top\" and \"left\" number values\n     * @deprecated migrate to `getCenterPoint`\n     */ getCenter: function() {\n            return {\n                top: this.height / 2,\n                left: this.width / 2\n            };\n        },\n        /**\n     * Returns coordinates of a center of canvas.\n     * @return {fabric.Point} \n     */ getCenterPoint: function() {\n            return new fabric.Point(this.width / 2, this.height / 2);\n        },\n        /**\n     * Centers object horizontally in the canvas\n     * @param {fabric.Object} object Object to center horizontally\n     * @return {fabric.Canvas} thisArg\n     */ centerObjectH: function(object) {\n            return this._centerObject(object, new fabric.Point(this.getCenterPoint().x, object.getCenterPoint().y));\n        },\n        /**\n     * Centers object vertically in the canvas\n     * @param {fabric.Object} object Object to center vertically\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ centerObjectV: function(object) {\n            return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenterPoint().y));\n        },\n        /**\n     * Centers object vertically and horizontally in the canvas\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ centerObject: function(object) {\n            var center = this.getCenterPoint();\n            return this._centerObject(object, center);\n        },\n        /**\n     * Centers object vertically and horizontally in the viewport\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ viewportCenterObject: function(object) {\n            var vpCenter = this.getVpCenter();\n            return this._centerObject(object, vpCenter);\n        },\n        /**\n     * Centers object horizontally in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ viewportCenterObjectH: function(object) {\n            var vpCenter = this.getVpCenter();\n            this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\n            return this;\n        },\n        /**\n     * Centers object Vertically in the viewport, object.top is unchanged\n     * @param {fabric.Object} object Object to center vertically and horizontally\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ viewportCenterObjectV: function(object) {\n            var vpCenter = this.getVpCenter();\n            return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\n        },\n        /**\n     * Calculate the point in canvas that correspond to the center of actual viewport.\n     * @return {fabric.Point} vpCenter, viewport center\n     * @chainable\n     */ getVpCenter: function() {\n            var center = this.getCenterPoint(), iVpt = invertTransform(this.viewportTransform);\n            return transformPoint(center, iVpt);\n        },\n        /**\n     * @private\n     * @param {fabric.Object} object Object to center\n     * @param {fabric.Point} center Center point\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ _centerObject: function(object, center) {\n            object.setPositionByOrigin(center, \"center\", \"center\");\n            object.setCoords();\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * Returns dataless JSON representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {String} json string\n     */ toDatalessJSON: function(propertiesToInclude) {\n            return this.toDatalessObject(propertiesToInclude);\n        },\n        /**\n     * Returns object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            return this._toObjectMethod(\"toObject\", propertiesToInclude);\n        },\n        /**\n     * Returns dataless object representation of canvas\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toDatalessObject: function(propertiesToInclude) {\n            return this._toObjectMethod(\"toDatalessObject\", propertiesToInclude);\n        },\n        /**\n     * @private\n     */ _toObjectMethod: function(methodName, propertiesToInclude) {\n            var clipPath = this.clipPath, data = {\n                version: fabric.version,\n                objects: this._toObjects(methodName, propertiesToInclude)\n            };\n            if (clipPath && !clipPath.excludeFromExport) {\n                data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);\n            }\n            extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\n            fabric.util.populateWithProperties(this, data, propertiesToInclude);\n            return data;\n        },\n        /**\n     * @private\n     */ _toObjects: function(methodName, propertiesToInclude) {\n            return this._objects.filter(function(object) {\n                return !object.excludeFromExport;\n            }).map(function(instance) {\n                return this._toObject(instance, methodName, propertiesToInclude);\n            }, this);\n        },\n        /**\n     * @private\n     */ _toObject: function(instance, methodName, propertiesToInclude) {\n            var originalValue;\n            if (!this.includeDefaultValues) {\n                originalValue = instance.includeDefaultValues;\n                instance.includeDefaultValues = false;\n            }\n            var object = instance[methodName](propertiesToInclude);\n            if (!this.includeDefaultValues) {\n                instance.includeDefaultValues = originalValue;\n            }\n            return object;\n        },\n        /**\n     * @private\n     */ __serializeBgOverlay: function(methodName, propertiesToInclude) {\n            var data = {}, bgImage = this.backgroundImage, overlayImage = this.overlayImage, bgColor = this.backgroundColor, overlayColor = this.overlayColor;\n            if (bgColor && bgColor.toObject) {\n                if (!bgColor.excludeFromExport) {\n                    data.background = bgColor.toObject(propertiesToInclude);\n                }\n            } else if (bgColor) {\n                data.background = bgColor;\n            }\n            if (overlayColor && overlayColor.toObject) {\n                if (!overlayColor.excludeFromExport) {\n                    data.overlay = overlayColor.toObject(propertiesToInclude);\n                }\n            } else if (overlayColor) {\n                data.overlay = overlayColor;\n            }\n            if (bgImage && !bgImage.excludeFromExport) {\n                data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\n            }\n            if (overlayImage && !overlayImage.excludeFromExport) {\n                data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);\n            }\n            return data;\n        },\n        /**\n     * Moves an object or the objects of a multiple selection\n     * to the bottom of the stack of drawn objects\n     * @param {fabric.Object} object Object to send to back\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ sendToBack: function(object) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, objs;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = objs.length; i--;){\n                    obj = objs[i];\n                    removeFromArray(this._objects, obj);\n                    this._objects.unshift(obj);\n                }\n            } else {\n                removeFromArray(this._objects, object);\n                this._objects.unshift(object);\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * Moves an object or the objects of a multiple selection\n     * to the top of the stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ bringToFront: function(object) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, objs;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = 0; i < objs.length; i++){\n                    obj = objs[i];\n                    removeFromArray(this._objects, obj);\n                    this._objects.push(obj);\n                }\n            } else {\n                removeFromArray(this._objects, object);\n                this._objects.push(object);\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * Moves an object or a selection down in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in behind\n     * the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ sendBackwards: function(object, intersecting) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = 0; i < objs.length; i++){\n                    obj = objs[i];\n                    idx = this._objects.indexOf(obj);\n                    if (idx > 0 + objsMoved) {\n                        newIdx = idx - 1;\n                        removeFromArray(this._objects, obj);\n                        this._objects.splice(newIdx, 0, obj);\n                    }\n                    objsMoved++;\n                }\n            } else {\n                idx = this._objects.indexOf(object);\n                if (idx !== 0) {\n                    // if object is not on the bottom of stack\n                    newIdx = this._findNewLowerIndex(object, idx, intersecting);\n                    removeFromArray(this._objects, object);\n                    this._objects.splice(newIdx, 0, object);\n                }\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * @private\n     */ _findNewLowerIndex: function(object, idx, intersecting) {\n            var newIdx, i;\n            if (intersecting) {\n                newIdx = idx;\n                // traverse down the stack looking for the nearest intersecting object\n                for(i = idx - 1; i >= 0; --i){\n                    var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);\n                    if (isIntersecting) {\n                        newIdx = i;\n                        break;\n                    }\n                }\n            } else {\n                newIdx = idx - 1;\n            }\n            return newIdx;\n        },\n        /**\n     * Moves an object or a selection up in stack of drawn objects\n     * An optional parameter, intersecting allows to move the object in front\n     * of the first intersecting object. Where intersection is calculated with\n     * bounding box. If no intersection is found, there will not be change in the\n     * stack.\n     * @param {fabric.Object} object Object to send\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ bringForward: function(object, intersecting) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = objs.length; i--;){\n                    obj = objs[i];\n                    idx = this._objects.indexOf(obj);\n                    if (idx < this._objects.length - 1 - objsMoved) {\n                        newIdx = idx + 1;\n                        removeFromArray(this._objects, obj);\n                        this._objects.splice(newIdx, 0, obj);\n                    }\n                    objsMoved++;\n                }\n            } else {\n                idx = this._objects.indexOf(object);\n                if (idx !== this._objects.length - 1) {\n                    // if object is not on top of stack (last item in an array)\n                    newIdx = this._findNewUpperIndex(object, idx, intersecting);\n                    removeFromArray(this._objects, object);\n                    this._objects.splice(newIdx, 0, object);\n                }\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\n     * @private\n     */ _findNewUpperIndex: function(object, idx, intersecting) {\n            var newIdx, i, len;\n            if (intersecting) {\n                newIdx = idx;\n                // traverse up the stack looking for the nearest intersecting object\n                for(i = idx + 1, len = this._objects.length; i < len; ++i){\n                    var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);\n                    if (isIntersecting) {\n                        newIdx = i;\n                        break;\n                    }\n                }\n            } else {\n                newIdx = idx + 1;\n            }\n            return newIdx;\n        },\n        /**\n     * Moves an object to specified level in stack of drawn objects\n     * @param {fabric.Object} object Object to send\n     * @param {Number} index Position to move to\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ moveTo: function(object, index) {\n            removeFromArray(this._objects, object);\n            this._objects.splice(index, 0, object);\n            return this.renderOnAddRemove && this.requestRenderAll();\n        },\n        /**\n     * Clears a canvas element and dispose objects\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ dispose: function() {\n            // cancel eventually ongoing renders\n            if (this.isRendering) {\n                fabric.util.cancelAnimFrame(this.isRendering);\n                this.isRendering = 0;\n            }\n            this.forEachObject(function(object) {\n                object.dispose && object.dispose();\n            });\n            this._objects = [];\n            if (this.backgroundImage && this.backgroundImage.dispose) {\n                this.backgroundImage.dispose();\n            }\n            this.backgroundImage = null;\n            if (this.overlayImage && this.overlayImage.dispose) {\n                this.overlayImage.dispose();\n            }\n            this.overlayImage = null;\n            this._iTextInstances = null;\n            this.contextContainer = null;\n            // restore canvas style\n            this.lowerCanvasEl.classList.remove(\"lower-canvas\");\n            fabric.util.setStyle(this.lowerCanvasEl, this._originalCanvasStyle);\n            delete this._originalCanvasStyle;\n            // restore canvas size to original size in case retina scaling was applied\n            this.lowerCanvasEl.setAttribute(\"width\", this.width);\n            this.lowerCanvasEl.setAttribute(\"height\", this.height);\n            fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\n            this.lowerCanvasEl = undefined;\n            return this;\n        },\n        /**\n     * Returns a string representation of an instance\n     * @return {String} string representation of an instance\n     */ toString: function() {\n            return \"#<fabric.Canvas (\" + this.complexity() + \"): \" + \"{ objects: \" + this._objects.length + \" }>\";\n        }\n    });\n    extend(fabric.StaticCanvas.prototype, fabric.Observable);\n    extend(fabric.StaticCanvas.prototype, fabric.Collection);\n    extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n    extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n        /**\n     * @static\n     * @type String\n     * @default\n     */ EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n        /**\n     * Provides a way to check support of some of the canvas methods\n     * (either those of HTMLCanvasElement itself, or rendering context)\n     *\n     * @param {String} methodName Method to check support for;\n     *                            Could be one of \"setLineDash\"\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\n     *                          `null` if canvas element or context can not be initialized\n     */ supports: function(methodName) {\n            var el = createCanvasElement();\n            if (!el || !el.getContext) {\n                return null;\n            }\n            var ctx = el.getContext(\"2d\");\n            if (!ctx) {\n                return null;\n            }\n            switch(methodName){\n                case \"setLineDash\":\n                    return typeof ctx.setLineDash !== \"undefined\";\n                default:\n                    return null;\n            }\n        }\n    });\n    /**\n   * Returns Object representation of canvas\n   * this alias is provided because if you call JSON.stringify on an instance,\n   * the toJSON object will be invoked if it exists.\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\n   * @function\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n   * @return {Object} JSON compatible object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\n   * @example <caption>JSON without additional properties</caption>\n   * var json = canvas.toJSON();\n   * @example <caption>JSON with additional properties included</caption>\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\n   * @example <caption>JSON without default values</caption>\n   * canvas.includeDefaultValues = false;\n   * var json = canvas.toJSON();\n   */ fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n    if (fabric.isLikelyNode) {\n        fabric.StaticCanvas.prototype.createPNGStream = function() {\n            var impl = getNodeCanvas(this.lowerCanvasEl);\n            return impl && impl.createPNGStream();\n        };\n        fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n            var impl = getNodeCanvas(this.lowerCanvasEl);\n            return impl && impl.createJPEGStream(opts);\n        };\n    }\n})();\n/**\n * BaseBrush class\n * @class fabric.BaseBrush\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\n */ fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n    /**\n   * Color of a brush\n   * @type String\n   * @default\n   */ color: \"rgb(0, 0, 0)\",\n    /**\n   * Width of a brush, has to be a Number, no string literals\n   * @type Number\n   * @default\n   */ width: 1,\n    /**\n   * Shadow object representing shadow of this shape.\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\n   * @type fabric.Shadow\n   * @default\n   */ shadow: null,\n    /**\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\n   * @type String\n   * @default\n   */ strokeLineCap: \"round\",\n    /**\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\n   * @type String\n   * @default\n   */ strokeLineJoin: \"round\",\n    /**\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\n   * @type Number\n   * @default\n   */ strokeMiterLimit: 10,\n    /**\n   * Stroke Dash Array.\n   * @type Array\n   * @default\n   */ strokeDashArray: null,\n    /**\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\n   * @type Boolean\n   * @default false\n  */ limitedToCanvasSize: false,\n    /**\n   * Sets brush styles\n   * @private\n   * @param {CanvasRenderingContext2D} ctx\n   */ _setBrushStyles: function(ctx) {\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = this.width;\n        ctx.lineCap = this.strokeLineCap;\n        ctx.miterLimit = this.strokeMiterLimit;\n        ctx.lineJoin = this.strokeLineJoin;\n        ctx.setLineDash(this.strokeDashArray || []);\n    },\n    /**\n   * Sets the transformation on given context\n   * @param {RenderingContext2d} ctx context to render on\n   * @private\n   */ _saveAndTransform: function(ctx) {\n        var v = this.canvas.viewportTransform;\n        ctx.save();\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    },\n    /**\n   * Sets brush shadow styles\n   * @private\n   */ _setShadow: function() {\n        if (!this.shadow) {\n            return;\n        }\n        var canvas = this.canvas, shadow = this.shadow, ctx = canvas.contextTop, zoom = canvas.getZoom();\n        if (canvas && canvas._isRetinaScaling()) {\n            zoom *= fabric.devicePixelRatio;\n        }\n        ctx.shadowColor = shadow.color;\n        ctx.shadowBlur = shadow.blur * zoom;\n        ctx.shadowOffsetX = shadow.offsetX * zoom;\n        ctx.shadowOffsetY = shadow.offsetY * zoom;\n    },\n    needsFullRender: function() {\n        var color = new fabric.Color(this.color);\n        return color.getAlpha() < 1 || !!this.shadow;\n    },\n    /**\n   * Removes brush shadow styles\n   * @private\n   */ _resetShadow: function() {\n        var ctx = this.canvas.contextTop;\n        ctx.shadowColor = \"\";\n        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n    /**\n   * Check is pointer is outside canvas boundaries\n   * @param {Object} pointer\n   * @private\n  */ _isOutSideCanvas: function(pointer) {\n        return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();\n    }\n});\n(function() {\n    /**\n   * PencilBrush class\n   * @class fabric.PencilBrush\n   * @extends fabric.BaseBrush\n   */ fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n        /**\n     * Discard points that are less than `decimate` pixel distant from each other\n     * @type Number\n     * @default 0.4\n     */ decimate: 0.4,\n        /**\n     * Draws a straight line between last recorded point to current pointer\n     * Used for `shift` functionality\n     *\n     * @type boolean\n     * @default false\n     */ drawStraightLine: false,\n        /**\n     * The event modifier key that makes the brush draw a straight line.\n     * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\n     * @type {'altKey' | 'shiftKey' | 'ctrlKey' | 'none' | undefined | null}\n     */ straightLineKey: \"shiftKey\",\n        /**\n     * Constructor\n     * @param {fabric.Canvas} canvas\n     * @return {fabric.PencilBrush} Instance of a pencil brush\n     */ initialize: function(canvas) {\n            this.canvas = canvas;\n            this._points = [];\n        },\n        needsFullRender: function() {\n            return this.callSuper(\"needsFullRender\") || this._hasStraightLine;\n        },\n        /**\n     * Invoked inside on mouse down and mouse move\n     * @param {Object} pointer\n     */ _drawSegment: function(ctx, p1, p2) {\n            var midPoint = p1.midPointFrom(p2);\n            ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n            return midPoint;\n        },\n        /**\n     * Invoked on mouse down\n     * @param {Object} pointer\n     */ onMouseDown: function(pointer, options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return;\n            }\n            this.drawStraightLine = options.e[this.straightLineKey];\n            this._prepareForDrawing(pointer);\n            // capture coordinates immediately\n            // this allows to draw dots (when movement never occurs)\n            this._captureDrawingPath(pointer);\n            this._render();\n        },\n        /**\n     * Invoked on mouse move\n     * @param {Object} pointer\n     */ onMouseMove: function(pointer, options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return;\n            }\n            this.drawStraightLine = options.e[this.straightLineKey];\n            if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n                return;\n            }\n            if (this._captureDrawingPath(pointer) && this._points.length > 1) {\n                if (this.needsFullRender()) {\n                    // redraw curve\n                    // clear top canvas\n                    this.canvas.clearContext(this.canvas.contextTop);\n                    this._render();\n                } else {\n                    var points = this._points, length = points.length, ctx = this.canvas.contextTop;\n                    // draw the curve update\n                    this._saveAndTransform(ctx);\n                    if (this.oldEnd) {\n                        ctx.beginPath();\n                        ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n                    }\n                    this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\n                    ctx.stroke();\n                    ctx.restore();\n                }\n            }\n        },\n        /**\n     * Invoked on mouse up\n     */ onMouseUp: function(options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return true;\n            }\n            this.drawStraightLine = false;\n            this.oldEnd = undefined;\n            this._finalizeAndAddPath();\n            return false;\n        },\n        /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */ _prepareForDrawing: function(pointer) {\n            var p = new fabric.Point(pointer.x, pointer.y);\n            this._reset();\n            this._addPoint(p);\n            this.canvas.contextTop.moveTo(p.x, p.y);\n        },\n        /**\n     * @private\n     * @param {fabric.Point} point Point to be added to points array\n     */ _addPoint: function(point) {\n            if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\n                return false;\n            }\n            if (this.drawStraightLine && this._points.length > 1) {\n                this._hasStraightLine = true;\n                this._points.pop();\n            }\n            this._points.push(point);\n            return true;\n        },\n        /**\n     * Clear points array and set contextTop canvas style.\n     * @private\n     */ _reset: function() {\n            this._points = [];\n            this._setBrushStyles(this.canvas.contextTop);\n            this._setShadow();\n            this._hasStraightLine = false;\n        },\n        /**\n     * @private\n     * @param {Object} pointer Actual mouse position related to the canvas.\n     */ _captureDrawingPath: function(pointer) {\n            var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n            return this._addPoint(pointerPoint);\n        },\n        /**\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\n     * @private\n     * @param {CanvasRenderingContext2D} [ctx]\n     */ _render: function(ctx) {\n            var i, len, p1 = this._points[0], p2 = this._points[1];\n            ctx = ctx || this.canvas.contextTop;\n            this._saveAndTransform(ctx);\n            ctx.beginPath();\n            //if we only have 2 points in the path and they are the same\n            //it means that the user only clicked the canvas without moving the mouse\n            //then we should be drawing a dot. A path isn't drawn between two identical dots\n            //that's why we set them apart a bit\n            if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n                var width = this.width / 1000;\n                p1 = new fabric.Point(p1.x, p1.y);\n                p2 = new fabric.Point(p2.x, p2.y);\n                p1.x -= width;\n                p2.x += width;\n            }\n            ctx.moveTo(p1.x, p1.y);\n            for(i = 1, len = this._points.length; i < len; i++){\n                // we pick the point between pi + 1 & pi + 2 as the\n                // end point and p1 as our control point.\n                this._drawSegment(ctx, p1, p2);\n                p1 = this._points[i];\n                p2 = this._points[i + 1];\n            }\n            // Draw last line as a straight line while\n            // we wait for the next point to be able to calculate\n            // the bezier control point\n            ctx.lineTo(p1.x, p1.y);\n            ctx.stroke();\n            ctx.restore();\n        },\n        /**\n     * Converts points to SVG path\n     * @param {Array} points Array of points\n     * @return {(string|number)[][]} SVG path commands\n     */ convertPointsToSVGPath: function(points) {\n            var correction = this.width / 1000;\n            return fabric.util.getSmoothPathFromPoints(points, correction);\n        },\n        /**\n     * @private\n     * @param {(string|number)[][]} pathData SVG path commands\n     * @returns {boolean}\n     */ _isEmptySVGPath: function(pathData) {\n            var pathString = fabric.util.joinPath(pathData);\n            return pathString === \"M 0 0 Q 0 0 0 0 L 0 0\";\n        },\n        /**\n     * Creates fabric.Path object to add on canvas\n     * @param {(string|number)[][]} pathData Path data\n     * @return {fabric.Path} Path to add on canvas\n     */ createPath: function(pathData) {\n            var path = new fabric.Path(pathData, {\n                fill: null,\n                stroke: this.color,\n                strokeWidth: this.width,\n                strokeLineCap: this.strokeLineCap,\n                strokeMiterLimit: this.strokeMiterLimit,\n                strokeLineJoin: this.strokeLineJoin,\n                strokeDashArray: this.strokeDashArray\n            });\n            if (this.shadow) {\n                this.shadow.affectStroke = true;\n                path.shadow = new fabric.Shadow(this.shadow);\n            }\n            return path;\n        },\n        /**\n     * Decimate points array with the decimate value\n     */ decimatePoints: function(points, distance) {\n            if (points.length <= 2) {\n                return points;\n            }\n            var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2), i, l = points.length - 1, lastPoint = points[0], newPoints = [\n                lastPoint\n            ], cDistance;\n            for(i = 1; i < l - 1; i++){\n                cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);\n                if (cDistance >= adjustedDistance) {\n                    lastPoint = points[i];\n                    newPoints.push(lastPoint);\n                }\n            }\n            /**\n       * Add the last point from the original line to the end of the array.\n       * This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\n       */ newPoints.push(points[l]);\n            return newPoints;\n        },\n        /**\n     * On mouseup after drawing the path on contextTop canvas\n     * we use the points captured to create an new fabric path object\n     * and add it to the fabric canvas.\n     */ _finalizeAndAddPath: function() {\n            var ctx = this.canvas.contextTop;\n            ctx.closePath();\n            if (this.decimate) {\n                this._points = this.decimatePoints(this._points, this.decimate);\n            }\n            var pathData = this.convertPointsToSVGPath(this._points);\n            if (this._isEmptySVGPath(pathData)) {\n                // do not create 0 width/height paths, as they are\n                // rendered inconsistently across browsers\n                // Firefox 4, for example, renders a dot,\n                // whereas Chrome 10 renders nothing\n                this.canvas.requestRenderAll();\n                return;\n            }\n            var path = this.createPath(pathData);\n            this.canvas.clearContext(this.canvas.contextTop);\n            this.canvas.fire(\"before:path:created\", {\n                path: path\n            });\n            this.canvas.add(path);\n            this.canvas.requestRenderAll();\n            path.setCoords();\n            this._resetShadow();\n            // fire event 'path' created\n            this.canvas.fire(\"path:created\", {\n                path: path\n            });\n        }\n    });\n})();\n/**\n * CircleBrush class\n * @class fabric.CircleBrush\n */ fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n    /**\n   * Width of a brush\n   * @type Number\n   * @default\n   */ width: 10,\n    /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.CircleBrush} Instance of a circle brush\n   */ initialize: function(canvas) {\n        this.canvas = canvas;\n        this.points = [];\n    },\n    /**\n   * Invoked inside on mouse down and mouse move\n   * @param {Object} pointer\n   */ drawDot: function(pointer) {\n        var point = this.addPoint(pointer), ctx = this.canvas.contextTop;\n        this._saveAndTransform(ctx);\n        this.dot(ctx, point);\n        ctx.restore();\n    },\n    dot: function(ctx, point) {\n        ctx.fillStyle = point.fill;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n        ctx.closePath();\n        ctx.fill();\n    },\n    /**\n   * Invoked on mouse down\n   */ onMouseDown: function(pointer) {\n        this.points.length = 0;\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._setShadow();\n        this.drawDot(pointer);\n    },\n    /**\n   * Render the full state of the brush\n   * @private\n   */ _render: function() {\n        var ctx = this.canvas.contextTop, i, len, points = this.points;\n        this._saveAndTransform(ctx);\n        for(i = 0, len = points.length; i < len; i++){\n            this.dot(ctx, points[i]);\n        }\n        ctx.restore();\n    },\n    /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */ onMouseMove: function(pointer) {\n        if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n            return;\n        }\n        if (this.needsFullRender()) {\n            this.canvas.clearContext(this.canvas.contextTop);\n            this.addPoint(pointer);\n            this._render();\n        } else {\n            this.drawDot(pointer);\n        }\n    },\n    /**\n   * Invoked on mouse up\n   */ onMouseUp: function() {\n        var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\n        this.canvas.renderOnAddRemove = false;\n        var circles = [];\n        for(i = 0, len = this.points.length; i < len; i++){\n            var point = this.points[i], circle = new fabric.Circle({\n                radius: point.radius,\n                left: point.x,\n                top: point.y,\n                originX: \"center\",\n                originY: \"center\",\n                fill: point.fill\n            });\n            this.shadow && (circle.shadow = new fabric.Shadow(this.shadow));\n            circles.push(circle);\n        }\n        var group = new fabric.Group(circles);\n        group.canvas = this.canvas;\n        this.canvas.fire(\"before:path:created\", {\n            path: group\n        });\n        this.canvas.add(group);\n        this.canvas.fire(\"path:created\", {\n            path: group\n        });\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._resetShadow();\n        this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n        this.canvas.requestRenderAll();\n    },\n    /**\n   * @param {Object} pointer\n   * @return {fabric.Point} Just added pointer point\n   */ addPoint: function(pointer) {\n        var pointerPoint = new fabric.Point(pointer.x, pointer.y), circleRadius = fabric.util.getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2, circleColor = new fabric.Color(this.color).setAlpha(fabric.util.getRandomInt(0, 100) / 100).toRgba();\n        pointerPoint.radius = circleRadius;\n        pointerPoint.fill = circleColor;\n        this.points.push(pointerPoint);\n        return pointerPoint;\n    }\n});\n/**\n * SprayBrush class\n * @class fabric.SprayBrush\n */ fabric.SprayBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n    /**\n   * Width of a spray\n   * @type Number\n   * @default\n   */ width: 10,\n    /**\n   * Density of a spray (number of dots per chunk)\n   * @type Number\n   * @default\n   */ density: 20,\n    /**\n   * Width of spray dots\n   * @type Number\n   * @default\n   */ dotWidth: 1,\n    /**\n   * Width variance of spray dots\n   * @type Number\n   * @default\n   */ dotWidthVariance: 1,\n    /**\n   * Whether opacity of a dot should be random\n   * @type Boolean\n   * @default\n   */ randomOpacity: false,\n    /**\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\n   * @type Boolean\n   * @default\n   */ optimizeOverlapping: true,\n    /**\n   * Constructor\n   * @param {fabric.Canvas} canvas\n   * @return {fabric.SprayBrush} Instance of a spray brush\n   */ initialize: function(canvas) {\n        this.canvas = canvas;\n        this.sprayChunks = [];\n    },\n    /**\n   * Invoked on mouse down\n   * @param {Object} pointer\n   */ onMouseDown: function(pointer) {\n        this.sprayChunks.length = 0;\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._setShadow();\n        this.addSprayChunk(pointer);\n        this.render(this.sprayChunkPoints);\n    },\n    /**\n   * Invoked on mouse move\n   * @param {Object} pointer\n   */ onMouseMove: function(pointer) {\n        if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n            return;\n        }\n        this.addSprayChunk(pointer);\n        this.render(this.sprayChunkPoints);\n    },\n    /**\n   * Invoked on mouse up\n   */ onMouseUp: function() {\n        var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n        this.canvas.renderOnAddRemove = false;\n        var rects = [];\n        for(var i = 0, ilen = this.sprayChunks.length; i < ilen; i++){\n            var sprayChunk = this.sprayChunks[i];\n            for(var j = 0, jlen = sprayChunk.length; j < jlen; j++){\n                var rect = new fabric.Rect({\n                    width: sprayChunk[j].width,\n                    height: sprayChunk[j].width,\n                    left: sprayChunk[j].x + 1,\n                    top: sprayChunk[j].y + 1,\n                    originX: \"center\",\n                    originY: \"center\",\n                    fill: this.color\n                });\n                rects.push(rect);\n            }\n        }\n        if (this.optimizeOverlapping) {\n            rects = this._getOptimizedRects(rects);\n        }\n        var group = new fabric.Group(rects);\n        this.shadow && group.set(\"shadow\", new fabric.Shadow(this.shadow));\n        this.canvas.fire(\"before:path:created\", {\n            path: group\n        });\n        this.canvas.add(group);\n        this.canvas.fire(\"path:created\", {\n            path: group\n        });\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._resetShadow();\n        this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n        this.canvas.requestRenderAll();\n    },\n    /**\n   * @private\n   * @param {Array} rects\n   */ _getOptimizedRects: function(rects) {\n        // avoid creating duplicate rects at the same coordinates\n        var uniqueRects = {}, key, i, len;\n        for(i = 0, len = rects.length; i < len; i++){\n            key = rects[i].left + \"\" + rects[i].top;\n            if (!uniqueRects[key]) {\n                uniqueRects[key] = rects[i];\n            }\n        }\n        var uniqueRectsArray = [];\n        for(key in uniqueRects){\n            uniqueRectsArray.push(uniqueRects[key]);\n        }\n        return uniqueRectsArray;\n    },\n    /**\n   * Render new chunk of spray brush\n   */ render: function(sprayChunk) {\n        var ctx = this.canvas.contextTop, i, len;\n        ctx.fillStyle = this.color;\n        this._saveAndTransform(ctx);\n        for(i = 0, len = sprayChunk.length; i < len; i++){\n            var point = sprayChunk[i];\n            if (typeof point.opacity !== \"undefined\") {\n                ctx.globalAlpha = point.opacity;\n            }\n            ctx.fillRect(point.x, point.y, point.width, point.width);\n        }\n        ctx.restore();\n    },\n    /**\n   * Render all spray chunks\n   */ _render: function() {\n        var ctx = this.canvas.contextTop, i, ilen;\n        ctx.fillStyle = this.color;\n        this._saveAndTransform(ctx);\n        for(i = 0, ilen = this.sprayChunks.length; i < ilen; i++){\n            this.render(this.sprayChunks[i]);\n        }\n        ctx.restore();\n    },\n    /**\n   * @param {Object} pointer\n   */ addSprayChunk: function(pointer) {\n        this.sprayChunkPoints = [];\n        var x, y, width, radius = this.width / 2, i;\n        for(i = 0; i < this.density; i++){\n            x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n            y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n            if (this.dotWidthVariance) {\n                width = fabric.util.getRandomInt(// bottom clamp width to 1\n                Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance);\n            } else {\n                width = this.dotWidth;\n            }\n            var point = new fabric.Point(x, y);\n            point.width = width;\n            if (this.randomOpacity) {\n                point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n            }\n            this.sprayChunkPoints.push(point);\n        }\n        this.sprayChunks.push(this.sprayChunkPoints);\n    }\n});\n/**\n * PatternBrush class\n * @class fabric.PatternBrush\n * @extends fabric.BaseBrush\n */ fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n    getPatternSrc: function() {\n        var dotWidth = 20, dotDistance = 5, patternCanvas = fabric.util.createCanvasElement(), patternCtx = patternCanvas.getContext(\"2d\");\n        patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n        patternCtx.fillStyle = this.color;\n        patternCtx.beginPath();\n        patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n        patternCtx.closePath();\n        patternCtx.fill();\n        return patternCanvas;\n    },\n    getPatternSrcFunction: function() {\n        return String(this.getPatternSrc).replace(\"this.color\", '\"' + this.color + '\"');\n    },\n    /**\n   * Creates \"pattern\" instance property\n   * @param {CanvasRenderingContext2D} ctx\n   */ getPattern: function(ctx) {\n        return ctx.createPattern(this.source || this.getPatternSrc(), \"repeat\");\n    },\n    /**\n   * Sets brush styles\n   * @param {CanvasRenderingContext2D} ctx\n   */ _setBrushStyles: function(ctx) {\n        this.callSuper(\"_setBrushStyles\", ctx);\n        ctx.strokeStyle = this.getPattern(ctx);\n    },\n    /**\n   * Creates path\n   */ createPath: function(pathData) {\n        var path = this.callSuper(\"createPath\", pathData), topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n        path.stroke = new fabric.Pattern({\n            source: this.source || this.getPatternSrcFunction(),\n            offsetX: -topLeft.x,\n            offsetY: -topLeft.y\n        });\n        return path;\n    }\n});\n(function() {\n    var getPointer = fabric.util.getPointer, degreesToRadians = fabric.util.degreesToRadians, isTouchEvent = fabric.util.isTouchEvent;\n    /**\n   * Canvas class\n   * @class fabric.Canvas\n   * @extends fabric.StaticCanvas\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\n   * @see {@link fabric.Canvas#initialize} for constructor definition\n   *\n   * @fires object:modified at the end of a transform or any change when statefull is true\n   * @fires object:rotating while an object is being rotated from the control\n   * @fires object:scaling while an object is being scaled by controls\n   * @fires object:moving while an object is being dragged\n   * @fires object:skewing while an object is being skewed from the controls\n   *\n   * @fires before:transform before a transform is is started\n   * @fires before:selection:cleared\n   * @fires selection:cleared\n   * @fires selection:updated\n   * @fires selection:created\n   *\n   * @fires path:created after a drawing operation ends and the path is added\n   * @fires mouse:down\n   * @fires mouse:move\n   * @fires mouse:up\n   * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\n   * @fires mouse:move:before on mouse move, before the inner fabric logic runs\n   * @fires mouse:up:before on mouse up, before the inner fabric logic runs\n   * @fires mouse:over\n   * @fires mouse:out\n   * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop:before before drop event. same native event. This is added to handle edge cases\n   * @fires drop\n   * @fires after:render at the end of the render process, receives the context in the callback\n   * @fires before:render at start the render process, receives the context in the callback\n   *\n   */ fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n        /**\n     * Constructor\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */ initialize: function(el, options) {\n            options || (options = {});\n            this.renderAndResetBound = this.renderAndReset.bind(this);\n            this.requestRenderAllBound = this.requestRenderAll.bind(this);\n            this._initStatic(el, options);\n            this._initInteractive();\n            this._createCacheCanvas();\n        },\n        /**\n     * When true, objects can be transformed by one side (unproportionally)\n     * when dragged on the corners that normally would not do that.\n     * @type Boolean\n     * @default\n     * @since fabric 4.0 // changed name and default value\n     */ uniformScaling: true,\n        /**\n     * Indicates which key switches uniform scaling.\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled.\n     * totally wrong named. this sounds like `uniform scaling`\n     * if Canvas.uniformScaling is true, pressing this will set it to false\n     * and viceversa.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */ uniScaleKey: \"shiftKey\",\n        /**\n     * When true, objects use center point as the origin of scale transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */ centeredScaling: false,\n        /**\n     * When true, objects use center point as the origin of rotate transformation.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */ centeredRotation: false,\n        /**\n     * Indicates which key enable centered Transform\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */ centeredKey: \"altKey\",\n        /**\n     * Indicates which key enable alternate action on corner\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled feature disabled.\n     * @since 1.6.2\n     * @type String\n     * @default\n     */ altActionKey: \"shiftKey\",\n        /**\n     * Indicates that canvas is interactive. This property should not be changed.\n     * @type Boolean\n     * @default\n     */ interactive: true,\n        /**\n     * Indicates whether group selection should be enabled\n     * @type Boolean\n     * @default\n     */ selection: true,\n        /**\n     * Indicates which key or keys enable multiple click selection\n     * Pass value as a string or array of strings\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * If `null` or empty or containing any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.2\n     * @type String|Array\n     * @default\n     */ selectionKey: \"shiftKey\",\n        /**\n     * Indicates which key enable alternative selection\n     * in case of target overlapping with active object\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\n     * For a series of reason that come from the general expectations on how\n     * things should work, this feature works only for preserveObjectStacking true.\n     * If `null` or 'none' or any other string that is not a modifier key\n     * feature is disabled.\n     * @since 1.6.5\n     * @type null|String\n     * @default\n     */ altSelectionKey: null,\n        /**\n     * Color of selection\n     * @type String\n     * @default\n     */ selectionColor: \"rgba(100, 100, 255, 0.3)\",\n        /**\n     * Default dash array pattern\n     * If not empty the selection border is dashed\n     * @type Array\n     */ selectionDashArray: [],\n        /**\n     * Color of the border of selection (usually slightly darker than color of selection itself)\n     * @type String\n     * @default\n     */ selectionBorderColor: \"rgba(255, 255, 255, 0.3)\",\n        /**\n     * Width of a line used in object/group selection\n     * @type Number\n     * @default\n     */ selectionLineWidth: 1,\n        /**\n     * Select only shapes that are fully contained in the dragged selection rectangle.\n     * @type Boolean\n     * @default\n     */ selectionFullyContained: false,\n        /**\n     * Default cursor value used when hovering over an object on canvas\n     * @type String\n     * @default\n     */ hoverCursor: \"move\",\n        /**\n     * Default cursor value used when moving an object on canvas\n     * @type String\n     * @default\n     */ moveCursor: \"move\",\n        /**\n     * Default cursor value used for the entire canvas\n     * @type String\n     * @default\n     */ defaultCursor: \"default\",\n        /**\n     * Cursor value used during free drawing\n     * @type String\n     * @default\n     */ freeDrawingCursor: \"crosshair\",\n        /**\n     * Cursor value used for disabled elements ( corners with disabled action )\n     * @type String\n     * @since 2.0.0\n     * @default\n     */ notAllowedCursor: \"not-allowed\",\n        /**\n     * Default element class that's given to wrapper (div) element of canvas\n     * @type String\n     * @default\n     */ containerClass: \"canvas-container\",\n        /**\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\n     * @type Boolean\n     * @default\n     */ perPixelTargetFind: false,\n        /**\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\n     * @type Number\n     * @default\n     */ targetFindTolerance: 0,\n        /**\n     * When true, target detection is skipped. Target detection will return always undefined.\n     * click selection won't work anymore, events will fire with no targets.\n     * if something is selected before setting it to true, it will be deselected at the first click.\n     * area selection will still work. check the `selection` property too.\n     * if you deactivate both, you should look into staticCanvas.\n     * @type Boolean\n     * @default\n     */ skipTargetFind: false,\n        /**\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\n     * After mousedown, mousemove creates a shape,\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\n     * @type Boolean\n     * @default\n     */ isDrawingMode: false,\n        /**\n     * Indicates whether objects should remain in current stack position when selected.\n     * When false objects are brought to top and rendered as part of the selection group\n     * @type Boolean\n     * @default\n     */ preserveObjectStacking: false,\n        /**\n     * Indicates the angle that an object will lock to while rotating.\n     * @type Number\n     * @since 1.6.7\n     * @default\n     */ snapAngle: 0,\n        /**\n     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\n     * When `null`, the snapThreshold will default to the snapAngle.\n     * @type null|Number\n     * @since 1.6.7\n     * @default\n     */ snapThreshold: null,\n        /**\n     * Indicates if the right click on canvas can output the context menu or not\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */ stopContextMenu: false,\n        /**\n     * Indicates if the canvas can fire right click events\n     * @type Boolean\n     * @since 1.6.5\n     * @default\n     */ fireRightClick: false,\n        /**\n     * Indicates if the canvas can fire middle click events\n     * @type Boolean\n     * @since 1.7.8\n     * @default\n     */ fireMiddleClick: false,\n        /**\n     * Keep track of the subTargets for Mouse Events\n     * @type fabric.Object[]\n     */ targets: [],\n        /**\n     * When the option is enabled, PointerEvent is used instead of MouseEvent.\n     * @type Boolean\n     * @default\n     */ enablePointerEvents: false,\n        /**\n     * Keep track of the hovered target\n     * @type fabric.Object\n     * @private\n     */ _hoveredTarget: null,\n        /**\n     * hold the list of nested targets hovered\n     * @type fabric.Object[]\n     * @private\n     */ _hoveredTargets: [],\n        /**\n     * @private\n     */ _initInteractive: function() {\n            this._currentTransform = null;\n            this._groupSelector = null;\n            this._initWrapperElement();\n            this._createUpperCanvas();\n            this._initEventListeners();\n            this._initRetinaScaling();\n            this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n            this.calcOffset();\n        },\n        /**\n     * Divides objects in two groups, one to render immediately\n     * and one to render as activeGroup.\n     * @return {Array} objects to render immediately and pushes the other in the activeGroup.\n     */ _chooseObjectsToRender: function() {\n            var activeObjects = this.getActiveObjects(), object, objsToRender, activeGroupObjects;\n            if (activeObjects.length > 0 && !this.preserveObjectStacking) {\n                objsToRender = [];\n                activeGroupObjects = [];\n                for(var i = 0, length = this._objects.length; i < length; i++){\n                    object = this._objects[i];\n                    if (activeObjects.indexOf(object) === -1) {\n                        objsToRender.push(object);\n                    } else {\n                        activeGroupObjects.push(object);\n                    }\n                }\n                if (activeObjects.length > 1) {\n                    this._activeObject._objects = activeGroupObjects;\n                }\n                objsToRender.push.apply(objsToRender, activeGroupObjects);\n            } else {\n                objsToRender = this._objects;\n            }\n            return objsToRender;\n        },\n        /**\n     * Renders both the top canvas and the secondary container canvas.\n     * @return {fabric.Canvas} instance\n     * @chainable\n     */ renderAll: function() {\n            if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n                this.clearContext(this.contextTop);\n                this.contextTopDirty = false;\n            }\n            if (this.hasLostContext) {\n                this.renderTopLayer(this.contextTop);\n                this.hasLostContext = false;\n            }\n            var canvasToDrawOn = this.contextContainer;\n            this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\n            return this;\n        },\n        renderTopLayer: function(ctx) {\n            ctx.save();\n            if (this.isDrawingMode && this._isCurrentlyDrawing) {\n                this.freeDrawingBrush && this.freeDrawingBrush._render();\n                this.contextTopDirty = true;\n            }\n            // we render the top context - last object\n            if (this.selection && this._groupSelector) {\n                this._drawSelection(ctx);\n                this.contextTopDirty = true;\n            }\n            ctx.restore();\n        },\n        /**\n     * Method to render only the top canvas.\n     * Also used to render the group selection box.\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ renderTop: function() {\n            var ctx = this.contextTop;\n            this.clearContext(ctx);\n            this.renderTopLayer(ctx);\n            this.fire(\"after:render\");\n            return this;\n        },\n        /**\n     * @private\n     */ _normalizePointer: function(object, pointer) {\n            var m = object.calcTransformMatrix(), invertedM = fabric.util.invertTransform(m), vptPointer = this.restorePointerVpt(pointer);\n            return fabric.util.transformPoint(vptPointer, invertedM);\n        },\n        /**\n     * Returns true if object is transparent at a certain location\n     * @param {fabric.Object} target Object to check\n     * @param {Number} x Left coordinate\n     * @param {Number} y Top coordinate\n     * @return {Boolean}\n     */ isTargetTransparent: function(target, x, y) {\n            // in case the target is the activeObject, we cannot execute this optimization\n            // because we need to draw controls too.\n            if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\n                var normalizedPointer = this._normalizePointer(target, {\n                    x: x,\n                    y: y\n                }), targetRelativeX = Math.max(target.cacheTranslationX + normalizedPointer.x * target.zoomX, 0), targetRelativeY = Math.max(target.cacheTranslationY + normalizedPointer.y * target.zoomY, 0);\n                var isTransparent = fabric.util.isTransparent(target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\n                return isTransparent;\n            }\n            var ctx = this.contextCache, originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\n            target.selectionBackgroundColor = \"\";\n            this.clearContext(ctx);\n            ctx.save();\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n            target.render(ctx);\n            ctx.restore();\n            target.selectionBackgroundColor = originalColor;\n            var isTransparent = fabric.util.isTransparent(ctx, x, y, this.targetFindTolerance);\n            return isTransparent;\n        },\n        /**\n     * takes an event and determines if selection key has been pressed\n     * @private\n     * @param {Event} e Event object\n     */ _isSelectionKeyPressed: function(e) {\n            var selectionKeyPressed = false;\n            if (Array.isArray(this.selectionKey)) {\n                selectionKeyPressed = !!this.selectionKey.find(function(key) {\n                    return e[key] === true;\n                });\n            } else {\n                selectionKeyPressed = e[this.selectionKey];\n            }\n            return selectionKeyPressed;\n        },\n        /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */ _shouldClearSelection: function(e, target) {\n            var activeObjects = this.getActiveObjects(), activeObject = this._activeObject;\n            return !target || target && activeObject && activeObjects.length > 1 && activeObjects.indexOf(target) === -1 && activeObject !== target && !this._isSelectionKeyPressed(e) || target && !target.evented || target && !target.selectable && activeObject && activeObject !== target;\n        },\n        /**\n     * centeredScaling from object can't override centeredScaling from canvas.\n     * this should be fixed, since object setting should take precedence over canvas.\n     * also this should be something that will be migrated in the control properties.\n     * as ability to define the origin of the transformation that the control provide.\n     * @private\n     * @param {fabric.Object} target\n     * @param {String} action\n     * @param {Boolean} altKey\n     */ _shouldCenterTransform: function(target, action, altKey) {\n            if (!target) {\n                return;\n            }\n            var centerTransform;\n            if (action === \"scale\" || action === \"scaleX\" || action === \"scaleY\" || action === \"resizing\") {\n                centerTransform = this.centeredScaling || target.centeredScaling;\n            } else if (action === \"rotate\") {\n                centerTransform = this.centeredRotation || target.centeredRotation;\n            }\n            return centerTransform ? !altKey : altKey;\n        },\n        /**\n     * should disappear before release 4.0\n     * @private\n     */ _getOriginFromCorner: function(target, corner) {\n            var origin = {\n                x: target.originX,\n                y: target.originY\n            };\n            if (corner === \"ml\" || corner === \"tl\" || corner === \"bl\") {\n                origin.x = \"right\";\n            } else if (corner === \"mr\" || corner === \"tr\" || corner === \"br\") {\n                origin.x = \"left\";\n            }\n            if (corner === \"tl\" || corner === \"mt\" || corner === \"tr\") {\n                origin.y = \"bottom\";\n            } else if (corner === \"bl\" || corner === \"mb\" || corner === \"br\") {\n                origin.y = \"top\";\n            }\n            return origin;\n        },\n        /**\n     * @private\n     * @param {Boolean} alreadySelected true if target is already selected\n     * @param {String} corner a string representing the corner ml, mr, tl ...\n     * @param {Event} e Event object\n     * @param {fabric.Object} [target] inserted back to help overriding. Unused\n     */ _getActionFromCorner: function(alreadySelected, corner, e, target) {\n            if (!corner || !alreadySelected) {\n                return \"drag\";\n            }\n            var control = target.controls[corner];\n            return control.getActionName(e, control, target);\n        },\n        /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */ _setupCurrentTransform: function(e, target, alreadySelected) {\n            if (!target) {\n                return;\n            }\n            var pointer = this.getPointer(e), corner = target.__corner, control = target.controls[corner], actionHandler = alreadySelected && corner ? control.getActionHandler(e, target, control) : fabric.controlsUtils.dragHandler, action = this._getActionFromCorner(alreadySelected, corner, e, target), origin = this._getOriginFromCorner(target, corner), altKey = e[this.centeredKey], transform = {\n                target: target,\n                action: action,\n                actionHandler: actionHandler,\n                corner: corner,\n                scaleX: target.scaleX,\n                scaleY: target.scaleY,\n                skewX: target.skewX,\n                skewY: target.skewY,\n                // used by transation\n                offsetX: pointer.x - target.left,\n                offsetY: pointer.y - target.top,\n                originX: origin.x,\n                originY: origin.y,\n                ex: pointer.x,\n                ey: pointer.y,\n                lastX: pointer.x,\n                lastY: pointer.y,\n                // unsure they are useful anymore.\n                // left: target.left,\n                // top: target.top,\n                theta: degreesToRadians(target.angle),\n                // end of unsure\n                width: target.width * target.scaleX,\n                shiftKey: e.shiftKey,\n                altKey: altKey,\n                original: fabric.util.saveObjectTransform(target)\n            };\n            if (this._shouldCenterTransform(target, action, altKey)) {\n                transform.originX = \"center\";\n                transform.originY = \"center\";\n            }\n            transform.original.originX = origin.x;\n            transform.original.originY = origin.y;\n            this._currentTransform = transform;\n            this._beforeTransform(e);\n        },\n        /**\n     * Set the cursor type of the canvas element\n     * @param {String} value Cursor type of the canvas element.\n     * @see http://www.w3.org/TR/css3-ui/#cursor\n     */ setCursor: function(value) {\n            this.upperCanvasEl.style.cursor = value;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx to draw the selection on\n     */ _drawSelection: function(ctx) {\n            var selector = this._groupSelector, viewportStart = new fabric.Point(selector.ex, selector.ey), start = fabric.util.transformPoint(viewportStart, this.viewportTransform), viewportExtent = new fabric.Point(selector.ex + selector.left, selector.ey + selector.top), extent = fabric.util.transformPoint(viewportExtent, this.viewportTransform), minX = Math.min(start.x, extent.x), minY = Math.min(start.y, extent.y), maxX = Math.max(start.x, extent.x), maxY = Math.max(start.y, extent.y), strokeOffset = this.selectionLineWidth / 2;\n            if (this.selectionColor) {\n                ctx.fillStyle = this.selectionColor;\n                ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n            }\n            if (!this.selectionLineWidth || !this.selectionBorderColor) {\n                return;\n            }\n            ctx.lineWidth = this.selectionLineWidth;\n            ctx.strokeStyle = this.selectionBorderColor;\n            minX += strokeOffset;\n            minY += strokeOffset;\n            maxX -= strokeOffset;\n            maxY -= strokeOffset;\n            // selection border\n            fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\n            ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n        },\n        /**\n     * Method that determines what object we are clicking on\n     * the skipGroup parameter is for internal use, is needed for shift+click action\n     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\n     * or the outside part of the corner.\n     * @param {Event} e mouse event\n     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\n     * @return {fabric.Object} the target found\n     */ findTarget: function(e, skipGroup) {\n            if (this.skipTargetFind) {\n                return;\n            }\n            var ignoreZoom = true, pointer = this.getPointer(e, ignoreZoom), activeObject = this._activeObject, aObjects = this.getActiveObjects(), activeTarget, activeTargetSubs, isTouch = isTouchEvent(e), shouldLookForActive = aObjects.length > 1 && !skipGroup || aObjects.length === 1;\n            // first check current group (if one exists)\n            // active group does not check sub targets like normal groups.\n            // if active group just exits.\n            this.targets = [];\n            // if we hit the corner of an activeObject, let's return that.\n            if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {\n                return activeObject;\n            }\n            if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([\n                activeObject\n            ], pointer)) {\n                return activeObject;\n            }\n            if (aObjects.length === 1 && activeObject === this._searchPossibleTargets([\n                activeObject\n            ], pointer)) {\n                if (!this.preserveObjectStacking) {\n                    return activeObject;\n                } else {\n                    activeTarget = activeObject;\n                    activeTargetSubs = this.targets;\n                    this.targets = [];\n                }\n            }\n            var target = this._searchPossibleTargets(this._objects, pointer);\n            if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\n                target = activeTarget;\n                this.targets = activeTargetSubs;\n            }\n            return target;\n        },\n        /**\n     * Checks point is inside the object.\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @param {fabric.Object} obj Object to test against\n     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\n     * @return {Boolean} true if point is contained within an area of given object\n     * @private\n     */ _checkTarget: function(pointer, obj, globalPointer) {\n            if (obj && obj.visible && obj.evented && // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n            // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n            obj.containsPoint(pointer)) {\n                if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n                    var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\n                    if (!isTransparent) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        },\n        /**\n     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\n     * @param {Array} [objects] objects array to look into\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\n     * @return {fabric.Object} object that contains pointer\n     * @private\n     */ _searchPossibleTargets: function(objects, pointer) {\n            // Cache all targets where their bounding box contains point.\n            var target, i = objects.length, subTarget;\n            // Do not check for currently grouped objects, since we check the parent group itself.\n            // until we call this function specifically to search inside the activeGroup\n            while(i--){\n                var objToCheck = objects[i];\n                var pointerToUse = objToCheck.group ? this._normalizePointer(objToCheck.group, pointer) : pointer;\n                if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\n                    target = objects[i];\n                    if (target.subTargetCheck && target instanceof fabric.Group) {\n                        subTarget = this._searchPossibleTargets(target._objects, pointer);\n                        subTarget && this.targets.push(subTarget);\n                    }\n                    break;\n                }\n            }\n            return target;\n        },\n        /**\n     * Returns pointer coordinates without the effect of the viewport\n     * @param {Object} pointer with \"x\" and \"y\" number values\n     * @return {Object} object with \"x\" and \"y\" number values\n     */ restorePointerVpt: function(pointer) {\n            return fabric.util.transformPoint(pointer, fabric.util.invertTransform(this.viewportTransform));\n        },\n        /**\n     * Returns pointer coordinates relative to canvas.\n     * Can return coordinates with or without viewportTransform.\n     * ignoreZoom false gives back coordinates that represent\n     * the point clicked on canvas element.\n     * ignoreZoom true gives back coordinates after being processed\n     * by the viewportTransform ( sort of coordinates of what is displayed\n     * on the canvas where you are clicking.\n     * ignoreZoom true = HTMLElement coordinates relative to top,left\n     * ignoreZoom false, default = fabric space coordinates, the same used for shape position\n     * To interact with your shapes top and left you want to use ignoreZoom true\n     * most of the time, while ignoreZoom false will give you coordinates\n     * compatible with the object.oCoords system.\n     * of the time.\n     * @param {Event} e\n     * @param {Boolean} ignoreZoom\n     * @return {Object} object with \"x\" and \"y\" number values\n     */ getPointer: function(e, ignoreZoom) {\n            // return cached values if we are in the event processing chain\n            if (this._absolutePointer && !ignoreZoom) {\n                return this._absolutePointer;\n            }\n            if (this._pointer && ignoreZoom) {\n                return this._pointer;\n            }\n            var pointer = getPointer(e), upperCanvasEl = this.upperCanvasEl, bounds = upperCanvasEl.getBoundingClientRect(), boundsWidth = bounds.width || 0, boundsHeight = bounds.height || 0, cssScale;\n            if (!boundsWidth || !boundsHeight) {\n                if (\"top\" in bounds && \"bottom\" in bounds) {\n                    boundsHeight = Math.abs(bounds.top - bounds.bottom);\n                }\n                if (\"right\" in bounds && \"left\" in bounds) {\n                    boundsWidth = Math.abs(bounds.right - bounds.left);\n                }\n            }\n            this.calcOffset();\n            pointer.x = pointer.x - this._offset.left;\n            pointer.y = pointer.y - this._offset.top;\n            if (!ignoreZoom) {\n                pointer = this.restorePointerVpt(pointer);\n            }\n            var retinaScaling = this.getRetinaScaling();\n            if (retinaScaling !== 1) {\n                pointer.x /= retinaScaling;\n                pointer.y /= retinaScaling;\n            }\n            if (boundsWidth === 0 || boundsHeight === 0) {\n                // If bounds are not available (i.e. not visible), do not apply scale.\n                cssScale = {\n                    width: 1,\n                    height: 1\n                };\n            } else {\n                cssScale = {\n                    width: upperCanvasEl.width / boundsWidth,\n                    height: upperCanvasEl.height / boundsHeight\n                };\n            }\n            return {\n                x: pointer.x * cssScale.width,\n                y: pointer.y * cssScale.height\n            };\n        },\n        /**\n     * @private\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\n     */ _createUpperCanvas: function() {\n            var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, \"\"), lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;\n            // there is no need to create a new upperCanvas element if we have already one.\n            if (upperCanvasEl) {\n                upperCanvasEl.className = \"\";\n            } else {\n                upperCanvasEl = this._createCanvasElement();\n                this.upperCanvasEl = upperCanvasEl;\n            }\n            fabric.util.addClass(upperCanvasEl, \"upper-canvas \" + lowerCanvasClass);\n            this.wrapperEl.appendChild(upperCanvasEl);\n            this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);\n            this._applyCanvasStyle(upperCanvasEl);\n            this.contextTop = upperCanvasEl.getContext(\"2d\");\n        },\n        /**\n     * Returns context of top canvas where interactions are drawn\n     * @returns {CanvasRenderingContext2D}\n     */ getTopContext: function() {\n            return this.contextTop;\n        },\n        /**\n     * @private\n     */ _createCacheCanvas: function() {\n            this.cacheCanvasEl = this._createCanvasElement();\n            this.cacheCanvasEl.setAttribute(\"width\", this.width);\n            this.cacheCanvasEl.setAttribute(\"height\", this.height);\n            this.contextCache = this.cacheCanvasEl.getContext(\"2d\");\n        },\n        /**\n     * @private\n     */ _initWrapperElement: function() {\n            this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, \"div\", {\n                \"class\": this.containerClass\n            });\n            fabric.util.setStyle(this.wrapperEl, {\n                width: this.width + \"px\",\n                height: this.height + \"px\",\n                position: \"relative\"\n            });\n            fabric.util.makeElementUnselectable(this.wrapperEl);\n        },\n        /**\n     * @private\n     * @param {HTMLElement} element canvas element to apply styles on\n     */ _applyCanvasStyle: function(element) {\n            var width = this.width || element.width, height = this.height || element.height;\n            fabric.util.setStyle(element, {\n                position: \"absolute\",\n                width: width + \"px\",\n                height: height + \"px\",\n                left: 0,\n                top: 0,\n                \"touch-action\": this.allowTouchScrolling ? \"manipulation\" : \"none\",\n                \"-ms-touch-action\": this.allowTouchScrolling ? \"manipulation\" : \"none\"\n            });\n            element.width = width;\n            element.height = height;\n            fabric.util.makeElementUnselectable(element);\n        },\n        /**\n     * Copy the entire inline style from one element (fromEl) to another (toEl)\n     * @private\n     * @param {Element} fromEl Element style is copied from\n     * @param {Element} toEl Element copied style is applied to\n     */ _copyCanvasStyle: function(fromEl, toEl) {\n            toEl.style.cssText = fromEl.style.cssText;\n        },\n        /**\n     * Returns context of canvas where object selection is drawn\n     * @return {CanvasRenderingContext2D}\n     */ getSelectionContext: function() {\n            return this.contextTop;\n        },\n        /**\n     * Returns &lt;canvas> element on which object selection is drawn\n     * @return {HTMLCanvasElement}\n     */ getSelectionElement: function() {\n            return this.upperCanvasEl;\n        },\n        /**\n     * Returns currently active object\n     * @return {fabric.Object} active object\n     */ getActiveObject: function() {\n            return this._activeObject;\n        },\n        /**\n     * Returns an array with the current selected objects\n     * @return {fabric.Object} active object\n     */ getActiveObjects: function() {\n            var active = this._activeObject;\n            if (active) {\n                if (active.type === \"activeSelection\" && active._objects) {\n                    return active._objects.slice(0);\n                } else {\n                    return [\n                        active\n                    ];\n                }\n            }\n            return [];\n        },\n        /**\n     * @private\n     * @param {fabric.Object} obj Object that was removed\n     */ _onObjectRemoved: function(obj) {\n            // removing active object should fire \"selection:cleared\" events\n            if (obj === this._activeObject) {\n                this.fire(\"before:selection:cleared\", {\n                    target: obj\n                });\n                this._discardActiveObject();\n                this.fire(\"selection:cleared\", {\n                    target: obj\n                });\n                obj.fire(\"deselected\");\n            }\n            if (obj === this._hoveredTarget) {\n                this._hoveredTarget = null;\n                this._hoveredTargets = [];\n            }\n            this.callSuper(\"_onObjectRemoved\", obj);\n        },\n        /**\n     * @private\n     * Compares the old activeObject with the current one and fires correct events\n     * @param {fabric.Object} obj old activeObject\n     */ _fireSelectionEvents: function(oldObjects, e) {\n            var somethingChanged = false, objects = this.getActiveObjects(), added = [], removed = [];\n            oldObjects.forEach(function(oldObject) {\n                if (objects.indexOf(oldObject) === -1) {\n                    somethingChanged = true;\n                    oldObject.fire(\"deselected\", {\n                        e: e,\n                        target: oldObject\n                    });\n                    removed.push(oldObject);\n                }\n            });\n            objects.forEach(function(object) {\n                if (oldObjects.indexOf(object) === -1) {\n                    somethingChanged = true;\n                    object.fire(\"selected\", {\n                        e: e,\n                        target: object\n                    });\n                    added.push(object);\n                }\n            });\n            if (oldObjects.length > 0 && objects.length > 0) {\n                somethingChanged && this.fire(\"selection:updated\", {\n                    e: e,\n                    selected: added,\n                    deselected: removed\n                });\n            } else if (objects.length > 0) {\n                this.fire(\"selection:created\", {\n                    e: e,\n                    selected: added\n                });\n            } else if (oldObjects.length > 0) {\n                this.fire(\"selection:cleared\", {\n                    e: e,\n                    deselected: removed\n                });\n            }\n        },\n        /**\n     * Sets given object as the only active object on canvas\n     * @param {fabric.Object} object Object to set as an active one\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ setActiveObject: function(object, e) {\n            var currentActives = this.getActiveObjects();\n            this._setActiveObject(object, e);\n            this._fireSelectionEvents(currentActives, e);\n            return this;\n        },\n        /**\n     * This is a private method for now.\n     * This is supposed to be equivalent to setActiveObject but without firing\n     * any event. There is commitment to have this stay this way.\n     * This is the functional part of setActiveObject.\n     * @private\n     * @param {Object} object to set as active\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\n     * @return {Boolean} true if the selection happened\n     */ _setActiveObject: function(object, e) {\n            if (this._activeObject === object) {\n                return false;\n            }\n            if (!this._discardActiveObject(e, object)) {\n                return false;\n            }\n            if (object.onSelect({\n                e: e\n            })) {\n                return false;\n            }\n            this._activeObject = object;\n            return true;\n        },\n        /**\n     * This is a private method for now.\n     * This is supposed to be equivalent to discardActiveObject but without firing\n     * any events. There is commitment to have this stay this way.\n     * This is the functional part of discardActiveObject.\n     * @param {Event} [e] Event (passed along when firing \"object:deselected\")\n     * @param {Object} object to set as active\n     * @return {Boolean} true if the selection happened\n     * @private\n     */ _discardActiveObject: function(e, object) {\n            var obj = this._activeObject;\n            if (obj) {\n                // onDeselect return TRUE to cancel selection;\n                if (obj.onDeselect({\n                    e: e,\n                    object: object\n                })) {\n                    return false;\n                }\n                this._activeObject = null;\n            }\n            return true;\n        },\n        /**\n     * Discards currently active object and fire events. If the function is called by fabric\n     * as a consequence of a mouse event, the event is passed as a parameter and\n     * sent to the fire function for the custom events. When used as a method the\n     * e param does not have any application.\n     * @param {event} e\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ discardActiveObject: function(e) {\n            var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();\n            if (currentActives.length) {\n                this.fire(\"before:selection:cleared\", {\n                    target: activeObject,\n                    e: e\n                });\n            }\n            this._discardActiveObject(e);\n            this._fireSelectionEvents(currentActives, e);\n            return this;\n        },\n        /**\n     * Clears a canvas element and removes all event listeners\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ dispose: function() {\n            var wrapper = this.wrapperEl;\n            this.removeListeners();\n            wrapper.removeChild(this.upperCanvasEl);\n            wrapper.removeChild(this.lowerCanvasEl);\n            this.contextCache = null;\n            this.contextTop = null;\n            [\n                \"upperCanvasEl\",\n                \"cacheCanvasEl\"\n            ].forEach((function(element) {\n                fabric.util.cleanUpJsdomNode(this[element]);\n                this[element] = undefined;\n            }).bind(this));\n            if (wrapper.parentNode) {\n                wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\n            }\n            delete this.wrapperEl;\n            fabric.StaticCanvas.prototype.dispose.call(this);\n            return this;\n        },\n        /**\n     * Clears all contexts (background, main, top) of an instance\n     * @return {fabric.Canvas} thisArg\n     * @chainable\n     */ clear: function() {\n            // this.discardActiveGroup();\n            this.discardActiveObject();\n            this.clearContext(this.contextTop);\n            return this.callSuper(\"clear\");\n        },\n        /**\n     * Draws objects' controls (borders/controls)\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\n     */ drawControls: function(ctx) {\n            var activeObject = this._activeObject;\n            if (activeObject) {\n                activeObject._renderControls(ctx);\n            }\n        },\n        /**\n     * @private\n     */ _toObject: function(instance, methodName, propertiesToInclude) {\n            //If the object is part of the current selection group, it should\n            //be transformed appropriately\n            //i.e. it should be serialised as it would appear if the selection group\n            //were to be destroyed.\n            var originalProperties = this._realizeGroupTransformOnObject(instance), object = this.callSuper(\"_toObject\", instance, methodName, propertiesToInclude);\n            //Undo the damage we did by changing all of its properties\n            this._unwindGroupTransformOnObject(instance, originalProperties);\n            return object;\n        },\n        /**\n     * Realises an object's group transformation on it\n     * @private\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\n     * @returns the original values of instance which were changed\n     */ _realizeGroupTransformOnObject: function(instance) {\n            if (instance.group && instance.group.type === \"activeSelection\" && this._activeObject === instance.group) {\n                var layoutProps = [\n                    \"angle\",\n                    \"flipX\",\n                    \"flipY\",\n                    \"left\",\n                    \"scaleX\",\n                    \"scaleY\",\n                    \"skewX\",\n                    \"skewY\",\n                    \"top\"\n                ];\n                //Copy all the positionally relevant properties across now\n                var originalValues = {};\n                layoutProps.forEach(function(prop) {\n                    originalValues[prop] = instance[prop];\n                });\n                fabric.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());\n                return originalValues;\n            } else {\n                return null;\n            }\n        },\n        /**\n     * Restores the changed properties of instance\n     * @private\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\n     */ _unwindGroupTransformOnObject: function(instance, originalValues) {\n            if (originalValues) {\n                instance.set(originalValues);\n            }\n        },\n        /**\n     * @private\n     */ _setSVGObject: function(markup, instance, reviver) {\n            //If the object is in a selection group, simulate what would happen to that\n            //object when the group is deselected\n            var originalProperties = this._realizeGroupTransformOnObject(instance);\n            this.callSuper(\"_setSVGObject\", markup, instance, reviver);\n            this._unwindGroupTransformOnObject(instance, originalProperties);\n        },\n        setViewportTransform: function(vpt) {\n            if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\n                this._activeObject.clearContextTop();\n            }\n            fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\n        }\n    });\n    // copying static properties manually to work around Opera's bug,\n    // where \"prototype\" property is enumerable and overrides existing prototype\n    for(var prop in fabric.StaticCanvas){\n        if (prop !== \"prototype\") {\n            fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n        }\n    }\n})();\n(function() {\n    var addListener = fabric.util.addListener, removeListener = fabric.util.removeListener, RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1, addEventOptions = {\n        passive: false\n    };\n    function checkClick(e, value) {\n        return e.button && e.button === value - 1;\n    }\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n        /**\n     * Contains the id of the touch event that owns the fabric transform\n     * @type Number\n     * @private\n     */ mainTouchId: null,\n        /**\n     * Adds mouse listeners to canvas\n     * @private\n     */ _initEventListeners: function() {\n            // in case we initialized the class twice. This should not happen normally\n            // but in some kind of applications where the canvas element may be changed\n            // this is a workaround to having double listeners.\n            this.removeListeners();\n            this._bindEvents();\n            this.addOrRemove(addListener, \"add\");\n        },\n        /**\n     * return an event prefix pointer or mouse.\n     * @private\n     */ _getEventPrefix: function() {\n            return this.enablePointerEvents ? \"pointer\" : \"mouse\";\n        },\n        addOrRemove: function(functor, eventjsFunctor) {\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            functor(fabric.window, \"resize\", this._onResize);\n            functor(canvasElement, eventTypePrefix + \"down\", this._onMouseDown);\n            functor(canvasElement, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            functor(canvasElement, eventTypePrefix + \"out\", this._onMouseOut);\n            functor(canvasElement, eventTypePrefix + \"enter\", this._onMouseEnter);\n            functor(canvasElement, \"wheel\", this._onMouseWheel);\n            functor(canvasElement, \"contextmenu\", this._onContextMenu);\n            functor(canvasElement, \"dblclick\", this._onDoubleClick);\n            functor(canvasElement, \"dragover\", this._onDragOver);\n            functor(canvasElement, \"dragenter\", this._onDragEnter);\n            functor(canvasElement, \"dragleave\", this._onDragLeave);\n            functor(canvasElement, \"drop\", this._onDrop);\n            if (!this.enablePointerEvents) {\n                functor(canvasElement, \"touchstart\", this._onTouchStart, addEventOptions);\n            }\n            if (typeof eventjs !== \"undefined\" && eventjsFunctor in eventjs) {\n                eventjs[eventjsFunctor](canvasElement, \"gesture\", this._onGesture);\n                eventjs[eventjsFunctor](canvasElement, \"drag\", this._onDrag);\n                eventjs[eventjsFunctor](canvasElement, \"orientation\", this._onOrientationChange);\n                eventjs[eventjsFunctor](canvasElement, \"shake\", this._onShake);\n                eventjs[eventjsFunctor](canvasElement, \"longpress\", this._onLongPress);\n            }\n        },\n        /**\n     * Removes all event listeners\n     */ removeListeners: function() {\n            this.addOrRemove(removeListener, \"remove\");\n            // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n            var eventTypePrefix = this._getEventPrefix();\n            removeListener(fabric.document, eventTypePrefix + \"up\", this._onMouseUp);\n            removeListener(fabric.document, \"touchend\", this._onTouchEnd, addEventOptions);\n            removeListener(fabric.document, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            removeListener(fabric.document, \"touchmove\", this._onMouseMove, addEventOptions);\n        },\n        /**\n     * @private\n     */ _bindEvents: function() {\n            if (this.eventsBound) {\n                // for any reason we pass here twice we do not want to bind events twice.\n                return;\n            }\n            this._onMouseDown = this._onMouseDown.bind(this);\n            this._onTouchStart = this._onTouchStart.bind(this);\n            this._onMouseMove = this._onMouseMove.bind(this);\n            this._onMouseUp = this._onMouseUp.bind(this);\n            this._onTouchEnd = this._onTouchEnd.bind(this);\n            this._onResize = this._onResize.bind(this);\n            this._onGesture = this._onGesture.bind(this);\n            this._onDrag = this._onDrag.bind(this);\n            this._onShake = this._onShake.bind(this);\n            this._onLongPress = this._onLongPress.bind(this);\n            this._onOrientationChange = this._onOrientationChange.bind(this);\n            this._onMouseWheel = this._onMouseWheel.bind(this);\n            this._onMouseOut = this._onMouseOut.bind(this);\n            this._onMouseEnter = this._onMouseEnter.bind(this);\n            this._onContextMenu = this._onContextMenu.bind(this);\n            this._onDoubleClick = this._onDoubleClick.bind(this);\n            this._onDragOver = this._onDragOver.bind(this);\n            this._onDragEnter = this._simpleEventHandler.bind(this, \"dragenter\");\n            this._onDragLeave = this._simpleEventHandler.bind(this, \"dragleave\");\n            this._onDrop = this._onDrop.bind(this);\n            this.eventsBound = true;\n        },\n        /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js gesture\n     * @param {Event} [self] Inner Event object\n     */ _onGesture: function(e, self) {\n            this.__onTransformGesture && this.__onTransformGesture(e, self);\n        },\n        /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js drag\n     * @param {Event} [self] Inner Event object\n     */ _onDrag: function(e, self) {\n            this.__onDrag && this.__onDrag(e, self);\n        },\n        /**\n     * @private\n     * @param {Event} [e] Event object fired on wheel event\n     */ _onMouseWheel: function(e) {\n            this.__onMouseWheel(e);\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onMouseOut: function(e) {\n            var target = this._hoveredTarget;\n            this.fire(\"mouse:out\", {\n                target: target,\n                e: e\n            });\n            this._hoveredTarget = null;\n            target && target.fire(\"mouseout\", {\n                e: e\n            });\n            var _this = this;\n            this._hoveredTargets.forEach(function(_target) {\n                _this.fire(\"mouse:out\", {\n                    target: target,\n                    e: e\n                });\n                _target && target.fire(\"mouseout\", {\n                    e: e\n                });\n            });\n            this._hoveredTargets = [];\n            if (this._iTextInstances) {\n                this._iTextInstances.forEach(function(obj) {\n                    if (obj.isEditing) {\n                        obj.hiddenTextarea.focus();\n                    }\n                });\n            }\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mouseenter\n     */ _onMouseEnter: function(e) {\n            // This find target and consequent 'mouse:over' is used to\n            // clear old instances on hovered target.\n            // calling findTarget has the side effect of killing target.__corner.\n            // as a short term fix we are not firing this if we are currently transforming.\n            // as a long term fix we need to separate the action of finding a target with the\n            // side effects we added to it.\n            if (!this._currentTransform && !this.findTarget(e)) {\n                this.fire(\"mouse:over\", {\n                    target: null,\n                    e: e\n                });\n                this._hoveredTarget = null;\n                this._hoveredTargets = [];\n            }\n        },\n        /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js orientation change\n     * @param {Event} [self] Inner Event object\n     */ _onOrientationChange: function(e, self) {\n            this.__onOrientationChange && this.__onOrientationChange(e, self);\n        },\n        /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */ _onShake: function(e, self) {\n            this.__onShake && this.__onShake(e, self);\n        },\n        /**\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     * @param {Event} [self] Inner Event object\n     */ _onLongPress: function(e, self) {\n            this.__onLongPress && this.__onLongPress(e, self);\n        },\n        /**\n     * prevent default to allow drop event to be fired\n     * @private\n     * @param {Event} [e] Event object fired on Event.js shake\n     */ _onDragOver: function(e) {\n            e.preventDefault();\n            var target = this._simpleEventHandler(\"dragover\", e);\n            this._fireEnterLeaveEvents(target, e);\n        },\n        /**\n     * `drop:before` is a an event that allow you to schedule logic\n     * before the `drop` event. Prefer `drop` event always, but if you need\n     * to run some drop-disabling logic on an event, since there is no way\n     * to handle event handlers ordering, use `drop:before`\n     * @param {Event} e\n     */ _onDrop: function(e) {\n            this._simpleEventHandler(\"drop:before\", e);\n            return this._simpleEventHandler(\"drop\", e);\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onContextMenu: function(e) {\n            if (this.stopContextMenu) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n            return false;\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onDoubleClick: function(e) {\n            this._cacheTransformEventData(e);\n            this._handleEvent(e, \"dblclick\");\n            this._resetTransformEventData(e);\n        },\n        /**\n     * Return a the id of an event.\n     * returns either the pointerId or the identifier or 0 for the mouse event\n     * @private\n     * @param {Event} evt Event object\n     */ getPointerId: function(evt) {\n            var changedTouches = evt.changedTouches;\n            if (changedTouches) {\n                return changedTouches[0] && changedTouches[0].identifier;\n            }\n            if (this.enablePointerEvents) {\n                return evt.pointerId;\n            }\n            return -1;\n        },\n        /**\n     * Determines if an event has the id of the event that is considered main\n     * @private\n     * @param {evt} event Event object\n     */ _isMainEvent: function(evt) {\n            if (evt.isPrimary === true) {\n                return true;\n            }\n            if (evt.isPrimary === false) {\n                return false;\n            }\n            if (evt.type === \"touchend\" && evt.touches.length === 0) {\n                return true;\n            }\n            if (evt.changedTouches) {\n                return evt.changedTouches[0].identifier === this.mainTouchId;\n            }\n            return true;\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onTouchStart: function(e) {\n            e.preventDefault();\n            if (this.mainTouchId === null) {\n                this.mainTouchId = this.getPointerId(e);\n            }\n            this.__onMouseDown(e);\n            this._resetTransformEventData();\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            addListener(fabric.document, \"touchend\", this._onTouchEnd, addEventOptions);\n            addListener(fabric.document, \"touchmove\", this._onMouseMove, addEventOptions);\n            // Unbind mousedown to prevent double triggers from touch devices\n            removeListener(canvasElement, eventTypePrefix + \"down\", this._onMouseDown);\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onMouseDown: function(e) {\n            this.__onMouseDown(e);\n            this._resetTransformEventData();\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            removeListener(canvasElement, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            addListener(fabric.document, eventTypePrefix + \"up\", this._onMouseUp);\n            addListener(fabric.document, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onTouchEnd: function(e) {\n            if (e.touches.length > 0) {\n                // if there are still touches stop here\n                return;\n            }\n            this.__onMouseUp(e);\n            this._resetTransformEventData();\n            this.mainTouchId = null;\n            var eventTypePrefix = this._getEventPrefix();\n            removeListener(fabric.document, \"touchend\", this._onTouchEnd, addEventOptions);\n            removeListener(fabric.document, \"touchmove\", this._onMouseMove, addEventOptions);\n            var _this = this;\n            if (this._willAddMouseDown) {\n                clearTimeout(this._willAddMouseDown);\n            }\n            this._willAddMouseDown = setTimeout(function() {\n                // Wait 400ms before rebinding mousedown to prevent double triggers\n                // from touch devices\n                addListener(_this.upperCanvasEl, eventTypePrefix + \"down\", _this._onMouseDown);\n                _this._willAddMouseDown = 0;\n            }, 400);\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */ _onMouseUp: function(e) {\n            this.__onMouseUp(e);\n            this._resetTransformEventData();\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            if (this._isMainEvent(e)) {\n                removeListener(fabric.document, eventTypePrefix + \"up\", this._onMouseUp);\n                removeListener(fabric.document, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n                addListener(canvasElement, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            }\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */ _onMouseMove: function(e) {\n            !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n            this.__onMouseMove(e);\n        },\n        /**\n     * @private\n     */ _onResize: function() {\n            this.calcOffset();\n        },\n        /**\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\n     * @private\n     * @param {Object} target\n     */ _shouldRender: function(target) {\n            var activeObject = this._activeObject;\n            if (!!activeObject !== !!target || activeObject && target && activeObject !== target) {\n                // this covers: switch of target, from target to no target, selection of target\n                // multiSelection with key and mouse\n                return true;\n            } else if (activeObject && activeObject.isEditing) {\n                // if we mouse up/down over a editing textbox a cursor change,\n                // there is no need to re render\n                return false;\n            }\n            return false;\n        },\n        /**\n     * Method that defines the actions when mouse is released on canvas.\n     * The method resets the currentTransform parameters, store the image corner\n     * position in the image object and render the canvas on top.\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */ __onMouseUp: function(e) {\n            var target, transform = this._currentTransform, groupSelector = this._groupSelector, shouldRender = false, isClick = !groupSelector || groupSelector.left === 0 && groupSelector.top === 0;\n            this._cacheTransformEventData(e);\n            target = this._target;\n            this._handleEvent(e, \"up:before\");\n            // if right/middle click just fire events and return\n            // target undefined will make the _handleEvent search the target\n            if (checkClick(e, RIGHT_CLICK)) {\n                if (this.fireRightClick) {\n                    this._handleEvent(e, \"up\", RIGHT_CLICK, isClick);\n                }\n                return;\n            }\n            if (checkClick(e, MIDDLE_CLICK)) {\n                if (this.fireMiddleClick) {\n                    this._handleEvent(e, \"up\", MIDDLE_CLICK, isClick);\n                }\n                this._resetTransformEventData();\n                return;\n            }\n            if (this.isDrawingMode && this._isCurrentlyDrawing) {\n                this._onMouseUpInDrawingMode(e);\n                return;\n            }\n            if (!this._isMainEvent(e)) {\n                return;\n            }\n            if (transform) {\n                this._finalizeCurrentTransform(e);\n                shouldRender = transform.actionPerformed;\n            }\n            if (!isClick) {\n                var targetWasActive = target === this._activeObject;\n                this._maybeGroupObjects(e);\n                if (!shouldRender) {\n                    shouldRender = this._shouldRender(target) || !targetWasActive && target === this._activeObject;\n                }\n            }\n            var corner, pointer;\n            if (target) {\n                corner = target._findTargetCorner(this.getPointer(e, true), fabric.util.isTouchEvent(e));\n                if (target.selectable && target !== this._activeObject && target.activeOn === \"up\") {\n                    this.setActiveObject(target, e);\n                    shouldRender = true;\n                } else {\n                    var control = target.controls[corner], mouseUpHandler = control && control.getMouseUpHandler(e, target, control);\n                    if (mouseUpHandler) {\n                        pointer = this.getPointer(e);\n                        mouseUpHandler(e, transform, pointer.x, pointer.y);\n                    }\n                }\n                target.isMoving = false;\n            }\n            // if we are ending up a transform on a different control or a new object\n            // fire the original mouse up from the corner that started the transform\n            if (transform && (transform.target !== target || transform.corner !== corner)) {\n                var originalControl = transform.target && transform.target.controls[transform.corner], originalMouseUpHandler = originalControl && originalControl.getMouseUpHandler(e, target, control);\n                pointer = pointer || this.getPointer(e);\n                originalMouseUpHandler && originalMouseUpHandler(e, transform, pointer.x, pointer.y);\n            }\n            this._setCursorFromEvent(e, target);\n            this._handleEvent(e, \"up\", LEFT_CLICK, isClick);\n            this._groupSelector = null;\n            this._currentTransform = null;\n            // reset the target information about which corner is selected\n            target && (target.__corner = 0);\n            if (shouldRender) {\n                this.requestRenderAll();\n            } else if (!isClick) {\n                this.renderTop();\n            }\n        },\n        /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @return {Fabric.Object} target return the the target found, for internal reasons.\n     */ _simpleEventHandler: function(eventType, e) {\n            var target = this.findTarget(e), targets = this.targets, options = {\n                e: e,\n                target: target,\n                subTargets: targets\n            };\n            this.fire(eventType, options);\n            target && target.fire(eventType, options);\n            if (!targets) {\n                return target;\n            }\n            for(var i = 0; i < targets.length; i++){\n                targets[i].fire(eventType, options);\n            }\n            return target;\n        },\n        /**\n     * @private\n     * Handle event firing for target and subtargets\n     * @param {Event} e event from mouse\n     * @param {String} eventType event to fire (up, down or move)\n     * @param {fabric.Object} targetObj receiving event\n     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\n     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\n     */ _handleEvent: function(e, eventType, button, isClick) {\n            var target = this._target, targets = this.targets || [], options = {\n                e: e,\n                target: target,\n                subTargets: targets,\n                button: button || LEFT_CLICK,\n                isClick: isClick || false,\n                pointer: this._pointer,\n                absolutePointer: this._absolutePointer,\n                transform: this._currentTransform\n            };\n            if (eventType === \"up\") {\n                options.currentTarget = this.findTarget(e);\n                options.currentSubTargets = this.targets;\n            }\n            this.fire(\"mouse:\" + eventType, options);\n            target && target.fire(\"mouse\" + eventType, options);\n            for(var i = 0; i < targets.length; i++){\n                targets[i].fire(\"mouse\" + eventType, options);\n            }\n        },\n        /**\n     * @private\n     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\n     */ _finalizeCurrentTransform: function(e) {\n            var transform = this._currentTransform, target = transform.target, options = {\n                e: e,\n                target: target,\n                transform: transform,\n                action: transform.action\n            };\n            if (target._scaling) {\n                target._scaling = false;\n            }\n            target.setCoords();\n            if (transform.actionPerformed || this.stateful && target.hasStateChanged()) {\n                this._fire(\"modified\", options);\n            }\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ _onMouseDownInDrawingMode: function(e) {\n            this._isCurrentlyDrawing = true;\n            if (this.getActiveObject()) {\n                this.discardActiveObject(e).requestRenderAll();\n            }\n            var pointer = this.getPointer(e);\n            this.freeDrawingBrush.onMouseDown(pointer, {\n                e: e,\n                pointer: pointer\n            });\n            this._handleEvent(e, \"down\");\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */ _onMouseMoveInDrawingMode: function(e) {\n            if (this._isCurrentlyDrawing) {\n                var pointer = this.getPointer(e);\n                this.freeDrawingBrush.onMouseMove(pointer, {\n                    e: e,\n                    pointer: pointer\n                });\n            }\n            this.setCursor(this.freeDrawingCursor);\n            this._handleEvent(e, \"move\");\n        },\n        /**\n     * @private\n     * @param {Event} e Event object fired on mouseup\n     */ _onMouseUpInDrawingMode: function(e) {\n            var pointer = this.getPointer(e);\n            this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({\n                e: e,\n                pointer: pointer\n            });\n            this._handleEvent(e, \"up\");\n        },\n        /**\n     * Method that defines the actions when mouse is clicked on canvas.\n     * The method inits the currentTransform parameters and renders all the\n     * canvas so the current image can be placed on the top canvas and the rest\n     * in on the container one.\n     * @private\n     * @param {Event} e Event object fired on mousedown\n     */ __onMouseDown: function(e) {\n            this._cacheTransformEventData(e);\n            this._handleEvent(e, \"down:before\");\n            var target = this._target;\n            // if right click just fire events\n            if (checkClick(e, RIGHT_CLICK)) {\n                if (this.fireRightClick) {\n                    this._handleEvent(e, \"down\", RIGHT_CLICK);\n                }\n                return;\n            }\n            if (checkClick(e, MIDDLE_CLICK)) {\n                if (this.fireMiddleClick) {\n                    this._handleEvent(e, \"down\", MIDDLE_CLICK);\n                }\n                return;\n            }\n            if (this.isDrawingMode) {\n                this._onMouseDownInDrawingMode(e);\n                return;\n            }\n            if (!this._isMainEvent(e)) {\n                return;\n            }\n            // ignore if some object is being transformed at this moment\n            if (this._currentTransform) {\n                return;\n            }\n            var pointer = this._pointer;\n            // save pointer for check in __onMouseUp event\n            this._previousPointer = pointer;\n            var shouldRender = this._shouldRender(target), shouldGroup = this._shouldGroup(e, target);\n            if (this._shouldClearSelection(e, target)) {\n                this.discardActiveObject(e);\n            } else if (shouldGroup) {\n                this._handleGrouping(e, target);\n                target = this._activeObject;\n            }\n            if (this.selection && (!target || !target.selectable && !target.isEditing && target !== this._activeObject)) {\n                this._groupSelector = {\n                    ex: this._absolutePointer.x,\n                    ey: this._absolutePointer.y,\n                    top: 0,\n                    left: 0\n                };\n            }\n            if (target) {\n                var alreadySelected = target === this._activeObject;\n                if (target.selectable && target.activeOn === \"down\") {\n                    this.setActiveObject(target, e);\n                }\n                var corner = target._findTargetCorner(this.getPointer(e, true), fabric.util.isTouchEvent(e));\n                target.__corner = corner;\n                if (target === this._activeObject && (corner || !shouldGroup)) {\n                    this._setupCurrentTransform(e, target, alreadySelected);\n                    var control = target.controls[corner], pointer = this.getPointer(e), mouseDownHandler = control && control.getMouseDownHandler(e, target, control);\n                    if (mouseDownHandler) {\n                        mouseDownHandler(e, this._currentTransform, pointer.x, pointer.y);\n                    }\n                }\n            }\n            this._handleEvent(e, \"down\");\n            // we must renderAll so that we update the visuals\n            (shouldRender || shouldGroup) && this.requestRenderAll();\n        },\n        /**\n     * reset cache form common information needed during event processing\n     * @private\n     */ _resetTransformEventData: function() {\n            this._target = null;\n            this._pointer = null;\n            this._absolutePointer = null;\n        },\n        /**\n     * Cache common information needed during event processing\n     * @private\n     * @param {Event} e Event object fired on event\n     */ _cacheTransformEventData: function(e) {\n            // reset in order to avoid stale caching\n            this._resetTransformEventData();\n            this._pointer = this.getPointer(e, true);\n            this._absolutePointer = this.restorePointerVpt(this._pointer);\n            this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\n        },\n        /**\n     * @private\n     */ _beforeTransform: function(e) {\n            var t = this._currentTransform;\n            this.stateful && t.target.saveState();\n            this.fire(\"before:transform\", {\n                e: e,\n                transform: t\n            });\n        },\n        /**\n     * Method that defines the actions when mouse is hovering the canvas.\n     * The currentTransform parameter will define whether the user is rotating/scaling/translating\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\n     * all any other type of action.\n     * In case of an image transformation only the top canvas will be rendered.\n     * @private\n     * @param {Event} e Event object fired on mousemove\n     */ __onMouseMove: function(e) {\n            this._handleEvent(e, \"move:before\");\n            this._cacheTransformEventData(e);\n            var target, pointer;\n            if (this.isDrawingMode) {\n                this._onMouseMoveInDrawingMode(e);\n                return;\n            }\n            if (!this._isMainEvent(e)) {\n                return;\n            }\n            var groupSelector = this._groupSelector;\n            // We initially clicked in an empty area, so we draw a box for multiple selection\n            if (groupSelector) {\n                pointer = this._absolutePointer;\n                groupSelector.left = pointer.x - groupSelector.ex;\n                groupSelector.top = pointer.y - groupSelector.ey;\n                this.renderTop();\n            } else if (!this._currentTransform) {\n                target = this.findTarget(e) || null;\n                this._setCursorFromEvent(e, target);\n                this._fireOverOutEvents(target, e);\n            } else {\n                this._transformObject(e);\n            }\n            this._handleEvent(e, \"move\");\n            this._resetTransformEventData();\n        },\n        /**\n     * Manage the mouseout, mouseover events for the fabric object on the canvas\n     * @param {Fabric.Object} target the target where the target from the mousemove event\n     * @param {Event} e Event object fired on mousemove\n     * @private\n     */ _fireOverOutEvents: function(target, e) {\n            var _hoveredTarget = this._hoveredTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);\n            this.fireSyntheticInOutEvents(target, e, {\n                oldTarget: _hoveredTarget,\n                evtOut: \"mouseout\",\n                canvasEvtOut: \"mouse:out\",\n                evtIn: \"mouseover\",\n                canvasEvtIn: \"mouse:over\"\n            });\n            for(var i = 0; i < length; i++){\n                this.fireSyntheticInOutEvents(targets[i], e, {\n                    oldTarget: _hoveredTargets[i],\n                    evtOut: \"mouseout\",\n                    evtIn: \"mouseover\"\n                });\n            }\n            this._hoveredTarget = target;\n            this._hoveredTargets = this.targets.concat();\n        },\n        /**\n     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the onDrag event\n     * @param {Event} e Event object fired on ondrag\n     * @private\n     */ _fireEnterLeaveEvents: function(target, e) {\n            var _draggedoverTarget = this._draggedoverTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);\n            this.fireSyntheticInOutEvents(target, e, {\n                oldTarget: _draggedoverTarget,\n                evtOut: \"dragleave\",\n                evtIn: \"dragenter\"\n            });\n            for(var i = 0; i < length; i++){\n                this.fireSyntheticInOutEvents(targets[i], e, {\n                    oldTarget: _hoveredTargets[i],\n                    evtOut: \"dragleave\",\n                    evtIn: \"dragenter\"\n                });\n            }\n            this._draggedoverTarget = target;\n        },\n        /**\n     * Manage the synthetic in/out events for the fabric objects on the canvas\n     * @param {Fabric.Object} target the target where the target from the supported events\n     * @param {Event} e Event object fired\n     * @param {Object} config configuration for the function to work\n     * @param {String} config.targetName property on the canvas where the old target is stored\n     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\n     * @param {String} config.evtOut name of the event to fire for out\n     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\n     * @param {String} config.evtIn name of the event to fire for in\n     * @private\n     */ fireSyntheticInOutEvents: function(target, e, config) {\n            var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires, targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\n            if (targetChanged) {\n                inOpt = {\n                    e: e,\n                    target: target,\n                    previousTarget: oldTarget\n                };\n                outOpt = {\n                    e: e,\n                    target: oldTarget,\n                    nextTarget: target\n                };\n            }\n            inFires = target && targetChanged;\n            outFires = oldTarget && targetChanged;\n            if (outFires) {\n                canvasEvtOut && this.fire(canvasEvtOut, outOpt);\n                oldTarget.fire(config.evtOut, outOpt);\n            }\n            if (inFires) {\n                canvasEvtIn && this.fire(canvasEvtIn, inOpt);\n                target.fire(config.evtIn, inOpt);\n            }\n        },\n        /**\n     * Method that defines actions when an Event Mouse Wheel\n     * @param {Event} e Event object fired on mouseup\n     */ __onMouseWheel: function(e) {\n            this._cacheTransformEventData(e);\n            this._handleEvent(e, \"wheel\");\n            this._resetTransformEventData();\n        },\n        /**\n     * @private\n     * @param {Event} e Event fired on mousemove\n     */ _transformObject: function(e) {\n            var pointer = this.getPointer(e), transform = this._currentTransform;\n            transform.reset = false;\n            transform.shiftKey = e.shiftKey;\n            transform.altKey = e[this.centeredKey];\n            this._performTransformAction(e, transform, pointer);\n            transform.actionPerformed && this.requestRenderAll();\n        },\n        /**\n     * @private\n     */ _performTransformAction: function(e, transform, pointer) {\n            var x = pointer.x, y = pointer.y, action = transform.action, actionPerformed = false, actionHandler = transform.actionHandler;\n            // this object could be created from the function in the control handlers\n            if (actionHandler) {\n                actionPerformed = actionHandler(e, transform, x, y);\n            }\n            if (action === \"drag\" && actionPerformed) {\n                transform.target.isMoving = true;\n                this.setCursor(transform.target.moveCursor || this.moveCursor);\n            }\n            transform.actionPerformed = transform.actionPerformed || actionPerformed;\n        },\n        /**\n     * @private\n     */ _fire: fabric.controlsUtils.fireEvent,\n        /**\n     * Sets the cursor depending on where the canvas is being hovered.\n     * Note: very buggy in Opera\n     * @param {Event} e Event object\n     * @param {Object} target Object that the mouse is hovering, if so.\n     */ _setCursorFromEvent: function(e, target) {\n            if (!target) {\n                this.setCursor(this.defaultCursor);\n                return false;\n            }\n            var hoverCursor = target.hoverCursor || this.hoverCursor, activeSelection = this._activeObject && this._activeObject.type === \"activeSelection\" ? this._activeObject : null, // only show proper corner when group selection is not active\n            corner = (!activeSelection || !activeSelection.contains(target)) && target._findTargetCorner(this.getPointer(e, true));\n            if (!corner) {\n                if (target.subTargetCheck) {\n                    // hoverCursor should come from top-most subTarget,\n                    // so we walk the array backwards\n                    this.targets.concat().reverse().map(function(_target) {\n                        hoverCursor = _target.hoverCursor || hoverCursor;\n                    });\n                }\n                this.setCursor(hoverCursor);\n            } else {\n                this.setCursor(this.getCornerCursor(corner, target, e));\n            }\n        },\n        /**\n     * @private\n     */ getCornerCursor: function(corner, target, e) {\n            var control = target.controls[corner];\n            return control.cursorStyleHandler(e, control, target);\n        }\n    });\n})();\n(function() {\n    var min = Math.min, max = Math.max;\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n        /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     * @return {Boolean}\n     */ _shouldGroup: function(e, target) {\n            var activeObject = this._activeObject;\n            return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection && (activeObject !== target || activeObject.type === \"activeSelection\") && !target.onSelect({\n                e: e\n            });\n        },\n        /**\n     * @private\n     * @param {Event} e Event object\n     * @param {fabric.Object} target\n     */ _handleGrouping: function(e, target) {\n            var activeObject = this._activeObject;\n            // avoid multi select when shift click on a corner\n            if (activeObject.__corner) {\n                return;\n            }\n            if (target === activeObject) {\n                // if it's a group, find target again, using activeGroup objects\n                target = this.findTarget(e, true);\n                // if even object is not found or we are on activeObjectCorner, bail out\n                if (!target || !target.selectable) {\n                    return;\n                }\n            }\n            if (activeObject && activeObject.type === \"activeSelection\") {\n                this._updateActiveSelection(target, e);\n            } else {\n                this._createActiveSelection(target, e);\n            }\n        },\n        /**\n     * @private\n     */ _updateActiveSelection: function(target, e) {\n            var activeSelection = this._activeObject, currentActiveObjects = activeSelection._objects.slice(0);\n            if (activeSelection.contains(target)) {\n                activeSelection.removeWithUpdate(target);\n                this._hoveredTarget = target;\n                this._hoveredTargets = this.targets.concat();\n                if (activeSelection.size() === 1) {\n                    // activate last remaining object\n                    this._setActiveObject(activeSelection.item(0), e);\n                }\n            } else {\n                activeSelection.addWithUpdate(target);\n                this._hoveredTarget = activeSelection;\n                this._hoveredTargets = this.targets.concat();\n            }\n            this._fireSelectionEvents(currentActiveObjects, e);\n        },\n        /**\n     * @private\n     */ _createActiveSelection: function(target, e) {\n            var currentActives = this.getActiveObjects(), group = this._createGroup(target);\n            this._hoveredTarget = group;\n            // ISSUE 4115: should we consider subTargets here?\n            // this._hoveredTargets = [];\n            // this._hoveredTargets = this.targets.concat();\n            this._setActiveObject(group, e);\n            this._fireSelectionEvents(currentActives, e);\n        },\n        /**\n     * @private\n     * @param {Object} target\n     */ _createGroup: function(target) {\n            var objects = this._objects, isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target), groupObjects = isActiveLower ? [\n                this._activeObject,\n                target\n            ] : [\n                target,\n                this._activeObject\n            ];\n            this._activeObject.isEditing && this._activeObject.exitEditing();\n            return new fabric.ActiveSelection(groupObjects, {\n                canvas: this\n            });\n        },\n        /**\n     * @private\n     * @param {Event} e mouse event\n     */ _groupSelectedObjects: function(e) {\n            var group = this._collectObjects(e), aGroup;\n            // do not create group for 1 element only\n            if (group.length === 1) {\n                this.setActiveObject(group[0], e);\n            } else if (group.length > 1) {\n                aGroup = new fabric.ActiveSelection(group.reverse(), {\n                    canvas: this\n                });\n                this.setActiveObject(aGroup, e);\n            }\n        },\n        /**\n     * @private\n     */ _collectObjects: function(e) {\n            var group = [], currentObject, x1 = this._groupSelector.ex, y1 = this._groupSelector.ey, x2 = x1 + this._groupSelector.left, y2 = y1 + this._groupSelector.top, selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)), selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)), allowIntersect = !this.selectionFullyContained, isClick = x1 === x2 && y1 === y2;\n            // we iterate reverse order to collect top first in case of click.\n            for(var i = this._objects.length; i--;){\n                currentObject = this._objects[i];\n                if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n                    continue;\n                }\n                if (allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true) || currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) || allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true) || allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true)) {\n                    group.push(currentObject);\n                    // only add one object if it's a click\n                    if (isClick) {\n                        break;\n                    }\n                }\n            }\n            if (group.length > 1) {\n                group = group.filter(function(object) {\n                    return !object.onSelect({\n                        e: e\n                    });\n                });\n            }\n            return group;\n        },\n        /**\n     * @private\n     */ _maybeGroupObjects: function(e) {\n            if (this.selection && this._groupSelector) {\n                this._groupSelectedObjects(e);\n            }\n            this.setCursor(this.defaultCursor);\n            // clear selection and current transformation\n            this._groupSelector = null;\n        }\n    });\n})();\n(function() {\n    fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n        /**\n     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\n     * @param {Object} [options] Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\n     * @example <caption>Generate jpeg dataURL with lower quality</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'jpeg',\n     *   quality: 0.8\n     * });\n     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   left: 100,\n     *   top: 100,\n     *   width: 200,\n     *   height: 200\n     * });\n     * @example <caption>Generate double scaled png dataURL</caption>\n     * var dataURL = canvas.toDataURL({\n     *   format: 'png',\n     *   multiplier: 2\n     * });\n     */ toDataURL: function(options) {\n            options || (options = {});\n            var format = options.format || \"png\", quality = options.quality || 1, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1), canvasEl = this.toCanvasElement(multiplier, options);\n            return fabric.util.toDataURL(canvasEl, format, quality);\n        },\n        /**\n     * Create a new HTMLCanvas element painted with the current canvas content.\n     * No need to resize the actual one or repaint it.\n     * Will transfer object ownership to a new canvas, paint it, and set everything back.\n     * This is an intermediary step used to get to a dataUrl but also it is useful to\n     * create quick image copies of a canvas without passing for the dataUrl string\n     * @param {Number} [multiplier] a zoom factor.\n     * @param {Object} [cropping] Cropping informations\n     * @param {Number} [cropping.left] Cropping left offset.\n     * @param {Number} [cropping.top] Cropping top offset.\n     * @param {Number} [cropping.width] Cropping width.\n     * @param {Number} [cropping.height] Cropping height.\n     */ toCanvasElement: function(multiplier, cropping) {\n            multiplier = multiplier || 1;\n            cropping = cropping || {};\n            var scaledWidth = (cropping.width || this.width) * multiplier, scaledHeight = (cropping.height || this.height) * multiplier, zoom = this.getZoom(), originalWidth = this.width, originalHeight = this.height, newZoom = zoom * multiplier, vp = this.viewportTransform, translateX = (vp[4] - (cropping.left || 0)) * multiplier, translateY = (vp[5] - (cropping.top || 0)) * multiplier, originalInteractive = this.interactive, newVp = [\n                newZoom,\n                0,\n                0,\n                newZoom,\n                translateX,\n                translateY\n            ], originalRetina = this.enableRetinaScaling, canvasEl = fabric.util.createCanvasElement(), originalContextTop = this.contextTop;\n            canvasEl.width = scaledWidth;\n            canvasEl.height = scaledHeight;\n            this.contextTop = null;\n            this.enableRetinaScaling = false;\n            this.interactive = false;\n            this.viewportTransform = newVp;\n            this.width = scaledWidth;\n            this.height = scaledHeight;\n            this.calcViewportBoundaries();\n            this.renderCanvas(canvasEl.getContext(\"2d\"), this._objects);\n            this.viewportTransform = vp;\n            this.width = originalWidth;\n            this.height = originalHeight;\n            this.calcViewportBoundaries();\n            this.interactive = originalInteractive;\n            this.enableRetinaScaling = originalRetina;\n            this.contextTop = originalContextTop;\n            return canvasEl;\n        }\n    });\n})();\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n    /**\n   * Populates canvas with data from the specified JSON.\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\n   * @param {String|Object} json JSON string or object\n   * @param {Function} callback Callback, invoked when json is parsed\n   *                            and corresponding objects (e.g: {@link fabric.Image})\n   *                            are initialized\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\n   * @return {fabric.Canvas} instance\n   * @chainable\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\n   * @example <caption>loadFromJSON</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\n   * @example <caption>loadFromJSON with reviver</caption>\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\n   *   // `o` = json object\n   *   // `object` = fabric.Object instance\n   *   // ... do some stuff ...\n   * });\n   */ loadFromJSON: function(json, callback, reviver) {\n        if (!json) {\n            return;\n        }\n        // serialize if it wasn't already\n        var serialized = typeof json === \"string\" ? JSON.parse(json) : fabric.util.object.clone(json);\n        var _this = this, clipPath = serialized.clipPath, renderOnAddRemove = this.renderOnAddRemove;\n        this.renderOnAddRemove = false;\n        delete serialized.clipPath;\n        this._enlivenObjects(serialized.objects, function(enlivenedObjects) {\n            _this.clear();\n            _this._setBgOverlay(serialized, function() {\n                if (clipPath) {\n                    _this._enlivenObjects([\n                        clipPath\n                    ], function(enlivenedCanvasClip) {\n                        _this.clipPath = enlivenedCanvasClip[0];\n                        _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\n                    });\n                } else {\n                    _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\n                }\n            });\n        }, reviver);\n        return this;\n    },\n    /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Array} restored canvas objects\n   * @param {Function} cached renderOnAddRemove callback\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */ __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {\n        var _this = this;\n        enlivenedObjects.forEach(function(obj, index) {\n            // we splice the array just in case some custom classes restored from JSON\n            // will add more object to canvas at canvas init.\n            _this.insertAt(obj, index);\n        });\n        this.renderOnAddRemove = renderOnAddRemove;\n        // remove parts i cannot set as options\n        delete serialized.objects;\n        delete serialized.backgroundImage;\n        delete serialized.overlayImage;\n        delete serialized.background;\n        delete serialized.overlay;\n        // this._initOptions does too many things to just\n        // call it. Normally loading an Object from JSON\n        // create the Object instance. Here the Canvas is\n        // already an instance and we are just loading things over it\n        this._setOptions(serialized);\n        this.renderAll();\n        callback && callback();\n    },\n    /**\n   * @private\n   * @param {Object} serialized Object with background and overlay information\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\n   */ _setBgOverlay: function(serialized, callback) {\n        var loaded = {\n            backgroundColor: false,\n            overlayColor: false,\n            backgroundImage: false,\n            overlayImage: false\n        };\n        if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n            callback && callback();\n            return;\n        }\n        var cbIfLoaded = function() {\n            if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n                callback && callback();\n            }\n        };\n        this.__setBgOverlay(\"backgroundImage\", serialized.backgroundImage, loaded, cbIfLoaded);\n        this.__setBgOverlay(\"overlayImage\", serialized.overlayImage, loaded, cbIfLoaded);\n        this.__setBgOverlay(\"backgroundColor\", serialized.background, loaded, cbIfLoaded);\n        this.__setBgOverlay(\"overlayColor\", serialized.overlay, loaded, cbIfLoaded);\n    },\n    /**\n   * @private\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\n   * @param {(Object|String)} value Value to set\n   * @param {Object} loaded Set loaded property to true if property is set\n   * @param {Object} callback Callback function to invoke after property is set\n   */ __setBgOverlay: function(property, value, loaded, callback) {\n        var _this = this;\n        if (!value) {\n            loaded[property] = true;\n            callback && callback();\n            return;\n        }\n        if (property === \"backgroundImage\" || property === \"overlayImage\") {\n            fabric.util.enlivenObjects([\n                value\n            ], function(enlivedObject) {\n                _this[property] = enlivedObject[0];\n                loaded[property] = true;\n                callback && callback();\n            });\n        } else {\n            this[\"set\" + fabric.util.string.capitalize(property, true)](value, function() {\n                loaded[property] = true;\n                callback && callback();\n            });\n        }\n    },\n    /**\n   * @private\n   * @param {Array} objects\n   * @param {Function} callback\n   * @param {Function} [reviver]\n   */ _enlivenObjects: function(objects, callback, reviver) {\n        if (!objects || objects.length === 0) {\n            callback && callback([]);\n            return;\n        }\n        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n            callback && callback(enlivenedObjects);\n        }, null, reviver);\n    },\n    /**\n   * @private\n   * @param {String} format\n   * @param {Function} callback\n   */ _toDataURL: function(format, callback) {\n        this.clone(function(clone) {\n            callback(clone.toDataURL(format));\n        });\n    },\n    /**\n   * @private\n   * @param {String} format\n   * @param {Number} multiplier\n   * @param {Function} callback\n   */ _toDataURLWithMultiplier: function(format, multiplier, callback) {\n        this.clone(function(clone) {\n            callback(clone.toDataURLWithMultiplier(format, multiplier));\n        });\n    },\n    /**\n   * Clones canvas instance\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\n   */ clone: function(callback, properties) {\n        var data = JSON.stringify(this.toJSON(properties));\n        this.cloneWithoutData(function(clone) {\n            clone.loadFromJSON(data, function() {\n                callback && callback(clone);\n            });\n        });\n    },\n    /**\n   * Clones canvas instance without cloning existing data.\n   * This essentially copies canvas dimensions, clipping properties, etc.\n   * but leaves data empty (so that you can populate it with your own)\n   * @param {Object} [callback] Receives cloned instance as a first argument\n   */ cloneWithoutData: function(callback) {\n        var el = fabric.util.createCanvasElement();\n        el.width = this.width;\n        el.height = this.height;\n        var clone = new fabric.Canvas(el);\n        if (this.backgroundImage) {\n            clone.setBackgroundImage(this.backgroundImage.src, function() {\n                clone.renderAll();\n                callback && callback(clone);\n            });\n            clone.backgroundImageOpacity = this.backgroundImageOpacity;\n            clone.backgroundImageStretch = this.backgroundImageStretch;\n        } else {\n            callback && callback(clone);\n        }\n    }\n});\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, clone = fabric.util.object.clone, toFixed = fabric.util.toFixed, capitalize = fabric.util.string.capitalize, degreesToRadians = fabric.util.degreesToRadians, objectCaching = !fabric.isLikelyNode, ALIASING_LIMIT = 2;\n    if (fabric.Object) {\n        return;\n    }\n    /**\n   * Root object class from which all 2d shape classes inherit from\n   * @class fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\n   * @see {@link fabric.Object#initialize} for constructor definition\n   *\n   * @fires added\n   * @fires removed\n   *\n   * @fires selected\n   * @fires deselected\n   * @fires modified\n   * @fires modified\n   * @fires moved\n   * @fires scaled\n   * @fires rotated\n   * @fires skewed\n   *\n   * @fires rotating\n   * @fires scaling\n   * @fires moving\n   * @fires skewing\n   *\n   * @fires mousedown\n   * @fires mouseup\n   * @fires mouseover\n   * @fires mouseout\n   * @fires mousewheel\n   * @fires mousedblclick\n   *\n   * @fires dragover\n   * @fires dragenter\n   * @fires dragleave\n   * @fires drop\n   */ fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\n        /**\n     * Type of an object (rect, circle, path, etc.).\n     * Note that this property is meant to be read-only and not meant to be modified.\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\n     * @type String\n     * @default\n     */ type: \"object\",\n        /**\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */ originX: \"left\",\n        /**\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\n     * @type String\n     * @default\n     */ originY: \"top\",\n        /**\n     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\n     * @type Number\n     * @default\n     */ top: 0,\n        /**\n     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\n     * @type Number\n     * @default\n     */ left: 0,\n        /**\n     * Object width\n     * @type Number\n     * @default\n     */ width: 0,\n        /**\n     * Object height\n     * @type Number\n     * @default\n     */ height: 0,\n        /**\n     * Object scale factor (horizontal)\n     * @type Number\n     * @default\n     */ scaleX: 1,\n        /**\n     * Object scale factor (vertical)\n     * @type Number\n     * @default\n     */ scaleY: 1,\n        /**\n     * When true, an object is rendered as flipped horizontally\n     * @type Boolean\n     * @default\n     */ flipX: false,\n        /**\n     * When true, an object is rendered as flipped vertically\n     * @type Boolean\n     * @default\n     */ flipY: false,\n        /**\n     * Opacity of an object\n     * @type Number\n     * @default\n     */ opacity: 1,\n        /**\n     * Angle of rotation of an object (in degrees)\n     * @type Number\n     * @default\n     */ angle: 0,\n        /**\n     * Angle of skew on x axes of an object (in degrees)\n     * @type Number\n     * @default\n     */ skewX: 0,\n        /**\n     * Angle of skew on y axes of an object (in degrees)\n     * @type Number\n     * @default\n     */ skewY: 0,\n        /**\n     * Size of object's controlling corners (in pixels)\n     * @type Number\n     * @default\n     */ cornerSize: 13,\n        /**\n     * Size of object's controlling corners when touch interaction is detected\n     * @type Number\n     * @default\n     */ touchCornerSize: 24,\n        /**\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\n     * @type Boolean\n     * @default\n     */ transparentCorners: true,\n        /**\n     * Default cursor value used when hovering over this object on canvas\n     * @type String\n     * @default\n     */ hoverCursor: null,\n        /**\n     * Default cursor value used when moving this object on canvas\n     * @type String\n     * @default\n     */ moveCursor: null,\n        /**\n     * Padding between object and its controlling borders (in pixels)\n     * @type Number\n     * @default\n     */ padding: 0,\n        /**\n     * Color of controlling borders of an object (when it's active)\n     * @type String\n     * @default\n     */ borderColor: \"rgb(178,204,255)\",\n        /**\n     * Array specifying dash pattern of an object's borders (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */ borderDashArray: null,\n        /**\n     * Color of controlling corners of an object (when it's active)\n     * @type String\n     * @default\n     */ cornerColor: \"rgb(178,204,255)\",\n        /**\n     * Color of controlling corners of an object (when it's active and transparentCorners false)\n     * @since 1.6.2\n     * @type String\n     * @default\n     */ cornerStrokeColor: null,\n        /**\n     * Specify style of control, 'rect' or 'circle'\n     * @since 1.6.2\n     * @type String\n     */ cornerStyle: \"rect\",\n        /**\n     * Array specifying dash pattern of an object's control (hasBorder must be true)\n     * @since 1.6.2\n     * @type Array\n     */ cornerDashArray: null,\n        /**\n     * When true, this object will use center point as the origin of transformation\n     * when being scaled via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */ centeredScaling: false,\n        /**\n     * When true, this object will use center point as the origin of transformation\n     * when being rotated via the controls.\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\n     * @since 1.3.4\n     * @type Boolean\n     * @default\n     */ centeredRotation: true,\n        /**\n     * Color of object's fill\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */ fill: \"rgb(0,0,0)\",\n        /**\n     * Fill rule used to fill an object\n     * accepted values are nonzero, evenodd\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\n     * @type String\n     * @default\n     */ fillRule: \"nonzero\",\n        /**\n     * Composite rule used for canvas globalCompositeOperation\n     * @type String\n     * @default\n     */ globalCompositeOperation: \"source-over\",\n        /**\n     * Background color of an object.\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */ backgroundColor: \"\",\n        /**\n     * Selection Background color of an object. colored layer behind the object when it is active.\n     * does not mix good with globalCompositeOperation methods.\n     * @type String\n     * @default\n     */ selectionBackgroundColor: \"\",\n        /**\n     * When defined, an object is rendered via stroke and this property specifies its color\n     * takes css colors https://www.w3.org/TR/css-color-3/\n     * @type String\n     * @default\n     */ stroke: null,\n        /**\n     * Width of a stroke used to render this object\n     * @type Number\n     * @default\n     */ strokeWidth: 1,\n        /**\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\n     * @type Array\n     */ strokeDashArray: null,\n        /**\n     * Line offset of an object's stroke\n     * @type Number\n     * @default\n     */ strokeDashOffset: 0,\n        /**\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\n     * @type String\n     * @default\n     */ strokeLineCap: \"butt\",\n        /**\n     * Corner style of an object's stroke (one of \"bevel\", \"round\", \"miter\")\n     * @type String\n     * @default\n     */ strokeLineJoin: \"miter\",\n        /**\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\n     * @type Number\n     * @default\n     */ strokeMiterLimit: 4,\n        /**\n     * Shadow object representing shadow of this shape\n     * @type fabric.Shadow\n     * @default\n     */ shadow: null,\n        /**\n     * Opacity of object's controlling borders when object is active and moving\n     * @type Number\n     * @default\n     */ borderOpacityWhenMoving: 0.4,\n        /**\n     * Scale factor of object's controlling borders\n     * bigger number will make a thicker border\n     * border is 1, so this is basically a border thickness\n     * since there is no way to change the border itself.\n     * @type Number\n     * @default\n     */ borderScaleFactor: 1,\n        /**\n     * Minimum allowed scale value of an object\n     * @type Number\n     * @default\n     */ minScaleLimit: 0,\n        /**\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\n     * But events still fire on it.\n     * @type Boolean\n     * @default\n     */ selectable: true,\n        /**\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\n     * @type Boolean\n     * @default\n     */ evented: true,\n        /**\n     * When set to `false`, an object is not rendered on canvas\n     * @type Boolean\n     * @default\n     */ visible: true,\n        /**\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\n     * @type Boolean\n     * @default\n     */ hasControls: true,\n        /**\n     * When set to `false`, object's controlling borders are not rendered\n     * @type Boolean\n     * @default\n     */ hasBorders: true,\n        /**\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\n     * @type Boolean\n     * @default\n     */ perPixelTargetFind: false,\n        /**\n     * When `false`, default object's values are not included in its serialization\n     * @type Boolean\n     * @default\n     */ includeDefaultValues: true,\n        /**\n     * When `true`, object horizontal movement is locked\n     * @type Boolean\n     * @default\n     */ lockMovementX: false,\n        /**\n     * When `true`, object vertical movement is locked\n     * @type Boolean\n     * @default\n     */ lockMovementY: false,\n        /**\n     * When `true`, object rotation is locked\n     * @type Boolean\n     * @default\n     */ lockRotation: false,\n        /**\n     * When `true`, object horizontal scaling is locked\n     * @type Boolean\n     * @default\n     */ lockScalingX: false,\n        /**\n     * When `true`, object vertical scaling is locked\n     * @type Boolean\n     * @default\n     */ lockScalingY: false,\n        /**\n     * When `true`, object horizontal skewing is locked\n     * @type Boolean\n     * @default\n     */ lockSkewingX: false,\n        /**\n     * When `true`, object vertical skewing is locked\n     * @type Boolean\n     * @default\n     */ lockSkewingY: false,\n        /**\n     * When `true`, object cannot be flipped by scaling into negative values\n     * @type Boolean\n     * @default\n     */ lockScalingFlip: false,\n        /**\n     * When `true`, object is not exported in OBJECT/JSON\n     * @since 1.6.3\n     * @type Boolean\n     * @default\n     */ excludeFromExport: false,\n        /**\n     * When `true`, object is cached on an additional canvas.\n     * When `false`, object is not cached unless necessary ( clipPath )\n     * default to true\n     * @since 1.7.0\n     * @type Boolean\n     * @default true\n     */ objectCaching: objectCaching,\n        /**\n     * When `true`, object properties are checked for cache invalidation. In some particular\n     * situation you may want this to be disabled ( spray brush, very big, groups)\n     * or if your application does not allow you to modify properties for groups child you want\n     * to disable it for groups.\n     * default to false\n     * since 1.7.0\n     * @type Boolean\n     * @default false\n     */ statefullCache: false,\n        /**\n     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\n     * too much and will be redrawn with correct details at the end of scaling.\n     * this setting is performance and application dependant.\n     * default to true\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */ noScaleCache: true,\n        /**\n     * When `false`, the stoke width will scale with the object.\n     * When `true`, the stroke will always match the exact pixel size entered for stroke width.\n     * this Property does not work on Text classes or drawing call that uses strokeText,fillText methods\n     * default to false\n     * @since 2.6.0\n     * @type Boolean\n     * @default false\n     * @type Boolean\n     * @default false\n     */ strokeUniform: false,\n        /**\n     * When set to `true`, object's cache will be rerendered next render call.\n     * since 1.7.0\n     * @type Boolean\n     * @default true\n     */ dirty: true,\n        /**\n     * keeps the value of the last hovered corner during mouse move.\n     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\n     * It should be private, but there is no harm in using it as\n     * a read-only property.\n     * @type number|string|any\n     * @default 0\n     */ __corner: 0,\n        /**\n     * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\n     * @type String\n     * @default\n     */ paintFirst: \"fill\",\n        /**\n     * When 'down', object is set to active on mousedown/touchstart\n     * When 'up', object is set to active on mouseup/touchend\n     * Experimental. Let's see if this breaks anything before supporting officially\n     * @private\n     * since 4.4.0\n     * @type String\n     * @default 'down'\n     */ activeOn: \"down\",\n        /**\n     * List of properties to consider when checking if state\n     * of an object is changed (fabric.Object#hasStateChanged)\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */ stateProperties: (\"top left width height scaleX scaleY flipX flipY originX originY transformMatrix \" + \"stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit \" + \"angle opacity fill globalCompositeOperation shadow visible backgroundColor \" + \"skewX skewY fillRule paintFirst clipPath strokeUniform\").split(\" \"),\n        /**\n     * List of properties to consider when checking if cache needs refresh\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n     * and refreshed at the next render\n     * @type Array\n     */ cacheProperties: (\"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform\" + \" strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath\").split(\" \"),\n        /**\n     * List of properties to consider for animating colors.\n     * @type Array\n     */ colorProperties: \"fill stroke backgroundColor\".split(\" \"),\n        /**\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\n     * the clipPath object gets used when the object has rendered, and the context is placed in the center\n     * of the object cacheCanvas.\n     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\n     * @type fabric.Object\n     */ clipPath: undefined,\n        /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will make the object clip to the outside of the clipPath\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */ inverted: false,\n        /**\n     * Meaningful ONLY when the object is used as clipPath.\n     * if true, the clipPath will have its top and left relative to canvas, and will\n     * not be influenced by the object transform. This will make the clipPath relative\n     * to the canvas, but clipping just a particular object.\n     * WARNING this is beta, this feature may change or be renamed.\n     * since 2.4.0\n     * @type boolean\n     * @default false\n     */ absolutePositioned: false,\n        /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */ initialize: function(options) {\n            if (options) {\n                this.setOptions(options);\n            }\n        },\n        /**\n     * Create a the canvas used to keep the cached copy of the object\n     * @private\n     */ _createCacheCanvas: function() {\n            this._cacheProperties = {};\n            this._cacheCanvas = fabric.util.createCanvasElement();\n            this._cacheContext = this._cacheCanvas.getContext(\"2d\");\n            this._updateCacheCanvas();\n            // if canvas gets created, is empty, so dirty.\n            this.dirty = true;\n        },\n        /**\n     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\n     * and each side do not cross fabric.cacheSideLimit\n     * those numbers are configurable so that you can get as much detail as you want\n     * making bargain with performances.\n     * @param {Object} dims\n     * @param {Object} dims.width width of canvas\n     * @param {Object} dims.height height of canvas\n     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */ _limitCacheSize: function(dims) {\n            var perfLimitSizeTotal = fabric.perfLimitSizeTotal, width = dims.width, height = dims.height, max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\n            if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\n                if (width < min) {\n                    dims.width = min;\n                }\n                if (height < min) {\n                    dims.height = min;\n                }\n                return dims;\n            }\n            var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal), capValue = fabric.util.capValue, x = capValue(min, limitedDims.x, max), y = capValue(min, limitedDims.y, max);\n            if (width > x) {\n                dims.zoomX /= width / x;\n                dims.width = x;\n                dims.capped = true;\n            }\n            if (height > y) {\n                dims.zoomY /= height / y;\n                dims.height = y;\n                dims.capped = true;\n            }\n            return dims;\n        },\n        /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @return {Object}.x width of object to be cached\n     * @return {Object}.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */ _getCacheCanvasDimensions: function() {\n            var objectScale = this.getTotalObjectScaling(), // caculate dimensions without skewing\n            dim = this._getTransformedDimensions(0, 0), neededX = dim.x * objectScale.scaleX / this.scaleX, neededY = dim.y * objectScale.scaleY / this.scaleY;\n            return {\n                // for sure this ALIASING_LIMIT is slightly creating problem\n                // in situation in which the cache canvas gets an upper limit\n                // also objectScale contains already scaleX and scaleY\n                width: neededX + ALIASING_LIMIT,\n                height: neededY + ALIASING_LIMIT,\n                zoomX: objectScale.scaleX,\n                zoomY: objectScale.scaleY,\n                x: neededX,\n                y: neededY\n            };\n        },\n        /**\n     * Update width and height of the canvas for cache\n     * returns true or false if canvas needed resize.\n     * @private\n     * @return {Boolean} true if the canvas has been resized\n     */ _updateCacheCanvas: function() {\n            var targetCanvas = this.canvas;\n            if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n                var target = targetCanvas._currentTransform.target, action = targetCanvas._currentTransform.action;\n                if (this === target && action.slice && action.slice(0, 5) === \"scale\") {\n                    return false;\n                }\n            }\n            var canvas = this._cacheCanvas, dims = this._limitCacheSize(this._getCacheCanvasDimensions()), minCacheSize = fabric.minCacheSideLimit, width = dims.width, height = dims.height, drawingWidth, drawingHeight, zoomX = dims.zoomX, zoomY = dims.zoomY, dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight, zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY, shouldRedraw = dimensionsChanged || zoomChanged, additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\n            if (dimensionsChanged) {\n                var canvasWidth = this._cacheCanvas.width, canvasHeight = this._cacheCanvas.height, sizeGrowing = width > canvasWidth || height > canvasHeight, sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) && canvasWidth > minCacheSize && canvasHeight > minCacheSize;\n                shouldResizeCanvas = sizeGrowing || sizeShrinking;\n                if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\n                    additionalWidth = width * 0.1;\n                    additionalHeight = height * 0.1;\n                }\n            }\n            if (this instanceof fabric.Text && this.path) {\n                shouldRedraw = true;\n                shouldResizeCanvas = true;\n                additionalWidth += this.getHeightOfLine(0) * this.zoomX;\n                additionalHeight += this.getHeightOfLine(0) * this.zoomY;\n            }\n            if (shouldRedraw) {\n                if (shouldResizeCanvas) {\n                    canvas.width = Math.ceil(width + additionalWidth);\n                    canvas.height = Math.ceil(height + additionalHeight);\n                } else {\n                    this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\n                    this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\n                }\n                drawingWidth = dims.x / 2;\n                drawingHeight = dims.y / 2;\n                this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n                this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n                this.cacheWidth = width;\n                this.cacheHeight = height;\n                this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\n                this._cacheContext.scale(zoomX, zoomY);\n                this.zoomX = zoomX;\n                this.zoomY = zoomY;\n                return true;\n            }\n            return false;\n        },\n        /**\n     * Sets object's properties from options\n     * @param {Object} [options] Options object\n     */ setOptions: function(options) {\n            this._setOptions(options);\n            this._initGradient(options.fill, \"fill\");\n            this._initGradient(options.stroke, \"stroke\");\n            this._initPattern(options.fill, \"fill\");\n            this._initPattern(options.stroke, \"stroke\");\n        },\n        /**\n     * Transforms context when rendering an object\n     * @param {CanvasRenderingContext2D} ctx Context\n     */ transform: function(ctx) {\n            var needFullTransform = this.group && !this.group._transformDone || this.group && this.canvas && ctx === this.canvas.contextTop;\n            var m = this.calcTransformMatrix(!needFullTransform);\n            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        },\n        /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS, object = {\n                type: this.type,\n                version: fabric.version,\n                originX: this.originX,\n                originY: this.originY,\n                left: toFixed(this.left, NUM_FRACTION_DIGITS),\n                top: toFixed(this.top, NUM_FRACTION_DIGITS),\n                width: toFixed(this.width, NUM_FRACTION_DIGITS),\n                height: toFixed(this.height, NUM_FRACTION_DIGITS),\n                fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,\n                stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,\n                strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n                strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\n                strokeLineCap: this.strokeLineCap,\n                strokeDashOffset: this.strokeDashOffset,\n                strokeLineJoin: this.strokeLineJoin,\n                strokeUniform: this.strokeUniform,\n                strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n                scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n                scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n                angle: toFixed(this.angle, NUM_FRACTION_DIGITS),\n                flipX: this.flipX,\n                flipY: this.flipY,\n                opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),\n                shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,\n                visible: this.visible,\n                backgroundColor: this.backgroundColor,\n                fillRule: this.fillRule,\n                paintFirst: this.paintFirst,\n                globalCompositeOperation: this.globalCompositeOperation,\n                skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),\n                skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS)\n            };\n            if (this.clipPath && !this.clipPath.excludeFromExport) {\n                object.clipPath = this.clipPath.toObject(propertiesToInclude);\n                object.clipPath.inverted = this.clipPath.inverted;\n                object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\n            }\n            fabric.util.populateWithProperties(this, object, propertiesToInclude);\n            if (!this.includeDefaultValues) {\n                object = this._removeDefaultValues(object);\n            }\n            return object;\n        },\n        /**\n     * Returns (dataless) object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */ toDatalessObject: function(propertiesToInclude) {\n            // will be overwritten by subclasses\n            return this.toObject(propertiesToInclude);\n        },\n        /**\n     * @private\n     * @param {Object} object\n     */ _removeDefaultValues: function(object) {\n            var prototype = fabric.util.getKlass(object.type).prototype, stateProperties = prototype.stateProperties;\n            stateProperties.forEach(function(prop) {\n                if (prop === \"left\" || prop === \"top\") {\n                    return;\n                }\n                if (object[prop] === prototype[prop]) {\n                    delete object[prop];\n                }\n                // basically a check for [] === []\n                if (Array.isArray(object[prop]) && Array.isArray(prototype[prop]) && object[prop].length === 0 && prototype[prop].length === 0) {\n                    delete object[prop];\n                }\n            });\n            return object;\n        },\n        /**\n     * Returns a string representation of an instance\n     * @return {String}\n     */ toString: function() {\n            return \"#<fabric.\" + capitalize(this.type) + \">\";\n        },\n        /**\n     * Return the object scale factor counting also the group scaling\n     * @return {Object} object with scaleX and scaleY properties\n     */ getObjectScaling: function() {\n            // if the object is a top level one, on the canvas, we go for simple aritmetic\n            // otherwise the complex method with angles will return approximations and decimals\n            // and will likely kill the cache when not needed\n            // https://github.com/fabricjs/fabric.js/issues/7157\n            if (!this.group) {\n                return {\n                    scaleX: this.scaleX,\n                    scaleY: this.scaleY\n                };\n            }\n            // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n            var options = fabric.util.qrDecompose(this.calcTransformMatrix());\n            return {\n                scaleX: Math.abs(options.scaleX),\n                scaleY: Math.abs(options.scaleY)\n            };\n        },\n        /**\n     * Return the object scale factor counting also the group scaling, zoom and retina\n     * @return {Object} object with scaleX and scaleY properties\n     */ getTotalObjectScaling: function() {\n            var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\n            if (this.canvas) {\n                var zoom = this.canvas.getZoom();\n                var retina = this.canvas.getRetinaScaling();\n                scaleX *= zoom * retina;\n                scaleY *= zoom * retina;\n            }\n            return {\n                scaleX: scaleX,\n                scaleY: scaleY\n            };\n        },\n        /**\n     * Return the object opacity counting also the group property\n     * @return {Number}\n     */ getObjectOpacity: function() {\n            var opacity = this.opacity;\n            if (this.group) {\n                opacity *= this.group.getObjectOpacity();\n            }\n            return opacity;\n        },\n        /**\n     * @private\n     * @param {String} key\n     * @param {*} value\n     * @return {fabric.Object} thisArg\n     */ _set: function(key, value) {\n            var shouldConstrainValue = key === \"scaleX\" || key === \"scaleY\", isChanged = this[key] !== value, groupNeedsUpdate = false;\n            if (shouldConstrainValue) {\n                value = this._constrainScale(value);\n            }\n            if (key === \"scaleX\" && value < 0) {\n                this.flipX = !this.flipX;\n                value *= -1;\n            } else if (key === \"scaleY\" && value < 0) {\n                this.flipY = !this.flipY;\n                value *= -1;\n            } else if (key === \"shadow\" && value && !(value instanceof fabric.Shadow)) {\n                value = new fabric.Shadow(value);\n            } else if (key === \"dirty\" && this.group) {\n                this.group.set(\"dirty\", value);\n            }\n            this[key] = value;\n            if (isChanged) {\n                groupNeedsUpdate = this.group && this.group.isOnACache();\n                if (this.cacheProperties.indexOf(key) > -1) {\n                    this.dirty = true;\n                    groupNeedsUpdate && this.group.set(\"dirty\", true);\n                } else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\n                    this.group.set(\"dirty\", true);\n                }\n            }\n            return this;\n        },\n        /**\n     * This callback function is called by the parent group of an object every\n     * time a non-delegated property changes on the group. It is passed the key\n     * and value as parameters. Not adding in this function's signature to avoid\n     * Travis build error about unused variables.\n     */ setOnGroup: function() {\n        // implemented by sub-classes, as needed.\n        },\n        /**\n     * Retrieves viewportTransform from Object's canvas if possible\n     * @method getViewportTransform\n     * @memberOf fabric.Object.prototype\n     * @return {Array}\n     */ getViewportTransform: function() {\n            if (this.canvas && this.canvas.viewportTransform) {\n                return this.canvas.viewportTransform;\n            }\n            return fabric.iMatrix.concat();\n        },\n        /*\n     * @private\n     * return if the object would be visible in rendering\n     * @memberOf fabric.Object.prototype\n     * @return {Boolean}\n     */ isNotVisible: function() {\n            return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;\n        },\n        /**\n     * Renders an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ render: function(ctx) {\n            // do not render if width/height are zeros or object is not visible\n            if (this.isNotVisible()) {\n                return;\n            }\n            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n                return;\n            }\n            ctx.save();\n            this._setupCompositeOperation(ctx);\n            this.drawSelectionBackground(ctx);\n            this.transform(ctx);\n            this._setOpacity(ctx);\n            this._setShadow(ctx, this);\n            if (this.shouldCache()) {\n                this.renderCache();\n                this.drawCacheOnCanvas(ctx);\n            } else {\n                this._removeCacheCanvas();\n                this.dirty = false;\n                this.drawObject(ctx);\n                if (this.objectCaching && this.statefullCache) {\n                    this.saveState({\n                        propertySet: \"cacheProperties\"\n                    });\n                }\n            }\n            ctx.restore();\n        },\n        renderCache: function(options) {\n            options = options || {};\n            if (!this._cacheCanvas || !this._cacheContext) {\n                this._createCacheCanvas();\n            }\n            if (this.isCacheDirty()) {\n                this.statefullCache && this.saveState({\n                    propertySet: \"cacheProperties\"\n                });\n                this.drawObject(this._cacheContext, options.forClipping);\n                this.dirty = false;\n            }\n        },\n        /**\n     * Remove cacheCanvas and its dimensions from the objects\n     */ _removeCacheCanvas: function() {\n            this._cacheCanvas = null;\n            this._cacheContext = null;\n            this.cacheWidth = 0;\n            this.cacheHeight = 0;\n        },\n        /**\n     * return true if the object will draw a stroke\n     * Does not consider text styles. This is just a shortcut used at rendering time\n     * We want it to be an approximation and be fast.\n     * wrote to avoid extra caching, it has to return true when stroke happens,\n     * can guess when it will not happen at 100% chance, does not matter if it misses\n     * some use case where the stroke is invisible.\n     * @since 3.0.0\n     * @returns Boolean\n     */ hasStroke: function() {\n            return this.stroke && this.stroke !== \"transparent\" && this.strokeWidth !== 0;\n        },\n        /**\n     * return true if the object will draw a fill\n     * Does not consider text styles. This is just a shortcut used at rendering time\n     * We want it to be an approximation and be fast.\n     * wrote to avoid extra caching, it has to return true when fill happens,\n     * can guess when it will not happen at 100% chance, does not matter if it misses\n     * some use case where the fill is invisible.\n     * @since 3.0.0\n     * @returns Boolean\n     */ hasFill: function() {\n            return this.fill && this.fill !== \"transparent\";\n        },\n        /**\n     * When set to `true`, force the object to have its own cache, even if it is inside a group\n     * it may be needed when your object behave in a particular way on the cache and always needs\n     * its own isolated canvas to render correctly.\n     * Created to be overridden\n     * since 1.7.12\n     * @returns Boolean\n     */ needsItsOwnCache: function() {\n            if (this.paintFirst === \"stroke\" && this.hasFill() && this.hasStroke() && typeof this.shadow === \"object\") {\n                return true;\n            }\n            if (this.clipPath) {\n                return true;\n            }\n            return false;\n        },\n        /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\n     * @return {Boolean}\n     */ shouldCache: function() {\n            this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache());\n            return this.ownCaching;\n        },\n        /**\n     * Check if this object or a child object will cast a shadow\n     * used by Group.shouldCache to know if child has a shadow recursively\n     * @return {Boolean}\n     */ willDrawShadow: function() {\n            return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n        },\n        /**\n     * Execute the drawing operation for an object clipPath\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Object} clipPath\n     */ drawClipPathOnCache: function(ctx, clipPath) {\n            ctx.save();\n            // DEBUG: uncomment this line, comment the following\n            // ctx.globalAlpha = 0.4\n            if (clipPath.inverted) {\n                ctx.globalCompositeOperation = \"destination-out\";\n            } else {\n                ctx.globalCompositeOperation = \"destination-in\";\n            }\n            //ctx.scale(1 / 2, 1 / 2);\n            if (clipPath.absolutePositioned) {\n                var m = fabric.util.invertTransform(this.calcTransformMatrix());\n                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n            }\n            clipPath.transform(ctx);\n            ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n            ctx.drawImage(clipPath._cacheCanvas, -clipPath.cacheTranslationX, -clipPath.cacheTranslationY);\n            ctx.restore();\n        },\n        /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ drawObject: function(ctx, forClipping) {\n            var originalFill = this.fill, originalStroke = this.stroke;\n            if (forClipping) {\n                this.fill = \"black\";\n                this.stroke = \"\";\n                this._setClippingProperties(ctx);\n            } else {\n                this._renderBackground(ctx);\n            }\n            this._render(ctx);\n            this._drawClipPath(ctx, this.clipPath);\n            this.fill = originalFill;\n            this.stroke = originalStroke;\n        },\n        /**\n     * Prepare clipPath state and cache and draw it on instance's cache\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {fabric.Object} clipPath\n     */ _drawClipPath: function(ctx, clipPath) {\n            if (!clipPath) {\n                return;\n            }\n            // needed to setup a couple of variables\n            // path canvas gets overridden with this one.\n            // TODO find a better solution?\n            clipPath.canvas = this.canvas;\n            clipPath.shouldCache();\n            clipPath._transformDone = true;\n            clipPath.renderCache({\n                forClipping: true\n            });\n            this.drawClipPathOnCache(ctx, clipPath);\n        },\n        /**\n     * Paint the cached copy of the object on the target context.\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ drawCacheOnCanvas: function(ctx) {\n            ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n            ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n        },\n        /**\n     * Check if cache is dirty\n     * @param {Boolean} skipCanvas skip canvas checks because this object is painted\n     * on parent canvas.\n     */ isCacheDirty: function(skipCanvas) {\n            if (this.isNotVisible()) {\n                return false;\n            }\n            if (this._cacheCanvas && this._cacheContext && !skipCanvas && this._updateCacheCanvas()) {\n                // in this case the context is already cleared.\n                return true;\n            } else {\n                if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged(\"cacheProperties\")) {\n                    if (this._cacheCanvas && this._cacheContext && !skipCanvas) {\n                        var width = this.cacheWidth / this.zoomX;\n                        var height = this.cacheHeight / this.zoomY;\n                        this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n     * Draws a background for the object big as its untransformed dimensions\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderBackground: function(ctx) {\n            if (!this.backgroundColor) {\n                return;\n            }\n            var dim = this._getNonTransformedDimensions();\n            ctx.fillStyle = this.backgroundColor;\n            ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n            // if there is background color no other shadows\n            // should be casted\n            this._removeShadow(ctx);\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _setOpacity: function(ctx) {\n            if (this.group && !this.group._transformDone) {\n                ctx.globalAlpha = this.getObjectOpacity();\n            } else {\n                ctx.globalAlpha *= this.opacity;\n            }\n        },\n        _setStrokeStyles: function(ctx, decl) {\n            var stroke = decl.stroke;\n            if (stroke) {\n                ctx.lineWidth = decl.strokeWidth;\n                ctx.lineCap = decl.strokeLineCap;\n                ctx.lineDashOffset = decl.strokeDashOffset;\n                ctx.lineJoin = decl.strokeLineJoin;\n                ctx.miterLimit = decl.strokeMiterLimit;\n                if (stroke.toLive) {\n                    if (stroke.gradientUnits === \"percentage\" || stroke.gradientTransform || stroke.patternTransform) {\n                        // need to transform gradient in a pattern.\n                        // this is a slow process. If you are hitting this codepath, and the object\n                        // is not using caching, you should consider switching it on.\n                        // we need a canvas as big as the current object caching canvas.\n                        this._applyPatternForTransformedGradient(ctx, stroke);\n                    } else {\n                        // is a simple gradient or pattern\n                        ctx.strokeStyle = stroke.toLive(ctx, this);\n                        this._applyPatternGradientTransform(ctx, stroke);\n                    }\n                } else {\n                    // is a color\n                    ctx.strokeStyle = decl.stroke;\n                }\n            }\n        },\n        _setFillStyles: function(ctx, decl) {\n            var fill = decl.fill;\n            if (fill) {\n                if (fill.toLive) {\n                    ctx.fillStyle = fill.toLive(ctx, this);\n                    this._applyPatternGradientTransform(ctx, decl.fill);\n                } else {\n                    ctx.fillStyle = fill;\n                }\n            }\n        },\n        _setClippingProperties: function(ctx) {\n            ctx.globalAlpha = 1;\n            ctx.strokeStyle = \"transparent\";\n            ctx.fillStyle = \"#000000\";\n        },\n        /**\n     * @private\n     * Sets line dash\n     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\n     * @param {Array} dashArray array representing dashes\n     */ _setLineDash: function(ctx, dashArray) {\n            if (!dashArray || dashArray.length === 0) {\n                return;\n            }\n            // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n            if (1 & dashArray.length) {\n                dashArray.push.apply(dashArray, dashArray);\n            }\n            ctx.setLineDash(dashArray);\n        },\n        /**\n     * Renders controls and borders for the object\n     * the context here is not transformed\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     */ _renderControls: function(ctx, styleOverride) {\n            var vpt = this.getViewportTransform(), matrix = this.calcTransformMatrix(), options, drawBorders, drawControls;\n            styleOverride = styleOverride || {};\n            drawBorders = typeof styleOverride.hasBorders !== \"undefined\" ? styleOverride.hasBorders : this.hasBorders;\n            drawControls = typeof styleOverride.hasControls !== \"undefined\" ? styleOverride.hasControls : this.hasControls;\n            matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\n            options = fabric.util.qrDecompose(matrix);\n            ctx.save();\n            ctx.translate(options.translateX, options.translateY);\n            ctx.lineWidth = 1 * this.borderScaleFactor;\n            if (!this.group) {\n                ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n            }\n            if (this.flipX) {\n                options.angle -= 180;\n            }\n            ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n            if (styleOverride.forActiveSelection || this.group) {\n                drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\n            } else {\n                drawBorders && this.drawBorders(ctx, styleOverride);\n            }\n            drawControls && this.drawControls(ctx, styleOverride);\n            ctx.restore();\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _setShadow: function(ctx) {\n            if (!this.shadow) {\n                return;\n            }\n            var shadow = this.shadow, canvas = this.canvas, scaling, multX = canvas && canvas.viewportTransform[0] || 1, multY = canvas && canvas.viewportTransform[3] || 1;\n            if (shadow.nonScaling) {\n                scaling = {\n                    scaleX: 1,\n                    scaleY: 1\n                };\n            } else {\n                scaling = this.getObjectScaling();\n            }\n            if (canvas && canvas._isRetinaScaling()) {\n                multX *= fabric.devicePixelRatio;\n                multY *= fabric.devicePixelRatio;\n            }\n            ctx.shadowColor = shadow.color;\n            ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant * (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\n            ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\n            ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _removeShadow: function(ctx) {\n            if (!this.shadow) {\n                return;\n            }\n            ctx.shadowColor = \"\";\n            ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} filler fabric.Pattern or fabric.Gradient\n     * @return {Object} offset.offsetX offset for text rendering\n     * @return {Object} offset.offsetY offset for text rendering\n     */ _applyPatternGradientTransform: function(ctx, filler) {\n            if (!filler || !filler.toLive) {\n                return {\n                    offsetX: 0,\n                    offsetY: 0\n                };\n            }\n            var t = filler.gradientTransform || filler.patternTransform;\n            var offsetX = -this.width / 2 + filler.offsetX || 0, offsetY = -this.height / 2 + filler.offsetY || 0;\n            if (filler.gradientUnits === \"percentage\") {\n                ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n            } else {\n                ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n            }\n            if (t) {\n                ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n            }\n            return {\n                offsetX: offsetX,\n                offsetY: offsetY\n            };\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderPaintInOrder: function(ctx) {\n            if (this.paintFirst === \"stroke\") {\n                this._renderStroke(ctx);\n                this._renderFill(ctx);\n            } else {\n                this._renderFill(ctx);\n                this._renderStroke(ctx);\n            }\n        },\n        /**\n     * @private\n     * function that actually render something on the context.\n     * empty here to allow Obects to work on tests to benchmark fabric functionalites\n     * not related to rendering\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _render: function() {},\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderFill: function(ctx) {\n            if (!this.fill) {\n                return;\n            }\n            ctx.save();\n            this._setFillStyles(ctx, this);\n            if (this.fillRule === \"evenodd\") {\n                ctx.fill(\"evenodd\");\n            } else {\n                ctx.fill();\n            }\n            ctx.restore();\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderStroke: function(ctx) {\n            if (!this.stroke || this.strokeWidth === 0) {\n                return;\n            }\n            if (this.shadow && !this.shadow.affectStroke) {\n                this._removeShadow(ctx);\n            }\n            ctx.save();\n            if (this.strokeUniform && this.group) {\n                var scaling = this.getObjectScaling();\n                ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);\n            } else if (this.strokeUniform) {\n                ctx.scale(1 / this.scaleX, 1 / this.scaleY);\n            }\n            this._setLineDash(ctx, this.strokeDashArray);\n            this._setStrokeStyles(ctx, this);\n            ctx.stroke();\n            ctx.restore();\n        },\n        /**\n     * This function try to patch the missing gradientTransform on canvas gradients.\n     * transforming a context to transform the gradient, is going to transform the stroke too.\n     * we want to transform the gradient but not the stroke operation, so we create\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size\n     * is limited.\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {fabric.Gradient} filler a fabric gradient instance\n     */ _applyPatternForTransformedGradient: function(ctx, filler) {\n            var dims = this._limitCacheSize(this._getCacheCanvasDimensions()), pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(), width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;\n            pCanvas.width = width;\n            pCanvas.height = height;\n            pCtx = pCanvas.getContext(\"2d\");\n            pCtx.beginPath();\n            pCtx.moveTo(0, 0);\n            pCtx.lineTo(width, 0);\n            pCtx.lineTo(width, height);\n            pCtx.lineTo(0, height);\n            pCtx.closePath();\n            pCtx.translate(width / 2, height / 2);\n            pCtx.scale(dims.zoomX / this.scaleX / retinaScaling, dims.zoomY / this.scaleY / retinaScaling);\n            this._applyPatternGradientTransform(pCtx, filler);\n            pCtx.fillStyle = filler.toLive(ctx);\n            pCtx.fill();\n            ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);\n            ctx.scale(retinaScaling * this.scaleX / dims.zoomX, retinaScaling * this.scaleY / dims.zoomY);\n            ctx.strokeStyle = pCtx.createPattern(pCanvas, \"no-repeat\");\n        },\n        /**\n     * This function is an helper for svg import. it returns the center of the object in the svg\n     * untransformed coordinates\n     * @private\n     * @return {Object} center point from element coordinates\n     */ _findCenterFromElement: function() {\n            return {\n                x: this.left + this.width / 2,\n                y: this.top + this.height / 2\n            };\n        },\n        /**\n     * This function is an helper for svg import. it decompose the transformMatrix\n     * and assign properties to object.\n     * untransformed coordinates\n     * @private\n     * @chainable\n     */ _assignTransformMatrixProps: function() {\n            if (this.transformMatrix) {\n                var options = fabric.util.qrDecompose(this.transformMatrix);\n                this.flipX = false;\n                this.flipY = false;\n                this.set(\"scaleX\", options.scaleX);\n                this.set(\"scaleY\", options.scaleY);\n                this.angle = options.angle;\n                this.skewX = options.skewX;\n                this.skewY = 0;\n            }\n        },\n        /**\n     * This function is an helper for svg import. it removes the transform matrix\n     * and set to object properties that fabricjs can handle\n     * @private\n     * @param {Object} preserveAspectRatioOptions\n     * @return {thisArg}\n     */ _removeTransformMatrix: function(preserveAspectRatioOptions) {\n            var center = this._findCenterFromElement();\n            if (this.transformMatrix) {\n                this._assignTransformMatrixProps();\n                center = fabric.util.transformPoint(center, this.transformMatrix);\n            }\n            this.transformMatrix = null;\n            if (preserveAspectRatioOptions) {\n                this.scaleX *= preserveAspectRatioOptions.scaleX;\n                this.scaleY *= preserveAspectRatioOptions.scaleY;\n                this.cropX = preserveAspectRatioOptions.cropX;\n                this.cropY = preserveAspectRatioOptions.cropY;\n                center.x += preserveAspectRatioOptions.offsetLeft;\n                center.y += preserveAspectRatioOptions.offsetTop;\n                this.width = preserveAspectRatioOptions.width;\n                this.height = preserveAspectRatioOptions.height;\n            }\n            this.setPositionByOrigin(center, \"center\", \"center\");\n        },\n        /**\n     * Clones an instance, using a callback method will work for every object.\n     * @param {Function} callback Callback is invoked with a clone as a first argument\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     */ clone: function(callback, propertiesToInclude) {\n            var objectForm = this.toObject(propertiesToInclude);\n            if (this.constructor.fromObject) {\n                this.constructor.fromObject(objectForm, callback);\n            } else {\n                fabric.Object._fromObject(\"Object\", objectForm, callback);\n            }\n        },\n        /**\n     * Creates an instance of fabric.Image out of an object\n     * makes use of toCanvasElement.\n     * Once this method was based on toDataUrl and loadImage, so it also had a quality\n     * and format option. toCanvasElement is faster and produce no loss of quality.\n     * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\n     * toCanvasElement and then toBlob from the obtained canvas is also a good option.\n     * This method is sync now, but still support the callback because we did not want to break.\n     * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.\n     * @param {Function} callback callback, invoked with an instance as a first argument\n     * @param {Object} [options] for clone as image, passed to toDataURL\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {fabric.Object} thisArg\n     */ cloneAsImage: function(callback, options) {\n            var canvasEl = this.toCanvasElement(options);\n            if (callback) {\n                callback(new fabric.Image(canvasEl));\n            }\n            return this;\n        },\n        /**\n     * Converts an object into a HTMLCanvas element\n     * @param {Object} options Options object\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object\n     */ toCanvasElement: function(options) {\n            options || (options = {});\n            var utils = fabric.util, origParams = utils.saveObjectTransform(this), originalGroup = this.group, originalShadow = this.shadow, abs = Math.abs, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\n            delete this.group;\n            if (options.withoutTransform) {\n                utils.resetObjectTransform(this);\n            }\n            if (options.withoutShadow) {\n                this.shadow = null;\n            }\n            var el = fabric.util.createCanvasElement(), // skip canvas zoom and calculate with setCoords now.\n            boundingRect = this.getBoundingRect(true, true), shadow = this.shadow, scaling, shadowOffset = {\n                x: 0,\n                y: 0\n            }, shadowBlur, width, height;\n            if (shadow) {\n                shadowBlur = shadow.blur;\n                if (shadow.nonScaling) {\n                    scaling = {\n                        scaleX: 1,\n                        scaleY: 1\n                    };\n                } else {\n                    scaling = this.getObjectScaling();\n                }\n                // consider non scaling shadow.\n                shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX);\n                shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY);\n            }\n            width = boundingRect.width + shadowOffset.x;\n            height = boundingRect.height + shadowOffset.y;\n            // if the current width/height is not an integer\n            // we need to make it so.\n            el.width = Math.ceil(width);\n            el.height = Math.ceil(height);\n            var canvas = new fabric.StaticCanvas(el, {\n                enableRetinaScaling: false,\n                renderOnAddRemove: false,\n                skipOffscreen: false\n            });\n            if (options.format === \"jpeg\") {\n                canvas.backgroundColor = \"#fff\";\n            }\n            this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), \"center\", \"center\");\n            var originalCanvas = this.canvas;\n            canvas.add(this);\n            var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n            this.shadow = originalShadow;\n            this.set(\"canvas\", originalCanvas);\n            if (originalGroup) {\n                this.group = originalGroup;\n            }\n            this.set(origParams).setCoords();\n            // canvas.dispose will call image.dispose that will nullify the elements\n            // since this canvas is a simple element for the process, we remove references\n            // to objects in this way in order to avoid object trashing.\n            canvas._objects = [];\n            canvas.dispose();\n            canvas = null;\n            return canvasEl;\n        },\n        /**\n     * Converts an object into a data-url-like string\n     * @param {Object} options Options object\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\n     */ toDataURL: function(options) {\n            options || (options = {});\n            return fabric.util.toDataURL(this.toCanvasElement(options), options.format || \"png\", options.quality || 1);\n        },\n        /**\n     * Returns true if specified type is identical to the type of an instance\n     * @param {String} type Type to check against\n     * @return {Boolean}\n     */ isType: function(type) {\n            return arguments.length > 1 ? Array.from(arguments).includes(this.type) : this.type === type;\n        },\n        /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance (is 1 unless subclassed)\n     */ complexity: function() {\n            return 1;\n        },\n        /**\n     * Returns a JSON representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} JSON\n     */ toJSON: function(propertiesToInclude) {\n            // delegate, not alias\n            return this.toObject(propertiesToInclude);\n        },\n        /**\n     * Sets \"angle\" of an instance with centered rotation\n     * @param {Number} angle Angle value (in degrees)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ rotate: function(angle) {\n            var shouldCenterOrigin = (this.originX !== \"center\" || this.originY !== \"center\") && this.centeredRotation;\n            if (shouldCenterOrigin) {\n                this._setOriginToCenter();\n            }\n            this.set(\"angle\", angle);\n            if (shouldCenterOrigin) {\n                this._resetOrigin();\n            }\n            return this;\n        },\n        /**\n     * Centers object horizontally on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ centerH: function() {\n            this.canvas && this.canvas.centerObjectH(this);\n            return this;\n        },\n        /**\n     * Centers object horizontally on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ viewportCenterH: function() {\n            this.canvas && this.canvas.viewportCenterObjectH(this);\n            return this;\n        },\n        /**\n     * Centers object vertically on canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ centerV: function() {\n            this.canvas && this.canvas.centerObjectV(this);\n            return this;\n        },\n        /**\n     * Centers object vertically on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ viewportCenterV: function() {\n            this.canvas && this.canvas.viewportCenterObjectV(this);\n            return this;\n        },\n        /**\n     * Centers object vertically and horizontally on canvas to which is was added last\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ center: function() {\n            this.canvas && this.canvas.centerObject(this);\n            return this;\n        },\n        /**\n     * Centers object on current viewport of canvas to which it was added last.\n     * You might need to call `setCoords` on an object after centering, to update controls area.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ viewportCenter: function() {\n            this.canvas && this.canvas.viewportCenterObject(this);\n            return this;\n        },\n        /**\n     * Returns coordinates of a pointer relative to an object\n     * @param {Event} e Event to operate upon\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\n     * @return {Object} Coordinates of a pointer (x, y)\n     */ getLocalPointer: function(e, pointer) {\n            pointer = pointer || this.canvas.getPointer(e);\n            var pClicked = new fabric.Point(pointer.x, pointer.y), objectLeftTop = this._getLeftTopCoords();\n            if (this.angle) {\n                pClicked = fabric.util.rotatePoint(pClicked, objectLeftTop, degreesToRadians(-this.angle));\n            }\n            return {\n                x: pClicked.x - objectLeftTop.x,\n                y: pClicked.y - objectLeftTop.y\n            };\n        },\n        /**\n     * Sets canvas globalCompositeOperation for specific object\n     * custom composition operation for the particular object can be specified using globalCompositeOperation property\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\n     */ _setupCompositeOperation: function(ctx) {\n            if (this.globalCompositeOperation) {\n                ctx.globalCompositeOperation = this.globalCompositeOperation;\n            }\n        },\n        /**\n     * cancel instance's running animations\n     * override if necessary to dispose artifacts such as `clipPath`\n     */ dispose: function() {\n            if (fabric.runningAnimations) {\n                fabric.runningAnimations.cancelByTarget(this);\n            }\n        }\n    });\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\n    extend(fabric.Object.prototype, fabric.Observable);\n    /**\n   * Defines the number of fraction digits to use when serializing object values.\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type Number\n   */ fabric.Object.NUM_FRACTION_DIGITS = 2;\n    /**\n   * Defines which properties should be enlivened from the object passed to {@link fabric.Object._fromObject}\n   * @static\n   * @memberOf fabric.Object\n   * @constant\n   * @type string[]\n   */ fabric.Object.ENLIVEN_PROPS = [\n        \"clipPath\"\n    ];\n    fabric.Object._fromObject = function(className, object, callback, extraParam) {\n        var klass = fabric[className];\n        object = clone(object, true);\n        fabric.util.enlivenPatterns([\n            object.fill,\n            object.stroke\n        ], function(patterns) {\n            if (typeof patterns[0] !== \"undefined\") {\n                object.fill = patterns[0];\n            }\n            if (typeof patterns[1] !== \"undefined\") {\n                object.stroke = patterns[1];\n            }\n            fabric.util.enlivenObjectEnlivables(object, object, function() {\n                var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\n                callback && callback(instance);\n            });\n        });\n    };\n    /**\n   * Unique id used internally when creating SVG elements\n   * @static\n   * @memberOf fabric.Object\n   * @type Number\n   */ fabric.Object.__uid = 0;\n})( true ? exports : 0);\n(function() {\n    var degreesToRadians = fabric.util.degreesToRadians, originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n    }, originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n    };\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\n     * Translates the coordinates from a set of origin to another (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */ translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n            var x = point.x, y = point.y, offsetX, offsetY, dim;\n            if (typeof fromOriginX === \"string\") {\n                fromOriginX = originXOffset[fromOriginX];\n            } else {\n                fromOriginX -= 0.5;\n            }\n            if (typeof toOriginX === \"string\") {\n                toOriginX = originXOffset[toOriginX];\n            } else {\n                toOriginX -= 0.5;\n            }\n            offsetX = toOriginX - fromOriginX;\n            if (typeof fromOriginY === \"string\") {\n                fromOriginY = originYOffset[fromOriginY];\n            } else {\n                fromOriginY -= 0.5;\n            }\n            if (typeof toOriginY === \"string\") {\n                toOriginY = originYOffset[toOriginY];\n            } else {\n                toOriginY -= 0.5;\n            }\n            offsetY = toOriginY - fromOriginY;\n            if (offsetX || offsetY) {\n                dim = this._getTransformedDimensions();\n                x = point.x + offsetX * dim.x;\n                y = point.y + offsetY * dim.y;\n            }\n            return new fabric.Point(x, y);\n        },\n        /**\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */ translateToCenterPoint: function(point, originX, originY) {\n            var p = this.translateToGivenOrigin(point, originX, originY, \"center\", \"center\");\n            if (this.angle) {\n                return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n            }\n            return p;\n        },\n        /**\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\n     * @param {fabric.Point} center The point which corresponds to center of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */ translateToOriginPoint: function(center, originX, originY) {\n            var p = this.translateToGivenOrigin(center, \"center\", \"center\", originX, originY);\n            if (this.angle) {\n                return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n            }\n            return p;\n        },\n        /**\n     * Returns the real center coordinates of the object\n     * @return {fabric.Point}\n     */ getCenterPoint: function() {\n            var leftTop = new fabric.Point(this.left, this.top);\n            return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n        },\n        /**\n     * Returns the coordinates of the object based on center coordinates\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\n     * @return {fabric.Point}\n     */ // getOriginPoint: function(center) {\n        //   return this.translateToOriginPoint(center, this.originX, this.originY);\n        // },\n        /**\n     * Returns the coordinates of the object as if it has a different origin\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */ getPointByOrigin: function(originX, originY) {\n            var center = this.getCenterPoint();\n            return this.translateToOriginPoint(center, originX, originY);\n        },\n        /**\n     * Returns the point in local coordinates\n     * @param {fabric.Point} point The point relative to the global coordinate system\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {fabric.Point}\n     */ toLocalPoint: function(point, originX, originY) {\n            var center = this.getCenterPoint(), p, p2;\n            if (typeof originX !== \"undefined\" && typeof originY !== \"undefined\") {\n                p = this.translateToGivenOrigin(center, \"center\", \"center\", originX, originY);\n            } else {\n                p = new fabric.Point(this.left, this.top);\n            }\n            p2 = new fabric.Point(point.x, point.y);\n            if (this.angle) {\n                p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n            }\n            return p2.subtractEquals(p);\n        },\n        /**\n     * Returns the point in global coordinates\n     * @param {fabric.Point} The point relative to the local coordinate system\n     * @return {fabric.Point}\n     */ // toGlobalPoint: function(point) {\n        //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n        // },\n        /**\n     * Sets the position of the object taking into consideration the object's origin\n     * @param {fabric.Point} pos The new position of the object\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\n     * @return {void}\n     */ setPositionByOrigin: function(pos, originX, originY) {\n            var center = this.translateToCenterPoint(pos, originX, originY), position = this.translateToOriginPoint(center, this.originX, this.originY);\n            this.set(\"left\", position.x);\n            this.set(\"top\", position.y);\n        },\n        /**\n     * @param {String} to One of 'left', 'center', 'right'\n     */ adjustPosition: function(to) {\n            var angle = degreesToRadians(this.angle), hypotFull = this.getScaledWidth(), xFull = fabric.util.cos(angle) * hypotFull, yFull = fabric.util.sin(angle) * hypotFull, offsetFrom, offsetTo;\n            //TODO: this function does not consider mixed situation like top, center.\n            if (typeof this.originX === \"string\") {\n                offsetFrom = originXOffset[this.originX];\n            } else {\n                offsetFrom = this.originX - 0.5;\n            }\n            if (typeof to === \"string\") {\n                offsetTo = originXOffset[to];\n            } else {\n                offsetTo = to - 0.5;\n            }\n            this.left += xFull * (offsetTo - offsetFrom);\n            this.top += yFull * (offsetTo - offsetFrom);\n            this.setCoords();\n            this.originX = to;\n        },\n        /**\n     * Sets the origin/position of the object to it's center point\n     * @private\n     * @return {void}\n     */ _setOriginToCenter: function() {\n            this._originalOriginX = this.originX;\n            this._originalOriginY = this.originY;\n            var center = this.getCenterPoint();\n            this.originX = \"center\";\n            this.originY = \"center\";\n            this.left = center.x;\n            this.top = center.y;\n        },\n        /**\n     * Resets the origin/position of the object to it's original origin\n     * @private\n     * @return {void}\n     */ _resetOrigin: function() {\n            var originPoint = this.translateToOriginPoint(this.getCenterPoint(), this._originalOriginX, this._originalOriginY);\n            this.originX = this._originalOriginX;\n            this.originY = this._originalOriginY;\n            this.left = originPoint.x;\n            this.top = originPoint.y;\n            this._originalOriginX = null;\n            this._originalOriginY = null;\n        },\n        /**\n     * @private\n     */ _getLeftTopCoords: function() {\n            return this.translateToOriginPoint(this.getCenterPoint(), \"left\", \"top\");\n        }\n    });\n})();\n(function() {\n    function arrayFromCoords(coords) {\n        return [\n            new fabric.Point(coords.tl.x, coords.tl.y),\n            new fabric.Point(coords.tr.x, coords.tr.y),\n            new fabric.Point(coords.br.x, coords.br.y),\n            new fabric.Point(coords.bl.x, coords.bl.y)\n        ];\n    }\n    var util = fabric.util, degreesToRadians = util.degreesToRadians, multiplyMatrices = util.multiplyTransformMatrices, transformPoint = util.transformPoint;\n    util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\n     * Describe object's corner position in canvas element coordinates.\n     * properties are depending on control keys and padding the main controls.\n     * each property is an object with x, y and corner.\n     * The `corner` property contains in a similar manner the 4 points of the\n     * interactive area of the corner.\n     * The coordinates depends from the controls positionHandler and are used\n     * to draw and locate controls\n     * @memberOf fabric.Object.prototype\n     */ oCoords: null,\n        /**\n     * Describe object's corner position in canvas object absolute coordinates\n     * properties are tl,tr,bl,br and describe the four main corner.\n     * each property is an object with x, y, instance of Fabric.Point.\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\n     * skewX, skewY, angle, strokeWidth, top, left.\n     * Those coordinates are useful to understand where an object is. They get updated\n     * with oCoords but they do not need to be updated when zoom or panning change.\n     * The coordinates get updated with @method setCoords.\n     * You can calculate them without updating with @method calcACoords();\n     * @memberOf fabric.Object.prototype\n     */ aCoords: null,\n        /**\n     * Describe object's corner position in canvas element coordinates.\n     * includes padding. Used of object detection.\n     * set and refreshed with setCoords.\n     * @memberOf fabric.Object.prototype\n     */ lineCoords: null,\n        /**\n     * storage for object transform matrix\n     */ ownMatrixCache: null,\n        /**\n     * storage for object full transform matrix\n     */ matrixCache: null,\n        /**\n     * custom controls interface\n     * controls are added by default_controls.js\n     */ controls: {},\n        /**\n     * return correct set of coordinates for intersection\n     * this will return either aCoords or lineCoords.\n     * @param {Boolean} absolute will return aCoords if true or lineCoords\n     * @return {Object} {tl, tr, br, bl} points\n     */ _getCoords: function(absolute, calculate) {\n            if (calculate) {\n                return absolute ? this.calcACoords() : this.calcLineCoords();\n            }\n            if (!this.aCoords || !this.lineCoords) {\n                this.setCoords(true);\n            }\n            return absolute ? this.aCoords : this.lineCoords;\n        },\n        /**\n     * return correct set of coordinates for intersection\n     * this will return either aCoords or lineCoords.\n     * The coords are returned in an array.\n     * @return {Array} [tl, tr, br, bl] of points\n     */ getCoords: function(absolute, calculate) {\n            return arrayFromCoords(this._getCoords(absolute, calculate));\n        },\n        /**\n     * Checks if object intersects with an area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with an area formed by 2 points\n     */ intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\n            var coords = this.getCoords(absolute, calculate), intersection = fabric.Intersection.intersectPolygonRectangle(coords, pointTL, pointBR);\n            return intersection.status === \"Intersection\";\n        },\n        /**\n     * Checks if object intersects with another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object intersects with another object\n     */ intersectsWithObject: function(other, absolute, calculate) {\n            var intersection = fabric.Intersection.intersectPolygonPolygon(this.getCoords(absolute, calculate), other.getCoords(absolute, calculate));\n            return intersection.status === \"Intersection\" || other.isContainedWithinObject(this, absolute, calculate) || this.isContainedWithinObject(other, absolute, calculate);\n        },\n        /**\n     * Checks if object is fully contained within area of another object\n     * @param {Object} other Object to test\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area of another object\n     */ isContainedWithinObject: function(other, absolute, calculate) {\n            var points = this.getCoords(absolute, calculate), otherCoords = absolute ? other.aCoords : other.lineCoords, i = 0, lines = other._getImageLines(otherCoords);\n            for(; i < 4; i++){\n                if (!other.containsPoint(points[i], lines)) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        /**\n     * Checks if object is fully contained within area formed by 2 points\n     * @param {Object} pointTL top-left point of area\n     * @param {Object} pointBR bottom-right point of area\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\n     */ isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\n            var boundingRect = this.getBoundingRect(absolute, calculate);\n            return boundingRect.left >= pointTL.x && boundingRect.left + boundingRect.width <= pointBR.x && boundingRect.top >= pointTL.y && boundingRect.top + boundingRect.height <= pointBR.y;\n        },\n        /**\n     * Checks if point is inside the object\n     * @param {fabric.Point} point Point to check against\n     * @param {Object} [lines] object returned from @method _getImageLines\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if point is inside the object\n     */ containsPoint: function(point, lines, absolute, calculate) {\n            var coords = this._getCoords(absolute, calculate), lines = lines || this._getImageLines(coords), xPoints = this._findCrossPoints(point, lines);\n            // if xPoints is odd then point is inside the object\n            return xPoints !== 0 && xPoints % 2 === 1;\n        },\n        /**\n     * Checks if object is contained within the canvas with current viewportTransform\n     * the check is done stopping at first point that appears on screen\n     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\n     * @return {Boolean} true if object is fully or partially contained within canvas\n     */ isOnScreen: function(calculate) {\n            if (!this.canvas) {\n                return false;\n            }\n            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n            var points = this.getCoords(true, calculate);\n            // if some point is on screen, the object is on screen.\n            if (points.some(function(point) {\n                return point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y;\n            })) {\n                return true;\n            }\n            // no points on screen, check intersection with absolute coordinates\n            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n                return true;\n            }\n            return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n        },\n        /**\n     * Checks if the object contains the midpoint between canvas extremities\n     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\n     * @private\n     * @param {Fabric.Point} pointTL Top Left point\n     * @param {Fabric.Point} pointBR Top Right point\n     * @param {Boolean} calculate use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if the object contains the point\n     */ _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\n            // worst case scenario the object is so big that contains the screen\n            var centerPoint = {\n                x: (pointTL.x + pointBR.x) / 2,\n                y: (pointTL.y + pointBR.y) / 2\n            };\n            if (this.containsPoint(centerPoint, null, true, calculate)) {\n                return true;\n            }\n            return false;\n        },\n        /**\n     * Checks if object is partially contained within the canvas with current viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\n     * @return {Boolean} true if object is partially contained within canvas\n     */ isPartiallyOnScreen: function(calculate) {\n            if (!this.canvas) {\n                return false;\n            }\n            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n                return true;\n            }\n            var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {\n                return (point.x >= pointBR.x || point.x <= pointTL.x) && (point.y >= pointBR.y || point.y <= pointTL.y);\n            });\n            return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n        },\n        /**\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\n     * @private\n     * @param {Object} oCoords Coordinates of the object corners\n     */ _getImageLines: function(oCoords) {\n            var lines = {\n                topline: {\n                    o: oCoords.tl,\n                    d: oCoords.tr\n                },\n                rightline: {\n                    o: oCoords.tr,\n                    d: oCoords.br\n                },\n                bottomline: {\n                    o: oCoords.br,\n                    d: oCoords.bl\n                },\n                leftline: {\n                    o: oCoords.bl,\n                    d: oCoords.tl\n                }\n            };\n            // // debugging\n            // if (this.canvas.contextTop) {\n            //   this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n            //\n            //   this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n            //\n            //   this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n            //\n            //   this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n            // }\n            return lines;\n        },\n        /**\n     * Helper method to determine how many cross points are between the 4 object edges\n     * and the horizontal line determined by a point on canvas\n     * @private\n     * @param {fabric.Point} point Point to check\n     * @param {Object} lines Coordinates of the object being evaluated\n     */ // remove yi, not used but left code here just in case.\n        _findCrossPoints: function(point, lines) {\n            var b1, b2, a1, a2, xi, xcount = 0, iLine;\n            for(var lineKey in lines){\n                iLine = lines[lineKey];\n                // optimisation 1: line below point. no cross\n                if (iLine.o.y < point.y && iLine.d.y < point.y) {\n                    continue;\n                }\n                // optimisation 2: line above point. no cross\n                if (iLine.o.y >= point.y && iLine.d.y >= point.y) {\n                    continue;\n                }\n                // optimisation 3: vertical line case\n                if (iLine.o.x === iLine.d.x && iLine.o.x >= point.x) {\n                    xi = iLine.o.x;\n                // yi = point.y;\n                } else {\n                    b1 = 0;\n                    b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n                    a1 = point.y - b1 * point.x;\n                    a2 = iLine.o.y - b2 * iLine.o.x;\n                    xi = -(a1 - a2) / (b1 - b2);\n                // yi = a1 + b1 * xi;\n                }\n                // dont count xi < point.x cases\n                if (xi >= point.x) {\n                    xcount += 1;\n                }\n                // optimisation 4: specific for square images\n                if (xcount === 2) {\n                    break;\n                }\n            }\n            return xcount;\n        },\n        /**\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\n     * the box is intended as aligned to axis of canvas.\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\n     * @return {Object} Object with left, top, width, height properties\n     */ getBoundingRect: function(absolute, calculate) {\n            var coords = this.getCoords(absolute, calculate);\n            return util.makeBoundingBoxFromPoints(coords);\n        },\n        /**\n     * Returns width of an object's bounding box counting transformations\n     * before 2.0 it was named getWidth();\n     * @return {Number} width value\n     */ getScaledWidth: function() {\n            return this._getTransformedDimensions().x;\n        },\n        /**\n     * Returns height of an object bounding box counting transformations\n     * before 2.0 it was named getHeight();\n     * @return {Number} height value\n     */ getScaledHeight: function() {\n            return this._getTransformedDimensions().y;\n        },\n        /**\n     * Makes sure the scale is valid and modifies it if necessary\n     * @private\n     * @param {Number} value\n     * @return {Number}\n     */ _constrainScale: function(value) {\n            if (Math.abs(value) < this.minScaleLimit) {\n                if (value < 0) {\n                    return -this.minScaleLimit;\n                } else {\n                    return this.minScaleLimit;\n                }\n            } else if (value === 0) {\n                return 0.0001;\n            }\n            return value;\n        },\n        /**\n     * Scales an object (equally by x and y)\n     * @param {Number} value Scale factor\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ scale: function(value) {\n            this._set(\"scaleX\", value);\n            this._set(\"scaleY\", value);\n            return this.setCoords();\n        },\n        /**\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New width value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ scaleToWidth: function(value, absolute) {\n            // adjust to bounding rect factor so that rotated shapes would fit as well\n            var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\n            return this.scale(value / this.width / boundingRectFactor);\n        },\n        /**\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\n     * @param {Number} value New height value\n     * @param {Boolean} absolute ignore viewport\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ scaleToHeight: function(value, absolute) {\n            // adjust to bounding rect factor so that rotated shapes would fit as well\n            var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\n            return this.scale(value / this.height / boundingRectFactor);\n        },\n        calcLineCoords: function() {\n            var vpt = this.getViewportTransform(), padding = this.padding, angle = degreesToRadians(this.angle), cos = util.cos(angle), sin = util.sin(angle), cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP, cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();\n            var lineCoords = {\n                tl: transformPoint(aCoords.tl, vpt),\n                tr: transformPoint(aCoords.tr, vpt),\n                bl: transformPoint(aCoords.bl, vpt),\n                br: transformPoint(aCoords.br, vpt)\n            };\n            if (padding) {\n                lineCoords.tl.x -= cosPMinusSinP;\n                lineCoords.tl.y -= cosPSinP;\n                lineCoords.tr.x += cosPSinP;\n                lineCoords.tr.y -= cosPMinusSinP;\n                lineCoords.bl.x -= cosPSinP;\n                lineCoords.bl.y += cosPMinusSinP;\n                lineCoords.br.x += cosPMinusSinP;\n                lineCoords.br.y += cosPSinP;\n            }\n            return lineCoords;\n        },\n        calcOCoords: function() {\n            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), vpt = this.getViewportTransform(), startMatrix = multiplyMatrices(vpt, translateMatrix), finalMatrix = multiplyMatrices(startMatrix, rotateMatrix), finalMatrix = multiplyMatrices(finalMatrix, [\n                1 / vpt[0],\n                0,\n                0,\n                1 / vpt[3],\n                0,\n                0\n            ]), dim = this._calculateCurrentDimensions(), coords = {};\n            this.forEachControl(function(control, key, fabricObject) {\n                coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);\n            });\n            // debug code\n            // var canvas = this.canvas;\n            // setTimeout(function() {\n            //   canvas.contextTop.clearRect(0, 0, 700, 700);\n            //   canvas.contextTop.fillStyle = 'green';\n            //   Object.keys(coords).forEach(function(key) {\n            //     var control = coords[key];\n            //     canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n            //   });\n            // }, 50);\n            return coords;\n        },\n        calcACoords: function() {\n            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix), dim = this._getTransformedDimensions(), w = dim.x / 2, h = dim.y / 2;\n            return {\n                // corners\n                tl: transformPoint({\n                    x: -w,\n                    y: -h\n                }, finalMatrix),\n                tr: transformPoint({\n                    x: w,\n                    y: -h\n                }, finalMatrix),\n                bl: transformPoint({\n                    x: -w,\n                    y: h\n                }, finalMatrix),\n                br: transformPoint({\n                    x: w,\n                    y: h\n                }, finalMatrix)\n            };\n        },\n        /**\n     * Sets corner and controls position coordinates based on current angle, width and height, left and top.\n     * oCoords are used to find the corners\n     * aCoords are used to quickly find an object on the canvas\n     * lineCoords are used to quickly find object during pointer events.\n     * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\n     *\n     * @param {Boolean} [skipCorners] skip calculation of oCoords.\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ setCoords: function(skipCorners) {\n            this.aCoords = this.calcACoords();\n            // in case we are in a group, for how the inner group target check works,\n            // lineCoords are exactly aCoords. Since the vpt gets absorbed by the normalized pointer.\n            this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();\n            if (skipCorners) {\n                return this;\n            }\n            // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n            this.oCoords = this.calcOCoords();\n            this._setCornerCoords && this._setCornerCoords();\n            return this;\n        },\n        /**\n     * calculate rotation matrix of an object\n     * @return {Array} rotation matrix for the object\n     */ _calcRotateMatrix: function() {\n            return util.calcRotateMatrix(this);\n        },\n        /**\n     * calculate the translation matrix for an object transform\n     * @return {Array} rotation matrix for the object\n     */ _calcTranslateMatrix: function() {\n            var center = this.getCenterPoint();\n            return [\n                1,\n                0,\n                0,\n                1,\n                center.x,\n                center.y\n            ];\n        },\n        transformMatrixKey: function(skipGroup) {\n            var sep = \"_\", prefix = \"\";\n            if (!skipGroup && this.group) {\n                prefix = this.group.transformMatrixKey(skipGroup) + sep;\n            }\n            ;\n            return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY + sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY + sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\n        },\n        /**\n     * calculate transform matrix that represents the current transformations from the\n     * object's properties.\n     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\n     * There are some situation in which this is useful to avoid the fake rotation.\n     * @return {Array} transform matrix for the object\n     */ calcTransformMatrix: function(skipGroup) {\n            var matrix = this.calcOwnMatrix();\n            if (skipGroup || !this.group) {\n                return matrix;\n            }\n            var key = this.transformMatrixKey(skipGroup), cache = this.matrixCache || (this.matrixCache = {});\n            if (cache.key === key) {\n                return cache.value;\n            }\n            if (this.group) {\n                matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);\n            }\n            cache.key = key;\n            cache.value = matrix;\n            return matrix;\n        },\n        /**\n     * calculate transform matrix that represents the current transformations from the\n     * object's properties, this matrix does not include the group transformation\n     * @return {Array} transform matrix for the object\n     */ calcOwnMatrix: function() {\n            var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\n            if (cache.key === key) {\n                return cache.value;\n            }\n            var tMatrix = this._calcTranslateMatrix(), options = {\n                angle: this.angle,\n                translateX: tMatrix[4],\n                translateY: tMatrix[5],\n                scaleX: this.scaleX,\n                scaleY: this.scaleY,\n                skewX: this.skewX,\n                skewY: this.skewY,\n                flipX: this.flipX,\n                flipY: this.flipY\n            };\n            cache.key = key;\n            cache.value = util.composeMatrix(options);\n            return cache.value;\n        },\n        /*\n     * Calculate object dimensions from its properties\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */ _getNonTransformedDimensions: function() {\n            var strokeWidth = this.strokeWidth, w = this.width + strokeWidth, h = this.height + strokeWidth;\n            return {\n                x: w,\n                y: h\n            };\n        },\n        /*\n     * Calculate object bounding box dimensions from its properties scale, skew.\n     * @param {Number} skewX, a value to override current skewX\n     * @param {Number} skewY, a value to override current skewY\n     * @private\n     * @return {Object} .x width dimension\n     * @return {Object} .y height dimension\n     */ _getTransformedDimensions: function(skewX, skewY) {\n            if (typeof skewX === \"undefined\") {\n                skewX = this.skewX;\n            }\n            if (typeof skewY === \"undefined\") {\n                skewY = this.skewY;\n            }\n            var dimensions, dimX, dimY, noSkew = skewX === 0 && skewY === 0;\n            if (this.strokeUniform) {\n                dimX = this.width;\n                dimY = this.height;\n            } else {\n                dimensions = this._getNonTransformedDimensions();\n                dimX = dimensions.x;\n                dimY = dimensions.y;\n            }\n            if (noSkew) {\n                return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);\n            }\n            var bbox = util.sizeAfterTransform(dimX, dimY, {\n                scaleX: this.scaleX,\n                scaleY: this.scaleY,\n                skewX: skewX,\n                skewY: skewY\n            });\n            return this._finalizeDimensions(bbox.x, bbox.y);\n        },\n        /*\n     * Calculate object bounding box dimensions from its properties scale, skew.\n     * @param Number width width of the bbox\n     * @param Number height height of the bbox\n     * @private\n     * @return {Object} .x finalized width dimension\n     * @return {Object} .y finalized height dimension\n     */ _finalizeDimensions: function(width, height) {\n            return this.strokeUniform ? {\n                x: width + this.strokeWidth,\n                y: height + this.strokeWidth\n            } : {\n                x: width,\n                y: height\n            };\n        },\n        /*\n     * Calculate object dimensions for controls box, including padding and canvas zoom.\n     * and active selection\n     * private\n     */ _calculateCurrentDimensions: function() {\n            var vpt = this.getViewportTransform(), dim = this._getTransformedDimensions(), p = transformPoint(dim, vpt, true);\n            return p.scalarAdd(2 * this.padding);\n        }\n    });\n})();\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\n   * Moves an object to the bottom of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ sendToBack: function() {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n        } else if (this.canvas) {\n            this.canvas.sendToBack(this);\n        }\n        return this;\n    },\n    /**\n   * Moves an object to the top of the stack of drawn objects\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ bringToFront: function() {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n        } else if (this.canvas) {\n            this.canvas.bringToFront(this);\n        }\n        return this;\n    },\n    /**\n   * Moves an object down in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ sendBackwards: function(intersecting) {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n        } else if (this.canvas) {\n            this.canvas.sendBackwards(this, intersecting);\n        }\n        return this;\n    },\n    /**\n   * Moves an object up in stack of drawn objects\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ bringForward: function(intersecting) {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n        } else if (this.canvas) {\n            this.canvas.bringForward(this, intersecting);\n        }\n        return this;\n    },\n    /**\n   * Moves an object to specified level in stack of drawn objects\n   * @param {Number} index New position of object\n   * @return {fabric.Object} thisArg\n   * @chainable\n   */ moveTo: function(index) {\n        if (this.group && this.group.type !== \"activeSelection\") {\n            fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n        } else if (this.canvas) {\n            this.canvas.moveTo(this, index);\n        }\n        return this;\n    }\n});\n(function() {\n    var extend = fabric.util.object.extend, originalSet = \"stateProperties\";\n    /*\n    Depends on `stateProperties`\n  */ function saveProps(origin, destination, props) {\n        var tmpObj = {}, deep = true;\n        props.forEach(function(prop) {\n            tmpObj[prop] = origin[prop];\n        });\n        extend(origin[destination], tmpObj, deep);\n    }\n    function _isEqual(origValue, currentValue, firstPass) {\n        if (origValue === currentValue) {\n            // if the objects are identical, return\n            return true;\n        } else if (Array.isArray(origValue)) {\n            if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\n                return false;\n            }\n            for(var i = 0, len = origValue.length; i < len; i++){\n                if (!_isEqual(origValue[i], currentValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        } else if (origValue && typeof origValue === \"object\") {\n            var keys = Object.keys(origValue), key;\n            if (!currentValue || typeof currentValue !== \"object\" || !firstPass && keys.length !== Object.keys(currentValue).length) {\n                return false;\n            }\n            for(var i = 0, len = keys.length; i < len; i++){\n                key = keys[i];\n                // since clipPath is in the statefull cache list and the clipPath objects\n                // would be iterated as an object, this would lead to possible infinite recursion\n                // we do not want to compare those.\n                if (key === \"canvas\" || key === \"group\") {\n                    continue;\n                }\n                if (!_isEqual(origValue[key], currentValue[key])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\n     * Returns true if object state (one of its state properties) was changed\n     * @param {String} [propertySet] optional name for the set of property we want to save\n     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\n     */ hasStateChanged: function(propertySet) {\n            propertySet = propertySet || originalSet;\n            var dashedPropertySet = \"_\" + propertySet;\n            if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\n                return true;\n            }\n            return !_isEqual(this[dashedPropertySet], this, true);\n        },\n        /**\n     * Saves state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */ saveState: function(options) {\n            var propertySet = options && options.propertySet || originalSet, destination = \"_\" + propertySet;\n            if (!this[destination]) {\n                return this.setupState(options);\n            }\n            saveProps(this, destination, this[propertySet]);\n            if (options && options.stateProperties) {\n                saveProps(this, destination, options.stateProperties);\n            }\n            return this;\n        },\n        /**\n     * Setups state of an object\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\n     * @return {fabric.Object} thisArg\n     */ setupState: function(options) {\n            options = options || {};\n            var propertySet = options.propertySet || originalSet;\n            options.propertySet = propertySet;\n            this[\"_\" + propertySet] = {};\n            this.saveState(options);\n            return this;\n        }\n    });\n})();\n(function() {\n    var degreesToRadians = fabric.util.degreesToRadians;\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\n     * Determines which corner has been clicked\n     * @private\n     * @param {Object} pointer The pointer indicating the mouse position\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\n     */ _findTargetCorner: function(pointer, forTouch) {\n            // objects in group, anykind, are not self modificable,\n            // must not return an hovered corner.\n            if (!this.hasControls || this.group || !this.canvas || this.canvas._activeObject !== this) {\n                return false;\n            }\n            var ex = pointer.x, ey = pointer.y, xPoints, lines, keys = Object.keys(this.oCoords), j = keys.length - 1, i;\n            this.__corner = 0;\n            // cycle in reverse order so we pick first the one on top\n            for(; j >= 0; j--){\n                i = keys[j];\n                if (!this.isControlVisible(i)) {\n                    continue;\n                }\n                lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);\n                // // debugging\n                //\n                // this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n                //\n                // this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n                //\n                // this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n                //\n                // this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n                xPoints = this._findCrossPoints({\n                    x: ex,\n                    y: ey\n                }, lines);\n                if (xPoints !== 0 && xPoints % 2 === 1) {\n                    this.__corner = i;\n                    return i;\n                }\n            }\n            return false;\n        },\n        /**\n     * Calls a function for each control. The function gets called,\n     * with the control, the object that is calling the iterator and the control's key\n     * @param {Function} fn function to iterate over the controls over\n     */ forEachControl: function(fn) {\n            for(var i in this.controls){\n                fn(this.controls[i], i, this);\n            }\n            ;\n        },\n        /**\n     * Sets the coordinates of the draggable boxes in the corners of\n     * the image used to scale/rotate it.\n     * note: if we would switch to ROUND corner area, all of this would disappear.\n     * everything would resolve to a single point and a pythagorean theorem for the distance\n     * @private\n     */ _setCornerCoords: function() {\n            var coords = this.oCoords;\n            for(var control in coords){\n                var controlObject = this.controls[control];\n                coords[control].corner = controlObject.calcCornerCoords(this.angle, this.cornerSize, coords[control].x, coords[control].y, false);\n                coords[control].touchCorner = controlObject.calcCornerCoords(this.angle, this.touchCornerSize, coords[control].x, coords[control].y, true);\n            }\n        },\n        /**\n     * Draws a colored layer behind the object, inside its selection borders.\n     * Requires public options: padding, selectionBackgroundColor\n     * this function is called when the context is transformed\n     * has checks to be skipped when the object is on a staticCanvas\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ drawSelectionBackground: function(ctx) {\n            if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this) {\n                return this;\n            }\n            ctx.save();\n            var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(), vpt = this.canvas.viewportTransform;\n            ctx.translate(center.x, center.y);\n            ctx.scale(1 / vpt[0], 1 / vpt[3]);\n            ctx.rotate(degreesToRadians(this.angle));\n            ctx.fillStyle = this.selectionBackgroundColor;\n            ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n            ctx.restore();\n            return this;\n        },\n        /**\n     * Draws borders of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ drawBorders: function(ctx, styleOverride) {\n            styleOverride = styleOverride || {};\n            var wh = this._calculateCurrentDimensions(), strokeWidth = this.borderScaleFactor, width = wh.x + strokeWidth, height = wh.y + strokeWidth, hasControls = typeof styleOverride.hasControls !== \"undefined\" ? styleOverride.hasControls : this.hasControls, shouldStroke = false;\n            ctx.save();\n            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\n            ctx.strokeRect(-width / 2, -height / 2, width, height);\n            if (hasControls) {\n                ctx.beginPath();\n                this.forEachControl(function(control, key, fabricObject) {\n                    // in this moment, the ctx is centered on the object.\n                    // width and height of the above function are the size of the bbox.\n                    if (control.withConnection && control.getVisibility(fabricObject, key)) {\n                        // reset movement for each control\n                        shouldStroke = true;\n                        ctx.moveTo(control.x * width, control.y * height);\n                        ctx.lineTo(control.x * width + control.offsetX, control.y * height + control.offsetY);\n                    }\n                });\n                if (shouldStroke) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n            return this;\n        },\n        /**\n     * Draws borders of an object's bounding box when it is inside a group.\n     * Requires public properties: width, height\n     * Requires public options: padding, borderColor\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {object} options object representing current object parameters\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ drawBordersInGroup: function(ctx, options, styleOverride) {\n            styleOverride = styleOverride || {};\n            var bbox = fabric.util.sizeAfterTransform(this.width, this.height, options), strokeWidth = this.strokeWidth, strokeUniform = this.strokeUniform, borderScaleFactor = this.borderScaleFactor, width = bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor, height = bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;\n            ctx.save();\n            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\n            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n            ctx.strokeRect(-width / 2, -height / 2, width, height);\n            ctx.restore();\n            return this;\n        },\n        /**\n     * Draws corners of an object's bounding box.\n     * Requires public properties: width, height\n     * Requires public options: cornerSize, padding\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\n     * @param {Object} styleOverride object to override the object style\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ drawControls: function(ctx, styleOverride) {\n            styleOverride = styleOverride || {};\n            ctx.save();\n            var retinaScaling = this.canvas.getRetinaScaling(), matrix, p;\n            ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n            ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\n            if (!this.transparentCorners) {\n                ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\n            }\n            this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);\n            this.setCoords();\n            if (this.group) {\n                // fabricJS does not really support drawing controls inside groups,\n                // this piece of code here helps having at least the control in places.\n                // If an application needs to show some objects as selected because of some UI state\n                // can still call Object._renderControls() on any object they desire, independently of groups.\n                // using no padding, circular controls and hiding the rotating cursor is higly suggested,\n                matrix = this.group.calcTransformMatrix();\n            }\n            this.forEachControl(function(control, key, fabricObject) {\n                p = fabricObject.oCoords[key];\n                if (control.getVisibility(fabricObject, key)) {\n                    if (matrix) {\n                        p = fabric.util.transformPoint(p, matrix);\n                    }\n                    control.render(ctx, p.x, p.y, styleOverride, fabricObject);\n                }\n            });\n            ctx.restore();\n            return this;\n        },\n        /**\n     * Returns true if the specified control is visible, false otherwise.\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @returns {Boolean} true if the specified control is visible, false otherwise\n     */ isControlVisible: function(controlKey) {\n            return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);\n        },\n        /**\n     * Sets the visibility of the specified control.\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ setControlVisible: function(controlKey, visible) {\n            if (!this._controlsVisibility) {\n                this._controlsVisibility = {};\n            }\n            this._controlsVisibility[controlKey] = visible;\n            return this;\n        },\n        /**\n     * Sets the visibility state of object controls.\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ setControlsVisibility: function(options) {\n            options || (options = {});\n            for(var p in options){\n                this.setControlVisible(p, options[p]);\n            }\n            return this;\n        },\n        /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to deselect this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */ onDeselect: function() {\n        // implemented by sub-classes, as needed.\n        },\n        /**\n     * This callback function is called every time _discardActiveObject or _setActiveObject\n     * try to to select this object. If the function returns true, the process is cancelled\n     * @param {Object} [options] options sent from the upper functions\n     * @param {Event} [options.e] event if the process is generated by an event\n     */ onSelect: function() {\n        // implemented by sub-classes, as needed.\n        }\n    });\n})();\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n    /**\n   * Animation duration (in ms) for fx* methods\n   * @type Number\n   * @default\n   */ FX_DURATION: 500,\n    /**\n   * Centers object horizontally with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.AnimationContext} context\n   */ fxCenterObjectH: function(object, callbacks) {\n        callbacks = callbacks || {};\n        var empty = function() {}, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;\n        return fabric.util.animate({\n            target: this,\n            startValue: object.left,\n            endValue: this.getCenterPoint().x,\n            duration: this.FX_DURATION,\n            onChange: function(value) {\n                object.set(\"left\", value);\n                _this.requestRenderAll();\n                onChange();\n            },\n            onComplete: function() {\n                object.setCoords();\n                onComplete();\n            }\n        });\n    },\n    /**\n   * Centers object vertically with animation.\n   * @param {fabric.Object} object Object to center\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.AnimationContext} context\n   */ fxCenterObjectV: function(object, callbacks) {\n        callbacks = callbacks || {};\n        var empty = function() {}, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;\n        return fabric.util.animate({\n            target: this,\n            startValue: object.top,\n            endValue: this.getCenterPoint().y,\n            duration: this.FX_DURATION,\n            onChange: function(value) {\n                object.set(\"top\", value);\n                _this.requestRenderAll();\n                onChange();\n            },\n            onComplete: function() {\n                object.setCoords();\n                onComplete();\n            }\n        });\n    },\n    /**\n   * Same as `fabric.Canvas#remove` but animated\n   * @param {fabric.Object} object Object to remove\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\n   * @param {Function} [callbacks.onComplete] Invoked on completion\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\n   * @return {fabric.AnimationContext} context\n   */ fxRemove: function(object, callbacks) {\n        callbacks = callbacks || {};\n        var empty = function() {}, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;\n        return fabric.util.animate({\n            target: this,\n            startValue: object.opacity,\n            endValue: 0,\n            duration: this.FX_DURATION,\n            onChange: function(value) {\n                object.set(\"opacity\", value);\n                _this.requestRenderAll();\n                onChange();\n            },\n            onComplete: function() {\n                _this.remove(object);\n                onComplete();\n            }\n        });\n    }\n});\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\n   * Animates object's properties\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\n   * @return {fabric.Object} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\n   * @return {fabric.AnimationContext | fabric.AnimationContext[]} animation context (or an array if passed multiple properties)\n   *\n   * As object — multiple properties\n   *\n   * object.animate({ left: ..., top: ... });\n   * object.animate({ left: ..., top: ... }, { duration: ... });\n   *\n   * As string — one property\n   *\n   * object.animate('left', ...);\n   * object.animate('left', { duration: ... });\n   *\n   */ animate: function() {\n        if (arguments[0] && typeof arguments[0] === \"object\") {\n            var propsToAnimate = [], prop, skipCallbacks, out = [];\n            for(prop in arguments[0]){\n                propsToAnimate.push(prop);\n            }\n            for(var i = 0, len = propsToAnimate.length; i < len; i++){\n                prop = propsToAnimate[i];\n                skipCallbacks = i !== len - 1;\n                out.push(this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks));\n            }\n            return out;\n        } else {\n            return this._animate.apply(this, arguments);\n        }\n    },\n    /**\n   * @private\n   * @param {String} property Property to animate\n   * @param {String} to Value to animate to\n   * @param {Object} [options] Options object\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\n   */ _animate: function(property, to, options, skipCallbacks) {\n        var _this = this, propPair;\n        to = to.toString();\n        if (!options) {\n            options = {};\n        } else {\n            options = fabric.util.object.clone(options);\n        }\n        if (~property.indexOf(\".\")) {\n            propPair = property.split(\".\");\n        }\n        var propIsColor = _this.colorProperties.indexOf(property) > -1 || propPair && _this.colorProperties.indexOf(propPair[1]) > -1;\n        var currentValue = propPair ? this.get(propPair[0])[propPair[1]] : this.get(property);\n        if (!(\"from\" in options)) {\n            options.from = currentValue;\n        }\n        if (!propIsColor) {\n            if (~to.indexOf(\"=\")) {\n                to = currentValue + parseFloat(to.replace(\"=\", \"\"));\n            } else {\n                to = parseFloat(to);\n            }\n        }\n        var _options = {\n            target: this,\n            startValue: options.from,\n            endValue: to,\n            byValue: options.by,\n            easing: options.easing,\n            duration: options.duration,\n            abort: options.abort && function(value, valueProgress, timeProgress) {\n                return options.abort.call(_this, value, valueProgress, timeProgress);\n            },\n            onChange: function(value, valueProgress, timeProgress) {\n                if (propPair) {\n                    _this[propPair[0]][propPair[1]] = value;\n                } else {\n                    _this.set(property, value);\n                }\n                if (skipCallbacks) {\n                    return;\n                }\n                options.onChange && options.onChange(value, valueProgress, timeProgress);\n            },\n            onComplete: function(value, valueProgress, timeProgress) {\n                if (skipCallbacks) {\n                    return;\n                }\n                _this.setCoords();\n                options.onComplete && options.onComplete(value, valueProgress, timeProgress);\n            }\n        };\n        if (propIsColor) {\n            return fabric.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);\n        } else {\n            return fabric.util.animate(_options);\n        }\n    }\n});\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend;\n    if (fabric.Rect) {\n        fabric.warn(\"fabric.Rect is already defined\");\n        return;\n    }\n    /**\n   * Rectangle class\n   * @class fabric.Rect\n   * @extends fabric.Object\n   * @return {fabric.Rect} thisArg\n   * @see {@link fabric.Rect#initialize} for constructor definition\n   */ fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n        /**\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */ stateProperties: fabric.Object.prototype.stateProperties.concat(\"rx\", \"ry\"),\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"rect\",\n        /**\n     * Horizontal border radius\n     * @type Number\n     * @default\n     */ rx: 0,\n        /**\n     * Vertical border radius\n     * @type Number\n     * @default\n     */ ry: 0,\n        cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"rx\", \"ry\"),\n        /**\n     * Constructor\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */ initialize: function(options) {\n            this.callSuper(\"initialize\", options);\n            this._initRxRy();\n        },\n        /**\n     * Initializes rx/ry attributes\n     * @private\n     */ _initRxRy: function() {\n            if (this.rx && !this.ry) {\n                this.ry = this.rx;\n            } else if (this.ry && !this.rx) {\n                this.rx = this.ry;\n            }\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _render: function(ctx) {\n            // 1x1 case (used in spray brush) optimization was removed because\n            // with caching and higher zoom level this makes more damage than help\n            var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0, ry = this.ry ? Math.min(this.ry, this.height / 2) : 0, w = this.width, h = this.height, x = -this.width / 2, y = -this.height / 2, isRounded = rx !== 0 || ry !== 0, /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */ k = 1 - 0.5522847498;\n            ctx.beginPath();\n            ctx.moveTo(x + rx, y);\n            ctx.lineTo(x + w - rx, y);\n            isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n            ctx.lineTo(x + w, y + h - ry);\n            isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n            ctx.lineTo(x + rx, y + h);\n            isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n            ctx.lineTo(x, y + ry);\n            isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n            ctx.closePath();\n            this._renderPaintInOrder(ctx);\n        },\n        /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            return this.callSuper(\"toObject\", [\n                \"rx\",\n                \"ry\"\n            ].concat(propertiesToInclude));\n        }\n    });\n    /**\n   * Returns {@link fabric.Rect} instance from an object representation\n   * @static\n   * @memberOf fabric.Rect\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\n   */ fabric.Rect.fromObject = function(object, callback) {\n        return fabric.Object._fromObject(\"Rect\", object, callback);\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, min = fabric.util.array.min, max = fabric.util.array.max, toFixed = fabric.util.toFixed, projectStrokeOnPoints = fabric.util.projectStrokeOnPoints;\n    if (fabric.Polyline) {\n        fabric.warn(\"fabric.Polyline is already defined\");\n        return;\n    }\n    /**\n   * Polyline class\n   * @class fabric.Polyline\n   * @extends fabric.Object\n   * @see {@link fabric.Polyline#initialize} for constructor definition\n   */ fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"polyline\",\n        /**\n     * Points array\n     * @type Array\n     * @default\n     */ points: null,\n        /**\n     * WARNING: Feature in progress\n     * Calculate the exact bounding box taking in account strokeWidth on acute angles\n     * this will be turned to true by default on fabric 6.0\n     * maybe will be left in as an optimization since calculations may be slow\n     * @deprecated\n     * @type Boolean\n     * @default false\n     */ exactBoundingBox: false,\n        cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"points\"),\n        /**\n     * Constructor\n     * @param {Array} points Array of points (where each point is an object with x and y)\n     * @param {Object} [options] Options object\n     * @return {fabric.Polyline} thisArg\n     * @example\n     * var poly = new fabric.Polyline([\n     *     { x: 10, y: 10 },\n     *     { x: 50, y: 30 },\n     *     { x: 40, y: 70 },\n     *     { x: 60, y: 50 },\n     *     { x: 100, y: 150 },\n     *     { x: 40, y: 100 }\n     *   ], {\n     *   stroke: 'red',\n     *   left: 100,\n     *   top: 100\n     * });\n     */ initialize: function(points, options) {\n            options = options || {};\n            this.points = points || [];\n            this.callSuper(\"initialize\", options);\n            this._setPositionDimensions(options);\n        },\n        /**\n     * @private\n     */ _projectStrokeOnPoints: function() {\n            return projectStrokeOnPoints(this.points, this, true);\n        },\n        _setPositionDimensions: function(options) {\n            var calcDim = this._calcDimensions(options), correctLeftTop, correctSize = this.exactBoundingBox ? this.strokeWidth : 0;\n            this.width = calcDim.width - correctSize;\n            this.height = calcDim.height - correctSize;\n            if (!options.fromSVG) {\n                correctLeftTop = this.translateToGivenOrigin({\n                    // this looks bad, but is one way to keep it optional for now.\n                    x: calcDim.left - this.strokeWidth / 2 + correctSize / 2,\n                    y: calcDim.top - this.strokeWidth / 2 + correctSize / 2\n                }, \"left\", \"top\", this.originX, this.originY);\n            }\n            if (typeof options.left === \"undefined\") {\n                this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;\n            }\n            if (typeof options.top === \"undefined\") {\n                this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;\n            }\n            this.pathOffset = {\n                x: calcDim.left + this.width / 2 + correctSize / 2,\n                y: calcDim.top + this.height / 2 + correctSize / 2\n            };\n        },\n        /**\n     * Calculate the polygon min and max point from points array,\n     * returning an object with left, top, width, height to measure the\n     * polygon size\n     * @return {Object} object.left X coordinate of the polygon leftmost point\n     * @return {Object} object.top Y coordinate of the polygon topmost point\n     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\n     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\n     * @private\n     */ _calcDimensions: function() {\n            var points = this.exactBoundingBox ? this._projectStrokeOnPoints() : this.points, minX = min(points, \"x\") || 0, minY = min(points, \"y\") || 0, maxX = max(points, \"x\") || 0, maxY = max(points, \"y\") || 0, width = maxX - minX, height = maxY - minY;\n            return {\n                left: minX,\n                top: minY,\n                width: width,\n                height: height\n            };\n        },\n        /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            return extend(this.callSuper(\"toObject\", propertiesToInclude), {\n                points: this.points.concat()\n            });\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ commonRender: function(ctx) {\n            var point, len = this.points.length, x = this.pathOffset.x, y = this.pathOffset.y;\n            if (!len || isNaN(this.points[len - 1].y)) {\n                // do not draw if no points or odd points\n                // NaN comes from parseFloat of a empty string in parser\n                return false;\n            }\n            ctx.beginPath();\n            ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n            for(var i = 0; i < len; i++){\n                point = this.points[i];\n                ctx.lineTo(point.x - x, point.y - y);\n            }\n            return true;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _render: function(ctx) {\n            if (!this.commonRender(ctx)) {\n                return;\n            }\n            this._renderPaintInOrder(ctx);\n        },\n        /**\n     * Returns complexity of an instance\n     * @return {Number} complexity of this instance\n     */ complexity: function() {\n            return this.get(\"points\").length;\n        }\n    });\n    /**\n   * Returns fabric.Polyline instance from an object representation\n   * @static\n   * @memberOf fabric.Polyline\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */ fabric.Polyline.fromObject = function(object, callback) {\n        return fabric.Object._fromObject(\"Polyline\", object, callback, \"points\");\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), min = fabric.util.array.min, max = fabric.util.array.max, extend = fabric.util.object.extend, clone = fabric.util.object.clone, toFixed = fabric.util.toFixed;\n    if (fabric.Path) {\n        fabric.warn(\"fabric.Path is already defined\");\n        return;\n    }\n    /**\n   * Path class\n   * @class fabric.Path\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\n   * @see {@link fabric.Path#initialize} for constructor definition\n   */ fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"path\",\n        /**\n     * Array of path points\n     * @type Array\n     * @default\n     */ path: null,\n        cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"path\", \"fillRule\"),\n        stateProperties: fabric.Object.prototype.stateProperties.concat(\"path\"),\n        /**\n     * Constructor\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n     * @param {Object} [options] Options object\n     * @return {fabric.Path} thisArg\n     */ initialize: function(path, options) {\n            options = clone(options || {});\n            delete options.path;\n            this.callSuper(\"initialize\", options);\n            this._setPath(path || [], options);\n        },\n        /**\n    * @private\n    * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\n    * @param {Object} [options] Options object\n    */ _setPath: function(path, options) {\n            this.path = fabric.util.makePathSimpler(Array.isArray(path) ? path : fabric.util.parsePath(path));\n            fabric.Polyline.prototype._setPositionDimensions.call(this, options || {});\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */ _renderPathCommands: function(ctx) {\n            var current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, controlX = 0, controlY = 0, l = -this.pathOffset.x, t = -this.pathOffset.y;\n            ctx.beginPath();\n            for(var i = 0, len = this.path.length; i < len; ++i){\n                current = this.path[i];\n                switch(current[0]){\n                    case \"L\":\n                        x = current[1];\n                        y = current[2];\n                        ctx.lineTo(x + l, y + t);\n                        break;\n                    case \"M\":\n                        x = current[1];\n                        y = current[2];\n                        subpathStartX = x;\n                        subpathStartY = y;\n                        ctx.moveTo(x + l, y + t);\n                        break;\n                    case \"C\":\n                        x = current[5];\n                        y = current[6];\n                        controlX = current[3];\n                        controlY = current[4];\n                        ctx.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);\n                        break;\n                    case \"Q\":\n                        ctx.quadraticCurveTo(current[1] + l, current[2] + t, current[3] + l, current[4] + t);\n                        x = current[3];\n                        y = current[4];\n                        controlX = current[1];\n                        controlY = current[2];\n                        break;\n                    case \"z\":\n                    case \"Z\":\n                        x = subpathStartX;\n                        y = subpathStartY;\n                        ctx.closePath();\n                        break;\n                }\n            }\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx context to render path on\n     */ _render: function(ctx) {\n            this._renderPathCommands(ctx);\n            this._renderPaintInOrder(ctx);\n        },\n        /**\n     * Returns string representation of an instance\n     * @return {String} string representation of an instance\n     */ toString: function() {\n            return \"#<fabric.Path (\" + this.complexity() + '): { \"top\": ' + this.top + ', \"left\": ' + this.left + \" }>\";\n        },\n        /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            return extend(this.callSuper(\"toObject\", propertiesToInclude), {\n                path: this.path.map(function(item) {\n                    return item.slice();\n                })\n            });\n        },\n        /**\n     * Returns dataless object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toDatalessObject: function(propertiesToInclude) {\n            var o = this.toObject([\n                \"sourcePath\"\n            ].concat(propertiesToInclude));\n            if (o.sourcePath) {\n                delete o.path;\n            }\n            return o;\n        },\n        /**\n     * Returns number representation of an instance complexity\n     * @return {Number} complexity of this instance\n     */ complexity: function() {\n            return this.path.length;\n        },\n        /**\n     * @private\n     */ _calcDimensions: function() {\n            var aX = [], aY = [], current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, bounds;\n            for(var i = 0, len = this.path.length; i < len; ++i){\n                current = this.path[i];\n                switch(current[0]){\n                    case \"L\":\n                        x = current[1];\n                        y = current[2];\n                        bounds = [];\n                        break;\n                    case \"M\":\n                        x = current[1];\n                        y = current[2];\n                        subpathStartX = x;\n                        subpathStartY = y;\n                        bounds = [];\n                        break;\n                    case \"C\":\n                        bounds = fabric.util.getBoundsOfCurve(x, y, current[1], current[2], current[3], current[4], current[5], current[6]);\n                        x = current[5];\n                        y = current[6];\n                        break;\n                    case \"Q\":\n                        bounds = fabric.util.getBoundsOfCurve(x, y, current[1], current[2], current[1], current[2], current[3], current[4]);\n                        x = current[3];\n                        y = current[4];\n                        break;\n                    case \"z\":\n                    case \"Z\":\n                        x = subpathStartX;\n                        y = subpathStartY;\n                        break;\n                }\n                bounds.forEach(function(point) {\n                    aX.push(point.x);\n                    aY.push(point.y);\n                });\n                aX.push(x);\n                aY.push(y);\n            }\n            var minX = min(aX) || 0, minY = min(aY) || 0, maxX = max(aX) || 0, maxY = max(aY) || 0, deltaX = maxX - minX, deltaY = maxY - minY;\n            return {\n                left: minX,\n                top: minY,\n                width: deltaX,\n                height: deltaY\n            };\n        }\n    });\n    /**\n   * Creates an instance of fabric.Path from an object\n   * @static\n   * @memberOf fabric.Path\n   * @param {Object} object\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\n   */ fabric.Path.fromObject = function(object, callback) {\n        if (typeof object.sourcePath === \"string\") {\n            var pathUrl = object.sourcePath;\n            fabric.loadSVGFromURL(pathUrl, function(elements) {\n                var path = elements[0];\n                path.setOptions(object);\n                callback && callback(path);\n            });\n        } else {\n            fabric.Object._fromObject(\"Path\", object, callback, \"path\");\n        }\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), min = fabric.util.array.min, max = fabric.util.array.max;\n    if (fabric.Group) {\n        return;\n    }\n    /**\n   * Group class\n   * @class fabric.Group\n   * @extends fabric.Object\n   * @mixes fabric.Collection\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.Group#initialize} for constructor definition\n   */ fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"group\",\n        /**\n     * Width of stroke\n     * @type Number\n     * @default\n     */ strokeWidth: 0,\n        /**\n     * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets\n     * @type Boolean\n     * @default\n     */ subTargetCheck: false,\n        /**\n     * Groups are container, do not render anything on theyr own, ence no cache properties\n     * @type Array\n     * @default\n     */ cacheProperties: [],\n        /**\n     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\n     * available setting this boolean to true.\n     * @type Boolean\n     * @since 2.0.0\n     * @default\n     */ useSetOnGroup: false,\n        /**\n     * Constructor\n     * @param {Object} objects Group objects\n     * @param {Object} [options] Options object\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\n     * @return {Object} thisArg\n     */ initialize: function(objects, options, isAlreadyGrouped) {\n            options = options || {};\n            this._objects = [];\n            // if objects enclosed in a group have been grouped already,\n            // we cannot change properties of objects.\n            // Thus we need to set options to group without objects,\n            isAlreadyGrouped && this.callSuper(\"initialize\", options);\n            this._objects = objects || [];\n            for(var i = this._objects.length; i--;){\n                this._objects[i].group = this;\n            }\n            if (!isAlreadyGrouped) {\n                var center = options && options.centerPoint;\n                // we want to set origins before calculating the bounding box.\n                // so that the topleft can be set with that in mind.\n                // if specific top and left are passed, are overwritten later\n                // with the callSuper('initialize', options)\n                if (options.originX !== undefined) {\n                    this.originX = options.originX;\n                }\n                if (options.originY !== undefined) {\n                    this.originY = options.originY;\n                }\n                // if coming from svg i do not want to calc bounds.\n                // i assume width and height are passed along options\n                center || this._calcBounds();\n                this._updateObjectsCoords(center);\n                delete options.centerPoint;\n                this.callSuper(\"initialize\", options);\n            } else {\n                this._updateObjectsACoords();\n            }\n            this.setCoords();\n        },\n        /**\n     * @private\n     */ _updateObjectsACoords: function() {\n            var skipControls = true;\n            for(var i = this._objects.length; i--;){\n                this._objects[i].setCoords(skipControls);\n            }\n        },\n        /**\n     * @private\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\n     */ _updateObjectsCoords: function(center) {\n            var center = center || this.getCenterPoint();\n            for(var i = this._objects.length; i--;){\n                this._updateObjectCoords(this._objects[i], center);\n            }\n        },\n        /**\n     * @private\n     * @param {Object} object\n     * @param {fabric.Point} center, current center of group.\n     */ _updateObjectCoords: function(object, center) {\n            var objectLeft = object.left, objectTop = object.top, skipControls = true;\n            object.set({\n                left: objectLeft - center.x,\n                top: objectTop - center.y\n            });\n            object.group = this;\n            object.setCoords(skipControls);\n        },\n        /**\n     * Returns string represenation of a group\n     * @return {String}\n     */ toString: function() {\n            return \"#<fabric.Group: (\" + this.complexity() + \")>\";\n        },\n        /**\n     * Adds an object to a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */ addWithUpdate: function(object) {\n            var nested = !!this.group;\n            this._restoreObjectsState();\n            fabric.util.resetObjectTransform(this);\n            if (object) {\n                if (nested) {\n                    // if this group is inside another group, we need to pre transform the object\n                    fabric.util.removeTransformFromObject(object, this.group.calcTransformMatrix());\n                }\n                this._objects.push(object);\n                object.group = this;\n                object._set(\"canvas\", this.canvas);\n            }\n            this._calcBounds();\n            this._updateObjectsCoords();\n            this.dirty = true;\n            if (nested) {\n                this.group.addWithUpdate();\n            } else {\n                this.setCoords();\n            }\n            return this;\n        },\n        /**\n     * Removes an object from a group; Then recalculates group's dimension, position.\n     * @param {Object} object\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */ removeWithUpdate: function(object) {\n            this._restoreObjectsState();\n            fabric.util.resetObjectTransform(this);\n            this.remove(object);\n            this._calcBounds();\n            this._updateObjectsCoords();\n            this.setCoords();\n            this.dirty = true;\n            return this;\n        },\n        /**\n     * @private\n     */ _onObjectAdded: function(object) {\n            this.dirty = true;\n            object.group = this;\n            object._set(\"canvas\", this.canvas);\n        },\n        /**\n     * @private\n     */ _onObjectRemoved: function(object) {\n            this.dirty = true;\n            delete object.group;\n        },\n        /**\n     * @private\n     */ _set: function(key, value) {\n            var i = this._objects.length;\n            if (this.useSetOnGroup) {\n                while(i--){\n                    this._objects[i].setOnGroup(key, value);\n                }\n            }\n            if (key === \"canvas\") {\n                while(i--){\n                    this._objects[i]._set(key, value);\n                }\n            }\n            fabric.Object.prototype._set.call(this, key, value);\n        },\n        /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            var _includeDefaultValues = this.includeDefaultValues;\n            var objsToObject = this._objects.filter(function(obj) {\n                return !obj.excludeFromExport;\n            }).map(function(obj) {\n                var originalDefaults = obj.includeDefaultValues;\n                obj.includeDefaultValues = _includeDefaultValues;\n                var _obj = obj.toObject(propertiesToInclude);\n                obj.includeDefaultValues = originalDefaults;\n                return _obj;\n            });\n            var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\n            obj.objects = objsToObject;\n            return obj;\n        },\n        /**\n     * Returns object representation of an instance, in dataless mode.\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} object representation of an instance\n     */ toDatalessObject: function(propertiesToInclude) {\n            var objsToObject, sourcePath = this.sourcePath;\n            if (sourcePath) {\n                objsToObject = sourcePath;\n            } else {\n                var _includeDefaultValues = this.includeDefaultValues;\n                objsToObject = this._objects.map(function(obj) {\n                    var originalDefaults = obj.includeDefaultValues;\n                    obj.includeDefaultValues = _includeDefaultValues;\n                    var _obj = obj.toDatalessObject(propertiesToInclude);\n                    obj.includeDefaultValues = originalDefaults;\n                    return _obj;\n                });\n            }\n            var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\n            obj.objects = objsToObject;\n            return obj;\n        },\n        /**\n     * Renders instance on a given context\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\n     */ render: function(ctx) {\n            this._transformDone = true;\n            this.callSuper(\"render\", ctx);\n            this._transformDone = false;\n        },\n        /**\n     * Decide if the object should cache or not. Create its own cache level\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group is already cached.\n     * @return {Boolean}\n     */ shouldCache: function() {\n            var ownCache = fabric.Object.prototype.shouldCache.call(this);\n            if (ownCache) {\n                for(var i = 0, len = this._objects.length; i < len; i++){\n                    if (this._objects[i].willDrawShadow()) {\n                        this.ownCaching = false;\n                        return false;\n                    }\n                }\n            }\n            return ownCache;\n        },\n        /**\n     * Check if this object or a child object will cast a shadow\n     * @return {Boolean}\n     */ willDrawShadow: function() {\n            if (fabric.Object.prototype.willDrawShadow.call(this)) {\n                return true;\n            }\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                if (this._objects[i].willDrawShadow()) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */ isOnACache: function() {\n            return this.ownCaching || this.group && this.group.isOnACache();\n        },\n        /**\n     * Execute the drawing operation for an object on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ drawObject: function(ctx) {\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                this._objects[i].render(ctx);\n            }\n            this._drawClipPath(ctx, this.clipPath);\n        },\n        /**\n     * Check if cache is dirty\n     */ isCacheDirty: function(skipCanvas) {\n            if (this.callSuper(\"isCacheDirty\", skipCanvas)) {\n                return true;\n            }\n            if (!this.statefullCache) {\n                return false;\n            }\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                if (this._objects[i].isCacheDirty(true)) {\n                    if (this._cacheCanvas) {\n                        // if this group has not a cache canvas there is nothing to clean\n                        var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\n                        this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\n     * Restores original state of each of group objects (original state is that which was before group was created).\n     * if the nested boolean is true, the original state will be restored just for the\n     * first group and not for all the group chain\n     * @private\n     * @param {Boolean} nested tell the function to restore object state up to the parent group and not more\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */ _restoreObjectsState: function() {\n            var groupMatrix = this.calcOwnMatrix();\n            this._objects.forEach(function(object) {\n                // instead of using _this = this;\n                fabric.util.addTransformToObject(object, groupMatrix);\n                delete object.group;\n                object.setCoords();\n            });\n            return this;\n        },\n        /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */ destroy: function() {\n            // when group is destroyed objects needs to get a repaint to be eventually\n            // displayed on canvas.\n            this._objects.forEach(function(object) {\n                object.set(\"dirty\", true);\n            });\n            return this._restoreObjectsState();\n        },\n        dispose: function() {\n            this.callSuper(\"dispose\");\n            this.forEachObject(function(object) {\n                object.dispose && object.dispose();\n            });\n            this._objects = [];\n        },\n        /**\n     * make a group an active selection, remove the group from canvas\n     * the group has to be on canvas for this to work.\n     * @return {fabric.ActiveSelection} thisArg\n     * @chainable\n     */ toActiveSelection: function() {\n            if (!this.canvas) {\n                return;\n            }\n            var objects = this._objects, canvas = this.canvas;\n            this._objects = [];\n            var options = this.toObject();\n            delete options.objects;\n            var activeSelection = new fabric.ActiveSelection([]);\n            activeSelection.set(options);\n            activeSelection.type = \"activeSelection\";\n            canvas.remove(this);\n            objects.forEach(function(object) {\n                object.group = activeSelection;\n                object.dirty = true;\n                canvas.add(object);\n            });\n            activeSelection.canvas = canvas;\n            activeSelection._objects = objects;\n            canvas._activeObject = activeSelection;\n            activeSelection.setCoords();\n            return activeSelection;\n        },\n        /**\n     * Destroys a group (restoring state of its objects)\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */ ungroupOnCanvas: function() {\n            return this._restoreObjectsState();\n        },\n        /**\n     * Sets coordinates of all objects inside group\n     * @return {fabric.Group} thisArg\n     * @chainable\n     */ setObjectsCoords: function() {\n            var skipControls = true;\n            this.forEachObject(function(object) {\n                object.setCoords(skipControls);\n            });\n            return this;\n        },\n        /**\n     * @private\n     */ _calcBounds: function(onlyWidthHeight) {\n            var aX = [], aY = [], o, prop, coords, props = [\n                \"tr\",\n                \"br\",\n                \"bl\",\n                \"tl\"\n            ], i = 0, iLen = this._objects.length, j, jLen = props.length;\n            for(; i < iLen; ++i){\n                o = this._objects[i];\n                coords = o.calcACoords();\n                for(j = 0; j < jLen; j++){\n                    prop = props[j];\n                    aX.push(coords[prop].x);\n                    aY.push(coords[prop].y);\n                }\n                o.aCoords = coords;\n            }\n            this._getBounds(aX, aY, onlyWidthHeight);\n        },\n        /**\n     * @private\n     */ _getBounds: function(aX, aY, onlyWidthHeight) {\n            var minXY = new fabric.Point(min(aX), min(aY)), maxXY = new fabric.Point(max(aX), max(aY)), top = minXY.y || 0, left = minXY.x || 0, width = maxXY.x - minXY.x || 0, height = maxXY.y - minXY.y || 0;\n            this.width = width;\n            this.height = height;\n            if (!onlyWidthHeight) {\n                // the bounding box always finds the topleft most corner.\n                // whatever is the group origin, we set up here the left/top position.\n                this.setPositionByOrigin({\n                    x: left,\n                    y: top\n                }, \"left\", \"top\");\n            }\n        }\n    });\n    /**\n   * Returns {@link fabric.Group} instance from an object representation\n   * @static\n   * @memberOf fabric.Group\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an group instance is created\n   */ fabric.Group.fromObject = function(object, callback) {\n        var objects = object.objects, options = fabric.util.object.clone(object, true);\n        delete options.objects;\n        if (typeof objects === \"string\") {\n            // it has to be an url or something went wrong.\n            fabric.loadSVGFromURL(objects, function(elements) {\n                var group = fabric.util.groupSVGElements(elements, object, objects);\n                group.set(options);\n                callback && callback(group);\n            });\n            return;\n        }\n        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n            var options = fabric.util.object.clone(object, true);\n            delete options.objects;\n            fabric.util.enlivenObjectEnlivables(object, options, function() {\n                callback && callback(new fabric.Group(enlivenedObjects, options, true));\n            });\n        });\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {});\n    if (fabric.ActiveSelection) {\n        return;\n    }\n    /**\n   * Group class\n   * @class fabric.ActiveSelection\n   * @extends fabric.Group\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\n   * @see {@link fabric.ActiveSelection#initialize} for constructor definition\n   */ fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"activeSelection\",\n        /**\n     * Constructor\n     * @param {Object} objects ActiveSelection objects\n     * @param {Object} [options] Options object\n     * @return {Object} thisArg\n     */ initialize: function(objects, options) {\n            options = options || {};\n            this._objects = objects || [];\n            for(var i = this._objects.length; i--;){\n                this._objects[i].group = this;\n            }\n            if (options.originX) {\n                this.originX = options.originX;\n            }\n            if (options.originY) {\n                this.originY = options.originY;\n            }\n            this._calcBounds();\n            this._updateObjectsCoords();\n            fabric.Object.prototype.initialize.call(this, options);\n            this.setCoords();\n        },\n        /**\n     * Change te activeSelection to a normal group,\n     * High level function that automatically adds it to canvas as\n     * active object. no events fired.\n     * @since 2.0.0\n     * @return {fabric.Group}\n     */ toGroup: function() {\n            var objects = this._objects.concat();\n            this._objects = [];\n            var options = fabric.Object.prototype.toObject.call(this);\n            var newGroup = new fabric.Group([]);\n            delete options.type;\n            newGroup.set(options);\n            objects.forEach(function(object) {\n                object.canvas.remove(object);\n                object.group = newGroup;\n            });\n            newGroup._objects = objects;\n            if (!this.canvas) {\n                return newGroup;\n            }\n            var canvas = this.canvas;\n            canvas.add(newGroup);\n            canvas._activeObject = newGroup;\n            newGroup.setCoords();\n            return newGroup;\n        },\n        /**\n     * If returns true, deselection is cancelled.\n     * @since 2.0.0\n     * @return {Boolean} [cancel]\n     */ onDeselect: function() {\n            this.destroy();\n            return false;\n        },\n        /**\n     * Returns string representation of a group\n     * @return {String}\n     */ toString: function() {\n            return \"#<fabric.ActiveSelection: (\" + this.complexity() + \")>\";\n        },\n        /**\n     * Decide if the object should cache or not. Create its own cache level\n     * objectCaching is a global flag, wins over everything\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * @return {Boolean}\n     */ shouldCache: function() {\n            return false;\n        },\n        /**\n     * Check if this group or its parent group are caching, recursively up\n     * @return {Boolean}\n     */ isOnACache: function() {\n            return false;\n        },\n        /**\n     * Renders controls and borders for the object\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [styleOverride] properties to override the object style\n     * @param {Object} [childrenOverride] properties to override the children overrides\n     */ _renderControls: function(ctx, styleOverride, childrenOverride) {\n            ctx.save();\n            ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n            this.callSuper(\"_renderControls\", ctx, styleOverride);\n            childrenOverride = childrenOverride || {};\n            if (typeof childrenOverride.hasControls === \"undefined\") {\n                childrenOverride.hasControls = false;\n            }\n            childrenOverride.forActiveSelection = true;\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                this._objects[i]._renderControls(ctx, childrenOverride);\n            }\n            ctx.restore();\n        }\n    });\n    /**\n   * Returns {@link fabric.ActiveSelection} instance from an object representation\n   * @static\n   * @memberOf fabric.ActiveSelection\n   * @param {Object} object Object to create a group from\n   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\n   */ fabric.ActiveSelection.fromObject = function(object, callback) {\n        fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n            delete object.objects;\n            callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\n        });\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var extend = fabric.util.object.extend;\n    if (!global.fabric) {\n        global.fabric = {};\n    }\n    if (global.fabric.Image) {\n        fabric.warn(\"fabric.Image is already defined.\");\n        return;\n    }\n    /**\n   * Image class\n   * @class fabric.Image\n   * @extends fabric.Object\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\n   * @see {@link fabric.Image#initialize} for constructor definition\n   */ fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"image\",\n        /**\n     * Width of a stroke.\n     * For image quality a stroke multiple of 2 gives better results.\n     * @type Number\n     * @default\n     */ strokeWidth: 0,\n        /**\n     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.\n     * This allows for relative urls as image src.\n     * @since 2.7.0\n     * @type Boolean\n     * @default\n     */ srcFromAttribute: false,\n        /**\n     * private\n     * contains last value of scaleX to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */ _lastScaleX: 1,\n        /**\n     * private\n     * contains last value of scaleY to detect\n     * if the Image got resized after the last Render\n     * @type Number\n     */ _lastScaleY: 1,\n        /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */ _filterScalingX: 1,\n        /**\n     * private\n     * contains last value of scaling applied by the apply filter chain\n     * @type Number\n     */ _filterScalingY: 1,\n        /**\n     * minimum scale factor under which any resizeFilter is triggered to resize the image\n     * 0 will disable the automatic resize. 1 will trigger automatically always.\n     * number bigger than 1 are not implemented yet.\n     * @type Number\n     */ minimumScaleTrigger: 0.5,\n        /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */ stateProperties: fabric.Object.prototype.stateProperties.concat(\"cropX\", \"cropY\"),\n        /**\n     * List of properties to consider when checking if cache needs refresh\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\n     * and refreshed at the next render\n     * @type Array\n     */ cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"cropX\", \"cropY\"),\n        /**\n     * key used to retrieve the texture representing this image\n     * @since 2.0.0\n     * @type String\n     * @default\n     */ cacheKey: \"\",\n        /**\n     * Image crop in pixels from original image size.\n     * @since 2.0.0\n     * @type Number\n     * @default\n     */ cropX: 0,\n        /**\n     * Image crop in pixels from original image size.\n     * @since 2.0.0\n     * @type Number\n     * @default\n     */ cropY: 0,\n        /**\n     * Indicates whether this canvas will use image smoothing when painting this image.\n     * Also influence if the cacheCanvas for this image uses imageSmoothing\n     * @since 4.0.0-beta.11\n     * @type Boolean\n     * @default\n     */ imageSmoothing: true,\n        /**\n     * Constructor\n     * Image can be initialized with any canvas drawable or a string.\n     * The string should be a url and will be loaded as an image.\n     * Canvas and Image element work out of the box, while videos require extra code to work.\n     * Please check video element events for seeking.\n     * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element\n     * @param {Object} [options] Options object\n     * @param {function} [callback] callback function to call after eventual filters applied.\n     * @return {fabric.Image} thisArg\n     */ initialize: function(element, options) {\n            options || (options = {});\n            this.filters = [];\n            this.cacheKey = \"texture\" + fabric.Object.__uid++;\n            this.callSuper(\"initialize\", options);\n            this._initElement(element, options);\n        },\n        /**\n     * Returns image element which this instance if based on\n     * @return {HTMLImageElement} Image element\n     */ getElement: function() {\n            return this._element || {};\n        },\n        /**\n     * Sets image element for this instance to a specified one.\n     * If filters defined they are applied to new image.\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\n     * @param {HTMLImageElement} element\n     * @param {Object} [options] Options object\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */ setElement: function(element, options) {\n            this.removeTexture(this.cacheKey);\n            this.removeTexture(this.cacheKey + \"_filtered\");\n            this._element = element;\n            this._originalElement = element;\n            this._initConfig(options);\n            if (this.filters.length !== 0) {\n                this.applyFilters();\n            }\n            // resizeFilters work on the already filtered copy.\n            // we need to apply resizeFilters AFTER normal filters.\n            // applyResizeFilters is run more often than normal filters\n            // and is triggered by user interactions rather than dev code\n            if (this.resizeFilter) {\n                this.applyResizeFilters();\n            }\n            return this;\n        },\n        /**\n     * Delete a single texture if in webgl mode\n     */ removeTexture: function(key) {\n            var backend = fabric.filterBackend;\n            if (backend && backend.evictCachesForKey) {\n                backend.evictCachesForKey(key);\n            }\n        },\n        /**\n     * Delete textures, reference to elements and eventually JSDOM cleanup\n     */ dispose: function() {\n            this.callSuper(\"dispose\");\n            this.removeTexture(this.cacheKey);\n            this.removeTexture(this.cacheKey + \"_filtered\");\n            this._cacheContext = undefined;\n            [\n                \"_originalElement\",\n                \"_element\",\n                \"_filteredEl\",\n                \"_cacheCanvas\"\n            ].forEach((function(element) {\n                fabric.util.cleanUpJsdomNode(this[element]);\n                this[element] = undefined;\n            }).bind(this));\n        },\n        /**\n     * Get the crossOrigin value (of the corresponding image element)\n     */ getCrossOrigin: function() {\n            return this._originalElement && (this._originalElement.crossOrigin || null);\n        },\n        /**\n     * Returns original size of an image\n     * @return {Object} Object with \"width\" and \"height\" properties\n     */ getOriginalSize: function() {\n            var element = this.getElement();\n            return {\n                width: element.naturalWidth || element.width,\n                height: element.naturalHeight || element.height\n            };\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _stroke: function(ctx) {\n            if (!this.stroke || this.strokeWidth === 0) {\n                return;\n            }\n            var w = this.width / 2, h = this.height / 2;\n            ctx.beginPath();\n            ctx.moveTo(-w, -h);\n            ctx.lineTo(w, -h);\n            ctx.lineTo(w, h);\n            ctx.lineTo(-w, h);\n            ctx.lineTo(-w, -h);\n            ctx.closePath();\n        },\n        /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            var filters = [];\n            this.filters.forEach(function(filterObj) {\n                if (filterObj) {\n                    filters.push(filterObj.toObject());\n                }\n            });\n            var object = extend(this.callSuper(\"toObject\", [\n                \"cropX\",\n                \"cropY\"\n            ].concat(propertiesToInclude)), {\n                src: this.getSrc(),\n                crossOrigin: this.getCrossOrigin(),\n                filters: filters\n            });\n            if (this.resizeFilter) {\n                object.resizeFilter = this.resizeFilter.toObject();\n            }\n            return object;\n        },\n        /**\n     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\n     * @return {Boolean}\n     */ hasCrop: function() {\n            return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\n        },\n        /**\n     * Returns source of an image\n     * @param {Boolean} filtered indicates if the src is needed for svg\n     * @return {String} Source of an image\n     */ getSrc: function(filtered) {\n            var element = filtered ? this._element : this._originalElement;\n            if (element) {\n                if (element.toDataURL) {\n                    return element.toDataURL();\n                }\n                if (this.srcFromAttribute) {\n                    return element.getAttribute(\"src\");\n                } else {\n                    return element.src;\n                }\n            } else {\n                return this.src || \"\";\n            }\n        },\n        /**\n     * Sets source of an image\n     * @param {String} src Source string (URL)\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\n     * @param {Object} [options] Options object\n     * @param {String} [options.crossOrigin] crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\n     * @return {fabric.Image} thisArg\n     * @chainable\n     */ setSrc: function(src, callback, options) {\n            fabric.util.loadImage(src, function(img, isError) {\n                this.setElement(img, options);\n                this._setWidthHeight();\n                callback && callback(this, isError);\n            }, this, options && options.crossOrigin);\n            return this;\n        },\n        /**\n     * Returns string representation of an instance\n     * @return {String} String representation of an instance\n     */ toString: function() {\n            return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n        },\n        applyResizeFilters: function() {\n            var filter = this.resizeFilter, minimumScale = this.minimumScaleTrigger, objectScale = this.getTotalObjectScaling(), scaleX = objectScale.scaleX, scaleY = objectScale.scaleY, elementToFilter = this._filteredEl || this._originalElement;\n            if (this.group) {\n                this.set(\"dirty\", true);\n            }\n            if (!filter || scaleX > minimumScale && scaleY > minimumScale) {\n                this._element = elementToFilter;\n                this._filterScalingX = 1;\n                this._filterScalingY = 1;\n                this._lastScaleX = scaleX;\n                this._lastScaleY = scaleY;\n                return;\n            }\n            if (!fabric.filterBackend) {\n                fabric.filterBackend = fabric.initFilterBackend();\n            }\n            var canvasEl = fabric.util.createCanvasElement(), cacheKey = this._filteredEl ? this.cacheKey + \"_filtered\" : this.cacheKey, sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\n            canvasEl.width = sourceWidth;\n            canvasEl.height = sourceHeight;\n            this._element = canvasEl;\n            this._lastScaleX = filter.scaleX = scaleX;\n            this._lastScaleY = filter.scaleY = scaleY;\n            fabric.filterBackend.applyFilters([\n                filter\n            ], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\n            this._filterScalingX = canvasEl.width / this._originalElement.width;\n            this._filterScalingY = canvasEl.height / this._originalElement.height;\n        },\n        /**\n     * Applies filters assigned to this image (from \"filters\" array) or from filter param\n     * @method applyFilters\n     * @param {Array} filters to be applied\n     * @param {Boolean} forResizing specify if the filter operation is a resize operation\n     * @return {thisArg} return the fabric.Image object\n     * @chainable\n     */ applyFilters: function(filters) {\n            filters = filters || this.filters || [];\n            filters = filters.filter(function(filter) {\n                return filter && !filter.isNeutralState();\n            });\n            this.set(\"dirty\", true);\n            // needs to clear out or WEBGL will not resize correctly\n            this.removeTexture(this.cacheKey + \"_filtered\");\n            if (filters.length === 0) {\n                this._element = this._originalElement;\n                this._filteredEl = null;\n                this._filterScalingX = 1;\n                this._filterScalingY = 1;\n                return this;\n            }\n            var imgElement = this._originalElement, sourceWidth = imgElement.naturalWidth || imgElement.width, sourceHeight = imgElement.naturalHeight || imgElement.height;\n            if (this._element === this._originalElement) {\n                // if the element is the same we need to create a new element\n                var canvasEl = fabric.util.createCanvasElement();\n                canvasEl.width = sourceWidth;\n                canvasEl.height = sourceHeight;\n                this._element = canvasEl;\n                this._filteredEl = canvasEl;\n            } else {\n                // clear the existing element to get new filter data\n                // also dereference the eventual resized _element\n                this._element = this._filteredEl;\n                this._filteredEl.getContext(\"2d\").clearRect(0, 0, sourceWidth, sourceHeight);\n                // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n                this._lastScaleX = 1;\n                this._lastScaleY = 1;\n            }\n            if (!fabric.filterBackend) {\n                fabric.filterBackend = fabric.initFilterBackend();\n            }\n            fabric.filterBackend.applyFilters(filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\n            if (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) {\n                this._filterScalingX = this._element.width / this._originalElement.width;\n                this._filterScalingY = this._element.height / this._originalElement.height;\n            }\n            return this;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _render: function(ctx) {\n            fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\n            if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n                this.applyResizeFilters();\n            }\n            this._stroke(ctx);\n            this._renderPaintInOrder(ctx);\n        },\n        /**\n     * Paint the cached copy of the object on the target context.\n     * it will set the imageSmoothing for the draw operation\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ drawCacheOnCanvas: function(ctx) {\n            fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\n            fabric.Object.prototype.drawCacheOnCanvas.call(this, ctx);\n        },\n        /**\n     * Decide if the object should cache or not. Create its own cache level\n     * needsItsOwnCache should be used when the object drawing method requires\n     * a cache step. None of the fabric classes requires it.\n     * Generally you do not cache objects in groups because the group outside is cached.\n     * This is the special image version where we would like to avoid caching where possible.\n     * Essentially images do not benefit from caching. They may require caching, and in that\n     * case we do it. Also caching an image usually ends in a loss of details.\n     * A full performance audit should be done.\n     * @return {Boolean}\n     */ shouldCache: function() {\n            return this.needsItsOwnCache();\n        },\n        _renderFill: function(ctx) {\n            var elementToDraw = this._element;\n            if (!elementToDraw) {\n                return;\n            }\n            var scaleX = this._filterScalingX, scaleY = this._filterScalingY, w = this.width, h = this.height, min = Math.min, max = Math.max, // crop values cannot be lesser than 0.\n            cropX = max(this.cropX, 0), cropY = max(this.cropY, 0), elWidth = elementToDraw.naturalWidth || elementToDraw.width, elHeight = elementToDraw.naturalHeight || elementToDraw.height, sX = cropX * scaleX, sY = cropY * scaleY, // the width height cannot exceed element width/height, starting from the crop offset.\n            sW = min(w * scaleX, elWidth - sX), sH = min(h * scaleY, elHeight - sY), x = -w / 2, y = -h / 2, maxDestW = min(w, elWidth / scaleX - cropX), maxDestH = min(h, elHeight / scaleY - cropY);\n            elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n        },\n        /**\n     * needed to check if image needs resize\n     * @private\n     */ _needsResize: function() {\n            var scale = this.getTotalObjectScaling();\n            return scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY;\n        },\n        /**\n     * @private\n     */ _resetWidthHeight: function() {\n            this.set(this.getOriginalSize());\n        },\n        /**\n     * The Image class's initialization method. This method is automatically\n     * called by the constructor.\n     * @private\n     * @param {HTMLImageElement|String} element The element representing the image\n     * @param {Object} [options] Options object\n     */ _initElement: function(element, options) {\n            this.setElement(fabric.util.getById(element), options);\n            fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n        },\n        /**\n     * @private\n     * @param {Object} [options] Options object\n     */ _initConfig: function(options) {\n            options || (options = {});\n            this.setOptions(options);\n            this._setWidthHeight(options);\n        },\n        /**\n     * @private\n     * @param {Array} filters to be initialized\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\n     */ _initFilters: function(filters, callback) {\n            if (filters && filters.length) {\n                fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n                    callback && callback(enlivenedObjects);\n                }, \"fabric.Image.filters\");\n            } else {\n                callback && callback();\n            }\n        },\n        /**\n     * @private\n     * Set the width and the height of the image object, using the element or the\n     * options.\n     * @param {Object} [options] Object with width/height properties\n     */ _setWidthHeight: function(options) {\n            options || (options = {});\n            var el = this.getElement();\n            this.width = options.width || el.naturalWidth || el.width || 0;\n            this.height = options.height || el.naturalHeight || el.height || 0;\n        },\n        /**\n     * Calculate offset for center and scale factor for the image in order to respect\n     * the preserveAspectRatio attribute\n     * @private\n     * @return {Object}\n     */ parsePreserveAspectRatioAttribute: function() {\n            var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || \"\"), rWidth = this._element.width, rHeight = this._element.height, scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0, offset, pWidth = this.width, pHeight = this.height, parsedAttributes = {\n                width: pWidth,\n                height: pHeight\n            };\n            if (pAR && (pAR.alignX !== \"none\" || pAR.alignY !== \"none\")) {\n                if (pAR.meetOrSlice === \"meet\") {\n                    scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\n                    offset = (pWidth - rWidth * scaleX) / 2;\n                    if (pAR.alignX === \"Min\") {\n                        offsetLeft = -offset;\n                    }\n                    if (pAR.alignX === \"Max\") {\n                        offsetLeft = offset;\n                    }\n                    offset = (pHeight - rHeight * scaleY) / 2;\n                    if (pAR.alignY === \"Min\") {\n                        offsetTop = -offset;\n                    }\n                    if (pAR.alignY === \"Max\") {\n                        offsetTop = offset;\n                    }\n                }\n                if (pAR.meetOrSlice === \"slice\") {\n                    scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\n                    offset = rWidth - pWidth / scaleX;\n                    if (pAR.alignX === \"Mid\") {\n                        cropX = offset / 2;\n                    }\n                    if (pAR.alignX === \"Max\") {\n                        cropX = offset;\n                    }\n                    offset = rHeight - pHeight / scaleY;\n                    if (pAR.alignY === \"Mid\") {\n                        cropY = offset / 2;\n                    }\n                    if (pAR.alignY === \"Max\") {\n                        cropY = offset;\n                    }\n                    rWidth = pWidth / scaleX;\n                    rHeight = pHeight / scaleY;\n                }\n            } else {\n                scaleX = pWidth / rWidth;\n                scaleY = pHeight / rHeight;\n            }\n            return {\n                width: rWidth,\n                height: rHeight,\n                scaleX: scaleX,\n                scaleY: scaleY,\n                offsetLeft: offsetLeft,\n                offsetTop: offsetTop,\n                cropX: cropX,\n                cropY: cropY\n            };\n        }\n    });\n    /**\n   * Default CSS class name for canvas\n   * @static\n   * @type String\n   * @default\n   */ fabric.Image.CSS_CANVAS = \"canvas-img\";\n    /**\n   * Alias for getSrc\n   * @static\n   */ fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n    /**\n   * Creates an instance of fabric.Image from its object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} callback Callback to invoke when an image instance is created\n   */ fabric.Image.fromObject = function(_object, callback) {\n        var object = fabric.util.object.clone(_object);\n        fabric.util.loadImage(object.src, function(img, isError) {\n            if (isError) {\n                callback && callback(null, true);\n                return;\n            }\n            fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n                object.filters = filters || [];\n                fabric.Image.prototype._initFilters.call(object, [\n                    object.resizeFilter\n                ], function(resizeFilters) {\n                    object.resizeFilter = resizeFilters[0];\n                    fabric.util.enlivenObjectEnlivables(object, object, function() {\n                        var image = new fabric.Image(img, object);\n                        callback(image, false);\n                    });\n                });\n            });\n        }, null, object.crossOrigin);\n    };\n    /**\n   * Creates an instance of fabric.Image from an URL string\n   * @static\n   * @param {String} url URL to create an image from\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument). Second argument is a boolean indicating if an error occurred or not.\n   * @param {Object} [imgOptions] Options object\n   */ fabric.Image.fromURL = function(url, callback, imgOptions) {\n        fabric.util.loadImage(url, function(img, isError) {\n            callback && callback(new fabric.Image(img, imgOptions), isError);\n        }, null, imgOptions && imgOptions.crossOrigin);\n    };\n})( true ? exports : 0);\n(function() {\n    \"use strict\";\n    /**\n   * Tests if webgl supports certain precision\n   * @param {WebGL} Canvas WebGL context to test on\n   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\n   */ function testPrecision(gl, precision) {\n        var fragmentSource = \"precision \" + precision + \" float;\\nvoid main(){}\";\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Indicate whether this filtering backend is supported by the user's browser.\n   * @param {Number} tileSize check if the tileSize is supported\n   * @returns {Boolean} Whether the user's browser supports WebGL.\n   */ fabric.isWebglSupported = function(tileSize) {\n        if (fabric.isLikelyNode) {\n            return false;\n        }\n        tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\n        var canvas = document.createElement(\"canvas\");\n        var gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n        var isSupported = false;\n        // eslint-disable-next-line\n        if (gl) {\n            fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n            isSupported = fabric.maxTextureSize >= tileSize;\n            var precisions = [\n                \"highp\",\n                \"mediump\",\n                \"lowp\"\n            ];\n            for(var i = 0; i < 3; i++){\n                if (testPrecision(gl, precisions[i])) {\n                    fabric.webGlPrecision = precisions[i];\n                    break;\n                }\n                ;\n            }\n        }\n        this.isSupported = isSupported;\n        return isSupported;\n    };\n    fabric.WebglFilterBackend = WebglFilterBackend;\n    /**\n   * WebGL filter backend.\n   */ function WebglFilterBackend(options) {\n        if (options && options.tileSize) {\n            this.tileSize = options.tileSize;\n        }\n        this.setupGLContext(this.tileSize, this.tileSize);\n        this.captureGPUInfo();\n    }\n    ;\n    WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\n        tileSize: 2048,\n        /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you probably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/ resources: {},\n        /**\n     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\n     */ setupGLContext: function(width, height) {\n            this.dispose();\n            this.createWebGLCanvas(width, height);\n            // eslint-disable-next-line\n            this.aPosition = new Float32Array([\n                0,\n                0,\n                0,\n                1,\n                1,\n                0,\n                1,\n                1\n            ]);\n            this.chooseFastestCopyGLTo2DMethod(width, height);\n        },\n        /**\n     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\n     * putImageData is faster than drawImage for that specific operation.\n     */ chooseFastestCopyGLTo2DMethod: function(width, height) {\n            var canMeasurePerf = typeof window.performance !== \"undefined\", canUseImageData;\n            try {\n                new ImageData(1, 1);\n                canUseImageData = true;\n            } catch (e) {\n                canUseImageData = false;\n            }\n            // eslint-disable-next-line no-undef\n            var canUseArrayBuffer = typeof ArrayBuffer !== \"undefined\";\n            // eslint-disable-next-line no-undef\n            var canUseUint8Clamped = typeof Uint8ClampedArray !== \"undefined\";\n            if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\n                return;\n            }\n            var targetCanvas = fabric.util.createCanvasElement();\n            // eslint-disable-next-line no-undef\n            var imageBuffer = new ArrayBuffer(width * height * 4);\n            if (fabric.forceGLPutImageData) {\n                this.imageBuffer = imageBuffer;\n                this.copyGLTo2D = copyGLTo2DPutImageData;\n                return;\n            }\n            var testContext = {\n                imageBuffer: imageBuffer,\n                destinationWidth: width,\n                destinationHeight: height,\n                targetCanvas: targetCanvas\n            };\n            var startTime, drawImageTime, putImageDataTime;\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            startTime = window.performance.now();\n            copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\n            drawImageTime = window.performance.now() - startTime;\n            startTime = window.performance.now();\n            copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\n            putImageDataTime = window.performance.now() - startTime;\n            if (drawImageTime > putImageDataTime) {\n                this.imageBuffer = imageBuffer;\n                this.copyGLTo2D = copyGLTo2DPutImageData;\n            } else {\n                this.copyGLTo2D = copyGLTo2DDrawImage;\n            }\n        },\n        /**\n     * Create a canvas element and associated WebGL context and attaches them as\n     * class properties to the GLFilterBackend class.\n     */ createWebGLCanvas: function(width, height) {\n            var canvas = fabric.util.createCanvasElement();\n            canvas.width = width;\n            canvas.height = height;\n            var glOptions = {\n                alpha: true,\n                premultipliedAlpha: false,\n                depth: false,\n                stencil: false,\n                antialias: false\n            }, gl = canvas.getContext(\"webgl\", glOptions);\n            if (!gl) {\n                gl = canvas.getContext(\"experimental-webgl\", glOptions);\n            }\n            if (!gl) {\n                return;\n            }\n            gl.clearColor(0, 0, 0, 0);\n            // this canvas can fire webglcontextlost and webglcontextrestored\n            this.canvas = canvas;\n            this.gl = gl;\n        },\n        /**\n     * Attempts to apply the requested filters to the source provided, drawing the filtered output\n     * to the provided target canvas.\n     *\n     * @param {Array} filters The filters to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\n     * @param {Number} width The width of the source input.\n     * @param {Number} height The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\n     * omitted, caching will be skipped.\n     */ applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\n            var gl = this.gl;\n            var cachedTexture;\n            if (cacheKey) {\n                cachedTexture = this.getCachedTexture(cacheKey, source);\n            }\n            var pipelineState = {\n                originalWidth: source.width || source.originalWidth,\n                originalHeight: source.height || source.originalHeight,\n                sourceWidth: width,\n                sourceHeight: height,\n                destinationWidth: width,\n                destinationHeight: height,\n                context: gl,\n                sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\n                targetTexture: this.createTexture(gl, width, height),\n                originalTexture: cachedTexture || this.createTexture(gl, width, height, !cachedTexture && source),\n                passes: filters.length,\n                webgl: true,\n                aPosition: this.aPosition,\n                programCache: this.programCache,\n                pass: 0,\n                filterBackend: this,\n                targetCanvas: targetCanvas\n            };\n            var tempFbo = gl.createFramebuffer();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n            filters.forEach(function(filter) {\n                filter && filter.applyTo(pipelineState);\n            });\n            resizeCanvasIfNeeded(pipelineState);\n            this.copyGLTo2D(gl, pipelineState);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            gl.deleteTexture(pipelineState.sourceTexture);\n            gl.deleteTexture(pipelineState.targetTexture);\n            gl.deleteFramebuffer(tempFbo);\n            targetCanvas.getContext(\"2d\").setTransform(1, 0, 0, 1, 0, 0);\n            return pipelineState;\n        },\n        /**\n     * Detach event listeners, remove references, and clean up caches.\n     */ dispose: function() {\n            if (this.canvas) {\n                this.canvas = null;\n                this.gl = null;\n            }\n            this.clearWebGLCaches();\n        },\n        /**\n     * Wipe out WebGL-related caches.\n     */ clearWebGLCaches: function() {\n            this.programCache = {};\n            this.textureCache = {};\n        },\n        /**\n     * Create a WebGL texture object.\n     *\n     * Accepts specific dimensions to initialize the texture to or a source image.\n     *\n     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\n     * @param {Number} width The width to initialize the texture at.\n     * @param {Number} height The height to initialize the texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\n     * @returns {WebGLTexture}\n     */ createTexture: function(gl, width, height, textureImageSource) {\n            var texture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (textureImageSource) {\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\n            } else {\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            }\n            return texture;\n        },\n        /**\n     * Can be optionally used to get a texture from the cache array\n     *\n     * If an existing texture is not found, a new texture is created and cached.\n     *\n     * @param {String} uniqueId A cache key to use to find an existing texture.\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\n     * texture cache entry if one does not already exist.\n     */ getCachedTexture: function(uniqueId, textureImageSource) {\n            if (this.textureCache[uniqueId]) {\n                return this.textureCache[uniqueId];\n            } else {\n                var texture = this.createTexture(this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\n                this.textureCache[uniqueId] = texture;\n                return texture;\n            }\n        },\n        /**\n     * Clear out cached resources related to a source image that has been\n     * filtered previously.\n     *\n     * @param {String} cacheKey The cache key provided when the source image was filtered.\n     */ evictCachesForKey: function(cacheKey) {\n            if (this.textureCache[cacheKey]) {\n                this.gl.deleteTexture(this.textureCache[cacheKey]);\n                delete this.textureCache[cacheKey];\n            }\n        },\n        copyGLTo2D: copyGLTo2DDrawImage,\n        /**\n     * Attempt to extract GPU information strings from a WebGL context.\n     *\n     * Useful information when debugging or blacklisting specific GPUs.\n     *\n     * @returns {Object} A GPU info object with renderer and vendor strings.\n     */ captureGPUInfo: function() {\n            if (this.gpuInfo) {\n                return this.gpuInfo;\n            }\n            var gl = this.gl, gpuInfo = {\n                renderer: \"\",\n                vendor: \"\"\n            };\n            if (!gl) {\n                return gpuInfo;\n            }\n            var ext = gl.getExtension(\"WEBGL_debug_renderer_info\");\n            if (ext) {\n                var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n                var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n                if (renderer) {\n                    gpuInfo.renderer = renderer.toLowerCase();\n                }\n                if (vendor) {\n                    gpuInfo.vendor = vendor.toLowerCase();\n                }\n            }\n            this.gpuInfo = gpuInfo;\n            return gpuInfo;\n        }\n    };\n})();\nfunction resizeCanvasIfNeeded(pipelineState) {\n    var targetCanvas = pipelineState.targetCanvas, width = targetCanvas.width, height = targetCanvas.height, dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight;\n    if (width !== dWidth || height !== dHeight) {\n        targetCanvas.width = dWidth;\n        targetCanvas.height = dHeight;\n    }\n}\n/**\n * Copy an input WebGL canvas on to an output 2D canvas.\n *\n * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\n * desired output image appearing in the bottom-left corner of the WebGL canvas.\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */ function copyGLTo2DDrawImage(gl, pipelineState) {\n    var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext(\"2d\");\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    var sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0, targetCanvas.width, targetCanvas.height);\n}\n/**\n * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\n * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\n *\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\n * @param {Object} pipelineState The 2D target canvas to copy on to.\n */ function copyGLTo2DPutImageData(gl, pipelineState) {\n    var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext(\"2d\"), dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight, numBytes = dWidth * dHeight * 4;\n    // eslint-disable-next-line no-undef\n    var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    // eslint-disable-next-line no-undef\n    var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    var imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n}\n(function() {\n    \"use strict\";\n    var noop = function() {};\n    fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\n    /**\n   * Canvas 2D filter backend.\n   */ function Canvas2dFilterBackend() {}\n    ;\n    Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\n        evictCachesForKey: noop,\n        dispose: noop,\n        clearWebGLCaches: noop,\n        /**\n     * Experimental. This object is a sort of repository of help layers used to avoid\n     * of recreating them during frequent filtering. If you are previewing a filter with\n     * a slider you probably do not want to create help layers every filter step.\n     * in this object there will be appended some canvases, created once, resized sometimes\n     * cleared never. Clearing is left to the developer.\n     **/ resources: {},\n        /**\n     * Apply a set of filters against a source image and draw the filtered output\n     * to the provided destination canvas.\n     *\n     * @param {EnhancedFilter} filters The filter to apply.\n     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\n     * @param {Number} sourceWidth The width of the source input.\n     * @param {Number} sourceHeight The height of the source input.\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\n     */ applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\n            var ctx = targetCanvas.getContext(\"2d\");\n            ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n            var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n            var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n            var pipelineState = {\n                sourceWidth: sourceWidth,\n                sourceHeight: sourceHeight,\n                imageData: imageData,\n                originalEl: sourceElement,\n                originalImageData: originalImageData,\n                canvasEl: targetCanvas,\n                ctx: ctx,\n                filterBackend: this\n            };\n            filters.forEach(function(filter) {\n                filter.applyTo(pipelineState);\n            });\n            if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\n                targetCanvas.width = pipelineState.imageData.width;\n                targetCanvas.height = pipelineState.imageData.height;\n            }\n            ctx.putImageData(pipelineState.imageData, 0, 0);\n            return pipelineState;\n        }\n    };\n})();\n/**\n * @namespace fabric.Image.filters\n * @memberOf fabric.Image\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\n * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n */ fabric.Image = fabric.Image || {};\nfabric.Image.filters = fabric.Image.filters || {};\n/**\n * Root filter class from which all filter classes inherit from\n * @class fabric.Image.filters.BaseFilter\n * @memberOf fabric.Image.filters\n */ fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n    /**\n   * Filter type\n   * @param {String} type\n   * @default\n   */ type: \"BaseFilter\",\n    /**\n   * Array of attributes to send with buffers. do not modify\n   * @private\n   */ vertexSource: \"attribute vec2 aPosition;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vTexCoord = aPosition;\\n\" + \"gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n\" + \"}\",\n    fragmentSource: \"precision highp float;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"void main() {\\n\" + \"gl_FragColor = texture2D(uTexture, vTexCoord);\\n\" + \"}\",\n    /**\n   * Constructor\n   * @param {Object} [options] Options object\n   */ initialize: function(options) {\n        if (options) {\n            this.setOptions(options);\n        }\n    },\n    /**\n   * Sets filter's properties from options\n   * @param {Object} [options] Options object\n   */ setOptions: function(options) {\n        for(var prop in options){\n            this[prop] = options[prop];\n        }\n    },\n    /**\n   * Compile this filter's shader program.\n   *\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\n   * @param {String} fragmentSource fragmentShader source for compilation\n   * @param {String} vertexSource vertexShader source for compilation\n   */ createProgram: function(gl, fragmentSource, vertexSource) {\n        fragmentSource = fragmentSource || this.fragmentSource;\n        vertexSource = vertexSource || this.vertexSource;\n        if (fabric.webGlPrecision !== \"highp\") {\n            fragmentSource = fragmentSource.replace(/precision highp float/g, \"precision \" + fabric.webGlPrecision + \" float\");\n        }\n        var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexSource);\n        gl.compileShader(vertexShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            throw new Error(// eslint-disable-next-line prefer-template\n            \"Vertex shader compile error for \" + this.type + \": \" + gl.getShaderInfoLog(vertexShader));\n        }\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            throw new Error(// eslint-disable-next-line prefer-template\n            \"Fragment shader compile error for \" + this.type + \": \" + gl.getShaderInfoLog(fragmentShader));\n        }\n        var program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            throw new Error(// eslint-disable-next-line prefer-template\n            'Shader link error for \"${this.type}\" ' + gl.getProgramInfoLog(program));\n        }\n        var attributeLocations = this.getAttributeLocations(gl, program);\n        var uniformLocations = this.getUniformLocations(gl, program) || {};\n        uniformLocations.uStepW = gl.getUniformLocation(program, \"uStepW\");\n        uniformLocations.uStepH = gl.getUniformLocation(program, \"uStepH\");\n        return {\n            program: program,\n            attributeLocations: attributeLocations,\n            uniformLocations: uniformLocations\n        };\n    },\n    /**\n   * Return a map of attribute names to WebGLAttributeLocation objects.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\n   * @returns {Object} A map of attribute names to attribute locations.\n   */ getAttributeLocations: function(gl, program) {\n        return {\n            aPosition: gl.getAttribLocation(program, \"aPosition\")\n        };\n    },\n    /**\n   * Return a map of uniform names to WebGLUniformLocation objects.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\n   * @returns {Object} A map of uniform names to uniform locations.\n   */ getUniformLocations: function() {\n        // in case i do not need any special uniform i need to return an empty object\n        return {};\n    },\n    /**\n   * Send attribute data from this filter to its shader program on the GPU.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\n   */ sendAttributeData: function(gl, attributeLocations, aPositionData) {\n        var attributeLocation = attributeLocations.aPosition;\n        var buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.enableVertexAttribArray(attributeLocation);\n        gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n    },\n    _setupFrameBuffer: function(options) {\n        var gl = options.context, width, height;\n        if (options.passes > 1) {\n            width = options.destinationWidth;\n            height = options.destinationHeight;\n            if (options.sourceWidth !== width || options.sourceHeight !== height) {\n                gl.deleteTexture(options.targetTexture);\n                options.targetTexture = options.filterBackend.createTexture(gl, width, height);\n            }\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, options.targetTexture, 0);\n        } else {\n            // draw last filter on canvas and not to framebuffer.\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.finish();\n        }\n    },\n    _swapTextures: function(options) {\n        options.passes--;\n        options.pass++;\n        var temp = options.targetTexture;\n        options.targetTexture = options.sourceTexture;\n        options.sourceTexture = temp;\n    },\n    /**\n   * Generic isNeutral implementation for one parameter based filters.\n   * Used only in image applyFilters to discard filters that will not have an effect\n   * on the image\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\n   * @param {Object} options\n   **/ isNeutralState: function() {\n        var main = this.mainParameter, _class = fabric.Image.filters[this.type].prototype;\n        if (main) {\n            if (Array.isArray(_class[main])) {\n                for(var i = _class[main].length; i--;){\n                    if (this[main][i] !== _class[main][i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else {\n                return _class[main] === this[main];\n            }\n        } else {\n            return false;\n        }\n    },\n    /**\n   * Apply this filter to the input image data provided.\n   *\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */ applyTo: function(options) {\n        if (options.webgl) {\n            this._setupFrameBuffer(options);\n            this.applyToWebGL(options);\n            this._swapTextures(options);\n        } else {\n            this.applyTo2d(options);\n        }\n    },\n    /**\n   * Retrieves the cached shader.\n   * @param {Object} options\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */ retrieveShader: function(options) {\n        if (!options.programCache.hasOwnProperty(this.type)) {\n            options.programCache[this.type] = this.createProgram(options.context);\n        }\n        return options.programCache[this.type];\n    },\n    /**\n   * Apply this filter using webgl.\n   *\n   * @param {Object} options\n   * @param {Number} options.passes The number of filters remaining to be executed\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n   */ applyToWebGL: function(options) {\n        var gl = options.context;\n        var shader = this.retrieveShader(options);\n        if (options.pass === 0 && options.originalTexture) {\n            gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n        }\n        gl.useProgram(shader.program);\n        this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n        gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n        gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n        this.sendUniformData(gl, shader.uniformLocations);\n        gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    },\n    bindAdditionalTexture: function(gl, texture, textureUnit) {\n        gl.activeTexture(textureUnit);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        // reset active texture to 0 as usual\n        gl.activeTexture(gl.TEXTURE0);\n    },\n    unbindAdditionalTexture: function(gl, textureUnit) {\n        gl.activeTexture(textureUnit);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.activeTexture(gl.TEXTURE0);\n    },\n    getMainParameter: function() {\n        return this[this.mainParameter];\n    },\n    setMainParameter: function(value) {\n        this[this.mainParameter] = value;\n    },\n    /**\n   * Send uniform data from this filter to its shader program on the GPU.\n   *\n   * Intended to be overridden by subclasses.\n   *\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\n   */ sendUniformData: function() {\n    // Intentionally left blank.  Override me in subclasses.\n    },\n    /**\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\n   * remember that options.targetCanvas is available for use till end of chain.\n   */ createHelpLayer: function(options) {\n        if (!options.helpLayer) {\n            var helpLayer = document.createElement(\"canvas\");\n            helpLayer.width = options.sourceWidth;\n            helpLayer.height = options.sourceHeight;\n            options.helpLayer = helpLayer;\n        }\n    },\n    /**\n   * Returns object representation of an instance\n   * @return {Object} Object representation of an instance\n   */ toObject: function() {\n        var object = {\n            type: this.type\n        }, mainP = this.mainParameter;\n        if (mainP) {\n            object[mainP] = this[mainP];\n        }\n        return object;\n    },\n    /**\n   * Returns a JSON representation of an instance\n   * @return {Object} JSON\n   */ toJSON: function() {\n        // delegate, not alias\n        return this.toObject();\n    }\n});\nfabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\n    var filter = new fabric.Image.filters[object.type](object);\n    callback && callback(filter);\n    return filter;\n};\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Color Matrix filter class\n   * @class fabric.Image.filters.ColorMatrix\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\n   * @example <caption>Kodachrome filter</caption>\n   * var filter = new fabric.Image.filters.ColorMatrix({\n   *  matrix: [\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\n       0, 0, 0, 1, 0\n      ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"ColorMatrix\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"uniform mat4 uColorMatrix;\\n\" + \"uniform vec4 uConstants;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"color *= uColorMatrix;\\n\" + \"color += uConstants;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\n     * Colormatrix for pixels.\n     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n     * outside the -1, 1 range.\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Array} matrix array of 20 numbers.\n     * @default\n     */ matrix: [\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        mainParameter: \"matrix\",\n        /**\n     * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\n     * to save some calculation\n     * @type Boolean\n     * @default true\n     */ colorsOnly: true,\n        /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */ initialize: function(options) {\n            this.callSuper(\"initialize\", options);\n            // create a new array instead mutating the prototype with push\n            this.matrix = this.matrix.slice(0);\n        },\n        /**\n     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, iLen = data.length, m = this.matrix, r, g, b, a, i, colorsOnly = this.colorsOnly;\n            for(i = 0; i < iLen; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                if (colorsOnly) {\n                    data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n                    data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n                    data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n                } else {\n                    a = data[i + 3];\n                    data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n                    data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n                    data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n                    data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n                }\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uColorMatrix: gl.getUniformLocation(program, \"uColorMatrix\"),\n                uConstants: gl.getUniformLocation(program, \"uConstants\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            var m = this.matrix, matrix = [\n                m[0],\n                m[1],\n                m[2],\n                m[3],\n                m[5],\n                m[6],\n                m[7],\n                m[8],\n                m[10],\n                m[11],\n                m[12],\n                m[13],\n                m[15],\n                m[16],\n                m[17],\n                m[18]\n            ], constants = [\n                m[4],\n                m[9],\n                m[14],\n                m[19]\n            ];\n            gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n            gl.uniform4fv(uniformLocations.uConstants, constants);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] function to invoke after filter creation\n   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\n   */ fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Brightness filter class\n   * @class fabric.Image.filters.Brightness\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Brightness({\n   *   brightness: 0.05\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Brightness\",\n        /**\n     * Fragment source for the brightness program\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uBrightness;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"color.rgb += uBrightness;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\n     * Brightness value, from -1 to 1.\n     * translated to -255 to 255 for 2d\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\n     * @param {Number} brightness\n     * @default\n     */ brightness: 0,\n        /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */ mainParameter: \"brightness\",\n        /**\n    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n    *\n    * @param {Object} options\n    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n    */ applyTo2d: function(options) {\n            if (this.brightness === 0) {\n                return;\n            }\n            var imageData = options.imageData, data = imageData.data, i, len = data.length, brightness = Math.round(this.brightness * 255);\n            for(i = 0; i < len; i += 4){\n                data[i] = data[i] + brightness;\n                data[i + 1] = data[i + 1] + brightness;\n                data[i + 2] = data[i + 2] + brightness;\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uBrightness: gl.getUniformLocation(program, \"uBrightness\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\n   */ fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\n   * @class fabric.Image.filters.Convolute\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example <caption>Sharpen filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 0, -1,  0,\n   *            -1,  5, -1,\n   *             0, -1,  0 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Blur filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9,\n   *             1/9, 1/9, 1/9 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   * @example <caption>Emboss filter with opaqueness</caption>\n   * var filter = new fabric.Image.filters.Convolute({\n   *   opaque: true,\n   *   matrix: [ 1,   1,  1,\n   *             1, 0.7, -1,\n   *            -1,  -1, -1 ]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */ filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Convolute\",\n        /*\n     * Opaque value (true/false)\n     */ opaque: false,\n        /*\n     * matrix for the filter, max 9x9\n     */ matrix: [\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0\n        ],\n        /**\n     * Fragment source for the brightness program\n     */ fragmentSource: {\n            Convolute_3_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[9];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 3.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 3.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_3_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[9];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 3.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 3.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\",\n            Convolute_5_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[25];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 5.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 5.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_5_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[25];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 5.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 5.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\",\n            Convolute_7_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[49];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 7.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 7.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_7_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[49];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 7.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 7.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\",\n            Convolute_9_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[81];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 9.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 9.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_9_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[81];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 9.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 9.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\"\n        },\n        /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Convolute.prototype\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\n     * @param {Array} [options.matrix] Filter matrix\n     */ /**\n    * Retrieves the cached shader.\n    * @param {Object} options\n    * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n    */ retrieveShader: function(options) {\n            var size = Math.sqrt(this.matrix.length);\n            var cacheKey = this.type + \"_\" + size + \"_\" + (this.opaque ? 1 : 0);\n            var shaderSource = this.fragmentSource[cacheKey];\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, weights = this.matrix, side = Math.round(Math.sqrt(weights.length)), halfSide = Math.floor(side / 2), sw = imageData.width, sh = imageData.height, output = options.ctx.createImageData(sw, sh), dst = output.data, // go through the destination image pixels\n            alphaFac = this.opaque ? 1 : 0, r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n            for(y = 0; y < sh; y++){\n                for(x = 0; x < sw; x++){\n                    dstOff = (y * sw + x) * 4;\n                    // calculate the weighed sum of the source image pixels that\n                    // fall under the convolution matrix\n                    r = 0;\n                    g = 0;\n                    b = 0;\n                    a = 0;\n                    for(cy = 0; cy < side; cy++){\n                        for(cx = 0; cx < side; cx++){\n                            scy = y + cy - halfSide;\n                            scx = x + cx - halfSide;\n                            // eslint-disable-next-line max-depth\n                            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n                                continue;\n                            }\n                            srcOff = (scy * sw + scx) * 4;\n                            wt = weights[cy * side + cx];\n                            r += data[srcOff] * wt;\n                            g += data[srcOff + 1] * wt;\n                            b += data[srcOff + 2] * wt;\n                            // eslint-disable-next-line max-depth\n                            if (!alphaFac) {\n                                a += data[srcOff + 3] * wt;\n                            }\n                        }\n                    }\n                    dst[dstOff] = r;\n                    dst[dstOff + 1] = g;\n                    dst[dstOff + 2] = b;\n                    if (!alphaFac) {\n                        dst[dstOff + 3] = a;\n                    } else {\n                        dst[dstOff + 3] = data[dstOff + 3];\n                    }\n                }\n            }\n            options.imageData = output;\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uMatrix: gl.getUniformLocation(program, \"uMatrix\"),\n                uOpaque: gl.getUniformLocation(program, \"uOpaque\"),\n                uHalfSize: gl.getUniformLocation(program, \"uHalfSize\"),\n                uSize: gl.getUniformLocation(program, \"uSize\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n        },\n        /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */ toObject: function() {\n            return extend(this.callSuper(\"toObject\"), {\n                opaque: this.opaque,\n                matrix: this.matrix\n            });\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\n   */ fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Grayscale image filter class\n   * @class fabric.Image.filters.Grayscale\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Grayscale();\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Grayscale\",\n        fragmentSource: {\n            average: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"float average = (color.r + color.b + color.g) / 3.0;\\n\" + \"gl_FragColor = vec4(average, average, average, color.a);\\n\" + \"}\",\n            lightness: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform int uMode;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 col = texture2D(uTexture, vTexCoord);\\n\" + \"float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n\" + \"gl_FragColor = vec4(average, average, average, col.a);\\n\" + \"}\",\n            luminosity: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform int uMode;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 col = texture2D(uTexture, vTexCoord);\\n\" + \"float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n\" + \"gl_FragColor = vec4(average, average, average, col.a);\\n\" + \"}\"\n        },\n        /**\n     * Grayscale mode, between 'average', 'lightness', 'luminosity'\n     * @param {String} type\n     * @default\n     */ mode: \"average\",\n        mainParameter: \"mode\",\n        /**\n     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, i, len = data.length, value, mode = this.mode;\n            for(i = 0; i < len; i += 4){\n                if (mode === \"average\") {\n                    value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                } else if (mode === \"lightness\") {\n                    value = (Math.min(data[i], data[i + 1], data[i + 2]) + Math.max(data[i], data[i + 1], data[i + 2])) / 2;\n                } else if (mode === \"luminosity\") {\n                    value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n                }\n                data[i] = value;\n                data[i + 1] = value;\n                data[i + 2] = value;\n            }\n        },\n        /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ retrieveShader: function(options) {\n            var cacheKey = this.type + \"_\" + this.mode;\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                var shaderSource = this.fragmentSource[this.mode];\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uMode: gl.getUniformLocation(program, \"uMode\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            // default average mode.\n            var mode = 1;\n            gl.uniform1i(uniformLocations.uMode, mode);\n        },\n        /**\n     * Grayscale filter isNeutralState implementation\n     * The filter is never neutral\n     * on the image\n     **/ isNeutralState: function() {\n            return false;\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\n   */ fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Invert filter class\n   * @class fabric.Image.filters.Invert\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Invert();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */ filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Invert\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform int uInvert;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"if (uInvert == 1) {\\n\" + \"gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n\" + \"} else {\\n\" + \"gl_FragColor = color;\\n\" + \"}\\n\" + \"}\",\n        /**\n     * Filter invert. if false, does nothing\n     * @param {Boolean} invert\n     * @default\n     */ invert: true,\n        mainParameter: \"invert\",\n        /**\n     * Apply the Invert operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, i, len = data.length;\n            for(i = 0; i < len; i += 4){\n                data[i] = 255 - data[i];\n                data[i + 1] = 255 - data[i + 1];\n                data[i + 2] = 255 - data[i + 2];\n            }\n        },\n        /**\n     * Invert filter isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/ isNeutralState: function() {\n            return !this.invert;\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uInvert: gl.getUniformLocation(program, \"uInvert\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1i(uniformLocations.uInvert, this.invert);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\n   */ fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Noise filter class\n   * @class fabric.Image.filters.Noise\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Noise({\n   *   noise: 700\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */ filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Noise\",\n        /**\n     * Fragment source for the noise program\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uStepH;\\n\" + \"uniform float uNoise;\\n\" + \"uniform float uSeed;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"float rand(vec2 co, float seed, float vScale) {\\n\" + \"return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n\" + \"}\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */ mainParameter: \"noise\",\n        /**\n     * Noise value, from\n     * @param {Number} noise\n     * @default\n     */ noise: 0,\n        /**\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */ applyTo2d: function(options) {\n            if (this.noise === 0) {\n                return;\n            }\n            var imageData = options.imageData, data = imageData.data, i, len = data.length, noise = this.noise, rand;\n            for(i = 0, len = data.length; i < len; i += 4){\n                rand = (0.5 - Math.random()) * noise;\n                data[i] += rand;\n                data[i + 1] += rand;\n                data[i + 2] += rand;\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uNoise: gl.getUniformLocation(program, \"uNoise\"),\n                uSeed: gl.getUniformLocation(program, \"uSeed\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n            gl.uniform1f(uniformLocations.uSeed, Math.random());\n        },\n        /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */ toObject: function() {\n            return extend(this.callSuper(\"toObject\"), {\n                noise: this.noise\n            });\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\n   */ fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Pixelate filter class\n   * @class fabric.Image.filters.Pixelate\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Pixelate({\n   *   blocksize: 8\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Pixelate\",\n        blocksize: 4,\n        mainParameter: \"blocksize\",\n        /**\n     * Fragment source for the Pixelate program\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uBlocksize;\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"float blockW = uBlocksize * uStepW;\\n\" + \"float blockH = uBlocksize * uStepW;\\n\" + \"int posX = int(vTexCoord.x / blockW);\\n\" + \"int posY = int(vTexCoord.y / blockH);\\n\" + \"float fposX = float(posX);\\n\" + \"float fposY = float(posY);\\n\" + \"vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n\" + \"vec4 color = texture2D(uTexture, squareCoords);\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\n     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, iLen = imageData.height, jLen = imageData.width, index, i, j, r, g, b, a, _i, _j, _iLen, _jLen;\n            for(i = 0; i < iLen; i += this.blocksize){\n                for(j = 0; j < jLen; j += this.blocksize){\n                    index = i * 4 * jLen + j * 4;\n                    r = data[index];\n                    g = data[index + 1];\n                    b = data[index + 2];\n                    a = data[index + 3];\n                    _iLen = Math.min(i + this.blocksize, iLen);\n                    _jLen = Math.min(j + this.blocksize, jLen);\n                    for(_i = i; _i < _iLen; _i++){\n                        for(_j = j; _j < _jLen; _j++){\n                            index = _i * 4 * jLen + _j * 4;\n                            data[index] = r;\n                            data[index + 1] = g;\n                            data[index + 2] = b;\n                            data[index + 3] = a;\n                        }\n                    }\n                }\n            }\n        },\n        /**\n     * Indicate when the filter is not gonna apply changes to the image\n     **/ isNeutralState: function() {\n            return this.blocksize === 1;\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uBlocksize: gl.getUniformLocation(program, \"uBlocksize\"),\n                uStepW: gl.getUniformLocation(program, \"uStepW\"),\n                uStepH: gl.getUniformLocation(program, \"uStepH\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\n   */ fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Remove white filter class\n   * @class fabric.Image.filters.RemoveColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.RemoveColor({\n   *   threshold: 0.2,\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */ filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"RemoveColor\",\n        /**\n     * Color to remove, in any format understood by fabric.Color.\n     * @param {String} type\n     * @default\n     */ color: \"#FFFFFF\",\n        /**\n     * Fragment source for the brightness program\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec4 uLow;\\n\" + \"uniform vec4 uHigh;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"gl_FragColor = texture2D(uTexture, vTexCoord);\\n\" + \"if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n\" + \"gl_FragColor.a = 0.0;\\n\" + \"}\\n\" + \"}\",\n        /**\n     * distance to actual color, as value up or down from each r,g,b\n     * between 0 and 1\n     **/ distance: 0.02,\n        /**\n     * For color to remove inside distance, use alpha channel for a smoother deletion\n     * NOT IMPLEMENTED YET\n     **/ useAlpha: false,\n        /**\n     * Constructor\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.color=#RRGGBB] Threshold value\n     * @param {Number} [options.distance=10] Distance value\n     */ /**\n     * Applies filter to canvas element\n     * @param {Object} canvasEl Canvas element to apply filter to\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, i, distance = this.distance * 255, r, g, b, source = new fabric.Color(this.color).getSource(), lowC = [\n                source[0] - distance,\n                source[1] - distance,\n                source[2] - distance\n            ], highC = [\n                source[0] + distance,\n                source[1] + distance,\n                source[2] + distance\n            ];\n            for(i = 0; i < data.length; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                if (r > lowC[0] && g > lowC[1] && b > lowC[2] && r < highC[0] && g < highC[1] && b < highC[2]) {\n                    data[i + 3] = 0;\n                }\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uLow: gl.getUniformLocation(program, \"uLow\"),\n                uHigh: gl.getUniformLocation(program, \"uHigh\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            var source = new fabric.Color(this.color).getSource(), distance = parseFloat(this.distance), lowC = [\n                0 + source[0] / 255 - distance,\n                0 + source[1] / 255 - distance,\n                0 + source[2] / 255 - distance,\n                1\n            ], highC = [\n                source[0] / 255 + distance,\n                source[1] / 255 + distance,\n                source[2] / 255 + distance,\n                1\n            ];\n            gl.uniform4fv(uniformLocations.uLow, lowC);\n            gl.uniform4fv(uniformLocations.uHigh, highC);\n        },\n        /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */ toObject: function() {\n            return extend(this.callSuper(\"toObject\"), {\n                color: this.color,\n                distance: this.distance\n            });\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\n   */ fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    var matrices = {\n        Brownie: [\n            0.59970,\n            0.34553,\n            -0.27082,\n            0,\n            0.186,\n            -0.03770,\n            0.86095,\n            0.15059,\n            0,\n            -0.1449,\n            0.24113,\n            -0.07441,\n            0.44972,\n            0,\n            -0.02965,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Vintage: [\n            0.62793,\n            0.32021,\n            -0.03965,\n            0,\n            0.03784,\n            0.02578,\n            0.64411,\n            0.03259,\n            0,\n            0.02926,\n            0.04660,\n            -0.08512,\n            0.52416,\n            0,\n            0.02023,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Kodachrome: [\n            1.12855,\n            -0.39673,\n            -0.03992,\n            0,\n            0.24991,\n            -0.16404,\n            1.08352,\n            -0.05498,\n            0,\n            0.09698,\n            -0.16786,\n            -0.56034,\n            1.60148,\n            0,\n            0.13972,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Technicolor: [\n            1.91252,\n            -0.85453,\n            -0.09155,\n            0,\n            0.04624,\n            -0.30878,\n            1.76589,\n            -0.10601,\n            0,\n            -0.27589,\n            -0.23110,\n            -0.75018,\n            1.84759,\n            0,\n            0.12137,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Polaroid: [\n            1.438,\n            -0.062,\n            -0.062,\n            0,\n            0,\n            -0.122,\n            1.378,\n            -0.122,\n            0,\n            0,\n            -0.016,\n            -0.016,\n            1.483,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Sepia: [\n            0.393,\n            0.769,\n            0.189,\n            0,\n            0,\n            0.349,\n            0.686,\n            0.168,\n            0,\n            0,\n            0.272,\n            0.534,\n            0.131,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        BlackWhite: [\n            1.5,\n            1.5,\n            1.5,\n            0,\n            -1,\n            1.5,\n            1.5,\n            1.5,\n            0,\n            -1,\n            1.5,\n            1.5,\n            1.5,\n            0,\n            -1,\n            0,\n            0,\n            0,\n            1,\n            0\n        ]\n    };\n    for(var key in matrices){\n        filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\n            /**\n       * Filter type\n       * @param {String} type\n       * @default\n       */ type: key,\n            /**\n       * Colormatrix for the effect\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\n       * outside the -1, 1 range.\n       * @param {Array} matrix array of 20 numbers.\n       * @default\n       */ matrix: matrices[key],\n            /**\n       * Lock the matrix export for this kind of static, parameter less filters.\n       */ mainParameter: false,\n            /**\n       * Lock the colormatrix on the color part, skipping alpha\n       */ colorsOnly: true\n        });\n        fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\n    }\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Color Blend filter class\n   * @class fabric.Image.filter.BlendColor\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */ filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\n        type: \"BlendColor\",\n        /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     * @type String\n     * @default\n     **/ color: \"#F95C63\",\n        /**\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\n     * darken, lighten, overlay, exclusion, tint.\n     * @type String\n     * @default\n     **/ mode: \"multiply\",\n        /**\n     * alpha value. represent the strength of the blend color operation.\n     * @type Number\n     * @default\n     **/ alpha: 1,\n        /**\n     * Fragment source for the Multiply program\n     */ fragmentSource: {\n            multiply: \"gl_FragColor.rgb *= uColor.rgb;\\n\",\n            screen: \"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n\",\n            add: \"gl_FragColor.rgb += uColor.rgb;\\n\",\n            diff: \"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n\",\n            subtract: \"gl_FragColor.rgb -= uColor.rgb;\\n\",\n            lighten: \"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n\",\n            darken: \"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n\",\n            exclusion: \"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n\",\n            overlay: \"if (uColor.r < 0.5) {\\n\" + \"gl_FragColor.r *= 2.0 * uColor.r;\\n\" + \"} else {\\n\" + \"gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n\" + \"}\\n\" + \"if (uColor.g < 0.5) {\\n\" + \"gl_FragColor.g *= 2.0 * uColor.g;\\n\" + \"} else {\\n\" + \"gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n\" + \"}\\n\" + \"if (uColor.b < 0.5) {\\n\" + \"gl_FragColor.b *= 2.0 * uColor.b;\\n\" + \"} else {\\n\" + \"gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n\" + \"}\\n\",\n            tint: \"gl_FragColor.rgb *= (1.0 - uColor.a);\\n\" + \"gl_FragColor.rgb += uColor.rgb;\\n\"\n        },\n        /**\n     * build the fragment source for the filters, joining the common part with\n     * the specific one.\n     * @param {String} mode the mode of the filter, a key of this.fragmentSource\n     * @return {String} the source to be compiled\n     * @private\n     */ buildSource: function(mode) {\n            return \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec4 uColor;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"gl_FragColor = color;\\n\" + \"if (color.a > 0.0) {\\n\" + this.fragmentSource[mode] + \"}\\n\" + \"}\";\n        },\n        /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ retrieveShader: function(options) {\n            var cacheKey = this.type + \"_\" + this.mode, shaderSource;\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                shaderSource = this.buildSource(this.mode);\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, iLen = data.length, tr, tg, tb, r, g, b, source, alpha1 = 1 - this.alpha;\n            source = new fabric.Color(this.color).getSource();\n            tr = source[0] * this.alpha;\n            tg = source[1] * this.alpha;\n            tb = source[2] * this.alpha;\n            for(var i = 0; i < iLen; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                switch(this.mode){\n                    case \"multiply\":\n                        data[i] = r * tr / 255;\n                        data[i + 1] = g * tg / 255;\n                        data[i + 2] = b * tb / 255;\n                        break;\n                    case \"screen\":\n                        data[i] = 255 - (255 - r) * (255 - tr) / 255;\n                        data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\n                        data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\n                        break;\n                    case \"add\":\n                        data[i] = r + tr;\n                        data[i + 1] = g + tg;\n                        data[i + 2] = b + tb;\n                        break;\n                    case \"diff\":\n                    case \"difference\":\n                        data[i] = Math.abs(r - tr);\n                        data[i + 1] = Math.abs(g - tg);\n                        data[i + 2] = Math.abs(b - tb);\n                        break;\n                    case \"subtract\":\n                        data[i] = r - tr;\n                        data[i + 1] = g - tg;\n                        data[i + 2] = b - tb;\n                        break;\n                    case \"darken\":\n                        data[i] = Math.min(r, tr);\n                        data[i + 1] = Math.min(g, tg);\n                        data[i + 2] = Math.min(b, tb);\n                        break;\n                    case \"lighten\":\n                        data[i] = Math.max(r, tr);\n                        data[i + 1] = Math.max(g, tg);\n                        data[i + 2] = Math.max(b, tb);\n                        break;\n                    case \"overlay\":\n                        data[i] = tr < 128 ? 2 * r * tr / 255 : 255 - 2 * (255 - r) * (255 - tr) / 255;\n                        data[i + 1] = tg < 128 ? 2 * g * tg / 255 : 255 - 2 * (255 - g) * (255 - tg) / 255;\n                        data[i + 2] = tb < 128 ? 2 * b * tb / 255 : 255 - 2 * (255 - b) * (255 - tb) / 255;\n                        break;\n                    case \"exclusion\":\n                        data[i] = tr + r - 2 * tr * r / 255;\n                        data[i + 1] = tg + g - 2 * tg * g / 255;\n                        data[i + 2] = tb + b - 2 * tb * b / 255;\n                        break;\n                    case \"tint\":\n                        data[i] = tr + r * alpha1;\n                        data[i + 1] = tg + g * alpha1;\n                        data[i + 2] = tb + b * alpha1;\n                }\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uColor: gl.getUniformLocation(program, \"uColor\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            var source = new fabric.Color(this.color).getSource();\n            source[0] = this.alpha * source[0] / 255;\n            source[1] = this.alpha * source[1] / 255;\n            source[2] = this.alpha * source[2] / 255;\n            source[3] = this.alpha;\n            gl.uniform4fv(uniformLocations.uColor, source);\n        },\n        /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */ toObject: function() {\n            return {\n                type: this.type,\n                color: this.color,\n                mode: this.mode,\n                alpha: this.alpha\n            };\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\n   */ fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Image Blend filter class\n   * @class fabric.Image.filter.BlendImage\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @example\n   * var filter = new fabric.Image.filters.BlendColor({\n   *  color: '#000',\n   *  mode: 'multiply'\n   * });\n   *\n   * var filter = new fabric.Image.filters.BlendImage({\n   *  image: fabricImageObject,\n   *  mode: 'multiply',\n   *  alpha: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */ filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\n        type: \"BlendImage\",\n        /**\n     * Color to make the blend operation with. default to a reddish color since black or white\n     * gives always strong result.\n     **/ image: null,\n        /**\n     * Blend mode for the filter (one of \"multiply\", \"mask\")\n     * @type String\n     * @default\n     **/ mode: \"multiply\",\n        /**\n     * alpha value. represent the strength of the blend image operation.\n     * not implemented.\n     **/ alpha: 1,\n        vertexSource: \"attribute vec2 aPosition;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"varying vec2 vTexCoord2;\\n\" + \"uniform mat3 uTransformMatrix;\\n\" + \"void main() {\\n\" + \"vTexCoord = aPosition;\\n\" + \"vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n\" + \"gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n\" + \"}\",\n        /**\n     * Fragment source for the Multiply program\n     */ fragmentSource: {\n            multiply: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform sampler2D uImage;\\n\" + \"uniform vec4 uColor;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"varying vec2 vTexCoord2;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"vec4 color2 = texture2D(uImage, vTexCoord2);\\n\" + \"color.rgba *= color2.rgba;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            mask: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform sampler2D uImage;\\n\" + \"uniform vec4 uColor;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"varying vec2 vTexCoord2;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"vec4 color2 = texture2D(uImage, vTexCoord2);\\n\" + \"color.a = color2.a;\\n\" + \"gl_FragColor = color;\\n\" + \"}\"\n        },\n        /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ retrieveShader: function(options) {\n            var cacheKey = this.type + \"_\" + this.mode;\n            var shaderSource = this.fragmentSource[this.mode];\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        applyToWebGL: function(options) {\n            // load texture to blend.\n            var gl = options.context, texture = this.createTexture(options.filterBackend, this.image);\n            this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\n            this.callSuper(\"applyToWebGL\", options);\n            this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n        },\n        createTexture: function(backend, image) {\n            return backend.getCachedTexture(image.cacheKey, image._element);\n        },\n        /**\n     * Calculate a transformMatrix to adapt the image to blend over\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ calculateMatrix: function() {\n            var image = this.image, width = image._element.width, height = image._element.height;\n            return [\n                1 / image.scaleX,\n                0,\n                0,\n                0,\n                1 / image.scaleY,\n                0,\n                -image.left / width,\n                -image.top / height,\n                1\n            ];\n        },\n        /**\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, resources = options.filterBackend.resources, data = imageData.data, iLen = data.length, width = imageData.width, height = imageData.height, tr, tg, tb, ta, r, g, b, a, canvas1, context, image = this.image, blendData;\n            if (!resources.blendImage) {\n                resources.blendImage = fabric.util.createCanvasElement();\n            }\n            canvas1 = resources.blendImage;\n            context = canvas1.getContext(\"2d\");\n            if (canvas1.width !== width || canvas1.height !== height) {\n                canvas1.width = width;\n                canvas1.height = height;\n            } else {\n                context.clearRect(0, 0, width, height);\n            }\n            context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\n            context.drawImage(image._element, 0, 0, width, height);\n            blendData = context.getImageData(0, 0, width, height).data;\n            for(var i = 0; i < iLen; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                a = data[i + 3];\n                tr = blendData[i];\n                tg = blendData[i + 1];\n                tb = blendData[i + 2];\n                ta = blendData[i + 3];\n                switch(this.mode){\n                    case \"multiply\":\n                        data[i] = r * tr / 255;\n                        data[i + 1] = g * tg / 255;\n                        data[i + 2] = b * tb / 255;\n                        data[i + 3] = a * ta / 255;\n                        break;\n                    case \"mask\":\n                        data[i + 3] = ta;\n                        break;\n                }\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uTransformMatrix: gl.getUniformLocation(program, \"uTransformMatrix\"),\n                uImage: gl.getUniformLocation(program, \"uImage\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            var matrix = this.calculateMatrix();\n            gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n            gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n        },\n        /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */ toObject: function() {\n            return {\n                type: this.type,\n                image: this.image && this.image.toObject(),\n                mode: this.mode,\n                alpha: this.alpha\n            };\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} callback to be invoked after filter creation\n   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\n   */ fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\n        fabric.Image.fromObject(object.image, function(image) {\n            var options = fabric.util.object.clone(object);\n            options.image = image;\n            callback(new fabric.Image.filters.BlendImage(options));\n        });\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), pow = Math.pow, floor = Math.floor, sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin, ceil = Math.ceil, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Resize image filter class\n   * @class fabric.Image.filters.Resize\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Resize();\n   * object.filters.push(filter);\n   * object.applyFilters(canvas.renderAll.bind(canvas));\n   */ filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Resize\",\n        /**\n     * Resize type\n     * for webgl resizeType is just lanczos, for canvas2d can be:\n     * bilinear, hermite, sliceHack, lanczos.\n     * @param {String} resizeType\n     * @default\n     */ resizeType: \"hermite\",\n        /**\n     * Scale factor for resizing, x axis\n     * @param {Number} scaleX\n     * @default\n     */ scaleX: 1,\n        /**\n     * Scale factor for resizing, y axis\n     * @param {Number} scaleY\n     * @default\n     */ scaleY: 1,\n        /**\n     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\n     * @param {Number} lanczosLobes\n     * @default\n     */ lanczosLobes: 3,\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uDelta: gl.getUniformLocation(program, \"uDelta\"),\n                uTaps: gl.getUniformLocation(program, \"uTaps\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [\n                1 / this.width,\n                0\n            ] : [\n                0,\n                1 / this.height\n            ]);\n            gl.uniform1fv(uniformLocations.uTaps, this.taps);\n        },\n        /**\n     * Retrieves the cached shader.\n     * @param {Object} options\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ retrieveShader: function(options) {\n            var filterWindow = this.getFilterWindow(), cacheKey = this.type + \"_\" + filterWindow;\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                var fragmentShader = this.generateShader(filterWindow);\n                options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\n            }\n            return options.programCache[cacheKey];\n        },\n        getFilterWindow: function() {\n            var scale = this.tempScale;\n            return Math.ceil(this.lanczosLobes / scale);\n        },\n        getTaps: function() {\n            var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale, filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\n            for(var i = 1; i <= filterWindow; i++){\n                taps[i - 1] = lobeFunction(i * scale);\n            }\n            return taps;\n        },\n        /**\n     * Generate vertex and shader sources from the necessary steps numbers\n     * @param {Number} filterWindow\n     */ generateShader: function(filterWindow) {\n            var offsets = new Array(filterWindow), fragmentShader = this.fragmentSourceTOP, filterWindow;\n            for(var i = 1; i <= filterWindow; i++){\n                offsets[i - 1] = i + \".0 * uDelta\";\n            }\n            fragmentShader += \"uniform float uTaps[\" + filterWindow + \"];\\n\";\n            fragmentShader += \"void main() {\\n\";\n            fragmentShader += \"  vec4 color = texture2D(uTexture, vTexCoord);\\n\";\n            fragmentShader += \"  float sum = 1.0;\\n\";\n            offsets.forEach(function(offset, i) {\n                fragmentShader += \"  color += texture2D(uTexture, vTexCoord + \" + offset + \") * uTaps[\" + i + \"];\\n\";\n                fragmentShader += \"  color += texture2D(uTexture, vTexCoord - \" + offset + \") * uTaps[\" + i + \"];\\n\";\n                fragmentShader += \"  sum += 2.0 * uTaps[\" + i + \"];\\n\";\n            });\n            fragmentShader += \"  gl_FragColor = color / sum;\\n\";\n            fragmentShader += \"}\";\n            return fragmentShader;\n        },\n        fragmentSourceTOP: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec2 uDelta;\\n\" + \"varying vec2 vTexCoord;\\n\",\n        /**\n     * Apply the resize filter to the image\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ applyTo: function(options) {\n            if (options.webgl) {\n                options.passes++;\n                this.width = options.sourceWidth;\n                this.horizontal = true;\n                this.dW = Math.round(this.width * this.scaleX);\n                this.dH = options.sourceHeight;\n                this.tempScale = this.dW / this.width;\n                this.taps = this.getTaps();\n                options.destinationWidth = this.dW;\n                this._setupFrameBuffer(options);\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n                options.sourceWidth = options.destinationWidth;\n                this.height = options.sourceHeight;\n                this.horizontal = false;\n                this.dH = Math.round(this.height * this.scaleY);\n                this.tempScale = this.dH / this.height;\n                this.taps = this.getTaps();\n                options.destinationHeight = this.dH;\n                this._setupFrameBuffer(options);\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n                options.sourceHeight = options.destinationHeight;\n            } else {\n                this.applyTo2d(options);\n            }\n        },\n        isNeutralState: function() {\n            return this.scaleX === 1 && this.scaleY === 1;\n        },\n        lanczosCreate: function(lobes) {\n            return function(x) {\n                if (x >= lobes || x <= -lobes) {\n                    return 0.0;\n                }\n                if (x < 1.19209290E-07 && x > -1.19209290E-07) {\n                    return 1.0;\n                }\n                x *= Math.PI;\n                var xx = x / lobes;\n                return sin(x) / x * sin(xx) / xx;\n            };\n        },\n        /**\n     * Applies filter to canvas element\n     * @memberOf fabric.Image.filters.Resize.prototype\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, scaleX = this.scaleX, scaleY = this.scaleY;\n            this.rcpScaleX = 1 / scaleX;\n            this.rcpScaleY = 1 / scaleY;\n            var oW = imageData.width, oH = imageData.height, dW = round(oW * scaleX), dH = round(oH * scaleY), newData;\n            if (this.resizeType === \"sliceHack\") {\n                newData = this.sliceByTwo(options, oW, oH, dW, dH);\n            } else if (this.resizeType === \"hermite\") {\n                newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n            } else if (this.resizeType === \"bilinear\") {\n                newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n            } else if (this.resizeType === \"lanczos\") {\n                newData = this.lanczosResize(options, oW, oH, dW, dH);\n            }\n            options.imageData = newData;\n        },\n        /**\n     * Filter sliceByTwo\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */ sliceByTwo: function(options, oW, oH, dW, dH) {\n            var imageData = options.imageData, mult = 0.5, doneW = false, doneH = false, stepW = oW * mult, stepH = oH * mult, resources = fabric.filterBackend.resources, tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\n            if (!resources.sliceByTwo) {\n                resources.sliceByTwo = document.createElement(\"canvas\");\n            }\n            tmpCanvas = resources.sliceByTwo;\n            if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n                tmpCanvas.width = oW * 1.5;\n                tmpCanvas.height = oH;\n            }\n            ctx = tmpCanvas.getContext(\"2d\");\n            ctx.clearRect(0, 0, oW * 1.5, oH);\n            ctx.putImageData(imageData, 0, 0);\n            dW = floor(dW);\n            dH = floor(dH);\n            while(!doneW || !doneH){\n                oW = stepW;\n                oH = stepH;\n                if (dW < floor(stepW * mult)) {\n                    stepW = floor(stepW * mult);\n                } else {\n                    stepW = dW;\n                    doneW = true;\n                }\n                if (dH < floor(stepH * mult)) {\n                    stepH = floor(stepH * mult);\n                } else {\n                    stepH = dH;\n                    doneH = true;\n                }\n                ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n                sX = dX;\n                sY = dY;\n                dY += stepH;\n            }\n            return ctx.getImageData(sX, sY, dW, dH);\n        },\n        /**\n     * Filter lanczosResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */ lanczosResize: function(options, oW, oH, dW, dH) {\n            function process(u) {\n                var v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n                center.x = (u + 0.5) * ratioX;\n                icenter.x = floor(center.x);\n                for(v = 0; v < dH; v++){\n                    center.y = (v + 0.5) * ratioY;\n                    icenter.y = floor(center.y);\n                    a = 0;\n                    red = 0;\n                    green = 0;\n                    blue = 0;\n                    alpha = 0;\n                    for(i = icenter.x - range2X; i <= icenter.x + range2X; i++){\n                        if (i < 0 || i >= oW) {\n                            continue;\n                        }\n                        fX = floor(1000 * abs(i - center.x));\n                        if (!cacheLanc[fX]) {\n                            cacheLanc[fX] = {};\n                        }\n                        for(var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++){\n                            if (j < 0 || j >= oH) {\n                                continue;\n                            }\n                            fY = floor(1000 * abs(j - center.y));\n                            if (!cacheLanc[fX][fY]) {\n                                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n                            }\n                            weight = cacheLanc[fX][fY];\n                            if (weight > 0) {\n                                idx = (j * oW + i) * 4;\n                                a += weight;\n                                red += weight * srcData[idx];\n                                green += weight * srcData[idx + 1];\n                                blue += weight * srcData[idx + 2];\n                                alpha += weight * srcData[idx + 3];\n                            }\n                        }\n                    }\n                    idx = (v * dW + u) * 4;\n                    destData[idx] = red / a;\n                    destData[idx + 1] = green / a;\n                    destData[idx + 2] = blue / a;\n                    destData[idx + 3] = alpha / a;\n                }\n                if (++u < dW) {\n                    return process(u);\n                } else {\n                    return destImg;\n                }\n            }\n            var srcData = options.imageData.data, destImg = options.ctx.createImageData(dW, dH), destData = destImg.data, lanczos = this.lanczosCreate(this.lanczosLobes), ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY, range2X = ceil(ratioX * this.lanczosLobes / 2), range2Y = ceil(ratioY * this.lanczosLobes / 2), cacheLanc = {}, center = {}, icenter = {};\n            return process(0);\n        },\n        /**\n     * bilinearFiltering\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */ bilinearFiltering: function(options, oW, oH, dW, dH) {\n            var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl, color, offset = 0, origPix, ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, w4 = 4 * (oW - 1), img = options.imageData, pixels = img.data, destImage = options.ctx.createImageData(dW, dH), destPixels = destImage.data;\n            for(i = 0; i < dH; i++){\n                for(j = 0; j < dW; j++){\n                    x = floor(ratioX * j);\n                    y = floor(ratioY * i);\n                    xDiff = ratioX * j - x;\n                    yDiff = ratioY * i - y;\n                    origPix = 4 * (y * oW + x);\n                    for(chnl = 0; chnl < 4; chnl++){\n                        a = pixels[origPix + chnl];\n                        b = pixels[origPix + 4 + chnl];\n                        c = pixels[origPix + w4 + chnl];\n                        d = pixels[origPix + w4 + 4 + chnl];\n                        color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) + c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n                        destPixels[offset++] = color;\n                    }\n                }\n            }\n            return destImage;\n        },\n        /**\n     * hermiteFastResize\n     * @param {Object} canvasEl Canvas element to apply filter to\n     * @param {Number} oW Original Width\n     * @param {Number} oH Original Height\n     * @param {Number} dW Destination Width\n     * @param {Number} dH Destination Height\n     * @returns {ImageData}\n     */ hermiteFastResize: function(options, oW, oH, dW, dH) {\n            var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY, ratioWHalf = ceil(ratioW / 2), ratioHHalf = ceil(ratioH / 2), img = options.imageData, data = img.data, img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\n            for(var j = 0; j < dH; j++){\n                for(var i = 0; i < dW; i++){\n                    var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0, gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n                    for(var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++){\n                        var dy = abs(centerY - (yy + 0.5)) / ratioHHalf, centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n                        for(var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++){\n                            var dx = abs(centerX - (xx + 0.5)) / ratioWHalf, w = sqrt(w0 + dx * dx);\n                            /* eslint-disable max-depth */ if (w > 1 && w < -1) {\n                                continue;\n                            }\n                            //hermite filter\n                            weight = 2 * w * w * w - 3 * w * w + 1;\n                            if (weight > 0) {\n                                dx = 4 * (xx + yy * oW);\n                                //alpha\n                                gxA += weight * data[dx + 3];\n                                weightsAlpha += weight;\n                                //colors\n                                if (data[dx + 3] < 255) {\n                                    weight = weight * data[dx + 3] / 250;\n                                }\n                                gxR += weight * data[dx];\n                                gxG += weight * data[dx + 1];\n                                gxB += weight * data[dx + 2];\n                                weights += weight;\n                            }\n                        /* eslint-enable max-depth */ }\n                    }\n                    data2[x2] = gxR / weights;\n                    data2[x2 + 1] = gxG / weights;\n                    data2[x2 + 2] = gxB / weights;\n                    data2[x2 + 3] = gxA / weightsAlpha;\n                }\n            }\n            return img2;\n        },\n        /**\n     * Returns object representation of an instance\n     * @return {Object} Object representation of an instance\n     */ toObject: function() {\n            return {\n                type: this.type,\n                scaleX: this.scaleX,\n                scaleY: this.scaleY,\n                resizeType: this.resizeType,\n                lanczosLobes: this.lanczosLobes\n            };\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\n   */ fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Contrast filter class\n   * @class fabric.Image.filters.Contrast\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Contrast({\n   *   contrast: 0.25\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Contrast\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uContrast;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n\" + \"color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\n     * contrast value, range from -1 to 1.\n     * @param {Number} contrast\n     * @default 0\n     */ contrast: 0,\n        mainParameter: \"contrast\",\n        /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Contrast.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\n     */ /**\n      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\n      *\n      * @param {Object} options\n      * @param {ImageData} options.imageData The Uint8Array to be filtered.\n      */ applyTo2d: function(options) {\n            if (this.contrast === 0) {\n                return;\n            }\n            var imageData = options.imageData, i, len, data = imageData.data, len = data.length, contrast = Math.floor(this.contrast * 255), contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\n            for(i = 0; i < len; i += 4){\n                data[i] = contrastF * (data[i] - 128) + 128;\n                data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n                data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uContrast: gl.getUniformLocation(program, \"uContrast\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uContrast, this.contrast);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\n   */ fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Saturate filter class\n   * @class fabric.Image.filters.Saturation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Saturation({\n   *   saturation: 1\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Saturation\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uSaturation;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"float rgMax = max(color.r, color.g);\\n\" + \"float rgbMax = max(rgMax, color.b);\\n\" + \"color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n\" + \"color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n\" + \"color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\n     * Saturation value, from -1 to 1.\n     * Increases/decreases the color saturation.\n     * A value of 0 has no effect.\n     * \n     * @param {Number} saturation\n     * @default\n     */ saturation: 0,\n        mainParameter: \"saturation\",\n        /**\n     * Constructor\n     * @memberOf fabric.Image.filters.Saturate.prototype\n     * @param {Object} [options] Options object\n     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\n     */ /**\n     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\n     */ applyTo2d: function(options) {\n            if (this.saturation === 0) {\n                return;\n            }\n            var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.saturation, i, max;\n            for(i = 0; i < len; i += 4){\n                max = Math.max(data[i], data[i + 1], data[i + 2]);\n                data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n                data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n                data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uSaturation: gl.getUniformLocation(program, \"uSaturation\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {Function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\n   */ fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Blur filter class\n   * @class fabric.Image.filters.Blur\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Blur({\n   *   blur: 0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   * canvas.renderAll();\n   */ filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\n        type: \"Blur\",\n        /*\n'gl_FragColor = vec4(0.0);',\n'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\n'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\n'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\n'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\n'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\n'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\n'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\n'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\n'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\n*/ /* eslint-disable max-len */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec2 uDelta;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"const float nSamples = 15.0;\\n\" + \"vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n\" + \"float random(vec3 scale) {\\n\" + /* use the fragment position for a different seed per-pixel */ \"return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n\" + \"}\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0.0);\\n\" + \"float total = 0.0;\\n\" + \"float offset = random(v3offset);\\n\" + \"for (float t = -nSamples; t <= nSamples; t++) {\\n\" + \"float percent = (t + offset - 0.5) / nSamples;\\n\" + \"float weight = 1.0 - abs(percent);\\n\" + \"color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n\" + \"total += weight;\\n\" + \"}\\n\" + \"gl_FragColor = color / total;\\n\" + \"}\",\n        /* eslint-enable max-len */ /**\n     * blur value, in percentage of image dimensions.\n     * specific to keep the image blur constant at different resolutions\n     * range between 0 and 1.\n     * @type Number\n     * @default\n     */ blur: 0,\n        mainParameter: \"blur\",\n        applyTo: function(options) {\n            if (options.webgl) {\n                // this aspectRatio is used to give the same blur to vertical and horizontal\n                this.aspectRatio = options.sourceWidth / options.sourceHeight;\n                options.passes++;\n                this._setupFrameBuffer(options);\n                this.horizontal = true;\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n                this._setupFrameBuffer(options);\n                this.horizontal = false;\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n            } else {\n                this.applyTo2d(options);\n            }\n        },\n        applyTo2d: function(options) {\n            // paint canvasEl with current image data.\n            //options.ctx.putImageData(options.imageData, 0, 0);\n            options.imageData = this.simpleBlur(options);\n        },\n        simpleBlur: function(options) {\n            var resources = options.filterBackend.resources, canvas1, canvas2, width = options.imageData.width, height = options.imageData.height;\n            if (!resources.blurLayer1) {\n                resources.blurLayer1 = fabric.util.createCanvasElement();\n                resources.blurLayer2 = fabric.util.createCanvasElement();\n            }\n            canvas1 = resources.blurLayer1;\n            canvas2 = resources.blurLayer2;\n            if (canvas1.width !== width || canvas1.height !== height) {\n                canvas2.width = canvas1.width = width;\n                canvas2.height = canvas1.height = height;\n            }\n            var ctx1 = canvas1.getContext(\"2d\"), ctx2 = canvas2.getContext(\"2d\"), nSamples = 15, random, percent, j, i, blur = this.blur * 0.06 * 0.5;\n            // load first canvas\n            ctx1.putImageData(options.imageData, 0, 0);\n            ctx2.clearRect(0, 0, width, height);\n            for(i = -nSamples; i <= nSamples; i++){\n                random = (Math.random() - 0.5) / 4;\n                percent = i / nSamples;\n                j = blur * percent * width + random;\n                ctx2.globalAlpha = 1 - Math.abs(percent);\n                ctx2.drawImage(canvas1, j, random);\n                ctx1.drawImage(canvas2, 0, 0);\n                ctx2.globalAlpha = 1;\n                ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n            }\n            for(i = -nSamples; i <= nSamples; i++){\n                random = (Math.random() - 0.5) / 4;\n                percent = i / nSamples;\n                j = blur * percent * height + random;\n                ctx2.globalAlpha = 1 - Math.abs(percent);\n                ctx2.drawImage(canvas1, random, j);\n                ctx1.drawImage(canvas2, 0, 0);\n                ctx2.globalAlpha = 1;\n                ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n            }\n            options.ctx.drawImage(canvas1, 0, 0);\n            var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n            ctx1.globalAlpha = 1;\n            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n            return newImageData;\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                delta: gl.getUniformLocation(program, \"uDelta\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            var delta = this.chooseRightDelta();\n            gl.uniform2fv(uniformLocations.delta, delta);\n        },\n        /**\n     * choose right value of image percentage to blur with\n     * @returns {Array} a numeric array with delta values\n     */ chooseRightDelta: function() {\n            var blurScale = 1, delta = [\n                0,\n                0\n            ], blur;\n            if (this.horizontal) {\n                if (this.aspectRatio > 1) {\n                    // image is wide, i want to shrink radius horizontal\n                    blurScale = 1 / this.aspectRatio;\n                }\n            } else {\n                if (this.aspectRatio < 1) {\n                    // image is tall, i want to shrink radius vertical\n                    blurScale = this.aspectRatio;\n                }\n            }\n            blur = blurScale * this.blur * 0.12;\n            if (this.horizontal) {\n                delta[0] = blur;\n            } else {\n                delta[1] = blur;\n            }\n            return delta;\n        }\n    });\n    /**\n   * Deserialize a JSON definition of a BlurFilter into a concrete instance.\n   */ filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * Gamma filter class\n   * @class fabric.Image.filters.Gamma\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.Gamma({\n   *   gamma: [1, 0.5, 2.1]\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"Gamma\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec3 uGamma;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"vec3 correction = (1.0 / uGamma);\\n\" + \"color.r = pow(color.r, correction.r);\\n\" + \"color.g = pow(color.g, correction.g);\\n\" + \"color.b = pow(color.b, correction.b);\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.rgb *= color.a;\\n\" + \"}\",\n        /**\n     * Gamma array value, from 0.01 to 2.2.\n     * @param {Array} gamma\n     * @default\n     */ gamma: [\n            1,\n            1,\n            1\n        ],\n        /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */ mainParameter: \"gamma\",\n        /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */ initialize: function(options) {\n            this.gamma = [\n                1,\n                1,\n                1\n            ];\n            filters.BaseFilter.prototype.initialize.call(this, options);\n        },\n        /**\n     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\n     *\n     * @param {Object} options\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, gamma = this.gamma, len = data.length, rInv = 1 / gamma[0], gInv = 1 / gamma[1], bInv = 1 / gamma[2], i;\n            if (!this.rVals) {\n                // eslint-disable-next-line\n                this.rVals = new Uint8Array(256);\n                // eslint-disable-next-line\n                this.gVals = new Uint8Array(256);\n                // eslint-disable-next-line\n                this.bVals = new Uint8Array(256);\n            }\n            // This is an optimization - pre-compute a look-up table for each color channel\n            // instead of performing these pow calls for each pixel in the image.\n            for(i = 0, len = 256; i < len; i++){\n                this.rVals[i] = Math.pow(i / 255, rInv) * 255;\n                this.gVals[i] = Math.pow(i / 255, gInv) * 255;\n                this.bVals[i] = Math.pow(i / 255, bInv) * 255;\n            }\n            for(i = 0, len = data.length; i < len; i += 4){\n                data[i] = this.rVals[data[i]];\n                data[i + 1] = this.gVals[data[i + 1]];\n                data[i + 2] = this.bVals[data[i + 2]];\n            }\n        },\n        /**\n     * Return WebGL uniform locations for this filter's shader.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uGamma: gl.getUniformLocation(program, \"uGamma\")\n            };\n        },\n        /**\n     * Send data from this filter to its shader program's uniforms.\n     *\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\n   */ fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * A container class that knows how to apply a sequence of filters to an input image.\n   */ filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\n        type: \"Composed\",\n        /**\n     * A non sparse array of filters to apply\n     */ subFilters: [],\n        /**\n     * Constructor\n     * @param {Object} [options] Options object\n     */ initialize: function(options) {\n            this.callSuper(\"initialize\", options);\n            // create a new array instead mutating the prototype with push\n            this.subFilters = this.subFilters.slice(0);\n        },\n        /**\n     * Apply this container's filters to the input image provided.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be applied.\n     */ applyTo: function(options) {\n            options.passes += this.subFilters.length - 1;\n            this.subFilters.forEach(function(filter) {\n                filter.applyTo(options);\n            });\n        },\n        /**\n     * Serialize this filter into JSON.\n     *\n     * @returns {Object} A JSON representation of this filter.\n     */ toObject: function() {\n            return fabric.util.object.extend(this.callSuper(\"toObject\"), {\n                subFilters: this.subFilters.map(function(filter) {\n                    return filter.toObject();\n                })\n            });\n        },\n        isNeutralState: function() {\n            return !this.subFilters.some(function(filter) {\n                return !filter.isNeutralState();\n            });\n        }\n    });\n    /**\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\n   */ fabric.Image.filters.Composed.fromObject = function(object, callback) {\n        var filters = object.subFilters || [], subFilters = filters.map(function(filter) {\n            return new fabric.Image.filters[filter.type](filter);\n        }), instance = new fabric.Image.filters.Composed({\n            subFilters: subFilters\n        });\n        callback && callback(instance);\n        return instance;\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\n   * HueRotation filter class\n   * @class fabric.Image.filters.HueRotation\n   * @memberOf fabric.Image.filters\n   * @extends fabric.Image.filters.BaseFilter\n   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\n   * @example\n   * var filter = new fabric.Image.filters.HueRotation({\n   *   rotation: -0.5\n   * });\n   * object.filters.push(filter);\n   * object.applyFilters();\n   */ filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\n        /**\n     * Filter type\n     * @param {String} type\n     * @default\n     */ type: \"HueRotation\",\n        /**\n     * HueRotation value, from -1 to 1.\n     * the unit is radians\n     * @param {Number} myParameter\n     * @default\n     */ rotation: 0,\n        /**\n     * Describe the property that is the filter parameter\n     * @param {String} m\n     * @default\n     */ mainParameter: \"rotation\",\n        calculateMatrix: function() {\n            var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad), aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\n            this.matrix = [\n                1,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0\n            ];\n            this.matrix[0] = cos + OneMinusCos / 3;\n            this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n            this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n            this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n            this.matrix[6] = cos + aThird * OneMinusCos;\n            this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n            this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n            this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n            this.matrix[12] = cos + aThird * OneMinusCos;\n        },\n        /**\n     * HueRotation isNeutralState implementation\n     * Used only in image applyFilters to discard filters that will not have an effect\n     * on the image\n     * @param {Object} options\n     **/ isNeutralState: function(options) {\n            this.calculateMatrix();\n            return filters.BaseFilter.prototype.isNeutralState.call(this, options);\n        },\n        /**\n     * Apply this filter to the input image data provided.\n     *\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\n     *\n     * @param {Object} options\n     * @param {Number} options.passes The number of filters remaining to be executed\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\n     */ applyTo: function(options) {\n            this.calculateMatrix();\n            filters.BaseFilter.prototype.applyTo.call(this, options);\n        }\n    });\n    /**\n   * Returns filter instance from an object representation\n   * @static\n   * @param {Object} object Object to create an instance from\n   * @param {function} [callback] to be invoked after filter creation\n   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\n   */ fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), clone = fabric.util.object.clone;\n    if (fabric.Text) {\n        fabric.warn(\"fabric.Text is already defined\");\n        return;\n    }\n    var additionalProps = (\"fontFamily fontWeight fontSize text underline overline linethrough\" + \" textAlign fontStyle lineHeight textBackgroundColor charSpacing styles\" + \" direction path pathStartOffset pathSide pathAlign\").split(\" \");\n    /**\n   * Text class\n   * @class fabric.Text\n   * @extends fabric.Object\n   * @return {fabric.Text} thisArg\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\n   * @see {@link fabric.Text#initialize} for constructor definition\n   */ fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n        /**\n     * Properties which when set cause object to change dimensions\n     * @type Array\n     * @private\n     */ _dimensionAffectingProps: [\n            \"fontSize\",\n            \"fontWeight\",\n            \"fontFamily\",\n            \"fontStyle\",\n            \"lineHeight\",\n            \"text\",\n            \"charSpacing\",\n            \"textAlign\",\n            \"styles\",\n            \"path\",\n            \"pathStartOffset\",\n            \"pathSide\",\n            \"pathAlign\"\n        ],\n        /**\n     * @private\n     */ _reNewline: /\\r?\\n/,\n        /**\n     * Use this regular expression to filter for whitespaces that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */ _reSpacesAndTabs: /[ \\t\\r]/g,\n        /**\n     * Use this regular expression to filter for whitespace that is not a new line.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */ _reSpaceAndTab: /[ \\t\\r]/,\n        /**\n     * Use this regular expression to filter consecutive groups of non spaces.\n     * Mostly used when text is 'justify' aligned.\n     * @private\n     */ _reWords: /\\S+/g,\n        /**\n     * Type of an object\n     * @type String\n     * @default\n     */ type: \"text\",\n        /**\n     * Font size (in pixels)\n     * @type Number\n     * @default\n     */ fontSize: 40,\n        /**\n     * Font weight (e.g. bold, normal, 400, 600, 800)\n     * @type {(Number|String)}\n     * @default\n     */ fontWeight: \"normal\",\n        /**\n     * Font family\n     * @type String\n     * @default\n     */ fontFamily: \"Times New Roman\",\n        /**\n     * Text decoration underline.\n     * @type Boolean\n     * @default\n     */ underline: false,\n        /**\n     * Text decoration overline.\n     * @type Boolean\n     * @default\n     */ overline: false,\n        /**\n     * Text decoration linethrough.\n     * @type Boolean\n     * @default\n     */ linethrough: false,\n        /**\n     * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\n     * \"justify-left\", \"justify-center\" or \"justify-right\".\n     * @type String\n     * @default\n     */ textAlign: \"left\",\n        /**\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\n     * @type String\n     * @default\n     */ fontStyle: \"normal\",\n        /**\n     * Line height\n     * @type Number\n     * @default\n     */ lineHeight: 1.16,\n        /**\n     * Superscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */ superscript: {\n            size: 0.60,\n            baseline: -0.35 // baseline-shift factor (upwards)\n        },\n        /**\n     * Subscript schema object (minimum overlap)\n     * @type {Object}\n     * @default\n     */ subscript: {\n            size: 0.60,\n            baseline: 0.11 // baseline-shift factor (downwards)\n        },\n        /**\n     * Background color of text lines\n     * @type String\n     * @default\n     */ textBackgroundColor: \"\",\n        /**\n     * List of properties to consider when checking if\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\n     * as well as for history (undo/redo) purposes\n     * @type Array\n     */ stateProperties: fabric.Object.prototype.stateProperties.concat(additionalProps),\n        /**\n     * List of properties to consider when checking if cache needs refresh\n     * @type Array\n     */ cacheProperties: fabric.Object.prototype.cacheProperties.concat(additionalProps),\n        /**\n     * When defined, an object is rendered via stroke and this property specifies its color.\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\n     * @type String\n     * @default\n     */ stroke: null,\n        /**\n     * Shadow object representing shadow of this shape.\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\n     * @type fabric.Shadow\n     * @default\n     */ shadow: null,\n        /**\n     * fabric.Path that the text should follow.\n     * since 4.6.0 the path will be drawn automatically.\n     * if you want to make the path visible, give it a stroke and strokeWidth or fill value\n     * if you want it to be hidden, assign visible = false to the path.\n     * This feature is in BETA, and SVG import/export is not yet supported.\n     * @type fabric.Path\n     * @example\n     * var textPath = new fabric.Text('Text on a path', {\n     *     top: 150,\n     *     left: 150,\n     *     textAlign: 'center',\n     *     charSpacing: -50,\n     *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {\n     *         strokeWidth: 1,\n     *         visible: false\n     *     }),\n     *     pathSide: 'left',\n     *     pathStartOffset: 0\n     * });\n     * @default\n     */ path: null,\n        /**\n     * Offset amount for text path starting position\n     * Only used when text has a path\n     * @type Number\n     * @default\n     */ pathStartOffset: 0,\n        /**\n     * Which side of the path the text should be drawn on.\n     * Only used when text has a path\n     * @type {String} 'left|right'\n     * @default\n     */ pathSide: \"left\",\n        /**\n     * How text is aligned to the path. This property determines\n     * the perpendicular position of each character relative to the path.\n     * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\n     * This feature is in BETA, and its behavior may change\n     * @type String\n     * @default\n     */ pathAlign: \"baseline\",\n        /**\n     * @private\n     */ _fontSizeFraction: 0.222,\n        /**\n     * @private\n     */ offsets: {\n            underline: 0.10,\n            linethrough: -0.315,\n            overline: -0.88\n        },\n        /**\n     * Text Line proportion to font Size (in pixels)\n     * @type Number\n     * @default\n     */ _fontSizeMult: 1.13,\n        /**\n     * additional space between characters\n     * expressed in thousands of em unit\n     * @type Number\n     * @default\n     */ charSpacing: 0,\n        /**\n     * Object containing character styles - top-level properties -> line numbers,\n     * 2nd-level properties - character numbers\n     * @type Object\n     * @default\n     */ styles: null,\n        /**\n     * Reference to a context to measure text char or couple of chars\n     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\n     * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every\n     * text object created.\n     * @type {CanvasRenderingContext2D}\n     * @default\n     */ _measuringContext: null,\n        /**\n     * Baseline shift, styles only, keep at 0 for the main text object\n     * @type {Number}\n     * @default\n     */ deltaY: 0,\n        /**\n     * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\n     * determine the direction of the text.\n     * This has to be set manually together with textAlign and originX for proper\n     * experience.\n     * some interesting link for the future\n     * https://www.w3.org/International/questions/qa-bidi-unicode-controls\n     * @since 4.5.0\n     * @type {String} 'ltr|rtl'\n     * @default\n     */ direction: \"ltr\",\n        /**\n     * Array of properties that define a style unit (of 'styles').\n     * @type {Array}\n     * @default\n     */ _styleProperties: [\n            \"stroke\",\n            \"strokeWidth\",\n            \"fill\",\n            \"fontFamily\",\n            \"fontSize\",\n            \"fontWeight\",\n            \"fontStyle\",\n            \"underline\",\n            \"overline\",\n            \"linethrough\",\n            \"deltaY\",\n            \"textBackgroundColor\"\n        ],\n        /**\n     * contains characters bounding boxes\n     */ __charBounds: [],\n        /**\n     * use this size when measuring text. To avoid IE11 rounding errors\n     * @type {Number}\n     * @default\n     * @readonly\n     * @private\n     */ CACHE_FONT_SIZE: 400,\n        /**\n     * contains the min text width to avoid getting 0\n     * @type {Number}\n     * @default\n     */ MIN_TEXT_WIDTH: 2,\n        /**\n     * Constructor\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */ initialize: function(text, options) {\n            this.styles = options ? options.styles || {} : {};\n            this.text = text;\n            this.__skipDimension = true;\n            this.callSuper(\"initialize\", options);\n            if (this.path) {\n                this.setPathInfo();\n            }\n            this.__skipDimension = false;\n            this.initDimensions();\n            this.setCoords();\n            this.setupState({\n                propertySet: \"_dimensionAffectingProps\"\n            });\n        },\n        /**\n     * If text has a path, it will add the extra information needed\n     * for path and text calculations\n     * @return {fabric.Text} thisArg\n     */ setPathInfo: function() {\n            var path = this.path;\n            if (path) {\n                path.segmentsInfo = fabric.util.getPathSegmentsInfo(path.path);\n            }\n        },\n        /**\n     * Return a context for measurement of text string.\n     * if created it gets stored for reuse\n     * this is for internal use, please do not use it\n     * @private\n     * @param {String} text Text string\n     * @param {Object} [options] Options object\n     * @return {fabric.Text} thisArg\n     */ getMeasuringContext: function() {\n            // if we did not return we have to measure something.\n            if (!fabric._measuringContext) {\n                fabric._measuringContext = this.canvas && this.canvas.contextCache || fabric.util.createCanvasElement().getContext(\"2d\");\n            }\n            return fabric._measuringContext;\n        },\n        /**\n     * @private\n     * Divides text into lines of text and lines of graphemes.\n     */ _splitText: function() {\n            var newLines = this._splitTextIntoLines(this.text);\n            this.textLines = newLines.lines;\n            this._textLines = newLines.graphemeLines;\n            this._unwrappedTextLines = newLines._unwrappedLines;\n            this._text = newLines.graphemeText;\n            return newLines;\n        },\n        /**\n     * Initialize or update text dimensions.\n     * Updates this.width and this.height with the proper values.\n     * Does not return dimensions.\n     */ initDimensions: function() {\n            if (this.__skipDimension) {\n                return;\n            }\n            this._splitText();\n            this._clearCache();\n            if (this.path) {\n                this.width = this.path.width;\n                this.height = this.path.height;\n            } else {\n                this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n                this.height = this.calcTextHeight();\n            }\n            if (this.textAlign.indexOf(\"justify\") !== -1) {\n                // once text is measured we need to make space fatter to make justified text.\n                this.enlargeSpaces();\n            }\n            this.saveState({\n                propertySet: \"_dimensionAffectingProps\"\n            });\n        },\n        /**\n     * Enlarge space boxes and shift the others\n     */ enlargeSpaces: function() {\n            var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                if (this.textAlign !== \"justify\" && (i === len - 1 || this.isEndOfWrapping(i))) {\n                    continue;\n                }\n                accumulatedSpace = 0;\n                line = this._textLines[i];\n                currentLineWidth = this.getLineWidth(i);\n                if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\n                    numberOfSpaces = spaces.length;\n                    diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n                    for(var j = 0, jlen = line.length; j <= jlen; j++){\n                        charBound = this.__charBounds[i][j];\n                        if (this._reSpaceAndTab.test(line[j])) {\n                            charBound.width += diffSpace;\n                            charBound.kernedWidth += diffSpace;\n                            charBound.left += accumulatedSpace;\n                            accumulatedSpace += diffSpace;\n                        } else {\n                            charBound.left += accumulatedSpace;\n                        }\n                    }\n                }\n            }\n        },\n        /**\n     * Detect if the text line is ended with an hard break\n     * text and itext do not have wrapping, return false\n     * @return {Boolean}\n     */ isEndOfWrapping: function(lineIndex) {\n            return lineIndex === this._textLines.length - 1;\n        },\n        /**\n     * Detect if a line has a linebreak and so we need to account for it when moving\n     * and counting style.\n     * It return always for text and Itext.\n     * @return Number\n     */ missingNewlineOffset: function() {\n            return 1;\n        },\n        /**\n     * Returns string representation of an instance\n     * @return {String} String representation of text object\n     */ toString: function() {\n            return \"#<fabric.Text (\" + this.complexity() + '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n        },\n        /**\n     * Return the dimension and the zoom level needed to create a cache canvas\n     * big enough to host the object to be cached.\n     * @private\n     * @param {Object} dim.x width of object to be cached\n     * @param {Object} dim.y height of object to be cached\n     * @return {Object}.width width of canvas\n     * @return {Object}.height height of canvas\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\n     */ _getCacheCanvasDimensions: function() {\n            var dims = this.callSuper(\"_getCacheCanvasDimensions\");\n            var fontSize = this.fontSize;\n            dims.width += fontSize * dims.zoomX;\n            dims.height += fontSize * dims.zoomY;\n            return dims;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _render: function(ctx) {\n            var path = this.path;\n            path && !path.isNotVisible() && path._render(ctx);\n            this._setTextStyles(ctx);\n            this._renderTextLinesBackground(ctx);\n            this._renderTextDecoration(ctx, \"underline\");\n            this._renderText(ctx);\n            this._renderTextDecoration(ctx, \"overline\");\n            this._renderTextDecoration(ctx, \"linethrough\");\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderText: function(ctx) {\n            if (this.paintFirst === \"stroke\") {\n                this._renderTextStroke(ctx);\n                this._renderTextFill(ctx);\n            } else {\n                this._renderTextFill(ctx);\n                this._renderTextStroke(ctx);\n            }\n        },\n        /**\n     * Set the font parameter of the context with the object properties or with charStyle\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Object} [charStyle] object with font style properties\n     * @param {String} [charStyle.fontFamily] Font Family\n     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\n     * @param {String} [charStyle.fontWeight] Font weight\n     * @param {String} [charStyle.fontStyle] Font style (italic|normal)\n     */ _setTextStyles: function(ctx, charStyle, forMeasuring) {\n            ctx.textBaseline = \"alphabetical\";\n            if (this.path) {\n                switch(this.pathAlign){\n                    case \"center\":\n                        ctx.textBaseline = \"middle\";\n                        break;\n                    case \"ascender\":\n                        ctx.textBaseline = \"top\";\n                        break;\n                    case \"descender\":\n                        ctx.textBaseline = \"bottom\";\n                        break;\n                }\n            }\n            ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n        },\n        /**\n     * calculate and return the text Width measuring each line.\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @return {Number} Maximum width of fabric.Text object\n     */ calcTextWidth: function() {\n            var maxWidth = this.getLineWidth(0);\n            for(var i = 1, len = this._textLines.length; i < len; i++){\n                var currentLineWidth = this.getLineWidth(i);\n                if (currentLineWidth > maxWidth) {\n                    maxWidth = currentLineWidth;\n                }\n            }\n            return maxWidth;\n        },\n        /**\n     * @private\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} line Text to render\n     * @param {Number} left Left position of text\n     * @param {Number} top Top position of text\n     * @param {Number} lineIndex Index of a line in a text\n     */ _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n            this._renderChars(method, ctx, line, left, top, lineIndex);\n        },\n        /**\n     * Renders the text background for lines, taking care of style\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderTextLinesBackground: function(ctx) {\n            if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\")) {\n                return;\n            }\n            var heightOfLine, lineLeftOffset, originalFill = ctx.fillStyle, line, lastColor, leftOffset = this._getLeftOffset(), lineTopOffset = this._getTopOffset(), boxStart = 0, boxWidth = 0, charBox, currentColor, path = this.path, drawStart;\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                heightOfLine = this.getHeightOfLine(i);\n                if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\", i)) {\n                    lineTopOffset += heightOfLine;\n                    continue;\n                }\n                line = this._textLines[i];\n                lineLeftOffset = this._getLineLeftOffset(i);\n                boxWidth = 0;\n                boxStart = 0;\n                lastColor = this.getValueOfPropertyAt(i, 0, \"textBackgroundColor\");\n                for(var j = 0, jlen = line.length; j < jlen; j++){\n                    charBox = this.__charBounds[i][j];\n                    currentColor = this.getValueOfPropertyAt(i, j, \"textBackgroundColor\");\n                    if (path) {\n                        ctx.save();\n                        ctx.translate(charBox.renderLeft, charBox.renderTop);\n                        ctx.rotate(charBox.angle);\n                        ctx.fillStyle = currentColor;\n                        currentColor && ctx.fillRect(-charBox.width / 2, -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction), charBox.width, heightOfLine / this.lineHeight);\n                        ctx.restore();\n                    } else if (currentColor !== lastColor) {\n                        drawStart = leftOffset + lineLeftOffset + boxStart;\n                        if (this.direction === \"rtl\") {\n                            drawStart = this.width - drawStart - boxWidth;\n                        }\n                        ctx.fillStyle = lastColor;\n                        lastColor && ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);\n                        boxStart = charBox.left;\n                        boxWidth = charBox.width;\n                        lastColor = currentColor;\n                    } else {\n                        boxWidth += charBox.kernedWidth;\n                    }\n                }\n                if (currentColor && !path) {\n                    drawStart = leftOffset + lineLeftOffset + boxStart;\n                    if (this.direction === \"rtl\") {\n                        drawStart = this.width - drawStart - boxWidth;\n                    }\n                    ctx.fillStyle = currentColor;\n                    ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);\n                }\n                lineTopOffset += heightOfLine;\n            }\n            ctx.fillStyle = originalFill;\n            // if there is text background color no\n            // other shadows should be casted\n            this._removeShadow(ctx);\n        },\n        /**\n     * @private\n     * @param {Object} decl style declaration for cache\n     * @param {String} decl.fontFamily fontFamily\n     * @param {String} decl.fontStyle fontStyle\n     * @param {String} decl.fontWeight fontWeight\n     * @return {Object} reference to cache\n     */ getFontCache: function(decl) {\n            var fontFamily = decl.fontFamily.toLowerCase();\n            if (!fabric.charWidthsCache[fontFamily]) {\n                fabric.charWidthsCache[fontFamily] = {};\n            }\n            var cache = fabric.charWidthsCache[fontFamily], cacheProp = decl.fontStyle.toLowerCase() + \"_\" + (decl.fontWeight + \"\").toLowerCase();\n            if (!cache[cacheProp]) {\n                cache[cacheProp] = {};\n            }\n            return cache[cacheProp];\n        },\n        /**\n     * measure and return the width of a single character.\n     * possibly overridden to accommodate different measure logic or\n     * to hook some external lib for character measurement\n     * @private\n     * @param {String} _char, char to be measured\n     * @param {Object} charStyle style of char to be measured\n     * @param {String} [previousChar] previous char\n     * @param {Object} [prevCharStyle] style of previous char\n     */ _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\n            // first i try to return from cache\n            var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle), previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char, stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth, fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\n            if (previousChar && fontCache[previousChar] !== undefined) {\n                previousWidth = fontCache[previousChar];\n            }\n            if (fontCache[_char] !== undefined) {\n                kernedWidth = width = fontCache[_char];\n            }\n            if (stylesAreEqual && fontCache[couple] !== undefined) {\n                coupleWidth = fontCache[couple];\n                kernedWidth = coupleWidth - previousWidth;\n            }\n            if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\n                var ctx = this.getMeasuringContext();\n                // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n                this._setTextStyles(ctx, charStyle, true);\n            }\n            if (width === undefined) {\n                kernedWidth = width = ctx.measureText(_char).width;\n                fontCache[_char] = width;\n            }\n            if (previousWidth === undefined && stylesAreEqual && previousChar) {\n                previousWidth = ctx.measureText(previousChar).width;\n                fontCache[previousChar] = previousWidth;\n            }\n            if (stylesAreEqual && coupleWidth === undefined) {\n                // we can measure the kerning couple and subtract the width of the previous character\n                coupleWidth = ctx.measureText(couple).width;\n                fontCache[couple] = coupleWidth;\n                kernedWidth = coupleWidth - previousWidth;\n            }\n            return {\n                width: width * fontMultiplier,\n                kernedWidth: kernedWidth * fontMultiplier\n            };\n        },\n        /**\n     * Computes height of character at given position\n     * @param {Number} line the line index number\n     * @param {Number} _char the character index number\n     * @return {Number} fontSize of the character\n     */ getHeightOfChar: function(line, _char) {\n            return this.getValueOfPropertyAt(line, _char, \"fontSize\");\n        },\n        /**\n     * measure a text line measuring all characters.\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */ measureLine: function(lineIndex) {\n            var lineInfo = this._measureLine(lineIndex);\n            if (this.charSpacing !== 0) {\n                lineInfo.width -= this._getWidthOfCharSpacing();\n            }\n            if (lineInfo.width < 0) {\n                lineInfo.width = 0;\n            }\n            return lineInfo;\n        },\n        /**\n     * measure every grapheme of a line, populating __charBounds\n     * @param {Number} lineIndex\n     * @return {Object} object.width total width of characters\n     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\n     */ _measureLine: function(lineIndex) {\n            var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme, graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length), positionInPath = 0, startingPoint, totalPathLength, path = this.path, reverse = this.pathSide === \"right\";\n            this.__charBounds[lineIndex] = lineBounds;\n            for(i = 0; i < line.length; i++){\n                grapheme = line[i];\n                graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n                lineBounds[i] = graphemeInfo;\n                width += graphemeInfo.kernedWidth;\n                prevGrapheme = grapheme;\n            }\n            // this latest bound box represent the last character of the line\n            // to simplify cursor handling in interactive mode.\n            lineBounds[i] = {\n                left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n                width: 0,\n                kernedWidth: 0,\n                height: this.fontSize\n            };\n            if (path) {\n                totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;\n                startingPoint = fabric.util.getPointOnPath(path.path, 0, path.segmentsInfo);\n                startingPoint.x += path.pathOffset.x;\n                startingPoint.y += path.pathOffset.y;\n                switch(this.textAlign){\n                    case \"left\":\n                        positionInPath = reverse ? totalPathLength - width : 0;\n                        break;\n                    case \"center\":\n                        positionInPath = (totalPathLength - width) / 2;\n                        break;\n                    case \"right\":\n                        positionInPath = reverse ? 0 : totalPathLength - width;\n                        break;\n                }\n                positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n                for(i = reverse ? line.length - 1 : 0; reverse ? i >= 0 : i < line.length; reverse ? i-- : i++){\n                    graphemeInfo = lineBounds[i];\n                    if (positionInPath > totalPathLength) {\n                        positionInPath %= totalPathLength;\n                    } else if (positionInPath < 0) {\n                        positionInPath += totalPathLength;\n                    }\n                    // it would probably much faster to send all the grapheme position for a line\n                    // and calculate path position/angle at once.\n                    this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);\n                    positionInPath += graphemeInfo.kernedWidth;\n                }\n            }\n            return {\n                width: width,\n                numOfSpaces: numOfSpaces\n            };\n        },\n        /**\n     * Calculate the angle  and the left,top position of the char that follow a path.\n     * It appends it to graphemeInfo to be reused later at rendering\n     * @private\n     * @param {Number} positionInPath to be measured\n     * @param {Object} graphemeInfo current grapheme box information\n     * @param {Object} startingPoint position of the point\n     */ _setGraphemeOnPath: function(positionInPath, graphemeInfo, startingPoint) {\n            var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2, path = this.path;\n            // we are at currentPositionOnPath. we want to know what point on the path is.\n            var info = fabric.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);\n            graphemeInfo.renderLeft = info.x - startingPoint.x;\n            graphemeInfo.renderTop = info.y - startingPoint.y;\n            graphemeInfo.angle = info.angle + (this.pathSide === \"right\" ? Math.PI : 0);\n        },\n        /**\n     * Measure and return the info of a single grapheme.\n     * needs the the info of previous graphemes already filled\n     * @private\n     * @param {String} grapheme to be measured\n     * @param {Number} lineIndex index of the line where the char is\n     * @param {Number} charIndex position in the line\n     * @param {String} [prevGrapheme] character preceding the one to be measured\n     */ _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\n            var style = this.getCompleteStyleDeclaration(lineIndex, charIndex), prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : {}, info = this._measureChar(grapheme, style, prevGrapheme, prevStyle), kernedWidth = info.kernedWidth, width = info.width, charSpacing;\n            if (this.charSpacing !== 0) {\n                charSpacing = this._getWidthOfCharSpacing();\n                width += charSpacing;\n                kernedWidth += charSpacing;\n            }\n            var box = {\n                width: width,\n                left: 0,\n                height: style.fontSize,\n                kernedWidth: kernedWidth,\n                deltaY: style.deltaY\n            };\n            if (charIndex > 0 && !skipLeft) {\n                var previousBox = this.__charBounds[lineIndex][charIndex - 1];\n                box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\n            }\n            return box;\n        },\n        /**\n     * Calculate height of line at 'lineIndex'\n     * @param {Number} lineIndex index of line to calculate\n     * @return {Number}\n     */ getHeightOfLine: function(lineIndex) {\n            if (this.__lineHeights[lineIndex]) {\n                return this.__lineHeights[lineIndex];\n            }\n            var line = this._textLines[lineIndex], // char 0 is measured before the line cycle because it nneds to char\n            // emptylines\n            maxHeight = this.getHeightOfChar(lineIndex, 0);\n            for(var i = 1, len = line.length; i < len; i++){\n                maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n            }\n            return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n        },\n        /**\n     * Calculate text box height\n     */ calcTextHeight: function() {\n            var lineHeight, height = 0;\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                lineHeight = this.getHeightOfLine(i);\n                height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n            }\n            return height;\n        },\n        /**\n     * @private\n     * @return {Number} Left offset\n     */ _getLeftOffset: function() {\n            return this.direction === \"ltr\" ? -this.width / 2 : this.width / 2;\n        },\n        /**\n     * @private\n     * @return {Number} Top offset\n     */ _getTopOffset: function() {\n            return -this.height / 2;\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\n     */ _renderTextCommon: function(ctx, method) {\n            ctx.save();\n            var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset();\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                var heightOfLine = this.getHeightOfLine(i), maxHeight = heightOfLine / this.lineHeight, leftOffset = this._getLineLeftOffset(i);\n                this._renderTextLine(method, ctx, this._textLines[i], left + leftOffset, top + lineHeights + maxHeight, i);\n                lineHeights += heightOfLine;\n            }\n            ctx.restore();\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderTextFill: function(ctx) {\n            if (!this.fill && !this.styleHas(\"fill\")) {\n                return;\n            }\n            this._renderTextCommon(ctx, \"fillText\");\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderTextStroke: function(ctx) {\n            if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n                return;\n            }\n            if (this.shadow && !this.shadow.affectStroke) {\n                this._removeShadow(ctx);\n            }\n            ctx.save();\n            this._setLineDash(ctx, this.strokeDashArray);\n            ctx.beginPath();\n            this._renderTextCommon(ctx, \"strokeText\");\n            ctx.closePath();\n            ctx.restore();\n        },\n        /**\n     * @private\n     * @param {String} method fillText or strokeText.\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Array} line Content of the line, splitted in an array by grapheme\n     * @param {Number} left\n     * @param {Number} top\n     * @param {Number} lineIndex\n     */ _renderChars: function(method, ctx, line, left, top, lineIndex) {\n            // set proper line offset\n            var lineHeight = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf(\"justify\") !== -1, actualStyle, nextStyle, charsToRender = \"\", charBox, boxWidth = 0, timeToRender, path = this.path, shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path, isLtr = this.direction === \"ltr\", sign = this.direction === \"ltr\" ? 1 : -1, drawingLeft, currentDirection = ctx.canvas.getAttribute(\"dir\");\n            ctx.save();\n            if (currentDirection !== this.direction) {\n                ctx.canvas.setAttribute(\"dir\", isLtr ? \"ltr\" : \"rtl\");\n                ctx.direction = isLtr ? \"ltr\" : \"rtl\";\n                ctx.textAlign = isLtr ? \"left\" : \"right\";\n            }\n            top -= lineHeight * this._fontSizeFraction / this.lineHeight;\n            if (shortCut) {\n                // render all the line in one pass without checking\n                // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n                this._renderChar(method, ctx, lineIndex, 0, line.join(\"\"), left, top, lineHeight);\n                ctx.restore();\n                return;\n            }\n            for(var i = 0, len = line.length - 1; i <= len; i++){\n                timeToRender = i === len || this.charSpacing || path;\n                charsToRender += line[i];\n                charBox = this.__charBounds[lineIndex][i];\n                if (boxWidth === 0) {\n                    left += sign * (charBox.kernedWidth - charBox.width);\n                    boxWidth += charBox.width;\n                } else {\n                    boxWidth += charBox.kernedWidth;\n                }\n                if (isJustify && !timeToRender) {\n                    if (this._reSpaceAndTab.test(line[i])) {\n                        timeToRender = true;\n                    }\n                }\n                if (!timeToRender) {\n                    // if we have charSpacing, we render char by char\n                    actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n                    nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n                    timeToRender = fabric.util.hasStyleChanged(actualStyle, nextStyle, false);\n                }\n                if (timeToRender) {\n                    if (path) {\n                        ctx.save();\n                        ctx.translate(charBox.renderLeft, charBox.renderTop);\n                        ctx.rotate(charBox.angle);\n                        this._renderChar(method, ctx, lineIndex, i, charsToRender, -boxWidth / 2, 0, lineHeight);\n                        ctx.restore();\n                    } else {\n                        drawingLeft = left;\n                        this._renderChar(method, ctx, lineIndex, i, charsToRender, drawingLeft, top, lineHeight);\n                    }\n                    charsToRender = \"\";\n                    actualStyle = nextStyle;\n                    left += sign * boxWidth;\n                    boxWidth = 0;\n                }\n            }\n            ctx.restore();\n        },\n        /**\n     * This function try to patch the missing gradientTransform on canvas gradients.\n     * transforming a context to transform the gradient, is going to transform the stroke too.\n     * we want to transform the gradient but not the stroke operation, so we create\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\n     * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\n     * is limited.\n     * @private\n     * @param {fabric.Gradient} filler a fabric gradient instance\n     * @return {CanvasPattern} a pattern to use as fill/stroke style\n     */ _applyPatternGradientTransformText: function(filler) {\n            var pCanvas = fabric.util.createCanvasElement(), pCtx, // TODO: verify compatibility with strokeUniform\n            width = this.width + this.strokeWidth, height = this.height + this.strokeWidth;\n            pCanvas.width = width;\n            pCanvas.height = height;\n            pCtx = pCanvas.getContext(\"2d\");\n            pCtx.beginPath();\n            pCtx.moveTo(0, 0);\n            pCtx.lineTo(width, 0);\n            pCtx.lineTo(width, height);\n            pCtx.lineTo(0, height);\n            pCtx.closePath();\n            pCtx.translate(width / 2, height / 2);\n            pCtx.fillStyle = filler.toLive(pCtx);\n            this._applyPatternGradientTransform(pCtx, filler);\n            pCtx.fill();\n            return pCtx.createPattern(pCanvas, \"no-repeat\");\n        },\n        handleFiller: function(ctx, property, filler) {\n            var offsetX, offsetY;\n            if (filler.toLive) {\n                if (filler.gradientUnits === \"percentage\" || filler.gradientTransform || filler.patternTransform) {\n                    // need to transform gradient in a pattern.\n                    // this is a slow process. If you are hitting this codepath, and the object\n                    // is not using caching, you should consider switching it on.\n                    // we need a canvas as big as the current object caching canvas.\n                    offsetX = -this.width / 2;\n                    offsetY = -this.height / 2;\n                    ctx.translate(offsetX, offsetY);\n                    ctx[property] = this._applyPatternGradientTransformText(filler);\n                    return {\n                        offsetX: offsetX,\n                        offsetY: offsetY\n                    };\n                } else {\n                    // is a simple gradient or pattern\n                    ctx[property] = filler.toLive(ctx, this);\n                    return this._applyPatternGradientTransform(ctx, filler);\n                }\n            } else {\n                // is a color\n                ctx[property] = filler;\n            }\n            return {\n                offsetX: 0,\n                offsetY: 0\n            };\n        },\n        _setStrokeStyles: function(ctx, decl) {\n            ctx.lineWidth = decl.strokeWidth;\n            ctx.lineCap = this.strokeLineCap;\n            ctx.lineDashOffset = this.strokeDashOffset;\n            ctx.lineJoin = this.strokeLineJoin;\n            ctx.miterLimit = this.strokeMiterLimit;\n            return this.handleFiller(ctx, \"strokeStyle\", decl.stroke);\n        },\n        _setFillStyles: function(ctx, decl) {\n            return this.handleFiller(ctx, \"fillStyle\", decl.fill);\n        },\n        /**\n     * @private\n     * @param {String} method\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {String} _char\n     * @param {Number} left Left coordinate\n     * @param {Number} top Top coordinate\n     * @param {Number} lineHeight Height of the line\n     */ _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\n            var decl = this._getStyleDeclaration(lineIndex, charIndex), fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex), shouldFill = method === \"fillText\" && fullDecl.fill, shouldStroke = method === \"strokeText\" && fullDecl.stroke && fullDecl.strokeWidth, fillOffsets, strokeOffsets;\n            if (!shouldStroke && !shouldFill) {\n                return;\n            }\n            ctx.save();\n            shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));\n            shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));\n            ctx.font = this._getFontDeclaration(fullDecl);\n            if (decl && decl.textBackgroundColor) {\n                this._removeShadow(ctx);\n            }\n            if (decl && decl.deltaY) {\n                top += decl.deltaY;\n            }\n            shouldFill && ctx.fillText(_char, left - fillOffsets.offsetX, top - fillOffsets.offsetY);\n            shouldStroke && ctx.strokeText(_char, left - strokeOffsets.offsetX, top - strokeOffsets.offsetY);\n            ctx.restore();\n        },\n        /**\n     * Turns the character into a 'superior figure' (i.e. 'superscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */ setSuperscript: function(start, end) {\n            return this._setScript(start, end, this.superscript);\n        },\n        /**\n     * Turns the character into an 'inferior figure' (i.e. 'subscript')\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */ setSubscript: function(start, end) {\n            return this._setScript(start, end, this.subscript);\n        },\n        /**\n     * Applies 'schema' at given position\n     * @private\n     * @param {Number} start selection start\n     * @param {Number} end selection end\n     * @param {Number} schema\n     * @returns {fabric.Text} thisArg\n     * @chainable\n     */ _setScript: function(start, end, schema) {\n            var loc = this.get2DCursorLocation(start, true), fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, \"fontSize\"), dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, \"deltaY\"), style = {\n                fontSize: fontSize * schema.size,\n                deltaY: dy + fontSize * schema.baseline\n            };\n            this.setSelectionStyles(style, start, end);\n            return this;\n        },\n        /**\n     * @private\n     * @param {Number} lineIndex index text line\n     * @return {Number} Line left offset\n     */ _getLineLeftOffset: function(lineIndex) {\n            var lineWidth = this.getLineWidth(lineIndex), lineDiff = this.width - lineWidth, textAlign = this.textAlign, direction = this.direction, isEndOfWrapping, leftOffset = 0, isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n            if (textAlign === \"justify\" || textAlign === \"justify-center\" && !isEndOfWrapping || textAlign === \"justify-right\" && !isEndOfWrapping || textAlign === \"justify-left\" && !isEndOfWrapping) {\n                return 0;\n            }\n            if (textAlign === \"center\") {\n                leftOffset = lineDiff / 2;\n            }\n            if (textAlign === \"right\") {\n                leftOffset = lineDiff;\n            }\n            if (textAlign === \"justify-center\") {\n                leftOffset = lineDiff / 2;\n            }\n            if (textAlign === \"justify-right\") {\n                leftOffset = lineDiff;\n            }\n            if (direction === \"rtl\") {\n                leftOffset -= lineDiff;\n            }\n            return leftOffset;\n        },\n        /**\n     * @private\n     */ _clearCache: function() {\n            this.__lineWidths = [];\n            this.__lineHeights = [];\n            this.__charBounds = [];\n        },\n        /**\n     * @private\n     */ _shouldClearDimensionCache: function() {\n            var shouldClear = this._forceClearCache;\n            shouldClear || (shouldClear = this.hasStateChanged(\"_dimensionAffectingProps\"));\n            if (shouldClear) {\n                this.dirty = true;\n                this._forceClearCache = false;\n            }\n            return shouldClear;\n        },\n        /**\n     * Measure a single line given its index. Used to calculate the initial\n     * text bounding box. The values are calculated and stored in __lineWidths cache.\n     * @private\n     * @param {Number} lineIndex line number\n     * @return {Number} Line width\n     */ getLineWidth: function(lineIndex) {\n            if (this.__lineWidths[lineIndex] !== undefined) {\n                return this.__lineWidths[lineIndex];\n            }\n            var lineInfo = this.measureLine(lineIndex);\n            var width = lineInfo.width;\n            this.__lineWidths[lineIndex] = width;\n            return width;\n        },\n        _getWidthOfCharSpacing: function() {\n            if (this.charSpacing !== 0) {\n                return this.fontSize * this.charSpacing / 1000;\n            }\n            return 0;\n        },\n        /**\n     * Retrieves the value of property at given character position\n     * @param {Number} lineIndex the line number\n     * @param {Number} charIndex the character number\n     * @param {String} property the property name\n     * @returns the value of 'property'\n     */ getValueOfPropertyAt: function(lineIndex, charIndex, property) {\n            var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n            if (charStyle && typeof charStyle[property] !== \"undefined\") {\n                return charStyle[property];\n            }\n            return this[property];\n        },\n        /**\n     * @private\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ _renderTextDecoration: function(ctx, type) {\n            if (!this[type] && !this.styleHas(type)) {\n                return;\n            }\n            var heightOfLine, size, _size, lineLeftOffset, dy, _dy, line, lastDecoration, leftOffset = this._getLeftOffset(), topOffset = this._getTopOffset(), top, boxStart, boxWidth, charBox, currentDecoration, maxHeight, currentFill, lastFill, path = this.path, charSpacing = this._getWidthOfCharSpacing(), offsetY = this.offsets[type];\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                heightOfLine = this.getHeightOfLine(i);\n                if (!this[type] && !this.styleHas(type, i)) {\n                    topOffset += heightOfLine;\n                    continue;\n                }\n                line = this._textLines[i];\n                maxHeight = heightOfLine / this.lineHeight;\n                lineLeftOffset = this._getLineLeftOffset(i);\n                boxStart = 0;\n                boxWidth = 0;\n                lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n                lastFill = this.getValueOfPropertyAt(i, 0, \"fill\");\n                top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n                size = this.getHeightOfChar(i, 0);\n                dy = this.getValueOfPropertyAt(i, 0, \"deltaY\");\n                for(var j = 0, jlen = line.length; j < jlen; j++){\n                    charBox = this.__charBounds[i][j];\n                    currentDecoration = this.getValueOfPropertyAt(i, j, type);\n                    currentFill = this.getValueOfPropertyAt(i, j, \"fill\");\n                    _size = this.getHeightOfChar(i, j);\n                    _dy = this.getValueOfPropertyAt(i, j, \"deltaY\");\n                    if (path && currentDecoration && currentFill) {\n                        ctx.save();\n                        ctx.fillStyle = lastFill;\n                        ctx.translate(charBox.renderLeft, charBox.renderTop);\n                        ctx.rotate(charBox.angle);\n                        ctx.fillRect(-charBox.kernedWidth / 2, offsetY * _size + _dy, charBox.kernedWidth, this.fontSize / 15);\n                        ctx.restore();\n                    } else if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) && boxWidth > 0) {\n                        var drawStart = leftOffset + lineLeftOffset + boxStart;\n                        if (this.direction === \"rtl\") {\n                            drawStart = this.width - drawStart - boxWidth;\n                        }\n                        if (lastDecoration && lastFill) {\n                            ctx.fillStyle = lastFill;\n                            ctx.fillRect(drawStart, top + offsetY * size + dy, boxWidth, this.fontSize / 15);\n                        }\n                        boxStart = charBox.left;\n                        boxWidth = charBox.width;\n                        lastDecoration = currentDecoration;\n                        lastFill = currentFill;\n                        size = _size;\n                        dy = _dy;\n                    } else {\n                        boxWidth += charBox.kernedWidth;\n                    }\n                }\n                var drawStart = leftOffset + lineLeftOffset + boxStart;\n                if (this.direction === \"rtl\") {\n                    drawStart = this.width - drawStart - boxWidth;\n                }\n                ctx.fillStyle = currentFill;\n                currentDecoration && currentFill && ctx.fillRect(drawStart, top + offsetY * size + dy, boxWidth - charSpacing, this.fontSize / 15);\n                topOffset += heightOfLine;\n            }\n            // if there is text background color no\n            // other shadows should be casted\n            this._removeShadow(ctx);\n        },\n        /**\n     * return font declaration string for canvas context\n     * @param {Object} [styleObject] object\n     * @returns {String} font declaration formatted for canvas context.\n     */ _getFontDeclaration: function(styleObject, forMeasuring) {\n            var style = styleObject || this, family = this.fontFamily, fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\n            var fontFamily = family === undefined || family.indexOf(\"'\") > -1 || family.indexOf(\",\") > -1 || family.indexOf('\"') > -1 || fontIsGeneric ? style.fontFamily : '\"' + style.fontFamily + '\"';\n            return [\n                // node-canvas needs \"weight style\", while browsers need \"style weight\"\n                // verify if this can be fixed in JSDOM\n                fabric.isLikelyNode ? style.fontWeight : style.fontStyle,\n                fabric.isLikelyNode ? style.fontStyle : style.fontWeight,\n                forMeasuring ? this.CACHE_FONT_SIZE + \"px\" : style.fontSize + \"px\",\n                fontFamily\n            ].join(\" \");\n        },\n        /**\n     * Renders text instance on a specified context\n     * @param {CanvasRenderingContext2D} ctx Context to render on\n     */ render: function(ctx) {\n            // do not render if object is not visible\n            if (!this.visible) {\n                return;\n            }\n            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n                return;\n            }\n            if (this._shouldClearDimensionCache()) {\n                this.initDimensions();\n            }\n            this.callSuper(\"render\", ctx);\n        },\n        /**\n     * Returns the text as an array of lines.\n     * @param {String} text text to split\n     * @returns {Array} Lines in the text\n     */ _splitTextIntoLines: function(text) {\n            var lines = text.split(this._reNewline), newLines = new Array(lines.length), newLine = [\n                \"\\n\"\n            ], newText = [];\n            for(var i = 0; i < lines.length; i++){\n                newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\n                newText = newText.concat(newLines[i], newLine);\n            }\n            newText.pop();\n            return {\n                _unwrappedLines: newLines,\n                lines: lines,\n                graphemeText: newText,\n                graphemeLines: newLines\n            };\n        },\n        /**\n     * Returns object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            var allProperties = additionalProps.concat(propertiesToInclude);\n            var obj = this.callSuper(\"toObject\", allProperties);\n            obj.styles = fabric.util.stylesToArray(this.styles, this.text);\n            if (obj.path) {\n                obj.path = this.path.toObject();\n            }\n            return obj;\n        },\n        /**\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\n     * @return {fabric.Object} thisArg\n     * @chainable\n     */ set: function(key, value) {\n            this.callSuper(\"set\", key, value);\n            var needsDims = false;\n            var isAddingPath = false;\n            if (typeof key === \"object\") {\n                for(var _key in key){\n                    if (_key === \"path\") {\n                        this.setPathInfo();\n                    }\n                    needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\n                    isAddingPath = isAddingPath || _key === \"path\";\n                }\n            } else {\n                needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\n                isAddingPath = key === \"path\";\n            }\n            if (isAddingPath) {\n                this.setPathInfo();\n            }\n            if (needsDims) {\n                this.initDimensions();\n                this.setCoords();\n            }\n            return this;\n        },\n        /**\n     * Returns complexity of an instance\n     * @return {Number} complexity\n     */ complexity: function() {\n            return 1;\n        }\n    });\n    /**\n   * Returns fabric.Text instance from an object representation\n   * @static\n   * @memberOf fabric.Text\n   * @param {Object} object plain js Object to create an instance from\n   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\n   */ fabric.Text.fromObject = function(object, callback) {\n        var objectCopy = clone(object), path = object.path;\n        delete objectCopy.path;\n        return fabric.Object._fromObject(\"Text\", objectCopy, function(textInstance) {\n            textInstance.styles = fabric.util.stylesFromArray(object.styles, object.text);\n            if (path) {\n                fabric.Object._fromObject(\"Path\", path, function(pathInstance) {\n                    textInstance.set(\"path\", pathInstance);\n                    callback(textInstance);\n                }, \"path\");\n            } else {\n                callback(textInstance);\n            }\n        }, \"text\");\n    };\n    fabric.Text.genericFonts = [\n        \"sans-serif\",\n        \"serif\",\n        \"cursive\",\n        \"fantasy\",\n        \"monospace\"\n    ];\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\n})( true ? exports : 0);\n(function() {\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n        /**\n     * Returns true if object has no styling or no styling in a line\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\n     * @return {Boolean}\n     */ isEmptyStyles: function(lineIndex) {\n            if (!this.styles) {\n                return true;\n            }\n            if (typeof lineIndex !== \"undefined\" && !this.styles[lineIndex]) {\n                return true;\n            }\n            var obj = typeof lineIndex === \"undefined\" ? this.styles : {\n                line: this.styles[lineIndex]\n            };\n            for(var p1 in obj){\n                for(var p2 in obj[p1]){\n                    // eslint-disable-next-line no-unused-vars\n                    for(var p3 in obj[p1][p2]){\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n        /**\n     * Returns true if object has a style property or has it ina specified line\n     * This function is used to detect if a text will use a particular property or not.\n     * @param {String} property to check for\n     * @param {Number} lineIndex to check the style on\n     * @return {Boolean}\n     */ styleHas: function(property, lineIndex) {\n            if (!this.styles || !property || property === \"\") {\n                return false;\n            }\n            if (typeof lineIndex !== \"undefined\" && !this.styles[lineIndex]) {\n                return false;\n            }\n            var obj = typeof lineIndex === \"undefined\" ? this.styles : {\n                0: this.styles[lineIndex]\n            };\n            // eslint-disable-next-line\n            for(var p1 in obj){\n                // eslint-disable-next-line\n                for(var p2 in obj[p1]){\n                    if (typeof obj[p1][p2][property] !== \"undefined\") {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        },\n        /**\n     * Check if characters in a text have a value for a property\n     * whose value matches the textbox's value for that property.  If so,\n     * the character-level property is deleted.  If the character\n     * has no other properties, then it is also deleted.  Finally,\n     * if the line containing that character has no other characters\n     * then it also is deleted.\n     *\n     * @param {string} property The property to compare between characters and text.\n     */ cleanStyle: function(property) {\n            if (!this.styles || !property || property === \"\") {\n                return false;\n            }\n            var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue, allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\n            // eslint-disable-next-line\n            for(var p1 in obj){\n                letterCount = 0;\n                // eslint-disable-next-line\n                for(var p2 in obj[p1]){\n                    var styleObject = obj[p1][p2], stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\n                    stylesCount++;\n                    if (stylePropertyHasBeenSet) {\n                        if (!stylePropertyValue) {\n                            stylePropertyValue = styleObject[property];\n                        } else if (styleObject[property] !== stylePropertyValue) {\n                            allStyleObjectPropertiesMatch = false;\n                        }\n                        if (styleObject[property] === this[property]) {\n                            delete styleObject[property];\n                        }\n                    } else {\n                        allStyleObjectPropertiesMatch = false;\n                    }\n                    if (Object.keys(styleObject).length !== 0) {\n                        letterCount++;\n                    } else {\n                        delete obj[p1][p2];\n                    }\n                }\n                if (letterCount === 0) {\n                    delete obj[p1];\n                }\n            }\n            // if every grapheme has the same style set then\n            // delete those styles and set it on the parent\n            for(var i = 0; i < this._textLines.length; i++){\n                graphemeCount += this._textLines[i].length;\n            }\n            if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n                this[property] = stylePropertyValue;\n                this.removeStyle(property);\n            }\n        },\n        /**\n     * Remove a style property or properties from all individual character styles\n     * in a text object.  Deletes the character style object if it contains no other style\n     * props.  Deletes a line style object if it contains no other character styles.\n     *\n     * @param {String} props The property to remove from character styles.\n     */ removeStyle: function(property) {\n            if (!this.styles || !property || property === \"\") {\n                return;\n            }\n            var obj = this.styles, line, lineNum, charNum;\n            for(lineNum in obj){\n                line = obj[lineNum];\n                for(charNum in line){\n                    delete line[charNum][property];\n                    if (Object.keys(line[charNum]).length === 0) {\n                        delete line[charNum];\n                    }\n                }\n                if (Object.keys(line).length === 0) {\n                    delete obj[lineNum];\n                }\n            }\n        },\n        /**\n     * @private\n     */ _extendStyles: function(index, styles) {\n            var loc = this.get2DCursorLocation(index);\n            if (!this._getLineStyle(loc.lineIndex)) {\n                this._setLineStyle(loc.lineIndex);\n            }\n            if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n                this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n            }\n            fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n        },\n        /**\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\n     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\n     */ get2DCursorLocation: function(selectionStart, skipWrapping) {\n            if (typeof selectionStart === \"undefined\") {\n                selectionStart = this.selectionStart;\n            }\n            var lines = skipWrapping ? this._unwrappedTextLines : this._textLines, len = lines.length;\n            for(var i = 0; i < len; i++){\n                if (selectionStart <= lines[i].length) {\n                    return {\n                        lineIndex: i,\n                        charIndex: selectionStart\n                    };\n                }\n                selectionStart -= lines[i].length + this.missingNewlineOffset(i);\n            }\n            return {\n                lineIndex: i - 1,\n                charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\n            };\n        },\n        /**\n     * Gets style of a current selection/cursor (at the start position)\n     * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @param {Boolean} [complete] get full style or not\n     * @return {Array} styles an array with one, zero or more Style objects\n     */ getSelectionStyles: function(startIndex, endIndex, complete) {\n            if (typeof startIndex === \"undefined\") {\n                startIndex = this.selectionStart || 0;\n            }\n            if (typeof endIndex === \"undefined\") {\n                endIndex = this.selectionEnd || startIndex;\n            }\n            var styles = [];\n            for(var i = startIndex; i < endIndex; i++){\n                styles.push(this.getStyleAtPosition(i, complete));\n            }\n            return styles;\n        },\n        /**\n     * Gets style of a current selection/cursor position\n     * @param {Number} position  to get styles at\n     * @param {Boolean} [complete] full style if true\n     * @return {Object} style Style object at a specified index\n     * @private\n     */ getStyleAtPosition: function(position, complete) {\n            var loc = this.get2DCursorLocation(position), style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) : this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n            return style || {};\n        },\n        /**\n     * Sets style of a current selection, if no selection exist, do not set anything.\n     * @param {Object} [styles] Styles object\n     * @param {Number} [startIndex] Start index to get styles at\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\n     * @return {fabric.IText} thisArg\n     * @chainable\n     */ setSelectionStyles: function(styles, startIndex, endIndex) {\n            if (typeof startIndex === \"undefined\") {\n                startIndex = this.selectionStart || 0;\n            }\n            if (typeof endIndex === \"undefined\") {\n                endIndex = this.selectionEnd || startIndex;\n            }\n            for(var i = startIndex; i < endIndex; i++){\n                this._extendStyles(i, styles);\n            }\n            /* not included in _extendStyles to avoid clearing cache more than once */ this._forceClearCache = true;\n            return this;\n        },\n        /**\n     * get the reference, not a clone, of the style object for a given character\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @return {Object} style object\n     */ _getStyleDeclaration: function(lineIndex, charIndex) {\n            var lineStyle = this.styles && this.styles[lineIndex];\n            if (!lineStyle) {\n                return null;\n            }\n            return lineStyle[charIndex];\n        },\n        /**\n     * return a new object that contains all the style property for a character\n     * the object returned is newly created\n     * @param {Number} lineIndex of the line where the character is\n     * @param {Number} charIndex position of the character on the line\n     * @return {Object} style object\n     */ getCompleteStyleDeclaration: function(lineIndex, charIndex) {\n            var style = this._getStyleDeclaration(lineIndex, charIndex) || {}, styleObject = {}, prop;\n            for(var i = 0; i < this._styleProperties.length; i++){\n                prop = this._styleProperties[i];\n                styleObject[prop] = typeof style[prop] === \"undefined\" ? this[prop] : style[prop];\n            }\n            return styleObject;\n        },\n        /**\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @param {Object} style\n     * @private\n     */ _setStyleDeclaration: function(lineIndex, charIndex, style) {\n            this.styles[lineIndex][charIndex] = style;\n        },\n        /**\n     *\n     * @param {Number} lineIndex\n     * @param {Number} charIndex\n     * @private\n     */ _deleteStyleDeclaration: function(lineIndex, charIndex) {\n            delete this.styles[lineIndex][charIndex];\n        },\n        /**\n     * @param {Number} lineIndex\n     * @return {Boolean} if the line exists or not\n     * @private\n     */ _getLineStyle: function(lineIndex) {\n            return !!this.styles[lineIndex];\n        },\n        /**\n     * Set the line style to an empty object so that is initialized\n     * @param {Number} lineIndex\n     * @private\n     */ _setLineStyle: function(lineIndex) {\n            this.styles[lineIndex] = {};\n        },\n        /**\n     * @param {Number} lineIndex\n     * @private\n     */ _deleteLineStyle: function(lineIndex) {\n            delete this.styles[lineIndex];\n        }\n    });\n})();\n(function() {\n    var controlsUtils = fabric.controlsUtils, scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler, scaleStyleHandler = controlsUtils.scaleCursorStyleHandler, scalingEqually = controlsUtils.scalingEqually, scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX, scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY, scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName, objectControls = fabric.Object.prototype.controls;\n    objectControls.ml = new fabric.Control({\n        x: -0.5,\n        y: 0,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingXOrSkewingY,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.mr = new fabric.Control({\n        x: 0.5,\n        y: 0,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingXOrSkewingY,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.mb = new fabric.Control({\n        x: 0,\n        y: 0.5,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingYOrSkewingX,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.mt = new fabric.Control({\n        x: 0,\n        y: -0.5,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingYOrSkewingX,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.tl = new fabric.Control({\n        x: -0.5,\n        y: -0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.tr = new fabric.Control({\n        x: 0.5,\n        y: -0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.bl = new fabric.Control({\n        x: -0.5,\n        y: 0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.br = new fabric.Control({\n        x: 0.5,\n        y: 0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.mtr = new fabric.Control({\n        x: 0,\n        y: -0.5,\n        actionHandler: controlsUtils.rotationWithSnapping,\n        cursorStyleHandler: controlsUtils.rotationStyleHandler,\n        offsetY: -40,\n        withConnection: true,\n        actionName: \"rotate\"\n    });\n    if (fabric.Textbox) {\n        // this is breaking the prototype inheritance, no time / ideas to fix it.\n        // is important to document that if you want to have all objects to have a\n        // specific custom control, you have to add it to Object prototype and to Textbox\n        // prototype. The controls are shared as references. So changes to control `tr`\n        // can still apply to all objects if needed.\n        var textBoxControls = fabric.Textbox.prototype.controls = {};\n        textBoxControls.mtr = objectControls.mtr;\n        textBoxControls.tr = objectControls.tr;\n        textBoxControls.br = objectControls.br;\n        textBoxControls.tl = objectControls.tl;\n        textBoxControls.bl = objectControls.bl;\n        textBoxControls.mt = objectControls.mt;\n        textBoxControls.mb = objectControls.mb;\n        textBoxControls.mr = new fabric.Control({\n            x: 0.5,\n            y: 0,\n            actionHandler: controlsUtils.changeWidth,\n            cursorStyleHandler: scaleSkewStyleHandler,\n            actionName: \"resizing\"\n        });\n        textBoxControls.ml = new fabric.Control({\n            x: -0.5,\n            y: 0,\n            actionHandler: controlsUtils.changeWidth,\n            cursorStyleHandler: scaleSkewStyleHandler,\n            actionName: \"resizing\"\n        });\n    }\n})();\n(function() {\n    /** ERASER_START */ /**\n   * add `eraser` to enlivened props\n   */ fabric.Object.ENLIVEN_PROPS.push(\"eraser\");\n    var __drawClipPath = fabric.Object.prototype._drawClipPath;\n    var _needsItsOwnCache = fabric.Object.prototype.needsItsOwnCache;\n    var _toObject = fabric.Object.prototype.toObject;\n    var _getSvgCommons = fabric.Object.prototype.getSvgCommons;\n    var __createBaseClipPathSVGMarkup = fabric.Object.prototype._createBaseClipPathSVGMarkup;\n    var __createBaseSVGMarkup = fabric.Object.prototype._createBaseSVGMarkup;\n    fabric.Object.prototype.cacheProperties.push(\"eraser\");\n    fabric.Object.prototype.stateProperties.push(\"eraser\");\n    /**\n   * @fires erasing:end\n   */ fabric.util.object.extend(fabric.Object.prototype, {\n        /**\n     * Indicates whether this object can be erased by {@link fabric.EraserBrush}\n     * The `deep` option introduces fine grained control over a group's `erasable` property.\n     * When set to `deep` the eraser will erase nested objects if they are erasable, leaving the group and the other objects untouched.\n     * When set to `true` the eraser will erase the entire group. Once the group changes the eraser is propagated to its children for proper functionality.\n     * When set to `false` the eraser will leave all objects including the group untouched.\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\n     * @type boolean | 'deep'\n     * @default true\n     */ erasable: true,\n        /**\n     * @tutorial {@link http://fabricjs.com/erasing#eraser}\n     * @type fabric.Eraser\n     */ eraser: undefined,\n        /**\n     * @override\n     * @returns Boolean\n     */ needsItsOwnCache: function() {\n            return _needsItsOwnCache.call(this) || !!this.eraser;\n        },\n        /**\n     * draw eraser above clip path\n     * @override\n     * @private\n     * @param {CanvasRenderingContext2D} ctx\n     * @param {fabric.Object} clipPath\n     */ _drawClipPath: function(ctx, clipPath) {\n            __drawClipPath.call(this, ctx, clipPath);\n            if (this.eraser) {\n                //  update eraser size to match instance\n                var size = this._getNonTransformedDimensions();\n                this.eraser.isType(\"eraser\") && this.eraser.set({\n                    width: size.x,\n                    height: size.y\n                });\n                __drawClipPath.call(this, ctx, this.eraser);\n            }\n        },\n        /**\n     * Returns an object representation of an instance\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\n     * @return {Object} Object representation of an instance\n     */ toObject: function(propertiesToInclude) {\n            var object = _toObject.call(this, [\n                \"erasable\"\n            ].concat(propertiesToInclude));\n            if (this.eraser && !this.eraser.excludeFromExport) {\n                object.eraser = this.eraser.toObject(propertiesToInclude);\n            }\n            return object;\n        }\n    });\n    var __restoreObjectsState = fabric.Group.prototype._restoreObjectsState;\n    fabric.util.object.extend(fabric.Group.prototype, {\n        /**\n     * @private\n     * @param {fabric.Path} path\n     */ _addEraserPathToObjects: function(path) {\n            this._objects.forEach(function(object) {\n                fabric.EraserBrush.prototype._addPathToObjectEraser.call(fabric.EraserBrush.prototype, object, path);\n            });\n        },\n        /**\n     * Applies the group's eraser to its objects\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\n     */ applyEraserToObjects: function() {\n            var _this = this, eraser = this.eraser;\n            if (eraser) {\n                delete this.eraser;\n                var transform = _this.calcTransformMatrix();\n                eraser.clone(function(eraser) {\n                    var clipPath = _this.clipPath;\n                    eraser.getObjects(\"path\").forEach(function(path) {\n                        //  first we transform the path from the group's coordinate system to the canvas'\n                        var originalTransform = fabric.util.multiplyTransformMatrices(transform, path.calcTransformMatrix());\n                        fabric.util.applyTransformToObject(path, originalTransform);\n                        if (clipPath) {\n                            clipPath.clone(function(_clipPath) {\n                                var eraserPath = fabric.EraserBrush.prototype.applyClipPathToPath.call(fabric.EraserBrush.prototype, path, _clipPath, transform);\n                                _this._addEraserPathToObjects(eraserPath);\n                            }, [\n                                \"absolutePositioned\",\n                                \"inverted\"\n                            ]);\n                        } else {\n                            _this._addEraserPathToObjects(path);\n                        }\n                    });\n                });\n            }\n        },\n        /**\n     * Propagate the group's eraser to its objects, crucial for proper functionality of the eraser within the group and nested objects.\n     * @private\n     */ _restoreObjectsState: function() {\n            this.erasable === true && this.applyEraserToObjects();\n            return __restoreObjectsState.call(this);\n        }\n    });\n    /**\n   * An object's Eraser\n   * @private\n   * @class fabric.Eraser\n   * @extends fabric.Group\n   * @memberof fabric\n   */ fabric.Eraser = fabric.util.createClass(fabric.Group, {\n        /**\n     * @readonly\n     * @static\n     */ type: \"eraser\",\n        /**\n     * @default\n     */ originX: \"center\",\n        /**\n     * @default\n     */ originY: \"center\",\n        drawObject: function(ctx) {\n            ctx.save();\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n            ctx.restore();\n            this.callSuper(\"drawObject\", ctx);\n        },\n        /**\n     * eraser should retain size\n     * dimensions should not change when paths are added or removed\n     * handled by {@link fabric.Object#_drawClipPath}\n     * @override\n     * @private\n     */ _getBounds: function() {\n        //  noop\n        }\n    });\n    /**\n   * Returns {@link fabric.Eraser} instance from an object representation\n   * @static\n   * @memberOf fabric.Eraser\n   * @param {Object} object Object to create an Eraser from\n   * @param {Function} [callback] Callback to invoke when an eraser instance is created\n   */ fabric.Eraser.fromObject = function(object, callback) {\n        var objects = object.objects;\n        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n            var options = fabric.util.object.clone(object, true);\n            delete options.objects;\n            fabric.util.enlivenObjectEnlivables(object, options, function() {\n                callback && callback(new fabric.Eraser(enlivenedObjects, options, true));\n            });\n        });\n    };\n    var __renderOverlay = fabric.Canvas.prototype._renderOverlay;\n    /**\n   * @fires erasing:start\n   * @fires erasing:end\n   */ fabric.util.object.extend(fabric.Canvas.prototype, {\n        /**\n     * Used by {@link #renderAll}\n     * @returns boolean\n     */ isErasing: function() {\n            return this.isDrawingMode && this.freeDrawingBrush && this.freeDrawingBrush.type === \"eraser\" && this.freeDrawingBrush._isErasing;\n        },\n        /**\n     * While erasing the brush clips out the erasing path from canvas\n     * so we need to render it on top of canvas every render\n     * @param {CanvasRenderingContext2D} ctx\n     */ _renderOverlay: function(ctx) {\n            __renderOverlay.call(this, ctx);\n            if (this.isErasing() && !this.freeDrawingBrush.inverted) {\n                this.freeDrawingBrush._render();\n            }\n        }\n    });\n    /**\n   * EraserBrush class\n   * Supports selective erasing meaning that only erasable objects are affected by the eraser brush.\n   * Supports **inverted** erasing meaning that the brush can \"undo\" erasing.\n   *\n   * In order to support selective erasing, the brush clips the entire canvas\n   * and then draws all non-erasable objects over the erased path using a pattern brush so to speak (masking).\n   * If brush is **inverted** there is no need to clip canvas. The brush draws all erasable objects without their eraser.\n   * This achieves the desired effect of seeming to erase or unerase only erasable objects.\n   * After erasing is done the created path is added to all intersected objects' `eraser` property.\n   *\n   * In order to update the EraserBrush call `preparePattern`.\n   * It may come in handy when canvas changes during erasing (i.e animations) and you want the eraser to reflect the changes.\n   *\n   * @tutorial {@link http://fabricjs.com/erasing}\n   * @class fabric.EraserBrush\n   * @extends fabric.PencilBrush\n   * @memberof fabric\n   */ fabric.EraserBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.EraserBrush.prototype */ {\n        type: \"eraser\",\n        /**\n       * When set to `true` the brush will create a visual effect of undoing erasing\n       */ inverted: false,\n        /**\n       * @private\n       */ _isErasing: false,\n        /**\n       *\n       * @private\n       * @param {fabric.Object} object\n       * @returns boolean\n       */ _isErasable: function(object) {\n            return object.erasable !== false;\n        },\n        /**\n       * @private\n       * This is designed to support erasing a collection with both erasable and non-erasable objects.\n       * Iterates over collections to allow nested selective erasing.\n       * Prepares the pattern brush that will draw on the top context to achieve the desired visual effect.\n       * If brush is **NOT** inverted render all non-erasable objects.\n       * If brush is inverted render all erasable objects that have been erased with their clip path inverted.\n       * This will render the erased parts as if they were not erased.\n       *\n       * @param {fabric.Collection} collection\n       * @param {CanvasRenderingContext2D} ctx\n       * @param {{ visibility: fabric.Object[], eraser: fabric.Object[], collection: fabric.Object[] }} restorationContext\n       */ _prepareCollectionTraversal: function(collection, ctx, restorationContext) {\n            collection.forEachObject(function(obj) {\n                if (obj.forEachObject && obj.erasable === \"deep\") {\n                    //  traverse\n                    this._prepareCollectionTraversal(obj, ctx, restorationContext);\n                } else if (!this.inverted && obj.erasable && obj.visible) {\n                    //  render only non-erasable objects\n                    obj.visible = false;\n                    collection.dirty = true;\n                    restorationContext.visibility.push(obj);\n                    restorationContext.collection.push(collection);\n                } else if (this.inverted && obj.visible) {\n                    //  render only erasable objects that were erased\n                    if (obj.erasable && obj.eraser) {\n                        obj.eraser.inverted = true;\n                        obj.dirty = true;\n                        collection.dirty = true;\n                        restorationContext.eraser.push(obj);\n                        restorationContext.collection.push(collection);\n                    } else {\n                        obj.visible = false;\n                        collection.dirty = true;\n                        restorationContext.visibility.push(obj);\n                        restorationContext.collection.push(collection);\n                    }\n                }\n            }, this);\n        },\n        /**\n       * Prepare the pattern for the erasing brush\n       * This pattern will be drawn on the top context, achieving a visual effect of erasing only erasable objects\n       * @todo decide how overlay color should behave when `inverted === true`, currently draws over it which is undesirable\n       * @private\n       */ preparePattern: function() {\n            if (!this._patternCanvas) {\n                this._patternCanvas = fabric.util.createCanvasElement();\n            }\n            var canvas = this._patternCanvas;\n            canvas.width = this.canvas.width;\n            canvas.height = this.canvas.height;\n            var patternCtx = canvas.getContext(\"2d\");\n            if (this.canvas._isRetinaScaling()) {\n                var retinaScaling = this.canvas.getRetinaScaling();\n                this.canvas.__initRetinaScaling(retinaScaling, canvas, patternCtx);\n            }\n            var backgroundImage = this.canvas.backgroundImage, bgErasable = backgroundImage && this._isErasable(backgroundImage), overlayImage = this.canvas.overlayImage, overlayErasable = overlayImage && this._isErasable(overlayImage);\n            if (!this.inverted && (backgroundImage && !bgErasable || !!this.canvas.backgroundColor)) {\n                if (bgErasable) {\n                    this.canvas.backgroundImage = undefined;\n                }\n                this.canvas._renderBackground(patternCtx);\n                if (bgErasable) {\n                    this.canvas.backgroundImage = backgroundImage;\n                }\n            } else if (this.inverted && backgroundImage && bgErasable) {\n                var color = this.canvas.backgroundColor;\n                this.canvas.backgroundColor = undefined;\n                this.canvas._renderBackground(patternCtx);\n                this.canvas.backgroundColor = color;\n            }\n            patternCtx.save();\n            patternCtx.transform.apply(patternCtx, this.canvas.viewportTransform);\n            var restorationContext = {\n                visibility: [],\n                eraser: [],\n                collection: []\n            };\n            this._prepareCollectionTraversal(this.canvas, patternCtx, restorationContext);\n            this.canvas._renderObjects(patternCtx, this.canvas._objects);\n            restorationContext.visibility.forEach(function(obj) {\n                obj.visible = true;\n            });\n            restorationContext.eraser.forEach(function(obj) {\n                obj.eraser.inverted = false;\n                obj.dirty = true;\n            });\n            restorationContext.collection.forEach(function(obj) {\n                obj.dirty = true;\n            });\n            patternCtx.restore();\n            if (!this.inverted && (overlayImage && !overlayErasable || !!this.canvas.overlayColor)) {\n                if (overlayErasable) {\n                    this.canvas.overlayImage = undefined;\n                }\n                __renderOverlay.call(this.canvas, patternCtx);\n                if (overlayErasable) {\n                    this.canvas.overlayImage = overlayImage;\n                }\n            } else if (this.inverted && overlayImage && overlayErasable) {\n                var color = this.canvas.overlayColor;\n                this.canvas.overlayColor = undefined;\n                __renderOverlay.call(this.canvas, patternCtx);\n                this.canvas.overlayColor = color;\n            }\n        },\n        /**\n       * Sets brush styles\n       * @private\n       * @param {CanvasRenderingContext2D} ctx\n       */ _setBrushStyles: function(ctx) {\n            this.callSuper(\"_setBrushStyles\", ctx);\n            ctx.strokeStyle = \"black\";\n        },\n        /**\n       * **Customiztion**\n       *\n       * if you need the eraser to update on each render (i.e animating during erasing) override this method by **adding** the following (performance may suffer):\n       * @example\n       * ```\n       * if(ctx === this.canvas.contextTop) {\n       *  this.preparePattern();\n       * }\n       * ```\n       *\n       * @override fabric.BaseBrush#_saveAndTransform\n       * @param {CanvasRenderingContext2D} ctx\n       */ _saveAndTransform: function(ctx) {\n            this.callSuper(\"_saveAndTransform\", ctx);\n            this._setBrushStyles(ctx);\n            ctx.globalCompositeOperation = ctx === this.canvas.getContext() ? \"destination-out\" : \"source-over\";\n        },\n        /**\n       * We indicate {@link fabric.PencilBrush} to repaint itself if necessary\n       * @returns\n       */ needsFullRender: function() {\n            return true;\n        },\n        /**\n       *\n       * @param {fabric.Point} pointer\n       * @param {fabric.IEvent} options\n       * @returns\n       */ onMouseDown: function(pointer, options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return;\n            }\n            this._prepareForDrawing(pointer);\n            // capture coordinates immediately\n            // this allows to draw dots (when movement never occurs)\n            this._captureDrawingPath(pointer);\n            //  prepare for erasing\n            this.preparePattern();\n            this._isErasing = true;\n            this.canvas.fire(\"erasing:start\");\n            this._render();\n        },\n        /**\n       * Rendering Logic:\n       * 1. Use brush to clip canvas by rendering it on top of canvas (unnecessary if `inverted === true`)\n       * 2. Render brush with canvas pattern on top context\n       *\n       */ _render: function() {\n            var ctx;\n            if (!this.inverted) {\n                //  clip canvas\n                ctx = this.canvas.getContext();\n                this.callSuper(\"_render\", ctx);\n            }\n            //  render brush and mask it with image of non erasables\n            ctx = this.canvas.contextTop;\n            this.canvas.clearContext(ctx);\n            this.callSuper(\"_render\", ctx);\n            ctx.save();\n            var t = this.canvas.getRetinaScaling(), s = 1 / t;\n            ctx.scale(s, s);\n            ctx.globalCompositeOperation = \"source-in\";\n            ctx.drawImage(this._patternCanvas, 0, 0);\n            ctx.restore();\n        },\n        /**\n       * Creates fabric.Path object\n       * @override\n       * @private\n       * @param {(string|number)[][]} pathData Path data\n       * @return {fabric.Path} Path to add on canvas\n       * @returns\n       */ createPath: function(pathData) {\n            var path = this.callSuper(\"createPath\", pathData);\n            path.globalCompositeOperation = this.inverted ? \"source-over\" : \"destination-out\";\n            path.stroke = this.inverted ? \"white\" : \"black\";\n            return path;\n        },\n        /**\n       * Utility to apply a clip path to a path.\n       * Used to preserve clipping on eraser paths in nested objects.\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\n       * @param {fabric.Path} path The eraser path in canvas coordinate plane\n       * @param {fabric.Object} clipPath The clipPath to apply to the path\n       * @param {number[]} clipPathContainerTransformMatrix The transform matrix of the object that the clip path belongs to\n       * @returns {fabric.Path} path with clip path\n       */ applyClipPathToPath: function(path, clipPath, clipPathContainerTransformMatrix) {\n            var pathInvTransform = fabric.util.invertTransform(path.calcTransformMatrix()), clipPathTransform = clipPath.calcTransformMatrix(), transform = clipPath.absolutePositioned ? pathInvTransform : fabric.util.multiplyTransformMatrices(pathInvTransform, clipPathContainerTransformMatrix);\n            //  when passing down a clip path it becomes relative to the parent\n            //  so we transform it acoordingly and set `absolutePositioned` to false\n            clipPath.absolutePositioned = false;\n            fabric.util.applyTransformToObject(clipPath, fabric.util.multiplyTransformMatrices(transform, clipPathTransform));\n            //  We need to clip `path` with both `clipPath` and it's own clip path if existing (`path.clipPath`)\n            //  so in turn `path` erases an object only where it overlaps with all it's clip paths, regardless of how many there are.\n            //  this is done because both clip paths may have nested clip paths of their own (this method walks down a collection => this may reccur),\n            //  so we can't assign one to the other's clip path property.\n            path.clipPath = path.clipPath ? fabric.util.mergeClipPaths(clipPath, path.clipPath) : clipPath;\n            return path;\n        },\n        /**\n       * Utility to apply a clip path to a path.\n       * Used to preserve clipping on eraser paths in nested objects.\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\n       * @param {fabric.Path} path The eraser path\n       * @param {fabric.Object} object The clipPath to apply to path belongs to object\n       * @param {Function} callback Callback to be invoked with the cloned path after applying the clip path\n       */ clonePathWithClipPath: function(path, object, callback) {\n            var objTransform = object.calcTransformMatrix();\n            var clipPath = object.clipPath;\n            var _this = this;\n            path.clone(function(_path) {\n                clipPath.clone(function(_clipPath) {\n                    callback(_this.applyClipPathToPath(_path, _clipPath, objTransform));\n                }, [\n                    \"absolutePositioned\",\n                    \"inverted\"\n                ]);\n            });\n        },\n        /**\n       * Adds path to object's eraser, walks down object's descendants if necessary\n       *\n       * @fires erasing:end on object\n       * @param {fabric.Object} obj\n       * @param {fabric.Path} path\n       */ _addPathToObjectEraser: function(obj, path) {\n            var _this = this;\n            //  object is collection, i.e group\n            if (obj.forEachObject && obj.erasable === \"deep\") {\n                var targets = obj._objects.filter(function(_obj) {\n                    return _obj.erasable;\n                });\n                if (targets.length > 0 && obj.clipPath) {\n                    this.clonePathWithClipPath(path, obj, function(_path) {\n                        targets.forEach(function(_obj) {\n                            _this._addPathToObjectEraser(_obj, _path);\n                        });\n                    });\n                } else if (targets.length > 0) {\n                    targets.forEach(function(_obj) {\n                        _this._addPathToObjectEraser(_obj, path);\n                    });\n                }\n                return;\n            }\n            //  prepare eraser\n            var eraser = obj.eraser;\n            if (!eraser) {\n                eraser = new fabric.Eraser();\n                obj.eraser = eraser;\n            }\n            //  clone and add path\n            path.clone(function(path) {\n                // http://fabricjs.com/using-transformations\n                var desiredTransform = fabric.util.multiplyTransformMatrices(fabric.util.invertTransform(obj.calcTransformMatrix()), path.calcTransformMatrix());\n                fabric.util.applyTransformToObject(path, desiredTransform);\n                eraser.addWithUpdate(path);\n                obj.set(\"dirty\", true);\n                obj.fire(\"erasing:end\", {\n                    path: path\n                });\n                if (obj.group && Array.isArray(_this.__subTargets)) {\n                    _this.__subTargets.push(obj);\n                }\n            });\n        },\n        /**\n       * Add the eraser path to canvas drawables' clip paths\n       *\n       * @param {fabric.Canvas} source\n       * @param {fabric.Canvas} path\n       * @returns {Object} canvas drawables that were erased by the path\n       */ applyEraserToCanvas: function(path) {\n            var canvas = this.canvas;\n            var drawables = {};\n            [\n                \"backgroundImage\",\n                \"overlayImage\"\n            ].forEach(function(prop) {\n                var drawable = canvas[prop];\n                if (drawable && drawable.erasable) {\n                    this._addPathToObjectEraser(drawable, path);\n                    drawables[prop] = drawable;\n                }\n            }, this);\n            return drawables;\n        },\n        /**\n       * On mouseup after drawing the path on contextTop canvas\n       * we use the points captured to create an new fabric path object\n       * and add it to every intersected erasable object.\n       */ _finalizeAndAddPath: function() {\n            var ctx = this.canvas.contextTop, canvas = this.canvas;\n            ctx.closePath();\n            if (this.decimate) {\n                this._points = this.decimatePoints(this._points, this.decimate);\n            }\n            // clear\n            canvas.clearContext(canvas.contextTop);\n            this._isErasing = false;\n            var pathData = this._points && this._points.length > 1 ? this.convertPointsToSVGPath(this._points) : null;\n            if (!pathData || this._isEmptySVGPath(pathData)) {\n                canvas.fire(\"erasing:end\");\n                // do not create 0 width/height paths, as they are\n                // rendered inconsistently across browsers\n                // Firefox 4, for example, renders a dot,\n                // whereas Chrome 10 renders nothing\n                canvas.requestRenderAll();\n                return;\n            }\n            var path = this.createPath(pathData);\n            //  needed for `intersectsWithObject`\n            path.setCoords();\n            //  commense event sequence\n            canvas.fire(\"before:path:created\", {\n                path: path\n            });\n            // finalize erasing\n            var drawables = this.applyEraserToCanvas(path);\n            var _this = this;\n            this.__subTargets = [];\n            var targets = [];\n            canvas.forEachObject(function(obj) {\n                if (obj.erasable && obj.intersectsWithObject(path, true, true)) {\n                    _this._addPathToObjectEraser(obj, path);\n                    targets.push(obj);\n                }\n            });\n            //  fire erasing:end\n            canvas.fire(\"erasing:end\", {\n                path: path,\n                targets: targets,\n                subTargets: this.__subTargets,\n                drawables: drawables\n            });\n            delete this.__subTargets;\n            canvas.requestRenderAll();\n            this._resetShadow();\n            // fire event 'path' created\n            canvas.fire(\"path:created\", {\n                path: path\n            });\n        }\n    });\n/** ERASER_END */ })();\n\n\n/***/ }),\n\n/***/ 6734:\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 6907:\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 4866:\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ })\n\n},\n/******/ function(__webpack_require__) { // webpackRuntimeModules\n/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }\n/******/ __webpack_require__.O(0, [774,937,866,609,980,445,617,943,50,888,179], function() { return __webpack_exec__(8312); });\n/******/ var __webpack_exports__ = __webpack_require__.O();\n/******/ _N_E = __webpack_exports__;\n/******/ }\n]);"],"names":["self","push","__unused_webpack_module","__unused_webpack_exports","__webpack_require__","window","__NEXT_P","__webpack_exports__","r","d","HomePage","jsx_runtime","head","head_default","n","react","CanvasContext","createContext","displayName","src_useCanvas","canvasId","_context_canvases_canvasId","context","useContext","canvases","ToolsContext","useTools","usePopper","es","index_esm","fa_index_esm","go_index_esm","gi_index_esm","io_index_esm","im_index_esm","CanvasTools","nameInputRef","useRef","fileInputRef","fileTypeRef","activeCanvas","backgroundColor","setBackgroundColor","selectedObjects","lockedObjects","lockSelection","unlockSelection","bringForward","sendBackward","duplicate","deleteSelection","undo","redo","canUndo","canRedo","brushColor","setBrushColor","brushSize","setBrushSize","activeCanvasType","addImages","exportSkin","isDrawingMode","setDrawingMode","referenceElement","setReferenceElement","useState","popperElement","setPopperElement","arrowElement","setArrowElement","isBrushToolsOpen","setBrushToolsOpen","styles","attributes","D","modifiers","name","options","element","offset","isSelectionLocked","length","every","has","object","handleBackgroundColorChange","event","target","value","useEffect","focus","jsxs","className","children","jsx","type","id","checked","onChange","htmlFor","Fragment","ref","imageUrl","Promise","resolve","reject","_event_target_files","inputFile","files","reader","FileReader","addEventListener","_event_target","result","readAsDataURL","accept","hidden","title","current","click","yAv","style","fontSize","onClick","undefined","D5B","kUi","KhA","O9L","xvH","disabled","AMf","UIL","rks","Pvc","isOpen","VUP","popper","tabIndex","newFocusElement","relatedTarget","isFocusLeaving","currentTarget","contains","Z","min","max","trackStyle","display","Array","isArray","handleStyle","width","height","marginTop","borderColor","background","concat","opacity","railStyle","border","arrow","placeholder","size","format","config","config_default","fabric","WarriorContext","useWarrior","createFabricImage","url","Image","fromURL","crossOrigin","comlink","Worker_fn","Worker","p","useImageWorker","workerRef","functionsRef","useMemo","getFunctions","combineColorAndAlphaImageUrls","_len","arguments","args","_key","functions","removeAlphaFromArrayBuffer","convertArrayBufferAlphaToGrayscale","convertGrayscaleImageUrlToMetallicRoughness","worker","Ud","Yy","terminate","useSettings","canvasPadding","basePath","imageUrlToArrayBuffer","response","fetch","ok","arrayBuffer","publicRuntimeConfig","materials","ToolsProvider","param","_materialDefs_selectedMaterialIndex","_materialDef_size","actualModel","selectedModelType","selectedMaterialIndex","setSelectedMaterialIndex","materialDefs","materialDef","textureSize","hasMetallic","metallicFactor","roughnessFactor","setActiveCanvasType","setLockedObjects","Set","setSelectedObjects","metallicCanvasId","canvas","notifyChange","metallicCanvas","useCallback","newLockedObjects","selectedObject","add","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockRotation","delete","getActiveObject","_objects","sendBackwards","imageUrls","lastAddedImage","image","widthRatio","heightRatio","scale","scaleX","scaleY","filters","grayscaleFilter","Grayscale","applyFilters","centerObject","setActiveObject","_copy_top","_copy_left","copy","clone","set","top","left","evented","forEachObject","setCoords","discardActiveObject","objects","getActiveObjects","remove","requestRenderAll","savePngFile","saveZipFile","createZipFile","all","e","then","bind","trim","materialExports","map","_canvases_","_canvases_1","_materialDef_file","outputImageUrl","colorCanvas","colorImageUrl","toDataURL","metallicImageUrl","filename","file","materialExport","data","zip","camelCaseName","replace","match","a","b","toUpperCase","zipFileName","handleSelectionUpdated","on","off","freeDrawingBrush","color","Provider","CanvasBackdrop","CanvasProvider","setCanvases","registerCanvas","canvasInfo","unregisterCanvas","rest","CanvasInteractions","nudge","_object_top","_object_left","onDrop","preventDefault","items","dataTransfer","images","from","filter","item","kind","droppedImageFile","getAsFile","onload","Boolean","onKeyDown","nodeName","ctrlKey","metaKey","key","altKey","shiftKey","CanvasToggle","ai_index_esm","WarriorSelector_publicRuntimeConfig","defaultSkins","customSkins","modelDefaults","WarriorSelector_materials","WarriorSelector","_defaultSkins_actualModel","_customSkins_actualModel","_customSkins_actualModel1","selectedModel","setSelectedModel","setSelectedModelType","selectedSkin","setSelectedSkin","setSelectedSkinType","setSelectedAnimation","setSkinImageUrls","setAnimationPaused","_defaultSkins_newSelectedModel","_customSkins_newSelectedModel","_modelDefaults_newSelectedModel","parentNode","selectedOptions","newSelectedModel","modelType","dataset","newModelHasSkin","includes","label","_parentNode_dataset_skinType","skinType","FjK","WarriorProvider_publicRuntimeConfig","WarriorProvider_materials","WarriorProvider_modelDefaults","baseSkinPath","getSkinImageUrls","selectedSkinType","base","reduce","skinImageUrls","_materialDef_file1","hasDefault","WarriorProvider","selectedAnimation","animationPaused","selectedModelUrl","defaultSkinImageUrls","dynamic","dynamic_default","EnvironmentContext","useEnvironment","SkinContext","useSkin","useModelViewer","useTexture","material","textureType","modelViewer","stale","updateTexture","setAlphaMode","pbrMetallicRoughness","setBaseColorFactor","alphaMode","alphaCutoff","baseColorFactor","emissiveFactor","emissiveTexture","textureUrl","setAlphaCutoff","setEmissiveFactor","setMetallicFactor","setRoughnessFactor","texture","createTexture","setTexture","Material","_getSkinImages","getSkinImages","Materials_publicRuntimeConfig","Materials_materials","Materials","model","i","_materialDefs_find","find","index","ModelViewer","loadableGenerated","webpack","ssr","WarriorViewer_publicRuntimeConfig","cameraOverrides","WarriorViewer","_cameraOverrides_selectedModel","_cameraOverrides_selectedModel1","environmentImageUrl","modelUrl","animationName","cameraOrbit","cameraTarget","fieldOfView","fov","EnvironmentSelector","selectedEnvironment","setSelectedEnvironment","AnimationSelector_publicRuntimeConfig","animations","animationLabels","animationLabelOverrides","AnimationSelector","_animations_actualModel","animationList","global","_animationLabelOverrides_actualModel","_animationLabelOverrides_actualModel_animationName","v$e","IWN","EnvironmentProvider","SkinProvider","materialSkins","setMaterialSkins","setters","setSkinImages","materialName","skinImages","setColorImageUrl","setMetallicImageUrl","getColorImageUrl","getMetallicImageUrl","MaterialSelector_publicRuntimeConfig","MaterialSelector_materials","MaterialSelector","_materialDef_label","parseInt","Canvas","baseImageUrl","defaultDrawingMode","canvasElementRef","setCanvas","handleChangeRef","trackChanges","undoHistory","setUndoHistory","redoHistory","setRedoHistory","handleChange","restoreState","currentState","slice","renderOnAddRemove","clear","loadFromJSON","renderAll","console","log","nextState","isActive","changeTimer","Object","prototype","transparentCorners","cornerSize","cornerStyle","cornerColor","cornerStrokeColor","strokeWidth","perPixelTargetFind","preserveObjectStacking","targetFindTolerance","isSnapshotting","handleChangeWithCanvasArg","handleRender","clearTimeout","setTimeout","snapshot","snapshotCanvas","history","toJSON","dispose","calcOffset","addImage","selectable","hoverCursor","moveCursor","expectedWidth","expectedHeight","ImageLoaderContext","useImageLoader","defaultTextureSize","ColorCanvas","skinImageUrl","defaultSkinImageUrl","noAlphaImageUrl","setNoAlphaImageUrl","loadImage","generateImageUrl","err","canvasType","MetallicCanvas_defaultTextureSize","MetallicCanvas","alphaImageUrl","setAlphaImageUrl","runningChangeHandlers","MaterialCanvases_publicRuntimeConfig","MaterialCanvases_materials","MaterialCanvases","QueryClientProvider","ImageLoaderProvider","queryClient","NL","startsWith","fetchQuery","queryKey","imageFetcher","pages_queryClient","S","defaultOptions","queries","queryFn","staleTime","Infinity","cacheTime","refetchOnWindowFocus","refetchOnReconnect","aH","client","ModelViewerContext","react__WEBPACK_IMPORTED_MODULE_0__","exports","extend","toFixed","capitalize","degreesToRadians","objectCaching","sqrt","atan2","pow","PiBy180","PiBy2","couldUseAttachEvent","touchEvents","parseEl","supportsOpacity","supportsFilters","reOpacity","setOpacity","controls","originXOffset","originYOffset","util","multiplyMatrices","transformPoint","createClass","floor","abs","round","sin","ceil","__drawClipPath","_needsItsOwnCache","_toObject","__restoreObjectsState","__renderOverlay","Buffer","version","document","HTMLDocument","Document","implementation","createHTMLDocument","virtualWindow","jsdom","JSDOM","decodeURIComponent","features","FetchExternalResources","resources","jsdomImplForWrapper","implForWrapper","nodeCanvas","DOMParser","copyGLTo2DDrawImage","gl","pipelineState","glCanvas","targetCanvas","ctx","getContext","translate","sourceY","drawImage","copyGLTo2DPutImageData","dWidth","destinationWidth","dHeight","destinationHeight","numBytes","u8","Uint8Array","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","isTouchSupported","navigator","maxTouchPoints","isLikelyNode","DPI","reNum","commaWsp","rePathCommand","reNonWord","fontPaths","iMatrix","svgNS","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","disableStyleCopyPaste","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","forceGLPutImageData","initFilterBackend","isWebglSupported","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","array","fill","_once","_handler","apply","Observable","fire","listenersForEvent","len","call","prop","once","Collection","_onObjectAdded","insertAt","nonSplicing","splice","somethingRemoved","_onObjectRemoved","callback","getObjects","o","isEmpty","deep","some","obj","complexity","memo","CommonMethods","_setOptions","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_setObject","_set","toggle","get","Math","PI","cos","angle","sign","removeFromArray","idx","getRandomInt","random","degrees","radiansToDegrees","radians","rotatePoint","point","origin","newPoint","Point","x","y","v","rotateVector","addEquals","vector","createVector","to","calcAngleBetweenVectors","acos","hypot","getHatVector","multiply","getBisector","A","B","C","AB","AC","alpha","ro","projectStrokeOnPoints","points","openPath","coords","s","strokeUniformScalar","strokeUniform","getStrokeHatVector","scalar","forEach","miterVector","bisector","bisectorVector","strokeLineJoin","strokeMiterLimit","subtract","SQRT2","t","ignoreOffset","makeBoundingBoxFromPoints","transform","xPoints","minX","maxX","yPoints","minY","maxY","invertTransform","number","fractionDigits","parseFloat","Number","parseUnit","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","resolveNamespace","getSvgAttributes","parts","split","img","createImage","onLoadCallback","onerror","src","substring","loadImageInDom","div","createElement","position","appendChild","querySelector","removeChild","enlivenObjects","reviver","enlivenedObjects","numLoadedObjects","numTotalObjects","onLoaded","fromObject","error","enlivenObjectEnlivables","enlivenProps","ENLIVEN_PROPS","enlivedProps","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","path","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","createCanvasElement","copyCanvasElement","newCanvas","canvasEl","quality","multiplyTransformMatrices","is2x2","qrDecompose","denom","skewX","skewY","translateX","translateY","calcRotateMatrix","theta","calcDimensionsMatrix","scaleMatrix","flipX","flipY","tan","composeMatrix","matrix","resetObjectTransform","rotate","saveObjectTransform","isTransparent","tolerance","_isTransparent","imageData","getImageData","l","temp","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","alignX","alignY","aspectRatioAttrs","pop","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","capValue","findScaleToFit","findScaleToCover","matrixToSVG","NUM_FRACTION_DIGITS","join","removeTransformFromObject","inverted","finalTransform","calcOwnMatrix","applyTransformToObject","addTransformToObject","center","setPositionByOrigin","sizeAfterTransform","dimX","dimY","transformMatrix","bbox","mergeClipPaths","c1","c2","calcTransformMatrix","clipPath","hasStyleChanged","prevStyle","thisStyle","forTextSpans","stroke","fontWeight","fontStyle","deltaY","overline","underline","linethrough","stylesToArray","text","textLines","charIndex","stylesArray","c","start","end","stylesFromArray","styleIndex","stylesObject","assign","_join","commandLengths","m","h","q","repeatedCommands","M","calcVectorAngle","ux","uy","vx","vy","ta","tb","calcLineLength","x1","y1","x2","y2","pathIterator","iterator","perc","tempP","tmpLen","getPathSegmentsInfo","tempInfo","angleFinder","totalLength","info","command","getPointOnCubicBezierIterator","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","pct","c3","c4","getTangentCubicIterator","invT","getPointOnQuadraticBezierIterator","getTangentQuadraticIterator","destX","destY","joinPath","pathData","segment","parsePath","pathString","currentPath","parsed","coordsStr","re","rNumber","rNumberCommaWsp","rFlagCommaWsp","regArcArgumentSequence","coordsParsed","j","jlen","isNaN","commandLength","repeatedCommand","k","klen","makePathSimpler","converted","previous","controlX","controlY","destinationPath","fromArcToBeziers","fx","fy","rx","ry","rot","large","sweep","segsNorm","arcToSegments","toX","toY","rotateX","th","sinTh","cosTh","fromX","fromY","px","py","rx2","ry2","py2","px2","pl","root","cx","cy","cx1","cy1","mTheta","dtheta","segments","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","tx","ty","getSmoothPathFromPoints","correction","p1","p2","multSignX","multSignY","manyPoints","eq","midPoint","midPointFrom","getBoundsOfCurve","x0","y0","x3","y3","argsString","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","getPointOnPath","distance","infos","segInfo","segPercent","lerp","findPercentageForDistance","nextLen","lastPerc","nextStep","transformPath","pathOffset","pathSegment","newSegment","byProperty","condition","invoke","method","value1","value2","Element","hasOwnProperty","character","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","getWholeChar","str","code","charCodeAt","next","prev","emptyFunction","IS_DONTENUM_BUGGY","toString","addMethods","klass","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","initialize","shift","subclasses","attachEvent","addListener","removeListener","removeEventListener","getPointer","touchProp","scroll","getScrollLeftTop","_evt","changedTouches","clientX","clientY","isTouchEvent","pointerType","currentStyle","hasLayout","zoom","test","setStyle","elementStyle","cssText","normalizedProperty","styleFloat","setProperty","selectProp","getElementStyle","sliceCanConvertNodelists","_slice","toArray","arrayLike","childNodes","makeElement","tagName","el","setAttribute","docElement","documentElement","body","scrollLeft","scrollTop","host","nodeType","arr","defaultView","getComputedStyle","attr","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","setImageSmoothing","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","getById","getElementById","addClass","wrapElement","wrapper","replaceChild","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","emptyFn","request","onComplete","xhr","XMLHttpRequest","parameters","onreadystatechange","readyState","open","setRequestHeader","send","warn","RUNNING_ANIMATIONS","noop","defaultEasing","cancelAll","animation","cancel","cancelByCanvas","cancelled","cancelByTarget","findAnimationsByTarget","findAnimationIndex","cancelFunc","findAnimation","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","_cancelAnimFrame","cancelAnimationFrame","requestAnimFrame","animate","removeFromRegistry","runningAnimations","currentValue","startValue","completionRate","durationRate","timestamp","time","Date","duration","finish","abort","easing","isMany","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","_value","valuePerc","cancelAnimFrame","calculateColor","begin","pos","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","originalOnComplete","originalOnChange","colorEasing","that","scalarAdd","scalarAddEquals","subtractEquals","scalarSubtract","scalarSubtractEquals","multiplyEquals","divide","divideEquals","lt","lte","gt","gte","distanceFrom","dx","dy","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","_source","toRgb","toRgba","toHsl","hsl","toHsla","toHex","toHexa","getAlpha","setAlpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","scaleMap","skewMap","LEFT","RIGHT","BOTTOM","CENTER","opposite","bottom","right","findCornerQuadrant","fabricObject","control","cornerAngle","fireEvent","canvasOptions","scaleIsProportional","eventData","uniformIsToggled","uniScaleKey","uniformScaling","isTransformCentered","originX","originY","scalingIsForbidden","by","scaleProportionally","lockX","lockY","commonEventInfo","pointer","wrapWithFixedAnchor","actionHandler","getCenterPoint","constraint","translateToOriginPoint","actionPerformed","wrapWithFireEvent","getLocalPoint","corner","getZoom","padding","localPoint","toLocalPoint","offsetX","offsetY","targetHasOneFlip","compensateScaleForSkew","oppositeSkew","scaleToCompensate","axis","reference","newValue","_getTransformedDimensions","skewObjectX","newSkew","dimNoSkew","totalSkewSize","currentSkew","hasSkewed","dimBeforeSkewing","skewObjectY","scaleObject","dim","signX","signY","forbidScaling","gestureScale","lockScalingFlip","original","oldScaleX","oldScaleY","scaleCursorStyleHandler","skewCursorStyleHandler","lockSkewingY","lockSkewingX","scaleSkewCursorStyleHandler","altActionKey","rotationWithSnapping","pivotPoint","lastAngle","ey","ex","curAngle","hasRotated","snapAngle","snapThreshold","rightAngleLocked","leftAngleLocked","scalingEqually","scalingX","scalingY","scalingYOrSkewingX","skewHandlerX","scalingXOrSkewingY","skewHandlerY","changeWidth","strokePadding","multiplier","oldWidth","newWidth","localPointFromCenter","finalHandler","dragHandler","newLeft","newTop","moveX","moveY","scaleOrSkewActionName","isAlternative","rotationStyleHandler","cursorStyle","controlsUtils","renderCircleControl","styleOverride","xSize","sizeX","ySize","sizeY","myLeft","myTop","save","fillStyle","strokeStyle","lineWidth","beginPath","arc","restore","renderSquareControl","xSizeBy2","ySizeBy2","strokeRect","Control","visible","actionName","touchSizeX","touchSizeY","withConnection","mouseDownHandler","mouseUpHandler","getActionHandler","getMouseDownHandler","getMouseUpHandler","cursorStyleHandler","getActionName","getVisibility","controlKey","objectVisibility","_controlsVisibility","setVisibility","visibility","positionHandler","finalMatrix","calcCornerCoords","objectAngle","objectCornerSize","centerX","centerY","isTouch","cosHalfOffset","sinHalfOffset","cosHalfOffsetComp","sinHalfOffsetComp","controlTriangleAngle","cornerHypotenuse","newTheta","newThetaComp","tl","tr","bl","br","render","StaticCanvas","CANVAS_INIT_ERROR","renderAndResetBound","renderAndReset","requestRenderAllBound","_initStatic","backgroundImage","overlayColor","overlayImage","includeDefaultValues","stateful","controlsAboveOverlay","allowTouchScrolling","viewportTransform","backgroundVpt","overlayVpt","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setOverlayColor","_isRetinaScaling","getRetinaScaling","scaleRatio","__initRetinaScaling","lowerCanvasEl","contextContainer","upperCanvasEl","contextTop","_offset","__setBgOverlayImage","__setBgOverlayColor","isError","instance","setOptions","_createCanvasElement","_originalCanvasStyle","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","_setBrushStyles","cacheCanvasEl","wrapperEl","setViewportTransform","vpt","activeObject","_activeObject","backgroundObject","overlayObject","group","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","getElement","setupState","clearContext","clearRect","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","canvasToDrawOn","renderCanvas","isRendering","iVpt","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","globalCompositeOperation","zoomX","zoomY","_cacheCanvas","cacheTranslationX","cacheTranslationY","_renderBackgroundOrOverlay","needsVpt","moveTo","lineTo","closePath","toLive","gradientTransform","patternTransform","getCenter","centerObjectH","_centerObject","centerObjectV","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","propertiesToInclude","toDatalessObject","toObject","_toObjectMethod","_toObjects","excludeFromExport","__serializeBgOverlay","originalValue","bgImage","bgColor","overlay","sendToBack","objs","activeSelection","unshift","bringToFront","intersecting","newIdx","objsMoved","_findNewLowerIndex","intersectsWithObject","isContainedWithinObject","_findNewUpperIndex","classList","DataURLExporter","EMPTY_JSON","supports","setLineDash","createPNGStream","createJPEGStream","opts","BaseBrush","shadow","strokeLineCap","strokeDashArray","limitedToCanvasSize","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","blur","shadowOffsetX","shadowOffsetY","needsFullRender","_resetShadow","_isOutSideCanvas","PencilBrush","decimate","drawStraightLine","straightLineKey","_points","_hasStraightLine","_drawSegment","quadraticCurveTo","onMouseDown","_isMainEvent","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","convertPointsToSVGPath","_isEmptySVGPath","createPath","Path","affectStroke","Shadow","decimatePoints","adjustedDistance","lastPoint","newPoints","CircleBrush","drawDot","addPoint","dot","radius","originalRenderOnAddRemove","circles","circle","Circle","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","fillRect","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPatternSrcFunction","String","getPattern","createPattern","topLeft","_getLeftTopCoords","_initInteractive","_createCacheCanvas","centeredScaling","centeredRotation","centeredKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","containerClass","skipTargetFind","stopContextMenu","fireRightClick","fireMiddleClick","targets","enablePointerEvents","_hoveredTarget","_hoveredTargets","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_normalizePointer","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","normalizedPointer","targetRelativeX","targetRelativeY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_isSelectionKeyPressed","_shouldClearSelection","_shouldCenterTransform","action","centerTransform","_getOriginFromCorner","_getActionFromCorner","alreadySelected","_setupCurrentTransform","__corner","lastX","lastY","_beforeTransform","setCursor","cursor","selector","viewportStart","viewportExtent","extent","strokeOffset","_setLineDash","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","shouldLookForActive","_findTargetCorner","_searchPossibleTargets","_checkTarget","globalPointer","containsPoint","isEditing","subTarget","objToCheck","pointerToUse","subTargetCheck","ignoreZoom","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","retinaScaling","lowerCanvasClass","_copyCanvasStyle","getTopContext","fromEl","toEl","getSelectionContext","getSelectionElement","active","_discardActiveObject","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","oldObject","selected","deselected","currentActives","_setActiveObject","onSelect","onDeselect","removeListeners","_renderControls","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","originalValues","layoutProps","_setSVGObject","markup","clearContextTop","addEventOptions","passive","checkClick","button","mainTouchId","_bindEvents","addOrRemove","_getEventPrefix","functor","eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","_onTouchEnd","eventsBound","_simpleEventHandler","__onTransformGesture","__onDrag","__onMouseWheel","_target","hiddenTextarea","__onOrientationChange","__onShake","__onLongPress","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","getPointerId","evt","identifier","pointerId","isPrimary","touches","__onMouseDown","__onMouseUp","_willAddMouseDown","__onMouseMove","_shouldRender","groupSelector","shouldRender","isClick","_onMouseUpInDrawingMode","_finalizeCurrentTransform","targetWasActive","_maybeGroupObjects","activeOn","isMoving","originalControl","originalMouseUpHandler","_setCursorFromEvent","eventType","subTargets","absolutePointer","currentSubTargets","_scaling","hasStateChanged","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","_previousPointer","shouldGroup","_shouldGroup","_handleGrouping","saveState","_transformObject","_fireOverOutEvents","fireSyntheticInOutEvents","oldTarget","evtOut","canvasEvtOut","evtIn","canvasEvtIn","_draggedoverTarget","inOpt","outOpt","targetChanged","previousTarget","nextTarget","reset","_performTransformAction","getCornerCursor","reverse","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","groupObjects","isActiveLower","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","toCanvasElement","cropping","scaledWidth","scaledHeight","originalWidth","originalHeight","newZoom","vp","originalInteractive","originalRetina","originalContextTop","json","serialized","JSON","parse","_enlivenObjects","_setBgOverlay","enlivenedCanvasClip","__setupCanvas","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","touchCornerSize","borderDashArray","cornerDashArray","fillRule","strokeDashOffset","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","hasBorders","statefullCache","noScaleCache","dirty","paintFirst","stateProperties","cacheProperties","colorProperties","absolutePositioned","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","getHeightOfLine","setTransform","needFullTransform","_removeDefaultValues","getObjectScaling","retina","getObjectOpacity","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","drawCacheOnCanvas","_removeCacheCanvas","drawObject","propertySet","isCacheDirty","hasStroke","hasFill","needsItsOwnCache","ownCaching","willDrawShadow","drawClipPathOnCache","originalFill","originalStroke","_setClippingProperties","_drawClipPath","skipCanvas","_getNonTransformedDimensions","_removeShadow","_setStrokeStyles","decl","lineDashOffset","gradientUnits","_applyPatternForTransformedGradient","_applyPatternGradientTransform","_setFillStyles","dashArray","drawBorders","forActiveSelection","drawBordersInGroup","scaling","multX","multY","nonScaling","_renderPaintInOrder","_renderStroke","_renderFill","pCtx","pCanvas","_findCenterFromElement","_assignTransformMatrixProps","_removeTransformMatrix","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","utils","origParams","originalGroup","originalShadow","withoutTransform","withoutShadow","boundingRect","getBoundingRect","shadowOffset","originalCanvas","isType","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","createAccessors","extraParam","__uid","translateToGivenOrigin","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","oCoords","aCoords","lineCoords","ownMatrixCache","matrixCache","_getCoords","absolute","calculate","calcACoords","calcLineCoords","getCoords","pointTL","pointBR","intersection","other","otherCoords","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","allPointsAreOutside","topline","rightline","bottomline","leftline","xi","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","cosP","sinP","cosPSinP","cosPMinusSinP","calcOCoords","rotateMatrix","_calcRotateMatrix","translateMatrix","_calcTranslateMatrix","startMatrix","_calculateCurrentDimensions","forEachControl","w","skipCorners","_setCornerCoords","transformMatrixKey","prefix","cache","tMatrix","noSkew","_finalizeDimensions","originalSet","saveProps","props","tmpObj","dashedPropertySet","keys","_isEqual","origValue","firstPass","forTouch","isControlVisible","touchCorner","fn","controlObject","wh","shouldStroke","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","_animate","skipCallbacks","propsToAnimate","out","propPair","propIsColor","_options","valueProgress","timeProgress","_initRxRy","isRounded","bezierCurveTo","Polyline","exactBoundingBox","_setPositionDimensions","_projectStrokeOnPoints","correctLeftTop","calcDim","_calcDimensions","correctSize","fromSVG","commonRender","_setPath","_renderPathCommands","subpathStartX","subpathStartY","aX","aY","pathUrl","loadSVGFromURL","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","nested","_restoreObjectsState","_includeDefaultValues","objsToObject","originalDefaults","_obj","ownCache","groupMatrix","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","toGroup","newGroup","childrenOverride","srcFromAttribute","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","imageSmoothing","_initElement","_element","setElement","removeTexture","_originalElement","_initConfig","resizeFilter","applyResizeFilters","backend","filterBackend","evictCachesForKey","getCrossOrigin","getOriginalSize","naturalWidth","naturalHeight","_stroke","filterObj","getSrc","hasCrop","filtered","getAttribute","setSrc","_setWidthHeight","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","elementToDraw","elWidth","elHeight","sX","sY","sW","sH","maxDestW","maxDestH","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","preserveAspectRatio","rWidth","rHeight","pWidth","pHeight","parsedAttributes","getSvgSrc","_object","resizeFilters","imgOptions","setupGLContext","captureGPUInfo","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","testPrecision","precision","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","webGlPrecision","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","startTime","drawImageTime","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","copyGLTo2D","testContext","now","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","sourceTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","renderer","vendor","ext","getExtension","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","fragmentSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","main","mainParameter","_class","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","Brightness","brightness","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","useAlpha","lowC","highC","uLow","uHigh","matrices","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","doneW","doneH","stepW","stepH","dX","dY","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","weight","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","yy","w0","Contrast","contrast","contrastF","uContrast","Saturation","saturation","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","HueRotation","rotation","rad","aThird","aThirdSqtSin","OneMinusCos","additionalProps","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","lineHeight","superscript","baseline","subscript","textBackgroundColor","pathStartOffset","pathSide","pathAlign","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","direction","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","setPathInfo","initDimensions","segmentsInfo","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","missingNewlineOffset","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","font","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","drawStart","leftOffset","_getLeftOffset","lineTopOffset","_getTopOffset","boxStart","boxWidth","_getLineLeftOffset","getValueOfPropertyAt","renderLeft","getFontCache","cacheProp","_measureChar","_char","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","startingPoint","totalPathLength","lineBounds","positionInPath","_getGraphemeBox","_setGraphemeOnPath","numOfSpaces","centerPosition","skipLeft","getCompleteStyleDeclaration","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","drawingLeft","isJustify","charsToRender","shortCut","isLtr","currentDirection","_renderChar","_applyPatternGradientTransformText","handleFiller","fillOffsets","strokeOffsets","_getStyleDeclaration","fullDecl","shouldFill","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","lineDiff","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","topOffset","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","allProperties","needsDims","isAddingPath","objectCopy","textInstance","pathInstance","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","complete","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","scaleSkewStyleHandler","scaleStyleHandler","objectControls","ml","mr","mb","mtr","Textbox","textBoxControls","getSvgCommons","_createBaseClipPathSVGMarkup","_createBaseSVGMarkup","erasable","eraser","_addEraserPathToObjects","EraserBrush","_addPathToObjectEraser","applyEraserToObjects","originalTransform","_clipPath","eraserPath","applyClipPathToPath","Eraser","isErasing","_isErasing","_isErasable","_prepareCollectionTraversal","collection","restorationContext","preparePattern","_patternCanvas","bgErasable","overlayErasable","clipPathContainerTransformMatrix","pathInvTransform","clipPathTransform","clonePathWithClipPath","objTransform","_path","desiredTransform","__subTargets","applyEraserToCanvas","drawables","drawable","O","_N_E"],"sourceRoot":""}