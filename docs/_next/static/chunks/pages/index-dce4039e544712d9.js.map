{"version":3,"file":"static/chunks/pages/index-dce4039e544712d9.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/useCanvas.ts","webpack://_N_E/./src/useTools.ts","webpack://_N_E/./src/CanvasTools.tsx","webpack://_N_E/./src/useWarrior.ts","webpack://_N_E/./src/fabricUtils.ts","webpack://_N_E/./src/imageProcessing.worker.ts","webpack://_N_E/./src/useImageWorker.ts","webpack://_N_E/./src/useSettings.ts","webpack://_N_E/./src/imageUtils.ts","webpack://_N_E/./src/ToolsProvider.tsx","webpack://_N_E/./src/CanvasBackdrop.tsx","webpack://_N_E/./src/CanvasProvider.tsx","webpack://_N_E/./src/CanvasInteractions.tsx","webpack://_N_E/./src/CanvasToggle.tsx","webpack://_N_E/./src/WarriorSelector.tsx","webpack://_N_E/./src/WarriorProvider.tsx","webpack://_N_E/./src/useEnvironment.ts","webpack://_N_E/./src/useSkin.ts","webpack://_N_E/./src/Material.tsx","webpack://_N_E/./src/Materials.tsx","webpack://_N_E/./src/WarriorViewer.tsx","webpack://_N_E/./src/EnvironmentSelector.tsx","webpack://_N_E/./src/AnimationSelector.tsx","webpack://_N_E/./src/EnvironmentProvider.tsx","webpack://_N_E/./src/SkinProvider.tsx","webpack://_N_E/./src/MaterialSelector.tsx","webpack://_N_E/./src/Canvas.tsx","webpack://_N_E/./src/useImageLoader.ts","webpack://_N_E/./src/ColorCanvas.tsx","webpack://_N_E/./src/MetallicCanvas.tsx","webpack://_N_E/./src/MaterialCanvases.tsx","webpack://_N_E/./src/ImageLoaderProvider.tsx","webpack://_N_E/./src/pages/index.tsx","webpack://_N_E/./src/useModelViewer.ts","webpack://_N_E/./vendor/fabric/fabric.js","webpack://_N_E/ignored|C:\\Users\\exoge\\Projects\\t2-model-skinner\\vendor\\fabric|jsdom","webpack://_N_E/ignored|C:\\Users\\exoge\\Projects\\t2-model-skinner\\vendor\\fabric|jsdom/lib/jsdom/living/generated/utils","webpack://_N_E/ignored|C:\\Users\\exoge\\Projects\\t2-model-skinner\\vendor\\fabric|jsdom/lib/jsdom/utils","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import React, { useContext } from \"react\";\r\nimport { fabric } from \"fabric\";\r\n\r\nexport interface CanvasInfo {\r\n  canvas: fabric.Canvas;\r\n  notifyChange: () => void;\r\n  isDrawingMode: boolean;\r\n  setDrawingMode: (isDrawingMode: boolean) => void;\r\n  undo: () => void;\r\n  redo: () => void;\r\n  canUndo: boolean;\r\n  canRedo: boolean;\r\n}\r\n\r\ninterface CanvasContextValue {\r\n  canvases: Record<string, CanvasInfo>;\r\n  registerCanvas: (canvasId: string, canvasInfo: CanvasInfo) => void;\r\n  unregisterCanvas: (canvasId: string) => void;\r\n}\r\n\r\nconst CanvasContext = React.createContext<CanvasContextValue | null>(null);\r\nCanvasContext.displayName = \"CanvasContext\";\r\n\r\nexport { CanvasContext };\r\n\r\nfunction useCanvas(canvasId: string | null): CanvasInfo;\r\nfunction useCanvas(): CanvasContextValue;\r\n\r\nfunction useCanvas(canvasId?: string | null) {\r\n  const context = useContext(CanvasContext);\r\n  if (!context) {\r\n    throw new Error(\"No CanvasContext.Provider\");\r\n  }\r\n  if (typeof canvasId === \"undefined\") {\r\n    return context;\r\n  } else if (canvasId == null) {\r\n    return {};\r\n  } else {\r\n    return context.canvases[canvasId] ?? {};\r\n  }\r\n}\r\n\r\nexport default useCanvas;\r\n","import React, { useContext } from \"react\";\r\nimport { fabric } from \"fabric\";\r\n\r\ninterface ToolsContextValue {\r\n  activeCanvas: string | null;\r\n  activeCanvasType: string;\r\n  setActiveCanvasType: (canvasType: string) => void;\r\n  selectedObjects: Array<fabric.Object>;\r\n  brushSize: number;\r\n  setBrushSize: (brushSize: number) => void;\r\n  brushColor: number;\r\n  setBrushColor: (brushColor: number) => void;\r\n  hueRotate: number | null;\r\n  setHueRotate: (hueRotate: number) => void;\r\n  saturation: number | null;\r\n  setSaturation: (saturation: number) => void;\r\n  brightness: number | null;\r\n  setBrightness: (brightness: number) => void;\r\n  deleteSelection: () => void;\r\n  undo: () => void;\r\n  redo: () => void;\r\n  canUndo: boolean;\r\n  canRedo: boolean;\r\n  addImages: (imageUrls: string[]) => void;\r\n  duplicate: () => void;\r\n  sendBackward: () => void;\r\n  bringForward: () => void;\r\n  lockSelection: () => void;\r\n  unlockSelection: () => void;\r\n  exportSkin: ({\r\n    name,\r\n    format,\r\n  }: {\r\n    name: string;\r\n    format: string;\r\n  }) => Promise<void>;\r\n  lockedObjects: Set<fabric.Object>;\r\n  backgroundColor: string;\r\n  setBackgroundColor: (backgroundColor: string) => void;\r\n  selectedMaterialIndex: number;\r\n  setSelectedMaterialIndex: (materialIndex: number) => void;\r\n  textureSize: [number, number];\r\n  hasMetallic: boolean;\r\n}\r\n\r\nconst ToolsContext = React.createContext<ToolsContextValue | null>(null);\r\nToolsContext.displayName = \"ToolsContext\";\r\n\r\nexport { ToolsContext };\r\n\r\nexport default function useTools() {\r\n  const context = useContext(ToolsContext);\r\n  if (!context) {\r\n    throw new Error(\"No ToolsContext.Provider\");\r\n  }\r\n  return context;\r\n}\r\n","import { InputHTMLAttributes, useEffect, useRef, useState } from \"react\";\r\nimport useCanvas from \"./useCanvas\";\r\nimport useTools from \"./useTools\";\r\nimport { usePopper } from \"react-popper\";\r\nimport Slider from \"rc-slider\";\r\nimport { RiFileCopyFill } from \"react-icons/ri\";\r\nimport { FaTrashAlt, FaLock, FaUnlock } from \"react-icons/fa\";\r\nimport { GoArrowUp, GoArrowDown } from \"react-icons/go\";\r\nimport { GiArrowCursor } from \"react-icons/gi\";\r\nimport { IoMdBrush } from \"react-icons/io\";\r\nimport { ImPlus, ImUndo2, ImRedo2, ImContrast } from \"react-icons/im\";\r\n\r\nexport default function CanvasTools() {\r\n  const nameInputRef = useRef<HTMLInputElement | null>(null);\r\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n  const fileTypeRef = useRef<HTMLSelectElement | null>(null);\r\n  const {\r\n    activeCanvas,\r\n    backgroundColor,\r\n    setBackgroundColor,\r\n    selectedObjects,\r\n    lockedObjects,\r\n    lockSelection,\r\n    unlockSelection,\r\n    bringForward,\r\n    sendBackward,\r\n    duplicate,\r\n    deleteSelection,\r\n    undo,\r\n    redo,\r\n    canUndo,\r\n    canRedo,\r\n    brushColor,\r\n    setBrushColor,\r\n    brushSize,\r\n    setBrushSize,\r\n    hueRotate,\r\n    setHueRotate,\r\n    saturation,\r\n    setSaturation,\r\n    brightness,\r\n    setBrightness,\r\n    activeCanvasType,\r\n    addImages,\r\n    exportSkin,\r\n  } = useTools();\r\n  const { isDrawingMode, setDrawingMode } = useCanvas(activeCanvas);\r\n  const [isMac, setIsMac] = useState(false);\r\n  const commandKeyPrefix = isMac ? \"⌘\" : \"Ctrl \";\r\n  const shiftKeySymbol = \"⇧\";\r\n\r\n  // Brush popup\r\n  const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(\r\n    null\r\n  );\r\n  const [popperElement, setPopperElement] = useState<HTMLElement | null>(null);\r\n  const [arrowElement, setArrowElement] = useState<HTMLElement | null>(null);\r\n  const [isBrushToolsOpen, setBrushToolsOpen] = useState(false);\r\n  const [isFilterToolsOpen, setFilterToolsOpen] = useState(false);\r\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n    modifiers: [\r\n      { name: \"arrow\", options: { element: arrowElement } },\r\n      {\r\n        name: \"offset\",\r\n        options: {\r\n          offset: [0, 10],\r\n        },\r\n      },\r\n    ],\r\n  });\r\n\r\n  if (isFilterToolsOpen && !selectedObjects.length) {\r\n    setFilterToolsOpen(false);\r\n  }\r\n\r\n  const isSelectionLocked = selectedObjects.length\r\n    ? selectedObjects.every((object) => lockedObjects.has(object))\r\n    : false;\r\n\r\n  const handleBackgroundColorChange: InputHTMLAttributes<HTMLInputElement>[\"onChange\"] =\r\n    (event) => {\r\n      setBackgroundColor(event.target.value);\r\n    };\r\n\r\n  useEffect(() => {\r\n    if (navigator.platform && navigator.platform.startsWith(\"Mac\")) {\r\n      setIsMac(true);\r\n    } else if (navigator.userAgent.match(/\\(Macintosh;/)) {\r\n      setIsMac(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (popperElement) {\r\n      popperElement.focus();\r\n    }\r\n  }, [popperElement]);\r\n\r\n  return (\r\n    <div className=\"CanvasTools\">\r\n      <div className=\"CanvasBackgroundColor\">\r\n        <input\r\n          className=\"ColorSwatch\"\r\n          type=\"radio\"\r\n          name=\"backgroundColor\"\r\n          id=\"canvasBackgroundColorBlack\"\r\n          value=\"black\"\r\n          checked={backgroundColor === \"black\"}\r\n          onChange={handleBackgroundColorChange}\r\n        />\r\n        <label htmlFor=\"canvasBackgroundColorBlack\">\r\n          <span className=\"HiddenLabel\">Black</span>\r\n        </label>\r\n        <input\r\n          className=\"ColorSwatch\"\r\n          type=\"radio\"\r\n          name=\"backgroundColor\"\r\n          id=\"canvasBackgroundColorMagenta\"\r\n          value=\"magenta\"\r\n          checked={backgroundColor === \"magenta\"}\r\n          onChange={handleBackgroundColorChange}\r\n        />\r\n        <label htmlFor=\"canvasBackgroundColorMagenta\">\r\n          <span className=\"HiddenLabel\">Magenta</span>\r\n        </label>\r\n        <input\r\n          className=\"ColorSwatch\"\r\n          type=\"radio\"\r\n          name=\"backgroundColor\"\r\n          id=\"canvasBackgroundColorWhite\"\r\n          value=\"white\"\r\n          checked={backgroundColor === \"white\"}\r\n          onChange={handleBackgroundColorChange}\r\n        />\r\n        <label htmlFor=\"canvasBackgroundColorWhite\">\r\n          <span className=\"HiddenLabel\">White</span>\r\n        </label>\r\n      </div>\r\n      <div className=\"Buttons\">\r\n        {activeCanvasType === \"color\" ? (\r\n          <>\r\n            <input\r\n              ref={fileInputRef}\r\n              onChange={async (event) => {\r\n                const imageUrl = await new Promise<string>(\r\n                  (resolve, reject) => {\r\n                    const inputFile = event.target.files?.[0];\r\n                    if (inputFile) {\r\n                      const reader = new FileReader();\r\n                      reader.addEventListener(\"load\", (event) => {\r\n                        resolve(event.target?.result as string);\r\n                      });\r\n                      reader.readAsDataURL(inputFile);\r\n                    } else {\r\n                      reject(new Error(\"No input file provided.\"));\r\n                    }\r\n                  }\r\n                );\r\n                addImages([imageUrl]);\r\n              }}\r\n              type=\"file\"\r\n              accept=\".png, image/png\"\r\n              hidden\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Add Image\"\r\n              title=\"Add Image\"\r\n              onClick={() => {\r\n                if (fileInputRef.current) {\r\n                  fileInputRef.current.click();\r\n                }\r\n              }}\r\n            >\r\n              <ImPlus style={{ fontSize: 14 }} />\r\n            </button>\r\n\r\n            <button\r\n              type=\"button\"\r\n              ref={setReferenceElement}\r\n              data-active={isFilterToolsOpen ? \"\" : undefined}\r\n              disabled={!selectedObjects.length}\r\n              aria-label=\"Filters\"\r\n              title=\"Filters\"\r\n              onClick={() => {\r\n                setFilterToolsOpen((isOpen) => !isOpen);\r\n              }}\r\n            >\r\n              <ImContrast />\r\n            </button>\r\n\r\n            {isFilterToolsOpen ? (\r\n              <div\r\n                className=\"BrushToolsPopup\"\r\n                ref={setPopperElement}\r\n                style={styles.popper}\r\n                tabIndex={-1}\r\n                onBlur={(event) => {\r\n                  const newFocusElement = event.relatedTarget;\r\n                  const isFocusLeaving =\r\n                    !newFocusElement ||\r\n                    !event.currentTarget.contains(newFocusElement);\r\n                  if (isFocusLeaving) {\r\n                    setFilterToolsOpen(false);\r\n                  }\r\n                }}\r\n                {...attributes.popper}\r\n              >\r\n                <div className=\"Fields\">\r\n                  <div className=\"Field\">\r\n                    <label>\r\n                      Hue:{\" \"}\r\n                      <strong>\r\n                        {hueRotate == null ? (\r\n                          \"MULTIPLE VALUES\"\r\n                        ) : (\r\n                          <>{Math.round(hueRotate * 180)}&deg;</>\r\n                        )}\r\n                      </strong>\r\n                    </label>\r\n                    <div className=\"SliderContainer\">\r\n                      <Slider\r\n                        min={-180}\r\n                        max={180}\r\n                        startPoint={0}\r\n                        value={Math.round((hueRotate ?? 0) * 180)}\r\n                        onChange={(value) => {\r\n                          if (Array.isArray(value)) {\r\n                            value = value[0];\r\n                          }\r\n                          setHueRotate(value / 180);\r\n                        }}\r\n                        trackStyle={{\r\n                          height: 8,\r\n                          background: \"#03fccf\",\r\n                        }}\r\n                        handleStyle={{\r\n                          width: 20,\r\n                          height: 20,\r\n                          marginTop: -6,\r\n                          borderColor: \"#03fccf\",\r\n                          background: \"rgb(5, 69, 76)\",\r\n                          // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\r\n                          opacity: 1,\r\n                        }}\r\n                        railStyle={{\r\n                          height: 8,\r\n                          border: \"1px solid #555\",\r\n                          background: \"rgba(255, 255, 255, 0.3)\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"Field\">\r\n                    <label>\r\n                      Saturation:{\" \"}\r\n                      <strong>\r\n                        {saturation == null\r\n                          ? \"MULTIPLE VALUES\"\r\n                          : `${Math.round(saturation * 100 + 100)}%`}\r\n                      </strong>\r\n                    </label>\r\n                    <div className=\"SliderContainer\">\r\n                      <Slider\r\n                        min={-100}\r\n                        max={100}\r\n                        startPoint={0}\r\n                        value={Math.round((saturation ?? 0) * 100)}\r\n                        onChange={(value) => {\r\n                          if (Array.isArray(value)) {\r\n                            value = value[0];\r\n                          }\r\n                          setSaturation(value / 100);\r\n                        }}\r\n                        trackStyle={{\r\n                          height: 8,\r\n                          background: \"#03fccf\",\r\n                        }}\r\n                        handleStyle={{\r\n                          width: 20,\r\n                          height: 20,\r\n                          marginTop: -6,\r\n                          borderColor: \"#03fccf\",\r\n                          background: \"rgb(5, 69, 76)\",\r\n                          // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\r\n                          opacity: 1,\r\n                        }}\r\n                        railStyle={{\r\n                          height: 8,\r\n                          border: \"1px solid #555\",\r\n                          background: \"rgba(255, 255, 255, 0.3)\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"Field\">\r\n                    <label>\r\n                      Brightness:{\" \"}\r\n                      <strong>\r\n                        {brightness == null\r\n                          ? \"MULTIPLE VALUES\"\r\n                          : `${Math.round(brightness * 100 + 100)}%`}\r\n                      </strong>\r\n                    </label>\r\n                    <div className=\"SliderContainer\">\r\n                      <Slider\r\n                        min={-100}\r\n                        max={100}\r\n                        startPoint={0}\r\n                        value={Math.round((brightness ?? 0) * 100)}\r\n                        onChange={(value) => {\r\n                          if (Array.isArray(value)) {\r\n                            value = value[0];\r\n                          }\r\n                          setBrightness(value / 100);\r\n                        }}\r\n                        trackStyle={{\r\n                          height: 8,\r\n                          background: \"#03fccf\",\r\n                        }}\r\n                        handleStyle={{\r\n                          width: 20,\r\n                          height: 20,\r\n                          marginTop: -6,\r\n                          borderColor: \"#03fccf\",\r\n                          background: \"rgb(5, 69, 76)\",\r\n                          // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\r\n                          opacity: 1,\r\n                        }}\r\n                        railStyle={{\r\n                          height: 8,\r\n                          border: \"1px solid #555\",\r\n                          background: \"rgba(255, 255, 255, 0.3)\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"PopupArrow\"\r\n                  ref={setArrowElement}\r\n                  style={styles.arrow}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            <button\r\n              type=\"button\"\r\n              aria-label={isSelectionLocked ? \"Unlock\" : \"Lock\"}\r\n              title={isSelectionLocked ? \"Unlock (L)\" : \"Lock (L)\"}\r\n              onClick={isSelectionLocked ? unlockSelection : lockSelection}\r\n              data-locked={isSelectionLocked ? \"\" : undefined}\r\n            >\r\n              {isSelectionLocked ? (\r\n                <FaUnlock style={{ fontSize: 14 }} />\r\n              ) : (\r\n                <FaLock style={{ fontSize: 14 }} />\r\n              )}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Bring Forward\"\r\n              title=\"Bring Forward (F)\"\r\n              onClick={bringForward}\r\n            >\r\n              <GoArrowUp style={{ fontSize: 22 }} />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Send Backward\"\r\n              title=\"Send Backward (B)\"\r\n              onClick={sendBackward}\r\n            >\r\n              <GoArrowDown style={{ fontSize: 22 }} />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Duplicate\"\r\n              title=\"Duplicate (D)\"\r\n              onClick={duplicate}\r\n            >\r\n              <RiFileCopyFill />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Delete\"\r\n              title=\"Delete (Backspace)\"\r\n              onClick={deleteSelection}\r\n              disabled={isSelectionLocked}\r\n            >\r\n              <FaTrashAlt />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Undo\"\r\n              title={`Undo (${commandKeyPrefix}Z)`}\r\n              onClick={undo}\r\n              disabled={!canUndo}\r\n            >\r\n              <ImUndo2 />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              aria-label=\"Redo\"\r\n              title={`Redo (${\r\n                isMac\r\n                  ? `${shiftKeySymbol}${commandKeyPrefix}Z)`\r\n                  : `${commandKeyPrefix} Y`\r\n              }`}\r\n              onClick={redo}\r\n              disabled={!canRedo}\r\n            >\r\n              <ImRedo2 />\r\n            </button>\r\n          </>\r\n        ) : null}\r\n\r\n        {activeCanvasType === \"metallic\" ? (\r\n          <>\r\n            <button\r\n              type=\"button\"\r\n              data-active={isDrawingMode ? undefined : \"\"}\r\n              aria-label=\"Select\"\r\n              title=\"Select (S)\"\r\n              onClick={() => {\r\n                setDrawingMode(false);\r\n              }}\r\n            >\r\n              <GiArrowCursor />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              ref={setReferenceElement}\r\n              data-active={isDrawingMode ? \"\" : undefined}\r\n              aria-label=\"Paint\"\r\n              title=\"Paint (P)\"\r\n              onClick={() => {\r\n                setDrawingMode(true);\r\n                setBrushToolsOpen((isOpen) => !isOpen);\r\n              }}\r\n            >\r\n              <IoMdBrush />\r\n            </button>\r\n\r\n            {isBrushToolsOpen ? (\r\n              <div\r\n                className=\"BrushToolsPopup\"\r\n                ref={setPopperElement}\r\n                style={styles.popper}\r\n                tabIndex={-1}\r\n                onBlur={(event) => {\r\n                  const newFocusElement = event.relatedTarget;\r\n                  const isFocusLeaving =\r\n                    !newFocusElement ||\r\n                    !event.currentTarget.contains(newFocusElement);\r\n                  if (isFocusLeaving) {\r\n                    setBrushToolsOpen(false);\r\n                  }\r\n                }}\r\n                {...attributes.popper}\r\n              >\r\n                <div className=\"Fields\">\r\n                  <div className=\"Field\">\r\n                    <label>Metallic Amount</label>\r\n                    <div className=\"SliderContainer\">\r\n                      <Slider\r\n                        min={0}\r\n                        max={255}\r\n                        trackStyle={{\r\n                          display: \"none\",\r\n                        }}\r\n                        value={brushColor}\r\n                        onChange={(value) => {\r\n                          if (Array.isArray(value)) {\r\n                            value = value[0];\r\n                          }\r\n                          setBrushColor(value);\r\n                        }}\r\n                        handleStyle={{\r\n                          width: 20,\r\n                          height: 20,\r\n                          marginTop: -6,\r\n                          borderColor: \"rgb(20, 105, 241)\",\r\n                          background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\r\n                          opacity: 1,\r\n                        }}\r\n                        railStyle={{\r\n                          height: 8,\r\n                          border: \"1px solid #555\",\r\n                          background:\r\n                            \"linear-gradient(to right, black 0%, white 100%)\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"Field\">\r\n                    <label>Brush Size</label>\r\n                    <div className=\"SliderContainer\">\r\n                      <Slider\r\n                        min={1}\r\n                        max={50}\r\n                        trackStyle={{\r\n                          height: 8,\r\n                          background: \"#03fccf\",\r\n                        }}\r\n                        value={brushSize}\r\n                        onChange={(value) => {\r\n                          if (Array.isArray(value)) {\r\n                            value = value[0];\r\n                          }\r\n                          setBrushSize(value);\r\n                        }}\r\n                        handleStyle={{\r\n                          width: 20,\r\n                          height: 20,\r\n                          marginTop: -6,\r\n                          borderColor: \"#03fccf\",\r\n                          background: \"rgb(5, 69, 76)\",\r\n                          // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\r\n                          opacity: 1,\r\n                        }}\r\n                        railStyle={{\r\n                          height: 8,\r\n                          border: \"1px solid #555\",\r\n                          background: \"rgba(255, 255, 255, 0.3)\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div\r\n                  className=\"PopupArrow\"\r\n                  ref={setArrowElement}\r\n                  style={styles.arrow}\r\n                />\r\n              </div>\r\n            ) : null}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"Export\">\r\n        <input\r\n          ref={nameInputRef}\r\n          type=\"text\"\r\n          name=\"CustomSkinName\"\r\n          placeholder=\"Skin Name\"\r\n          size={12}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            const name = nameInputRef.current ? nameInputRef.current.value : \"\";\r\n            const format = fileTypeRef.current\r\n              ? fileTypeRef.current.value\r\n              : \".png\";\r\n            exportSkin({ name, format });\r\n          }}\r\n        >\r\n          Export\r\n        </button>\r\n        <select ref={fileTypeRef}>\r\n          <option value=\"png\">.png</option>\r\n          <option value=\"vl2\">.vl2</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\ntype WarriorContextValue = {\r\n  actualModel: string;\r\n  selectedModel: string;\r\n  setSelectedModel: (selectedModel: string) => void;\r\n  selectedModelType: string;\r\n  selectedAnimation: string | null;\r\n  selectedModelUrl: string;\r\n  setSelectedAnimation: (selectedAnimation: string | null) => void;\r\n  animationPaused: boolean;\r\n  setAnimationPaused: (\r\n    animationPaused: boolean | ((animationPaused: boolean) => boolean)\r\n  ) => void;\r\n  skinImageUrls: Record<string, string>;\r\n  defaultSkinImageUrls: Record<string, string>;\r\n  setSkinImageUrls: (\r\n    value:\r\n      | Record<string, string>\r\n      | ((prevSkinImageUrls: Record<string, string>) => Record<string, string>)\r\n  ) => void;\r\n  selectedSkinType: string | null;\r\n  setSelectedSkinType: (selectedSkinType: string | null) => void;\r\n  selectedSkin: string | null;\r\n  setSelectedSkin: (selectedSkin: string | null) => void;\r\n  setSelectedModelType: (selectedModelType: string) => void;\r\n};\r\n\r\nconst WarriorContext = React.createContext<WarriorContextValue | null>(null);\r\nWarriorContext.displayName = \"WarriorContext\";\r\n\r\nexport { WarriorContext };\r\n\r\nexport default function useWarrior() {\r\n  const context = useContext(WarriorContext);\r\n  if (!context) {\r\n    throw new Error(\"No WarriorContext.Provider\");\r\n  }\r\n  return context;\r\n}\r\n","import { fabric } from \"fabric\";\r\n\r\nexport function createFabricImage(url: string) {\r\n  return new Promise<fabric.Image>((resolve) =>\r\n    fabric.Image.fromURL(url, resolve, {\r\n      crossOrigin: \"anonymous\",\r\n    })\r\n  );\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/chunks/imageProcessing.worker-ec557200a46215b3.worker.js\");\n}\n","import { useEffect, useMemo, useRef } from \"react\";\r\nimport * as Comlink from \"comlink\";\r\nimport Worker from \"worker-loader!./imageProcessing.worker\";\r\nimport type { ImageFunctions } from \"./imageProcessing.worker\";\r\n\r\nexport default function useImageWorker() {\r\n  const workerRef = useRef<Worker | null>(null);\r\n  const functionsRef = useRef<ReturnType<\r\n    typeof Comlink.wrap<ImageFunctions>\r\n  > | null>(null);\r\n\r\n  const value = useMemo(() => {\r\n    const getFunctions = () => {\r\n      return functionsRef.current;\r\n    };\r\n    return {\r\n      async combineColorAndAlphaImageUrls(...args) {\r\n        const functions = await getFunctions();\r\n        return functions?.combineColorAndAlphaImageUrls(...args);\r\n      },\r\n      async removeAlphaFromArrayBuffer(...args) {\r\n        const functions = await getFunctions();\r\n        return functions?.removeAlphaFromArrayBuffer(...args);\r\n      },\r\n      async convertArrayBufferAlphaToGrayscale(...args) {\r\n        const functions = await getFunctions();\r\n        return functions?.convertArrayBufferAlphaToGrayscale(...args);\r\n      },\r\n      async convertGrayscaleImageUrlToMetallicRoughness(...args) {\r\n        const functions = await getFunctions();\r\n        return functions?.convertGrayscaleImageUrlToMetallicRoughness(...args);\r\n      },\r\n    } as ImageFunctions;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const worker = new Worker();\r\n    const functions = Comlink.wrap<ImageFunctions>(worker);\r\n\r\n    workerRef.current = worker;\r\n    functionsRef.current = functions;\r\n\r\n    return () => {\r\n      functions[Comlink.releaseProxy]();\r\n      worker.terminate();\r\n    };\r\n  }, []);\r\n\r\n  return value;\r\n}\r\n","export default function useSettings() {\r\n  return {\r\n    canvasPadding: 64,\r\n    basePath: process.env.NODE_ENV === \"production\" ? \"/t2-model-skinner\" : \"\",\r\n  };\r\n}\r\n","import { PNG } from \"pngjs/browser\";\r\nimport getStream from \"get-stream\";\r\n\r\nexport function arrayBufferToBase64(arrayBuffer: ArrayBuffer) {\r\n  let base64 = \"\";\r\n  const encodings =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n  const bytes = new Uint8Array(arrayBuffer);\r\n  const byteLength = bytes.byteLength;\r\n  const byteRemainder = byteLength % 3;\r\n  const mainLength = byteLength - byteRemainder;\r\n\r\n  let a, b, c, d;\r\n  let chunk;\r\n\r\n  // Main loop deals with bytes in chunks of 3\r\n  for (let i = 0; i < mainLength; i = i + 3) {\r\n    // Combine the three bytes into a single integer\r\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\r\n\r\n    // Use bitmasks to extract 6-bit segments from the triplet\r\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\r\n    b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12\r\n    c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6\r\n    d = chunk & 63; // 63 = 2^6 - 1\r\n\r\n    // Convert the raw binary segments to the appropriate ASCII encoding\r\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\r\n  }\r\n\r\n  // Deal with the remaining bytes and padding\r\n  if (byteRemainder == 1) {\r\n    chunk = bytes[mainLength];\r\n\r\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\r\n\r\n    // Set the 4 least significant bits to zero\r\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\r\n\r\n    base64 += encodings[a] + encodings[b] + \"==\";\r\n  } else if (byteRemainder == 2) {\r\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\r\n\r\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\r\n    b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4\r\n\r\n    // Set the 2 least significant bits to zero\r\n    c = (chunk & 15) << 2; // 15 = 2^4 - 1\r\n\r\n    base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\r\n  }\r\n\r\n  return base64;\r\n}\r\n\r\nexport async function rgbaToArrayBuffer(\r\n  rgba: Uint8Array,\r\n  {\r\n    width,\r\n    height,\r\n  }: {\r\n    width: number;\r\n    height: number;\r\n  }\r\n) {\r\n  const png = new PNG({\r\n    width,\r\n    height,\r\n    inputHasAlpha: true,\r\n  });\r\n  png.data = rgba;\r\n  png.pack();\r\n  const arrayBuffer = await getStream.buffer(png);\r\n  return arrayBuffer;\r\n}\r\n\r\nexport function arrayBufferToImageUrl(arrayBuffer: ArrayBuffer) {\r\n  const base64 = arrayBufferToBase64(arrayBuffer);\r\n  return `data:image/png;base64,${base64}`;\r\n}\r\n\r\nexport async function imageUrlToArrayBuffer(url: string) {\r\n  const response = await fetch(url);\r\n  if (response.ok) {\r\n    const arrayBuffer = await response.arrayBuffer();\r\n    return arrayBuffer;\r\n  } else {\r\n    throw new Error(`Failed to load image URL: ${url}`);\r\n  }\r\n}\r\n\r\nexport async function arrayBufferToRgba(arrayBuffer: ArrayBuffer) {\r\n  const png = await new Promise<PNG>((resolve, reject) =>\r\n    new PNG().parse(arrayBuffer, (err, data) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    })\r\n  );\r\n  return { rgba: png.data, width: png.width, height: png.height };\r\n}\r\n\r\nexport async function setGrayscaleFromAlpha(rgba: Uint8Array) {\r\n  const length = rgba.length;\r\n  for (let i = 0; i < length; i += 4) {\r\n    const alpha = rgba[i + 3];\r\n    rgba[i] = alpha;\r\n    rgba[i + 1] = alpha;\r\n    rgba[i + 2] = alpha;\r\n    rgba[i + 3] = 255;\r\n  }\r\n}\r\n\r\nexport async function setAlphaFromGrayscale(\r\n  rgba: Uint8Array,\r\n  grayscaleRgba: Uint8Array\r\n) {\r\n  const length = rgba.length;\r\n  // Modify image to map white pixels on the metallic canvas\r\n  // to the alpha channel.\r\n  for (let i = 0; i < length; i += 4) {\r\n    rgba[i + 3] = Math.max(1, grayscaleRgba[i]);\r\n  }\r\n}\r\n\r\nexport async function setAlphaToMax(rgba: Uint8Array) {\r\n  const length = rgba.length;\r\n  for (let i = 0; i < length; i += 4) {\r\n    rgba[i + 3] = 255;\r\n  }\r\n}\r\n\r\nexport function setMetallicFromGrayscale(rgba: Uint8Array) {\r\n  const length = rgba.length;\r\n  for (let i = 0; i < length; i += 4) {\r\n    const grayscale = rgba[i];\r\n    // Red meanings nothing, set to 0.\r\n    rgba[i] = 0;\r\n    // Green maps to roughness. We want more metallic to be less rough.\r\n    rgba[i + 1] = grayscale > 0 ? 255 - Math.min(grayscale * 2 + 64, 255) : 255;\r\n    // Blue and alpha values should already be correct.\r\n    rgba[i + 2] = grayscale ? Math.min(grayscale * 1 + 64, 255) : 0;\r\n  }\r\n}\r\n\r\nexport async function imageUrlToRgba(imageUrl: string) {\r\n  const arrayBuffer = await imageUrlToArrayBuffer(imageUrl);\r\n  const { rgba, width, height } = await arrayBufferToRgba(arrayBuffer);\r\n  return { rgba, width, height };\r\n}\r\n\r\ntype ImageSize = {\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\nexport async function rgbaToImageUrl(\r\n  rgba: Uint8Array,\r\n  { width, height }: ImageSize\r\n) {\r\n  const arrayBuffer = await rgbaToArrayBuffer(rgba, {\r\n    width,\r\n    height,\r\n  });\r\n  const imageUrl = arrayBufferToImageUrl(arrayBuffer);\r\n  return imageUrl;\r\n}\r\n\r\nexport async function combineColorAndAlphaImageUrls({\r\n  colorImageUrl,\r\n  metallicImageUrl,\r\n}: {\r\n  colorImageUrl: string;\r\n  metallicImageUrl: string;\r\n}) {\r\n  const [{ rgba, width, height }, { rgba: metallicRgba }] = await Promise.all([\r\n    imageUrlToRgba(colorImageUrl),\r\n    imageUrlToRgba(metallicImageUrl),\r\n  ]);\r\n  setAlphaFromGrayscale(rgba, metallicRgba);\r\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\r\n  return outputImageUrl;\r\n}\r\n\r\nexport async function removeAlphaFromArrayBuffer(arrayBuffer: ArrayBuffer) {\r\n  const { rgba, width, height } = await arrayBufferToRgba(arrayBuffer);\r\n  setAlphaToMax(rgba);\r\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\r\n  return outputImageUrl;\r\n}\r\n\r\nexport async function convertArrayBufferAlphaToGrayscale(\r\n  arrayBuffer: ArrayBuffer\r\n) {\r\n  const { rgba, width, height } = await arrayBufferToRgba(arrayBuffer);\r\n  setGrayscaleFromAlpha(rgba);\r\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\r\n  return outputImageUrl;\r\n}\r\n\r\nexport async function convertGrayscaleImageUrlToMetallicRoughness(\r\n  imageUrl: string\r\n) {\r\n  const { rgba, width, height } = await imageUrlToRgba(imageUrl);\r\n  setMetallicFromGrayscale(rgba);\r\n  const outputImageUrl = await rgbaToImageUrl(rgba, { width, height });\r\n  return outputImageUrl;\r\n}\r\n","import { ReactNode, useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport getConfig from \"next/config\";\r\nimport { fabric } from \"fabric\";\r\nimport { ToolsContext } from \"./useTools\";\r\nimport useCanvas from \"./useCanvas\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport { createFabricImage } from \"./fabricUtils\";\r\nimport useImageWorker from \"./useImageWorker\";\r\nimport { MaterialDefinition } from \"./Material\";\r\nimport useSettings from \"./useSettings\";\r\nimport { imageUrlToArrayBuffer } from \"./imageUtils\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst { materials } = publicRuntimeConfig;\r\n\r\nfunction lockObject(object: fabric.Object) {\r\n  object.lockMovementX = true;\r\n  object.lockMovementY = true;\r\n  object.lockScalingX = true;\r\n  object.lockScalingY = true;\r\n  object.lockRotation = true;\r\n}\r\n\r\nfunction unlockObject(object: fabric.Object) {\r\n  object.lockMovementX = false;\r\n  object.lockMovementY = false;\r\n  object.lockScalingX = false;\r\n  object.lockScalingY = false;\r\n  object.lockRotation = false;\r\n}\r\n\r\nfunction isActiveSelection(\r\n  object: fabric.Object\r\n): object is fabric.ActiveSelection {\r\n  return object.type === \"activeSelection\";\r\n}\r\n\r\ntype ObjectFilters = {\r\n  HueRotation?: number;\r\n  Saturation?: number;\r\n  Brightness?: number;\r\n};\r\n\r\nexport default function ToolsProvider({ children }: { children: ReactNode }) {\r\n  const { actualModel, selectedModelType } = useWarrior();\r\n  const [selectedMaterialIndex, setSelectedMaterialIndex] = useState(0);\r\n  const materialDefs = materials[actualModel];\r\n  const materialDef = materialDefs[selectedMaterialIndex] ?? null;\r\n\r\n  const textureSize = useMemo(\r\n    () => materialDef.size ?? [512, 512],\r\n    [materialDef]\r\n  );\r\n\r\n  const hasMetallic = !(\r\n    materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1\r\n  );\r\n\r\n  const [activeCanvasType, setActiveCanvasType] = useState(\"color\");\r\n\r\n  if (!hasMetallic && activeCanvasType === \"metallic\") {\r\n    setActiveCanvasType(\"color\");\r\n  }\r\n\r\n  const [backgroundColor, setBackgroundColor] = useState(\"magenta\");\r\n  const [lockedObjects, setLockedObjects] = useState(\r\n    () => new Set<fabric.Object>()\r\n  );\r\n  const [brushColor, setBrushColor] = useState(200);\r\n  const [brushSize, setBrushSize] = useState(10);\r\n  const [filterMap, setFilterMap] = useState(\r\n    () => new Map<fabric.Object, ObjectFilters>()\r\n  );\r\n  const [selectedObjects, setSelectedObjects] = useState<fabric.Object[]>(\r\n    () => []\r\n  );\r\n\r\n  const activeCanvas = materialDef\r\n    ? `${materialDef.name}:${activeCanvasType}`\r\n    : null;\r\n  const metallicCanvasId = materialDef ? `${materialDef.name}:metallic` : null;\r\n  const { canvases } = useCanvas();\r\n  const { canvas, notifyChange, undo, redo, canUndo, canRedo } =\r\n    useCanvas(activeCanvas);\r\n  const { canvas: metallicCanvas } = useCanvas(metallicCanvasId);\r\n  const [isDrawingMode, setDrawingMode] = useState(false);\r\n  const { combineColorAndAlphaImageUrls } = useImageWorker();\r\n  const { canvasPadding } = useSettings();\r\n  const [filterChanges, setFilterChanges] = useState<\r\n    Array<[fabric.Object, ObjectFilters]>\r\n  >(() => []);\r\n\r\n  const getFilter = (name: keyof ObjectFilters) => {\r\n    if (selectedObjects.length) {\r\n      const getValue = (i: number) =>\r\n        (filterMap.get(selectedObjects[i]) ?? {})[name] ?? 0;\r\n      const firstValue = getValue(0);\r\n      if (\r\n        selectedObjects\r\n          .slice(1)\r\n          .every((selectedObject, i) => getValue(i + 1) === firstValue)\r\n      ) {\r\n        return firstValue;\r\n      }\r\n      return null;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const hueRotate = getFilter(\"HueRotation\");\r\n  const saturation = getFilter(\"Saturation\");\r\n  const brightness = getFilter(\"Brightness\");\r\n\r\n  const setFilter = useCallback(\r\n    (name: keyof ObjectFilters, value: number) => {\r\n      if (!selectedObjects.length) {\r\n        setFilterChanges([]);\r\n        return;\r\n      }\r\n      const filterChanges: Array<[fabric.Object, ObjectFilters]> = [];\r\n      const newFilterMap = new Map(filterMap);\r\n      for (const selectedObject of selectedObjects) {\r\n        const existingFilters = filterMap.get(selectedObject) ?? {};\r\n        const newFilters = { ...existingFilters, [name]: value };\r\n        newFilterMap.set(selectedObject, newFilters);\r\n        filterChanges.push([selectedObject, newFilters]);\r\n      }\r\n      setFilterMap(newFilterMap);\r\n      setFilterChanges(filterChanges);\r\n    },\r\n    [filterMap, selectedObjects]\r\n  );\r\n\r\n  const setHueRotate = useCallback(\r\n    (value: number) => setFilter(\"HueRotation\", value),\r\n    [setFilter]\r\n  );\r\n\r\n  const setSaturation = useCallback(\r\n    (value: number) => setFilter(\"Saturation\", value),\r\n    [setFilter]\r\n  );\r\n\r\n  const setBrightness = useCallback(\r\n    (value: number) => setFilter(\"Brightness\", value),\r\n    [setFilter]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!filterChanges.length) {\r\n      return;\r\n    }\r\n    for (const [selectedObject, newFilters] of filterChanges) {\r\n      if (selectedObject instanceof fabric.Image) {\r\n        selectedObject.filters = [];\r\n        for (const key in newFilters) {\r\n          const filterValue = newFilters[key as keyof ObjectFilters] ?? 0;\r\n          if (filterValue !== 0) {\r\n            switch (key) {\r\n              case \"HueRotation\":\r\n                selectedObject.filters.push(\r\n                  // @ts-expect-error @types/fabric does not include HueRotation.\r\n                  new fabric.Image.filters.HueRotation({\r\n                    rotation: filterValue,\r\n                  })\r\n                );\r\n                break;\r\n              case \"Saturation\":\r\n                selectedObject.filters.push(\r\n                  new fabric.Image.filters.Saturation({\r\n                    saturation: filterValue,\r\n                  })\r\n                );\r\n                break;\r\n              case \"Brightness\":\r\n                selectedObject.filters.push(\r\n                  new fabric.Image.filters.Brightness({\r\n                    brightness: filterValue,\r\n                  })\r\n                );\r\n                break;\r\n            }\r\n          }\r\n        }\r\n        selectedObject.applyFilters();\r\n      }\r\n    }\r\n    setFilterChanges([]);\r\n    if (notifyChange) {\r\n      notifyChange();\r\n    }\r\n  }, [filterChanges, notifyChange]);\r\n\r\n  const lockSelection = useCallback(() => {\r\n    if (selectedObjects.length) {\r\n      setLockedObjects((lockedObjects) => {\r\n        const newLockedObjects = new Set(lockedObjects);\r\n        for (const selectedObject of selectedObjects) {\r\n          newLockedObjects.add(selectedObject);\r\n          lockObject(selectedObject);\r\n        }\r\n        return newLockedObjects;\r\n      });\r\n    }\r\n  }, [selectedObjects]);\r\n\r\n  const unlockSelection = useCallback(() => {\r\n    if (selectedObjects.length) {\r\n      setLockedObjects((lockedObjects) => {\r\n        const newLockedObjects = new Set(lockedObjects);\r\n        for (const selectedObject of selectedObjects) {\r\n          newLockedObjects.delete(selectedObject);\r\n          unlockObject(selectedObject);\r\n        }\r\n        return newLockedObjects;\r\n      });\r\n    }\r\n  }, [selectedObjects]);\r\n\r\n  const bringForward = useCallback(async () => {\r\n    const object = canvas.getActiveObject();\r\n    if (object) {\r\n      canvas.bringForward(object, true);\r\n      notifyChange();\r\n    }\r\n  }, [canvas, notifyChange]);\r\n\r\n  const sendBackward = useCallback(async () => {\r\n    const object = canvas.getActiveObject();\r\n    if (object) {\r\n      // Don't allow below base skin.\r\n      if (canvas._objects[0] === object || canvas._objects[1] === object) {\r\n        return;\r\n      }\r\n      canvas.sendBackwards(object, true);\r\n      notifyChange();\r\n    }\r\n  }, [canvas, notifyChange]);\r\n\r\n  const addImages = useCallback(\r\n    async (imageUrls: string[]) => {\r\n      let lastAddedImage;\r\n      for (const imageUrl of imageUrls) {\r\n        const image = await createFabricImage(imageUrl);\r\n        if (!image.width || !image.height) {\r\n          throw new Error(\"Zero-height image\");\r\n        }\r\n        const widthRatio = image.width / textureSize[0];\r\n        const heightRatio = image.height / textureSize[1];\r\n        if (widthRatio > 1 || heightRatio > 1) {\r\n          let scale;\r\n          if (widthRatio > heightRatio) {\r\n            scale = 1 / widthRatio;\r\n          } else {\r\n            scale = 1 / heightRatio;\r\n          }\r\n          image.scaleX = scale;\r\n          image.scaleY = scale;\r\n        }\r\n        if (activeCanvasType === \"metallic\") {\r\n          if (!image.filters) {\r\n            image.filters = [];\r\n          }\r\n          const grayscaleFilter = new fabric.Image.filters.Grayscale();\r\n          image.filters.push(grayscaleFilter);\r\n          image.applyFilters();\r\n        }\r\n        setDrawingMode(false);\r\n        canvas.centerObject(image);\r\n        canvas.add(image);\r\n        lastAddedImage = image;\r\n      }\r\n      if (lastAddedImage) {\r\n        canvas.setActiveObject(lastAddedImage);\r\n      }\r\n    },\r\n    [canvas, activeCanvasType, textureSize]\r\n  );\r\n\r\n  const duplicate = useCallback(async () => {\r\n    const object = canvas.getActiveObject();\r\n    if (object) {\r\n      const copy = await new Promise<fabric.Object>((resolve) =>\r\n        object.clone(resolve)\r\n      );\r\n      copy.set({\r\n        top: (copy.top ?? 0) + 20,\r\n        left: (copy.left ?? 0) + 20,\r\n        evented: true,\r\n      });\r\n\r\n      if (isActiveSelection(copy)) {\r\n        copy.canvas = canvas;\r\n        copy.forEachObject((object) => {\r\n          canvas.add(object);\r\n        });\r\n        copy.setCoords();\r\n      }\r\n\r\n      canvas.discardActiveObject();\r\n      canvas.add(copy);\r\n      canvas.setActiveObject(copy);\r\n    }\r\n  }, [canvas]);\r\n\r\n  const deleteSelection = useCallback(async () => {\r\n    const objects = canvas.getActiveObjects();\r\n    canvas.discardActiveObject();\r\n    canvas.remove(...objects);\r\n    canvas.requestRenderAll();\r\n    // forceUpdateRef.current();\r\n  }, [canvas]);\r\n\r\n  const exportSkin = useCallback(\r\n    async ({ format, name = \"\" }: { format: string; name: string }) => {\r\n      const { savePngFile, saveZipFile, createZipFile } = await import(\r\n        \"./exportUtils\"\r\n      );\r\n\r\n      name = name.trim() || \"MyCustomSkin\";\r\n\r\n      const materialExports = await Promise.all(\r\n        materialDefs\r\n          .filter(\r\n            (materialDef: MaterialDefinition) =>\r\n              materialDef && !materialDef.hidden\r\n          )\r\n          .map(async (materialDef: MaterialDefinition) => {\r\n            const colorCanvas = canvases[`${materialDef.name}:color`]?.canvas;\r\n            const metallicCanvas =\r\n              canvases[`${materialDef.name}:metallic`]?.canvas;\r\n\r\n            const textureSize = materialDef.size ?? [512, 512];\r\n            let outputImageUrl;\r\n\r\n            const colorImageUrl = colorCanvas.toDataURL({\r\n              top: canvasPadding,\r\n              left: canvasPadding,\r\n              width: textureSize[0],\r\n              height: textureSize[1],\r\n            });\r\n\r\n            if (metallicCanvas) {\r\n              const metallicImageUrl = metallicCanvas.toDataURL({\r\n                top: canvasPadding,\r\n                left: canvasPadding,\r\n                width: textureSize[0],\r\n                height: textureSize[1],\r\n              });\r\n              outputImageUrl = await combineColorAndAlphaImageUrls({\r\n                colorImageUrl,\r\n                metallicImageUrl,\r\n              });\r\n            } else {\r\n              outputImageUrl = colorImageUrl;\r\n            }\r\n\r\n            let filename;\r\n            switch (selectedModelType) {\r\n              case \"player\":\r\n                filename = `${name}.${actualModel}.png`;\r\n                break;\r\n              case \"weapon\":\r\n              case \"vehicle\":\r\n                if (materialDef) {\r\n                  filename = `${materialDef.file ?? materialDef.name}.png`;\r\n                } else if (selectedModelType === \"weapon\") {\r\n                  filename = `weapon_${actualModel}.png`;\r\n                } else {\r\n                  filename = `${actualModel}.png`;\r\n                }\r\n            }\r\n\r\n            return { imageUrl: outputImageUrl, filename };\r\n          })\r\n      );\r\n\r\n      switch (format) {\r\n        case \"png\": {\r\n          const { imageUrl, filename } = materialExports[selectedMaterialIndex];\r\n          savePngFile(imageUrl, filename);\r\n          break;\r\n        }\r\n        case \"vl2\": {\r\n          const files = await Promise.all(\r\n            materialExports.map(async (materialExport) => ({\r\n              data: await imageUrlToArrayBuffer(materialExport.imageUrl),\r\n              name: materialExport.filename,\r\n            }))\r\n          );\r\n          const zip = createZipFile(files);\r\n          const camelCaseName = actualModel.replace(\r\n            /(?:^([a-z])|_([a-z]))/g,\r\n            (match, a, b) => (a || b).toUpperCase()\r\n          );\r\n          const zipFileName =\r\n            selectedModelType === \"player\"\r\n              ? `zPlayerSkin-${name}.vl2`\r\n              : `zWeapon${camelCaseName}-${name}.vl2`;\r\n          await saveZipFile(zip, zipFileName);\r\n        }\r\n      }\r\n      return;\r\n    },\r\n    [\r\n      actualModel,\r\n      canvasPadding,\r\n      canvases,\r\n      combineColorAndAlphaImageUrls,\r\n      materialDefs,\r\n      selectedMaterialIndex,\r\n      selectedModelType,\r\n    ]\r\n  );\r\n\r\n  const context = useMemo(\r\n    () => ({\r\n      activeCanvas,\r\n      activeCanvasType,\r\n      setActiveCanvasType,\r\n      backgroundColor,\r\n      setBackgroundColor,\r\n      lockedObjects,\r\n      setLockedObjects,\r\n      brushColor,\r\n      setBrushColor,\r\n      brushSize,\r\n      setBrushSize,\r\n      hueRotate,\r\n      setHueRotate,\r\n      saturation,\r\n      setSaturation,\r\n      brightness,\r\n      setBrightness,\r\n      selectedObjects,\r\n      lockSelection,\r\n      unlockSelection,\r\n      bringForward,\r\n      sendBackward,\r\n      addImages,\r\n      duplicate,\r\n      deleteSelection,\r\n      undo,\r\n      redo,\r\n      canUndo,\r\n      canRedo,\r\n      exportSkin,\r\n      isDrawingMode,\r\n      setDrawingMode,\r\n      selectedMaterialIndex,\r\n      setSelectedMaterialIndex,\r\n      textureSize,\r\n      hasMetallic,\r\n    }),\r\n    [\r\n      activeCanvas,\r\n      activeCanvasType,\r\n      backgroundColor,\r\n      lockedObjects,\r\n      brushColor,\r\n      brushSize,\r\n      hueRotate,\r\n      saturation,\r\n      brightness,\r\n      setHueRotate,\r\n      setSaturation,\r\n      setBrightness,\r\n      selectedObjects,\r\n      lockSelection,\r\n      unlockSelection,\r\n      bringForward,\r\n      sendBackward,\r\n      addImages,\r\n      duplicate,\r\n      deleteSelection,\r\n      undo,\r\n      redo,\r\n      canUndo,\r\n      canRedo,\r\n      exportSkin,\r\n      isDrawingMode,\r\n      selectedMaterialIndex,\r\n      textureSize,\r\n      hasMetallic,\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (canvas) {\r\n      const handleSelectionUpdated = () => {\r\n        setSelectedObjects(canvas.getActiveObjects());\r\n      };\r\n      canvas.on(\"selection:cleared\", handleSelectionUpdated);\r\n      canvas.on(\"selection:updated\", handleSelectionUpdated);\r\n      canvas.on(\"selection:created\", handleSelectionUpdated);\r\n\r\n      handleSelectionUpdated();\r\n\r\n      return () => {\r\n        canvas.off(\"selection:cleared\", handleSelectionUpdated);\r\n        canvas.off(\"selection:updated\", handleSelectionUpdated);\r\n        canvas.off(\"selection:created\", handleSelectionUpdated);\r\n      };\r\n    }\r\n  }, [canvas]);\r\n\r\n  useEffect(() => {\r\n    if (metallicCanvas) {\r\n      metallicCanvas.freeDrawingBrush.width = brushSize;\r\n    }\r\n  }, [metallicCanvas, brushSize]);\r\n\r\n  useEffect(() => {\r\n    if (metallicCanvas) {\r\n      metallicCanvas.freeDrawingBrush.color = `rgb(${brushColor}, ${brushColor}, ${brushColor})`;\r\n    }\r\n  }, [metallicCanvas, brushColor]);\r\n\r\n  return (\r\n    <ToolsContext.Provider value={context}>{children}</ToolsContext.Provider>\r\n  );\r\n}\r\n","import useTools from \"./useTools\";\r\nimport useSettings from \"./useSettings\";\r\n\r\nexport default function CanvasBackdrop() {\r\n  const { backgroundColor, textureSize } = useTools();\r\n  const { canvasPadding } = useSettings();\r\n\r\n  return textureSize ? (\r\n    <div\r\n      className=\"CanvasBackdrop\"\r\n      style={{\r\n        backgroundColor,\r\n        top: canvasPadding,\r\n        width: textureSize[0],\r\n        height: textureSize[1],\r\n      }}\r\n    />\r\n  ) : null;\r\n}\r\n","import { ReactNode, useCallback, useMemo, useState } from \"react\";\r\nimport { CanvasContext, CanvasInfo } from \"./useCanvas\";\r\n\r\nexport default function CanvasProvider({ children }: { children: ReactNode }) {\r\n  const [canvases, setCanvases] = useState<Record<string, CanvasInfo>>({});\r\n\r\n  const registerCanvas = useCallback(\r\n    (canvasId: string, canvasInfo: CanvasInfo) => {\r\n      setCanvases((canvases) => {\r\n        return { ...canvases, [canvasId]: canvasInfo };\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  const unregisterCanvas = useCallback((canvasId: string) => {\r\n    setCanvases((canvases) => {\r\n      const { [canvasId]: canvas, ...rest } = canvases;\r\n      return rest;\r\n    });\r\n  }, []);\r\n\r\n  const context = useMemo(() => {\r\n    return {\r\n      canvases,\r\n      registerCanvas,\r\n      unregisterCanvas,\r\n    };\r\n  }, [canvases, registerCanvas, unregisterCanvas]);\r\n\r\n  return (\r\n    <CanvasContext.Provider value={context}>{children}</CanvasContext.Provider>\r\n  );\r\n}\r\n","import { ReactNode, useRef } from \"react\";\r\nimport useCanvas from \"./useCanvas\";\r\nimport useTools from \"./useTools\";\r\n\r\nexport default function CanvasInteractions({\r\n  children,\r\n}: {\r\n  children: ReactNode;\r\n}) {\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const {\r\n    activeCanvas,\r\n    bringForward,\r\n    sendBackward,\r\n    duplicate,\r\n    deleteSelection,\r\n    addImages,\r\n    undo,\r\n    redo,\r\n  } = useTools();\r\n  const { canvas, notifyChange, setDrawingMode } = useCanvas(activeCanvas);\r\n\r\n  const nudge = async ({ top = 0, left = 0 } = {}) => {\r\n    const objects = canvas.getActiveObjects();\r\n    for (const object of objects) {\r\n      object.top = (object.top ?? 0) + top;\r\n      object.left = (object.left ?? 0) + left;\r\n    }\r\n    notifyChange();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"CanvasInteractions\"\r\n      tabIndex={0}\r\n      ref={ref}\r\n      onDrop={async (event) => {\r\n        event.preventDefault();\r\n        if (ref.current) {\r\n          ref.current.focus();\r\n        }\r\n        const { items } = event.dataTransfer;\r\n        const images = Array.from(items).filter(\r\n          (item) => item.kind === \"file\" && item.type.match(/^image\\//)\r\n        );\r\n        const imageUrls = await Promise.all(\r\n          images\r\n            .map(async (droppedImageFile) => {\r\n              const file = droppedImageFile.getAsFile();\r\n              if (!file) {\r\n                throw new Error(\"Not a file.\");\r\n              }\r\n              const reader = new FileReader();\r\n              const imageUrl = await new Promise<string>((resolve, reject) => {\r\n                reader.onload = async (event) => {\r\n                  if (event.target && typeof event.target.result === \"string\") {\r\n                    resolve(event.target.result);\r\n                  } else {\r\n                    reject(new Error(\"Failed to load image data.\"));\r\n                  }\r\n                };\r\n                reader.readAsDataURL(file);\r\n              });\r\n              return imageUrl;\r\n            })\r\n            .filter(Boolean)\r\n        );\r\n\r\n        await addImages(imageUrls);\r\n      }}\r\n      onKeyDown={async (event) => {\r\n        const target = event.target as HTMLElement;\r\n        if (target.nodeName === \"INPUT\" || target.nodeName === \"TEXTAREA\") {\r\n          return;\r\n        }\r\n        if (event.ctrlKey || event.metaKey) {\r\n          switch (event.key) {\r\n            case \"z\":\r\n              if (event.altKey) {\r\n                return;\r\n              } else if (event.shiftKey) {\r\n                event.preventDefault();\r\n                redo();\r\n                return;\r\n              } else {\r\n                event.preventDefault();\r\n                undo();\r\n                return;\r\n              }\r\n            case \"y\":\r\n              if (event.altKey || event.shiftKey) {\r\n                return;\r\n              } else {\r\n                event.preventDefault();\r\n                redo();\r\n                return;\r\n              }\r\n          }\r\n        }\r\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n          return;\r\n        }\r\n        switch (event.key) {\r\n          case \"Backspace\":\r\n          case \"Delete\": {\r\n            event.preventDefault();\r\n            await deleteSelection();\r\n            break;\r\n          }\r\n          case \"ArrowLeft\": {\r\n            event.preventDefault();\r\n            await nudge({ left: -1 });\r\n            break;\r\n          }\r\n          case \"ArrowRight\": {\r\n            event.preventDefault();\r\n            await nudge({ left: 1 });\r\n            break;\r\n          }\r\n          case \"ArrowUp\": {\r\n            event.preventDefault();\r\n            await nudge({ top: -1 });\r\n            break;\r\n          }\r\n          case \"ArrowDown\": {\r\n            event.preventDefault();\r\n            await nudge({ top: 1 });\r\n            break;\r\n          }\r\n          case \"d\": {\r\n            event.preventDefault();\r\n            await duplicate();\r\n            break;\r\n          }\r\n          case \"f\": {\r\n            event.preventDefault();\r\n            await bringForward();\r\n            break;\r\n          }\r\n          case \"b\": {\r\n            event.preventDefault();\r\n            await sendBackward();\r\n            break;\r\n          }\r\n          case \"p\": {\r\n            if (activeCanvas === \"metallic\") {\r\n              event.preventDefault();\r\n              setDrawingMode(true);\r\n            }\r\n            break;\r\n          }\r\n          case \"s\":\r\n            if (activeCanvas === \"color\") {\r\n              event.preventDefault();\r\n              setDrawingMode(false);\r\n            }\r\n            break;\r\n        }\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import useTools from \"./useTools\";\r\n\r\nexport default function CanvasToggle() {\r\n  const { activeCanvasType, setActiveCanvasType, hasMetallic } = useTools();\r\n\r\n  return (\r\n    <div className=\"CanvasToggle\">\r\n      <button\r\n        type=\"button\"\r\n        data-selected={activeCanvasType === \"color\" ? \"\" : undefined}\r\n        onClick={() => {\r\n          setActiveCanvasType(\"color\");\r\n        }}\r\n      >\r\n        Color\r\n      </button>\r\n      {hasMetallic ? (\r\n        <button\r\n          type=\"button\"\r\n          data-selected={activeCanvasType === \"metallic\" ? \"\" : undefined}\r\n          onClick={() => {\r\n            setActiveCanvasType(\"metallic\");\r\n          }}\r\n        >\r\n          Metallic\r\n        </button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","import getConfig from \"next/config\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport { AiTwotoneFolderOpen } from \"react-icons/ai\";\r\nimport { useRef } from \"react\";\r\nimport useTools from \"./useTools\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\nconst { defaultSkins, customSkins, modelDefaults, materials } =\r\n  publicRuntimeConfig;\r\n\r\nexport default function WarriorSelector() {\r\n  const {\r\n    selectedModel,\r\n    setSelectedModel,\r\n    selectedModelType,\r\n    setSelectedModelType,\r\n    selectedSkin,\r\n    setSelectedSkin,\r\n    setSelectedSkinType,\r\n    actualModel,\r\n    setSelectedAnimation,\r\n    setSkinImageUrls,\r\n    setAnimationPaused,\r\n  } = useWarrior();\r\n  const { selectedMaterialIndex, setSelectedMaterialIndex } = useTools();\r\n  const materialDefs = materials[actualModel];\r\n  const materialDef = materialDefs[selectedMaterialIndex];\r\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  return (\r\n    <div className=\"Toolbar\">\r\n      <div className=\"Field\">\r\n        <label htmlFor=\"ModelSelect\">Model</label>\r\n        <select\r\n          id=\"ModelSelect\"\r\n          value={selectedModel}\r\n          onChange={(event) => {\r\n            const parentNode = event.target.selectedOptions[0]\r\n              .parentNode as HTMLElement;\r\n            const newSelectedModel = event.target.value;\r\n            const { modelType } = parentNode.dataset;\r\n            if (!modelType) {\r\n              throw new Error(\"No data-model-type found\");\r\n            }\r\n            const newModelHasSkin =\r\n              defaultSkins[newSelectedModel]?.includes(selectedSkin) ||\r\n              customSkins[newSelectedModel]?.includes(selectedSkin) ||\r\n              false;\r\n            // startTransition(() => {\r\n            setSelectedAnimation(null);\r\n            setAnimationPaused(false);\r\n            setSelectedModelType(modelType);\r\n            setSelectedModel(newSelectedModel);\r\n            setSelectedMaterialIndex(0);\r\n            if (!newModelHasSkin) {\r\n              setSelectedSkin(modelDefaults[newSelectedModel] ?? null);\r\n              setSelectedSkinType(\"default\");\r\n            }\r\n            // });\r\n          }}\r\n        >\r\n          <optgroup label=\"Players\" data-model-type=\"player\">\r\n            <option value=\"lmale\">Human Male &bull; Light</option>\r\n            <option value=\"mmale\">Human Male &bull; Medium</option>\r\n            <option value=\"hmale\">Human Male &bull; Heavy</option>\r\n            <option value=\"lfemale\">Human Female &bull; Light</option>\r\n            <option value=\"mfemale\">Human Female &bull; Medium</option>\r\n            <option value=\"hfemale\">Human Female &bull; Heavy</option>\r\n            <option value=\"lbioderm\">Bioderm &bull; Light</option>\r\n            <option value=\"mbioderm\">Bioderm &bull; Medium</option>\r\n            <option value=\"hbioderm\">Bioderm &bull; Heavy</option>\r\n          </optgroup>\r\n          <optgroup label=\"Weapons\" data-model-type=\"weapon\">\r\n            <option value=\"disc\">Disc Launcher</option>\r\n            <option value=\"chaingun\">Chaingun</option>\r\n            <option value=\"grenade_launcher\">Grenade Launcher</option>\r\n            <option value=\"sniper\">Laser Rifle</option>\r\n            {/* <option value=\"plasmathrower\">Plasma Cannon</option> */}\r\n            <option value=\"energy\">Blaster</option>\r\n            <option value=\"shocklance\">Shocklance</option>\r\n            <option value=\"elf\">ELF Projector</option>\r\n            <option value=\"missile\">Missile Launcher</option>\r\n            <option value=\"mortar\">Mortar</option>\r\n            <option value=\"repair\">Repair Pack</option>\r\n            <option value=\"targeting\">Targeting Laser</option>\r\n          </optgroup>\r\n          <optgroup label=\"Vehicles\" data-model-type=\"vehicle\">\r\n            <option value=\"vehicle_air_scout\">Shrike</option>\r\n          </optgroup>\r\n        </select>\r\n      </div>\r\n      <div className=\"Field\">\r\n        <label htmlFor=\"SkinSelect\">Skin</label>\r\n        <div className=\"Buttons\">\r\n          <select\r\n            id=\"SkinSelect\"\r\n            value={selectedSkin ?? \"\"}\r\n            onChange={async (event) => {\r\n              const parentNode = event.target.selectedOptions[0]\r\n                .parentNode as HTMLElement;\r\n              const skinType = event.target.value\r\n                ? parentNode.dataset.skinType ?? null\r\n                : null;\r\n              setSelectedSkin(event.target.value || null);\r\n              setSelectedSkinType(skinType);\r\n            }}\r\n          >\r\n            <option value=\"\">Select a skin…</option>\r\n            {selectedModelType === \"player\" ? (\r\n              <>\r\n                <optgroup label=\"Default Skins\" data-skin-type=\"default\">\r\n                  {defaultSkins[actualModel]?.map((name: string) => {\r\n                    return (\r\n                      <option key={name} value={name}>\r\n                        {name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </optgroup>\r\n                <optgroup label=\"Custom Skins\" data-skin-type=\"custom\">\r\n                  {customSkins[actualModel]?.map((name: string) => {\r\n                    return (\r\n                      <option key={name} value={name}>\r\n                        {name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </optgroup>\r\n              </>\r\n            ) : null}\r\n            {selectedModelType === \"weapon\" ||\r\n            selectedModelType === \"vehicle\" ? (\r\n              <>\r\n                {modelDefaults[actualModel] ? (\r\n                  <optgroup label=\"Default Skins\" data-skin-type=\"default\">\r\n                    <option value={modelDefaults[actualModel]}>Default</option>\r\n                  </optgroup>\r\n                ) : null}\r\n                {customSkins[actualModel]?.length ? (\r\n                  <optgroup label=\"Custom Skins\" data-skin-type=\"custom\">\r\n                    {customSkins[actualModel].map((name: string) => (\r\n                      <option key={name} value={name}>\r\n                        {name}\r\n                      </option>\r\n                    ))}\r\n                  </optgroup>\r\n                ) : null}\r\n              </>\r\n            ) : null}\r\n          </select>\r\n          <button\r\n            type=\"button\"\r\n            aria-label=\"Load Skin\"\r\n            title=\"Load a Skin\"\r\n            onClick={() => {\r\n              if (fileInputRef.current) {\r\n                fileInputRef.current.click();\r\n              }\r\n            }}\r\n          >\r\n            <AiTwotoneFolderOpen style={{ fontSize: 18 }} />\r\n          </button>\r\n          <input\r\n            ref={fileInputRef}\r\n            onChange={async (event) => {\r\n              const imageUrl = await new Promise<string>((resolve, reject) => {\r\n                const inputFile = event.target.files?.[0];\r\n                if (inputFile) {\r\n                  const reader = new FileReader();\r\n                  reader.addEventListener(\"load\", (event) => {\r\n                    resolve(event.target?.result as string);\r\n                  });\r\n                  reader.readAsDataURL(inputFile);\r\n                } else {\r\n                  reject(new Error(\"No input file provided.\"));\r\n                }\r\n              });\r\n              setSelectedSkin(null);\r\n              setSkinImageUrls({ [materialDef.name]: imageUrl });\r\n            }}\r\n            type=\"file\"\r\n            accept=\".png, image/png\"\r\n            hidden\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ReactNode, useEffect, useMemo, useState } from \"react\";\r\nimport getConfig from \"next/config\";\r\nimport useSettings from \"./useSettings\";\r\nimport { WarriorContext } from \"./useWarrior\";\r\nimport type { MaterialDefinition } from \"./Material\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\nconst { materials, modelDefaults } = publicRuntimeConfig;\r\nconst baseSkinPath = `https://exogen.github.io/t2-skins/skins`;\r\n\r\nexport function getSkinImageUrls({\r\n  basePath,\r\n  actualModel,\r\n  selectedModelType,\r\n  selectedSkin,\r\n  selectedSkinType,\r\n}: {\r\n  basePath: string;\r\n  actualModel: string;\r\n  selectedModelType: string;\r\n  selectedSkin: string | null;\r\n  selectedSkinType: string | null;\r\n}): Record<string, string> {\r\n  const materialDefs = materials[actualModel];\r\n  switch (selectedModelType) {\r\n    case \"player\":\r\n      switch (selectedSkinType) {\r\n        case \"default\":\r\n          return {\r\n            base: `${basePath}/textures/${selectedSkin}.${actualModel}.png`,\r\n          };\r\n        case \"custom\":\r\n          return { base: `${baseSkinPath}/${selectedSkin}.${actualModel}.png` };\r\n      }\r\n      break;\r\n    case \"weapon\":\r\n    case \"vehicle\":\r\n      return materialDefs.reduce(\r\n        (\r\n          skinImageUrls: Record<string, string>,\r\n          materialDef: MaterialDefinition\r\n        ) => {\r\n          if (materialDef) {\r\n            switch (selectedSkinType) {\r\n              case \"default\":\r\n                if (materialDef.hasDefault !== false) {\r\n                  skinImageUrls[materialDef.name] = `${basePath}/textures/${\r\n                    materialDef.file ?? materialDef.name\r\n                  }.png`;\r\n                }\r\n                break;\r\n              case \"custom\":\r\n                skinImageUrls[\r\n                  materialDef.name\r\n                ] = `${baseSkinPath}/${selectedSkin}/${\r\n                  materialDef.file ?? materialDef.name\r\n                }.png`;\r\n                break;\r\n            }\r\n          }\r\n          return skinImageUrls;\r\n        },\r\n        {}\r\n      );\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction getModelUrl(\r\n  basePath: string,\r\n  actualModel: string,\r\n  selectedAnimation: string | null\r\n) {\r\n  switch (actualModel) {\r\n    default:\r\n      return `${basePath}/${actualModel}${\r\n        selectedAnimation ? \".anim\" : \"\"\r\n      }.glb`;\r\n  }\r\n}\r\n\r\nexport default function WarriorProvider({ children }: { children: ReactNode }) {\r\n  const [selectedModel, setSelectedModel] = useState<string>(\"lmale\");\r\n  const [selectedModelType, setSelectedModelType] = useState(\"player\");\r\n  const [selectedSkin, setSelectedSkin] = useState<string | null>(\r\n    \"Blood Eagle\"\r\n  );\r\n  const [selectedSkinType, setSelectedSkinType] = useState<string | null>(\r\n    \"default\"\r\n  );\r\n  const [selectedAnimation, setSelectedAnimation] = useState<string | null>(\r\n    null\r\n  );\r\n  const [animationPaused, setAnimationPaused] = useState(false);\r\n  const { basePath } = useSettings();\r\n  const actualModel = selectedModel === \"hfemale\" ? \"hmale\" : selectedModel;\r\n  const selectedModelUrl = getModelUrl(\r\n    basePath,\r\n    actualModel,\r\n    selectedAnimation\r\n  );\r\n\r\n  const [skinImageUrls, setSkinImageUrls] = useState<Record<string, string>>(\r\n    () =>\r\n      getSkinImageUrls({\r\n        basePath,\r\n        actualModel,\r\n        selectedModelType,\r\n        selectedSkin,\r\n        selectedSkinType,\r\n      })\r\n  );\r\n\r\n  const defaultSkinImageUrls = useMemo(\r\n    () =>\r\n      getSkinImageUrls({\r\n        basePath,\r\n        actualModel,\r\n        selectedModelType,\r\n        selectedSkin: modelDefaults[actualModel],\r\n        selectedSkinType: \"default\",\r\n      }),\r\n    [actualModel, basePath, selectedModelType]\r\n  );\r\n\r\n  const context = useMemo(() => {\r\n    return {\r\n      selectedModel,\r\n      setSelectedModel,\r\n      selectedModelType,\r\n      setSelectedModelType,\r\n      actualModel,\r\n      selectedModelUrl,\r\n      animationPaused,\r\n      setAnimationPaused,\r\n      selectedSkin,\r\n      setSelectedSkin,\r\n      selectedSkinType,\r\n      setSelectedSkinType,\r\n      selectedAnimation,\r\n      setSelectedAnimation,\r\n      skinImageUrls,\r\n      setSkinImageUrls,\r\n      defaultSkinImageUrls,\r\n    };\r\n  }, [\r\n    selectedModel,\r\n    setSelectedModel,\r\n    selectedModelType,\r\n    setSelectedModelType,\r\n    actualModel,\r\n    selectedModelUrl,\r\n    animationPaused,\r\n    setAnimationPaused,\r\n    selectedSkin,\r\n    setSelectedSkin,\r\n    selectedSkinType,\r\n    setSelectedSkinType,\r\n    selectedAnimation,\r\n    setSelectedAnimation,\r\n    skinImageUrls,\r\n    setSkinImageUrls,\r\n    defaultSkinImageUrls,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (selectedSkin) {\r\n      setSkinImageUrls(\r\n        getSkinImageUrls({\r\n          basePath,\r\n          actualModel,\r\n          selectedModelType,\r\n          selectedSkin,\r\n          selectedSkinType,\r\n        })\r\n      );\r\n    }\r\n  }, [\r\n    basePath,\r\n    actualModel,\r\n    selectedModelType,\r\n    selectedSkin,\r\n    selectedSkinType,\r\n  ]);\r\n\r\n  return (\r\n    <WarriorContext.Provider value={context}>\r\n      {children}\r\n    </WarriorContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\ninterface EnvironmentContextValue {\r\n  selectedEnvironment: string | null;\r\n  setSelectedEnvironment: (selectedEnvironment: string | null) => void;\r\n  environmentImageUrl: string | null;\r\n}\r\n\r\nconst EnvironmentContext = React.createContext<EnvironmentContextValue | null>(\r\n  null\r\n);\r\nEnvironmentContext.displayName = \"EnvironmentContext\";\r\n\r\nexport { EnvironmentContext };\r\n\r\nexport default function useEnvironment() {\r\n  const context = useContext(EnvironmentContext);\r\n  if (!context) {\r\n    throw new Error(\"No EnvironmentContext.Provider\");\r\n  }\r\n  return context;\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nexport type SkinImages = {\r\n  colorImageUrl?: string;\r\n  metallicImageUrl?: string;\r\n};\r\n\r\nexport type MaterialSkins = Record<string, SkinImages>;\r\n\r\ninterface SkinContextValue {\r\n  materialSkins: MaterialSkins;\r\n  getSkinImages: (materialName: string) => SkinImages;\r\n  setSkinImages: (materialName: string, skinImages: SkinImages) => void;\r\n  getColorImageUrl: (materialName: string) => string | undefined;\r\n  setColorImageUrl: (materialName: string, colorImageUrl: string) => void;\r\n  getMetallicImageUrl: (materialName: string) => string | undefined;\r\n  setMetallicImageUrl: (materialName: string, colorImageUrl: string) => void;\r\n}\r\n\r\nconst SkinContext = React.createContext<SkinContextValue | null>(null);\r\nSkinContext.displayName = \"SkinContext\";\r\n\r\nexport { SkinContext };\r\n\r\nexport default function useSkin() {\r\n  const context = useContext(SkinContext);\r\n  if (!context) {\r\n    throw new Error(\"No SkinContext.Provider\");\r\n  }\r\n  return context;\r\n}\r\n","import { useEffect } from \"react\";\r\nimport type { ModelViewerElement } from \"@google/model-viewer\";\r\nimport useSettings from \"./useSettings\";\r\nimport useSkin from \"./useSkin\";\r\nimport useModelViewer from \"./useModelViewer\";\r\n\r\n// const secondaryMaterialTextures: Record<string, string[]> = {\r\n//   disc: [\"textures/discshield2\"],\r\n// };\r\n\r\nexport type ModelMaterial = NonNullable<\r\n  ModelViewerElement[\"model\"]\r\n>[\"materials\"][number];\r\n\r\nexport type MaterialDefinition = {\r\n  index?: number;\r\n  name: string;\r\n  label?: string;\r\n  file?: string;\r\n  hasDefault?: boolean;\r\n  size?: [number, number];\r\n  hidden?: boolean;\r\n  alphaMode?: \"BLEND\" | \"MASK\" | \"OPAQUE\";\r\n  alphaCutoff?: number;\r\n  baseColorFactor?: [number, number, number, number];\r\n  emissiveFactor?: [number, number, number];\r\n  emissiveTexture?: boolean;\r\n  metallicFactor?: number;\r\n  roughnessFactor?: number;\r\n};\r\n\r\nfunction useTexture({\r\n  material,\r\n  materialDef,\r\n  textureType,\r\n  imageUrl,\r\n}: {\r\n  material: ModelMaterial;\r\n  materialDef?: MaterialDefinition;\r\n  textureType: \"baseColorTexture\" | \"metallicRoughnessTexture\";\r\n  imageUrl?: string;\r\n}) {\r\n  const { modelViewer } = useModelViewer();\r\n  const { basePath } = useSettings();\r\n\r\n  useEffect(() => {\r\n    let stale = false;\r\n\r\n    const updateTexture = async () => {\r\n      if (!materialDef || materialDef.hidden) {\r\n        if (textureType === \"metallicRoughnessTexture\") {\r\n          return;\r\n        } else {\r\n          material.setAlphaMode(\"BLEND\");\r\n          material.pbrMetallicRoughness.setBaseColorFactor([0, 0, 0, 0]);\r\n        }\r\n      } else {\r\n        const {\r\n          alphaMode,\r\n          alphaCutoff,\r\n          baseColorFactor,\r\n          emissiveFactor,\r\n          emissiveTexture = false,\r\n          metallicFactor = 1,\r\n          roughnessFactor = 1,\r\n        } = materialDef;\r\n        let textureUrl = imageUrl ?? `${basePath}/white.png`;\r\n        switch (textureType) {\r\n          case \"baseColorTexture\":\r\n            if (baseColorFactor) {\r\n              material.pbrMetallicRoughness.setBaseColorFactor(baseColorFactor);\r\n            }\r\n            if (alphaMode) {\r\n              material.setAlphaMode(alphaMode);\r\n            }\r\n            if (alphaCutoff) {\r\n              material.setAlphaCutoff(alphaCutoff);\r\n            }\r\n            if (emissiveFactor) {\r\n              material.setEmissiveFactor(emissiveFactor);\r\n            }\r\n            break;\r\n          case \"metallicRoughnessTexture\":\r\n            material.pbrMetallicRoughness.setMetallicFactor(metallicFactor);\r\n            material.pbrMetallicRoughness.setRoughnessFactor(roughnessFactor);\r\n            if (metallicFactor === 0 && roughnessFactor === 1) {\r\n              textureUrl = `${basePath}/green.png`;\r\n            }\r\n        }\r\n        const texture = await modelViewer.createTexture(textureUrl);\r\n        if (!stale) {\r\n          material.pbrMetallicRoughness[textureType].setTexture(texture);\r\n          if (textureType === \"baseColorTexture\" && emissiveTexture) {\r\n            material.emissiveTexture.setTexture(texture);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    updateTexture();\r\n\r\n    return () => {\r\n      stale = true;\r\n    };\r\n  }, [basePath, modelViewer, material, materialDef, textureType, imageUrl]);\r\n}\r\n\r\ninterface MaterialProps {\r\n  material: ModelMaterial;\r\n  materialDef?: MaterialDefinition;\r\n}\r\n\r\nexport default function Material({ material, materialDef }: MaterialProps) {\r\n  const { getSkinImages } = useSkin();\r\n  const { colorImageUrl, metallicImageUrl } =\r\n    getSkinImages(material.name) ?? {};\r\n\r\n  useTexture({\r\n    material,\r\n    materialDef,\r\n    textureType: \"baseColorTexture\",\r\n    imageUrl: colorImageUrl,\r\n  });\r\n  useTexture({\r\n    material,\r\n    materialDef,\r\n    textureType: \"metallicRoughnessTexture\",\r\n    imageUrl: metallicImageUrl,\r\n  });\r\n\r\n  return null;\r\n}\r\n","import getConfig from \"next/config\";\r\nimport Material, { MaterialDefinition } from \"./Material\";\r\nimport useModelViewer from \"./useModelViewer\";\r\nimport useWarrior from \"./useWarrior\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst { materials } = publicRuntimeConfig;\r\n\r\nexport default function Materials() {\r\n  const { actualModel } = useWarrior();\r\n  const { model } = useModelViewer();\r\n  const materialDefs: MaterialDefinition[] = materials[actualModel];\r\n\r\n  return (\r\n    <>\r\n      {model.materials.map((material, i) => {\r\n        const materialDef =\r\n          materialDefs.find((materialDef) => materialDef.index === i) ??\r\n          materialDefs[i];\r\n        return (\r\n          <Material\r\n            key={material.name}\r\n            material={material}\r\n            materialDef={materialDef}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import dynamic from \"next/dynamic\";\r\nimport getConfig from \"next/config\";\r\nimport useEnvironment from \"./useEnvironment\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport Materials from \"./Materials\";\r\n\r\nconst ModelViewer = dynamic(() => import(\"./ModelViewer\"), { ssr: false });\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst { cameraOverrides } = publicRuntimeConfig;\r\n\r\nexport default function WarriorViewer() {\r\n  const {\r\n    selectedModel,\r\n    selectedModelUrl,\r\n    selectedModelType,\r\n    selectedAnimation,\r\n    animationPaused,\r\n  } = useWarrior();\r\n  const { environmentImageUrl } = useEnvironment();\r\n\r\n  return (\r\n    <ModelViewer\r\n      modelUrl={selectedModelUrl}\r\n      environmentImageUrl={environmentImageUrl}\r\n      animationName={selectedAnimation}\r\n      animationPaused={animationPaused}\r\n      cameraOrbit={\r\n        selectedModelType === \"weapon\" ? \"315deg 70deg 105%\" : undefined\r\n      }\r\n      cameraTarget={cameraOverrides[selectedModel]?.target}\r\n      fieldOfView={cameraOverrides[selectedModel]?.fov}\r\n    >\r\n      <Materials />\r\n    </ModelViewer>\r\n  );\r\n}\r\n","import useEnvironment from \"./useEnvironment\";\r\n\r\nexport default function EnvironmentSelector() {\r\n  const { selectedEnvironment, setSelectedEnvironment } = useEnvironment();\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor=\"EnvMapSelect\">Environment</label>\r\n      <select\r\n        id=\"EnvMapSelect\"\r\n        value={selectedEnvironment ?? \"\"}\r\n        onChange={(event) => {\r\n          setSelectedEnvironment(event.target.value || null);\r\n        }}\r\n      >\r\n        <option value=\"\">Default</option>\r\n        <option value=\"clarens_night_02_1k.hdr\">Clarens Night</option>\r\n        <option value=\"dry_cracked_lake_1k.hdr\">Dry Cracked Lake</option>\r\n        <option value=\"fouriesburg_mountain_midday_1k.hdr\">\r\n          Fouriesburg Mountain\r\n        </option>\r\n        <option value=\"goegap_1k.hdr\">Goegap</option>\r\n        <option value=\"hilly_terrain_01_1k.hdr\">Hilly Terrain</option>\r\n        <option value=\"kloofendal_48d_partly_cloudy_puresky_1k.hdr\">\r\n          Kloofendal Partly Cloudy\r\n        </option>\r\n        <option value=\"kloppenheim_06_puresky_1k.hdr\">Kloppenheim</option>\r\n        <option value=\"lilienstein_1k.hdr\">Lilienstein</option>\r\n        <option value=\"spruit_sunrise_1k_HDR.hdr\">Spruit Sunrise</option>\r\n        <option value=\"umhlanga_sunrise_1k.hdr\">Umhlanga Sunrise</option>\r\n      </select>\r\n    </>\r\n  );\r\n}\r\n","import { useMemo } from \"react\";\r\nimport getConfig from \"next/config\";\r\nimport { IoMdPlay, IoMdPause } from \"react-icons/io\";\r\nimport useWarrior from \"./useWarrior\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\nconst { animations, animationLabels, animationLabelOverrides } =\r\n  publicRuntimeConfig;\r\n\r\nexport default function AnimationSelector() {\r\n  const {\r\n    actualModel,\r\n    selectedModelType,\r\n    selectedAnimation,\r\n    setSelectedAnimation,\r\n    animationPaused,\r\n    setAnimationPaused,\r\n  } = useWarrior();\r\n\r\n  const animationList = useMemo(\r\n    () => [\r\n      ...(selectedModelType === \"player\" ? animations.global : []),\r\n      ...(animations[actualModel] ?? []),\r\n    ],\r\n    [actualModel, selectedModelType]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <label>Animation</label>\r\n      <div className=\"Buttons\">\r\n        <select\r\n          value={selectedAnimation ?? \"\"}\r\n          onChange={(event) => {\r\n            setSelectedAnimation(event.target.value || null);\r\n            setAnimationPaused(false);\r\n          }}\r\n        >\r\n          <option value=\"\">None</option>\r\n          {animationList.map((animationName) => {\r\n            const label =\r\n              animationLabelOverrides[actualModel]?.[animationName] ??\r\n              animationLabels[animationName];\r\n            return (\r\n              <option key={animationName} value={animationName}>\r\n                {label ?? animationName}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        <button\r\n          type=\"button\"\r\n          disabled={!selectedAnimation}\r\n          onClick={() => {\r\n            setAnimationPaused((animationPaused) => !animationPaused);\r\n          }}\r\n        >\r\n          {animationPaused || !selectedAnimation ? <IoMdPlay /> : <IoMdPause />}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { ReactNode, useMemo, useState } from \"react\";\r\nimport { EnvironmentContext } from \"./useEnvironment\";\r\nimport useSettings from \"./useSettings\";\r\n\r\nexport default function EnvironmentProvider({\r\n  children,\r\n}: {\r\n  children: ReactNode;\r\n}) {\r\n  const [selectedEnvironment, setSelectedEnvironment] = useState<string | null>(\r\n    null\r\n  );\r\n  const { basePath } = useSettings();\r\n\r\n  const context = useMemo(() => {\r\n    const environmentImageUrl = selectedEnvironment\r\n      ? `${basePath}/${selectedEnvironment}`\r\n      : null;\r\n    return {\r\n      selectedEnvironment,\r\n      setSelectedEnvironment,\r\n      environmentImageUrl,\r\n    };\r\n  }, [basePath, selectedEnvironment, setSelectedEnvironment]);\r\n\r\n  return (\r\n    <EnvironmentContext.Provider value={context}>\r\n      {children}\r\n    </EnvironmentContext.Provider>\r\n  );\r\n}\r\n","import { ReactNode, useMemo, useState } from \"react\";\r\nimport { SkinContext, MaterialSkins, SkinImages } from \"./useSkin\";\r\n\r\nexport default function SkinProvider({ children }: { children: ReactNode }) {\r\n  const [materialSkins, setMaterialSkins] = useState<MaterialSkins>({});\r\n\r\n  const setters = useMemo(\r\n    () => ({\r\n      setSkinImages(materialName: string, skinImages: SkinImages) {\r\n        setMaterialSkins((materialSkins) => {\r\n          return {\r\n            ...materialSkins,\r\n            [materialName]: skinImages,\r\n          };\r\n        });\r\n      },\r\n      setColorImageUrl(materialName: string, colorImageUrl: string) {\r\n        setMaterialSkins((materialSkins) => {\r\n          return {\r\n            ...materialSkins,\r\n            [materialName]: {\r\n              ...materialSkins[materialName],\r\n              colorImageUrl,\r\n            },\r\n          };\r\n        });\r\n      },\r\n      setMetallicImageUrl(materialName: string, metallicImageUrl: string) {\r\n        setMaterialSkins((materialSkins) => {\r\n          return {\r\n            ...materialSkins,\r\n            [materialName]: {\r\n              ...materialSkins[materialName],\r\n              metallicImageUrl,\r\n            },\r\n          };\r\n        });\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  const context = useMemo(() => {\r\n    return {\r\n      materialSkins,\r\n      getSkinImages(materialName: string) {\r\n        return materialSkins[materialName];\r\n      },\r\n      getColorImageUrl(materialName: string) {\r\n        return materialSkins[materialName].colorImageUrl;\r\n      },\r\n      getMetallicImageUrl(materialName: string) {\r\n        return materialSkins[materialName].metallicImageUrl;\r\n      },\r\n      ...setters,\r\n    };\r\n  }, [materialSkins, setters]);\r\n\r\n  return (\r\n    <SkinContext.Provider value={context}>{children}</SkinContext.Provider>\r\n  );\r\n}\r\n","import getConfig from \"next/config\";\r\nimport useTools from \"./useTools\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport { MaterialDefinition } from \"./Material\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst { materials } = publicRuntimeConfig;\r\n\r\nexport default function MaterialSelector() {\r\n  const { actualModel } = useWarrior();\r\n  const { selectedMaterialIndex, setSelectedMaterialIndex } = useTools();\r\n  const materialDefs: MaterialDefinition[] = materials[actualModel];\r\n\r\n  return (\r\n    <select\r\n      value={selectedMaterialIndex}\r\n      onChange={(event) => {\r\n        setSelectedMaterialIndex(parseInt(event.target.value, 10));\r\n      }}\r\n    >\r\n      {materialDefs.map((materialDef, i) =>\r\n        materialDef && !materialDef.hidden ? (\r\n          <option key={materialDef.name} value={i}>\r\n            {materialDef.label ?? materialDef.name}\r\n          </option>\r\n        ) : null\r\n      )}\r\n    </select>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport useCanvas from \"./useCanvas\";\r\nimport useSettings from \"./useSettings\";\r\nimport useTools from \"./useTools\";\r\nimport { fabric } from \"fabric\";\r\nimport { createFabricImage } from \"./fabricUtils\";\r\n\r\ntype JSONSnapshot = ReturnType<typeof Canvas.prototype[\"toJSON\"]>;\r\n\r\nfunction updateObjectControlOptions() {\r\n  fabric.Object.prototype.set({\r\n    transparentCorners: false,\r\n    borderColor: \"#8afff1\",\r\n    cornerSize: 9,\r\n    cornerStyle: \"circle\",\r\n    cornerColor: \"#8afff1\",\r\n    cornerStrokeColor: \"#1c9f7c\",\r\n    strokeWidth: 10,\r\n    perPixelTargetFind: true,\r\n  });\r\n}\r\n\r\nexport interface CanvasProps {\r\n  canvasId: string;\r\n  canvasType: \"color\" | \"metallic\";\r\n  onChange: (canvas: fabric.Canvas) => void;\r\n  baseImageUrl: string | null;\r\n  textureSize: [number, number];\r\n  defaultDrawingMode?: boolean;\r\n}\r\n\r\nexport default function Canvas({\r\n  canvasId,\r\n  onChange,\r\n  baseImageUrl,\r\n  textureSize,\r\n  defaultDrawingMode = false,\r\n}: CanvasProps) {\r\n  const canvasElementRef = useRef<HTMLCanvasElement | null>(null);\r\n  const [canvas, setCanvas] = useState<fabric.Canvas | null>(null);\r\n  const { activeCanvas } = useTools();\r\n  const { canvasPadding } = useSettings();\r\n  const { registerCanvas, unregisterCanvas } = useCanvas();\r\n  const [isDrawingMode, setDrawingMode] = useState(defaultDrawingMode);\r\n  const handleChangeRef = useRef<CanvasProps[\"onChange\"]>();\r\n  const trackChanges = useRef(true);\r\n  const [undoHistory, setUndoHistory] = useState<JSONSnapshot[]>(() => []);\r\n  const [redoHistory, setRedoHistory] = useState<JSONSnapshot[]>(() => []);\r\n\r\n  const canUndo = undoHistory.length > 1;\r\n  const canRedo = redoHistory.length > 0;\r\n\r\n  const handleChange: CanvasProps[\"onChange\"] = useCallback((canvas) => {\r\n    const handleChange = handleChangeRef.current;\r\n    if (handleChange) {\r\n      handleChange(canvas);\r\n    }\r\n  }, []);\r\n\r\n  const undo = useCallback(async () => {\r\n    if (!canvas) {\r\n      return;\r\n    }\r\n    if (undoHistory.length > 1) {\r\n      const [restoreState, currentState] = undoHistory.slice(-2);\r\n      trackChanges.current = false;\r\n      canvas.renderOnAddRemove = false;\r\n      canvas.clear();\r\n      canvas.loadFromJSON(restoreState, () => {\r\n        canvas.renderAll();\r\n        trackChanges.current = true;\r\n        canvas.renderOnAddRemove = true;\r\n      });\r\n      setUndoHistory((undoHistory) => undoHistory.slice(0, -1));\r\n      setRedoHistory((redoHistory) => [currentState, ...redoHistory]);\r\n    }\r\n  }, [canvas, undoHistory]);\r\n\r\n  const redo = useCallback(() => {\r\n    if (!canvas) {\r\n      return;\r\n    }\r\n    if (redoHistory.length > 0) {\r\n      const nextState = redoHistory[0];\r\n      trackChanges.current = false;\r\n      canvas.renderOnAddRemove = false;\r\n      canvas.clear();\r\n      canvas.loadFromJSON(nextState, () => {\r\n        canvas.renderAll();\r\n        trackChanges.current = true;\r\n        canvas.renderOnAddRemove = true;\r\n      });\r\n      setUndoHistory((undoHistory) => [...undoHistory, nextState]);\r\n      setRedoHistory((redoHistory) => redoHistory.slice(1));\r\n    }\r\n  }, [canvas, redoHistory]);\r\n\r\n  useEffect(() => {\r\n    handleChangeRef.current = onChange;\r\n  }, [onChange]);\r\n\r\n  const isActive = activeCanvas === canvasId;\r\n\r\n  useEffect(() => {\r\n    const options = {\r\n      preserveObjectStacking: true,\r\n      targetFindTolerance: 2,\r\n    };\r\n    updateObjectControlOptions();\r\n\r\n    const canvas = new fabric.Canvas(canvasElementRef.current, options);\r\n\r\n    let isSnapshotting = false;\r\n    let changeTimer: ReturnType<typeof setTimeout>;\r\n\r\n    const handleChangeWithCanvasArg = () => {\r\n      handleChange(canvas);\r\n    };\r\n\r\n    const handleRender = () => {\r\n      if (isSnapshotting) {\r\n        return;\r\n      }\r\n      if (!trackChanges.current) {\r\n        return;\r\n      }\r\n      clearTimeout(changeTimer);\r\n      changeTimer = setTimeout(() => {\r\n        const snapshot = snapshotCanvas();\r\n        setUndoHistory((history) => [...history.slice(-5), snapshot]);\r\n        setRedoHistory([]);\r\n      }, 150);\r\n    };\r\n\r\n    const snapshotCanvas = () => {\r\n      isSnapshotting = true;\r\n      const snapshot = canvas.toJSON([\r\n        \"lockMovementX\",\r\n        \"lockMovementY\",\r\n        \"lockRotation\",\r\n        \"lockScalingX\",\r\n        \"lockScalingY\",\r\n        \"selectable\",\r\n        \"hoverCursor\",\r\n        \"moveCursor\",\r\n      ]);\r\n      isSnapshotting = false;\r\n      return snapshot;\r\n    };\r\n\r\n    canvas.on(\"object:modified\", handleChangeWithCanvasArg);\r\n    canvas.on(\"object:added\", handleChangeWithCanvasArg);\r\n    canvas.on(\"object:removed\", handleChangeWithCanvasArg);\r\n    canvas.on(\"after:render\", handleRender);\r\n\r\n    setCanvas(canvas);\r\n\r\n    return () => {\r\n      clearTimeout(changeTimer);\r\n      setCanvas(null);\r\n      canvas.dispose();\r\n    };\r\n  }, [handleChange]);\r\n\r\n  useEffect(() => {\r\n    if (canvas) {\r\n      canvas.isDrawingMode = isDrawingMode;\r\n    }\r\n  }, [canvas, isDrawingMode]);\r\n\r\n  useEffect(() => {\r\n    if (canvas && isActive) {\r\n      canvas.calcOffset();\r\n    }\r\n  }, [canvas, isActive]);\r\n\r\n  useEffect(() => {\r\n    if (canvas) {\r\n      registerCanvas(canvasId, {\r\n        canvas,\r\n        notifyChange: () => {\r\n          canvas.renderAll();\r\n          handleChange(canvas);\r\n        },\r\n        undo,\r\n        redo,\r\n        canUndo,\r\n        canRedo,\r\n        isDrawingMode,\r\n        setDrawingMode,\r\n      });\r\n      return () => {\r\n        unregisterCanvas(canvasId);\r\n      };\r\n    }\r\n  }, [\r\n    canvas,\r\n    registerCanvas,\r\n    unregisterCanvas,\r\n    canvasId,\r\n    handleChange,\r\n    isDrawingMode,\r\n    setDrawingMode,\r\n    undo,\r\n    redo,\r\n    canUndo,\r\n    canRedo,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (canvas && textureSize) {\r\n      trackChanges.current = false;\r\n      canvas.clear();\r\n      if (baseImageUrl) {\r\n        let stale = false;\r\n        const addImage = async () => {\r\n          const image = await createFabricImage(baseImageUrl);\r\n          if (!stale) {\r\n            if (!image.width || !image.height) {\r\n              throw new Error(\"Zero-height image\");\r\n            }\r\n            image.selectable = false;\r\n            image.lockMovementX = true;\r\n            image.lockMovementY = true;\r\n            image.lockScalingX = true;\r\n            image.lockScalingY = true;\r\n            image.lockRotation = true;\r\n            image.hoverCursor = \"default\";\r\n            image.moveCursor = \"default\";\r\n            const [expectedWidth, expectedHeight] = textureSize;\r\n            const scaleX =\r\n              image.width === expectedWidth ? 1 : expectedWidth / image.width;\r\n            const scaleY =\r\n              image.height === expectedHeight\r\n                ? 1\r\n                : expectedHeight / image.height;\r\n            if (scaleX !== 1 || scaleY !== 1) {\r\n              image.scaleX = scaleX;\r\n              image.scaleY = scaleY;\r\n            }\r\n            canvas.centerObject(image);\r\n            canvas.add(image);\r\n          }\r\n          trackChanges.current = true;\r\n          canvas.requestRenderAll();\r\n        };\r\n\r\n        addImage();\r\n\r\n        return () => {\r\n          stale = true;\r\n        };\r\n      }\r\n    }\r\n  }, [canvas, baseImageUrl, textureSize]);\r\n\r\n  return (\r\n    <div className=\"CanvasContainer\" data-active={isActive ? \"true\" : \"false\"}>\r\n      <canvas\r\n        width={textureSize[0] + canvasPadding * 2}\r\n        height={textureSize[1] + canvasPadding * 2}\r\n        ref={canvasElementRef}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\ninterface ImageLoaderContextValue {\r\n  loadImage: (url: string) => Promise<ArrayBuffer>;\r\n}\r\n\r\nexport const ImageLoaderContext =\r\n  React.createContext<ImageLoaderContextValue | null>(null);\r\nImageLoaderContext.displayName = \"ImageLoaderContext\";\r\n\r\nexport default function useImageLoader() {\r\n  const context = useContext(ImageLoaderContext);\r\n  if (!context) {\r\n    throw new Error(\"ImageLoaderContext.Provider not found!\");\r\n  }\r\n  return context;\r\n}\r\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport Canvas, { CanvasProps } from \"./Canvas\";\r\nimport useSettings from \"./useSettings\";\r\nimport useSkin from \"./useSkin\";\r\nimport type { MaterialDefinition } from \"./Material\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport useImageWorker from \"./useImageWorker\";\r\nimport useImageLoader from \"./useImageLoader\";\r\n\r\nconst defaultTextureSize = [512, 512] as [number, number];\r\n\r\nexport default function ColorCanvas({\r\n  materialDef,\r\n}: {\r\n  materialDef: MaterialDefinition;\r\n}) {\r\n  const { skinImageUrls, defaultSkinImageUrls } = useWarrior();\r\n  const skinImageUrl = skinImageUrls[materialDef.name];\r\n  const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\r\n  const { setColorImageUrl } = useSkin();\r\n  const { canvasPadding } = useSettings();\r\n  const [noAlphaImageUrl, setNoAlphaImageUrl] = useState<string | null>(null);\r\n  const { removeAlphaFromArrayBuffer } = useImageWorker();\r\n  const { loadImage } = useImageLoader();\r\n\r\n  const textureSize = useMemo(\r\n    () => materialDef.size ?? defaultTextureSize,\r\n    [materialDef]\r\n  );\r\n\r\n  const handleChange = useCallback<CanvasProps[\"onChange\"]>(\r\n    async (canvas) => {\r\n      const imageUrl = canvas.toDataURL({\r\n        top: canvasPadding,\r\n        left: canvasPadding,\r\n        width: textureSize[0],\r\n        height: textureSize[1],\r\n      });\r\n      setColorImageUrl(materialDef.name, imageUrl);\r\n    },\r\n    [textureSize, canvasPadding, setColorImageUrl, materialDef]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (skinImageUrl) {\r\n      let stale = false;\r\n\r\n      const generateImageUrl = async () => {\r\n        let arrayBuffer;\r\n        try {\r\n          arrayBuffer = await loadImage(skinImageUrl);\r\n        } catch (err) {\r\n          if (materialDef.hasDefault !== false) {\r\n            arrayBuffer = await loadImage(defaultSkinImageUrl);\r\n          } else {\r\n            return;\r\n          }\r\n        }\r\n        const outputImageUrl = await removeAlphaFromArrayBuffer(arrayBuffer);\r\n        if (!stale) {\r\n          setNoAlphaImageUrl(outputImageUrl);\r\n        }\r\n      };\r\n\r\n      generateImageUrl();\r\n\r\n      return () => {\r\n        stale = true;\r\n      };\r\n    } else {\r\n      setNoAlphaImageUrl(null);\r\n    }\r\n  }, [\r\n    materialDef,\r\n    skinImageUrl,\r\n    defaultSkinImageUrl,\r\n    removeAlphaFromArrayBuffer,\r\n    loadImage,\r\n  ]);\r\n\r\n  const canvasId = `${materialDef.name}:color`;\r\n\r\n  return textureSize ? (\r\n    <Canvas\r\n      key={canvasId}\r\n      canvasId={canvasId}\r\n      canvasType=\"color\"\r\n      onChange={handleChange}\r\n      baseImageUrl={noAlphaImageUrl}\r\n      textureSize={textureSize}\r\n    />\r\n  ) : null;\r\n}\r\n","import { useCallback, useEffect, useRef, useMemo, useState } from \"react\";\r\nimport Canvas, { CanvasProps } from \"./Canvas\";\r\nimport useImageWorker from \"./useImageWorker\";\r\nimport useSettings from \"./useSettings\";\r\nimport type { MaterialDefinition } from \"./Material\";\r\nimport useSkin from \"./useSkin\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport useImageLoader from \"./useImageLoader\";\r\n\r\nconst defaultTextureSize = [512, 512] as [number, number];\r\n\r\nexport default function MetallicCanvas({\r\n  materialDef,\r\n}: {\r\n  materialDef: MaterialDefinition;\r\n}) {\r\n  const { skinImageUrls, defaultSkinImageUrls } = useWarrior();\r\n  const skinImageUrl = skinImageUrls[materialDef.name];\r\n  const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\r\n  const { setMetallicImageUrl } = useSkin();\r\n  const { canvasPadding } = useSettings();\r\n  const [alphaImageUrl, setAlphaImageUrl] = useState<string | null>(null);\r\n  const runningChangeHandlers = useRef(0);\r\n  const {\r\n    convertGrayscaleImageUrlToMetallicRoughness,\r\n    convertArrayBufferAlphaToGrayscale,\r\n  } = useImageWorker();\r\n  const { loadImage } = useImageLoader();\r\n\r\n  const textureSize = useMemo(\r\n    () => materialDef.size ?? defaultTextureSize,\r\n    [materialDef]\r\n  );\r\n\r\n  const handleChange = useCallback<CanvasProps[\"onChange\"]>(\r\n    async (canvas) => {\r\n      runningChangeHandlers.current += 1;\r\n      const imageUrl = canvas.toDataURL({\r\n        top: canvasPadding,\r\n        left: canvasPadding,\r\n        width: textureSize[0],\r\n        height: textureSize[1],\r\n      });\r\n      let outputImageUrl;\r\n      try {\r\n        outputImageUrl = await convertGrayscaleImageUrlToMetallicRoughness(\r\n          imageUrl\r\n        );\r\n      } finally {\r\n        runningChangeHandlers.current -= 1;\r\n      }\r\n      if (runningChangeHandlers.current === 0) {\r\n        setMetallicImageUrl(materialDef.name, outputImageUrl);\r\n      }\r\n    },\r\n    [\r\n      textureSize,\r\n      canvasPadding,\r\n      setMetallicImageUrl,\r\n      convertGrayscaleImageUrlToMetallicRoughness,\r\n      materialDef,\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (skinImageUrl) {\r\n      let stale = false;\r\n\r\n      const generateImageUrl = async () => {\r\n        let arrayBuffer;\r\n        try {\r\n          arrayBuffer = await loadImage(skinImageUrl);\r\n        } catch (err) {\r\n          if (materialDef.hasDefault !== false) {\r\n            arrayBuffer = await loadImage(defaultSkinImageUrl);\r\n          } else {\r\n            return;\r\n          }\r\n        }\r\n        const outputImageUrl = await convertArrayBufferAlphaToGrayscale(\r\n          arrayBuffer\r\n        );\r\n        if (!stale) {\r\n          setAlphaImageUrl(outputImageUrl);\r\n        }\r\n      };\r\n\r\n      generateImageUrl();\r\n\r\n      return () => {\r\n        stale = true;\r\n      };\r\n    } else {\r\n      setAlphaImageUrl(null);\r\n    }\r\n  }, [\r\n    materialDef,\r\n    skinImageUrl,\r\n    defaultSkinImageUrl,\r\n    textureSize,\r\n    convertArrayBufferAlphaToGrayscale,\r\n    loadImage,\r\n  ]);\r\n\r\n  const canvasId = `${materialDef.name}:metallic`;\r\n\r\n  return textureSize ? (\r\n    <Canvas\r\n      key={canvasId}\r\n      canvasId={canvasId}\r\n      canvasType=\"metallic\"\r\n      onChange={handleChange}\r\n      baseImageUrl={alphaImageUrl}\r\n      textureSize={textureSize}\r\n      defaultDrawingMode\r\n    />\r\n  ) : null;\r\n}\r\n","import React from \"react\";\r\nimport getConfig from \"next/config\";\r\nimport ColorCanvas from \"./ColorCanvas\";\r\nimport MetallicCanvas from \"./MetallicCanvas\";\r\nimport useWarrior from \"./useWarrior\";\r\nimport { MaterialDefinition } from \"./Material\";\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst { materials } = publicRuntimeConfig;\r\n\r\nexport default function MaterialCanvases() {\r\n  const { actualModel } = useWarrior();\r\n  const materialDefs: MaterialDefinition[] = materials[actualModel];\r\n\r\n  return (\r\n    <>\r\n      {materialDefs.map((materialDef) => {\r\n        if (!materialDef) {\r\n          return null;\r\n        }\r\n        const hasMetallic = !(\r\n          materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1\r\n        );\r\n        return (\r\n          <React.Fragment key={`${actualModel}-${materialDef.name}`}>\r\n            <ColorCanvas materialDef={materialDef} />\r\n            {hasMetallic ? <MetallicCanvas materialDef={materialDef} /> : null}\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n","import { useQueryClient } from \"@tanstack/react-query\";\r\nimport { ReactNode, useMemo } from \"react\";\r\nimport { ImageLoaderContext } from \"./useImageLoader\";\r\nimport { imageUrlToArrayBuffer } from \"./imageUtils\";\r\n\r\nexport default function ImageLoaderProvider({\r\n  children,\r\n}: {\r\n  children: ReactNode;\r\n}) {\r\n  const queryClient = useQueryClient();\r\n  const context = useMemo(() => {\r\n    return {\r\n      async loadImage(imageUrl: string) {\r\n        if (imageUrl.startsWith(\"data:\")) {\r\n          return imageUrlToArrayBuffer(imageUrl);\r\n        } else {\r\n          const arrayBuffer = await queryClient.fetchQuery<ArrayBuffer>({\r\n            queryKey: [imageUrl],\r\n          });\r\n          return arrayBuffer;\r\n        }\r\n      },\r\n    };\r\n  }, [queryClient]);\r\n\r\n  return (\r\n    <ImageLoaderContext.Provider value={context}>\r\n      {children}\r\n    </ImageLoaderContext.Provider>\r\n  );\r\n}\r\n","import Head from \"next/head\";\r\nimport CanvasTools from \"../CanvasTools\";\r\nimport ToolsProvider from \"../ToolsProvider\";\r\nimport CanvasBackdrop from \"../CanvasBackdrop\";\r\nimport CanvasProvider from \"../CanvasProvider\";\r\nimport CanvasInteractions from \"../CanvasInteractions\";\r\nimport CanvasToggle from \"../CanvasToggle\";\r\nimport WarriorSelector from \"../WarriorSelector\";\r\nimport WarriorProvider from \"../WarriorProvider\";\r\nimport WarriorViewer from \"../WarriorViewer\";\r\nimport EnvironmentSelector from \"../EnvironmentSelector\";\r\nimport AnimationSelector from \"../AnimationSelector\";\r\nimport EnvironmentProvider from \"../EnvironmentProvider\";\r\nimport SkinProvider from \"../SkinProvider\";\r\nimport MaterialSelector from \"../MaterialSelector\";\r\nimport MaterialCanvases from \"../MaterialCanvases\";\r\nimport ImageLoaderProvider from \"../ImageLoaderProvider\";\r\nimport {\r\n  QueryClient,\r\n  QueryClientProvider,\r\n  QueryKey,\r\n} from \"@tanstack/react-query\";\r\nimport { imageUrlToArrayBuffer } from \"../imageUtils\";\r\n\r\nasync function imageFetcher({ queryKey }: { queryKey: QueryKey }) {\r\n  const [imageUrl] = queryKey as [string];\r\n  return imageUrlToArrayBuffer(imageUrl);\r\n}\r\n\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      queryFn: imageFetcher,\r\n      staleTime: Infinity,\r\n      cacheTime: 60000,\r\n      refetchOnWindowFocus: false,\r\n      refetchOnReconnect: false,\r\n    },\r\n  },\r\n});\r\n\r\nexport default function HomePage() {\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>T2 Model Viewer & Skinner</title>\r\n      </Head>\r\n      <QueryClientProvider client={queryClient}>\r\n        <main>\r\n          <ImageLoaderProvider>\r\n            <WarriorProvider>\r\n              <EnvironmentProvider>\r\n                <SkinProvider>\r\n                  <div className=\"Viewport\">\r\n                    <div className=\"ModelTools\">\r\n                      <div className=\"Field\">\r\n                        <EnvironmentSelector />\r\n                      </div>\r\n                      <div className=\"Field\">\r\n                        <AnimationSelector />\r\n                      </div>\r\n                    </div>\r\n                    <WarriorViewer />\r\n                  </div>\r\n                  <CanvasProvider>\r\n                    <ToolsProvider>\r\n                      <CanvasInteractions>\r\n                        <WarriorSelector />\r\n                        <div className=\"CanvasViewport\">\r\n                          <div className=\"CanvasSelector\">\r\n                            <CanvasToggle />\r\n                            <MaterialSelector />\r\n                          </div>\r\n                          <CanvasBackdrop />\r\n                          <MaterialCanvases />\r\n                        </div>\r\n                        <CanvasTools />\r\n                      </CanvasInteractions>\r\n                    </ToolsProvider>\r\n                  </CanvasProvider>\r\n                </SkinProvider>\r\n              </EnvironmentProvider>\r\n            </WarriorProvider>\r\n          </ImageLoaderProvider>\r\n        </main>\r\n      </QueryClientProvider>\r\n    </>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { ModelViewerElement } from \"@google/model-viewer\";\r\n\r\nexport const ModelViewerContext = React.createContext<{\r\n  modelViewer: ModelViewerElement;\r\n  model: NonNullable<ModelViewerElement[\"model\"]>;\r\n  isLoaded: boolean;\r\n} | null>(null);\r\nModelViewerContext.displayName = \"ModelViewerContext\";\r\n\r\nexport default function useModelViewer() {\r\n  const context = useContext(ModelViewerContext);\r\n  if (!context) {\r\n    throw new Error(\"No ModelViewerContext.Provider\");\r\n  }\r\n  return context;\r\n}\r\n","/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */\r\n\r\nvar fabric = fabric || { version: '5.2.1' };\r\nif (typeof exports !== 'undefined') {\r\n  exports.fabric = fabric;\r\n}\r\n/* _AMD_START_ */\r\nelse if (typeof define === 'function' && define.amd) {\r\n  define([], function() { return fabric; });\r\n}\r\n/* _AMD_END_ */\r\nif (typeof document !== 'undefined' && typeof window !== 'undefined') {\r\n  if (document instanceof (typeof HTMLDocument !== 'undefined' ? HTMLDocument : Document)) {\r\n    fabric.document = document;\r\n  }\r\n  else {\r\n    fabric.document = document.implementation.createHTMLDocument('');\r\n  }\r\n  fabric.window = window;\r\n}\r\nelse {\r\n  // assume we're running under node.js when document/window are not present\r\n  var jsdom = require('jsdom');\r\n  var virtualWindow = new jsdom.JSDOM(\r\n    decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'),\r\n    {\r\n      features: {\r\n        FetchExternalResources: ['img']\r\n      },\r\n      resources: 'usable'\r\n    }).window;\r\n  fabric.document = virtualWindow.document;\r\n  fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;\r\n  fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;\r\n  fabric.window = virtualWindow;\r\n  DOMParser = fabric.window.DOMParser;\r\n}\r\n\r\n/**\r\n * True when in environment that supports touch events\r\n * @type boolean\r\n */\r\nfabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document ||\r\n  (fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0);\r\n\r\n/**\r\n * True when in environment that's probably Node.js\r\n * @type boolean\r\n */\r\nfabric.isLikelyNode = typeof Buffer !== 'undefined' &&\r\n                      typeof window === 'undefined';\r\n\r\n\r\n\r\n/**\r\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\r\n */\r\nfabric.DPI = 96;\r\nfabric.reNum = '(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)';\r\nfabric.commaWsp = '(?:\\\\s+,?\\\\s*|,\\\\s*)';\r\nfabric.rePathCommand = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/ig;\r\nfabric.reNonWord = /[ \\n\\.,;!\\?\\-]/;\r\nfabric.fontPaths = { };\r\nfabric.iMatrix = [1, 0, 0, 1, 0, 0];\r\nfabric.svgNS = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\r\n * @since 1.7.14\r\n * @type Number\r\n * @default\r\n */\r\nfabric.perfLimitSizeTotal = 2097152;\r\n\r\n/**\r\n * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\r\n * @since 1.7.14\r\n * @type Number\r\n * @default\r\n */\r\nfabric.maxCacheSideLimit = 4096;\r\n\r\n/**\r\n * Lowest pixel limit for cache canvases, set at 256PX\r\n * @since 1.7.14\r\n * @type Number\r\n * @default\r\n */\r\nfabric.minCacheSideLimit = 256;\r\n\r\n/**\r\n * Cache Object for widths of chars in text rendering.\r\n */\r\nfabric.charWidthsCache = { };\r\n\r\n/**\r\n * if webgl is enabled and available, textureSize will determine the size\r\n * of the canvas backend\r\n * @since 2.0.0\r\n * @type Number\r\n * @default\r\n */\r\nfabric.textureSize = 2048;\r\n\r\n/**\r\n * When 'true', style information is not retained when copy/pasting text, making\r\n * pasted text use destination style.\r\n * Defaults to 'false'.\r\n * @type Boolean\r\n * @default\r\n */\r\nfabric.disableStyleCopyPaste = false;\r\n\r\n/**\r\n * Enable webgl for filtering picture is available\r\n * A filtering backend will be initialized, this will both take memory and\r\n * time since a default 2048x2048 canvas will be created for the gl context\r\n * @since 2.0.0\r\n * @type Boolean\r\n * @default\r\n */\r\nfabric.enableGLFiltering = true;\r\n\r\n/**\r\n * Device Pixel Ratio\r\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\r\n */\r\nfabric.devicePixelRatio = fabric.window.devicePixelRatio ||\r\n                          fabric.window.webkitDevicePixelRatio ||\r\n                          fabric.window.mozDevicePixelRatio ||\r\n                          1;\r\n/**\r\n * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\r\n * which is unitless and not rendered equally across browsers.\r\n *\r\n * Values that work quite well (as of October 2017) are:\r\n * - Chrome: 1.5\r\n * - Edge: 1.75\r\n * - Firefox: 0.9\r\n * - Safari: 0.95\r\n *\r\n * @since 2.0.0\r\n * @type Number\r\n * @default 1\r\n */\r\nfabric.browserShadowBlurConstant = 1;\r\n\r\n/**\r\n * This object contains the result of arc to bezier conversion for faster retrieving if the same arc needs to be converted again.\r\n * It was an internal variable, is accessible since version 2.3.4\r\n */\r\nfabric.arcToSegmentsCache = { };\r\n\r\n/**\r\n * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\r\n * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\r\n * you do not get any speed benefit and you get a big object in memory.\r\n * The object was a private variable before, while now is appended to the lib so that you have access to it and you\r\n * can eventually clear it.\r\n * It was an internal variable, is accessible since version 2.3.4\r\n */\r\nfabric.boundsOfCurveCache = { };\r\n\r\n/**\r\n * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\r\n * @default true\r\n */\r\nfabric.cachesBoundsOfCurve = true;\r\n\r\n/**\r\n * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\r\n * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\r\n * this has to be set before instantiating the filtering backend ( before filtering the first image )\r\n * @type Boolean\r\n * @default false\r\n */\r\nfabric.forceGLPutImageData = false;\r\n\r\nfabric.initFilterBackend = function() {\r\n  if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\r\n    console.log('max texture size: ' + fabric.maxTextureSize);\r\n    return (new fabric.WebglFilterBackend({ tileSize: fabric.textureSize }));\r\n  }\r\n  else if (fabric.Canvas2dFilterBackend) {\r\n    return (new fabric.Canvas2dFilterBackend());\r\n  }\r\n};\r\n(function() {\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} eventName\r\n   * @param {Function} handler\r\n   */\r\n  function _removeEventListener(eventName, handler) {\r\n    if (!this.__eventListeners[eventName]) {\r\n      return;\r\n    }\r\n    var eventListener = this.__eventListeners[eventName];\r\n    if (handler) {\r\n      eventListener[eventListener.indexOf(handler)] = false;\r\n    }\r\n    else {\r\n      fabric.util.array.fill(eventListener, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Observes specified event\r\n   * @memberOf fabric.Observable\r\n   * @alias on\r\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  function on(eventName, handler) {\r\n    if (!this.__eventListeners) {\r\n      this.__eventListeners = { };\r\n    }\r\n    // one object with key/value pairs was passed\r\n    if (arguments.length === 1) {\r\n      for (var prop in eventName) {\r\n        this.on(prop, eventName[prop]);\r\n      }\r\n    }\r\n    else {\r\n      if (!this.__eventListeners[eventName]) {\r\n        this.__eventListeners[eventName] = [];\r\n      }\r\n      this.__eventListeners[eventName].push(handler);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  function _once(eventName, handler) {\r\n    var _handler = function () {\r\n      handler.apply(this, arguments);\r\n      this.off(eventName, _handler);\r\n    }.bind(this);\r\n    this.on(eventName, _handler);\r\n  }\r\n\r\n  function once(eventName, handler) {\r\n    // one object with key/value pairs was passed\r\n    if (arguments.length === 1) {\r\n      for (var prop in eventName) {\r\n        _once.call(this, prop, eventName[prop]);\r\n      }\r\n    }\r\n    else {\r\n      _once.call(this, eventName, handler);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stops event observing for a particular event handler. Calling this method\r\n   * without arguments removes all handlers for all events\r\n   * @memberOf fabric.Observable\r\n   * @alias off\r\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n   * @param {Function} handler Function to be deleted from EventListeners\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  function off(eventName, handler) {\r\n    if (!this.__eventListeners) {\r\n      return this;\r\n    }\r\n\r\n    // remove all key/value pairs (event name -> event handler)\r\n    if (arguments.length === 0) {\r\n      for (eventName in this.__eventListeners) {\r\n        _removeEventListener.call(this, eventName);\r\n      }\r\n    }\r\n    // one object with key/value pairs was passed\r\n    else if (arguments.length === 1 && typeof arguments[0] === 'object') {\r\n      for (var prop in eventName) {\r\n        _removeEventListener.call(this, prop, eventName[prop]);\r\n      }\r\n    }\r\n    else {\r\n      _removeEventListener.call(this, eventName, handler);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Fires event with an optional options object\r\n   * @memberOf fabric.Observable\r\n   * @param {String} eventName Event name to fire\r\n   * @param {Object} [options] Options object\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  function fire(eventName, options) {\r\n    if (!this.__eventListeners) {\r\n      return this;\r\n    }\r\n\r\n    var listenersForEvent = this.__eventListeners[eventName];\r\n    if (!listenersForEvent) {\r\n      return this;\r\n    }\r\n\r\n    for (var i = 0, len = listenersForEvent.length; i < len; i++) {\r\n      listenersForEvent[i] && listenersForEvent[i].call(this, options || { });\r\n    }\r\n    this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\r\n      return value !== false;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @namespace fabric.Observable\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\r\n   * @see {@link http://fabricjs.com/events|Events demo}\r\n   */\r\n  fabric.Observable = {\r\n    fire: fire,\r\n    on: on,\r\n    once: once,\r\n    off: off,\r\n  };\r\n})();\r\n/**\r\n * @namespace fabric.Collection\r\n */\r\nfabric.Collection = {\r\n\r\n  _objects: [],\r\n\r\n  /**\r\n   * Adds objects to collection, Canvas or Group, then renders canvas\r\n   * (if `renderOnAddRemove` is not `false`).\r\n   * in case of Group no changes to bounding box are made.\r\n   * Objects should be instances of (or inherit from) fabric.Object\r\n   * Use of this function is highly discouraged for groups.\r\n   * you can add a bunch of objects with the add method but then you NEED\r\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n   * @param {...fabric.Object} object Zero or more fabric instances\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  add: function () {\r\n    this._objects.push.apply(this._objects, arguments);\r\n    if (this._onObjectAdded) {\r\n      for (var i = 0, length = arguments.length; i < length; i++) {\r\n        this._onObjectAdded(arguments[i]);\r\n      }\r\n    }\r\n    this.renderOnAddRemove && this.requestRenderAll();\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n   * An object should be an instance of (or inherit from) fabric.Object\r\n   * Use of this function is highly discouraged for groups.\r\n   * you can add a bunch of objects with the insertAt method but then you NEED\r\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n   * @param {Object} object Object to insert\r\n   * @param {Number} index Index to insert object at\r\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  insertAt: function (object, index, nonSplicing) {\r\n    var objects = this._objects;\r\n    if (nonSplicing) {\r\n      objects[index] = object;\r\n    }\r\n    else {\r\n      objects.splice(index, 0, object);\r\n    }\r\n    this._onObjectAdded && this._onObjectAdded(object);\r\n    this.renderOnAddRemove && this.requestRenderAll();\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n   * @param {...fabric.Object} object Zero or more fabric instances\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  remove: function() {\r\n    var objects = this._objects,\r\n        index, somethingRemoved = false;\r\n\r\n    for (var i = 0, length = arguments.length; i < length; i++) {\r\n      index = objects.indexOf(arguments[i]);\r\n\r\n      // only call onObjectRemoved if an object was actually removed\r\n      if (index !== -1) {\r\n        somethingRemoved = true;\r\n        objects.splice(index, 1);\r\n        this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\r\n      }\r\n    }\r\n\r\n    this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Executes given function for each object in this group\r\n   * @param {Function} callback\r\n   *                   Callback invoked with current object as first argument,\r\n   *                   index - as second and an array of all objects - as third.\r\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\r\n   *                   when no `context` argument is given\r\n   *\r\n   * @param {Object} context Context (aka thisObject)\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */\r\n  forEachObject: function(callback, context) {\r\n    var objects = this.getObjects();\r\n    for (var i = 0, len = objects.length; i < len; i++) {\r\n      callback.call(context, objects[i], i, objects);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Returns an array of children objects of this instance\r\n   * Type parameter introduced in 1.3.10\r\n   * since 2.3.5 this method return always a COPY of the array;\r\n   * @param {String} [type] When specified, only objects of this type are returned\r\n   * @return {Array}\r\n   */\r\n  getObjects: function(type) {\r\n    if (typeof type === 'undefined') {\r\n      return this._objects.concat();\r\n    }\r\n    return this._objects.filter(function(o) {\r\n      return o.type === type;\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Returns object at specified index\r\n   * @param {Number} index\r\n   * @return {Self} thisArg\r\n   */\r\n  item: function (index) {\r\n    return this._objects[index];\r\n  },\r\n\r\n  /**\r\n   * Returns true if collection contains no objects\r\n   * @return {Boolean} true if collection is empty\r\n   */\r\n  isEmpty: function () {\r\n    return this._objects.length === 0;\r\n  },\r\n\r\n  /**\r\n   * Returns a size of a collection (i.e: length of an array containing its objects)\r\n   * @return {Number} Collection size\r\n   */\r\n  size: function() {\r\n    return this._objects.length;\r\n  },\r\n\r\n  /**\r\n   * Returns true if collection contains an object\r\n   * @param {Object} object Object to check against\r\n   * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\r\n   * @return {Boolean} `true` if collection contains an object\r\n   */\r\n  contains: function (object, deep) {\r\n    if (this._objects.indexOf(object) > -1) {\r\n      return true;\r\n    }\r\n    else if (deep) {\r\n      return this._objects.some(function (obj) {\r\n        return typeof obj.contains === 'function' && obj.contains(object, true);\r\n      });\r\n    }\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * Returns number representation of a collection complexity\r\n   * @return {Number} complexity\r\n   */\r\n  complexity: function () {\r\n    return this._objects.reduce(function (memo, current) {\r\n      memo += current.complexity ? current.complexity() : 0;\r\n      return memo;\r\n    }, 0);\r\n  }\r\n};\r\n/**\r\n * @namespace fabric.CommonMethods\r\n */\r\nfabric.CommonMethods = {\r\n\r\n  /**\r\n   * Sets object's properties from options\r\n   * @param {Object} [options] Options object\r\n   */\r\n  _setOptions: function(options) {\r\n    for (var prop in options) {\r\n      this.set(prop, options[prop]);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object} [filler] Options object\r\n   * @param {String} [property] property to set the Gradient to\r\n   */\r\n  _initGradient: function(filler, property) {\r\n    if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\r\n      this.set(property, new fabric.Gradient(filler));\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object} [filler] Options object\r\n   * @param {String} [property] property to set the Pattern to\r\n   * @param {Function} [callback] callback to invoke after pattern load\r\n   */\r\n  _initPattern: function(filler, property, callback) {\r\n    if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\r\n      this.set(property, new fabric.Pattern(filler, callback));\r\n    }\r\n    else {\r\n      callback && callback();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _setObject: function(obj) {\r\n    for (var prop in obj) {\r\n      this._set(prop, obj[prop]);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  set: function(key, value) {\r\n    if (typeof key === 'object') {\r\n      this._setObject(key);\r\n    }\r\n    else {\r\n      this._set(key, value);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  _set: function(key, value) {\r\n    this[key] = value;\r\n  },\r\n\r\n  /**\r\n   * Toggles specified property from `true` to `false` or from `false` to `true`\r\n   * @param {String} property Property to toggle\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  toggle: function(property) {\r\n    var value = this.get(property);\r\n    if (typeof value === 'boolean') {\r\n      this.set(property, !value);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Basic getter\r\n   * @param {String} property Property name\r\n   * @return {*} value of a property\r\n   */\r\n  get: function(property) {\r\n    return this[property];\r\n  }\r\n};\r\n(function(global) {\r\n\r\n  var sqrt = Math.sqrt,\r\n      atan2 = Math.atan2,\r\n      pow = Math.pow,\r\n      PiBy180 = Math.PI / 180,\r\n      PiBy2 = Math.PI / 2;\r\n\r\n  /**\r\n   * @namespace fabric.util\r\n   */\r\n  fabric.util = {\r\n\r\n    /**\r\n     * Calculate the cos of an angle, avoiding returning floats for known results\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} angle the angle in radians or in degree\r\n     * @return {Number}\r\n     */\r\n    cos: function(angle) {\r\n      if (angle === 0) { return 1; }\r\n      if (angle < 0) {\r\n        // cos(a) = cos(-a)\r\n        angle = -angle;\r\n      }\r\n      var angleSlice = angle / PiBy2;\r\n      switch (angleSlice) {\r\n        case 1: case 3: return 0;\r\n        case 2: return -1;\r\n      }\r\n      return Math.cos(angle);\r\n    },\r\n\r\n    /**\r\n     * Calculate the sin of an angle, avoiding returning floats for known results\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} angle the angle in radians or in degree\r\n     * @return {Number}\r\n     */\r\n    sin: function(angle) {\r\n      if (angle === 0) { return 0; }\r\n      var angleSlice = angle / PiBy2, sign = 1;\r\n      if (angle < 0) {\r\n        // sin(-a) = -sin(a)\r\n        sign = -1;\r\n      }\r\n      switch (angleSlice) {\r\n        case 1: return sign;\r\n        case 2: return 0;\r\n        case 3: return -sign;\r\n      }\r\n      return Math.sin(angle);\r\n    },\r\n\r\n    /**\r\n     * Removes value from an array.\r\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} array\r\n     * @param {*} value\r\n     * @return {Array} original array\r\n     */\r\n    removeFromArray: function(array, value) {\r\n      var idx = array.indexOf(value);\r\n      if (idx !== -1) {\r\n        array.splice(idx, 1);\r\n      }\r\n      return array;\r\n    },\r\n\r\n    /**\r\n     * Returns random number between 2 specified ones.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} min lower limit\r\n     * @param {Number} max upper limit\r\n     * @return {Number} random value (between min and max)\r\n     */\r\n    getRandomInt: function(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    },\r\n\r\n    /**\r\n     * Transforms degrees to radians.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} degrees value in degrees\r\n     * @return {Number} value in radians\r\n     */\r\n    degreesToRadians: function(degrees) {\r\n      return degrees * PiBy180;\r\n    },\r\n\r\n    /**\r\n     * Transforms radians to degrees.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} radians value in radians\r\n     * @return {Number} value in degrees\r\n     */\r\n    radiansToDegrees: function(radians) {\r\n      return radians / PiBy180;\r\n    },\r\n\r\n    /**\r\n     * Rotates `point` around `origin` with `radians`\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Point} point The point to rotate\r\n     * @param {fabric.Point} origin The origin of the rotation\r\n     * @param {Number} radians The radians of the angle for the rotation\r\n     * @return {fabric.Point} The new rotated point\r\n     */\r\n    rotatePoint: function(point, origin, radians) {\r\n      var newPoint = new fabric.Point(point.x - origin.x, point.y - origin.y),\r\n          v = fabric.util.rotateVector(newPoint, radians);\r\n      return new fabric.Point(v.x, v.y).addEquals(origin);\r\n    },\r\n\r\n    /**\r\n     * Rotates `vector` with `radians`\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Object} vector The vector to rotate (x and y)\r\n     * @param {Number} radians The radians of the angle for the rotation\r\n     * @return {Object} The new rotated point\r\n     */\r\n    rotateVector: function(vector, radians) {\r\n      var sin = fabric.util.sin(radians),\r\n          cos = fabric.util.cos(radians),\r\n          rx = vector.x * cos - vector.y * sin,\r\n          ry = vector.x * sin + vector.y * cos;\r\n      return {\r\n        x: rx,\r\n        y: ry\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Creates a vetor from points represented as a point\r\n     * @static\r\n     * @memberOf fabric.util\r\n     *\r\n     * @typedef {Object} Point\r\n     * @property {number} x\r\n     * @property {number} y\r\n     *\r\n     * @param {Point} from\r\n     * @param {Point} to\r\n     * @returns {Point} vector\r\n     */\r\n    createVector: function (from, to) {\r\n      return new fabric.Point(to.x - from.x, to.y - from.y);\r\n    },\r\n\r\n    /**\r\n     * Calculates angle between 2 vectors using dot product\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point} a\r\n     * @param {Point} b\r\n     * @returns the angle in radian between the vectors\r\n     */\r\n    calcAngleBetweenVectors: function (a, b) {\r\n      return Math.acos((a.x * b.x + a.y * b.y) / (Math.hypot(a.x, a.y) * Math.hypot(b.x, b.y)));\r\n    },\r\n\r\n    /**\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point} v\r\n     * @returns {Point} vector representing the unit vector of pointing to the direction of `v`\r\n     */\r\n    getHatVector: function (v) {\r\n      return new fabric.Point(v.x, v.y).multiply(1 / Math.hypot(v.x, v.y));\r\n    },\r\n\r\n    /**\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point} A\r\n     * @param {Point} B\r\n     * @param {Point} C\r\n     * @returns {{ vector: Point, angle: number }} vector representing the bisector of A and A's angle\r\n     */\r\n    getBisector: function (A, B, C) {\r\n      var AB = fabric.util.createVector(A, B), AC = fabric.util.createVector(A, C);\r\n      var alpha = fabric.util.calcAngleBetweenVectors(AB, AC);\r\n      //  check if alpha is relative to AB->BC\r\n      var ro = fabric.util.calcAngleBetweenVectors(fabric.util.rotateVector(AB, alpha), AC);\r\n      var phi = alpha * (ro === 0 ? 1 : -1) / 2;\r\n      return {\r\n        vector: fabric.util.getHatVector(fabric.util.rotateVector(AB, phi)),\r\n        angle: alpha\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Project stroke width on points returning 2 projections for each point as follows:\r\n     * - `miter`: 2 points corresponding to the outer boundary and the inner boundary of stroke.\r\n     * - `bevel`: 2 points corresponding to the bevel boundaries, tangent to the bisector.\r\n     * - `round`: same as `bevel`\r\n     * Used to calculate object's bounding box\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point[]} points\r\n     * @param {Object} options\r\n     * @param {number} options.strokeWidth\r\n     * @param {'miter'|'bevel'|'round'} options.strokeLineJoin\r\n     * @param {number} options.strokeMiterLimit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\r\n     * @param {boolean} options.strokeUniform\r\n     * @param {number} options.scaleX\r\n     * @param {number} options.scaleY\r\n     * @param {boolean} [openPath] whether the shape is open or not, affects the calculations of the first and last points\r\n     * @returns {fabric.Point[]} array of size 2n/4n of all suspected points\r\n     */\r\n    projectStrokeOnPoints: function (points, options, openPath) {\r\n      var coords = [], s = options.strokeWidth / 2,\r\n          strokeUniformScalar = options.strokeUniform ?\r\n            new fabric.Point(1 / options.scaleX, 1 / options.scaleY) : new fabric.Point(1, 1),\r\n          getStrokeHatVector = function (v) {\r\n            var scalar = s / (Math.hypot(v.x, v.y));\r\n            return new fabric.Point(v.x * scalar * strokeUniformScalar.x, v.y * scalar * strokeUniformScalar.y);\r\n          };\r\n      if (points.length <= 1) {return coords;}\r\n      points.forEach(function (p, index) {\r\n        var A = new fabric.Point(p.x, p.y), B, C;\r\n        if (index === 0) {\r\n          C = points[index + 1];\r\n          B = openPath ? getStrokeHatVector(fabric.util.createVector(C, A)).addEquals(A) : points[points.length - 1];\r\n        }\r\n        else if (index === points.length - 1) {\r\n          B = points[index - 1];\r\n          C = openPath ? getStrokeHatVector(fabric.util.createVector(B, A)).addEquals(A) : points[0];\r\n        }\r\n        else {\r\n          B = points[index - 1];\r\n          C = points[index + 1];\r\n        }\r\n        var bisector = fabric.util.getBisector(A, B, C),\r\n            bisectorVector = bisector.vector,\r\n            alpha = bisector.angle,\r\n            scalar,\r\n            miterVector;\r\n        if (options.strokeLineJoin === 'miter') {\r\n          scalar = -s / Math.sin(alpha / 2);\r\n          miterVector = new fabric.Point(\r\n            bisectorVector.x * scalar * strokeUniformScalar.x,\r\n            bisectorVector.y * scalar * strokeUniformScalar.y\r\n          );\r\n          if (Math.hypot(miterVector.x, miterVector.y) / s <= options.strokeMiterLimit) {\r\n            coords.push(A.add(miterVector));\r\n            coords.push(A.subtract(miterVector));\r\n            return;\r\n          }\r\n        }\r\n        scalar = -s * Math.SQRT2;\r\n        miterVector = new fabric.Point(\r\n          bisectorVector.x * scalar * strokeUniformScalar.x,\r\n          bisectorVector.y * scalar * strokeUniformScalar.y\r\n        );\r\n        coords.push(A.add(miterVector));\r\n        coords.push(A.subtract(miterVector));\r\n      });\r\n      return coords;\r\n    },\r\n\r\n    /**\r\n     * Apply transform t to point p\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {fabric.Point} p The point to transform\r\n     * @param  {Array} t The transform\r\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\r\n     * @return {fabric.Point} The transformed point\r\n     */\r\n    transformPoint: function(p, t, ignoreOffset) {\r\n      if (ignoreOffset) {\r\n        return new fabric.Point(\r\n          t[0] * p.x + t[2] * p.y,\r\n          t[1] * p.x + t[3] * p.y\r\n        );\r\n      }\r\n      return new fabric.Point(\r\n        t[0] * p.x + t[2] * p.y + t[4],\r\n        t[1] * p.x + t[3] * p.y + t[5]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Returns coordinates of points's bounding rectangle (left, top, width, height)\r\n     * @param {Array} points 4 points array\r\n     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix\r\n     * @return {Object} Object with left, top, width, height properties\r\n     */\r\n    makeBoundingBoxFromPoints: function(points, transform) {\r\n      if (transform) {\r\n        for (var i = 0; i < points.length; i++) {\r\n          points[i] = fabric.util.transformPoint(points[i], transform);\r\n        }\r\n      }\r\n      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],\r\n          minX = fabric.util.array.min(xPoints),\r\n          maxX = fabric.util.array.max(xPoints),\r\n          width = maxX - minX,\r\n          yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],\r\n          minY = fabric.util.array.min(yPoints),\r\n          maxY = fabric.util.array.max(yPoints),\r\n          height = maxY - minY;\r\n\r\n      return {\r\n        left: minX,\r\n        top: minY,\r\n        width: width,\r\n        height: height\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Invert transformation t\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} t The transform\r\n     * @return {Array} The inverted transform\r\n     */\r\n    invertTransform: function(t) {\r\n      var a = 1 / (t[0] * t[3] - t[1] * t[2]),\r\n          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],\r\n          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);\r\n      r[4] = -o.x;\r\n      r[5] = -o.y;\r\n      return r;\r\n    },\r\n\r\n    /**\r\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number|String} number number to operate on\r\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\r\n     * @return {Number}\r\n     */\r\n    toFixed: function(number, fractionDigits) {\r\n      return parseFloat(Number(number).toFixed(fractionDigits));\r\n    },\r\n\r\n    /**\r\n     * Converts from attribute value to pixel value if applicable.\r\n     * Returns converted pixels or original value not converted.\r\n     * @param {Number|String} value number to operate on\r\n     * @param {Number} fontSize\r\n     * @return {Number|String}\r\n     */\r\n    parseUnit: function(value, fontSize) {\r\n      var unit = /\\D{0,2}$/.exec(value),\r\n          number = parseFloat(value);\r\n      if (!fontSize) {\r\n        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\r\n      }\r\n      switch (unit[0]) {\r\n        case 'mm':\r\n          return number * fabric.DPI / 25.4;\r\n\r\n        case 'cm':\r\n          return number * fabric.DPI / 2.54;\r\n\r\n        case 'in':\r\n          return number * fabric.DPI;\r\n\r\n        case 'pt':\r\n          return number * fabric.DPI / 72; // or * 4 / 3\r\n\r\n        case 'pc':\r\n          return number * fabric.DPI / 72 * 12; // or * 16\r\n\r\n        case 'em':\r\n          return number * fontSize;\r\n\r\n        default:\r\n          return number;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Function which always returns `false`.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {Boolean}\r\n     */\r\n    falseFunction: function() {\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Returns klass \"Class\" object of given namespace\r\n     * @memberOf fabric.util\r\n     * @param {String} type Type of object (eg. 'circle')\r\n     * @param {String} namespace Namespace to get klass \"Class\" object from\r\n     * @return {Object} klass \"Class\"\r\n     */\r\n    getKlass: function(type, namespace) {\r\n      // capitalize first letter only\r\n      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\r\n      return fabric.util.resolveNamespace(namespace)[type];\r\n    },\r\n\r\n    /**\r\n     * Returns array of attributes for given svg that fabric parses\r\n     * @memberOf fabric.util\r\n     * @param {String} type Type of svg element (eg. 'circle')\r\n     * @return {Array} string names of supported attributes\r\n     */\r\n    getSvgAttributes: function(type) {\r\n      var attributes = [\r\n        'instantiated_by_use',\r\n        'style',\r\n        'id',\r\n        'class'\r\n      ];\r\n      switch (type) {\r\n        case 'linearGradient':\r\n          attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);\r\n          break;\r\n        case 'radialGradient':\r\n          attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);\r\n          break;\r\n        case 'stop':\r\n          attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);\r\n          break;\r\n      }\r\n      return attributes;\r\n    },\r\n\r\n    /**\r\n     * Returns object of given namespace\r\n     * @memberOf fabric.util\r\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\r\n     * @return {Object} Object for given namespace (default fabric)\r\n     */\r\n    resolveNamespace: function(namespace) {\r\n      if (!namespace) {\r\n        return fabric;\r\n      }\r\n\r\n      var parts = namespace.split('.'),\r\n          len = parts.length, i,\r\n          obj = global || fabric.window;\r\n\r\n      for (i = 0; i < len; ++i) {\r\n        obj = obj[parts[i]];\r\n      }\r\n\r\n      return obj;\r\n    },\r\n\r\n    /**\r\n     * Loads image element from given url and passes it to a callback\r\n     * @memberOf fabric.util\r\n     * @param {String} url URL representing an image\r\n     * @param {Function} callback Callback; invoked with loaded image\r\n     * @param {*} [context] Context to invoke callback in\r\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\r\n     */\r\n    loadImage: function(url, callback, context, crossOrigin) {\r\n      if (!url) {\r\n        callback && callback.call(context, url);\r\n        return;\r\n      }\r\n\r\n      var img = fabric.util.createImage();\r\n\r\n      /** @ignore */\r\n      var onLoadCallback = function () {\r\n        callback && callback.call(context, img, false);\r\n        img = img.onload = img.onerror = null;\r\n      };\r\n\r\n      img.onload = onLoadCallback;\r\n      /** @ignore */\r\n      img.onerror = function() {\r\n        fabric.log('Error loading ' + img.src);\r\n        callback && callback.call(context, null, true);\r\n        img = img.onload = img.onerror = null;\r\n      };\r\n\r\n      // data-urls appear to be buggy with crossOrigin\r\n      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\r\n      // see https://code.google.com/p/chromium/issues/detail?id=315152\r\n      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\r\n      // crossOrigin null is the same as not set.\r\n      if (url.indexOf('data') !== 0 &&\r\n        crossOrigin !== undefined &&\r\n        crossOrigin !== null) {\r\n        img.crossOrigin = crossOrigin;\r\n      }\r\n\r\n      // IE10 / IE11-Fix: SVG contents from data: URI\r\n      // will only be available if the IMG is present\r\n      // in the DOM (and visible)\r\n      if (url.substring(0,14) === 'data:image/svg') {\r\n        img.onload = null;\r\n        fabric.util.loadImageInDom(img, onLoadCallback);\r\n      }\r\n\r\n      img.src = url;\r\n    },\r\n\r\n    /**\r\n     * Attaches SVG image with data: URL to the dom\r\n     * @memberOf fabric.util\r\n     * @param {Object} img Image object with data:image/svg src\r\n     * @param {Function} callback Callback; invoked with loaded image\r\n     * @return {Object} DOM element (div containing the SVG image)\r\n     */\r\n    loadImageInDom: function(img, onLoadCallback) {\r\n      var div = fabric.document.createElement('div');\r\n      div.style.width = div.style.height = '1px';\r\n      div.style.left = div.style.top = '-100%';\r\n      div.style.position = 'absolute';\r\n      div.appendChild(img);\r\n      fabric.document.querySelector('body').appendChild(div);\r\n      /**\r\n       * Wrap in function to:\r\n       *   1. Call existing callback\r\n       *   2. Cleanup DOM\r\n       */\r\n      img.onload = function () {\r\n        onLoadCallback();\r\n        div.parentNode.removeChild(div);\r\n        div = null;\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Creates corresponding fabric instances from their object representations\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} objects Objects to enliven\r\n     * @param {Function} callback Callback to invoke when all objects are created\r\n     * @param {String} namespace Namespace to get klass \"Class\" object from\r\n     * @param {Function} reviver Method for further parsing of object elements,\r\n     * called after each fabric object created.\r\n     */\r\n    enlivenObjects: function(objects, callback, namespace, reviver) {\r\n      objects = objects || [];\r\n\r\n      var enlivenedObjects = [],\r\n          numLoadedObjects = 0,\r\n          numTotalObjects = objects.length;\r\n\r\n      function onLoaded() {\r\n        if (++numLoadedObjects === numTotalObjects) {\r\n          callback && callback(enlivenedObjects.filter(function(obj) {\r\n            // filter out undefined objects (objects that gave error)\r\n            return obj;\r\n          }));\r\n        }\r\n      }\r\n\r\n      if (!numTotalObjects) {\r\n        callback && callback(enlivenedObjects);\r\n        return;\r\n      }\r\n\r\n      objects.forEach(function (o, index) {\r\n        // if sparse array\r\n        if (!o || !o.type) {\r\n          onLoaded();\r\n          return;\r\n        }\r\n        var klass = fabric.util.getKlass(o.type, namespace);\r\n        klass.fromObject(o, function (obj, error) {\r\n          error || (enlivenedObjects[index] = obj);\r\n          reviver && reviver(o, obj, error);\r\n          onLoaded();\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\r\n     * @see {@link fabric.Object.ENLIVEN_PROPS}\r\n     * @param {Object} object\r\n     * @param {Object} [context] assign enlived props to this object (pass null to skip this)\r\n     * @param {(objects:fabric.Object[]) => void} callback\r\n     */\r\n    enlivenObjectEnlivables: function (object, context, callback) {\r\n      var enlivenProps = fabric.Object.ENLIVEN_PROPS.filter(function (key) { return !!object[key]; });\r\n      fabric.util.enlivenObjects(enlivenProps.map(function (key) { return object[key]; }), function (enlivedProps) {\r\n        var objects = {};\r\n        enlivenProps.forEach(function (key, index) {\r\n          objects[key] = enlivedProps[index];\r\n          context && (context[key] = enlivedProps[index]);\r\n        });\r\n        callback && callback(objects);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Create and wait for loading of patterns\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} patterns Objects to enliven\r\n     * @param {Function} callback Callback to invoke when all objects are created\r\n     * called after each fabric object created.\r\n     */\r\n    enlivenPatterns: function(patterns, callback) {\r\n      patterns = patterns || [];\r\n\r\n      function onLoaded() {\r\n        if (++numLoadedPatterns === numPatterns) {\r\n          callback && callback(enlivenedPatterns);\r\n        }\r\n      }\r\n\r\n      var enlivenedPatterns = [],\r\n          numLoadedPatterns = 0,\r\n          numPatterns = patterns.length;\r\n\r\n      if (!numPatterns) {\r\n        callback && callback(enlivenedPatterns);\r\n        return;\r\n      }\r\n\r\n      patterns.forEach(function (p, index) {\r\n        if (p && p.source) {\r\n          new fabric.Pattern(p, function(pattern) {\r\n            enlivenedPatterns[index] = pattern;\r\n            onLoaded();\r\n          });\r\n        }\r\n        else {\r\n          enlivenedPatterns[index] = p;\r\n          onLoaded();\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Groups SVG elements (usually those retrieved from SVG document)\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} elements SVG elements to group\r\n     * @param {Object} [options] Options object\r\n     * @param {String} path Value to set sourcePath to\r\n     * @return {fabric.Object|fabric.Group}\r\n     */\r\n    groupSVGElements: function(elements, options, path) {\r\n      var object;\r\n      if (elements && elements.length === 1) {\r\n        return elements[0];\r\n      }\r\n      if (options) {\r\n        if (options.width && options.height) {\r\n          options.centerPoint = {\r\n            x: options.width / 2,\r\n            y: options.height / 2\r\n          };\r\n        }\r\n        else {\r\n          delete options.width;\r\n          delete options.height;\r\n        }\r\n      }\r\n      object = new fabric.Group(elements, options);\r\n      if (typeof path !== 'undefined') {\r\n        object.sourcePath = path;\r\n      }\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Populates an object with properties of another object\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Object} source Source object\r\n     * @param {Object} destination Destination object\r\n     * @return {Array} properties Properties names to include\r\n     */\r\n    populateWithProperties: function(source, destination, properties) {\r\n      if (properties && Array.isArray(properties)) {\r\n        for (var i = 0, len = properties.length; i < len; i++) {\r\n          if (properties[i] in source) {\r\n            destination[properties[i]] = source[properties[i]];\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Creates canvas element\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {CanvasElement} initialized canvas element\r\n     */\r\n    createCanvasElement: function() {\r\n      return fabric.document.createElement('canvas');\r\n    },\r\n\r\n    /**\r\n     * Creates a canvas element that is a copy of another and is also painted\r\n     * @param {CanvasElement} canvas to copy size and content of\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {CanvasElement} initialized canvas element\r\n     */\r\n    copyCanvasElement: function(canvas) {\r\n      var newCanvas = fabric.util.createCanvasElement();\r\n      newCanvas.width = canvas.width;\r\n      newCanvas.height = canvas.height;\r\n      newCanvas.getContext('2d').drawImage(canvas, 0, 0);\r\n      return newCanvas;\r\n    },\r\n\r\n    /**\r\n     * since 2.6.0 moved from canvas instance to utility.\r\n     * @param {CanvasElement} canvasEl to copy size and content of\r\n     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\r\n     * @param {Number} quality <= 1 and > 0\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {String} data url\r\n     */\r\n    toDataURL: function(canvasEl, format, quality) {\r\n      return canvasEl.toDataURL('image/' + format, quality);\r\n    },\r\n\r\n    /**\r\n     * Creates image element (works on client and node)\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {HTMLImageElement} HTML image element\r\n     */\r\n    createImage: function() {\r\n      return fabric.document.createElement('img');\r\n    },\r\n\r\n    /**\r\n     * Multiply matrix A by matrix B to nest transformations\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Array} a First transformMatrix\r\n     * @param  {Array} b Second transformMatrix\r\n     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\r\n     * @return {Array} The product of the two transform matrices\r\n     */\r\n    multiplyTransformMatrices: function(a, b, is2x2) {\r\n      // Matrix multiply a * b\r\n      return [\r\n        a[0] * b[0] + a[2] * b[1],\r\n        a[1] * b[0] + a[3] * b[1],\r\n        a[0] * b[2] + a[2] * b[3],\r\n        a[1] * b[2] + a[3] * b[3],\r\n        is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\r\n        is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\r\n      ];\r\n    },\r\n\r\n    /**\r\n     * Decomposes standard 2x3 matrix into transform components\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Array} a transformMatrix\r\n     * @return {Object} Components of transform\r\n     */\r\n    qrDecompose: function(a) {\r\n      var angle = atan2(a[1], a[0]),\r\n          denom = pow(a[0], 2) + pow(a[1], 2),\r\n          scaleX = sqrt(denom),\r\n          scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,\r\n          skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);\r\n      return {\r\n        angle: angle / PiBy180,\r\n        scaleX: scaleX,\r\n        scaleY: scaleY,\r\n        skewX: skewX / PiBy180,\r\n        skewY: 0,\r\n        translateX: a[4],\r\n        translateY: a[5]\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns a transform matrix starting from an object of the same kind of\r\n     * the one returned from qrDecompose, useful also if you want to calculate some\r\n     * transformations from an object that is not enlived yet\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Object} options\r\n     * @param  {Number} [options.angle] angle in degrees\r\n     * @return {Number[]} transform matrix\r\n     */\r\n    calcRotateMatrix: function(options) {\r\n      if (!options.angle) {\r\n        return fabric.iMatrix.concat();\r\n      }\r\n      var theta = fabric.util.degreesToRadians(options.angle),\r\n          cos = fabric.util.cos(theta),\r\n          sin = fabric.util.sin(theta);\r\n      return [cos, sin, -sin, cos, 0, 0];\r\n    },\r\n\r\n    /**\r\n     * Returns a transform matrix starting from an object of the same kind of\r\n     * the one returned from qrDecompose, useful also if you want to calculate some\r\n     * transformations from an object that is not enlived yet.\r\n     * is called DimensionsTransformMatrix because those properties are the one that influence\r\n     * the size of the resulting box of the object.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Object} options\r\n     * @param  {Number} [options.scaleX]\r\n     * @param  {Number} [options.scaleY]\r\n     * @param  {Boolean} [options.flipX]\r\n     * @param  {Boolean} [options.flipY]\r\n     * @param  {Number} [options.skewX]\r\n     * @param  {Number} [options.skewY]\r\n     * @return {Number[]} transform matrix\r\n     */\r\n    calcDimensionsMatrix: function(options) {\r\n      var scaleX = typeof options.scaleX === 'undefined' ? 1 : options.scaleX,\r\n          scaleY = typeof options.scaleY === 'undefined' ? 1 : options.scaleY,\r\n          scaleMatrix = [\r\n            options.flipX ? -scaleX : scaleX,\r\n            0,\r\n            0,\r\n            options.flipY ? -scaleY : scaleY,\r\n            0,\r\n            0],\r\n          multiply = fabric.util.multiplyTransformMatrices,\r\n          degreesToRadians = fabric.util.degreesToRadians;\r\n      if (options.skewX) {\r\n        scaleMatrix = multiply(\r\n          scaleMatrix,\r\n          [1, 0, Math.tan(degreesToRadians(options.skewX)), 1],\r\n          true);\r\n      }\r\n      if (options.skewY) {\r\n        scaleMatrix = multiply(\r\n          scaleMatrix,\r\n          [1, Math.tan(degreesToRadians(options.skewY)), 0, 1],\r\n          true);\r\n      }\r\n      return scaleMatrix;\r\n    },\r\n\r\n    /**\r\n     * Returns a transform matrix starting from an object of the same kind of\r\n     * the one returned from qrDecompose, useful also if you want to calculate some\r\n     * transformations from an object that is not enlived yet\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Object} options\r\n     * @param  {Number} [options.angle]\r\n     * @param  {Number} [options.scaleX]\r\n     * @param  {Number} [options.scaleY]\r\n     * @param  {Boolean} [options.flipX]\r\n     * @param  {Boolean} [options.flipY]\r\n     * @param  {Number} [options.skewX]\r\n     * @param  {Number} [options.skewX]\r\n     * @param  {Number} [options.translateX]\r\n     * @param  {Number} [options.translateY]\r\n     * @return {Number[]} transform matrix\r\n     */\r\n    composeMatrix: function(options) {\r\n      var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0],\r\n          multiply = fabric.util.multiplyTransformMatrices;\r\n      if (options.angle) {\r\n        matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));\r\n      }\r\n      if (options.scaleX !== 1 || options.scaleY !== 1 ||\r\n          options.skewX || options.skewY || options.flipX || options.flipY) {\r\n        matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));\r\n      }\r\n      return matrix;\r\n    },\r\n\r\n    /**\r\n     * reset an object transform state to neutral. Top and left are not accounted for\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {fabric.Object} target object to transform\r\n     */\r\n    resetObjectTransform: function (target) {\r\n      target.scaleX = 1;\r\n      target.scaleY = 1;\r\n      target.skewX = 0;\r\n      target.skewY = 0;\r\n      target.flipX = false;\r\n      target.flipY = false;\r\n      target.rotate(0);\r\n    },\r\n\r\n    /**\r\n     * Extract Object transform values\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {fabric.Object} target object to read from\r\n     * @return {Object} Components of transform\r\n     */\r\n    saveObjectTransform: function (target) {\r\n      return {\r\n        scaleX: target.scaleX,\r\n        scaleY: target.scaleY,\r\n        skewX: target.skewX,\r\n        skewY: target.skewY,\r\n        angle: target.angle,\r\n        left: target.left,\r\n        flipX: target.flipX,\r\n        flipY: target.flipY,\r\n        top: target.top\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns true if context has transparent pixel\r\n     * at specified location (taking tolerance into account)\r\n     * @param {CanvasRenderingContext2D} ctx context\r\n     * @param {Number} x x coordinate\r\n     * @param {Number} y y coordinate\r\n     * @param {Number} tolerance Tolerance\r\n     */\r\n    isTransparent: function(ctx, x, y, tolerance) {\r\n\r\n      // If tolerance is > 0 adjust start coords to take into account.\r\n      // If moves off Canvas fix to 0\r\n      if (tolerance > 0) {\r\n        if (x > tolerance) {\r\n          x -= tolerance;\r\n        }\r\n        else {\r\n          x = 0;\r\n        }\r\n        if (y > tolerance) {\r\n          y -= tolerance;\r\n        }\r\n        else {\r\n          y = 0;\r\n        }\r\n      }\r\n\r\n      var _isTransparent = true, i, temp,\r\n          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1),\r\n          l = imageData.data.length;\r\n\r\n      // Split image data - for tolerance > 1, pixelDataSize = 4;\r\n      for (i = 3; i < l; i += 4) {\r\n        temp = imageData.data[i];\r\n        _isTransparent = temp <= 0;\r\n        if (_isTransparent === false) {\r\n          break; // Stop if colour found\r\n        }\r\n      }\r\n\r\n      imageData = null;\r\n\r\n      return _isTransparent;\r\n    },\r\n\r\n    /**\r\n     * Parse preserveAspectRatio attribute from element\r\n     * @param {string} attribute to be parsed\r\n     * @return {Object} an object containing align and meetOrSlice attribute\r\n     */\r\n    parsePreserveAspectRatioAttribute: function(attribute) {\r\n      var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',\r\n          aspectRatioAttrs = attribute.split(' '), align;\r\n\r\n      if (aspectRatioAttrs && aspectRatioAttrs.length) {\r\n        meetOrSlice = aspectRatioAttrs.pop();\r\n        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {\r\n          align = meetOrSlice;\r\n          meetOrSlice = 'meet';\r\n        }\r\n        else if (aspectRatioAttrs.length) {\r\n          align = aspectRatioAttrs.pop();\r\n        }\r\n      }\r\n      //divide align in alignX and alignY\r\n      alignX = align !== 'none' ? align.slice(1, 4) : 'none';\r\n      alignY = align !== 'none' ? align.slice(5, 8) : 'none';\r\n      return {\r\n        meetOrSlice: meetOrSlice,\r\n        alignX: alignX,\r\n        alignY: alignY\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Clear char widths cache for the given font family or all the cache if no\r\n     * fontFamily is specified.\r\n     * Use it if you know you are loading fonts in a lazy way and you are not waiting\r\n     * for custom fonts to load properly when adding text objects to the canvas.\r\n     * If a text object is added when its own font is not loaded yet, you will get wrong\r\n     * measurement and so wrong bounding boxes.\r\n     * After the font cache is cleared, either change the textObject text content or call\r\n     * initDimensions() to trigger a recalculation\r\n     * @memberOf fabric.util\r\n     * @param {String} [fontFamily] font family to clear\r\n     */\r\n    clearFabricFontCache: function(fontFamily) {\r\n      fontFamily = (fontFamily || '').toLowerCase();\r\n      if (!fontFamily) {\r\n        fabric.charWidthsCache = { };\r\n      }\r\n      else if (fabric.charWidthsCache[fontFamily]) {\r\n        delete fabric.charWidthsCache[fontFamily];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Given current aspect ratio, determines the max width and height that can\r\n     * respect the total allowed area for the cache.\r\n     * @memberOf fabric.util\r\n     * @param {Number} ar aspect ratio\r\n     * @param {Number} maximumArea Maximum area you want to achieve\r\n     * @return {Object.x} Limited dimensions by X\r\n     * @return {Object.y} Limited dimensions by Y\r\n     */\r\n    limitDimsByArea: function(ar, maximumArea) {\r\n      var roughWidth = Math.sqrt(maximumArea * ar),\r\n          perfLimitSizeY = Math.floor(maximumArea / roughWidth);\r\n      return { x: Math.floor(roughWidth), y: perfLimitSizeY };\r\n    },\r\n\r\n    capValue: function(min, value, max) {\r\n      return Math.max(min, Math.min(value, max));\r\n    },\r\n\r\n    /**\r\n     * Finds the scale for the object source to fit inside the object destination,\r\n     * keeping aspect ratio intact.\r\n     * respect the total allowed area for the cache.\r\n     * @memberOf fabric.util\r\n     * @param {Object | fabric.Object} source\r\n     * @param {Number} source.height natural unscaled height of the object\r\n     * @param {Number} source.width natural unscaled width of the object\r\n     * @param {Object | fabric.Object} destination\r\n     * @param {Number} destination.height natural unscaled height of the object\r\n     * @param {Number} destination.width natural unscaled width of the object\r\n     * @return {Number} scale factor to apply to source to fit into destination\r\n     */\r\n    findScaleToFit: function(source, destination) {\r\n      return Math.min(destination.width / source.width, destination.height / source.height);\r\n    },\r\n\r\n    /**\r\n     * Finds the scale for the object source to cover entirely the object destination,\r\n     * keeping aspect ratio intact.\r\n     * respect the total allowed area for the cache.\r\n     * @memberOf fabric.util\r\n     * @param {Object | fabric.Object} source\r\n     * @param {Number} source.height natural unscaled height of the object\r\n     * @param {Number} source.width natural unscaled width of the object\r\n     * @param {Object | fabric.Object} destination\r\n     * @param {Number} destination.height natural unscaled height of the object\r\n     * @param {Number} destination.width natural unscaled width of the object\r\n     * @return {Number} scale factor to apply to source to cover destination\r\n     */\r\n    findScaleToCover: function(source, destination) {\r\n      return Math.max(destination.width / source.width, destination.height / source.height);\r\n    },\r\n\r\n    /**\r\n     * given an array of 6 number returns something like `\"matrix(...numbers)\"`\r\n     * @memberOf fabric.util\r\n     * @param {Array} transform an array with 6 numbers\r\n     * @return {String} transform matrix for svg\r\n     * @return {Object.y} Limited dimensions by Y\r\n     */\r\n    matrixToSVG: function(transform) {\r\n      return 'matrix(' + transform.map(function(value) {\r\n        return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\r\n      }).join(' ') + ')';\r\n    },\r\n\r\n    /**\r\n     * given an object and a transform, apply the inverse transform to the object,\r\n     * this is equivalent to remove from that object that transformation, so that\r\n     * added in a space with the removed transform, the object will be the same as before.\r\n     * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\r\n     * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg\r\n     * in the opposite direction.\r\n     * This util is used to add objects inside transformed groups or nested groups.\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} object the object you want to transform\r\n     * @param {Array} transform the destination transform\r\n     */\r\n    removeTransformFromObject: function(object, transform) {\r\n      var inverted = fabric.util.invertTransform(transform),\r\n          finalTransform = fabric.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());\r\n      fabric.util.applyTransformToObject(object, finalTransform);\r\n    },\r\n\r\n    /**\r\n     * given an object and a transform, apply the transform to the object.\r\n     * this is equivalent to change the space where the object is drawn.\r\n     * Adding to an object a transform that scale by 2 is like scaling it by 2.\r\n     * This is used when removing an object from an active selection for example.\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} object the object you want to transform\r\n     * @param {Array} transform the destination transform\r\n     */\r\n    addTransformToObject: function(object, transform) {\r\n      fabric.util.applyTransformToObject(\r\n        object,\r\n        fabric.util.multiplyTransformMatrices(transform, object.calcOwnMatrix())\r\n      );\r\n    },\r\n\r\n    /**\r\n     * discard an object transform state and apply the one from the matrix.\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} object the object you want to transform\r\n     * @param {Array} transform the destination transform\r\n     */\r\n    applyTransformToObject: function(object, transform) {\r\n      var options = fabric.util.qrDecompose(transform),\r\n          center = new fabric.Point(options.translateX, options.translateY);\r\n      object.flipX = false;\r\n      object.flipY = false;\r\n      object.set('scaleX', options.scaleX);\r\n      object.set('scaleY', options.scaleY);\r\n      object.skewX = options.skewX;\r\n      object.skewY = options.skewY;\r\n      object.angle = options.angle;\r\n      object.setPositionByOrigin(center, 'center', 'center');\r\n    },\r\n\r\n    /**\r\n     * given a width and height, return the size of the bounding box\r\n     * that can contains the box with width/height with applied transform\r\n     * described in options.\r\n     * Use to calculate the boxes around objects for controls.\r\n     * @memberOf fabric.util\r\n     * @param {Number} width\r\n     * @param {Number} height\r\n     * @param {Object} options\r\n     * @param {Number} options.scaleX\r\n     * @param {Number} options.scaleY\r\n     * @param {Number} options.skewX\r\n     * @param {Number} options.skewY\r\n     * @return {Object.x} width of containing\r\n     * @return {Object.y} height of containing\r\n     */\r\n    sizeAfterTransform: function(width, height, options) {\r\n      var dimX = width / 2, dimY = height / 2,\r\n          points = [\r\n            {\r\n              x: -dimX,\r\n              y: -dimY\r\n            },\r\n            {\r\n              x: dimX,\r\n              y: -dimY\r\n            },\r\n            {\r\n              x: -dimX,\r\n              y: dimY\r\n            },\r\n            {\r\n              x: dimX,\r\n              y: dimY\r\n            }],\r\n          transformMatrix = fabric.util.calcDimensionsMatrix(options),\r\n          bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);\r\n      return {\r\n        x: bbox.width,\r\n        y: bbox.height,\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Merges 2 clip paths into one visually equal clip path\r\n     *\r\n     * **IMPORTANT**:\\\r\n     * Does **NOT** clone the arguments, clone them proir if necessary.\r\n     *\r\n     * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\r\n     * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\r\n     *\r\n     * In order to handle the `inverted` property we follow logic described in the following cases:\\\r\n     * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\r\n     * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\r\n     * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\r\n     *\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} c1\r\n     * @param {fabric.Object} c2\r\n     * @returns {fabric.Object} merged clip path\r\n     */\r\n    mergeClipPaths: function (c1, c2) {\r\n      var a = c1, b = c2;\r\n      if (a.inverted && !b.inverted) {\r\n        //  case (2)\r\n        a = c2;\r\n        b = c1;\r\n      }\r\n      //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\r\n      fabric.util.applyTransformToObject(\r\n        b,\r\n        fabric.util.multiplyTransformMatrices(\r\n          fabric.util.invertTransform(a.calcTransformMatrix()),\r\n          b.calcTransformMatrix()\r\n        )\r\n      );\r\n      //  assign the `inverted` prop to the wrapping group\r\n      var inverted = a.inverted && b.inverted;\r\n      if (inverted) {\r\n        //  case (1)\r\n        a.inverted = b.inverted = false;\r\n      }\r\n      return new fabric.Group([a], { clipPath: b, inverted: inverted });\r\n    },\r\n\r\n    /**\r\n     * @memberOf fabric.util\r\n     * @param {Object} prevStyle first style to compare\r\n     * @param {Object} thisStyle second style to compare\r\n     * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\r\n     * @return {boolean} true if the style changed\r\n     */\r\n    hasStyleChanged: function(prevStyle, thisStyle, forTextSpans) {\r\n      forTextSpans = forTextSpans || false;\r\n      return (prevStyle.fill !== thisStyle.fill ||\r\n              prevStyle.stroke !== thisStyle.stroke ||\r\n              prevStyle.strokeWidth !== thisStyle.strokeWidth ||\r\n              prevStyle.fontSize !== thisStyle.fontSize ||\r\n              prevStyle.fontFamily !== thisStyle.fontFamily ||\r\n              prevStyle.fontWeight !== thisStyle.fontWeight ||\r\n              prevStyle.fontStyle !== thisStyle.fontStyle ||\r\n              prevStyle.deltaY !== thisStyle.deltaY) ||\r\n              (forTextSpans &&\r\n                (prevStyle.overline !== thisStyle.overline ||\r\n                prevStyle.underline !== thisStyle.underline ||\r\n                prevStyle.linethrough !== thisStyle.linethrough));\r\n    },\r\n\r\n    /**\r\n     * Returns the array form of a text object's inline styles property with styles grouped in ranges\r\n     * rather than per character. This format is less verbose, and is better suited for storage\r\n     * so it is used in serialization (not during runtime).\r\n     * @memberOf fabric.util\r\n     * @param {object} styles per character styles for a text object\r\n     * @param {String} text the text string that the styles are applied to\r\n     * @return {{start: number, end: number, style: object}[]}\r\n     */\r\n    stylesToArray: function(styles, text) {\r\n      // clone style structure to prevent mutation\r\n      var styles = fabric.util.object.clone(styles, true),\r\n          textLines = text.split('\\n'),\r\n          charIndex = -1, prevStyle = {}, stylesArray = [];\r\n      //loop through each textLine\r\n      for (var i = 0; i < textLines.length; i++) {\r\n        if (!styles[i]) {\r\n          //no styles exist for this line, so add the line's length to the charIndex total\r\n          charIndex += textLines[i].length;\r\n          continue;\r\n        }\r\n        //loop through each character of the current line\r\n        for (var c = 0; c < textLines[i].length; c++) {\r\n          charIndex++;\r\n          var thisStyle = styles[i][c];\r\n          //check if style exists for this character\r\n          if (thisStyle) {\r\n            var styleChanged = fabric.util.hasStyleChanged(prevStyle, thisStyle, true);\r\n            if (styleChanged) {\r\n              stylesArray.push({\r\n                start: charIndex,\r\n                end: charIndex + 1,\r\n                style: thisStyle\r\n              });\r\n            }\r\n            else {\r\n              //if style is the same as previous character, increase end index\r\n              stylesArray[stylesArray.length - 1].end++;\r\n            }\r\n          }\r\n          prevStyle = thisStyle || {};\r\n        }\r\n      }\r\n      return stylesArray;\r\n    },\r\n\r\n    /**\r\n     * Returns the object form of the styles property with styles that are assigned per\r\n     * character rather than grouped by range. This format is more verbose, and is\r\n     * only used during runtime (not for serialization/storage)\r\n     * @memberOf fabric.util\r\n     * @param {Array} styles the serialized form of a text object's styles\r\n     * @param {String} text the text string that the styles are applied to\r\n     * @return {Object}\r\n     */\r\n    stylesFromArray: function(styles, text) {\r\n      if (!Array.isArray(styles)) {\r\n        return styles;\r\n      }\r\n      var textLines = text.split('\\n'),\r\n          charIndex = -1, styleIndex = 0, stylesObject = {};\r\n      //loop through each textLine\r\n      for (var i = 0; i < textLines.length; i++) {\r\n        //loop through each character of the current line\r\n        for (var c = 0; c < textLines[i].length; c++) {\r\n          charIndex++;\r\n          //check if there's a style collection that includes the current character\r\n          if (styles[styleIndex]\r\n            && styles[styleIndex].start <= charIndex\r\n            && charIndex < styles[styleIndex].end) {\r\n            //create object for line index if it doesn't exist\r\n            stylesObject[i] = stylesObject[i] || {};\r\n            //assign a style at this character's index\r\n            stylesObject[i][c] = Object.assign({}, styles[styleIndex].style);\r\n            //if character is at the end of the current style collection, move to the next\r\n            if (charIndex === styles[styleIndex].end - 1) {\r\n              styleIndex++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return stylesObject;\r\n    }\r\n  };\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function() {\r\n  var _join = Array.prototype.join,\r\n      commandLengths = {\r\n        m: 2,\r\n        l: 2,\r\n        h: 1,\r\n        v: 1,\r\n        c: 6,\r\n        s: 4,\r\n        q: 4,\r\n        t: 2,\r\n        a: 7\r\n      },\r\n      repeatedCommands = {\r\n        m: 'l',\r\n        M: 'L'\r\n      };\r\n  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\r\n    var costh2 = fabric.util.cos(th2),\r\n        sinth2 = fabric.util.sin(th2),\r\n        costh3 = fabric.util.cos(th3),\r\n        sinth3 = fabric.util.sin(th3),\r\n        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,\r\n        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,\r\n        cp1X = fromX + mT * ( -cosTh * rx * sinth2 - sinTh * ry * costh2),\r\n        cp1Y = fromY + mT * ( -sinTh * rx * sinth2 + cosTh * ry * costh2),\r\n        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),\r\n        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);\r\n\r\n    return ['C',\r\n      cp1X, cp1Y,\r\n      cp2X, cp2Y,\r\n      toX, toY\r\n    ];\r\n  }\r\n\r\n  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\r\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\r\n   * http://mozilla.org/MPL/2.0/\r\n   */\r\n  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\r\n    var PI = Math.PI, th = rotateX * PI / 180,\r\n        sinTh = fabric.util.sin(th),\r\n        cosTh = fabric.util.cos(th),\r\n        fromX = 0, fromY = 0;\r\n\r\n    rx = Math.abs(rx);\r\n    ry = Math.abs(ry);\r\n\r\n    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,\r\n        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,\r\n        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,\r\n        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,\r\n        root = 0;\r\n\r\n    if (pl < 0) {\r\n      var s = Math.sqrt(1 - pl / (rx2 * ry2));\r\n      rx *= s;\r\n      ry *= s;\r\n    }\r\n    else {\r\n      root = (large === sweep ? -1.0 : 1.0) *\r\n              Math.sqrt( pl / (rx2 * py2 + ry2 * px2));\r\n    }\r\n\r\n    var cx = root * rx * py / ry,\r\n        cy = -root * ry * px / rx,\r\n        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,\r\n        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,\r\n        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),\r\n        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\r\n\r\n    if (sweep === 0 && dtheta > 0) {\r\n      dtheta -= 2 * PI;\r\n    }\r\n    else if (sweep === 1 && dtheta < 0) {\r\n      dtheta += 2 * PI;\r\n    }\r\n\r\n    // Convert into cubic bezier segments <= 90deg\r\n    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),\r\n        result = [], mDelta = dtheta / segments,\r\n        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),\r\n        th3 = mTheta + mDelta;\r\n\r\n    for (var i = 0; i < segments; i++) {\r\n      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\r\n      fromX = result[i][5];\r\n      fromY = result[i][6];\r\n      mTheta = th3;\r\n      th3 += mDelta;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /*\r\n   * Private\r\n   */\r\n  function calcVectorAngle(ux, uy, vx, vy) {\r\n    var ta = Math.atan2(uy, ux),\r\n        tb = Math.atan2(vy, vx);\r\n    if (tb >= ta) {\r\n      return tb - ta;\r\n    }\r\n    else {\r\n      return 2 * Math.PI - (ta - tb);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate bounding box of a beziercurve\r\n   * @param {Number} x0 starting point\r\n   * @param {Number} y0\r\n   * @param {Number} x1 first control point\r\n   * @param {Number} y1\r\n   * @param {Number} x2 secondo control point\r\n   * @param {Number} y2\r\n   * @param {Number} x3 end of bezier\r\n   * @param {Number} y3\r\n   */\r\n  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\r\n  // TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\r\n  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n    var argsString;\r\n    if (fabric.cachesBoundsOfCurve) {\r\n      argsString = _join.call(arguments);\r\n      if (fabric.boundsOfCurveCache[argsString]) {\r\n        return fabric.boundsOfCurveCache[argsString];\r\n      }\r\n    }\r\n\r\n    var sqrt = Math.sqrt,\r\n        min = Math.min, max = Math.max,\r\n        abs = Math.abs, tvalues = [],\r\n        bounds = [[], []],\r\n        a, b, c, t, t1, t2, b2ac, sqrtb2ac;\r\n\r\n    b = 6 * x0 - 12 * x1 + 6 * x2;\r\n    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\r\n    c = 3 * x1 - 3 * x0;\r\n\r\n    for (var i = 0; i < 2; ++i) {\r\n      if (i > 0) {\r\n        b = 6 * y0 - 12 * y1 + 6 * y2;\r\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\r\n        c = 3 * y1 - 3 * y0;\r\n      }\r\n\r\n      if (abs(a) < 1e-12) {\r\n        if (abs(b) < 1e-12) {\r\n          continue;\r\n        }\r\n        t = -c / b;\r\n        if (0 < t && t < 1) {\r\n          tvalues.push(t);\r\n        }\r\n        continue;\r\n      }\r\n      b2ac = b * b - 4 * c * a;\r\n      if (b2ac < 0) {\r\n        continue;\r\n      }\r\n      sqrtb2ac = sqrt(b2ac);\r\n      t1 = (-b + sqrtb2ac) / (2 * a);\r\n      if (0 < t1 && t1 < 1) {\r\n        tvalues.push(t1);\r\n      }\r\n      t2 = (-b - sqrtb2ac) / (2 * a);\r\n      if (0 < t2 && t2 < 1) {\r\n        tvalues.push(t2);\r\n      }\r\n    }\r\n\r\n    var x, y, j = tvalues.length, jlen = j, mt;\r\n    while (j--) {\r\n      t = tvalues[j];\r\n      mt = 1 - t;\r\n      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\r\n      bounds[0][j] = x;\r\n\r\n      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\r\n      bounds[1][j] = y;\r\n    }\r\n\r\n    bounds[0][jlen] = x0;\r\n    bounds[1][jlen] = y0;\r\n    bounds[0][jlen + 1] = x3;\r\n    bounds[1][jlen + 1] = y3;\r\n    var result = [\r\n      {\r\n        x: min.apply(null, bounds[0]),\r\n        y: min.apply(null, bounds[1])\r\n      },\r\n      {\r\n        x: max.apply(null, bounds[0]),\r\n        y: max.apply(null, bounds[1])\r\n      }\r\n    ];\r\n    if (fabric.cachesBoundsOfCurve) {\r\n      fabric.boundsOfCurveCache[argsString] = result;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts arc to a bunch of bezier curves\r\n   * @param {Number} fx starting point x\r\n   * @param {Number} fy starting point y\r\n   * @param {Array} coords Arc command\r\n   */\r\n  function fromArcToBeziers(fx, fy, coords) {\r\n    var rx = coords[1],\r\n        ry = coords[2],\r\n        rot = coords[3],\r\n        large = coords[4],\r\n        sweep = coords[5],\r\n        tx = coords[6],\r\n        ty = coords[7],\r\n        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\r\n\r\n    for (var i = 0, len = segsNorm.length; i < len; i++) {\r\n      segsNorm[i][1] += fx;\r\n      segsNorm[i][2] += fy;\r\n      segsNorm[i][3] += fx;\r\n      segsNorm[i][4] += fy;\r\n      segsNorm[i][5] += fx;\r\n      segsNorm[i][6] += fy;\r\n    }\r\n    return segsNorm;\r\n  };\r\n\r\n  /**\r\n   * This function take a parsed SVG path and make it simpler for fabricJS logic.\r\n   * simplification consist of: only UPPERCASE absolute commands ( relative converted to absolute )\r\n   * S converted in C, T converted in Q, A converted in C.\r\n   * @param {Array} path the array of commands of a parsed svg path for fabric.Path\r\n   * @return {Array} the simplified array of commands of a parsed svg path for fabric.Path\r\n   */\r\n  function makePathSimpler(path) {\r\n    // x and y represent the last point of the path. the previous command point.\r\n    // we add them to each relative command to make it an absolute comment.\r\n    // we also swap the v V h H with L, because are easier to transform.\r\n    var x = 0, y = 0, len = path.length,\r\n        // x1 and y1 represent the last point of the subpath. the subpath is started with\r\n        // m or M command. When a z or Z command is drawn, x and y need to be resetted to\r\n        // the last x1 and y1.\r\n        x1 = 0, y1 = 0, current, i, converted,\r\n        // previous will host the letter of the previous command, to handle S and T.\r\n        // controlX and controlY will host the previous reflected control point\r\n        destinationPath = [], previous, controlX, controlY;\r\n    for (i = 0; i < len; ++i) {\r\n      converted = false;\r\n      current = path[i].slice(0);\r\n      switch (current[0]) { // first letter\r\n        case 'l': // lineto, relative\r\n          current[0] = 'L';\r\n          current[1] += x;\r\n          current[2] += y;\r\n          // falls through\r\n        case 'L':\r\n          x = current[1];\r\n          y = current[2];\r\n          break;\r\n        case 'h': // horizontal lineto, relative\r\n          current[1] += x;\r\n          // falls through\r\n        case 'H':\r\n          current[0] = 'L';\r\n          current[2] = y;\r\n          x = current[1];\r\n          break;\r\n        case 'v': // vertical lineto, relative\r\n          current[1] += y;\r\n          // falls through\r\n        case 'V':\r\n          current[0] = 'L';\r\n          y = current[1];\r\n          current[1] = x;\r\n          current[2] = y;\r\n          break;\r\n        case 'm': // moveTo, relative\r\n          current[0] = 'M';\r\n          current[1] += x;\r\n          current[2] += y;\r\n          // falls through\r\n        case 'M':\r\n          x = current[1];\r\n          y = current[2];\r\n          x1 = current[1];\r\n          y1 = current[2];\r\n          break;\r\n        case 'c': // bezierCurveTo, relative\r\n          current[0] = 'C';\r\n          current[1] += x;\r\n          current[2] += y;\r\n          current[3] += x;\r\n          current[4] += y;\r\n          current[5] += x;\r\n          current[6] += y;\r\n          // falls through\r\n        case 'C':\r\n          controlX = current[3];\r\n          controlY = current[4];\r\n          x = current[5];\r\n          y = current[6];\r\n          break;\r\n        case 's': // shorthand cubic bezierCurveTo, relative\r\n          current[0] = 'S';\r\n          current[1] += x;\r\n          current[2] += y;\r\n          current[3] += x;\r\n          current[4] += y;\r\n          // falls through\r\n        case 'S':\r\n          // would be sScC but since we are swapping sSc for C, we check just that.\r\n          if (previous === 'C') {\r\n            // calculate reflection of previous control points\r\n            controlX = 2 * x - controlX;\r\n            controlY = 2 * y - controlY;\r\n          }\r\n          else {\r\n            // If there is no previous command or if the previous command was not a C, c, S, or s,\r\n            // the control point is coincident with the current point\r\n            controlX = x;\r\n            controlY = y;\r\n          }\r\n          x = current[3];\r\n          y = current[4];\r\n          current[0] = 'C';\r\n          current[5] = current[3];\r\n          current[6] = current[4];\r\n          current[3] = current[1];\r\n          current[4] = current[2];\r\n          current[1] = controlX;\r\n          current[2] = controlY;\r\n          // current[3] and current[4] are NOW the second control point.\r\n          // we keep it for the next reflection.\r\n          controlX = current[3];\r\n          controlY = current[4];\r\n          break;\r\n        case 'q': // quadraticCurveTo, relative\r\n          current[0] = 'Q';\r\n          current[1] += x;\r\n          current[2] += y;\r\n          current[3] += x;\r\n          current[4] += y;\r\n          // falls through\r\n        case 'Q':\r\n          controlX = current[1];\r\n          controlY = current[2];\r\n          x = current[3];\r\n          y = current[4];\r\n          break;\r\n        case 't': // shorthand quadraticCurveTo, relative\r\n          current[0] = 'T';\r\n          current[1] += x;\r\n          current[2] += y;\r\n          // falls through\r\n        case 'T':\r\n          if (previous === 'Q') {\r\n            // calculate reflection of previous control point\r\n            controlX = 2 * x - controlX;\r\n            controlY = 2 * y - controlY;\r\n          }\r\n          else {\r\n            // If there is no previous command or if the previous command was not a Q, q, T or t,\r\n            // assume the control point is coincident with the current point\r\n            controlX = x;\r\n            controlY = y;\r\n          }\r\n          current[0] = 'Q';\r\n          x = current[1];\r\n          y = current[2];\r\n          current[1] = controlX;\r\n          current[2] = controlY;\r\n          current[3] = x;\r\n          current[4] = y;\r\n          break;\r\n        case 'a':\r\n          current[0] = 'A';\r\n          current[6] += x;\r\n          current[7] += y;\r\n          // falls through\r\n        case 'A':\r\n          converted = true;\r\n          destinationPath = destinationPath.concat(fromArcToBeziers(x, y, current));\r\n          x = current[6];\r\n          y = current[7];\r\n          break;\r\n        case 'z':\r\n        case 'Z':\r\n          x = x1;\r\n          y = y1;\r\n          break;\r\n        default:\r\n      }\r\n      if (!converted) {\r\n        destinationPath.push(current);\r\n      }\r\n      previous = current[0];\r\n    }\r\n    return destinationPath;\r\n  };\r\n\r\n  /**\r\n   * Calc length from point x1,y1 to x2,y2\r\n   * @param {Number} x1 starting point x\r\n   * @param {Number} y1 starting point y\r\n   * @param {Number} x2 starting point x\r\n   * @param {Number} y2 starting point y\r\n   * @return {Number} length of segment\r\n   */\r\n  function calcLineLength(x1, y1, x2, y2) {\r\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  }\r\n\r\n  // functions for the Cubic beizer\r\n  // taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\r\n  function CB1(t) {\r\n    return t * t * t;\r\n  }\r\n  function CB2(t) {\r\n    return 3 * t * t * (1 - t);\r\n  }\r\n  function CB3(t) {\r\n    return 3 * t * (1 - t) * (1 - t);\r\n  }\r\n  function CB4(t) {\r\n    return (1 - t) * (1 - t) * (1 - t);\r\n  }\r\n\r\n  function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\r\n    return function(pct) {\r\n      var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);\r\n      return {\r\n        x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,\r\n        y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4\r\n      };\r\n    };\r\n  }\r\n\r\n  function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\r\n    return function (pct) {\r\n      var invT = 1 - pct,\r\n          tangentX = (3 * invT * invT * (p2x - p1x)) + (6 * invT * pct * (p3x - p2x)) +\r\n          (3 * pct * pct * (p4x - p3x)),\r\n          tangentY = (3 * invT * invT * (p2y - p1y)) + (6 * invT * pct * (p3y - p2y)) +\r\n          (3 * pct * pct * (p4y - p3y));\r\n      return Math.atan2(tangentY, tangentX);\r\n    };\r\n  }\r\n\r\n  function QB1(t) {\r\n    return t * t;\r\n  }\r\n\r\n  function QB2(t) {\r\n    return 2 * t * (1 - t);\r\n  }\r\n\r\n  function QB3(t) {\r\n    return (1 - t) * (1 - t);\r\n  }\r\n\r\n  function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\r\n    return function(pct) {\r\n      var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);\r\n      return {\r\n        x: p3x * c1 + p2x * c2 + p1x * c3,\r\n        y: p3y * c1 + p2y * c2 + p1y * c3\r\n      };\r\n    };\r\n  }\r\n\r\n  function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\r\n    return function (pct) {\r\n      var invT = 1 - pct,\r\n          tangentX = (2 * invT * (p2x - p1x)) + (2 * pct * (p3x - p2x)),\r\n          tangentY = (2 * invT * (p2y - p1y)) + (2 * pct * (p3y - p2y));\r\n      return Math.atan2(tangentY, tangentX);\r\n    };\r\n  }\r\n\r\n\r\n  // this will run over a path segment ( a cubic or quadratic segment) and approximate it\r\n  // with 100 segemnts. This will good enough to calculate the length of the curve\r\n  function pathIterator(iterator, x1, y1) {\r\n    var tempP = { x: x1, y: y1 }, p, tmpLen = 0, perc;\r\n    for (perc = 1; perc <= 100; perc += 1) {\r\n      p = iterator(perc / 100);\r\n      tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\r\n      tempP = p;\r\n    }\r\n    return tmpLen;\r\n  }\r\n\r\n  /**\r\n   * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\r\n   * that correspond to that pixels run over the path.\r\n   * The percentage will be then used to find the correct point on the canvas for the path.\r\n   * @param {Array} segInfo fabricJS collection of information on a parsed path\r\n   * @param {Number} distance from starting point, in pixels.\r\n   * @return {Object} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\r\n   */\r\n  function findPercentageForDistance(segInfo, distance) {\r\n    var perc = 0, tmpLen = 0, iterator = segInfo.iterator, tempP = { x: segInfo.x, y: segInfo.y },\r\n        p, nextLen, nextStep = 0.01, angleFinder = segInfo.angleFinder, lastPerc;\r\n    // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\r\n    // the path\r\n    while (tmpLen < distance && nextStep > 0.0001) {\r\n      p = iterator(perc);\r\n      lastPerc = perc;\r\n      nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\r\n      // compare tmpLen each cycle with distance, decide next perc to test.\r\n      if ((nextLen + tmpLen) > distance) {\r\n        // we discard this step and we make smaller steps.\r\n        perc -= nextStep;\r\n        nextStep /= 2;\r\n      }\r\n      else {\r\n        tempP = p;\r\n        perc += nextStep;\r\n        tmpLen += nextLen;\r\n      }\r\n    }\r\n    p.angle = angleFinder(lastPerc);\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Run over a parsed and simplifed path and extrac some informations.\r\n   * informations are length of each command and starting point\r\n   * @param {Array} path fabricJS parsed path commands\r\n   * @return {Array} path commands informations\r\n   */\r\n  function getPathSegmentsInfo(path) {\r\n    var totalLength = 0, len = path.length, current,\r\n        //x2 and y2 are the coords of segment start\r\n        //x1 and y1 are the coords of the current point\r\n        x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo, angleFinder;\r\n    for (var i = 0; i < len; i++) {\r\n      current = path[i];\r\n      tempInfo = {\r\n        x: x1,\r\n        y: y1,\r\n        command: current[0],\r\n      };\r\n      switch (current[0]) { //first letter\r\n        case 'M':\r\n          tempInfo.length = 0;\r\n          x2 = x1 = current[1];\r\n          y2 = y1 = current[2];\r\n          break;\r\n        case 'L':\r\n          tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\r\n          x1 = current[1];\r\n          y1 = current[2];\r\n          break;\r\n        case 'C':\r\n          iterator = getPointOnCubicBezierIterator(\r\n            x1,\r\n            y1,\r\n            current[1],\r\n            current[2],\r\n            current[3],\r\n            current[4],\r\n            current[5],\r\n            current[6]\r\n          );\r\n          angleFinder = getTangentCubicIterator(\r\n            x1,\r\n            y1,\r\n            current[1],\r\n            current[2],\r\n            current[3],\r\n            current[4],\r\n            current[5],\r\n            current[6]\r\n          );\r\n          tempInfo.iterator = iterator;\r\n          tempInfo.angleFinder = angleFinder;\r\n          tempInfo.length = pathIterator(iterator, x1, y1);\r\n          x1 = current[5];\r\n          y1 = current[6];\r\n          break;\r\n        case 'Q':\r\n          iterator = getPointOnQuadraticBezierIterator(\r\n            x1,\r\n            y1,\r\n            current[1],\r\n            current[2],\r\n            current[3],\r\n            current[4]\r\n          );\r\n          angleFinder = getTangentQuadraticIterator(\r\n            x1,\r\n            y1,\r\n            current[1],\r\n            current[2],\r\n            current[3],\r\n            current[4]\r\n          );\r\n          tempInfo.iterator = iterator;\r\n          tempInfo.angleFinder = angleFinder;\r\n          tempInfo.length = pathIterator(iterator, x1, y1);\r\n          x1 = current[3];\r\n          y1 = current[4];\r\n          break;\r\n        case 'Z':\r\n        case 'z':\r\n          // we add those in order to ease calculations later\r\n          tempInfo.destX = x2;\r\n          tempInfo.destY = y2;\r\n          tempInfo.length = calcLineLength(x1, y1, x2, y2);\r\n          x1 = x2;\r\n          y1 = y2;\r\n          break;\r\n      }\r\n      totalLength += tempInfo.length;\r\n      info.push(tempInfo);\r\n    }\r\n    info.push({ length: totalLength, x: x1, y: y1 });\r\n    return info;\r\n  }\r\n\r\n  function getPointOnPath(path, distance, infos) {\r\n    if (!infos) {\r\n      infos = getPathSegmentsInfo(path);\r\n    }\r\n    var i = 0;\r\n    while ((distance - infos[i].length > 0) && i < (infos.length - 2)) {\r\n      distance -= infos[i].length;\r\n      i++;\r\n    }\r\n    // var distance = infos[infos.length - 1] * perc;\r\n    var segInfo = infos[i], segPercent = distance / segInfo.length,\r\n        command = segInfo.command, segment = path[i], info;\r\n\r\n    switch (command) {\r\n      case 'M':\r\n        return { x: segInfo.x, y: segInfo.y, angle: 0 };\r\n      case 'Z':\r\n      case 'z':\r\n        info = new fabric.Point(segInfo.x, segInfo.y).lerp(\r\n          new fabric.Point(segInfo.destX, segInfo.destY),\r\n          segPercent\r\n        );\r\n        info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);\r\n        return info;\r\n      case 'L':\r\n        info = new fabric.Point(segInfo.x, segInfo.y).lerp(\r\n          new fabric.Point(segment[1], segment[2]),\r\n          segPercent\r\n        );\r\n        info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);\r\n        return info;\r\n      case 'C':\r\n        return findPercentageForDistance(segInfo, distance);\r\n      case 'Q':\r\n        return findPercentageForDistance(segInfo, distance);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} pathString\r\n   * @return {(string|number)[][]} An array of SVG path commands\r\n   * @example <caption>Usage</caption>\r\n   * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\r\n   *   ['M', 3, 4],\r\n   *   ['Q', 3, 5, 2, 1, 4, 0],\r\n   *   ['Q', 9, 12, 2, 1, 4, 0],\r\n   * ];\r\n   *\r\n   */\r\n  function parsePath(pathString) {\r\n    var result = [],\r\n        coords = [],\r\n        currentPath,\r\n        parsed,\r\n        re = fabric.rePathCommand,\r\n        rNumber = '[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?\\\\s*',\r\n        rNumberCommaWsp = '(' + rNumber + ')' + fabric.commaWsp,\r\n        rFlagCommaWsp = '([01])' + fabric.commaWsp + '?',\r\n        rArcSeq = rNumberCommaWsp + '?' + rNumberCommaWsp + '?' + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp +\r\n          rNumberCommaWsp + '?(' + rNumber + ')',\r\n        regArcArgumentSequence = new RegExp(rArcSeq, 'g'),\r\n        match,\r\n        coordsStr,\r\n        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\r\n        path;\r\n    if (!pathString || !pathString.match) {\r\n      return result;\r\n    }\r\n    path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\r\n\r\n    for (var i = 0, coordsParsed, len = path.length; i < len; i++) {\r\n      currentPath = path[i];\r\n\r\n      coordsStr = currentPath.slice(1).trim();\r\n      coords.length = 0;\r\n\r\n      var command = currentPath.charAt(0);\r\n      coordsParsed = [command];\r\n\r\n      if (command.toLowerCase() === 'a') {\r\n        // arcs have special flags that apparently don't require spaces so handle special\r\n        for (var args; (args = regArcArgumentSequence.exec(coordsStr));) {\r\n          for (var j = 1; j < args.length; j++) {\r\n            coords.push(args[j]);\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        while ((match = re.exec(coordsStr))) {\r\n          coords.push(match[0]);\r\n        }\r\n      }\r\n\r\n      for (var j = 0, jlen = coords.length; j < jlen; j++) {\r\n        parsed = parseFloat(coords[j]);\r\n        if (!isNaN(parsed)) {\r\n          coordsParsed.push(parsed);\r\n        }\r\n      }\r\n\r\n      var commandLength = commandLengths[command.toLowerCase()],\r\n          repeatedCommand = repeatedCommands[command] || command;\r\n\r\n      if (coordsParsed.length - 1 > commandLength) {\r\n        for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {\r\n          result.push([command].concat(coordsParsed.slice(k, k + commandLength)));\r\n          command = repeatedCommand;\r\n        }\r\n      }\r\n      else {\r\n        result.push(coordsParsed);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Converts points to a smooth SVG path\r\n   * @param {{ x: number,y: number }[]} points Array of points\r\n   * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\r\n   * @return {(string|number)[][]} An array of SVG path commands\r\n   */\r\n  function getSmoothPathFromPoints(points, correction) {\r\n    var path = [], i,\r\n        p1 = new fabric.Point(points[0].x, points[0].y),\r\n        p2 = new fabric.Point(points[1].x, points[1].y),\r\n        len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;\r\n    correction = correction || 0;\r\n\r\n    if (manyPoints) {\r\n      multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\r\n      multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\r\n    }\r\n    path.push(['M', p1.x - multSignX * correction, p1.y - multSignY * correction]);\r\n    for (i = 1; i < len; i++) {\r\n      if (!p1.eq(p2)) {\r\n        var midPoint = p1.midPointFrom(p2);\r\n        // p1 is our bezier control point\r\n        // midpoint is our endpoint\r\n        // start point is p(i-1) value.\r\n        path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);\r\n      }\r\n      p1 = points[i];\r\n      if ((i + 1) < points.length) {\r\n        p2 = points[i + 1];\r\n      }\r\n    }\r\n    if (manyPoints) {\r\n      multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\r\n      multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\r\n    }\r\n    path.push(['L', p1.x + multSignX * correction, p1.y + multSignY * correction]);\r\n    return path;\r\n  }\r\n  /**\r\n   * Transform a path by transforming each segment.\r\n   * it has to be a simplified path or it won't work.\r\n   * WARNING: this depends from pathOffset for correct operation\r\n   * @param {Array} path fabricJS parsed and simplified path commands\r\n   * @param {Array} transform matrix that represent the transformation\r\n   * @param {Object} [pathOffset] the fabric.Path pathOffset\r\n   * @param {Number} pathOffset.x\r\n   * @param {Number} pathOffset.y\r\n   * @returns {Array} the transformed path\r\n   */\r\n  function transformPath(path, transform, pathOffset) {\r\n    if (pathOffset) {\r\n      transform = fabric.util.multiplyTransformMatrices(\r\n        transform,\r\n        [1, 0, 0, 1, -pathOffset.x, -pathOffset.y]\r\n      );\r\n    }\r\n    return path.map(function(pathSegment) {\r\n      var newSegment = pathSegment.slice(0), point = {};\r\n      for (var i = 1; i < pathSegment.length - 1; i += 2) {\r\n        point.x = pathSegment[i];\r\n        point.y = pathSegment[i + 1];\r\n        point = fabric.util.transformPoint(point, transform);\r\n        newSegment[i] = point.x;\r\n        newSegment[i + 1] = point.y;\r\n      }\r\n      return newSegment;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Join path commands to go back to svg format\r\n   * @param {Array} pathData fabricJS parsed path commands\r\n   * @return {String} joined path 'M 0 0 L 20 30'\r\n   */\r\n  fabric.util.joinPath = function(pathData) {\r\n    return pathData.map(function (segment) { return segment.join(' '); }).join(' ');\r\n  };\r\n  fabric.util.parsePath = parsePath;\r\n  fabric.util.makePathSimpler = makePathSimpler;\r\n  fabric.util.getSmoothPathFromPoints = getSmoothPathFromPoints;\r\n  fabric.util.getPathSegmentsInfo = getPathSegmentsInfo;\r\n  fabric.util.getBoundsOfCurve = getBoundsOfCurve;\r\n  fabric.util.getPointOnPath = getPointOnPath;\r\n  fabric.util.transformPath = transformPath;\r\n})();\r\n(function() {\r\n\r\n  var slice = Array.prototype.slice;\r\n\r\n  /**\r\n   * Invokes method on all items in a given array\r\n   * @memberOf fabric.util.array\r\n   * @param {Array} array Array to iterate over\r\n   * @param {String} method Name of a method to invoke\r\n   * @return {Array}\r\n   */\r\n  function invoke(array, method) {\r\n    var args = slice.call(arguments, 2), result = [];\r\n    for (var i = 0, len = array.length; i < len; i++) {\r\n      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Finds maximum value in array (not necessarily \"first\" one)\r\n   * @memberOf fabric.util.array\r\n   * @param {Array} array Array to iterate over\r\n   * @param {String} byProperty\r\n   * @return {*}\r\n   */\r\n  function max(array, byProperty) {\r\n    return find(array, byProperty, function(value1, value2) {\r\n      return value1 >= value2;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Finds minimum value in array (not necessarily \"first\" one)\r\n   * @memberOf fabric.util.array\r\n   * @param {Array} array Array to iterate over\r\n   * @param {String} byProperty\r\n   * @return {*}\r\n   */\r\n  function min(array, byProperty) {\r\n    return find(array, byProperty, function(value1, value2) {\r\n      return value1 < value2;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  function fill(array, value) {\r\n    var k = array.length;\r\n    while (k--) {\r\n      array[k] = value;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  function find(array, byProperty, condition) {\r\n    if (!array || array.length === 0) {\r\n      return;\r\n    }\r\n\r\n    var i = array.length - 1,\r\n        result = byProperty ? array[i][byProperty] : array[i];\r\n    if (byProperty) {\r\n      while (i--) {\r\n        if (condition(array[i][byProperty], result)) {\r\n          result = array[i][byProperty];\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      while (i--) {\r\n        if (condition(array[i], result)) {\r\n          result = array[i];\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @namespace fabric.util.array\r\n   */\r\n  fabric.util.array = {\r\n    fill: fill,\r\n    invoke: invoke,\r\n    min: min,\r\n    max: max\r\n  };\r\n\r\n})();\r\n(function() {\r\n  /**\r\n   * Copies all enumerable properties of one js object to another\r\n   * this does not and cannot compete with generic utils.\r\n   * Does not clone or extend fabric.Object subclasses.\r\n   * This is mostly for internal use and has extra handling for fabricJS objects\r\n   * it skips the canvas and group properties in deep cloning.\r\n   * @memberOf fabric.util.object\r\n   * @param {Object} destination Where to copy to\r\n   * @param {Object} source Where to copy from\r\n   * @param {Boolean} [deep] Whether to extend nested objects\r\n   * @return {Object}\r\n   */\r\n\r\n  function extend(destination, source, deep) {\r\n    // JScript DontEnum bug is not taken care of\r\n    // the deep clone is for internal use, is not meant to avoid\r\n    // javascript traps or cloning html element or self referenced objects.\r\n    if (deep) {\r\n      if (!fabric.isLikelyNode && source instanceof Element) {\r\n        // avoid cloning deep images, canvases,\r\n        destination = source;\r\n      }\r\n      else if (source instanceof Array) {\r\n        destination = [];\r\n        for (var i = 0, len = source.length; i < len; i++) {\r\n          destination[i] = extend({ }, source[i], deep);\r\n        }\r\n      }\r\n      else if (source && typeof source === 'object') {\r\n        for (var property in source) {\r\n          if (property === 'canvas' || property === 'group') {\r\n            // we do not want to clone this props at all.\r\n            // we want to keep the keys in the copy\r\n            destination[property] = null;\r\n          }\r\n          else if (source.hasOwnProperty(property)) {\r\n            destination[property] = extend({ }, source[property], deep);\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        // this sounds odd for an extend but is ok for recursive use\r\n        destination = source;\r\n      }\r\n    }\r\n    else {\r\n      for (var property in source) {\r\n        destination[property] = source[property];\r\n      }\r\n    }\r\n    return destination;\r\n  }\r\n\r\n  /**\r\n   * Creates an empty object and copies all enumerable properties of another object to it\r\n   * This method is mostly for internal use, and not intended for duplicating shapes in canvas. \r\n   * @memberOf fabric.util.object\r\n   * @param {Object} object Object to clone\r\n   * @param {Boolean} [deep] Whether to clone nested objects\r\n   * @return {Object}\r\n   */\r\n\r\n  //TODO: this function return an empty object if you try to clone null\r\n  function clone(object, deep) {\r\n    return extend({ }, object, deep);\r\n  }\r\n\r\n  /** @namespace fabric.util.object */\r\n  fabric.util.object = {\r\n    extend: extend,\r\n    clone: clone\r\n  };\r\n  fabric.util.object.extend(fabric.util, fabric.Observable);\r\n})();\r\n(function() {\r\n\r\n  /**\r\n   * Camelizes a string\r\n   * @memberOf fabric.util.string\r\n   * @param {String} string String to camelize\r\n   * @return {String} Camelized version of a string\r\n   */\r\n  function camelize(string) {\r\n    return string.replace(/-+(.)?/g, function(match, character) {\r\n      return character ? character.toUpperCase() : '';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Capitalizes a string\r\n   * @memberOf fabric.util.string\r\n   * @param {String} string String to capitalize\r\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\r\n   * and other letters stay untouched, if false first letter is capitalized\r\n   * and other letters are converted to lowercase.\r\n   * @return {String} Capitalized version of a string\r\n   */\r\n  function capitalize(string, firstLetterOnly) {\r\n    return string.charAt(0).toUpperCase() +\r\n      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * Escapes XML in a string\r\n   * @memberOf fabric.util.string\r\n   * @param {String} string String to escape\r\n   * @return {String} Escaped version of a string\r\n   */\r\n  function escapeXml(string) {\r\n    return string.replace(/&/g, '&amp;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&apos;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;');\r\n  }\r\n\r\n  /**\r\n   * Divide a string in the user perceived single units\r\n   * @memberOf fabric.util.string\r\n   * @param {String} textstring String to escape\r\n   * @return {Array} array containing the graphemes\r\n   */\r\n  function graphemeSplit(textstring) {\r\n    var i = 0, chr, graphemes = [];\r\n    for (i = 0, chr; i < textstring.length; i++) {\r\n      if ((chr = getWholeChar(textstring, i)) === false) {\r\n        continue;\r\n      }\r\n      graphemes.push(chr);\r\n    }\r\n    return graphemes;\r\n  }\r\n\r\n  // taken from mdn in the charAt doc page.\r\n  function getWholeChar(str, i) {\r\n    var code = str.charCodeAt(i);\r\n\r\n    if (isNaN(code)) {\r\n      return ''; // Position not found\r\n    }\r\n    if (code < 0xD800 || code > 0xDFFF) {\r\n      return str.charAt(i);\r\n    }\r\n\r\n    // High surrogate (could change last hex to 0xDB7F to treat high private\r\n    // surrogates as single characters)\r\n    if (0xD800 <= code && code <= 0xDBFF) {\r\n      if (str.length <= (i + 1)) {\r\n        throw 'High surrogate without following low surrogate';\r\n      }\r\n      var next = str.charCodeAt(i + 1);\r\n      if (0xDC00 > next || next > 0xDFFF) {\r\n        throw 'High surrogate without following low surrogate';\r\n      }\r\n      return str.charAt(i) + str.charAt(i + 1);\r\n    }\r\n    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\r\n    if (i === 0) {\r\n      throw 'Low surrogate without preceding high surrogate';\r\n    }\r\n    var prev = str.charCodeAt(i - 1);\r\n\r\n    // (could change last hex to 0xDB7F to treat high private\r\n    // surrogates as single characters)\r\n    if (0xD800 > prev || prev > 0xDBFF) {\r\n      throw 'Low surrogate without preceding high surrogate';\r\n    }\r\n    // We can pass over low surrogates now as the second component\r\n    // in a pair which we have already processed\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * String utilities\r\n   * @namespace fabric.util.string\r\n   */\r\n  fabric.util.string = {\r\n    camelize: camelize,\r\n    capitalize: capitalize,\r\n    escapeXml: escapeXml,\r\n    graphemeSplit: graphemeSplit\r\n  };\r\n})();\r\n(function() {\r\n\r\n  var slice = Array.prototype.slice, emptyFunction = function() { },\r\n\r\n      IS_DONTENUM_BUGGY = (function() {\r\n        for (var p in { toString: 1 }) {\r\n          if (p === 'toString') {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      })(),\r\n\r\n      /** @ignore */\r\n      addMethods = function(klass, source, parent) {\r\n        for (var property in source) {\r\n\r\n          if (property in klass.prototype &&\r\n              typeof klass.prototype[property] === 'function' &&\r\n              (source[property] + '').indexOf('callSuper') > -1) {\r\n\r\n            klass.prototype[property] = (function(property) {\r\n              return function() {\r\n\r\n                var superclass = this.constructor.superclass;\r\n                this.constructor.superclass = parent;\r\n                var returnValue = source[property].apply(this, arguments);\r\n                this.constructor.superclass = superclass;\r\n\r\n                if (property !== 'initialize') {\r\n                  return returnValue;\r\n                }\r\n              };\r\n            })(property);\r\n          }\r\n          else {\r\n            klass.prototype[property] = source[property];\r\n          }\r\n\r\n          if (IS_DONTENUM_BUGGY) {\r\n            if (source.toString !== Object.prototype.toString) {\r\n              klass.prototype.toString = source.toString;\r\n            }\r\n            if (source.valueOf !== Object.prototype.valueOf) {\r\n              klass.prototype.valueOf = source.valueOf;\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n  function Subclass() { }\r\n\r\n  function callSuper(methodName) {\r\n    var parentMethod = null,\r\n        _this = this;\r\n\r\n    // climb prototype chain to find method not equal to callee's method\r\n    while (_this.constructor.superclass) {\r\n      var superClassMethod = _this.constructor.superclass.prototype[methodName];\r\n      if (_this[methodName] !== superClassMethod) {\r\n        parentMethod = superClassMethod;\r\n        break;\r\n      }\r\n      // eslint-disable-next-line\r\n      _this = _this.constructor.superclass.prototype;\r\n    }\r\n\r\n    if (!parentMethod) {\r\n      return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);\r\n    }\r\n\r\n    return (arguments.length > 1)\r\n      ? parentMethod.apply(this, slice.call(arguments, 1))\r\n      : parentMethod.call(this);\r\n  }\r\n\r\n  /**\r\n   * Helper for creation of \"classes\".\r\n   * @memberOf fabric.util\r\n   * @param {Function} [parent] optional \"Class\" to inherit from\r\n   * @param {Object} [properties] Properties shared by all instances of this class\r\n   *                  (be careful modifying objects defined here as this would affect all instances)\r\n   */\r\n  function createClass() {\r\n    var parent = null,\r\n        properties = slice.call(arguments, 0);\r\n\r\n    if (typeof properties[0] === 'function') {\r\n      parent = properties.shift();\r\n    }\r\n    function klass() {\r\n      this.initialize.apply(this, arguments);\r\n    }\r\n\r\n    klass.superclass = parent;\r\n    klass.subclasses = [];\r\n\r\n    if (parent) {\r\n      Subclass.prototype = parent.prototype;\r\n      klass.prototype = new Subclass();\r\n      parent.subclasses.push(klass);\r\n    }\r\n    for (var i = 0, length = properties.length; i < length; i++) {\r\n      addMethods(klass, properties[i], parent);\r\n    }\r\n    if (!klass.prototype.initialize) {\r\n      klass.prototype.initialize = emptyFunction;\r\n    }\r\n    klass.prototype.constructor = klass;\r\n    klass.prototype.callSuper = callSuper;\r\n    return klass;\r\n  }\r\n\r\n  fabric.util.createClass = createClass;\r\n})();\r\n(function () {\r\n  // since ie11 can use addEventListener but they do not support options, i need to check\r\n  var couldUseAttachEvent = !!fabric.document.createElement('div').attachEvent,\r\n      touchEvents = ['touchstart', 'touchmove', 'touchend'];\r\n  /**\r\n   * Adds an event listener to an element\r\n   * @function\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element\r\n   * @param {String} eventName\r\n   * @param {Function} handler\r\n   */\r\n  fabric.util.addListener = function(element, eventName, handler, options) {\r\n    element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);\r\n  };\r\n\r\n  /**\r\n   * Removes an event listener from an element\r\n   * @function\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element\r\n   * @param {String} eventName\r\n   * @param {Function} handler\r\n   */\r\n  fabric.util.removeListener = function(element, eventName, handler, options) {\r\n    element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);\r\n  };\r\n\r\n  function getTouchInfo(event) {\r\n    var touchProp = event.changedTouches;\r\n    if (touchProp && touchProp[0]) {\r\n      return touchProp[0];\r\n    }\r\n    return event;\r\n  }\r\n\r\n  fabric.util.getPointer = function(event) {\r\n    var element = event.target,\r\n        scroll = fabric.util.getScrollLeftTop(element),\r\n        _evt = getTouchInfo(event);\r\n    return {\r\n      x: _evt.clientX + scroll.left,\r\n      y: _evt.clientY + scroll.top\r\n    };\r\n  };\r\n\r\n  fabric.util.isTouchEvent = function(event) {\r\n    return touchEvents.indexOf(event.type) > -1 || event.pointerType === 'touch';\r\n  };\r\n})();\r\n(function () {\r\n\r\n  /**\r\n   * Cross-browser wrapper for setting element's style\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element\r\n   * @param {Object} styles\r\n   * @return {HTMLElement} Element that was passed as a first argument\r\n   */\r\n  function setStyle(element, styles) {\r\n    var elementStyle = element.style;\r\n    if (!elementStyle) {\r\n      return element;\r\n    }\r\n    if (typeof styles === 'string') {\r\n      element.style.cssText += ';' + styles;\r\n      return styles.indexOf('opacity') > -1\r\n        ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1])\r\n        : element;\r\n    }\r\n    for (var property in styles) {\r\n      if (property === 'opacity') {\r\n        setOpacity(element, styles[property]);\r\n      }\r\n      else {\r\n        var normalizedProperty = (property === 'float' || property === 'cssFloat')\r\n          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')\r\n          : property;\r\n        elementStyle.setProperty(normalizedProperty, styles[property]);\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  var parseEl = fabric.document.createElement('div'),\r\n      supportsOpacity = typeof parseEl.style.opacity === 'string',\r\n      supportsFilters = typeof parseEl.style.filter === 'string',\r\n      reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,\r\n\r\n      /** @ignore */\r\n      setOpacity = function (element) { return element; };\r\n\r\n  if (supportsOpacity) {\r\n    /** @ignore */\r\n    setOpacity = function(element, value) {\r\n      element.style.opacity = value;\r\n      return element;\r\n    };\r\n  }\r\n  else if (supportsFilters) {\r\n    /** @ignore */\r\n    setOpacity = function(element, value) {\r\n      var es = element.style;\r\n      if (element.currentStyle && !element.currentStyle.hasLayout) {\r\n        es.zoom = 1;\r\n      }\r\n      if (reOpacity.test(es.filter)) {\r\n        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');\r\n        es.filter = es.filter.replace(reOpacity, value);\r\n      }\r\n      else {\r\n        es.filter += ' alpha(opacity=' + (value * 100) + ')';\r\n      }\r\n      return element;\r\n    };\r\n  }\r\n\r\n  fabric.util.setStyle = setStyle;\r\n\r\n})();\r\n(function() {\r\n\r\n  var _slice = Array.prototype.slice;\r\n\r\n  /**\r\n   * Takes id and returns an element with that id (if one exists in a document)\r\n   * @memberOf fabric.util\r\n   * @param {String|HTMLElement} id\r\n   * @return {HTMLElement|null}\r\n   */\r\n  function getById(id) {\r\n    return typeof id === 'string' ? fabric.document.getElementById(id) : id;\r\n  }\r\n\r\n  var sliceCanConvertNodelists,\r\n      /**\r\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\r\n       * @memberOf fabric.util\r\n       * @param {Object} arrayLike\r\n       * @return {Array}\r\n       */\r\n      toArray = function(arrayLike) {\r\n        return _slice.call(arrayLike, 0);\r\n      };\r\n\r\n  try {\r\n    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\r\n  }\r\n  catch (err) { }\r\n\r\n  if (!sliceCanConvertNodelists) {\r\n    toArray = function(arrayLike) {\r\n      var arr = new Array(arrayLike.length), i = arrayLike.length;\r\n      while (i--) {\r\n        arr[i] = arrayLike[i];\r\n      }\r\n      return arr;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates specified element with specified attributes\r\n   * @memberOf fabric.util\r\n   * @param {String} tagName Type of an element to create\r\n   * @param {Object} [attributes] Attributes to set on an element\r\n   * @return {HTMLElement} Newly created element\r\n   */\r\n  function makeElement(tagName, attributes) {\r\n    var el = fabric.document.createElement(tagName);\r\n    for (var prop in attributes) {\r\n      if (prop === 'class') {\r\n        el.className = attributes[prop];\r\n      }\r\n      else if (prop === 'for') {\r\n        el.htmlFor = attributes[prop];\r\n      }\r\n      else {\r\n        el.setAttribute(prop, attributes[prop]);\r\n      }\r\n    }\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Adds class to an element\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to add class to\r\n   * @param {String} className Class to add to an element\r\n   */\r\n  function addClass(element, className) {\r\n    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {\r\n      element.className += (element.className ? ' ' : '') + className;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wraps element with another element\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to wrap\r\n   * @param {HTMLElement|String} wrapper Element to wrap with\r\n   * @param {Object} [attributes] Attributes to set on a wrapper\r\n   * @return {HTMLElement} wrapper\r\n   */\r\n  function wrapElement(element, wrapper, attributes) {\r\n    if (typeof wrapper === 'string') {\r\n      wrapper = makeElement(wrapper, attributes);\r\n    }\r\n    if (element.parentNode) {\r\n      element.parentNode.replaceChild(wrapper, element);\r\n    }\r\n    wrapper.appendChild(element);\r\n    return wrapper;\r\n  }\r\n\r\n  /**\r\n   * Returns element scroll offsets\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to operate on\r\n   * @return {Object} Object with left/top values\r\n   */\r\n  function getScrollLeftTop(element) {\r\n\r\n    var left = 0,\r\n        top = 0,\r\n        docElement = fabric.document.documentElement,\r\n        body = fabric.document.body || {\r\n          scrollLeft: 0, scrollTop: 0\r\n        };\r\n\r\n    // While loop checks (and then sets element to) .parentNode OR .host\r\n    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\r\n    //  but the .parentNode of a root ShadowDOM node will always be null, instead\r\n    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\r\n    while (element && (element.parentNode || element.host)) {\r\n\r\n      // Set element to element parent, or 'host' in case of ShadowDOM\r\n      element = element.parentNode || element.host;\r\n\r\n      if (element === fabric.document) {\r\n        left = body.scrollLeft || docElement.scrollLeft || 0;\r\n        top = body.scrollTop ||  docElement.scrollTop || 0;\r\n      }\r\n      else {\r\n        left += element.scrollLeft || 0;\r\n        top += element.scrollTop || 0;\r\n      }\r\n\r\n      if (element.nodeType === 1 && element.style.position === 'fixed') {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return { left: left, top: top };\r\n  }\r\n\r\n  /**\r\n   * Returns offset for a given element\r\n   * @function\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to get offset for\r\n   * @return {Object} Object with \"left\" and \"top\" properties\r\n   */\r\n  function getElementOffset(element) {\r\n    var docElem,\r\n        doc = element && element.ownerDocument,\r\n        box = { left: 0, top: 0 },\r\n        offset = { left: 0, top: 0 },\r\n        scrollLeftTop,\r\n        offsetAttributes = {\r\n          borderLeftWidth: 'left',\r\n          borderTopWidth:  'top',\r\n          paddingLeft:     'left',\r\n          paddingTop:      'top'\r\n        };\r\n\r\n    if (!doc) {\r\n      return offset;\r\n    }\r\n\r\n    for (var attr in offsetAttributes) {\r\n      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\r\n    }\r\n\r\n    docElem = doc.documentElement;\r\n    if ( typeof element.getBoundingClientRect !== 'undefined' ) {\r\n      box = element.getBoundingClientRect();\r\n    }\r\n\r\n    scrollLeftTop = getScrollLeftTop(element);\r\n\r\n    return {\r\n      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\r\n      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns style attribute value of a given element\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to get style attribute for\r\n   * @param {String} attr Style attribute to get for element\r\n   * @return {String} Style attribute value of the given element.\r\n   */\r\n  var getElementStyle;\r\n  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\r\n    getElementStyle = function(element, attr) {\r\n      var style = fabric.document.defaultView.getComputedStyle(element, null);\r\n      return style ? style[attr] : undefined;\r\n    };\r\n  }\r\n  else {\r\n    getElementStyle = function(element, attr) {\r\n      var value = element.style[attr];\r\n      if (!value && element.currentStyle) {\r\n        value = element.currentStyle[attr];\r\n      }\r\n      return value;\r\n    };\r\n  }\r\n\r\n  (function () {\r\n    var style = fabric.document.documentElement.style,\r\n        selectProp = 'userSelect' in style\r\n          ? 'userSelect'\r\n          : 'MozUserSelect' in style\r\n            ? 'MozUserSelect'\r\n            : 'WebkitUserSelect' in style\r\n              ? 'WebkitUserSelect'\r\n              : 'KhtmlUserSelect' in style\r\n                ? 'KhtmlUserSelect'\r\n                : '';\r\n\r\n    /**\r\n     * Makes element unselectable\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to make unselectable\r\n     * @return {HTMLElement} Element that was passed in\r\n     */\r\n    function makeElementUnselectable(element) {\r\n      if (typeof element.onselectstart !== 'undefined') {\r\n        element.onselectstart = fabric.util.falseFunction;\r\n      }\r\n      if (selectProp) {\r\n        element.style[selectProp] = 'none';\r\n      }\r\n      else if (typeof element.unselectable === 'string') {\r\n        element.unselectable = 'on';\r\n      }\r\n      return element;\r\n    }\r\n\r\n    /**\r\n     * Makes element selectable\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to make selectable\r\n     * @return {HTMLElement} Element that was passed in\r\n     */\r\n    function makeElementSelectable(element) {\r\n      if (typeof element.onselectstart !== 'undefined') {\r\n        element.onselectstart = null;\r\n      }\r\n      if (selectProp) {\r\n        element.style[selectProp] = '';\r\n      }\r\n      else if (typeof element.unselectable === 'string') {\r\n        element.unselectable = '';\r\n      }\r\n      return element;\r\n    }\r\n\r\n    fabric.util.makeElementUnselectable = makeElementUnselectable;\r\n    fabric.util.makeElementSelectable = makeElementSelectable;\r\n  })();\r\n\r\n  function getNodeCanvas(element) {\r\n    var impl = fabric.jsdomImplForWrapper(element);\r\n    return impl._canvas || impl._image;\r\n  };\r\n\r\n  function cleanUpJsdomNode(element) {\r\n    if (!fabric.isLikelyNode) {\r\n      return;\r\n    }\r\n    var impl = fabric.jsdomImplForWrapper(element);\r\n    if (impl) {\r\n      impl._image = null;\r\n      impl._canvas = null;\r\n      // unsure if necessary\r\n      impl._currentSrc = null;\r\n      impl._attributes = null;\r\n      impl._classList = null;\r\n    }\r\n  }\r\n\r\n  function setImageSmoothing(ctx, value) {\r\n    ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled\r\n      || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\r\n    ctx.imageSmoothingEnabled = value;\r\n  }\r\n\r\n  /**\r\n   * setImageSmoothing sets the context imageSmoothingEnabled property.\r\n   * Used by canvas and by ImageObject.\r\n   * @memberOf fabric.util\r\n   * @since 4.0.0\r\n   * @param {HTMLRenderingContext2D} ctx to set on\r\n   * @param {Boolean} value true or false\r\n   */\r\n  fabric.util.setImageSmoothing = setImageSmoothing;\r\n  fabric.util.getById = getById;\r\n  fabric.util.toArray = toArray;\r\n  fabric.util.addClass = addClass;\r\n  fabric.util.makeElement = makeElement;\r\n  fabric.util.wrapElement = wrapElement;\r\n  fabric.util.getScrollLeftTop = getScrollLeftTop;\r\n  fabric.util.getElementOffset = getElementOffset;\r\n  fabric.util.getNodeCanvas = getNodeCanvas;\r\n  fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\r\n\r\n})();\r\n(function() {\r\n\r\n  function addParamToUrl(url, param) {\r\n    return url + (/\\?/.test(url) ? '&' : '?') + param;\r\n  }\r\n\r\n  function emptyFn() { }\r\n\r\n  /**\r\n   * Cross-browser abstraction for sending XMLHttpRequest\r\n   * @memberOf fabric.util\r\n   * @param {String} url URL to send XMLHttpRequest to\r\n   * @param {Object} [options] Options object\r\n   * @param {String} [options.method=\"GET\"]\r\n   * @param {String} [options.parameters] parameters to append to url in GET or in body\r\n   * @param {String} [options.body] body to send with POST or PUT request\r\n   * @param {Function} options.onComplete Callback to invoke when request is completed\r\n   * @return {XMLHttpRequest} request\r\n   */\r\n  function request(url, options) {\r\n    options || (options = { });\r\n\r\n    var method = options.method ? options.method.toUpperCase() : 'GET',\r\n        onComplete = options.onComplete || function() { },\r\n        xhr = new fabric.window.XMLHttpRequest(),\r\n        body = options.body || options.parameters;\r\n\r\n    /** @ignore */\r\n    xhr.onreadystatechange = function() {\r\n      if (xhr.readyState === 4) {\r\n        onComplete(xhr);\r\n        xhr.onreadystatechange = emptyFn;\r\n      }\r\n    };\r\n\r\n    if (method === 'GET') {\r\n      body = null;\r\n      if (typeof options.parameters === 'string') {\r\n        url = addParamToUrl(url, options.parameters);\r\n      }\r\n    }\r\n\r\n    xhr.open(method, url, true);\r\n\r\n    if (method === 'POST' || method === 'PUT') {\r\n      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n    }\r\n\r\n    xhr.send(body);\r\n    return xhr;\r\n  }\r\n\r\n  fabric.util.request = request;\r\n})();\r\n/**\r\n * Wrapper around `console.log` (when available)\r\n * @param {*} [values] Values to log\r\n */\r\nfabric.log = console.log;\r\n\r\n/**\r\n * Wrapper around `console.warn` (when available)\r\n * @param {*} [values] Values to log as a warning\r\n */\r\nfabric.warn = console.warn;\r\n(function () {\r\n\r\n  var extend = fabric.util.object.extend,\r\n      clone = fabric.util.object.clone;\r\n\r\n  /**\r\n   * @typedef {Object} AnimationOptions\r\n   * Animation of a value or list of values.\r\n   * When using lists, think of something like this:\r\n   * fabric.util.animate({\r\n   *   startValue: [1, 2, 3],\r\n   *   endValue: [2, 4, 6],\r\n   *   onChange: function([a, b, c]) {\r\n   *     canvas.zoomToPoint({x: b, y: c}, a)\r\n   *     canvas.renderAll()\r\n   *   }\r\n   * });\r\n   * @example\r\n   * @property {Function} [onChange] Callback; invoked on every value change\r\n   * @property {Function} [onComplete] Callback; invoked when value change is completed\r\n   * @example\r\n   * // Note: startValue, endValue, and byValue must match the type\r\n   * var animationOptions = { startValue: 0, endValue: 1, byValue: 0.25 }\r\n   * var animationOptions = { startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] }\r\n   * @property {number | number[]} [startValue=0] Starting value\r\n   * @property {number | number[]} [endValue=100] Ending value\r\n   * @property {number | number[]} [byValue=100] Value to modify the property by\r\n   * @property {Function} [easing] Easing function\r\n   * @property {Number} [duration=500] Duration of change (in ms)\r\n   * @property {Function} [abort] Additional function with logic. If returns true, animation aborts.\r\n   *\r\n   * @typedef {() => void} CancelFunction\r\n   *\r\n   * @typedef {Object} AnimationCurrentState\r\n   * @property {number | number[]} currentValue value in range [`startValue`, `endValue`]\r\n   * @property {number} completionRate value in range [0, 1]\r\n   * @property {number} durationRate value in range [0, 1]\r\n   *\r\n   * @typedef {(AnimationOptions & AnimationCurrentState & { cancel: CancelFunction }} AnimationContext\r\n   */\r\n\r\n  /**\r\n   * Array holding all running animations\r\n   * @memberof fabric\r\n   * @type {AnimationContext[]}\r\n   */\r\n  var RUNNING_ANIMATIONS = [];\r\n  fabric.util.object.extend(RUNNING_ANIMATIONS, {\r\n\r\n    /**\r\n     * cancel all running animations at the next requestAnimFrame\r\n     * @returns {AnimationContext[]}\r\n     */\r\n    cancelAll: function () {\r\n      var animations = this.splice(0);\r\n      animations.forEach(function (animation) {\r\n        animation.cancel();\r\n      });\r\n      return animations;\r\n    },\r\n\r\n    /**\r\n     * cancel all running animations attached to canvas at the next requestAnimFrame\r\n     * @param {fabric.Canvas} canvas\r\n     * @returns {AnimationContext[]}\r\n     */\r\n    cancelByCanvas: function (canvas) {\r\n      if (!canvas) {\r\n        return [];\r\n      }\r\n      var cancelled = this.filter(function (animation) {\r\n        return typeof animation.target === 'object' && animation.target.canvas === canvas;\r\n      });\r\n      cancelled.forEach(function (animation) {\r\n        animation.cancel();\r\n      });\r\n      return cancelled;\r\n    },\r\n\r\n    /**\r\n     * cancel all running animations for target at the next requestAnimFrame\r\n     * @param {*} target\r\n     * @returns {AnimationContext[]}\r\n     */\r\n    cancelByTarget: function (target) {\r\n      var cancelled = this.findAnimationsByTarget(target);\r\n      cancelled.forEach(function (animation) {\r\n        animation.cancel();\r\n      });\r\n      return cancelled;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {CancelFunction} cancelFunc the function returned by animate\r\n     * @returns {number}\r\n     */\r\n    findAnimationIndex: function (cancelFunc) {\r\n      return this.indexOf(this.findAnimation(cancelFunc));\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {CancelFunction} cancelFunc the function returned by animate\r\n     * @returns {AnimationContext | undefined} animation's options object\r\n     */\r\n    findAnimation: function (cancelFunc) {\r\n      return this.find(function (animation) {\r\n        return animation.cancel === cancelFunc;\r\n      });\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {*} target the object that is assigned to the target property of the animation context\r\n     * @returns {AnimationContext[]} array of animation options object associated with target\r\n     */\r\n    findAnimationsByTarget: function (target) {\r\n      if (!target) {\r\n        return [];\r\n      }\r\n      return this.filter(function (animation) {\r\n        return animation.target === target;\r\n      });\r\n    }\r\n  });\r\n\r\n  function noop() {\r\n    return false;\r\n  }\r\n\r\n  function defaultEasing(t, b, c, d) {\r\n    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n  }\r\n\r\n  /**\r\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\r\n   * @memberOf fabric.util\r\n   * @param {AnimationOptions} [options] Animation options\r\n   * @example\r\n   * // Note: startValue, endValue, and byValue must match the type\r\n   * fabric.util.animate({ startValue: 0, endValue: 1, byValue: 0.25 })\r\n   * fabric.util.animate({ startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] })\r\n   * @returns {CancelFunction} cancel function\r\n   */\r\n  function animate(options) {\r\n    options || (options = {});\r\n    var cancel = false,\r\n        context,\r\n        removeFromRegistry = function () {\r\n          var index = fabric.runningAnimations.indexOf(context);\r\n          return index > -1 && fabric.runningAnimations.splice(index, 1)[0];\r\n        };\r\n\r\n    context = extend(clone(options), {\r\n      cancel: function () {\r\n        cancel = true;\r\n        return removeFromRegistry();\r\n      },\r\n      currentValue: 'startValue' in options ? options.startValue : 0,\r\n      completionRate: 0,\r\n      durationRate: 0\r\n    });\r\n    fabric.runningAnimations.push(context);\r\n\r\n    requestAnimFrame(function(timestamp) {\r\n      var start = timestamp || +new Date(),\r\n          duration = options.duration || 500,\r\n          finish = start + duration, time,\r\n          onChange = options.onChange || noop,\r\n          abort = options.abort || noop,\r\n          onComplete = options.onComplete || noop,\r\n          easing = options.easing || defaultEasing,\r\n          isMany = 'startValue' in options ? options.startValue.length > 0 : false,\r\n          startValue = 'startValue' in options ? options.startValue : 0,\r\n          endValue = 'endValue' in options ? options.endValue : 100,\r\n          byValue = options.byValue || (isMany ? startValue.map(function(value, i) {\r\n            return endValue[i] - startValue[i];\r\n          }) : endValue - startValue);\r\n\r\n      options.onStart && options.onStart();\r\n\r\n      (function tick(ticktime) {\r\n        time = ticktime || +new Date();\r\n        var currentTime = time > finish ? duration : (time - start),\r\n            timePerc = currentTime / duration,\r\n            current = isMany ? startValue.map(function(_value, i) {\r\n              return easing(currentTime, startValue[i], byValue[i], duration);\r\n            }) : easing(currentTime, startValue, byValue, duration),\r\n            valuePerc = isMany ? Math.abs((current[0] - startValue[0]) / byValue[0])\r\n              : Math.abs((current - startValue) / byValue);\r\n        //  update context\r\n        context.currentValue = isMany ? current.slice() : current;\r\n        context.completionRate = valuePerc;\r\n        context.durationRate = timePerc;\r\n        if (cancel) {\r\n          return;\r\n        }\r\n        if (abort(current, valuePerc, timePerc)) {\r\n          removeFromRegistry();\r\n          return;\r\n        }\r\n        if (time > finish) {\r\n          //  update context\r\n          context.currentValue = isMany ? endValue.slice() : endValue;\r\n          context.completionRate = 1;\r\n          context.durationRate = 1;\r\n          //  execute callbacks\r\n          onChange(isMany ? endValue.slice() : endValue, 1, 1);\r\n          onComplete(endValue, 1, 1);\r\n          removeFromRegistry();\r\n          return;\r\n        }\r\n        else {\r\n          onChange(current, valuePerc, timePerc);\r\n          requestAnimFrame(tick);\r\n        }\r\n      })(start);\r\n    });\r\n\r\n    return context.cancel;\r\n  }\r\n\r\n  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||\r\n                          fabric.window.webkitRequestAnimationFrame ||\r\n                          fabric.window.mozRequestAnimationFrame    ||\r\n                          fabric.window.oRequestAnimationFrame      ||\r\n                          fabric.window.msRequestAnimationFrame     ||\r\n                          function(callback) {\r\n                            return fabric.window.setTimeout(callback, 1000 / 60);\r\n                          };\r\n\r\n  var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\r\n\r\n  /**\r\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\r\n   * @memberOf fabric.util\r\n   * @param {Function} callback Callback to invoke\r\n   * @param {DOMElement} element optional Element to associate with animation\r\n   */\r\n  function requestAnimFrame() {\r\n    return _requestAnimFrame.apply(fabric.window, arguments);\r\n  }\r\n\r\n  function cancelAnimFrame() {\r\n    return _cancelAnimFrame.apply(fabric.window, arguments);\r\n  }\r\n\r\n  fabric.util.animate = animate;\r\n  fabric.util.requestAnimFrame = requestAnimFrame;\r\n  fabric.util.cancelAnimFrame = cancelAnimFrame;\r\n  fabric.runningAnimations = RUNNING_ANIMATIONS;\r\n})();\r\n(function() {\r\n  // Calculate an in-between color. Returns a \"rgba()\" string.\r\n  // Credit: Edwin Martin <edwin@bitstorm.org>\r\n  //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\r\n  function calculateColor(begin, end, pos) {\r\n    var color = 'rgba('\r\n        + parseInt((begin[0] + pos * (end[0] - begin[0])), 10) + ','\r\n        + parseInt((begin[1] + pos * (end[1] - begin[1])), 10) + ','\r\n        + parseInt((begin[2] + pos * (end[2] - begin[2])), 10);\r\n\r\n    color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\r\n    color += ')';\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\r\n   * @memberOf fabric.util\r\n   * @param {String} fromColor The starting color in hex or rgb(a) format.\r\n   * @param {String} toColor The starting color in hex or rgb(a) format.\r\n   * @param {Number} [duration] Duration of change (in ms).\r\n   * @param {Object} [options] Animation options\r\n   * @param {Function} [options.onChange] Callback; invoked on every value change\r\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\r\n   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\r\n   * @returns {Function} abort function\r\n   */\r\n  function animateColor(fromColor, toColor, duration, options) {\r\n    var startColor = new fabric.Color(fromColor).getSource(),\r\n        endColor = new fabric.Color(toColor).getSource(),\r\n        originalOnComplete = options.onComplete,\r\n        originalOnChange = options.onChange;\r\n    options = options || {};\r\n\r\n    return fabric.util.animate(fabric.util.object.extend(options, {\r\n      duration: duration || 500,\r\n      startValue: startColor,\r\n      endValue: endColor,\r\n      byValue: endColor,\r\n      easing: function (currentTime, startValue, byValue, duration) {\r\n        var posValue = options.colorEasing\r\n          ? options.colorEasing(currentTime, duration)\r\n          : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\r\n        return calculateColor(startValue, byValue, posValue);\r\n      },\r\n      // has to take in account for color restoring;\r\n      onComplete: function(current, valuePerc, timePerc) {\r\n        if (originalOnComplete) {\r\n          return originalOnComplete(\r\n            calculateColor(endColor, endColor, 0),\r\n            valuePerc,\r\n            timePerc\r\n          );\r\n        }\r\n      },\r\n      onChange: function(current, valuePerc, timePerc) {\r\n        if (originalOnChange) {\r\n          if (Array.isArray(current)) {\r\n            return originalOnChange(\r\n              calculateColor(current, current, 0),\r\n              valuePerc,\r\n              timePerc\r\n            );\r\n          }\r\n          originalOnChange(current, valuePerc, timePerc);\r\n        }\r\n      }\r\n    }));\r\n  }\r\n\r\n  fabric.util.animateColor = animateColor;\r\n\r\n})();\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n\r\n  var fabric = global.fabric || (global.fabric = { });\r\n\r\n  if (fabric.Point) {\r\n    fabric.warn('fabric.Point is already defined');\r\n    return;\r\n  }\r\n\r\n  fabric.Point = Point;\r\n\r\n  /**\r\n   * Point class\r\n   * @class fabric.Point\r\n   * @memberOf fabric\r\n   * @constructor\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @return {fabric.Point} thisArg\r\n   */\r\n  function Point(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  Point.prototype = /** @lends fabric.Point.prototype */ {\r\n\r\n    type: 'point',\r\n\r\n    constructor: Point,\r\n\r\n    /**\r\n     * Adds another point to this one and returns another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} new Point instance with added values\r\n     */\r\n    add: function (that) {\r\n      return new Point(this.x + that.x, this.y + that.y);\r\n    },\r\n\r\n    /**\r\n     * Adds another point to this one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */\r\n    addEquals: function (that) {\r\n      this.x += that.x;\r\n      this.y += that.y;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Adds value to this point and returns a new one\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} new Point with added value\r\n     */\r\n    scalarAdd: function (scalar) {\r\n      return new Point(this.x + scalar, this.y + scalar);\r\n    },\r\n\r\n    /**\r\n     * Adds value to this point\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */\r\n    scalarAddEquals: function (scalar) {\r\n      this.x += scalar;\r\n      this.y += scalar;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Subtracts another point from this point and returns a new one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} new Point object with subtracted values\r\n     */\r\n    subtract: function (that) {\r\n      return new Point(this.x - that.x, this.y - that.y);\r\n    },\r\n\r\n    /**\r\n     * Subtracts another point from this point\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */\r\n    subtractEquals: function (that) {\r\n      this.x -= that.x;\r\n      this.y -= that.y;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Subtracts value from this point and returns a new one\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point}\r\n     */\r\n    scalarSubtract: function (scalar) {\r\n      return new Point(this.x - scalar, this.y - scalar);\r\n    },\r\n\r\n    /**\r\n     * Subtracts value from this point\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */\r\n    scalarSubtractEquals: function (scalar) {\r\n      this.x -= scalar;\r\n      this.y -= scalar;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Multiplies this point by a value and returns a new one\r\n     * TODO: rename in scalarMultiply in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point}\r\n     */\r\n    multiply: function (scalar) {\r\n      return new Point(this.x * scalar, this.y * scalar);\r\n    },\r\n\r\n    /**\r\n     * Multiplies this point by a value\r\n     * TODO: rename in scalarMultiplyEquals in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */\r\n    multiplyEquals: function (scalar) {\r\n      this.x *= scalar;\r\n      this.y *= scalar;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Divides this point by a value and returns a new one\r\n     * TODO: rename in scalarDivide in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point}\r\n     */\r\n    divide: function (scalar) {\r\n      return new Point(this.x / scalar, this.y / scalar);\r\n    },\r\n\r\n    /**\r\n     * Divides this point by a value\r\n     * TODO: rename in scalarDivideEquals in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */\r\n    divideEquals: function (scalar) {\r\n      this.x /= scalar;\r\n      this.y /= scalar;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns true if this point is equal to another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */\r\n    eq: function (that) {\r\n      return (this.x === that.x && this.y === that.y);\r\n    },\r\n\r\n    /**\r\n     * Returns true if this point is less than another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */\r\n    lt: function (that) {\r\n      return (this.x < that.x && this.y < that.y);\r\n    },\r\n\r\n    /**\r\n     * Returns true if this point is less than or equal to another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */\r\n    lte: function (that) {\r\n      return (this.x <= that.x && this.y <= that.y);\r\n    },\r\n\r\n    /**\r\n\r\n     * Returns true if this point is greater another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */\r\n    gt: function (that) {\r\n      return (this.x > that.x && this.y > that.y);\r\n    },\r\n\r\n    /**\r\n     * Returns true if this point is greater than or equal to another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */\r\n    gte: function (that) {\r\n      return (this.x >= that.x && this.y >= that.y);\r\n    },\r\n\r\n    /**\r\n     * Returns new point which is the result of linear interpolation with this one and another one\r\n     * @param {fabric.Point} that\r\n     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\r\n     * @return {fabric.Point}\r\n     */\r\n    lerp: function (that, t) {\r\n      if (typeof t === 'undefined') {\r\n        t = 0.5;\r\n      }\r\n      t = Math.max(Math.min(1, t), 0);\r\n      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\r\n    },\r\n\r\n    /**\r\n     * Returns distance from this point and another one\r\n     * @param {fabric.Point} that\r\n     * @return {Number}\r\n     */\r\n    distanceFrom: function (that) {\r\n      var dx = this.x - that.x,\r\n          dy = this.y - that.y;\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n    },\r\n\r\n    /**\r\n     * Returns the point between this point and another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point}\r\n     */\r\n    midPointFrom: function (that) {\r\n      return this.lerp(that);\r\n    },\r\n\r\n    /**\r\n     * Returns a new point which is the min of this and another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point}\r\n     */\r\n    min: function (that) {\r\n      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\r\n    },\r\n\r\n    /**\r\n     * Returns a new point which is the max of this and another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point}\r\n     */\r\n    max: function (that) {\r\n      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\r\n    },\r\n\r\n    /**\r\n     * Returns string representation of this point\r\n     * @return {String}\r\n     */\r\n    toString: function () {\r\n      return this.x + ',' + this.y;\r\n    },\r\n\r\n    /**\r\n     * Sets x/y of this point\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @chainable\r\n     */\r\n    setXY: function (x, y) {\r\n      this.x = x;\r\n      this.y = y;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets x of this point\r\n     * @param {Number} x\r\n     * @chainable\r\n     */\r\n    setX: function (x) {\r\n      this.x = x;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets y of this point\r\n     * @param {Number} y\r\n     * @chainable\r\n     */\r\n    setY: function (y) {\r\n      this.y = y;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets x/y of this point from another point\r\n     * @param {fabric.Point} that\r\n     * @chainable\r\n     */\r\n    setFromPoint: function (that) {\r\n      this.x = that.x;\r\n      this.y = that.y;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Swaps x/y of this point and another point\r\n     * @param {fabric.Point} that\r\n     */\r\n    swap: function (that) {\r\n      var x = this.x,\r\n          y = this.y;\r\n      this.x = that.x;\r\n      this.y = that.y;\r\n      that.x = x;\r\n      that.y = y;\r\n    },\r\n\r\n    /**\r\n     * return a cloned instance of the point\r\n     * @return {fabric.Point}\r\n     */\r\n    clone: function () {\r\n      return new Point(this.x, this.y);\r\n    }\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */\r\n  var fabric = global.fabric || (global.fabric = { });\r\n\r\n  if (fabric.Intersection) {\r\n    fabric.warn('fabric.Intersection is already defined');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Intersection class\r\n   * @class fabric.Intersection\r\n   * @memberOf fabric\r\n   * @constructor\r\n   */\r\n  function Intersection(status) {\r\n    this.status = status;\r\n    this.points = [];\r\n  }\r\n\r\n  fabric.Intersection = Intersection;\r\n\r\n  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\r\n\r\n    constructor: Intersection,\r\n\r\n    /**\r\n     * Appends a point to intersection\r\n     * @param {fabric.Point} point\r\n     * @return {fabric.Intersection} thisArg\r\n     * @chainable\r\n     */\r\n    appendPoint: function (point) {\r\n      this.points.push(point);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Appends points to intersection\r\n     * @param {Array} points\r\n     * @return {fabric.Intersection} thisArg\r\n     * @chainable\r\n     */\r\n    appendPoints: function (points) {\r\n      this.points = this.points.concat(points);\r\n      return this;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Checks if one line intersects another\r\n   * TODO: rename in intersectSegmentSegment\r\n   * @static\r\n   * @param {fabric.Point} a1\r\n   * @param {fabric.Point} a2\r\n   * @param {fabric.Point} b1\r\n   * @param {fabric.Point} b2\r\n   * @return {fabric.Intersection}\r\n   */\r\n  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {\r\n    var result,\r\n        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),\r\n        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),\r\n        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\r\n    if (uB !== 0) {\r\n      var ua = uaT / uB,\r\n          ub = ubT / uB;\r\n      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\r\n        result = new Intersection('Intersection');\r\n        result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\r\n      }\r\n      else {\r\n        result = new Intersection();\r\n      }\r\n    }\r\n    else {\r\n      if (uaT === 0 || ubT === 0) {\r\n        result = new Intersection('Coincident');\r\n      }\r\n      else {\r\n        result = new Intersection('Parallel');\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Checks if line intersects polygon\r\n   * TODO: rename in intersectSegmentPolygon\r\n   * fix detection of coincident\r\n   * @static\r\n   * @param {fabric.Point} a1\r\n   * @param {fabric.Point} a2\r\n   * @param {Array} points\r\n   * @return {fabric.Intersection}\r\n   */\r\n  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\r\n    var result = new Intersection(),\r\n        length = points.length,\r\n        b1, b2, inter, i;\r\n\r\n    for (i = 0; i < length; i++) {\r\n      b1 = points[i];\r\n      b2 = points[(i + 1) % length];\r\n      inter = Intersection.intersectLineLine(a1, a2, b1, b2);\r\n\r\n      result.appendPoints(inter.points);\r\n    }\r\n    if (result.points.length > 0) {\r\n      result.status = 'Intersection';\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Checks if polygon intersects another polygon\r\n   * @static\r\n   * @param {Array} points1\r\n   * @param {Array} points2\r\n   * @return {fabric.Intersection}\r\n   */\r\n  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {\r\n    var result = new Intersection(),\r\n        length = points1.length, i;\r\n\r\n    for (i = 0; i < length; i++) {\r\n      var a1 = points1[i],\r\n          a2 = points1[(i + 1) % length],\r\n          inter = Intersection.intersectLinePolygon(a1, a2, points2);\r\n\r\n      result.appendPoints(inter.points);\r\n    }\r\n    if (result.points.length > 0) {\r\n      result.status = 'Intersection';\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   * Checks if polygon intersects rectangle\r\n   * @static\r\n   * @param {Array} points\r\n   * @param {fabric.Point} r1\r\n   * @param {fabric.Point} r2\r\n   * @return {fabric.Intersection}\r\n   */\r\n  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {\r\n    var min = r1.min(r2),\r\n        max = r1.max(r2),\r\n        topRight = new fabric.Point(max.x, min.y),\r\n        bottomLeft = new fabric.Point(min.x, max.y),\r\n        inter1 = Intersection.intersectLinePolygon(min, topRight, points),\r\n        inter2 = Intersection.intersectLinePolygon(topRight, max, points),\r\n        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),\r\n        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),\r\n        result = new Intersection();\r\n\r\n    result.appendPoints(inter1.points);\r\n    result.appendPoints(inter2.points);\r\n    result.appendPoints(inter3.points);\r\n    result.appendPoints(inter4.points);\r\n\r\n    if (result.points.length > 0) {\r\n      result.status = 'Intersection';\r\n    }\r\n    return result;\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { });\r\n\r\n  if (fabric.Color) {\r\n    fabric.warn('fabric.Color is already defined.');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Color class\r\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\r\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\r\n   *\r\n   * @class fabric.Color\r\n   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\r\n   * @return {fabric.Color} thisArg\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\r\n   */\r\n  function Color(color) {\r\n    if (!color) {\r\n      this.setSource([0, 0, 0, 1]);\r\n    }\r\n    else {\r\n      this._tryParsingColor(color);\r\n    }\r\n  }\r\n\r\n  fabric.Color = Color;\r\n\r\n  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\r\n\r\n    /**\r\n     * @private\r\n     * @param {String|Array} color Color value to parse\r\n     */\r\n    _tryParsingColor: function(color) {\r\n      var source;\r\n\r\n      if (color in Color.colorNameMap) {\r\n        color = Color.colorNameMap[color];\r\n      }\r\n\r\n      if (color === 'transparent') {\r\n        source = [255, 255, 255, 0];\r\n      }\r\n\r\n      if (!source) {\r\n        source = Color.sourceFromHex(color);\r\n      }\r\n      if (!source) {\r\n        source = Color.sourceFromRgb(color);\r\n      }\r\n      if (!source) {\r\n        source = Color.sourceFromHsl(color);\r\n      }\r\n      if (!source) {\r\n        //if color is not recognize let's make black as canvas does\r\n        source = [0, 0, 0, 1];\r\n      }\r\n      if (source) {\r\n        this.setSource(source);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n     * @private\r\n     * @param {Number} r Red color value\r\n     * @param {Number} g Green color value\r\n     * @param {Number} b Blue color value\r\n     * @return {Array} Hsl color\r\n     */\r\n    _rgbToHsl: function(r, g, b) {\r\n      r /= 255; g /= 255; b /= 255;\r\n\r\n      var h, s, l,\r\n          max = fabric.util.array.max([r, g, b]),\r\n          min = fabric.util.array.min([r, g, b]);\r\n\r\n      l = (max + min) / 2;\r\n\r\n      if (max === min) {\r\n        h = s = 0; // achromatic\r\n      }\r\n      else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n          case r:\r\n            h = (g - b) / d + (g < b ? 6 : 0);\r\n            break;\r\n          case g:\r\n            h = (b - r) / d + 2;\r\n            break;\r\n          case b:\r\n            h = (r - g) / d + 4;\r\n            break;\r\n        }\r\n        h /= 6;\r\n      }\r\n\r\n      return [\r\n        Math.round(h * 360),\r\n        Math.round(s * 100),\r\n        Math.round(l * 100)\r\n      ];\r\n    },\r\n\r\n    /**\r\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n     * @return {Array}\r\n     */\r\n    getSource: function() {\r\n      return this._source;\r\n    },\r\n\r\n    /**\r\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n     * @param {Array} source\r\n     */\r\n    setSource: function(source) {\r\n      this._source = source;\r\n    },\r\n\r\n    /**\r\n     * Returns color representation in RGB format\r\n     * @return {String} ex: rgb(0-255,0-255,0-255)\r\n     */\r\n    toRgb: function() {\r\n      var source = this.getSource();\r\n      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';\r\n    },\r\n\r\n    /**\r\n     * Returns color representation in RGBA format\r\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\r\n     */\r\n    toRgba: function() {\r\n      var source = this.getSource();\r\n      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';\r\n    },\r\n\r\n    /**\r\n     * Returns color representation in HSL format\r\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\r\n     */\r\n    toHsl: function() {\r\n      var source = this.getSource(),\r\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';\r\n    },\r\n\r\n    /**\r\n     * Returns color representation in HSLA format\r\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\r\n     */\r\n    toHsla: function() {\r\n      var source = this.getSource(),\r\n          hsl = this._rgbToHsl(source[0], source[1], source[2]);\r\n\r\n      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';\r\n    },\r\n\r\n    /**\r\n     * Returns color representation in HEX format\r\n     * @return {String} ex: FF5555\r\n     */\r\n    toHex: function() {\r\n      var source = this.getSource(), r, g, b;\r\n\r\n      r = source[0].toString(16);\r\n      r = (r.length === 1) ? ('0' + r) : r;\r\n\r\n      g = source[1].toString(16);\r\n      g = (g.length === 1) ? ('0' + g) : g;\r\n\r\n      b = source[2].toString(16);\r\n      b = (b.length === 1) ? ('0' + b) : b;\r\n\r\n      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\r\n    },\r\n\r\n    /**\r\n     * Returns color representation in HEXA format\r\n     * @return {String} ex: FF5555CC\r\n     */\r\n    toHexa: function() {\r\n      var source = this.getSource(), a;\r\n\r\n      a = Math.round(source[3] * 255);\r\n      a = a.toString(16);\r\n      a = (a.length === 1) ? ('0' + a) : a;\r\n\r\n      return this.toHex() + a.toUpperCase();\r\n    },\r\n\r\n    /**\r\n     * Gets value of alpha channel for this color\r\n     * @return {Number} 0-1\r\n     */\r\n    getAlpha: function() {\r\n      return this.getSource()[3];\r\n    },\r\n\r\n    /**\r\n     * Sets value of alpha channel for this color\r\n     * @param {Number} alpha Alpha value 0-1\r\n     * @return {fabric.Color} thisArg\r\n     */\r\n    setAlpha: function(alpha) {\r\n      var source = this.getSource();\r\n      source[3] = alpha;\r\n      this.setSource(source);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Transforms color to its grayscale representation\r\n     * @return {fabric.Color} thisArg\r\n     */\r\n    toGrayscale: function() {\r\n      var source = this.getSource(),\r\n          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),\r\n          currentAlpha = source[3];\r\n      this.setSource([average, average, average, currentAlpha]);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Transforms color to its black and white representation\r\n     * @param {Number} threshold\r\n     * @return {fabric.Color} thisArg\r\n     */\r\n    toBlackWhite: function(threshold) {\r\n      var source = this.getSource(),\r\n          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),\r\n          currentAlpha = source[3];\r\n\r\n      threshold = threshold || 127;\r\n\r\n      average = (Number(average) < Number(threshold)) ? 0 : 255;\r\n      this.setSource([average, average, average, currentAlpha]);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Overlays color with another color\r\n     * @param {String|fabric.Color} otherColor\r\n     * @return {fabric.Color} thisArg\r\n     */\r\n    overlayWith: function(otherColor) {\r\n      if (!(otherColor instanceof Color)) {\r\n        otherColor = new Color(otherColor);\r\n      }\r\n\r\n      var result = [],\r\n          alpha = this.getAlpha(),\r\n          otherAlpha = 0.5,\r\n          source = this.getSource(),\r\n          otherSource = otherColor.getSource(), i;\r\n\r\n      for (i = 0; i < 3; i++) {\r\n        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));\r\n      }\r\n\r\n      result[3] = alpha;\r\n      this.setSource(result);\r\n      return this;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   */\r\n  // eslint-disable-next-line max-len\r\n  fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\r\n\r\n  /**\r\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   */\r\n  fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\r\n\r\n  /**\r\n   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   */\r\n  fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\r\n\r\n  /**\r\n   * Map of the 148 color names with HEX code\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   * @see: https://www.w3.org/TR/css3-color/#svg-color\r\n   */\r\n  fabric.Color.colorNameMap = {\r\n    aliceblue:            '#F0F8FF',\r\n    antiquewhite:         '#FAEBD7',\r\n    aqua:                 '#00FFFF',\r\n    aquamarine:           '#7FFFD4',\r\n    azure:                '#F0FFFF',\r\n    beige:                '#F5F5DC',\r\n    bisque:               '#FFE4C4',\r\n    black:                '#000000',\r\n    blanchedalmond:       '#FFEBCD',\r\n    blue:                 '#0000FF',\r\n    blueviolet:           '#8A2BE2',\r\n    brown:                '#A52A2A',\r\n    burlywood:            '#DEB887',\r\n    cadetblue:            '#5F9EA0',\r\n    chartreuse:           '#7FFF00',\r\n    chocolate:            '#D2691E',\r\n    coral:                '#FF7F50',\r\n    cornflowerblue:       '#6495ED',\r\n    cornsilk:             '#FFF8DC',\r\n    crimson:              '#DC143C',\r\n    cyan:                 '#00FFFF',\r\n    darkblue:             '#00008B',\r\n    darkcyan:             '#008B8B',\r\n    darkgoldenrod:        '#B8860B',\r\n    darkgray:             '#A9A9A9',\r\n    darkgrey:             '#A9A9A9',\r\n    darkgreen:            '#006400',\r\n    darkkhaki:            '#BDB76B',\r\n    darkmagenta:          '#8B008B',\r\n    darkolivegreen:       '#556B2F',\r\n    darkorange:           '#FF8C00',\r\n    darkorchid:           '#9932CC',\r\n    darkred:              '#8B0000',\r\n    darksalmon:           '#E9967A',\r\n    darkseagreen:         '#8FBC8F',\r\n    darkslateblue:        '#483D8B',\r\n    darkslategray:        '#2F4F4F',\r\n    darkslategrey:        '#2F4F4F',\r\n    darkturquoise:        '#00CED1',\r\n    darkviolet:           '#9400D3',\r\n    deeppink:             '#FF1493',\r\n    deepskyblue:          '#00BFFF',\r\n    dimgray:              '#696969',\r\n    dimgrey:              '#696969',\r\n    dodgerblue:           '#1E90FF',\r\n    firebrick:            '#B22222',\r\n    floralwhite:          '#FFFAF0',\r\n    forestgreen:          '#228B22',\r\n    fuchsia:              '#FF00FF',\r\n    gainsboro:            '#DCDCDC',\r\n    ghostwhite:           '#F8F8FF',\r\n    gold:                 '#FFD700',\r\n    goldenrod:            '#DAA520',\r\n    gray:                 '#808080',\r\n    grey:                 '#808080',\r\n    green:                '#008000',\r\n    greenyellow:          '#ADFF2F',\r\n    honeydew:             '#F0FFF0',\r\n    hotpink:              '#FF69B4',\r\n    indianred:            '#CD5C5C',\r\n    indigo:               '#4B0082',\r\n    ivory:                '#FFFFF0',\r\n    khaki:                '#F0E68C',\r\n    lavender:             '#E6E6FA',\r\n    lavenderblush:        '#FFF0F5',\r\n    lawngreen:            '#7CFC00',\r\n    lemonchiffon:         '#FFFACD',\r\n    lightblue:            '#ADD8E6',\r\n    lightcoral:           '#F08080',\r\n    lightcyan:            '#E0FFFF',\r\n    lightgoldenrodyellow: '#FAFAD2',\r\n    lightgray:            '#D3D3D3',\r\n    lightgrey:            '#D3D3D3',\r\n    lightgreen:           '#90EE90',\r\n    lightpink:            '#FFB6C1',\r\n    lightsalmon:          '#FFA07A',\r\n    lightseagreen:        '#20B2AA',\r\n    lightskyblue:         '#87CEFA',\r\n    lightslategray:       '#778899',\r\n    lightslategrey:       '#778899',\r\n    lightsteelblue:       '#B0C4DE',\r\n    lightyellow:          '#FFFFE0',\r\n    lime:                 '#00FF00',\r\n    limegreen:            '#32CD32',\r\n    linen:                '#FAF0E6',\r\n    magenta:              '#FF00FF',\r\n    maroon:               '#800000',\r\n    mediumaquamarine:     '#66CDAA',\r\n    mediumblue:           '#0000CD',\r\n    mediumorchid:         '#BA55D3',\r\n    mediumpurple:         '#9370DB',\r\n    mediumseagreen:       '#3CB371',\r\n    mediumslateblue:      '#7B68EE',\r\n    mediumspringgreen:    '#00FA9A',\r\n    mediumturquoise:      '#48D1CC',\r\n    mediumvioletred:      '#C71585',\r\n    midnightblue:         '#191970',\r\n    mintcream:            '#F5FFFA',\r\n    mistyrose:            '#FFE4E1',\r\n    moccasin:             '#FFE4B5',\r\n    navajowhite:          '#FFDEAD',\r\n    navy:                 '#000080',\r\n    oldlace:              '#FDF5E6',\r\n    olive:                '#808000',\r\n    olivedrab:            '#6B8E23',\r\n    orange:               '#FFA500',\r\n    orangered:            '#FF4500',\r\n    orchid:               '#DA70D6',\r\n    palegoldenrod:        '#EEE8AA',\r\n    palegreen:            '#98FB98',\r\n    paleturquoise:        '#AFEEEE',\r\n    palevioletred:        '#DB7093',\r\n    papayawhip:           '#FFEFD5',\r\n    peachpuff:            '#FFDAB9',\r\n    peru:                 '#CD853F',\r\n    pink:                 '#FFC0CB',\r\n    plum:                 '#DDA0DD',\r\n    powderblue:           '#B0E0E6',\r\n    purple:               '#800080',\r\n    rebeccapurple:        '#663399',\r\n    red:                  '#FF0000',\r\n    rosybrown:            '#BC8F8F',\r\n    royalblue:            '#4169E1',\r\n    saddlebrown:          '#8B4513',\r\n    salmon:               '#FA8072',\r\n    sandybrown:           '#F4A460',\r\n    seagreen:             '#2E8B57',\r\n    seashell:             '#FFF5EE',\r\n    sienna:               '#A0522D',\r\n    silver:               '#C0C0C0',\r\n    skyblue:              '#87CEEB',\r\n    slateblue:            '#6A5ACD',\r\n    slategray:            '#708090',\r\n    slategrey:            '#708090',\r\n    snow:                 '#FFFAFA',\r\n    springgreen:          '#00FF7F',\r\n    steelblue:            '#4682B4',\r\n    tan:                  '#D2B48C',\r\n    teal:                 '#008080',\r\n    thistle:              '#D8BFD8',\r\n    tomato:               '#FF6347',\r\n    turquoise:            '#40E0D0',\r\n    violet:               '#EE82EE',\r\n    wheat:                '#F5DEB3',\r\n    white:                '#FFFFFF',\r\n    whitesmoke:           '#F5F5F5',\r\n    yellow:               '#FFFF00',\r\n    yellowgreen:          '#9ACD32'\r\n  };\r\n\r\n  /**\r\n   * @private\r\n   * @param {Number} p\r\n   * @param {Number} q\r\n   * @param {Number} t\r\n   * @return {Number}\r\n   */\r\n  function hue2rgb(p, q, t) {\r\n    if (t < 0) {\r\n      t += 1;\r\n    }\r\n    if (t > 1) {\r\n      t -= 1;\r\n    }\r\n    if (t < 1 / 6) {\r\n      return p + (q - p) * 6 * t;\r\n    }\r\n    if (t < 1 / 2) {\r\n      return q;\r\n    }\r\n    if (t < 2 / 3) {\r\n      return p + (q - p) * (2 / 3 - t) * 6;\r\n    }\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Returns new color object, when given a color in RGB format\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\r\n   * @return {fabric.Color}\r\n   */\r\n  fabric.Color.fromRgb = function(color) {\r\n    return Color.fromSource(Color.sourceFromRgb(color));\r\n  };\r\n\r\n  /**\r\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\r\n   * @return {Array} source\r\n   */\r\n  fabric.Color.sourceFromRgb = function(color) {\r\n    var match = color.match(Color.reRGBa);\r\n    if (match) {\r\n      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),\r\n          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),\r\n          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\r\n\r\n      return [\r\n        parseInt(r, 10),\r\n        parseInt(g, 10),\r\n        parseInt(b, 10),\r\n        match[4] ? parseFloat(match[4]) : 1\r\n      ];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns new color object, when given a color in RGBA format\r\n   * @static\r\n   * @function\r\n   * @memberOf fabric.Color\r\n   * @param {String} color\r\n   * @return {fabric.Color}\r\n   */\r\n  fabric.Color.fromRgba = Color.fromRgb;\r\n\r\n  /**\r\n   * Returns new color object, when given a color in HSL format\r\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\r\n   * @memberOf fabric.Color\r\n   * @return {fabric.Color}\r\n   */\r\n  fabric.Color.fromHsl = function(color) {\r\n    return Color.fromSource(Color.sourceFromHsl(color));\r\n  };\r\n\r\n  /**\r\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\r\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\r\n   * @return {Array} source\r\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\r\n   */\r\n  fabric.Color.sourceFromHsl = function(color) {\r\n    var match = color.match(Color.reHSLa);\r\n    if (!match) {\r\n      return;\r\n    }\r\n\r\n    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,\r\n        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),\r\n        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),\r\n        r, g, b;\r\n\r\n    if (s === 0) {\r\n      r = g = b = l;\r\n    }\r\n    else {\r\n      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n          p = l * 2 - q;\r\n\r\n      r = hue2rgb(p, q, h + 1 / 3);\r\n      g = hue2rgb(p, q, h);\r\n      b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n\r\n    return [\r\n      Math.round(r * 255),\r\n      Math.round(g * 255),\r\n      Math.round(b * 255),\r\n      match[4] ? parseFloat(match[4]) : 1\r\n    ];\r\n  };\r\n\r\n  /**\r\n   * Returns new color object, when given a color in HSLA format\r\n   * @static\r\n   * @function\r\n   * @memberOf fabric.Color\r\n   * @param {String} color\r\n   * @return {fabric.Color}\r\n   */\r\n  fabric.Color.fromHsla = Color.fromHsl;\r\n\r\n  /**\r\n   * Returns new color object, when given a color in HEX format\r\n   * @static\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: FF5555\r\n   * @return {fabric.Color}\r\n   */\r\n  fabric.Color.fromHex = function(color) {\r\n    return Color.fromSource(Color.sourceFromHex(color));\r\n  };\r\n\r\n  /**\r\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\r\n   * @static\r\n   * @memberOf fabric.Color\r\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\r\n   * @return {Array} source\r\n   */\r\n  fabric.Color.sourceFromHex = function(color) {\r\n    if (color.match(Color.reHex)) {\r\n      var value = color.slice(color.indexOf('#') + 1),\r\n          isShortNotation = (value.length === 3 || value.length === 4),\r\n          isRGBa = (value.length === 8 || value.length === 4),\r\n          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),\r\n          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),\r\n          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6),\r\n          a = isRGBa ? (isShortNotation ? (value.charAt(3) + value.charAt(3)) : value.substring(6, 8)) : 'FF';\r\n\r\n      return [\r\n        parseInt(r, 16),\r\n        parseInt(g, 16),\r\n        parseInt(b, 16),\r\n        parseFloat((parseInt(a, 16) / 255).toFixed(2))\r\n      ];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\r\n   * @static\r\n   * @memberOf fabric.Color\r\n   * @param {Array} source\r\n   * @return {fabric.Color}\r\n   */\r\n  fabric.Color.fromSource = function(source) {\r\n    var oColor = new Color();\r\n    oColor.setSource(source);\r\n    return oColor;\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'],\r\n      skewMap = ['ns', 'nesw', 'ew', 'nwse'],\r\n      controls = {},\r\n      LEFT = 'left', TOP = 'top', RIGHT = 'right', BOTTOM = 'bottom', CENTER = 'center',\r\n      opposite = {\r\n        top: BOTTOM,\r\n        bottom: TOP,\r\n        left: RIGHT,\r\n        right: LEFT,\r\n        center: CENTER,\r\n      }, radiansToDegrees = fabric.util.radiansToDegrees,\r\n      sign = (Math.sign || function(x) { return ((x > 0) - (x < 0)) || +x; });\r\n\r\n  /**\r\n   * Combine control position and object angle to find the control direction compared\r\n   * to the object center.\r\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\r\n   * @param {fabric.Control} control the control class\r\n   * @return {Number} 0 - 7 a quadrant number\r\n   */\r\n  function findCornerQuadrant(fabricObject, control) {\r\n    var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\r\n    return Math.round((cornerAngle % 360) / 45);\r\n  }\r\n\r\n  function fireEvent(eventName, options) {\r\n    var target = options.transform.target,\r\n        canvas = target.canvas,\r\n        canvasOptions = fabric.util.object.clone(options);\r\n    canvasOptions.target = target;\r\n    canvas && canvas.fire('object:' + eventName, canvasOptions);\r\n    target.fire(eventName, options);\r\n  }\r\n\r\n  /**\r\n   * Inspect event and fabricObject properties to understand if the scaling action\r\n   * @param {Event} eventData from the user action\r\n   * @param {fabric.Object} fabricObject the fabric object about to scale\r\n   * @return {Boolean} true if scale is proportional\r\n   */\r\n  function scaleIsProportional(eventData, fabricObject) {\r\n    var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey,\r\n        uniformIsToggled = eventData[uniScaleKey];\r\n    return (canvas.uniformScaling && !uniformIsToggled) ||\r\n    (!canvas.uniformScaling && uniformIsToggled);\r\n  }\r\n\r\n  /**\r\n   * Checks if transform is centered\r\n   * @param {Object} transform transform data\r\n   * @return {Boolean} true if transform is centered\r\n   */\r\n  function isTransformCentered(transform) {\r\n    return transform.originX === CENTER && transform.originY === CENTER;\r\n  }\r\n\r\n  /**\r\n   * Inspect fabricObject to understand if the current scaling action is allowed\r\n   * @param {fabric.Object} fabricObject the fabric object about to scale\r\n   * @param {String} by 'x' or 'y' or ''\r\n   * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\r\n   * @return {Boolean} true if scaling is not allowed at current conditions\r\n   */\r\n  function scalingIsForbidden(fabricObject, by, scaleProportionally) {\r\n    var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;\r\n    if (lockX && lockY) {\r\n      return true;\r\n    }\r\n    if (!by && (lockX || lockY) && scaleProportionally) {\r\n      return true;\r\n    }\r\n    if (lockX && by === 'x') {\r\n      return true;\r\n    }\r\n    if (lockY && by === 'y') {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * return the correct cursor style for the scale action\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */\r\n  function scaleCursorStyleHandler(eventData, control, fabricObject) {\r\n    var notAllowed = 'not-allowed',\r\n        scaleProportionally = scaleIsProportional(eventData, fabricObject),\r\n        by = '';\r\n    if (control.x !== 0 && control.y === 0) {\r\n      by = 'x';\r\n    }\r\n    else if (control.x === 0 && control.y !== 0) {\r\n      by = 'y';\r\n    }\r\n    if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\r\n      return notAllowed;\r\n    }\r\n    var n = findCornerQuadrant(fabricObject, control);\r\n    return scaleMap[n] + '-resize';\r\n  }\r\n\r\n  /**\r\n   * return the correct cursor style for the skew action\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */\r\n  function skewCursorStyleHandler(eventData, control, fabricObject) {\r\n    var notAllowed = 'not-allowed';\r\n    if (control.x !== 0 && fabricObject.lockSkewingY) {\r\n      return notAllowed;\r\n    }\r\n    if (control.y !== 0 && fabricObject.lockSkewingX) {\r\n      return notAllowed;\r\n    }\r\n    var n = findCornerQuadrant(fabricObject, control) % 4;\r\n    return skewMap[n] + '-resize';\r\n  }\r\n\r\n  /**\r\n   * Combine skew and scale style handlers to cover fabric standard use case\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */\r\n  function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {\r\n    if (eventData[fabricObject.canvas.altActionKey]) {\r\n      return controls.skewCursorStyleHandler(eventData, control, fabricObject);\r\n    }\r\n    return controls.scaleCursorStyleHandler(eventData, control, fabricObject);\r\n  }\r\n\r\n  /**\r\n   * Inspect event, control and fabricObject to return the correct action name\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} an action name\r\n   */\r\n  function scaleOrSkewActionName(eventData, control, fabricObject) {\r\n    var isAlternative = eventData[fabricObject.canvas.altActionKey];\r\n    if (control.x === 0) {\r\n      // then is scaleY or skewX\r\n      return isAlternative ? 'skewX' : 'scaleY';\r\n    }\r\n    if (control.y === 0) {\r\n      // then is scaleY or skewX\r\n      return isAlternative ? 'skewY' : 'scaleX';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the correct style for the control that is used for rotation.\r\n   * this function is very simple and it just take care of not-allowed or standard cursor\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */\r\n  function rotationStyleHandler(eventData, control, fabricObject) {\r\n    if (fabricObject.lockRotation) {\r\n      return 'not-allowed';\r\n    }\r\n    return control.cursorStyle;\r\n  }\r\n\r\n  function commonEventInfo(eventData, transform, x, y) {\r\n    return {\r\n      e: eventData,\r\n      transform: transform,\r\n      pointer: {\r\n        x: x,\r\n        y: y,\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Wrap an action handler with saving/restoring object position on the transform.\r\n   * this is the code that permits to objects to keep their position while transforming.\r\n   * @param {Function} actionHandler the function to wrap\r\n   * @return {Function} a function with an action handler signature\r\n   */\r\n  function wrapWithFixedAnchor(actionHandler) {\r\n    return function(eventData, transform, x, y) {\r\n      var target = transform.target, centerPoint = target.getCenterPoint(),\r\n          constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY),\r\n          actionPerformed = actionHandler(eventData, transform, x, y);\r\n      target.setPositionByOrigin(constraint, transform.originX, transform.originY);\r\n      return actionPerformed;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Wrap an action handler with firing an event if the action is performed\r\n   * @param {Function} actionHandler the function to wrap\r\n   * @return {Function} a function with an action handler signature\r\n   */\r\n  function wrapWithFireEvent(eventName, actionHandler) {\r\n    return function(eventData, transform, x, y) {\r\n      var actionPerformed = actionHandler(eventData, transform, x, y);\r\n      if (actionPerformed) {\r\n        fireEvent(eventName, commonEventInfo(eventData, transform, x, y));\r\n      }\r\n      return actionPerformed;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Transforms a point described by x and y in a distance from the top left corner of the object\r\n   * bounding box.\r\n   * @param {Object} transform\r\n   * @param {String} originX\r\n   * @param {String} originY\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @return {Fabric.Point} the normalized point\r\n   */\r\n  function getLocalPoint(transform, originX, originY, x, y) {\r\n    var target = transform.target,\r\n        control = target.controls[transform.corner],\r\n        zoom = target.canvas.getZoom(),\r\n        padding = target.padding / zoom,\r\n        localPoint = target.toLocalPoint(new fabric.Point(x, y), originX, originY);\r\n    if (localPoint.x >= padding) {\r\n      localPoint.x -= padding;\r\n    }\r\n    if (localPoint.x <= -padding) {\r\n      localPoint.x += padding;\r\n    }\r\n    if (localPoint.y >= padding) {\r\n      localPoint.y -= padding;\r\n    }\r\n    if (localPoint.y <= padding) {\r\n      localPoint.y += padding;\r\n    }\r\n    localPoint.x -= control.offsetX;\r\n    localPoint.y -= control.offsetY;\r\n    return localPoint;\r\n  }\r\n\r\n  /**\r\n   * Detect if the fabric object is flipped on one side.\r\n   * @param {fabric.Object} target\r\n   * @return {Boolean} true if one flip, but not two.\r\n   */\r\n  function targetHasOneFlip(target) {\r\n    return target.flipX !== target.flipY;\r\n  }\r\n\r\n  /**\r\n   * Utility function to compensate the scale factor when skew is applied on both axes\r\n   * @private\r\n   */\r\n  function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {\r\n    if (target[oppositeSkew] !== 0) {\r\n      var newDim = target._getTransformedDimensions()[axis];\r\n      var newValue = reference / newDim * target[scaleToCompensate];\r\n      target.set(scaleToCompensate, newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Action handler for skewing on the X axis\r\n   * @private\r\n   */\r\n  function skewObjectX(eventData, transform, x, y) {\r\n    var target = transform.target,\r\n        // find how big the object would be, if there was no skewX. takes in account scaling\r\n        dimNoSkew = target._getTransformedDimensions(0, target.skewY),\r\n        localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),\r\n        // the mouse is in the center of the object, and we want it to stay there.\r\n        // so the object will grow twice as much as the mouse.\r\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\r\n        totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x,\r\n        currentSkew = target.skewX, newSkew;\r\n    if (totalSkewSize < 2) {\r\n      // let's make it easy to go back to position 0.\r\n      newSkew = 0;\r\n    }\r\n    else {\r\n      newSkew = radiansToDegrees(\r\n        Math.atan2((totalSkewSize / target.scaleX), (dimNoSkew.y / target.scaleY))\r\n      );\r\n      // now we have to find the sign of the skew.\r\n      // it mostly depend on the origin of transformation.\r\n      if (transform.originX === LEFT && transform.originY === BOTTOM) {\r\n        newSkew = -newSkew;\r\n      }\r\n      if (transform.originX === RIGHT && transform.originY === TOP) {\r\n        newSkew = -newSkew;\r\n      }\r\n      if (targetHasOneFlip(target)) {\r\n        newSkew = -newSkew;\r\n      }\r\n    }\r\n    var hasSkewed = currentSkew !== newSkew;\r\n    if (hasSkewed) {\r\n      var dimBeforeSkewing = target._getTransformedDimensions().y;\r\n      target.set('skewX', newSkew);\r\n      compensateScaleForSkew(target, 'skewY', 'scaleY', 'y', dimBeforeSkewing);\r\n    }\r\n    return hasSkewed;\r\n  }\r\n\r\n  /**\r\n   * Action handler for skewing on the Y axis\r\n   * @private\r\n   */\r\n  function skewObjectY(eventData, transform, x, y) {\r\n    var target = transform.target,\r\n        // find how big the object would be, if there was no skewX. takes in account scaling\r\n        dimNoSkew = target._getTransformedDimensions(target.skewX, 0),\r\n        localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),\r\n        // the mouse is in the center of the object, and we want it to stay there.\r\n        // so the object will grow twice as much as the mouse.\r\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\r\n        totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y,\r\n        currentSkew = target.skewY, newSkew;\r\n    if (totalSkewSize < 2) {\r\n      // let's make it easy to go back to position 0.\r\n      newSkew = 0;\r\n    }\r\n    else {\r\n      newSkew = radiansToDegrees(\r\n        Math.atan2((totalSkewSize / target.scaleY), (dimNoSkew.x / target.scaleX))\r\n      );\r\n      // now we have to find the sign of the skew.\r\n      // it mostly depend on the origin of transformation.\r\n      if (transform.originX === LEFT && transform.originY === BOTTOM) {\r\n        newSkew = -newSkew;\r\n      }\r\n      if (transform.originX === RIGHT && transform.originY === TOP) {\r\n        newSkew = -newSkew;\r\n      }\r\n      if (targetHasOneFlip(target)) {\r\n        newSkew = -newSkew;\r\n      }\r\n    }\r\n    var hasSkewed = currentSkew !== newSkew;\r\n    if (hasSkewed) {\r\n      var dimBeforeSkewing = target._getTransformedDimensions().x;\r\n      target.set('skewY', newSkew);\r\n      compensateScaleForSkew(target, 'skewX', 'scaleX', 'x', dimBeforeSkewing);\r\n    }\r\n    return hasSkewed;\r\n  }\r\n\r\n  /**\r\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\r\n   * skew direction and determine the correct transform origin for the anchor point\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function skewHandlerX(eventData, transform, x, y) {\r\n    // step1 figure out and change transform origin.\r\n    // if skewX > 0 and originY bottom we anchor on right\r\n    // if skewX > 0 and originY top we anchor on left\r\n    // if skewX < 0 and originY bottom we anchor on left\r\n    // if skewX < 0 and originY top we anchor on right\r\n    // if skewX is 0, we look for mouse position to understand where are we going.\r\n    var target = transform.target, currentSkew = target.skewX, originX, originY = transform.originY;\r\n    if (target.lockSkewingX) {\r\n      return false;\r\n    }\r\n    if (currentSkew === 0) {\r\n      var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\r\n      if (localPointFromCenter.x > 0) {\r\n        // we are pulling right, anchor left;\r\n        originX = LEFT;\r\n      }\r\n      else {\r\n        // we are pulling right, anchor right\r\n        originX = RIGHT;\r\n      }\r\n    }\r\n    else {\r\n      if (currentSkew > 0) {\r\n        originX = originY === TOP ? LEFT : RIGHT;\r\n      }\r\n      if (currentSkew < 0) {\r\n        originX = originY === TOP ? RIGHT : LEFT;\r\n      }\r\n      // is the object flipped on one side only? swap the origin.\r\n      if (targetHasOneFlip(target)) {\r\n        originX = originX === LEFT ? RIGHT : LEFT;\r\n      }\r\n    }\r\n\r\n    // once we have the origin, we find the anchor point\r\n    transform.originX = originX;\r\n    var finalHandler = wrapWithFireEvent('skewing', wrapWithFixedAnchor(skewObjectX));\r\n    return finalHandler(eventData, transform, x, y);\r\n  }\r\n\r\n  /**\r\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\r\n   * skew direction and determine the correct transform origin for the anchor point\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function skewHandlerY(eventData, transform, x, y) {\r\n    // step1 figure out and change transform origin.\r\n    // if skewY > 0 and originX left we anchor on top\r\n    // if skewY > 0 and originX right we anchor on bottom\r\n    // if skewY < 0 and originX left we anchor on bottom\r\n    // if skewY < 0 and originX right we anchor on top\r\n    // if skewY is 0, we look for mouse position to understand where are we going.\r\n    var target = transform.target, currentSkew = target.skewY, originY, originX = transform.originX;\r\n    if (target.lockSkewingY) {\r\n      return false;\r\n    }\r\n    if (currentSkew === 0) {\r\n      var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\r\n      if (localPointFromCenter.y > 0) {\r\n        // we are pulling down, anchor up;\r\n        originY = TOP;\r\n      }\r\n      else {\r\n        // we are pulling up, anchor down\r\n        originY = BOTTOM;\r\n      }\r\n    }\r\n    else {\r\n      if (currentSkew > 0) {\r\n        originY = originX === LEFT ? TOP : BOTTOM;\r\n      }\r\n      if (currentSkew < 0) {\r\n        originY = originX === LEFT ? BOTTOM : TOP;\r\n      }\r\n      // is the object flipped on one side only? swap the origin.\r\n      if (targetHasOneFlip(target)) {\r\n        originY = originY === TOP ? BOTTOM : TOP;\r\n      }\r\n    }\r\n\r\n    // once we have the origin, we find the anchor point\r\n    transform.originY = originY;\r\n    var finalHandler = wrapWithFireEvent('skewing', wrapWithFixedAnchor(skewObjectY));\r\n    return finalHandler(eventData, transform, x, y);\r\n  }\r\n\r\n  /**\r\n   * Action handler for rotation and snapping, without anchor point.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   * @private\r\n   */\r\n  function rotationWithSnapping(eventData, transform, x, y) {\r\n    var t = transform,\r\n        target = t.target,\r\n        pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\r\n\r\n    if (target.lockRotation) {\r\n      return false;\r\n    }\r\n\r\n    var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x),\r\n        curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x),\r\n        angle = radiansToDegrees(curAngle - lastAngle + t.theta),\r\n        hasRotated = true;\r\n\r\n    if (target.snapAngle > 0) {\r\n      var snapAngle  = target.snapAngle,\r\n          snapThreshold  = target.snapThreshold || snapAngle,\r\n          rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,\r\n          leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\r\n\r\n      if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\r\n        angle = leftAngleLocked;\r\n      }\r\n      else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\r\n        angle = rightAngleLocked;\r\n      }\r\n    }\r\n\r\n    // normalize angle to positive value\r\n    if (angle < 0) {\r\n      angle = 360 + angle;\r\n    }\r\n    angle %= 360;\r\n\r\n    hasRotated = target.angle !== angle;\r\n    target.angle = angle;\r\n    return hasRotated;\r\n  }\r\n\r\n  /**\r\n   * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @param {Object} options additional information for scaling\r\n   * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\r\n   * @return {Boolean} true if some change happened\r\n   * @private\r\n   */\r\n  function scaleObject(eventData, transform, x, y, options) {\r\n    options = options || {};\r\n    var target = transform.target,\r\n        lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY,\r\n        by = options.by, newPoint, scaleX, scaleY, dim,\r\n        scaleProportionally = scaleIsProportional(eventData, target),\r\n        forbidScaling = scalingIsForbidden(target, by, scaleProportionally),\r\n        signX, signY, gestureScale = transform.gestureScale;\r\n\r\n    if (forbidScaling) {\r\n      return false;\r\n    }\r\n    if (gestureScale) {\r\n      scaleX = transform.scaleX * gestureScale;\r\n      scaleY = transform.scaleY * gestureScale;\r\n    }\r\n    else {\r\n      newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y);\r\n      // use of sign: We use sign to detect change of direction of an action. sign usually change when\r\n      // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\r\n      // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\r\n      // cross many time the origin point and flip the object. so we need a way to filter out the noise.\r\n      // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\r\n      signX = by !== 'y' ? sign(newPoint.x) : 1;\r\n      signY = by !== 'x' ? sign(newPoint.y) : 1;\r\n      if (!transform.signX) {\r\n        transform.signX = signX;\r\n      }\r\n      if (!transform.signY) {\r\n        transform.signY = signY;\r\n      }\r\n\r\n      if (target.lockScalingFlip &&\r\n        (transform.signX !== signX || transform.signY !== signY)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      dim = target._getTransformedDimensions();\r\n      // missing detection of flip and logic to switch the origin\r\n      if (scaleProportionally && !by) {\r\n        // uniform scaling\r\n        var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),\r\n            original = transform.original,\r\n            originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) +\r\n              Math.abs(dim.y * original.scaleY / target.scaleY),\r\n            scale = distance / originalDistance;\r\n        scaleX = original.scaleX * scale;\r\n        scaleY = original.scaleY * scale;\r\n      }\r\n      else {\r\n        scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);\r\n        scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);\r\n      }\r\n      // if we are scaling by center, we need to double the scale\r\n      if (isTransformCentered(transform)) {\r\n        scaleX *= 2;\r\n        scaleY *= 2;\r\n      }\r\n      if (transform.signX !== signX && by !== 'y') {\r\n        transform.originX = opposite[transform.originX];\r\n        scaleX *= -1;\r\n        transform.signX = signX;\r\n      }\r\n      if (transform.signY !== signY && by !== 'x') {\r\n        transform.originY = opposite[transform.originY];\r\n        scaleY *= -1;\r\n        transform.signY = signY;\r\n      }\r\n    }\r\n    // minScale is taken are in the setter.\r\n    var oldScaleX = target.scaleX, oldScaleY = target.scaleY;\r\n    if (!by) {\r\n      !lockScalingX && target.set('scaleX', scaleX);\r\n      !lockScalingY && target.set('scaleY', scaleY);\r\n    }\r\n    else {\r\n      // forbidden cases already handled on top here.\r\n      by === 'x' && target.set('scaleX', scaleX);\r\n      by === 'y' && target.set('scaleY', scaleY);\r\n    }\r\n    return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\r\n  }\r\n\r\n  /**\r\n   * Generic scaling logic, to scale from corners either equally or freely.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function scaleObjectFromCorner(eventData, transform, x, y) {\r\n    return scaleObject(eventData, transform, x, y);\r\n  }\r\n\r\n  /**\r\n   * Scaling logic for the X axis.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function scaleObjectX(eventData, transform, x, y) {\r\n    return scaleObject(eventData, transform, x, y , { by: 'x' });\r\n  }\r\n\r\n  /**\r\n   * Scaling logic for the Y axis.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function scaleObjectY(eventData, transform, x, y) {\r\n    return scaleObject(eventData, transform, x, y , { by: 'y' });\r\n  }\r\n\r\n  /**\r\n   * Composed action handler to either scale Y or skew X\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function scalingYOrSkewingX(eventData, transform, x, y) {\r\n    // ok some safety needed here.\r\n    if (eventData[transform.target.canvas.altActionKey]) {\r\n      return controls.skewHandlerX(eventData, transform, x, y);\r\n    }\r\n    return controls.scalingY(eventData, transform, x, y);\r\n  }\r\n\r\n  /**\r\n   * Composed action handler to either scale X or skew Y\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function scalingXOrSkewingY(eventData, transform, x, y) {\r\n    // ok some safety needed here.\r\n    if (eventData[transform.target.canvas.altActionKey]) {\r\n      return controls.skewHandlerY(eventData, transform, x, y);\r\n    }\r\n    return controls.scalingX(eventData, transform, x, y);\r\n  }\r\n\r\n  /**\r\n   * Action handler to change textbox width\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */\r\n  function changeWidth(eventData, transform, x, y) {\r\n    var target = transform.target, localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),\r\n        strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),\r\n        multiplier = isTransformCentered(transform) ? 2 : 1,\r\n        oldWidth = target.width,\r\n        newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;\r\n    target.set('width', Math.max(newWidth, 0));\r\n    return oldWidth !== newWidth;\r\n  }\r\n\r\n  /**\r\n   * Action handler\r\n   * @private\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if the translation occurred\r\n   */\r\n  function dragHandler(eventData, transform, x, y) {\r\n    var target = transform.target,\r\n        newLeft = x - transform.offsetX,\r\n        newTop = y - transform.offsetY,\r\n        moveX = !target.get('lockMovementX') && target.left !== newLeft,\r\n        moveY = !target.get('lockMovementY') && target.top !== newTop;\r\n    moveX && target.set('left', newLeft);\r\n    moveY && target.set('top', newTop);\r\n    if (moveX || moveY) {\r\n      fireEvent('moving', commonEventInfo(eventData, transform, x, y));\r\n    }\r\n    return moveX || moveY;\r\n  }\r\n\r\n  controls.scaleCursorStyleHandler = scaleCursorStyleHandler;\r\n  controls.skewCursorStyleHandler = skewCursorStyleHandler;\r\n  controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;\r\n  controls.rotationWithSnapping = wrapWithFireEvent('rotating', wrapWithFixedAnchor(rotationWithSnapping));\r\n  controls.scalingEqually = wrapWithFireEvent('scaling', wrapWithFixedAnchor( scaleObjectFromCorner));\r\n  controls.scalingX = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectX));\r\n  controls.scalingY = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectY));\r\n  controls.scalingYOrSkewingX = scalingYOrSkewingX;\r\n  controls.scalingXOrSkewingY = scalingXOrSkewingY;\r\n  controls.changeWidth = wrapWithFireEvent('resizing', wrapWithFixedAnchor(changeWidth));\r\n  controls.skewHandlerX = skewHandlerX;\r\n  controls.skewHandlerY = skewHandlerY;\r\n  controls.dragHandler = dragHandler;\r\n  controls.scaleOrSkewActionName = scaleOrSkewActionName;\r\n  controls.rotationStyleHandler = rotationStyleHandler;\r\n  controls.fireEvent = fireEvent;\r\n  controls.wrapWithFixedAnchor = wrapWithFixedAnchor;\r\n  controls.wrapWithFireEvent = wrapWithFireEvent;\r\n  controls.getLocalPoint = getLocalPoint;\r\n  fabric.controlsUtils = controls;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      degreesToRadians = fabric.util.degreesToRadians,\r\n      controls = fabric.controlsUtils;\r\n\r\n  /**\r\n   * Render a round control, as per fabric features.\r\n   * This function is written to respect object properties like transparentCorners, cornerSize\r\n   * cornerColor, cornerStrokeColor\r\n   * plus the addition of offsetY and offsetX.\r\n   * @param {CanvasRenderingContext2D} ctx context to render on\r\n   * @param {Number} left x coordinate where the control center should be\r\n   * @param {Number} top y coordinate where the control center should be\r\n   * @param {Object} styleOverride override for fabric.Object controls style\r\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\r\n   */\r\n  function renderCircleControl (ctx, left, top, styleOverride, fabricObject) {\r\n    styleOverride = styleOverride || {};\r\n    var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\r\n        ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\r\n        transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\r\n          styleOverride.transparentCorners : fabricObject.transparentCorners,\r\n        methodName = transparentCorners ? 'stroke' : 'fill',\r\n        stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),\r\n        myLeft = left,\r\n        myTop = top, size;\r\n    ctx.save();\r\n    ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\r\n    ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\r\n    // as soon as fabric react v5, remove ie11, use proper ellipse code.\r\n    if (xSize > ySize) {\r\n      size = xSize;\r\n      ctx.scale(1.0, ySize / xSize);\r\n      myTop = top * xSize / ySize;\r\n    }\r\n    else if (ySize > xSize) {\r\n      size = ySize;\r\n      ctx.scale(xSize / ySize, 1.0);\r\n      myLeft = left * ySize / xSize;\r\n    }\r\n    else {\r\n      size = xSize;\r\n    }\r\n    // this is still wrong\r\n    ctx.lineWidth = 1;\r\n    ctx.beginPath();\r\n    ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);\r\n    ctx[methodName]();\r\n    if (stroke) {\r\n      ctx.stroke();\r\n    }\r\n    ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Render a square control, as per fabric features.\r\n   * This function is written to respect object properties like transparentCorners, cornerSize\r\n   * cornerColor, cornerStrokeColor\r\n   * plus the addition of offsetY and offsetX.\r\n   * @param {CanvasRenderingContext2D} ctx context to render on\r\n   * @param {Number} left x coordinate where the control center should be\r\n   * @param {Number} top y coordinate where the control center should be\r\n   * @param {Object} styleOverride override for fabric.Object controls style\r\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\r\n   */\r\n  function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {\r\n    styleOverride = styleOverride || {};\r\n    var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,\r\n        ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,\r\n        transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ?\r\n          styleOverride.transparentCorners : fabricObject.transparentCorners,\r\n        methodName = transparentCorners ? 'stroke' : 'fill',\r\n        stroke = !transparentCorners && (\r\n          styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor\r\n        ), xSizeBy2 = xSize / 2, ySizeBy2 = ySize / 2;\r\n    ctx.save();\r\n    ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\r\n    ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\r\n    // this is still wrong\r\n    ctx.lineWidth = 1;\r\n    ctx.translate(left, top);\r\n    ctx.rotate(degreesToRadians(fabricObject.angle));\r\n    // this does not work, and fixed with ( && ) does not make sense.\r\n    // to have real transparent corners we need the controls on upperCanvas\r\n    // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\r\n    ctx[methodName + 'Rect'](-xSizeBy2, -ySizeBy2, xSize, ySize);\r\n    if (stroke) {\r\n      ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\r\n    }\r\n    ctx.restore();\r\n  }\r\n\r\n  controls.renderCircleControl = renderCircleControl;\r\n  controls.renderSquareControl = renderSquareControl;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { });\r\n\r\n  function Control(options) {\r\n    for (var i in options) {\r\n      this[i] = options[i];\r\n    }\r\n  }\r\n\r\n  fabric.Control = Control;\r\n\r\n  fabric.Control.prototype = /** @lends fabric.Control.prototype */ {\r\n\r\n    /**\r\n     * keep track of control visibility.\r\n     * mainly for backward compatibility.\r\n     * if you do not want to see a control, you can remove it\r\n     * from the controlset.\r\n     * @type {Boolean}\r\n     * @default true\r\n     */\r\n    visible: true,\r\n\r\n    /**\r\n     * Name of the action that the control will likely execute.\r\n     * This is optional. FabricJS uses to identify what the user is doing for some\r\n     * extra optimizations. If you are writing a custom control and you want to know\r\n     * somewhere else in the code what is going on, you can use this string here.\r\n     * you can also provide a custom getActionName if your control run multiple actions\r\n     * depending on some external state.\r\n     * default to scale since is the most common, used on 4 corners by default\r\n     * @type {String}\r\n     * @default 'scale'\r\n     */\r\n    actionName: 'scale',\r\n\r\n    /**\r\n     * Drawing angle of the control.\r\n     * NOT used for now, but name marked as needed for internal logic\r\n     * example: to reuse the same drawing function for different rotated controls\r\n     * @type {Number}\r\n     * @default 0\r\n     */\r\n    angle: 0,\r\n\r\n    /**\r\n     * Relative position of the control. X\r\n     * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\r\n     * of the bounding box.\r\n     * @type {Number}\r\n     * @default 0\r\n     */\r\n    x: 0,\r\n\r\n    /**\r\n     * Relative position of the control. Y\r\n     * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\r\n     * of the bounding box.\r\n     * @type {Number}\r\n     * @default 0\r\n     */\r\n    y: 0,\r\n\r\n    /**\r\n     * Horizontal offset of the control from the defined position. In pixels\r\n     * Positive offset moves the control to the right, negative to the left.\r\n     * It used when you want to have position of control that does not scale with\r\n     * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\r\n     * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will\r\n     * stay 30 pixels no matter how the object is big. Another example is having 2\r\n     * controls in the corner, that stay in the same position when the object scale.\r\n     * of the bounding box.\r\n     * @type {Number}\r\n     * @default 0\r\n     */\r\n    offsetX: 0,\r\n\r\n    /**\r\n     * Vertical offset of the control from the defined position. In pixels\r\n     * Positive offset moves the control to the bottom, negative to the top.\r\n     * @type {Number}\r\n     * @default 0\r\n     */\r\n    offsetY: 0,\r\n\r\n    /**\r\n     * Sets the length of the control. If null, defaults to object's cornerSize.\r\n     * Expects both sizeX and sizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */\r\n    sizeX: null,\r\n\r\n    /**\r\n     * Sets the height of the control. If null, defaults to object's cornerSize.\r\n     * Expects both sizeX and sizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */\r\n    sizeY: null,\r\n\r\n    /**\r\n     * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\r\n     * Expects both touchSizeX and touchSizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */\r\n    touchSizeX: null,\r\n\r\n    /**\r\n     * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\r\n     * Expects both touchSizeX and touchSizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */\r\n    touchSizeY: null,\r\n\r\n    /**\r\n     * Css cursor style to display when the control is hovered.\r\n     * if the method `cursorStyleHandler` is provided, this property is ignored.\r\n     * @type {String}\r\n     * @default 'crosshair'\r\n     */\r\n    cursorStyle: 'crosshair',\r\n\r\n    /**\r\n     * If controls has an offsetY or offsetX, draw a line that connects\r\n     * the control to the bounding box\r\n     * @type {Boolean}\r\n     * @default false\r\n     */\r\n    withConnection: false,\r\n\r\n    /**\r\n     * The control actionHandler, provide one to handle action ( control being moved )\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {Object} transformData properties of the current transform\r\n     * @param {Number} x x position of the cursor\r\n     * @param {Number} y y position of the cursor\r\n     * @return {Boolean} true if the action/event modified the object\r\n     */\r\n    actionHandler: function(/* eventData, transformData, x, y */) { },\r\n\r\n    /**\r\n     * The control handler for mouse down, provide one to handle mouse down on control\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {Object} transformData properties of the current transform\r\n     * @param {Number} x x position of the cursor\r\n     * @param {Number} y y position of the cursor\r\n     * @return {Boolean} true if the action/event modified the object\r\n     */\r\n    mouseDownHandler: function(/* eventData, transformData, x, y */) { },\r\n\r\n    /**\r\n     * The control mouseUpHandler, provide one to handle an effect on mouse up.\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {Object} transformData properties of the current transform\r\n     * @param {Number} x x position of the cursor\r\n     * @param {Number} y y position of the cursor\r\n     * @return {Boolean} true if the action/event modified the object\r\n     */\r\n    mouseUpHandler: function(/* eventData, transformData, x, y */) { },\r\n\r\n    /**\r\n     * Returns control actionHandler\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Object} fabricObject on which the control is displayed\r\n     * @param {fabric.Control} control control for which the action handler is being asked\r\n     * @return {Function} the action handler\r\n     */\r\n    getActionHandler: function(/* eventData, fabricObject, control */) {\r\n      return this.actionHandler;\r\n    },\r\n\r\n    /**\r\n     * Returns control mouseDown handler\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Object} fabricObject on which the control is displayed\r\n     * @param {fabric.Control} control control for which the action handler is being asked\r\n     * @return {Function} the action handler\r\n     */\r\n    getMouseDownHandler: function(/* eventData, fabricObject, control */) {\r\n      return this.mouseDownHandler;\r\n    },\r\n\r\n    /**\r\n     * Returns control mouseUp handler\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Object} fabricObject on which the control is displayed\r\n     * @param {fabric.Control} control control for which the action handler is being asked\r\n     * @return {Function} the action handler\r\n     */\r\n    getMouseUpHandler: function(/* eventData, fabricObject, control */) {\r\n      return this.mouseUpHandler;\r\n    },\r\n\r\n    /**\r\n     * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\r\n     * function you can pass one in the constructor\r\n     * the cursorStyle property\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Control} control the current control ( likely this)\r\n     * @param {fabric.Object} object on which the control is displayed\r\n     * @return {String}\r\n     */\r\n    cursorStyleHandler: function(eventData, control /* fabricObject */) {\r\n      return control.cursorStyle;\r\n    },\r\n\r\n    /**\r\n     * Returns the action name. The basic implementation just return the actionName property.\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Control} control the current control ( likely this)\r\n     * @param {fabric.Object} object on which the control is displayed\r\n     * @return {String}\r\n     */\r\n    getActionName: function(eventData, control /* fabricObject */) {\r\n      return control.actionName;\r\n    },\r\n\r\n    /**\r\n     * Returns controls visibility\r\n     * @param {fabric.Object} object on which the control is displayed\r\n     * @param {String} controlKey key where the control is memorized on the\r\n     * @return {Boolean}\r\n     */\r\n    getVisibility: function(fabricObject, controlKey) {\r\n      var objectVisibility = fabricObject._controlsVisibility;\r\n      if (objectVisibility && typeof objectVisibility[controlKey] !== 'undefined') {\r\n        return objectVisibility[controlKey];\r\n      }\r\n      return this.visible;\r\n    },\r\n\r\n    /**\r\n     * Sets controls visibility\r\n     * @param {Boolean} visibility for the object\r\n     * @return {Void}\r\n     */\r\n    setVisibility: function(visibility /* name, fabricObject */) {\r\n      this.visible = visibility;\r\n    },\r\n\r\n\r\n    positionHandler: function(dim, finalMatrix /*, fabricObject, currentControl */) {\r\n      var point = fabric.util.transformPoint({\r\n        x: this.x * dim.x + this.offsetX,\r\n        y: this.y * dim.y + this.offsetY }, finalMatrix);\r\n      return point;\r\n    },\r\n\r\n    /**\r\n     * Returns the coords for this control based on object values.\r\n     * @param {Number} objectAngle angle from the fabric object holding the control\r\n     * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\r\n     *   isTouch is true)\r\n     * @param {Number} centerX x coordinate where the control center should be\r\n     * @param {Number} centerY y coordinate where the control center should be\r\n     * @param {boolean} isTouch true if touch corner, false if normal corner\r\n     */\r\n    calcCornerCoords: function(objectAngle, objectCornerSize, centerX, centerY, isTouch) {\r\n      var cosHalfOffset,\r\n          sinHalfOffset,\r\n          cosHalfOffsetComp,\r\n          sinHalfOffsetComp,\r\n          xSize = (isTouch) ? this.touchSizeX : this.sizeX,\r\n          ySize = (isTouch) ? this.touchSizeY : this.sizeY;\r\n      if (xSize && ySize && xSize !== ySize) {\r\n        // handle rectangular corners\r\n        var controlTriangleAngle = Math.atan2(ySize, xSize);\r\n        var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;\r\n        var newTheta = controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\r\n        var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\r\n        cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta);\r\n        sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta);\r\n        // use complementary angle for two corners\r\n        cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newThetaComp);\r\n        sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newThetaComp);\r\n      }\r\n      else {\r\n        // handle square corners\r\n        // use default object corner size unless size is defined\r\n        var cornerSize = (xSize && ySize) ? xSize : objectCornerSize;\r\n        /* 0.7071067812 stands for sqrt(2)/2 */\r\n        cornerHypotenuse = cornerSize * 0.7071067812;\r\n        // complementary angles are equal since they're both 45 degrees\r\n        var newTheta = fabric.util.degreesToRadians(45 - objectAngle);\r\n        cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newTheta);\r\n        sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newTheta);\r\n      }\r\n\r\n      return {\r\n        tl: {\r\n          x: centerX - sinHalfOffsetComp,\r\n          y: centerY - cosHalfOffsetComp,\r\n        },\r\n        tr: {\r\n          x: centerX + cosHalfOffset,\r\n          y: centerY - sinHalfOffset,\r\n        },\r\n        bl: {\r\n          x: centerX - cosHalfOffset,\r\n          y: centerY + sinHalfOffset,\r\n        },\r\n        br: {\r\n          x: centerX + sinHalfOffsetComp,\r\n          y: centerY + cosHalfOffsetComp,\r\n        },\r\n      };\r\n    },\r\n\r\n    /**\r\n    * Render function for the control.\r\n    * When this function runs the context is unscaled. unrotate. Just retina scaled.\r\n    * all the functions will have to translate to the point left,top before starting Drawing\r\n    * if they want to draw a control where the position is detected.\r\n    * left and top are the result of the positionHandler function\r\n    * @param {RenderingContext2D} ctx the context where the control will be drawn\r\n    * @param {Number} left position of the canvas where we are about to render the control.\r\n    * @param {Number} top position of the canvas where we are about to render the control.\r\n    * @param {Object} styleOverride\r\n    * @param {fabric.Object} fabricObject the object where the control is about to be rendered\r\n    */\r\n    render: function(ctx, left, top, styleOverride, fabricObject) {\r\n      styleOverride = styleOverride || {};\r\n      switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {\r\n        case 'circle':\r\n          fabric.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);\r\n          break;\r\n        default:\r\n          fabric.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);\r\n      }\r\n    },\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function () {\r\n\r\n  'use strict';\r\n\r\n  if (fabric.StaticCanvas) {\r\n    fabric.warn('fabric.StaticCanvas is already defined.');\r\n    return;\r\n  }\r\n\r\n  // aliases for faster resolution\r\n  var extend = fabric.util.object.extend,\r\n      getElementOffset = fabric.util.getElementOffset,\r\n      removeFromArray = fabric.util.removeFromArray,\r\n      toFixed = fabric.util.toFixed,\r\n      transformPoint = fabric.util.transformPoint,\r\n      invertTransform = fabric.util.invertTransform,\r\n      getNodeCanvas = fabric.util.getNodeCanvas,\r\n      createCanvasElement = fabric.util.createCanvasElement,\r\n\r\n      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');\r\n\r\n  /**\r\n   * Static canvas class\r\n   * @class fabric.StaticCanvas\r\n   * @mixes fabric.Collection\r\n   * @mixes fabric.Observable\r\n   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\r\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\r\n   * @fires before:render\r\n   * @fires after:render\r\n   * @fires canvas:cleared\r\n   * @fires object:added\r\n   * @fires object:removed\r\n   */\r\n  fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */\r\n    initialize: function(el, options) {\r\n      options || (options = { });\r\n      this.renderAndResetBound = this.renderAndReset.bind(this);\r\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n      this._initStatic(el, options);\r\n    },\r\n\r\n    /**\r\n     * Background color of canvas instance.\r\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\r\n     * @type {(String|fabric.Pattern)}\r\n     * @default\r\n     */\r\n    backgroundColor: '',\r\n\r\n    /**\r\n     * Background image of canvas instance.\r\n     * since 2.4.0 image caching is active, please when putting an image as background, add to the\r\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n     * vale. As an alternative you can disable image objectCaching\r\n     * @type fabric.Image\r\n     * @default\r\n     */\r\n    backgroundImage: null,\r\n\r\n    /**\r\n     * Overlay color of canvas instance.\r\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\r\n     * @since 1.3.9\r\n     * @type {(String|fabric.Pattern)}\r\n     * @default\r\n     */\r\n    overlayColor: '',\r\n\r\n    /**\r\n     * Overlay image of canvas instance.\r\n     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\r\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n     * vale. As an alternative you can disable image objectCaching\r\n     * @type fabric.Image\r\n     * @default\r\n     */\r\n    overlayImage: null,\r\n\r\n    /**\r\n     * Indicates whether toObject/toDatalessObject should include default values\r\n     * if set to false, takes precedence over the object value.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    includeDefaultValues: true,\r\n\r\n    /**\r\n     * Indicates whether objects' state should be saved\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    stateful: false,\r\n\r\n    /**\r\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\r\n     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\r\n     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\r\n     * since the renders are quequed and executed one per frame.\r\n     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\r\n     * Left default to true to do not break documentation and old app, fiddles.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    renderOnAddRemove: true,\r\n\r\n    /**\r\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    controlsAboveOverlay: false,\r\n\r\n    /**\r\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    allowTouchScrolling: false,\r\n\r\n    /**\r\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    imageSmoothingEnabled: true,\r\n\r\n    /**\r\n     * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\r\n     * @type Array\r\n     * @example <caption>Default transform</caption>\r\n     * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\r\n     * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\r\n     * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\r\n     * @default\r\n     */\r\n    viewportTransform: fabric.iMatrix.concat(),\r\n\r\n    /**\r\n     * if set to false background image is not affected by viewport transform\r\n     * @since 1.6.3\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    backgroundVpt: true,\r\n\r\n    /**\r\n     * if set to false overlya image is not affected by viewport transform\r\n     * @since 1.6.3\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    overlayVpt: true,\r\n\r\n    /**\r\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    enableRetinaScaling: true,\r\n\r\n    /**\r\n     * Describe canvas element extension over design\r\n     * properties are tl,tr,bl,br.\r\n     * if canvas is not zoomed/panned those points are the four corner of canvas\r\n     * if canvas is viewportTransformed you those points indicate the extension\r\n     * of canvas element in plain untrasformed coordinates\r\n     * The coordinates get updated with @method calcViewportBoundaries.\r\n     * @memberOf fabric.StaticCanvas.prototype\r\n     */\r\n    vptCoords: { },\r\n\r\n    /**\r\n     * Based on vptCoords and object.aCoords, skip rendering of objects that\r\n     * are not included in current viewport.\r\n     * May greatly help in applications with crowded canvas and use of zoom/pan\r\n     * If One of the corner of the bounding box of the object is on the canvas\r\n     * the objects get rendered.\r\n     * @memberOf fabric.StaticCanvas.prototype\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    skipOffscreen: true,\r\n\r\n    /**\r\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n     * the clipPath object gets used when the canvas has rendered, and the context is placed in the\r\n     * top left corner of the canvas.\r\n     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\r\n     * @type fabric.Object\r\n     */\r\n    clipPath: undefined,\r\n\r\n    /**\r\n     * @private\r\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initStatic: function(el, options) {\r\n      var cb = this.requestRenderAllBound;\r\n      this._objects = [];\r\n      this._createLowerCanvas(el);\r\n      this._initOptions(options);\r\n      // only initialize retina scaling once\r\n      if (!this.interactive) {\r\n        this._initRetinaScaling();\r\n      }\r\n\r\n      if (options.overlayImage) {\r\n        this.setOverlayImage(options.overlayImage, cb);\r\n      }\r\n      if (options.backgroundImage) {\r\n        this.setBackgroundImage(options.backgroundImage, cb);\r\n      }\r\n      if (options.backgroundColor) {\r\n        this.setBackgroundColor(options.backgroundColor, cb);\r\n      }\r\n      if (options.overlayColor) {\r\n        this.setOverlayColor(options.overlayColor, cb);\r\n      }\r\n      this.calcOffset();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _isRetinaScaling: function() {\r\n      return (fabric.devicePixelRatio > 1 && this.enableRetinaScaling);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @return {Number} retinaScaling if applied, otherwise 1;\r\n     */\r\n    getRetinaScaling: function() {\r\n      return this._isRetinaScaling() ? Math.max(1, fabric.devicePixelRatio) : 1;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _initRetinaScaling: function() {\r\n      if (!this._isRetinaScaling()) {\r\n        return;\r\n      }\r\n      var scaleRatio = fabric.devicePixelRatio;\r\n      this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);\r\n      if (this.upperCanvasEl) {\r\n        this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);\r\n      }\r\n    },\r\n\r\n    __initRetinaScaling: function(scaleRatio, canvas, context) {\r\n      canvas.setAttribute('width', this.width * scaleRatio);\r\n      canvas.setAttribute('height', this.height * scaleRatio);\r\n      context.scale(scaleRatio, scaleRatio);\r\n    },\r\n\r\n\r\n    /**\r\n     * Calculates canvas element offset relative to the document\r\n     * This method is also attached as \"resize\" event handler of window\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */\r\n    calcOffset: function () {\r\n      this._offset = getElementOffset(this.lowerCanvasEl);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\r\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\r\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\r\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\r\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   // Needed to position overlayImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>overlayImage with different properties</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\r\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {\r\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\r\n     * });\r\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   width: canvas.width,\r\n     *   height: canvas.height,\r\n     *   // Needed to position overlayImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>overlayImage loaded from cross-origin</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top',\r\n     *   crossOrigin: 'anonymous'\r\n     * });\r\n     */\r\n    setOverlayImage: function (image, callback, options) {\r\n      return this.__setBgOverlayImage('overlayImage', image, callback, options);\r\n    },\r\n\r\n    /**\r\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\r\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\r\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\r\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\r\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   // Needed to position backgroundImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>backgroundImage with different properties</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\r\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {\r\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\r\n     * });\r\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   width: canvas.width,\r\n     *   height: canvas.height,\r\n     *   // Needed to position backgroundImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top',\r\n     *   crossOrigin: 'anonymous'\r\n     * });\r\n     */\r\n    // TODO: fix stretched examples\r\n    setBackgroundImage: function (image, callback, options) {\r\n      return this.__setBgOverlayImage('backgroundImage', image, callback, options);\r\n    },\r\n\r\n    /**\r\n     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\r\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\r\n     * @param {Function} callback Callback to invoke when foreground color is set\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\r\n     * @example <caption>Normal overlayColor - color value</caption>\r\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\r\n     * canvas.setOverlayColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n     * }, canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\r\n     * canvas.setOverlayColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n     *   repeat: 'repeat',\r\n     *   offsetX: 200,\r\n     *   offsetY: 100\r\n     * }, canvas.renderAll.bind(canvas));\r\n     */\r\n    setOverlayColor: function(overlayColor, callback) {\r\n      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);\r\n    },\r\n\r\n    /**\r\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\r\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\r\n     * @param {Function} callback Callback to invoke when background color is set\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\r\n     * @example <caption>Normal backgroundColor - color value</caption>\r\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\r\n     * canvas.setBackgroundColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n     * }, canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\r\n     * canvas.setBackgroundColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n     *   repeat: 'repeat',\r\n     *   offsetX: 200,\r\n     *   offsetY: 100\r\n     * }, canvas.renderAll.bind(canvas));\r\n     */\r\n    setBackgroundColor: function(backgroundColor, callback) {\r\n      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\r\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\r\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\r\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.\r\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\r\n     */\r\n    __setBgOverlayImage: function(property, image, callback, options) {\r\n      if (typeof image === 'string') {\r\n        fabric.util.loadImage(image, function(img, isError) {\r\n          if (img) {\r\n            var instance = new fabric.Image(img, options);\r\n            this[property] = instance;\r\n            instance.canvas = this;\r\n          }\r\n          callback && callback(img, isError);\r\n        }, this, options && options.crossOrigin);\r\n      }\r\n      else {\r\n        options && image.setOptions(options);\r\n        this[property] = image;\r\n        image && (image.canvas = this);\r\n        callback && callback(image, false);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\r\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\r\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\r\n     * @param {Function} [callback] Callback is invoked when color is set\r\n     */\r\n    __setBgOverlayColor: function(property, color, callback) {\r\n      this[property] = color;\r\n      this._initGradient(color, property);\r\n      this._initPattern(color, property, callback);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _createCanvasElement: function() {\r\n      var element = createCanvasElement();\r\n      if (!element) {\r\n        throw CANVAS_INIT_ERROR;\r\n      }\r\n      if (!element.style) {\r\n        element.style = { };\r\n      }\r\n      if (typeof element.getContext === 'undefined') {\r\n        throw CANVAS_INIT_ERROR;\r\n      }\r\n      return element;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initOptions: function (options) {\r\n      var lowerCanvasEl = this.lowerCanvasEl;\r\n      this._setOptions(options);\r\n\r\n      this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\r\n      this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\r\n\r\n      if (!this.lowerCanvasEl.style) {\r\n        return;\r\n      }\r\n\r\n      lowerCanvasEl.width = this.width;\r\n      lowerCanvasEl.height = this.height;\r\n\r\n      lowerCanvasEl.style.width = this.width + 'px';\r\n      lowerCanvasEl.style.height = this.height + 'px';\r\n\r\n      this.viewportTransform = this.viewportTransform.slice();\r\n    },\r\n\r\n    /**\r\n     * Creates a bottom canvas\r\n     * @private\r\n     * @param {HTMLElement} [canvasEl]\r\n     */\r\n    _createLowerCanvas: function (canvasEl) {\r\n      // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\r\n      if (canvasEl && canvasEl.getContext) {\r\n        this.lowerCanvasEl = canvasEl;\r\n      }\r\n      else {\r\n        this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\r\n      }\r\n\r\n      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');\r\n      this._originalCanvasStyle = this.lowerCanvasEl.style;\r\n      if (this.interactive) {\r\n        this._applyCanvasStyle(this.lowerCanvasEl);\r\n      }\r\n\r\n      this.contextContainer = this.lowerCanvasEl.getContext('2d');\r\n    },\r\n\r\n    /**\r\n     * Returns canvas width (in px)\r\n     * @return {Number}\r\n     */\r\n    getWidth: function () {\r\n      return this.width;\r\n    },\r\n\r\n    /**\r\n     * Returns canvas height (in px)\r\n     * @return {Number}\r\n     */\r\n    getHeight: function () {\r\n      return this.height;\r\n    },\r\n\r\n    /**\r\n     * Sets width of this canvas instance\r\n     * @param {Number|String} value                         Value to set width to\r\n     * @param {Object}        [options]                     Options object\r\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    setWidth: function (value, options) {\r\n      return this.setDimensions({ width: value }, options);\r\n    },\r\n\r\n    /**\r\n     * Sets height of this canvas instance\r\n     * @param {Number|String} value                         Value to set height to\r\n     * @param {Object}        [options]                     Options object\r\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    setHeight: function (value, options) {\r\n      return this.setDimensions({ height: value }, options);\r\n    },\r\n\r\n    /**\r\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\r\n     * @param {Object}        dimensions                    Object with width/height properties\r\n     * @param {Number|String} [dimensions.width]            Width of canvas element\r\n     * @param {Number|String} [dimensions.height]           Height of canvas element\r\n     * @param {Object}        [options]                     Options object\r\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    setDimensions: function (dimensions, options) {\r\n      var cssValue;\r\n\r\n      options = options || {};\r\n\r\n      for (var prop in dimensions) {\r\n        cssValue = dimensions[prop];\r\n\r\n        if (!options.cssOnly) {\r\n          this._setBackstoreDimension(prop, dimensions[prop]);\r\n          cssValue += 'px';\r\n          this.hasLostContext = true;\r\n        }\r\n\r\n        if (!options.backstoreOnly) {\r\n          this._setCssDimension(prop, cssValue);\r\n        }\r\n      }\r\n      if (this._isCurrentlyDrawing) {\r\n        this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\r\n      }\r\n      this._initRetinaScaling();\r\n      this.calcOffset();\r\n\r\n      if (!options.cssOnly) {\r\n        this.requestRenderAll();\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Helper for setting width/height\r\n     * @private\r\n     * @param {String} prop property (width|height)\r\n     * @param {Number} value value to set property to\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    _setBackstoreDimension: function (prop, value) {\r\n      this.lowerCanvasEl[prop] = value;\r\n\r\n      if (this.upperCanvasEl) {\r\n        this.upperCanvasEl[prop] = value;\r\n      }\r\n\r\n      if (this.cacheCanvasEl) {\r\n        this.cacheCanvasEl[prop] = value;\r\n      }\r\n\r\n      this[prop] = value;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Helper for setting css width/height\r\n     * @private\r\n     * @param {String} prop property (width|height)\r\n     * @param {String} value value to set property to\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    _setCssDimension: function (prop, value) {\r\n      this.lowerCanvasEl.style[prop] = value;\r\n\r\n      if (this.upperCanvasEl) {\r\n        this.upperCanvasEl.style[prop] = value;\r\n      }\r\n\r\n      if (this.wrapperEl) {\r\n        this.wrapperEl.style[prop] = value;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns canvas zoom level\r\n     * @return {Number}\r\n     */\r\n    getZoom: function () {\r\n      return this.viewportTransform[0];\r\n    },\r\n\r\n    /**\r\n     * Sets viewport transformation of this canvas instance\r\n     * @param {Array} vpt a Canvas 2D API transform matrix\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    setViewportTransform: function (vpt) {\r\n      var activeObject = this._activeObject,\r\n          backgroundObject = this.backgroundImage,\r\n          overlayObject = this.overlayImage,\r\n          object, i, len;\r\n      this.viewportTransform = vpt;\r\n      for (i = 0, len = this._objects.length; i < len; i++) {\r\n        object = this._objects[i];\r\n        object.group || object.setCoords(true);\r\n      }\r\n      if (activeObject) {\r\n        activeObject.setCoords();\r\n      }\r\n      if (backgroundObject) {\r\n        backgroundObject.setCoords(true);\r\n      }\r\n      if (overlayObject) {\r\n        overlayObject.setCoords(true);\r\n      }\r\n      this.calcViewportBoundaries();\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets zoom level of this canvas instance, the zoom centered around point\r\n     * meaning that following zoom to point with the same point will have the visual\r\n     * effect of the zoom originating from that point. The point won't move.\r\n     * It has nothing to do with canvas center or visual center of the viewport.\r\n     * @param {fabric.Point} point to zoom with respect to\r\n     * @param {Number} value to set zoom to, less than 1 zooms out\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    zoomToPoint: function (point, value) {\r\n      // TODO: just change the scale, preserve other transformations\r\n      var before = point, vpt = this.viewportTransform.slice(0);\r\n      point = transformPoint(point, invertTransform(this.viewportTransform));\r\n      vpt[0] = value;\r\n      vpt[3] = value;\r\n      var after = transformPoint(point, vpt);\r\n      vpt[4] += before.x - after.x;\r\n      vpt[5] += before.y - after.y;\r\n      return this.setViewportTransform(vpt);\r\n    },\r\n\r\n    /**\r\n     * Sets zoom level of this canvas instance\r\n     * @param {Number} value to set zoom to, less than 1 zooms out\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    setZoom: function (value) {\r\n      this.zoomToPoint(new fabric.Point(0, 0), value);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Pan viewport so as to place point at top left corner of canvas\r\n     * @param {fabric.Point} point to move to\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    absolutePan: function (point) {\r\n      var vpt = this.viewportTransform.slice(0);\r\n      vpt[4] = -point.x;\r\n      vpt[5] = -point.y;\r\n      return this.setViewportTransform(vpt);\r\n    },\r\n\r\n    /**\r\n     * Pans viewpoint relatively\r\n     * @param {fabric.Point} point (position vector) to move by\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */\r\n    relativePan: function (point) {\r\n      return this.absolutePan(new fabric.Point(\r\n        -point.x - this.viewportTransform[4],\r\n        -point.y - this.viewportTransform[5]\r\n      ));\r\n    },\r\n\r\n    /**\r\n     * Returns &lt;canvas> element corresponding to this instance\r\n     * @return {HTMLCanvasElement}\r\n     */\r\n    getElement: function () {\r\n      return this.lowerCanvasEl;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {fabric.Object} obj Object that was added\r\n     */\r\n    _onObjectAdded: function(obj) {\r\n      this.stateful && obj.setupState();\r\n      obj._set('canvas', this);\r\n      obj.setCoords();\r\n      this.fire('object:added', { target: obj });\r\n      obj.fire('added');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {fabric.Object} obj Object that was removed\r\n     */\r\n    _onObjectRemoved: function(obj) {\r\n      this.fire('object:removed', { target: obj });\r\n      obj.fire('removed');\r\n      delete obj.canvas;\r\n    },\r\n\r\n    /**\r\n     * Clears specified context of canvas element\r\n     * @param {CanvasRenderingContext2D} ctx Context to clear\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    clearContext: function(ctx) {\r\n      ctx.clearRect(0, 0, this.width, this.height);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns context of canvas where objects are drawn\r\n     * @return {CanvasRenderingContext2D}\r\n     */\r\n    getContext: function () {\r\n      return this.contextContainer;\r\n    },\r\n\r\n    /**\r\n     * Clears all contexts (background, main, top) of an instance\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    clear: function () {\r\n      this.remove.apply(this, this.getObjects());\r\n      this.backgroundImage = null;\r\n      this.overlayImage = null;\r\n      this.backgroundColor = '';\r\n      this.overlayColor = '';\r\n      if (this._hasITextHandlers) {\r\n        this.off('mouse:up', this._mouseUpITextHandler);\r\n        this._iTextInstances = null;\r\n        this._hasITextHandlers = false;\r\n      }\r\n      this.clearContext(this.contextContainer);\r\n      this.fire('canvas:cleared');\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Renders the canvas\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */\r\n    renderAll: function () {\r\n      var canvasToDrawOn = this.contextContainer;\r\n      this.renderCanvas(canvasToDrawOn, this._objects);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Function created to be instance bound at initialization\r\n     * used in requestAnimationFrame rendering\r\n     * Let the fabricJS call it. If you call it manually you could have more\r\n     * animationFrame stacking on to of each other\r\n     * for an imperative rendering, use canvas.renderAll\r\n     * @private\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */\r\n    renderAndReset: function() {\r\n      this.isRendering = 0;\r\n      this.renderAll();\r\n    },\r\n\r\n    /**\r\n     * Append a renderAll request to next animation frame.\r\n     * unless one is already in progress, in that case nothing is done\r\n     * a boolean flag will avoid appending more.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */\r\n    requestRenderAll: function () {\r\n      if (!this.isRendering) {\r\n        this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the position of the 4 corner of canvas with current viewportTransform.\r\n     * helps to determinate when an object is in the current rendering viewport using\r\n     * object absolute coordinates ( aCoords )\r\n     * @return {Object} points.tl\r\n     * @chainable\r\n     */\r\n    calcViewportBoundaries: function() {\r\n      var points = { }, width = this.width, height = this.height,\r\n          iVpt = invertTransform(this.viewportTransform);\r\n      points.tl = transformPoint({ x: 0, y: 0 }, iVpt);\r\n      points.br = transformPoint({ x: width, y: height }, iVpt);\r\n      points.tr = new fabric.Point(points.br.x, points.tl.y);\r\n      points.bl = new fabric.Point(points.tl.x, points.br.y);\r\n      this.vptCoords = points;\r\n      return points;\r\n    },\r\n\r\n    cancelRequestedRender: function() {\r\n      if (this.isRendering) {\r\n        fabric.util.cancelAnimFrame(this.isRendering);\r\n        this.isRendering = 0;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Renders background, objects, overlay and controls.\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {Array} objects to render\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */\r\n    renderCanvas: function(ctx, objects) {\r\n      var v = this.viewportTransform, path = this.clipPath;\r\n      this.cancelRequestedRender();\r\n      this.calcViewportBoundaries();\r\n      this.clearContext(ctx);\r\n      fabric.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);\r\n      this.fire('before:render', { ctx: ctx, });\r\n      this._renderBackground(ctx);\r\n\r\n      ctx.save();\r\n      //apply viewport transform once for all rendering process\r\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n      this._renderObjects(ctx, objects);\r\n      ctx.restore();\r\n      if (!this.controlsAboveOverlay && this.interactive) {\r\n        this.drawControls(ctx);\r\n      }\r\n      if (path) {\r\n        path.canvas = this;\r\n        // needed to setup a couple of variables\r\n        path.shouldCache();\r\n        path._transformDone = true;\r\n        path.renderCache({ forClipping: true });\r\n        this.drawClipPathOnCanvas(ctx);\r\n      }\r\n      this._renderOverlay(ctx);\r\n      if (this.controlsAboveOverlay && this.interactive) {\r\n        this.drawControls(ctx);\r\n      }\r\n      this.fire('after:render', { ctx: ctx, });\r\n    },\r\n\r\n    /**\r\n     * Paint the cached clipPath on the lowerCanvasEl\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    drawClipPathOnCanvas: function(ctx) {\r\n      var v = this.viewportTransform, path = this.clipPath;\r\n      ctx.save();\r\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n      // DEBUG: uncomment this line, comment the following\r\n      // ctx.globalAlpha = 0.4;\r\n      ctx.globalCompositeOperation = 'destination-in';\r\n      path.transform(ctx);\r\n      ctx.scale(1 / path.zoomX, 1 / path.zoomY);\r\n      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Array} objects to render\r\n     */\r\n    _renderObjects: function(ctx, objects) {\r\n      var i, len;\r\n      for (i = 0, len = objects.length; i < len; ++i) {\r\n        objects[i] && objects[i].render(ctx);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {string} property 'background' or 'overlay'\r\n     */\r\n    _renderBackgroundOrOverlay: function(ctx, property) {\r\n      var fill = this[property + 'Color'], object = this[property + 'Image'],\r\n          v = this.viewportTransform, needsVpt = this[property + 'Vpt'];\r\n      if (!fill && !object) {\r\n        return;\r\n      }\r\n      if (fill) {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, 0);\r\n        ctx.lineTo(this.width, 0);\r\n        ctx.lineTo(this.width, this.height);\r\n        ctx.lineTo(0, this.height);\r\n        ctx.closePath();\r\n        ctx.fillStyle = fill.toLive\r\n          ? fill.toLive(ctx, this)\r\n          : fill;\r\n        if (needsVpt) {\r\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        }\r\n        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\r\n        var m = fill.gradientTransform || fill.patternTransform;\r\n        m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n        ctx.fill();\r\n        ctx.restore();\r\n      }\r\n      if (object) {\r\n        ctx.save();\r\n        if (needsVpt) {\r\n          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n        }\r\n        object.render(ctx);\r\n        ctx.restore();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderBackground: function(ctx) {\r\n      this._renderBackgroundOrOverlay(ctx, 'background');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderOverlay: function(ctx) {\r\n      this._renderBackgroundOrOverlay(ctx, 'overlay');\r\n    },\r\n\r\n    /**\r\n     * Returns coordinates of a center of canvas.\r\n     * Returned value is an object with top and left properties\r\n     * @return {Object} object with \"top\" and \"left\" number values\r\n     * @deprecated migrate to `getCenterPoint`\r\n     */\r\n    getCenter: function () {\r\n      return {\r\n        top: this.height / 2,\r\n        left: this.width / 2\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns coordinates of a center of canvas.\r\n     * @return {fabric.Point} \r\n     */\r\n    getCenterPoint: function () {\r\n      return new fabric.Point(this.width / 2, this.height / 2);\r\n    },\r\n\r\n    /**\r\n     * Centers object horizontally in the canvas\r\n     * @param {fabric.Object} object Object to center horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     */\r\n    centerObjectH: function (object) {\r\n      return this._centerObject(object, new fabric.Point(this.getCenterPoint().x, object.getCenterPoint().y));\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically in the canvas\r\n     * @param {fabric.Object} object Object to center vertically\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    centerObjectV: function (object) {\r\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenterPoint().y));\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically and horizontally in the canvas\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    centerObject: function(object) {\r\n      var center = this.getCenterPoint();\r\n      return this._centerObject(object, center);\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically and horizontally in the viewport\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    viewportCenterObject: function(object) {\r\n      var vpCenter = this.getVpCenter();\r\n      return this._centerObject(object, vpCenter);\r\n    },\r\n\r\n    /**\r\n     * Centers object horizontally in the viewport, object.top is unchanged\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    viewportCenterObjectH: function(object) {\r\n      var vpCenter = this.getVpCenter();\r\n      this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object Vertically in the viewport, object.top is unchanged\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    viewportCenterObjectV: function(object) {\r\n      var vpCenter = this.getVpCenter();\r\n\r\n      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\r\n    },\r\n\r\n    /**\r\n     * Calculate the point in canvas that correspond to the center of actual viewport.\r\n     * @return {fabric.Point} vpCenter, viewport center\r\n     * @chainable\r\n     */\r\n    getVpCenter: function() {\r\n      var center = this.getCenterPoint(),\r\n          iVpt = invertTransform(this.viewportTransform);\r\n      return transformPoint(center, iVpt);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {fabric.Point} center Center point\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    _centerObject: function(object, center) {\r\n      object.setPositionByOrigin(center, 'center', 'center');\r\n      object.setCoords();\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns dataless JSON representation of canvas\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {String} json string\r\n     */\r\n    toDatalessJSON: function (propertiesToInclude) {\r\n      return this.toDatalessObject(propertiesToInclude);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of canvas\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toObject: function (propertiesToInclude) {\r\n      return this._toObjectMethod('toObject', propertiesToInclude);\r\n    },\r\n\r\n    /**\r\n     * Returns dataless object representation of canvas\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toDatalessObject: function (propertiesToInclude) {\r\n      return this._toObjectMethod('toDatalessObject', propertiesToInclude);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _toObjectMethod: function (methodName, propertiesToInclude) {\r\n\r\n      var clipPath = this.clipPath, data = {\r\n        version: fabric.version,\r\n        objects: this._toObjects(methodName, propertiesToInclude),\r\n      };\r\n      if (clipPath && !clipPath.excludeFromExport) {\r\n        data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);\r\n      }\r\n      extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\r\n\r\n      fabric.util.populateWithProperties(this, data, propertiesToInclude);\r\n\r\n      return data;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _toObjects: function(methodName, propertiesToInclude) {\r\n      return this._objects.filter(function(object) {\r\n        return !object.excludeFromExport;\r\n      }).map(function(instance) {\r\n        return this._toObject(instance, methodName, propertiesToInclude);\r\n      }, this);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _toObject: function(instance, methodName, propertiesToInclude) {\r\n      var originalValue;\r\n\r\n      if (!this.includeDefaultValues) {\r\n        originalValue = instance.includeDefaultValues;\r\n        instance.includeDefaultValues = false;\r\n      }\r\n\r\n      var object = instance[methodName](propertiesToInclude);\r\n      if (!this.includeDefaultValues) {\r\n        instance.includeDefaultValues = originalValue;\r\n      }\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    __serializeBgOverlay: function(methodName, propertiesToInclude) {\r\n      var data = {}, bgImage = this.backgroundImage, overlayImage = this.overlayImage,\r\n          bgColor = this.backgroundColor, overlayColor = this.overlayColor;\r\n\r\n      if (bgColor && bgColor.toObject) {\r\n        if (!bgColor.excludeFromExport) {\r\n          data.background = bgColor.toObject(propertiesToInclude);\r\n        }\r\n      }\r\n      else if (bgColor) {\r\n        data.background = bgColor;\r\n      }\r\n\r\n      if (overlayColor && overlayColor.toObject) {\r\n        if (!overlayColor.excludeFromExport) {\r\n          data.overlay = overlayColor.toObject(propertiesToInclude);\r\n        }\r\n      }\r\n      else if (overlayColor) {\r\n        data.overlay = overlayColor;\r\n      }\r\n\r\n      if (bgImage && !bgImage.excludeFromExport) {\r\n        data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\r\n      }\r\n      if (overlayImage && !overlayImage.excludeFromExport) {\r\n        data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);\r\n      }\r\n\r\n      return data;\r\n    },\r\n\r\n    \r\n\r\n    /**\r\n     * Moves an object or the objects of a multiple selection\r\n     * to the bottom of the stack of drawn objects\r\n     * @param {fabric.Object} object Object to send to back\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    sendToBack: function (object) {\r\n      if (!object) {\r\n        return this;\r\n      }\r\n      var activeSelection = this._activeObject,\r\n          i, obj, objs;\r\n      if (object === activeSelection && object.type === 'activeSelection') {\r\n        objs = activeSelection._objects;\r\n        for (i = objs.length; i--;) {\r\n          obj = objs[i];\r\n          removeFromArray(this._objects, obj);\r\n          this._objects.unshift(obj);\r\n        }\r\n      }\r\n      else {\r\n        removeFromArray(this._objects, object);\r\n        this._objects.unshift(object);\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object or the objects of a multiple selection\r\n     * to the top of the stack of drawn objects\r\n     * @param {fabric.Object} object Object to send\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    bringToFront: function (object) {\r\n      if (!object) {\r\n        return this;\r\n      }\r\n      var activeSelection = this._activeObject,\r\n          i, obj, objs;\r\n      if (object === activeSelection && object.type === 'activeSelection') {\r\n        objs = activeSelection._objects;\r\n        for (i = 0; i < objs.length; i++) {\r\n          obj = objs[i];\r\n          removeFromArray(this._objects, obj);\r\n          this._objects.push(obj);\r\n        }\r\n      }\r\n      else {\r\n        removeFromArray(this._objects, object);\r\n        this._objects.push(object);\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Moves an object or a selection down in stack of drawn objects\r\n     * An optional parameter, intersecting allows to move the object in behind\r\n     * the first intersecting object. Where intersection is calculated with\r\n     * bounding box. If no intersection is found, there will not be change in the\r\n     * stack.\r\n     * @param {fabric.Object} object Object to send\r\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    sendBackwards: function (object, intersecting) {\r\n      if (!object) {\r\n        return this;\r\n      }\r\n      var activeSelection = this._activeObject,\r\n          i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n      if (object === activeSelection && object.type === 'activeSelection') {\r\n        objs = activeSelection._objects;\r\n        for (i = 0; i < objs.length; i++) {\r\n          obj = objs[i];\r\n          idx = this._objects.indexOf(obj);\r\n          if (idx > 0 + objsMoved) {\r\n            newIdx = idx - 1;\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.splice(newIdx, 0, obj);\r\n          }\r\n          objsMoved++;\r\n        }\r\n      }\r\n      else {\r\n        idx = this._objects.indexOf(object);\r\n        if (idx !== 0) {\r\n          // if object is not on the bottom of stack\r\n          newIdx = this._findNewLowerIndex(object, idx, intersecting);\r\n          removeFromArray(this._objects, object);\r\n          this._objects.splice(newIdx, 0, object);\r\n        }\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findNewLowerIndex: function(object, idx, intersecting) {\r\n      var newIdx, i;\r\n\r\n      if (intersecting) {\r\n        newIdx = idx;\r\n\r\n        // traverse down the stack looking for the nearest intersecting object\r\n        for (i = idx - 1; i >= 0; --i) {\r\n\r\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                               object.isContainedWithinObject(this._objects[i]) ||\r\n                               this._objects[i].isContainedWithinObject(object);\r\n\r\n          if (isIntersecting) {\r\n            newIdx = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        newIdx = idx - 1;\r\n      }\r\n\r\n      return newIdx;\r\n    },\r\n\r\n    /**\r\n     * Moves an object or a selection up in stack of drawn objects\r\n     * An optional parameter, intersecting allows to move the object in front\r\n     * of the first intersecting object. Where intersection is calculated with\r\n     * bounding box. If no intersection is found, there will not be change in the\r\n     * stack.\r\n     * @param {fabric.Object} object Object to send\r\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    bringForward: function (object, intersecting) {\r\n      if (!object) {\r\n        return this;\r\n      }\r\n      var activeSelection = this._activeObject,\r\n          i, obj, idx, newIdx, objs, objsMoved = 0;\r\n\r\n      if (object === activeSelection && object.type === 'activeSelection') {\r\n        objs = activeSelection._objects;\r\n        for (i = objs.length; i--;) {\r\n          obj = objs[i];\r\n          idx = this._objects.indexOf(obj);\r\n          if (idx < this._objects.length - 1 - objsMoved) {\r\n            newIdx = idx + 1;\r\n            removeFromArray(this._objects, obj);\r\n            this._objects.splice(newIdx, 0, obj);\r\n          }\r\n          objsMoved++;\r\n        }\r\n      }\r\n      else {\r\n        idx = this._objects.indexOf(object);\r\n        if (idx !== this._objects.length - 1) {\r\n          // if object is not on top of stack (last item in an array)\r\n          newIdx = this._findNewUpperIndex(object, idx, intersecting);\r\n          removeFromArray(this._objects, object);\r\n          this._objects.splice(newIdx, 0, object);\r\n        }\r\n      }\r\n      this.renderOnAddRemove && this.requestRenderAll();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findNewUpperIndex: function(object, idx, intersecting) {\r\n      var newIdx, i, len;\r\n\r\n      if (intersecting) {\r\n        newIdx = idx;\r\n\r\n        // traverse up the stack looking for the nearest intersecting object\r\n        for (i = idx + 1, len = this._objects.length; i < len; ++i) {\r\n\r\n          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||\r\n                               object.isContainedWithinObject(this._objects[i]) ||\r\n                               this._objects[i].isContainedWithinObject(object);\r\n\r\n          if (isIntersecting) {\r\n            newIdx = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        newIdx = idx + 1;\r\n      }\r\n\r\n      return newIdx;\r\n    },\r\n\r\n    /**\r\n     * Moves an object to specified level in stack of drawn objects\r\n     * @param {fabric.Object} object Object to send\r\n     * @param {Number} index Position to move to\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    moveTo: function (object, index) {\r\n      removeFromArray(this._objects, object);\r\n      this._objects.splice(index, 0, object);\r\n      return this.renderOnAddRemove && this.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * Clears a canvas element and dispose objects\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    dispose: function () {\r\n      // cancel eventually ongoing renders\r\n      if (this.isRendering) {\r\n        fabric.util.cancelAnimFrame(this.isRendering);\r\n        this.isRendering = 0;\r\n      }\r\n      this.forEachObject(function(object) {\r\n        object.dispose && object.dispose();\r\n      });\r\n      this._objects = [];\r\n      if (this.backgroundImage && this.backgroundImage.dispose) {\r\n        this.backgroundImage.dispose();\r\n      }\r\n      this.backgroundImage = null;\r\n      if (this.overlayImage && this.overlayImage.dispose) {\r\n        this.overlayImage.dispose();\r\n      }\r\n      this.overlayImage = null;\r\n      this._iTextInstances = null;\r\n      this.contextContainer = null;\r\n      // restore canvas style\r\n      this.lowerCanvasEl.classList.remove('lower-canvas');\r\n      fabric.util.setStyle(this.lowerCanvasEl, this._originalCanvasStyle);\r\n      delete this._originalCanvasStyle;\r\n      // restore canvas size to original size in case retina scaling was applied\r\n      this.lowerCanvasEl.setAttribute('width', this.width);\r\n      this.lowerCanvasEl.setAttribute('height', this.height);\r\n      fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\r\n      this.lowerCanvasEl = undefined;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a string representation of an instance\r\n     * @return {String} string representation of an instance\r\n     */\r\n    toString: function () {\r\n      return '#<fabric.Canvas (' + this.complexity() + '): ' +\r\n               '{ objects: ' + this._objects.length + ' }>';\r\n    }\r\n  });\r\n\r\n  extend(fabric.StaticCanvas.prototype, fabric.Observable);\r\n  extend(fabric.StaticCanvas.prototype, fabric.Collection);\r\n  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\r\n\r\n  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\r\n\r\n    /**\r\n     * @static\r\n     * @type String\r\n     * @default\r\n     */\r\n    EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\r\n\r\n    /**\r\n     * Provides a way to check support of some of the canvas methods\r\n     * (either those of HTMLCanvasElement itself, or rendering context)\r\n     *\r\n     * @param {String} methodName Method to check support for;\r\n     *                            Could be one of \"setLineDash\"\r\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\r\n     *                          `null` if canvas element or context can not be initialized\r\n     */\r\n    supports: function (methodName) {\r\n      var el = createCanvasElement();\r\n\r\n      if (!el || !el.getContext) {\r\n        return null;\r\n      }\r\n\r\n      var ctx = el.getContext('2d');\r\n      if (!ctx) {\r\n        return null;\r\n      }\r\n\r\n      switch (methodName) {\r\n\r\n        case 'setLineDash':\r\n          return typeof ctx.setLineDash !== 'undefined';\r\n\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns Object representation of canvas\r\n   * this alias is provided because if you call JSON.stringify on an instance,\r\n   * the toJSON object will be invoked if it exists.\r\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\r\n   * @function\r\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n   * @return {Object} JSON compatible object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\r\n   * @example <caption>JSON without additional properties</caption>\r\n   * var json = canvas.toJSON();\r\n   * @example <caption>JSON with additional properties included</caption>\r\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\r\n   * @example <caption>JSON without default values</caption>\r\n   * canvas.includeDefaultValues = false;\r\n   * var json = canvas.toJSON();\r\n   */\r\n  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\r\n\r\n  if (fabric.isLikelyNode) {\r\n    fabric.StaticCanvas.prototype.createPNGStream = function() {\r\n      var impl = getNodeCanvas(this.lowerCanvasEl);\r\n      return impl && impl.createPNGStream();\r\n    };\r\n    fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\r\n      var impl = getNodeCanvas(this.lowerCanvasEl);\r\n      return impl && impl.createJPEGStream(opts);\r\n    };\r\n  }\r\n})();\r\n/**\r\n * BaseBrush class\r\n * @class fabric.BaseBrush\r\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\r\n */\r\nfabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\r\n\r\n  /**\r\n   * Color of a brush\r\n   * @type String\r\n   * @default\r\n   */\r\n  color: 'rgb(0, 0, 0)',\r\n\r\n  /**\r\n   * Width of a brush, has to be a Number, no string literals\r\n   * @type Number\r\n   * @default\r\n   */\r\n  width: 1,\r\n\r\n  /**\r\n   * Shadow object representing shadow of this shape.\r\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\r\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\r\n   * @type fabric.Shadow\r\n   * @default\r\n   */\r\n  shadow: null,\r\n\r\n  /**\r\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\r\n   * @type String\r\n   * @default\r\n   */\r\n  strokeLineCap: 'round',\r\n\r\n  /**\r\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\r\n   * @type String\r\n   * @default\r\n   */\r\n  strokeLineJoin: 'round',\r\n\r\n  /**\r\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\r\n   * @type Number\r\n   * @default\r\n   */\r\n  strokeMiterLimit:         10,\r\n\r\n  /**\r\n   * Stroke Dash Array.\r\n   * @type Array\r\n   * @default\r\n   */\r\n  strokeDashArray: null,\r\n\r\n  /**\r\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\r\n   * @type Boolean\r\n   * @default false\r\n  */\r\n\r\n  limitedToCanvasSize: false,\r\n\r\n\r\n  /**\r\n   * Sets brush styles\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\r\n  _setBrushStyles: function (ctx) {\r\n    ctx.strokeStyle = this.color;\r\n    ctx.lineWidth = this.width;\r\n    ctx.lineCap = this.strokeLineCap;\r\n    ctx.miterLimit = this.strokeMiterLimit;\r\n    ctx.lineJoin = this.strokeLineJoin;\r\n    ctx.setLineDash(this.strokeDashArray || []);\r\n  },\r\n\r\n  /**\r\n   * Sets the transformation on given context\r\n   * @param {RenderingContext2d} ctx context to render on\r\n   * @private\r\n   */\r\n  _saveAndTransform: function(ctx) {\r\n    var v = this.canvas.viewportTransform;\r\n    ctx.save();\r\n    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n  },\r\n\r\n  /**\r\n   * Sets brush shadow styles\r\n   * @private\r\n   */\r\n  _setShadow: function() {\r\n    if (!this.shadow) {\r\n      return;\r\n    }\r\n\r\n    var canvas = this.canvas,\r\n        shadow = this.shadow,\r\n        ctx = canvas.contextTop,\r\n        zoom = canvas.getZoom();\r\n    if (canvas && canvas._isRetinaScaling()) {\r\n      zoom *= fabric.devicePixelRatio;\r\n    }\r\n\r\n    ctx.shadowColor = shadow.color;\r\n    ctx.shadowBlur = shadow.blur * zoom;\r\n    ctx.shadowOffsetX = shadow.offsetX * zoom;\r\n    ctx.shadowOffsetY = shadow.offsetY * zoom;\r\n  },\r\n\r\n  needsFullRender: function() {\r\n    var color = new fabric.Color(this.color);\r\n    return color.getAlpha() < 1 || !!this.shadow;\r\n  },\r\n\r\n  /**\r\n   * Removes brush shadow styles\r\n   * @private\r\n   */\r\n  _resetShadow: function() {\r\n    var ctx = this.canvas.contextTop;\r\n\r\n    ctx.shadowColor = '';\r\n    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n  },\r\n\r\n  /**\r\n   * Check is pointer is outside canvas boundaries\r\n   * @param {Object} pointer\r\n   * @private\r\n  */\r\n  _isOutSideCanvas: function(pointer) {\r\n    return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();\r\n  }\r\n});\r\n(function() {\r\n  /**\r\n   * PencilBrush class\r\n   * @class fabric.PencilBrush\r\n   * @extends fabric.BaseBrush\r\n   */\r\n  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\r\n\r\n    /**\r\n     * Discard points that are less than `decimate` pixel distant from each other\r\n     * @type Number\r\n     * @default 0.4\r\n     */\r\n    decimate: 0.4,\r\n\r\n    /**\r\n     * Draws a straight line between last recorded point to current pointer\r\n     * Used for `shift` functionality\r\n     *\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n    drawStraightLine: false,\r\n\r\n    /**\r\n     * The event modifier key that makes the brush draw a straight line.\r\n     * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\r\n     * @type {'altKey' | 'shiftKey' | 'ctrlKey' | 'none' | undefined | null}\r\n     */\r\n    straightLineKey: 'shiftKey',\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.PencilBrush} Instance of a pencil brush\r\n     */\r\n    initialize: function(canvas) {\r\n      this.canvas = canvas;\r\n      this._points = [];\r\n    },\r\n\r\n    needsFullRender: function () {\r\n      return this.callSuper('needsFullRender') || this._hasStraightLine;\r\n    },\r\n\r\n    /**\r\n     * Invoked inside on mouse down and mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    _drawSegment: function (ctx, p1, p2) {\r\n      var midPoint = p1.midPointFrom(p2);\r\n      ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\r\n      return midPoint;\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse down\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseDown: function(pointer, options) {\r\n      if (!this.canvas._isMainEvent(options.e)) {\r\n        return;\r\n      }\r\n      this.drawStraightLine = options.e[this.straightLineKey];\r\n      this._prepareForDrawing(pointer);\r\n      // capture coordinates immediately\r\n      // this allows to draw dots (when movement never occurs)\r\n      this._captureDrawingPath(pointer);\r\n      this._render();\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */\r\n    onMouseMove: function(pointer, options) {\r\n      if (!this.canvas._isMainEvent(options.e)) {\r\n        return;\r\n      }\r\n      this.drawStraightLine = options.e[this.straightLineKey];\r\n      if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\r\n        return;\r\n      }\r\n      if (this._captureDrawingPath(pointer) && this._points.length > 1) {\r\n        if (this.needsFullRender()) {\r\n          // redraw curve\r\n          // clear top canvas\r\n          this.canvas.clearContext(this.canvas.contextTop);\r\n          this._render();\r\n        }\r\n        else {\r\n          var points = this._points, length = points.length, ctx = this.canvas.contextTop;\r\n          // draw the curve update\r\n          this._saveAndTransform(ctx);\r\n          if (this.oldEnd) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\r\n          }\r\n          this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\r\n          ctx.stroke();\r\n          ctx.restore();\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Invoked on mouse up\r\n     */\r\n    onMouseUp: function(options) {\r\n      if (!this.canvas._isMainEvent(options.e)) {\r\n        return true;\r\n      }\r\n      this.drawStraightLine = false;\r\n      this.oldEnd = undefined;\r\n      this._finalizeAndAddPath();\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} pointer Actual mouse position related to the canvas.\r\n     */\r\n    _prepareForDrawing: function(pointer) {\r\n\r\n      var p = new fabric.Point(pointer.x, pointer.y);\r\n\r\n      this._reset();\r\n      this._addPoint(p);\r\n      this.canvas.contextTop.moveTo(p.x, p.y);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {fabric.Point} point Point to be added to points array\r\n     */\r\n    _addPoint: function(point) {\r\n      if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\r\n        return false;\r\n      }\r\n      if (this.drawStraightLine && this._points.length > 1) {\r\n        this._hasStraightLine = true;\r\n        this._points.pop();\r\n      }\r\n      this._points.push(point);\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Clear points array and set contextTop canvas style.\r\n     * @private\r\n     */\r\n    _reset: function() {\r\n      this._points = [];\r\n      this._setBrushStyles(this.canvas.contextTop);\r\n      this._setShadow();\r\n      this._hasStraightLine = false;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} pointer Actual mouse position related to the canvas.\r\n     */\r\n    _captureDrawingPath: function(pointer) {\r\n      var pointerPoint = new fabric.Point(pointer.x, pointer.y);\r\n      return this._addPoint(pointerPoint);\r\n    },\r\n\r\n    /**\r\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} [ctx]\r\n     */\r\n    _render: function(ctx) {\r\n      var i, len,\r\n          p1 = this._points[0],\r\n          p2 = this._points[1];\r\n      ctx = ctx || this.canvas.contextTop;\r\n      this._saveAndTransform(ctx);\r\n      ctx.beginPath();\r\n      //if we only have 2 points in the path and they are the same\r\n      //it means that the user only clicked the canvas without moving the mouse\r\n      //then we should be drawing a dot. A path isn't drawn between two identical dots\r\n      //that's why we set them apart a bit\r\n      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\r\n        var width = this.width / 1000;\r\n        p1 = new fabric.Point(p1.x, p1.y);\r\n        p2 = new fabric.Point(p2.x, p2.y);\r\n        p1.x -= width;\r\n        p2.x += width;\r\n      }\r\n      ctx.moveTo(p1.x, p1.y);\r\n\r\n      for (i = 1, len = this._points.length; i < len; i++) {\r\n        // we pick the point between pi + 1 & pi + 2 as the\r\n        // end point and p1 as our control point.\r\n        this._drawSegment(ctx, p1, p2);\r\n        p1 = this._points[i];\r\n        p2 = this._points[i + 1];\r\n      }\r\n      // Draw last line as a straight line while\r\n      // we wait for the next point to be able to calculate\r\n      // the bezier control point\r\n      ctx.lineTo(p1.x, p1.y);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Converts points to SVG path\r\n     * @param {Array} points Array of points\r\n     * @return {(string|number)[][]} SVG path commands\r\n     */\r\n    convertPointsToSVGPath: function (points) {\r\n      var correction = this.width / 1000;\r\n      return fabric.util.getSmoothPathFromPoints(points, correction);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {(string|number)[][]} pathData SVG path commands\r\n     * @returns {boolean}\r\n     */\r\n    _isEmptySVGPath: function (pathData) {\r\n      var pathString = fabric.util.joinPath(pathData);\r\n      return pathString === 'M 0 0 Q 0 0 0 0 L 0 0';\r\n    },\r\n\r\n    /**\r\n     * Creates fabric.Path object to add on canvas\r\n     * @param {(string|number)[][]} pathData Path data\r\n     * @return {fabric.Path} Path to add on canvas\r\n     */\r\n    createPath: function(pathData) {\r\n      var path = new fabric.Path(pathData, {\r\n        fill: null,\r\n        stroke: this.color,\r\n        strokeWidth: this.width,\r\n        strokeLineCap: this.strokeLineCap,\r\n        strokeMiterLimit: this.strokeMiterLimit,\r\n        strokeLineJoin: this.strokeLineJoin,\r\n        strokeDashArray: this.strokeDashArray,\r\n      });\r\n      if (this.shadow) {\r\n        this.shadow.affectStroke = true;\r\n        path.shadow = new fabric.Shadow(this.shadow);\r\n      }\r\n\r\n      return path;\r\n    },\r\n\r\n    /**\r\n     * Decimate points array with the decimate value\r\n     */\r\n    decimatePoints: function(points, distance) {\r\n      if (points.length <= 2) {\r\n        return points;\r\n      }\r\n      var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2),\r\n          i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint],\r\n          cDistance;\r\n      for (i = 1; i < l - 1; i++) {\r\n        cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);\r\n        if (cDistance >= adjustedDistance) {\r\n          lastPoint = points[i];\r\n          newPoints.push(lastPoint);\r\n        }\r\n      }\r\n      /**\r\n       * Add the last point from the original line to the end of the array.\r\n       * This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\r\n       */\r\n      newPoints.push(points[l]);\r\n      return newPoints;\r\n    },\r\n\r\n    /**\r\n     * On mouseup after drawing the path on contextTop canvas\r\n     * we use the points captured to create an new fabric path object\r\n     * and add it to the fabric canvas.\r\n     */\r\n    _finalizeAndAddPath: function() {\r\n      var ctx = this.canvas.contextTop;\r\n      ctx.closePath();\r\n      if (this.decimate) {\r\n        this._points = this.decimatePoints(this._points, this.decimate);\r\n      }\r\n      var pathData = this.convertPointsToSVGPath(this._points);\r\n      if (this._isEmptySVGPath(pathData)) {\r\n        // do not create 0 width/height paths, as they are\r\n        // rendered inconsistently across browsers\r\n        // Firefox 4, for example, renders a dot,\r\n        // whereas Chrome 10 renders nothing\r\n        this.canvas.requestRenderAll();\r\n        return;\r\n      }\r\n\r\n      var path = this.createPath(pathData);\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this.canvas.fire('before:path:created', { path: path });\r\n      this.canvas.add(path);\r\n      this.canvas.requestRenderAll();\r\n      path.setCoords();\r\n      this._resetShadow();\r\n\r\n\r\n      // fire event 'path' created\r\n      this.canvas.fire('path:created', { path: path });\r\n    }\r\n  });\r\n})();\r\n/**\r\n * CircleBrush class\r\n * @class fabric.CircleBrush\r\n */\r\nfabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\r\n\r\n  /**\r\n   * Width of a brush\r\n   * @type Number\r\n   * @default\r\n   */\r\n  width: 10,\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {fabric.Canvas} canvas\r\n   * @return {fabric.CircleBrush} Instance of a circle brush\r\n   */\r\n  initialize: function(canvas) {\r\n    this.canvas = canvas;\r\n    this.points = [];\r\n  },\r\n\r\n  /**\r\n   * Invoked inside on mouse down and mouse move\r\n   * @param {Object} pointer\r\n   */\r\n  drawDot: function(pointer) {\r\n    var point = this.addPoint(pointer),\r\n        ctx = this.canvas.contextTop;\r\n    this._saveAndTransform(ctx);\r\n    this.dot(ctx, point);\r\n    ctx.restore();\r\n  },\r\n\r\n  dot: function(ctx, point) {\r\n    ctx.fillStyle = point.fill;\r\n    ctx.beginPath();\r\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n  },\r\n\r\n  /**\r\n   * Invoked on mouse down\r\n   */\r\n  onMouseDown: function(pointer) {\r\n    this.points.length = 0;\r\n    this.canvas.clearContext(this.canvas.contextTop);\r\n    this._setShadow();\r\n    this.drawDot(pointer);\r\n  },\r\n\r\n  /**\r\n   * Render the full state of the brush\r\n   * @private\r\n   */\r\n  _render: function() {\r\n    var ctx  = this.canvas.contextTop, i, len,\r\n        points = this.points;\r\n    this._saveAndTransform(ctx);\r\n    for (i = 0, len = points.length; i < len; i++) {\r\n      this.dot(ctx, points[i]);\r\n    }\r\n    ctx.restore();\r\n  },\r\n\r\n  /**\r\n   * Invoked on mouse move\r\n   * @param {Object} pointer\r\n   */\r\n  onMouseMove: function(pointer) {\r\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\r\n      return;\r\n    }\r\n    if (this.needsFullRender()) {\r\n      this.canvas.clearContext(this.canvas.contextTop);\r\n      this.addPoint(pointer);\r\n      this._render();\r\n    }\r\n    else {\r\n      this.drawDot(pointer);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Invoked on mouse up\r\n   */\r\n  onMouseUp: function() {\r\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\r\n    this.canvas.renderOnAddRemove = false;\r\n\r\n    var circles = [];\r\n\r\n    for (i = 0, len = this.points.length; i < len; i++) {\r\n      var point = this.points[i],\r\n          circle = new fabric.Circle({\r\n            radius: point.radius,\r\n            left: point.x,\r\n            top: point.y,\r\n            originX: 'center',\r\n            originY: 'center',\r\n            fill: point.fill\r\n          });\r\n\r\n      this.shadow && (circle.shadow = new fabric.Shadow(this.shadow));\r\n\r\n      circles.push(circle);\r\n    }\r\n    var group = new fabric.Group(circles);\r\n    group.canvas = this.canvas;\r\n\r\n    this.canvas.fire('before:path:created', { path: group });\r\n    this.canvas.add(group);\r\n    this.canvas.fire('path:created', { path: group });\r\n\r\n    this.canvas.clearContext(this.canvas.contextTop);\r\n    this._resetShadow();\r\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n    this.canvas.requestRenderAll();\r\n  },\r\n\r\n  /**\r\n   * @param {Object} pointer\r\n   * @return {fabric.Point} Just added pointer point\r\n   */\r\n  addPoint: function(pointer) {\r\n    var pointerPoint = new fabric.Point(pointer.x, pointer.y),\r\n\r\n        circleRadius = fabric.util.getRandomInt(\r\n          Math.max(0, this.width - 20), this.width + 20) / 2,\r\n\r\n        circleColor = new fabric.Color(this.color)\r\n          .setAlpha(fabric.util.getRandomInt(0, 100) / 100)\r\n          .toRgba();\r\n\r\n    pointerPoint.radius = circleRadius;\r\n    pointerPoint.fill = circleColor;\r\n\r\n    this.points.push(pointerPoint);\r\n\r\n    return pointerPoint;\r\n  }\r\n});\r\n/**\r\n * SprayBrush class\r\n * @class fabric.SprayBrush\r\n */\r\nfabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\r\n\r\n  /**\r\n   * Width of a spray\r\n   * @type Number\r\n   * @default\r\n   */\r\n  width:              10,\r\n\r\n  /**\r\n   * Density of a spray (number of dots per chunk)\r\n   * @type Number\r\n   * @default\r\n   */\r\n  density:            20,\r\n\r\n  /**\r\n   * Width of spray dots\r\n   * @type Number\r\n   * @default\r\n   */\r\n  dotWidth:           1,\r\n\r\n  /**\r\n   * Width variance of spray dots\r\n   * @type Number\r\n   * @default\r\n   */\r\n  dotWidthVariance:   1,\r\n\r\n  /**\r\n   * Whether opacity of a dot should be random\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  randomOpacity:        false,\r\n\r\n  /**\r\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\r\n   * @type Boolean\r\n   * @default\r\n   */\r\n  optimizeOverlapping:  true,\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {fabric.Canvas} canvas\r\n   * @return {fabric.SprayBrush} Instance of a spray brush\r\n   */\r\n  initialize: function(canvas) {\r\n    this.canvas = canvas;\r\n    this.sprayChunks = [];\r\n  },\r\n\r\n  /**\r\n   * Invoked on mouse down\r\n   * @param {Object} pointer\r\n   */\r\n  onMouseDown: function(pointer) {\r\n    this.sprayChunks.length = 0;\r\n    this.canvas.clearContext(this.canvas.contextTop);\r\n    this._setShadow();\r\n\r\n    this.addSprayChunk(pointer);\r\n    this.render(this.sprayChunkPoints);\r\n  },\r\n\r\n  /**\r\n   * Invoked on mouse move\r\n   * @param {Object} pointer\r\n   */\r\n  onMouseMove: function(pointer) {\r\n    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\r\n      return;\r\n    }\r\n    this.addSprayChunk(pointer);\r\n    this.render(this.sprayChunkPoints);\r\n  },\r\n\r\n  /**\r\n   * Invoked on mouse up\r\n   */\r\n  onMouseUp: function() {\r\n    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\r\n    this.canvas.renderOnAddRemove = false;\r\n\r\n    var rects = [];\r\n\r\n    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n      var sprayChunk = this.sprayChunks[i];\r\n\r\n      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {\r\n\r\n        var rect = new fabric.Rect({\r\n          width: sprayChunk[j].width,\r\n          height: sprayChunk[j].width,\r\n          left: sprayChunk[j].x + 1,\r\n          top: sprayChunk[j].y + 1,\r\n          originX: 'center',\r\n          originY: 'center',\r\n          fill: this.color\r\n        });\r\n        rects.push(rect);\r\n      }\r\n    }\r\n\r\n    if (this.optimizeOverlapping) {\r\n      rects = this._getOptimizedRects(rects);\r\n    }\r\n\r\n    var group = new fabric.Group(rects);\r\n    this.shadow && group.set('shadow', new fabric.Shadow(this.shadow));\r\n    this.canvas.fire('before:path:created', { path: group });\r\n    this.canvas.add(group);\r\n    this.canvas.fire('path:created', { path: group });\r\n\r\n    this.canvas.clearContext(this.canvas.contextTop);\r\n    this._resetShadow();\r\n    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\r\n    this.canvas.requestRenderAll();\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {Array} rects\r\n   */\r\n  _getOptimizedRects: function(rects) {\r\n\r\n    // avoid creating duplicate rects at the same coordinates\r\n    var uniqueRects = { }, key, i, len;\r\n\r\n    for (i = 0, len = rects.length; i < len; i++) {\r\n      key = rects[i].left + '' + rects[i].top;\r\n      if (!uniqueRects[key]) {\r\n        uniqueRects[key] = rects[i];\r\n      }\r\n    }\r\n    var uniqueRectsArray = [];\r\n    for (key in uniqueRects) {\r\n      uniqueRectsArray.push(uniqueRects[key]);\r\n    }\r\n\r\n    return uniqueRectsArray;\r\n  },\r\n\r\n  /**\r\n   * Render new chunk of spray brush\r\n   */\r\n  render: function(sprayChunk) {\r\n    var ctx = this.canvas.contextTop, i, len;\r\n    ctx.fillStyle = this.color;\r\n\r\n    this._saveAndTransform(ctx);\r\n\r\n    for (i = 0, len = sprayChunk.length; i < len; i++) {\r\n      var point = sprayChunk[i];\r\n      if (typeof point.opacity !== 'undefined') {\r\n        ctx.globalAlpha = point.opacity;\r\n      }\r\n      ctx.fillRect(point.x, point.y, point.width, point.width);\r\n    }\r\n    ctx.restore();\r\n  },\r\n\r\n  /**\r\n   * Render all spray chunks\r\n   */\r\n  _render: function() {\r\n    var ctx = this.canvas.contextTop, i, ilen;\r\n    ctx.fillStyle = this.color;\r\n\r\n    this._saveAndTransform(ctx);\r\n\r\n    for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {\r\n      this.render(this.sprayChunks[i]);\r\n    }\r\n    ctx.restore();\r\n  },\r\n\r\n  /**\r\n   * @param {Object} pointer\r\n   */\r\n  addSprayChunk: function(pointer) {\r\n    this.sprayChunkPoints = [];\r\n\r\n    var x, y, width, radius = this.width / 2, i;\r\n\r\n    for (i = 0; i < this.density; i++) {\r\n\r\n      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\r\n      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\r\n\r\n      if (this.dotWidthVariance) {\r\n        width = fabric.util.getRandomInt(\r\n          // bottom clamp width to 1\r\n          Math.max(1, this.dotWidth - this.dotWidthVariance),\r\n          this.dotWidth + this.dotWidthVariance);\r\n      }\r\n      else {\r\n        width = this.dotWidth;\r\n      }\r\n\r\n      var point = new fabric.Point(x, y);\r\n      point.width = width;\r\n\r\n      if (this.randomOpacity) {\r\n        point.opacity = fabric.util.getRandomInt(0, 100) / 100;\r\n      }\r\n\r\n      this.sprayChunkPoints.push(point);\r\n    }\r\n\r\n    this.sprayChunks.push(this.sprayChunkPoints);\r\n  }\r\n});\r\n/**\r\n * PatternBrush class\r\n * @class fabric.PatternBrush\r\n * @extends fabric.BaseBrush\r\n */\r\nfabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\r\n\r\n  getPatternSrc: function() {\r\n\r\n    var dotWidth = 20,\r\n        dotDistance = 5,\r\n        patternCanvas = fabric.util.createCanvasElement(),\r\n        patternCtx = patternCanvas.getContext('2d');\r\n\r\n    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\r\n\r\n    patternCtx.fillStyle = this.color;\r\n    patternCtx.beginPath();\r\n    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\r\n    patternCtx.closePath();\r\n    patternCtx.fill();\r\n\r\n    return patternCanvas;\r\n  },\r\n\r\n  getPatternSrcFunction: function() {\r\n    return String(this.getPatternSrc).replace('this.color', '\"' + this.color + '\"');\r\n  },\r\n\r\n  /**\r\n   * Creates \"pattern\" instance property\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\r\n  getPattern: function(ctx) {\r\n    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');\r\n  },\r\n\r\n  /**\r\n   * Sets brush styles\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */\r\n  _setBrushStyles: function(ctx) {\r\n    this.callSuper('_setBrushStyles', ctx);\r\n    ctx.strokeStyle = this.getPattern(ctx);\r\n  },\r\n\r\n  /**\r\n   * Creates path\r\n   */\r\n  createPath: function(pathData) {\r\n    var path = this.callSuper('createPath', pathData),\r\n        topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\r\n\r\n    path.stroke = new fabric.Pattern({\r\n      source: this.source || this.getPatternSrcFunction(),\r\n      offsetX: -topLeft.x,\r\n      offsetY: -topLeft.y\r\n    });\r\n    return path;\r\n  }\r\n});\r\n(function() {\r\n\r\n  var getPointer = fabric.util.getPointer,\r\n      degreesToRadians = fabric.util.degreesToRadians,\r\n      isTouchEvent = fabric.util.isTouchEvent;\r\n\r\n  /**\r\n   * Canvas class\r\n   * @class fabric.Canvas\r\n   * @extends fabric.StaticCanvas\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\r\n   * @see {@link fabric.Canvas#initialize} for constructor definition\r\n   *\r\n   * @fires object:modified at the end of a transform or any change when statefull is true\r\n   * @fires object:rotating while an object is being rotated from the control\r\n   * @fires object:scaling while an object is being scaled by controls\r\n   * @fires object:moving while an object is being dragged\r\n   * @fires object:skewing while an object is being skewed from the controls\r\n   *\r\n   * @fires before:transform before a transform is is started\r\n   * @fires before:selection:cleared\r\n   * @fires selection:cleared\r\n   * @fires selection:updated\r\n   * @fires selection:created\r\n   *\r\n   * @fires path:created after a drawing operation ends and the path is added\r\n   * @fires mouse:down\r\n   * @fires mouse:move\r\n   * @fires mouse:up\r\n   * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\r\n   * @fires mouse:move:before on mouse move, before the inner fabric logic runs\r\n   * @fires mouse:up:before on mouse up, before the inner fabric logic runs\r\n   * @fires mouse:over\r\n   * @fires mouse:out\r\n   * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\r\n   *\r\n   * @fires dragover\r\n   * @fires dragenter\r\n   * @fires dragleave\r\n   * @fires drop:before before drop event. same native event. This is added to handle edge cases\r\n   * @fires drop\r\n   * @fires after:render at the end of the render process, receives the context in the callback\r\n   * @fires before:render at start the render process, receives the context in the callback\r\n   *\r\n   */\r\n  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */\r\n    initialize: function(el, options) {\r\n      options || (options = { });\r\n      this.renderAndResetBound = this.renderAndReset.bind(this);\r\n      this.requestRenderAllBound = this.requestRenderAll.bind(this);\r\n      this._initStatic(el, options);\r\n      this._initInteractive();\r\n      this._createCacheCanvas();\r\n    },\r\n\r\n    /**\r\n     * When true, objects can be transformed by one side (unproportionally)\r\n     * when dragged on the corners that normally would not do that.\r\n     * @type Boolean\r\n     * @default\r\n     * @since fabric 4.0 // changed name and default value\r\n     */\r\n    uniformScaling:      true,\r\n\r\n    /**\r\n     * Indicates which key switches uniform scaling.\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled.\r\n     * totally wrong named. this sounds like `uniform scaling`\r\n     * if Canvas.uniformScaling is true, pressing this will set it to false\r\n     * and viceversa.\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */\r\n    uniScaleKey:           'shiftKey',\r\n\r\n    /**\r\n     * When true, objects use center point as the origin of scale transformation.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    centeredScaling:        false,\r\n\r\n    /**\r\n     * When true, objects use center point as the origin of rotate transformation.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    centeredRotation:       false,\r\n\r\n    /**\r\n     * Indicates which key enable centered Transform\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled feature disabled.\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */\r\n    centeredKey:           'altKey',\r\n\r\n    /**\r\n     * Indicates which key enable alternate action on corner\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled feature disabled.\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */\r\n    altActionKey:           'shiftKey',\r\n\r\n    /**\r\n     * Indicates that canvas is interactive. This property should not be changed.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    interactive:            true,\r\n\r\n    /**\r\n     * Indicates whether group selection should be enabled\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    selection:              true,\r\n\r\n    /**\r\n     * Indicates which key or keys enable multiple click selection\r\n     * Pass value as a string or array of strings\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or empty or containing any other string that is not a modifier key\r\n     * feature is disabled.\r\n     * @since 1.6.2\r\n     * @type String|Array\r\n     * @default\r\n     */\r\n    selectionKey:           'shiftKey',\r\n\r\n    /**\r\n     * Indicates which key enable alternative selection\r\n     * in case of target overlapping with active object\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * For a series of reason that come from the general expectations on how\r\n     * things should work, this feature works only for preserveObjectStacking true.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled.\r\n     * @since 1.6.5\r\n     * @type null|String\r\n     * @default\r\n     */\r\n    altSelectionKey:           null,\r\n\r\n    /**\r\n     * Color of selection\r\n     * @type String\r\n     * @default\r\n     */\r\n    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue\r\n\r\n    /**\r\n     * Default dash array pattern\r\n     * If not empty the selection border is dashed\r\n     * @type Array\r\n     */\r\n    selectionDashArray:     [],\r\n\r\n    /**\r\n     * Color of the border of selection (usually slightly darker than color of selection itself)\r\n     * @type String\r\n     * @default\r\n     */\r\n    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',\r\n\r\n    /**\r\n     * Width of a line used in object/group selection\r\n     * @type Number\r\n     * @default\r\n     */\r\n    selectionLineWidth:     1,\r\n\r\n    /**\r\n     * Select only shapes that are fully contained in the dragged selection rectangle.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    selectionFullyContained: false,\r\n\r\n    /**\r\n     * Default cursor value used when hovering over an object on canvas\r\n     * @type String\r\n     * @default\r\n     */\r\n    hoverCursor:            'move',\r\n\r\n    /**\r\n     * Default cursor value used when moving an object on canvas\r\n     * @type String\r\n     * @default\r\n     */\r\n    moveCursor:             'move',\r\n\r\n    /**\r\n     * Default cursor value used for the entire canvas\r\n     * @type String\r\n     * @default\r\n     */\r\n    defaultCursor:          'default',\r\n\r\n    /**\r\n     * Cursor value used during free drawing\r\n     * @type String\r\n     * @default\r\n     */\r\n    freeDrawingCursor:      'crosshair',\r\n\r\n    /**\r\n     * Cursor value used for disabled elements ( corners with disabled action )\r\n     * @type String\r\n     * @since 2.0.0\r\n     * @default\r\n     */\r\n    notAllowedCursor:         'not-allowed',\r\n\r\n    /**\r\n     * Default element class that's given to wrapper (div) element of canvas\r\n     * @type String\r\n     * @default\r\n     */\r\n    containerClass:         'canvas-container',\r\n\r\n    /**\r\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    perPixelTargetFind:     false,\r\n\r\n    /**\r\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\r\n     * @type Number\r\n     * @default\r\n     */\r\n    targetFindTolerance:    0,\r\n\r\n    /**\r\n     * When true, target detection is skipped. Target detection will return always undefined.\r\n     * click selection won't work anymore, events will fire with no targets.\r\n     * if something is selected before setting it to true, it will be deselected at the first click.\r\n     * area selection will still work. check the `selection` property too.\r\n     * if you deactivate both, you should look into staticCanvas.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    skipTargetFind:         false,\r\n\r\n    /**\r\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\r\n     * After mousedown, mousemove creates a shape,\r\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    isDrawingMode:          false,\r\n\r\n    /**\r\n     * Indicates whether objects should remain in current stack position when selected.\r\n     * When false objects are brought to top and rendered as part of the selection group\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    preserveObjectStacking: false,\r\n\r\n    /**\r\n     * Indicates the angle that an object will lock to while rotating.\r\n     * @type Number\r\n     * @since 1.6.7\r\n     * @default\r\n     */\r\n    snapAngle: 0,\r\n\r\n    /**\r\n     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\r\n     * When `null`, the snapThreshold will default to the snapAngle.\r\n     * @type null|Number\r\n     * @since 1.6.7\r\n     * @default\r\n     */\r\n    snapThreshold: null,\r\n\r\n    /**\r\n     * Indicates if the right click on canvas can output the context menu or not\r\n     * @type Boolean\r\n     * @since 1.6.5\r\n     * @default\r\n     */\r\n    stopContextMenu: false,\r\n\r\n    /**\r\n     * Indicates if the canvas can fire right click events\r\n     * @type Boolean\r\n     * @since 1.6.5\r\n     * @default\r\n     */\r\n    fireRightClick: false,\r\n\r\n    /**\r\n     * Indicates if the canvas can fire middle click events\r\n     * @type Boolean\r\n     * @since 1.7.8\r\n     * @default\r\n     */\r\n    fireMiddleClick: false,\r\n\r\n    /**\r\n     * Keep track of the subTargets for Mouse Events\r\n     * @type fabric.Object[]\r\n     */\r\n    targets: [],\r\n\r\n    /**\r\n     * When the option is enabled, PointerEvent is used instead of MouseEvent.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    enablePointerEvents: false,\r\n\r\n    /**\r\n     * Keep track of the hovered target\r\n     * @type fabric.Object\r\n     * @private\r\n     */\r\n    _hoveredTarget: null,\r\n\r\n    /**\r\n     * hold the list of nested targets hovered\r\n     * @type fabric.Object[]\r\n     * @private\r\n     */\r\n    _hoveredTargets: [],\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _initInteractive: function() {\r\n      this._currentTransform = null;\r\n      this._groupSelector = null;\r\n      this._initWrapperElement();\r\n      this._createUpperCanvas();\r\n      this._initEventListeners();\r\n\r\n      this._initRetinaScaling();\r\n\r\n      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\r\n\r\n      this.calcOffset();\r\n    },\r\n\r\n    /**\r\n     * Divides objects in two groups, one to render immediately\r\n     * and one to render as activeGroup.\r\n     * @return {Array} objects to render immediately and pushes the other in the activeGroup.\r\n     */\r\n    _chooseObjectsToRender: function() {\r\n      var activeObjects = this.getActiveObjects(),\r\n          object, objsToRender, activeGroupObjects;\r\n\r\n      if (activeObjects.length > 0 && !this.preserveObjectStacking) {\r\n        objsToRender = [];\r\n        activeGroupObjects = [];\r\n        for (var i = 0, length = this._objects.length; i < length; i++) {\r\n          object = this._objects[i];\r\n          if (activeObjects.indexOf(object) === -1 ) {\r\n            objsToRender.push(object);\r\n          }\r\n          else {\r\n            activeGroupObjects.push(object);\r\n          }\r\n        }\r\n        if (activeObjects.length > 1) {\r\n          this._activeObject._objects = activeGroupObjects;\r\n        }\r\n        objsToRender.push.apply(objsToRender, activeGroupObjects);\r\n      }\r\n      else {\r\n        objsToRender = this._objects;\r\n      }\r\n      return objsToRender;\r\n    },\r\n\r\n    /**\r\n     * Renders both the top canvas and the secondary container canvas.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */\r\n    renderAll: function () {\r\n      if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\r\n        this.clearContext(this.contextTop);\r\n        this.contextTopDirty = false;\r\n      }\r\n      if (this.hasLostContext) {\r\n        this.renderTopLayer(this.contextTop);\r\n        this.hasLostContext = false;\r\n      }\r\n      var canvasToDrawOn = this.contextContainer;\r\n      this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\r\n      return this;\r\n    },\r\n\r\n    renderTopLayer: function(ctx) {\r\n      ctx.save();\r\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n        this.freeDrawingBrush && this.freeDrawingBrush._render();\r\n        this.contextTopDirty = true;\r\n      }\r\n      // we render the top context - last object\r\n      if (this.selection && this._groupSelector) {\r\n        this._drawSelection(ctx);\r\n        this.contextTopDirty = true;\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Method to render only the top canvas.\r\n     * Also used to render the group selection box.\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    renderTop: function () {\r\n      var ctx = this.contextTop;\r\n      this.clearContext(ctx);\r\n      this.renderTopLayer(ctx);\r\n      this.fire('after:render');\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _normalizePointer: function (object, pointer) {\r\n      var m = object.calcTransformMatrix(),\r\n          invertedM = fabric.util.invertTransform(m),\r\n          vptPointer = this.restorePointerVpt(pointer);\r\n      return fabric.util.transformPoint(vptPointer, invertedM);\r\n    },\r\n\r\n    /**\r\n     * Returns true if object is transparent at a certain location\r\n     * @param {fabric.Object} target Object to check\r\n     * @param {Number} x Left coordinate\r\n     * @param {Number} y Top coordinate\r\n     * @return {Boolean}\r\n     */\r\n    isTargetTransparent: function (target, x, y) {\r\n      // in case the target is the activeObject, we cannot execute this optimization\r\n      // because we need to draw controls too.\r\n      if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\r\n        var normalizedPointer = this._normalizePointer(target, {x: x, y: y}),\r\n            targetRelativeX = Math.max(target.cacheTranslationX + (normalizedPointer.x * target.zoomX), 0),\r\n            targetRelativeY = Math.max(target.cacheTranslationY + (normalizedPointer.y * target.zoomY), 0);\r\n\r\n        var isTransparent = fabric.util.isTransparent(\r\n          target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\r\n\r\n        return isTransparent;\r\n      }\r\n\r\n      var ctx = this.contextCache,\r\n          originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\r\n\r\n      target.selectionBackgroundColor = '';\r\n\r\n      this.clearContext(ctx);\r\n\r\n      ctx.save();\r\n      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\r\n      target.render(ctx);\r\n      ctx.restore();\r\n\r\n      target.selectionBackgroundColor = originalColor;\r\n\r\n      var isTransparent = fabric.util.isTransparent(\r\n        ctx, x, y, this.targetFindTolerance);\r\n\r\n      return isTransparent;\r\n    },\r\n\r\n    /**\r\n     * takes an event and determines if selection key has been pressed\r\n     * @private\r\n     * @param {Event} e Event object\r\n     */\r\n    _isSelectionKeyPressed: function(e) {\r\n      var selectionKeyPressed = false;\r\n\r\n      if (Array.isArray(this.selectionKey)) {\r\n        selectionKeyPressed = !!this.selectionKey.find(function(key) { return e[key] === true; });\r\n      }\r\n      else {\r\n        selectionKeyPressed = e[this.selectionKey];\r\n      }\r\n\r\n      return selectionKeyPressed;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     */\r\n    _shouldClearSelection: function (e, target) {\r\n      var activeObjects = this.getActiveObjects(),\r\n          activeObject = this._activeObject;\r\n\r\n      return (\r\n        !target\r\n        ||\r\n        (target &&\r\n          activeObject &&\r\n          activeObjects.length > 1 &&\r\n          activeObjects.indexOf(target) === -1 &&\r\n          activeObject !== target &&\r\n          !this._isSelectionKeyPressed(e))\r\n        ||\r\n        (target && !target.evented)\r\n        ||\r\n        (target &&\r\n          !target.selectable &&\r\n          activeObject &&\r\n          activeObject !== target)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * centeredScaling from object can't override centeredScaling from canvas.\r\n     * this should be fixed, since object setting should take precedence over canvas.\r\n     * also this should be something that will be migrated in the control properties.\r\n     * as ability to define the origin of the transformation that the control provide.\r\n     * @private\r\n     * @param {fabric.Object} target\r\n     * @param {String} action\r\n     * @param {Boolean} altKey\r\n     */\r\n    _shouldCenterTransform: function (target, action, altKey) {\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      var centerTransform;\r\n\r\n      if (action === 'scale' || action === 'scaleX' || action === 'scaleY' || action === 'resizing') {\r\n        centerTransform = this.centeredScaling || target.centeredScaling;\r\n      }\r\n      else if (action === 'rotate') {\r\n        centerTransform = this.centeredRotation || target.centeredRotation;\r\n      }\r\n\r\n      return centerTransform ? !altKey : altKey;\r\n    },\r\n\r\n    /**\r\n     * should disappear before release 4.0\r\n     * @private\r\n     */\r\n    _getOriginFromCorner: function(target, corner) {\r\n      var origin = {\r\n        x: target.originX,\r\n        y: target.originY\r\n      };\r\n\r\n      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {\r\n        origin.x = 'right';\r\n      }\r\n      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {\r\n        origin.x = 'left';\r\n      }\r\n\r\n      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {\r\n        origin.y = 'bottom';\r\n      }\r\n      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {\r\n        origin.y = 'top';\r\n      }\r\n      return origin;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Boolean} alreadySelected true if target is already selected\r\n     * @param {String} corner a string representing the corner ml, mr, tl ...\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} [target] inserted back to help overriding. Unused\r\n     */\r\n    _getActionFromCorner: function(alreadySelected, corner, e, target) {\r\n      if (!corner || !alreadySelected) {\r\n        return 'drag';\r\n      }\r\n      var control = target.controls[corner];\r\n      return control.getActionName(e, control, target);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     */\r\n    _setupCurrentTransform: function (e, target, alreadySelected) {\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      var pointer = this.getPointer(e), corner = target.__corner,\r\n          control = target.controls[corner],\r\n          actionHandler = (alreadySelected && corner) ?\r\n            control.getActionHandler(e, target, control) : fabric.controlsUtils.dragHandler,\r\n          action = this._getActionFromCorner(alreadySelected, corner, e, target),\r\n          origin = this._getOriginFromCorner(target, corner),\r\n          altKey = e[this.centeredKey],\r\n          transform = {\r\n            target: target,\r\n            action: action,\r\n            actionHandler: actionHandler,\r\n            corner: corner,\r\n            scaleX: target.scaleX,\r\n            scaleY: target.scaleY,\r\n            skewX: target.skewX,\r\n            skewY: target.skewY,\r\n            // used by transation\r\n            offsetX: pointer.x - target.left,\r\n            offsetY: pointer.y - target.top,\r\n            originX: origin.x,\r\n            originY: origin.y,\r\n            ex: pointer.x,\r\n            ey: pointer.y,\r\n            lastX: pointer.x,\r\n            lastY: pointer.y,\r\n            // unsure they are useful anymore.\r\n            // left: target.left,\r\n            // top: target.top,\r\n            theta: degreesToRadians(target.angle),\r\n            // end of unsure\r\n            width: target.width * target.scaleX,\r\n            shiftKey: e.shiftKey,\r\n            altKey: altKey,\r\n            original: fabric.util.saveObjectTransform(target),\r\n          };\r\n\r\n      if (this._shouldCenterTransform(target, action, altKey)) {\r\n        transform.originX = 'center';\r\n        transform.originY = 'center';\r\n      }\r\n      transform.original.originX = origin.x;\r\n      transform.original.originY = origin.y;\r\n      this._currentTransform = transform;\r\n      this._beforeTransform(e);\r\n    },\r\n\r\n    /**\r\n     * Set the cursor type of the canvas element\r\n     * @param {String} value Cursor type of the canvas element.\r\n     * @see http://www.w3.org/TR/css3-ui/#cursor\r\n     */\r\n    setCursor: function (value) {\r\n      this.upperCanvasEl.style.cursor = value;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx to draw the selection on\r\n     */\r\n    _drawSelection: function (ctx) {\r\n      var selector = this._groupSelector,\r\n          viewportStart = new fabric.Point(selector.ex, selector.ey),\r\n          start = fabric.util.transformPoint(viewportStart, this.viewportTransform),\r\n          viewportExtent = new fabric.Point(selector.ex + selector.left, selector.ey + selector.top),\r\n          extent = fabric.util.transformPoint(viewportExtent, this.viewportTransform),\r\n          minX = Math.min(start.x, extent.x),\r\n          minY = Math.min(start.y, extent.y),\r\n          maxX = Math.max(start.x, extent.x),\r\n          maxY = Math.max(start.y, extent.y),\r\n          strokeOffset = this.selectionLineWidth / 2;\r\n\r\n      if (this.selectionColor) {\r\n        ctx.fillStyle = this.selectionColor;\r\n        ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\r\n      }\r\n\r\n      if (!this.selectionLineWidth || !this.selectionBorderColor) {\r\n        return;\r\n      }\r\n      ctx.lineWidth = this.selectionLineWidth;\r\n      ctx.strokeStyle = this.selectionBorderColor;\r\n\r\n      minX += strokeOffset;\r\n      minY += strokeOffset;\r\n      maxX -= strokeOffset;\r\n      maxY -= strokeOffset;\r\n      // selection border\r\n      fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\r\n      ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\r\n    },\r\n\r\n    /**\r\n     * Method that determines what object we are clicking on\r\n     * the skipGroup parameter is for internal use, is needed for shift+click action\r\n     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\r\n     * or the outside part of the corner.\r\n     * @param {Event} e mouse event\r\n     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\r\n     * @return {fabric.Object} the target found\r\n     */\r\n    findTarget: function (e, skipGroup) {\r\n      if (this.skipTargetFind) {\r\n        return;\r\n      }\r\n\r\n      var ignoreZoom = true,\r\n          pointer = this.getPointer(e, ignoreZoom),\r\n          activeObject = this._activeObject,\r\n          aObjects = this.getActiveObjects(),\r\n          activeTarget, activeTargetSubs,\r\n          isTouch = isTouchEvent(e),\r\n          shouldLookForActive = (aObjects.length > 1 && !skipGroup) || aObjects.length === 1;\r\n\r\n      // first check current group (if one exists)\r\n      // active group does not check sub targets like normal groups.\r\n      // if active group just exits.\r\n      this.targets = [];\r\n\r\n      // if we hit the corner of an activeObject, let's return that.\r\n      if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {\r\n        return activeObject;\r\n      }\r\n      if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n        return activeObject;\r\n      }\r\n      if (aObjects.length === 1 &&\r\n        activeObject === this._searchPossibleTargets([activeObject], pointer)) {\r\n        if (!this.preserveObjectStacking) {\r\n          return activeObject;\r\n        }\r\n        else {\r\n          activeTarget = activeObject;\r\n          activeTargetSubs = this.targets;\r\n          this.targets = [];\r\n        }\r\n      }\r\n      var target = this._searchPossibleTargets(this._objects, pointer);\r\n      if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\r\n        target = activeTarget;\r\n        this.targets = activeTargetSubs;\r\n      }\r\n      return target;\r\n    },\r\n\r\n    /**\r\n     * Checks point is inside the object.\r\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n     * @param {fabric.Object} obj Object to test against\r\n     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\r\n     * @return {Boolean} true if point is contained within an area of given object\r\n     * @private\r\n     */\r\n    _checkTarget: function(pointer, obj, globalPointer) {\r\n      if (obj &&\r\n          obj.visible &&\r\n          obj.evented &&\r\n          // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\r\n          // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\r\n          obj.containsPoint(pointer)\r\n      ) {\r\n        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\r\n          var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\r\n          if (!isTransparent) {\r\n            return true;\r\n          }\r\n        }\r\n        else {\r\n          return true;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\r\n     * @param {Array} [objects] objects array to look into\r\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n     * @return {fabric.Object} object that contains pointer\r\n     * @private\r\n     */\r\n    _searchPossibleTargets: function(objects, pointer) {\r\n      // Cache all targets where their bounding box contains point.\r\n      var target, i = objects.length, subTarget;\r\n      // Do not check for currently grouped objects, since we check the parent group itself.\r\n      // until we call this function specifically to search inside the activeGroup\r\n      while (i--) {\r\n        var objToCheck = objects[i];\r\n        var pointerToUse = objToCheck.group ?\r\n          this._normalizePointer(objToCheck.group, pointer) : pointer;\r\n        if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\r\n          target = objects[i];\r\n          if (target.subTargetCheck && target instanceof fabric.Group) {\r\n            subTarget = this._searchPossibleTargets(target._objects, pointer);\r\n            subTarget && this.targets.push(subTarget);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      return target;\r\n    },\r\n\r\n    /**\r\n     * Returns pointer coordinates without the effect of the viewport\r\n     * @param {Object} pointer with \"x\" and \"y\" number values\r\n     * @return {Object} object with \"x\" and \"y\" number values\r\n     */\r\n    restorePointerVpt: function(pointer) {\r\n      return fabric.util.transformPoint(\r\n        pointer,\r\n        fabric.util.invertTransform(this.viewportTransform)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Returns pointer coordinates relative to canvas.\r\n     * Can return coordinates with or without viewportTransform.\r\n     * ignoreZoom false gives back coordinates that represent\r\n     * the point clicked on canvas element.\r\n     * ignoreZoom true gives back coordinates after being processed\r\n     * by the viewportTransform ( sort of coordinates of what is displayed\r\n     * on the canvas where you are clicking.\r\n     * ignoreZoom true = HTMLElement coordinates relative to top,left\r\n     * ignoreZoom false, default = fabric space coordinates, the same used for shape position\r\n     * To interact with your shapes top and left you want to use ignoreZoom true\r\n     * most of the time, while ignoreZoom false will give you coordinates\r\n     * compatible with the object.oCoords system.\r\n     * of the time.\r\n     * @param {Event} e\r\n     * @param {Boolean} ignoreZoom\r\n     * @return {Object} object with \"x\" and \"y\" number values\r\n     */\r\n    getPointer: function (e, ignoreZoom) {\r\n      // return cached values if we are in the event processing chain\r\n      if (this._absolutePointer && !ignoreZoom) {\r\n        return this._absolutePointer;\r\n      }\r\n      if (this._pointer && ignoreZoom) {\r\n        return this._pointer;\r\n      }\r\n\r\n      var pointer = getPointer(e),\r\n          upperCanvasEl = this.upperCanvasEl,\r\n          bounds = upperCanvasEl.getBoundingClientRect(),\r\n          boundsWidth = bounds.width || 0,\r\n          boundsHeight = bounds.height || 0,\r\n          cssScale;\r\n\r\n      if (!boundsWidth || !boundsHeight ) {\r\n        if ('top' in bounds && 'bottom' in bounds) {\r\n          boundsHeight = Math.abs( bounds.top - bounds.bottom );\r\n        }\r\n        if ('right' in bounds && 'left' in bounds) {\r\n          boundsWidth = Math.abs( bounds.right - bounds.left );\r\n        }\r\n      }\r\n\r\n      this.calcOffset();\r\n      pointer.x = pointer.x - this._offset.left;\r\n      pointer.y = pointer.y - this._offset.top;\r\n      if (!ignoreZoom) {\r\n        pointer = this.restorePointerVpt(pointer);\r\n      }\r\n\r\n      var retinaScaling = this.getRetinaScaling();\r\n      if (retinaScaling !== 1) {\r\n        pointer.x /= retinaScaling;\r\n        pointer.y /= retinaScaling;\r\n      }\r\n\r\n      if (boundsWidth === 0 || boundsHeight === 0) {\r\n        // If bounds are not available (i.e. not visible), do not apply scale.\r\n        cssScale = { width: 1, height: 1 };\r\n      }\r\n      else {\r\n        cssScale = {\r\n          width: upperCanvasEl.width / boundsWidth,\r\n          height: upperCanvasEl.height / boundsHeight\r\n        };\r\n      }\r\n\r\n      return {\r\n        x: pointer.x * cssScale.width,\r\n        y: pointer.y * cssScale.height\r\n      };\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\r\n     */\r\n    _createUpperCanvas: function () {\r\n      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, ''),\r\n          lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;\r\n\r\n      // there is no need to create a new upperCanvas element if we have already one.\r\n      if (upperCanvasEl) {\r\n        upperCanvasEl.className = '';\r\n      }\r\n      else {\r\n        upperCanvasEl = this._createCanvasElement();\r\n        this.upperCanvasEl = upperCanvasEl;\r\n      }\r\n      fabric.util.addClass(upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);\r\n\r\n      this.wrapperEl.appendChild(upperCanvasEl);\r\n\r\n      this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);\r\n      this._applyCanvasStyle(upperCanvasEl);\r\n      this.contextTop = upperCanvasEl.getContext('2d');\r\n    },\r\n\r\n    /**\r\n     * Returns context of top canvas where interactions are drawn\r\n     * @returns {CanvasRenderingContext2D}\r\n     */\r\n    getTopContext: function () {\r\n      return this.contextTop;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _createCacheCanvas: function () {\r\n      this.cacheCanvasEl = this._createCanvasElement();\r\n      this.cacheCanvasEl.setAttribute('width', this.width);\r\n      this.cacheCanvasEl.setAttribute('height', this.height);\r\n      this.contextCache = this.cacheCanvasEl.getContext('2d');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _initWrapperElement: function () {\r\n      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {\r\n        'class': this.containerClass\r\n      });\r\n      fabric.util.setStyle(this.wrapperEl, {\r\n        width: this.width + 'px',\r\n        height: this.height + 'px',\r\n        position: 'relative'\r\n      });\r\n      fabric.util.makeElementUnselectable(this.wrapperEl);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {HTMLElement} element canvas element to apply styles on\r\n     */\r\n    _applyCanvasStyle: function (element) {\r\n      var width = this.width || element.width,\r\n          height = this.height || element.height;\r\n\r\n      fabric.util.setStyle(element, {\r\n        position: 'absolute',\r\n        width: width + 'px',\r\n        height: height + 'px',\r\n        left: 0,\r\n        top: 0,\r\n        'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none',\r\n        '-ms-touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'\r\n      });\r\n      element.width = width;\r\n      element.height = height;\r\n      fabric.util.makeElementUnselectable(element);\r\n    },\r\n\r\n    /**\r\n     * Copy the entire inline style from one element (fromEl) to another (toEl)\r\n     * @private\r\n     * @param {Element} fromEl Element style is copied from\r\n     * @param {Element} toEl Element copied style is applied to\r\n     */\r\n    _copyCanvasStyle: function (fromEl, toEl) {\r\n      toEl.style.cssText = fromEl.style.cssText;\r\n    },\r\n\r\n    /**\r\n     * Returns context of canvas where object selection is drawn\r\n     * @return {CanvasRenderingContext2D}\r\n     */\r\n    getSelectionContext: function() {\r\n      return this.contextTop;\r\n    },\r\n\r\n    /**\r\n     * Returns &lt;canvas> element on which object selection is drawn\r\n     * @return {HTMLCanvasElement}\r\n     */\r\n    getSelectionElement: function () {\r\n      return this.upperCanvasEl;\r\n    },\r\n\r\n    /**\r\n     * Returns currently active object\r\n     * @return {fabric.Object} active object\r\n     */\r\n    getActiveObject: function () {\r\n      return this._activeObject;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with the current selected objects\r\n     * @return {fabric.Object} active object\r\n     */\r\n    getActiveObjects: function () {\r\n      var active = this._activeObject;\r\n      if (active) {\r\n        if (active.type === 'activeSelection' && active._objects) {\r\n          return active._objects.slice(0);\r\n        }\r\n        else {\r\n          return [active];\r\n        }\r\n      }\r\n      return [];\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {fabric.Object} obj Object that was removed\r\n     */\r\n    _onObjectRemoved: function(obj) {\r\n      // removing active object should fire \"selection:cleared\" events\r\n      if (obj === this._activeObject) {\r\n        this.fire('before:selection:cleared', { target: obj });\r\n        this._discardActiveObject();\r\n        this.fire('selection:cleared', { target: obj });\r\n        obj.fire('deselected');\r\n      }\r\n      if (obj === this._hoveredTarget){\r\n        this._hoveredTarget = null;\r\n        this._hoveredTargets = [];\r\n      }\r\n      this.callSuper('_onObjectRemoved', obj);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * Compares the old activeObject with the current one and fires correct events\r\n     * @param {fabric.Object} obj old activeObject\r\n     */\r\n    _fireSelectionEvents: function(oldObjects, e) {\r\n      var somethingChanged = false, objects = this.getActiveObjects(),\r\n          added = [], removed = [];\r\n      oldObjects.forEach(function(oldObject) {\r\n        if (objects.indexOf(oldObject) === -1) {\r\n          somethingChanged = true;\r\n          oldObject.fire('deselected', {\r\n            e: e,\r\n            target: oldObject\r\n          });\r\n          removed.push(oldObject);\r\n        }\r\n      });\r\n      objects.forEach(function(object) {\r\n        if (oldObjects.indexOf(object) === -1) {\r\n          somethingChanged = true;\r\n          object.fire('selected', {\r\n            e: e,\r\n            target: object\r\n          });\r\n          added.push(object);\r\n        }\r\n      });\r\n      if (oldObjects.length > 0 && objects.length > 0) {\r\n        somethingChanged && this.fire('selection:updated', {\r\n          e: e,\r\n          selected: added,\r\n          deselected: removed,\r\n        });\r\n      }\r\n      else if (objects.length > 0) {\r\n        this.fire('selection:created', {\r\n          e: e,\r\n          selected: added,\r\n        });\r\n      }\r\n      else if (oldObjects.length > 0) {\r\n        this.fire('selection:cleared', {\r\n          e: e,\r\n          deselected: removed,\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets given object as the only active object on canvas\r\n     * @param {fabric.Object} object Object to set as an active one\r\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    setActiveObject: function (object, e) {\r\n      var currentActives = this.getActiveObjects();\r\n      this._setActiveObject(object, e);\r\n      this._fireSelectionEvents(currentActives, e);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * This is a private method for now.\r\n     * This is supposed to be equivalent to setActiveObject but without firing\r\n     * any event. There is commitment to have this stay this way.\r\n     * This is the functional part of setActiveObject.\r\n     * @private\r\n     * @param {Object} object to set as active\r\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n     * @return {Boolean} true if the selection happened\r\n     */\r\n    _setActiveObject: function(object, e) {\r\n      if (this._activeObject === object) {\r\n        return false;\r\n      }\r\n      if (!this._discardActiveObject(e, object)) {\r\n        return false;\r\n      }\r\n      if (object.onSelect({ e: e })) {\r\n        return false;\r\n      }\r\n      this._activeObject = object;\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * This is a private method for now.\r\n     * This is supposed to be equivalent to discardActiveObject but without firing\r\n     * any events. There is commitment to have this stay this way.\r\n     * This is the functional part of discardActiveObject.\r\n     * @param {Event} [e] Event (passed along when firing \"object:deselected\")\r\n     * @param {Object} object to set as active\r\n     * @return {Boolean} true if the selection happened\r\n     * @private\r\n     */\r\n    _discardActiveObject: function(e, object) {\r\n      var obj = this._activeObject;\r\n      if (obj) {\r\n        // onDeselect return TRUE to cancel selection;\r\n        if (obj.onDeselect({ e: e, object: object })) {\r\n          return false;\r\n        }\r\n        this._activeObject = null;\r\n      }\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Discards currently active object and fire events. If the function is called by fabric\r\n     * as a consequence of a mouse event, the event is passed as a parameter and\r\n     * sent to the fire function for the custom events. When used as a method the\r\n     * e param does not have any application.\r\n     * @param {event} e\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    discardActiveObject: function (e) {\r\n      var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();\r\n      if (currentActives.length) {\r\n        this.fire('before:selection:cleared', { target: activeObject, e: e });\r\n      }\r\n      this._discardActiveObject(e);\r\n      this._fireSelectionEvents(currentActives, e);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Clears a canvas element and removes all event listeners\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    dispose: function () {\r\n      var wrapper = this.wrapperEl;\r\n      this.removeListeners();\r\n      wrapper.removeChild(this.upperCanvasEl);\r\n      wrapper.removeChild(this.lowerCanvasEl);\r\n      this.contextCache = null;\r\n      this.contextTop = null;\r\n      ['upperCanvasEl', 'cacheCanvasEl'].forEach((function(element) {\r\n        fabric.util.cleanUpJsdomNode(this[element]);\r\n        this[element] = undefined;\r\n      }).bind(this));\r\n      if (wrapper.parentNode) {\r\n        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\r\n      }\r\n      delete this.wrapperEl;\r\n      fabric.StaticCanvas.prototype.dispose.call(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Clears all contexts (background, main, top) of an instance\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */\r\n    clear: function () {\r\n      // this.discardActiveGroup();\r\n      this.discardActiveObject();\r\n      this.clearContext(this.contextTop);\r\n      return this.callSuper('clear');\r\n    },\r\n\r\n    /**\r\n     * Draws objects' controls (borders/controls)\r\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\r\n     */\r\n    drawControls: function(ctx) {\r\n      var activeObject = this._activeObject;\r\n\r\n      if (activeObject) {\r\n        activeObject._renderControls(ctx);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _toObject: function(instance, methodName, propertiesToInclude) {\r\n      //If the object is part of the current selection group, it should\r\n      //be transformed appropriately\r\n      //i.e. it should be serialised as it would appear if the selection group\r\n      //were to be destroyed.\r\n      var originalProperties = this._realizeGroupTransformOnObject(instance),\r\n          object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);\r\n      //Undo the damage we did by changing all of its properties\r\n      this._unwindGroupTransformOnObject(instance, originalProperties);\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Realises an object's group transformation on it\r\n     * @private\r\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\r\n     * @returns the original values of instance which were changed\r\n     */\r\n    _realizeGroupTransformOnObject: function(instance) {\r\n      if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {\r\n        var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];\r\n        //Copy all the positionally relevant properties across now\r\n        var originalValues = {};\r\n        layoutProps.forEach(function(prop) {\r\n          originalValues[prop] = instance[prop];\r\n        });\r\n        fabric.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());\r\n        return originalValues;\r\n      }\r\n      else {\r\n        return null;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Restores the changed properties of instance\r\n     * @private\r\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\r\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\r\n     */\r\n    _unwindGroupTransformOnObject: function(instance, originalValues) {\r\n      if (originalValues) {\r\n        instance.set(originalValues);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _setSVGObject: function(markup, instance, reviver) {\r\n      //If the object is in a selection group, simulate what would happen to that\r\n      //object when the group is deselected\r\n      var originalProperties = this._realizeGroupTransformOnObject(instance);\r\n      this.callSuper('_setSVGObject', markup, instance, reviver);\r\n      this._unwindGroupTransformOnObject(instance, originalProperties);\r\n    },\r\n\r\n    setViewportTransform: function (vpt) {\r\n      if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\r\n        this._activeObject.clearContextTop();\r\n      }\r\n      fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\r\n    }\r\n  });\r\n\r\n  // copying static properties manually to work around Opera's bug,\r\n  // where \"prototype\" property is enumerable and overrides existing prototype\r\n  for (var prop in fabric.StaticCanvas) {\r\n    if (prop !== 'prototype') {\r\n      fabric.Canvas[prop] = fabric.StaticCanvas[prop];\r\n    }\r\n  }\r\n})();\r\n(function() {\r\n\r\n  var addListener = fabric.util.addListener,\r\n      removeListener = fabric.util.removeListener,\r\n      RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1,\r\n      addEventOptions = { passive: false };\r\n\r\n  function checkClick(e, value) {\r\n    return e.button && (e.button === value - 1);\r\n  }\r\n\r\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n    /**\r\n     * Contains the id of the touch event that owns the fabric transform\r\n     * @type Number\r\n     * @private\r\n     */\r\n    mainTouchId: null,\r\n\r\n    /**\r\n     * Adds mouse listeners to canvas\r\n     * @private\r\n     */\r\n    _initEventListeners: function () {\r\n      // in case we initialized the class twice. This should not happen normally\r\n      // but in some kind of applications where the canvas element may be changed\r\n      // this is a workaround to having double listeners.\r\n      this.removeListeners();\r\n      this._bindEvents();\r\n      this.addOrRemove(addListener, 'add');\r\n    },\r\n\r\n    /**\r\n     * return an event prefix pointer or mouse.\r\n     * @private\r\n     */\r\n    _getEventPrefix: function () {\r\n      return this.enablePointerEvents ? 'pointer' : 'mouse';\r\n    },\r\n\r\n    addOrRemove: function(functor, eventjsFunctor) {\r\n      var canvasElement = this.upperCanvasEl,\r\n          eventTypePrefix = this._getEventPrefix();\r\n      functor(fabric.window, 'resize', this._onResize);\r\n      functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\r\n      functor(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n      functor(canvasElement, eventTypePrefix + 'out', this._onMouseOut);\r\n      functor(canvasElement, eventTypePrefix + 'enter', this._onMouseEnter);\r\n      functor(canvasElement, 'wheel', this._onMouseWheel);\r\n      functor(canvasElement, 'contextmenu', this._onContextMenu);\r\n      functor(canvasElement, 'dblclick', this._onDoubleClick);\r\n      functor(canvasElement, 'dragover', this._onDragOver);\r\n      functor(canvasElement, 'dragenter', this._onDragEnter);\r\n      functor(canvasElement, 'dragleave', this._onDragLeave);\r\n      functor(canvasElement, 'drop', this._onDrop);\r\n      if (!this.enablePointerEvents) {\r\n        functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);\r\n      }\r\n      if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {\r\n        eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);\r\n        eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);\r\n        eventjs[eventjsFunctor](canvasElement, 'orientation', this._onOrientationChange);\r\n        eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);\r\n        eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Removes all event listeners\r\n     */\r\n    removeListeners: function() {\r\n      this.addOrRemove(removeListener, 'remove');\r\n      // if you dispose on a mouseDown, before mouse up, you need to clean document to...\r\n      var eventTypePrefix = this._getEventPrefix();\r\n      removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n      removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _bindEvents: function() {\r\n      if (this.eventsBound) {\r\n        // for any reason we pass here twice we do not want to bind events twice.\r\n        return;\r\n      }\r\n      this._onMouseDown = this._onMouseDown.bind(this);\r\n      this._onTouchStart = this._onTouchStart.bind(this);\r\n      this._onMouseMove = this._onMouseMove.bind(this);\r\n      this._onMouseUp = this._onMouseUp.bind(this);\r\n      this._onTouchEnd = this._onTouchEnd.bind(this);\r\n      this._onResize = this._onResize.bind(this);\r\n      this._onGesture = this._onGesture.bind(this);\r\n      this._onDrag = this._onDrag.bind(this);\r\n      this._onShake = this._onShake.bind(this);\r\n      this._onLongPress = this._onLongPress.bind(this);\r\n      this._onOrientationChange = this._onOrientationChange.bind(this);\r\n      this._onMouseWheel = this._onMouseWheel.bind(this);\r\n      this._onMouseOut = this._onMouseOut.bind(this);\r\n      this._onMouseEnter = this._onMouseEnter.bind(this);\r\n      this._onContextMenu = this._onContextMenu.bind(this);\r\n      this._onDoubleClick = this._onDoubleClick.bind(this);\r\n      this._onDragOver = this._onDragOver.bind(this);\r\n      this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');\r\n      this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');\r\n      this._onDrop = this._onDrop.bind(this);\r\n      this.eventsBound = true;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js gesture\r\n     * @param {Event} [self] Inner Event object\r\n     */\r\n    _onGesture: function(e, self) {\r\n      this.__onTransformGesture && this.__onTransformGesture(e, self);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js drag\r\n     * @param {Event} [self] Inner Event object\r\n     */\r\n    _onDrag: function(e, self) {\r\n      this.__onDrag && this.__onDrag(e, self);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on wheel event\r\n     */\r\n    _onMouseWheel: function(e) {\r\n      this.__onMouseWheel(e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onMouseOut: function(e) {\r\n      var target = this._hoveredTarget;\r\n      this.fire('mouse:out', { target: target, e: e });\r\n      this._hoveredTarget = null;\r\n      target && target.fire('mouseout', { e: e });\r\n\r\n      var _this = this;\r\n      this._hoveredTargets.forEach(function(_target){\r\n        _this.fire('mouse:out', { target: target, e: e });\r\n        _target && target.fire('mouseout', { e: e });\r\n      });\r\n      this._hoveredTargets = [];\r\n\r\n      if (this._iTextInstances) {\r\n        this._iTextInstances.forEach(function(obj) {\r\n          if (obj.isEditing) {\r\n            obj.hiddenTextarea.focus();\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseenter\r\n     */\r\n    _onMouseEnter: function(e) {\r\n      // This find target and consequent 'mouse:over' is used to\r\n      // clear old instances on hovered target.\r\n      // calling findTarget has the side effect of killing target.__corner.\r\n      // as a short term fix we are not firing this if we are currently transforming.\r\n      // as a long term fix we need to separate the action of finding a target with the\r\n      // side effects we added to it.\r\n      if (!this._currentTransform && !this.findTarget(e)) {\r\n        this.fire('mouse:over', { target: null, e: e });\r\n        this._hoveredTarget = null;\r\n        this._hoveredTargets = [];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js orientation change\r\n     * @param {Event} [self] Inner Event object\r\n     */\r\n    _onOrientationChange: function(e, self) {\r\n      this.__onOrientationChange && this.__onOrientationChange(e, self);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js shake\r\n     * @param {Event} [self] Inner Event object\r\n     */\r\n    _onShake: function(e, self) {\r\n      this.__onShake && this.__onShake(e, self);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js shake\r\n     * @param {Event} [self] Inner Event object\r\n     */\r\n    _onLongPress: function(e, self) {\r\n      this.__onLongPress && this.__onLongPress(e, self);\r\n    },\r\n\r\n    /**\r\n     * prevent default to allow drop event to be fired\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js shake\r\n     */\r\n    _onDragOver: function(e) {\r\n      e.preventDefault();\r\n      var target = this._simpleEventHandler('dragover', e);\r\n      this._fireEnterLeaveEvents(target, e);\r\n    },\r\n\r\n    /**\r\n     * `drop:before` is a an event that allow you to schedule logic\r\n     * before the `drop` event. Prefer `drop` event always, but if you need\r\n     * to run some drop-disabling logic on an event, since there is no way\r\n     * to handle event handlers ordering, use `drop:before`\r\n     * @param {Event} e\r\n     */\r\n    _onDrop: function (e) {\r\n      this._simpleEventHandler('drop:before', e);\r\n      return this._simpleEventHandler('drop', e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onContextMenu: function (e) {\r\n      if (this.stopContextMenu) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onDoubleClick: function (e) {\r\n      this._cacheTransformEventData(e);\r\n      this._handleEvent(e, 'dblclick');\r\n      this._resetTransformEventData(e);\r\n    },\r\n\r\n    /**\r\n     * Return a the id of an event.\r\n     * returns either the pointerId or the identifier or 0 for the mouse event\r\n     * @private\r\n     * @param {Event} evt Event object\r\n     */\r\n    getPointerId: function(evt) {\r\n      var changedTouches = evt.changedTouches;\r\n\r\n      if (changedTouches) {\r\n        return changedTouches[0] && changedTouches[0].identifier;\r\n      }\r\n\r\n      if (this.enablePointerEvents) {\r\n        return evt.pointerId;\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    /**\r\n     * Determines if an event has the id of the event that is considered main\r\n     * @private\r\n     * @param {evt} event Event object\r\n     */\r\n    _isMainEvent: function(evt) {\r\n      if (evt.isPrimary === true) {\r\n        return true;\r\n      }\r\n      if (evt.isPrimary === false) {\r\n        return false;\r\n      }\r\n      if (evt.type === 'touchend' && evt.touches.length === 0) {\r\n        return true;\r\n      }\r\n      if (evt.changedTouches) {\r\n        return evt.changedTouches[0].identifier === this.mainTouchId;\r\n      }\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onTouchStart: function(e) {\r\n      e.preventDefault();\r\n      if (this.mainTouchId === null) {\r\n        this.mainTouchId = this.getPointerId(e);\r\n      }\r\n      this.__onMouseDown(e);\r\n      this._resetTransformEventData();\r\n      var canvasElement = this.upperCanvasEl,\r\n          eventTypePrefix = this._getEventPrefix();\r\n      addListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n      addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n      // Unbind mousedown to prevent double triggers from touch devices\r\n      removeListener(canvasElement, eventTypePrefix + 'down', this._onMouseDown);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onMouseDown: function (e) {\r\n      this.__onMouseDown(e);\r\n      this._resetTransformEventData();\r\n      var canvasElement = this.upperCanvasEl,\r\n          eventTypePrefix = this._getEventPrefix();\r\n      removeListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n      addListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n      addListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onTouchEnd: function(e) {\r\n      if (e.touches.length > 0) {\r\n        // if there are still touches stop here\r\n        return;\r\n      }\r\n      this.__onMouseUp(e);\r\n      this._resetTransformEventData();\r\n      this.mainTouchId = null;\r\n      var eventTypePrefix = this._getEventPrefix();\r\n      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);\r\n      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);\r\n      var _this = this;\r\n      if (this._willAddMouseDown) {\r\n        clearTimeout(this._willAddMouseDown);\r\n      }\r\n      this._willAddMouseDown = setTimeout(function() {\r\n        // Wait 400ms before rebinding mousedown to prevent double triggers\r\n        // from touch devices\r\n        addListener(_this.upperCanvasEl, eventTypePrefix + 'down', _this._onMouseDown);\r\n        _this._willAddMouseDown = 0;\r\n      }, 400);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseup\r\n     */\r\n    _onMouseUp: function (e) {\r\n      this.__onMouseUp(e);\r\n      this._resetTransformEventData();\r\n      var canvasElement = this.upperCanvasEl,\r\n          eventTypePrefix = this._getEventPrefix();\r\n      if (this._isMainEvent(e)) {\r\n        removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);\r\n        removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n        addListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousemove\r\n     */\r\n    _onMouseMove: function (e) {\r\n      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\r\n      this.__onMouseMove(e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _onResize: function () {\r\n      this.calcOffset();\r\n    },\r\n\r\n    /**\r\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\r\n     * @private\r\n     * @param {Object} target\r\n     */\r\n    _shouldRender: function(target) {\r\n      var activeObject = this._activeObject;\r\n\r\n      if (\r\n        !!activeObject !== !!target ||\r\n        (activeObject && target && (activeObject !== target))\r\n      ) {\r\n        // this covers: switch of target, from target to no target, selection of target\r\n        // multiSelection with key and mouse\r\n        return true;\r\n      }\r\n      else if (activeObject && activeObject.isEditing) {\r\n        // if we mouse up/down over a editing textbox a cursor change,\r\n        // there is no need to re render\r\n        return false;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Method that defines the actions when mouse is released on canvas.\r\n     * The method resets the currentTransform parameters, store the image corner\r\n     * position in the image object and render the canvas on top.\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseup\r\n     */\r\n    __onMouseUp: function (e) {\r\n      var target, transform = this._currentTransform,\r\n          groupSelector = this._groupSelector, shouldRender = false,\r\n          isClick = (!groupSelector || (groupSelector.left === 0 && groupSelector.top === 0));\r\n      this._cacheTransformEventData(e);\r\n      target = this._target;\r\n      this._handleEvent(e, 'up:before');\r\n      // if right/middle click just fire events and return\r\n      // target undefined will make the _handleEvent search the target\r\n      if (checkClick(e, RIGHT_CLICK)) {\r\n        if (this.fireRightClick) {\r\n          this._handleEvent(e, 'up', RIGHT_CLICK, isClick);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (checkClick(e, MIDDLE_CLICK)) {\r\n        if (this.fireMiddleClick) {\r\n          this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);\r\n        }\r\n        this._resetTransformEventData();\r\n        return;\r\n      }\r\n\r\n      if (this.isDrawingMode && this._isCurrentlyDrawing) {\r\n        this._onMouseUpInDrawingMode(e);\r\n        return;\r\n      }\r\n\r\n      if (!this._isMainEvent(e)) {\r\n        return;\r\n      }\r\n      if (transform) {\r\n        this._finalizeCurrentTransform(e);\r\n        shouldRender = transform.actionPerformed;\r\n      }\r\n      if (!isClick) {\r\n        var targetWasActive = target === this._activeObject;\r\n        this._maybeGroupObjects(e);\r\n        if (!shouldRender) {\r\n          shouldRender = (\r\n            this._shouldRender(target) ||\r\n            (!targetWasActive && target === this._activeObject)\r\n          );\r\n        }\r\n      }\r\n      var corner, pointer;\r\n      if (target) {\r\n        corner = target._findTargetCorner(\r\n          this.getPointer(e, true),\r\n          fabric.util.isTouchEvent(e)\r\n        );\r\n        if (target.selectable && target !== this._activeObject && target.activeOn === 'up') {\r\n          this.setActiveObject(target, e);\r\n          shouldRender = true;\r\n        }\r\n        else {\r\n          var control = target.controls[corner],\r\n              mouseUpHandler = control && control.getMouseUpHandler(e, target, control);\r\n          if (mouseUpHandler) {\r\n            pointer = this.getPointer(e);\r\n            mouseUpHandler(e, transform, pointer.x, pointer.y);\r\n          }\r\n        }\r\n        target.isMoving = false;\r\n      }\r\n      // if we are ending up a transform on a different control or a new object\r\n      // fire the original mouse up from the corner that started the transform\r\n      if (transform && (transform.target !== target || transform.corner !== corner)) {\r\n        var originalControl = transform.target && transform.target.controls[transform.corner],\r\n            originalMouseUpHandler = originalControl && originalControl.getMouseUpHandler(e, target, control);\r\n        pointer = pointer || this.getPointer(e);\r\n        originalMouseUpHandler && originalMouseUpHandler(e, transform, pointer.x, pointer.y);\r\n      }\r\n      this._setCursorFromEvent(e, target);\r\n      this._handleEvent(e, 'up', LEFT_CLICK, isClick);\r\n      this._groupSelector = null;\r\n      this._currentTransform = null;\r\n      // reset the target information about which corner is selected\r\n      target && (target.__corner = 0);\r\n      if (shouldRender) {\r\n        this.requestRenderAll();\r\n      }\r\n      else if (!isClick) {\r\n        this.renderTop();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * Handle event firing for target and subtargets\r\n     * @param {Event} e event from mouse\r\n     * @param {String} eventType event to fire (up, down or move)\r\n     * @return {Fabric.Object} target return the the target found, for internal reasons.\r\n     */\r\n    _simpleEventHandler: function(eventType, e) {\r\n      var target = this.findTarget(e),\r\n          targets = this.targets,\r\n          options = {\r\n            e: e,\r\n            target: target,\r\n            subTargets: targets,\r\n          };\r\n      this.fire(eventType, options);\r\n      target && target.fire(eventType, options);\r\n      if (!targets) {\r\n        return target;\r\n      }\r\n      for (var i = 0; i < targets.length; i++) {\r\n        targets[i].fire(eventType, options);\r\n      }\r\n      return target;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * Handle event firing for target and subtargets\r\n     * @param {Event} e event from mouse\r\n     * @param {String} eventType event to fire (up, down or move)\r\n     * @param {fabric.Object} targetObj receiving event\r\n     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\r\n     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\r\n     */\r\n    _handleEvent: function(e, eventType, button, isClick) {\r\n      var target = this._target,\r\n          targets = this.targets || [],\r\n          options = {\r\n            e: e,\r\n            target: target,\r\n            subTargets: targets,\r\n            button: button || LEFT_CLICK,\r\n            isClick: isClick || false,\r\n            pointer: this._pointer,\r\n            absolutePointer: this._absolutePointer,\r\n            transform: this._currentTransform\r\n          };\r\n      if (eventType === 'up') {\r\n        options.currentTarget = this.findTarget(e);\r\n        options.currentSubTargets = this.targets;\r\n      }\r\n      this.fire('mouse:' + eventType, options);\r\n      target && target.fire('mouse' + eventType, options);\r\n      for (var i = 0; i < targets.length; i++) {\r\n        targets[i].fire('mouse' + eventType, options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\r\n     */\r\n    _finalizeCurrentTransform: function(e) {\r\n\r\n      var transform = this._currentTransform,\r\n          target = transform.target,\r\n          options = {\r\n            e: e,\r\n            target: target,\r\n            transform: transform,\r\n            action: transform.action,\r\n          };\r\n\r\n      if (target._scaling) {\r\n        target._scaling = false;\r\n      }\r\n\r\n      target.setCoords();\r\n\r\n      if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {\r\n        this._fire('modified', options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    _onMouseDownInDrawingMode: function(e) {\r\n      this._isCurrentlyDrawing = true;\r\n      if (this.getActiveObject()) {\r\n        this.discardActiveObject(e).requestRenderAll();\r\n      }\r\n      var pointer = this.getPointer(e);\r\n      this.freeDrawingBrush.onMouseDown(pointer, { e: e, pointer: pointer });\r\n      this._handleEvent(e, 'down');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousemove\r\n     */\r\n    _onMouseMoveInDrawingMode: function(e) {\r\n      if (this._isCurrentlyDrawing) {\r\n        var pointer = this.getPointer(e);\r\n        this.freeDrawingBrush.onMouseMove(pointer, { e: e, pointer: pointer });\r\n      }\r\n      this.setCursor(this.freeDrawingCursor);\r\n      this._handleEvent(e, 'move');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseup\r\n     */\r\n    _onMouseUpInDrawingMode: function(e) {\r\n      var pointer = this.getPointer(e);\r\n      this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: e, pointer: pointer });\r\n      this._handleEvent(e, 'up');\r\n    },\r\n\r\n    /**\r\n     * Method that defines the actions when mouse is clicked on canvas.\r\n     * The method inits the currentTransform parameters and renders all the\r\n     * canvas so the current image can be placed on the top canvas and the rest\r\n     * in on the container one.\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */\r\n    __onMouseDown: function (e) {\r\n      this._cacheTransformEventData(e);\r\n      this._handleEvent(e, 'down:before');\r\n      var target = this._target;\r\n      // if right click just fire events\r\n      if (checkClick(e, RIGHT_CLICK)) {\r\n        if (this.fireRightClick) {\r\n          this._handleEvent(e, 'down', RIGHT_CLICK);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (checkClick(e, MIDDLE_CLICK)) {\r\n        if (this.fireMiddleClick) {\r\n          this._handleEvent(e, 'down', MIDDLE_CLICK);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (this.isDrawingMode) {\r\n        this._onMouseDownInDrawingMode(e);\r\n        return;\r\n      }\r\n\r\n      if (!this._isMainEvent(e)) {\r\n        return;\r\n      }\r\n\r\n      // ignore if some object is being transformed at this moment\r\n      if (this._currentTransform) {\r\n        return;\r\n      }\r\n\r\n      var pointer = this._pointer;\r\n      // save pointer for check in __onMouseUp event\r\n      this._previousPointer = pointer;\r\n      var shouldRender = this._shouldRender(target),\r\n          shouldGroup = this._shouldGroup(e, target);\r\n      if (this._shouldClearSelection(e, target)) {\r\n        this.discardActiveObject(e);\r\n      }\r\n      else if (shouldGroup) {\r\n        this._handleGrouping(e, target);\r\n        target = this._activeObject;\r\n      }\r\n\r\n      if (this.selection && (!target ||\r\n        (!target.selectable && !target.isEditing && target !== this._activeObject))) {\r\n        this._groupSelector = {\r\n          ex: this._absolutePointer.x,\r\n          ey: this._absolutePointer.y,\r\n          top: 0,\r\n          left: 0\r\n        };\r\n      }\r\n\r\n      if (target) {\r\n        var alreadySelected = target === this._activeObject;\r\n        if (target.selectable && target.activeOn === 'down') {\r\n          this.setActiveObject(target, e);\r\n        }\r\n        var corner = target._findTargetCorner(\r\n          this.getPointer(e, true),\r\n          fabric.util.isTouchEvent(e)\r\n        );\r\n        target.__corner = corner;\r\n        if (target === this._activeObject && (corner || !shouldGroup)) {\r\n          this._setupCurrentTransform(e, target, alreadySelected);\r\n          var control = target.controls[corner],\r\n              pointer = this.getPointer(e),\r\n              mouseDownHandler = control && control.getMouseDownHandler(e, target, control);\r\n          if (mouseDownHandler) {\r\n            mouseDownHandler(e, this._currentTransform, pointer.x, pointer.y);\r\n          }\r\n        }\r\n      }\r\n      this._handleEvent(e, 'down');\r\n      // we must renderAll so that we update the visuals\r\n      (shouldRender || shouldGroup) && this.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * reset cache form common information needed during event processing\r\n     * @private\r\n     */\r\n    _resetTransformEventData: function() {\r\n      this._target = null;\r\n      this._pointer = null;\r\n      this._absolutePointer = null;\r\n    },\r\n\r\n    /**\r\n     * Cache common information needed during event processing\r\n     * @private\r\n     * @param {Event} e Event object fired on event\r\n     */\r\n    _cacheTransformEventData: function(e) {\r\n      // reset in order to avoid stale caching\r\n      this._resetTransformEventData();\r\n      this._pointer = this.getPointer(e, true);\r\n      this._absolutePointer = this.restorePointerVpt(this._pointer);\r\n      this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _beforeTransform: function(e) {\r\n      var t = this._currentTransform;\r\n      this.stateful && t.target.saveState();\r\n      this.fire('before:transform', {\r\n        e: e,\r\n        transform: t,\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Method that defines the actions when mouse is hovering the canvas.\r\n     * The currentTransform parameter will define whether the user is rotating/scaling/translating\r\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\r\n     * all any other type of action.\r\n     * In case of an image transformation only the top canvas will be rendered.\r\n     * @private\r\n     * @param {Event} e Event object fired on mousemove\r\n     */\r\n    __onMouseMove: function (e) {\r\n      this._handleEvent(e, 'move:before');\r\n      this._cacheTransformEventData(e);\r\n      var target, pointer;\r\n\r\n      if (this.isDrawingMode) {\r\n        this._onMouseMoveInDrawingMode(e);\r\n        return;\r\n      }\r\n\r\n      if (!this._isMainEvent(e)) {\r\n        return;\r\n      }\r\n\r\n      var groupSelector = this._groupSelector;\r\n\r\n      // We initially clicked in an empty area, so we draw a box for multiple selection\r\n      if (groupSelector) {\r\n        pointer = this._absolutePointer;\r\n\r\n        groupSelector.left = pointer.x - groupSelector.ex;\r\n        groupSelector.top = pointer.y - groupSelector.ey;\r\n\r\n        this.renderTop();\r\n      }\r\n      else if (!this._currentTransform) {\r\n        target = this.findTarget(e) || null;\r\n        this._setCursorFromEvent(e, target);\r\n        this._fireOverOutEvents(target, e);\r\n      }\r\n      else {\r\n        this._transformObject(e);\r\n      }\r\n      this._handleEvent(e, 'move');\r\n      this._resetTransformEventData();\r\n    },\r\n\r\n    /**\r\n     * Manage the mouseout, mouseover events for the fabric object on the canvas\r\n     * @param {Fabric.Object} target the target where the target from the mousemove event\r\n     * @param {Event} e Event object fired on mousemove\r\n     * @private\r\n     */\r\n    _fireOverOutEvents: function(target, e) {\r\n      var _hoveredTarget = this._hoveredTarget,\r\n          _hoveredTargets = this._hoveredTargets, targets = this.targets,\r\n          length = Math.max(_hoveredTargets.length, targets.length);\r\n\r\n      this.fireSyntheticInOutEvents(target, e, {\r\n        oldTarget: _hoveredTarget,\r\n        evtOut: 'mouseout',\r\n        canvasEvtOut: 'mouse:out',\r\n        evtIn: 'mouseover',\r\n        canvasEvtIn: 'mouse:over',\r\n      });\r\n      for (var i = 0; i < length; i++){\r\n        this.fireSyntheticInOutEvents(targets[i], e, {\r\n          oldTarget: _hoveredTargets[i],\r\n          evtOut: 'mouseout',\r\n          evtIn: 'mouseover',\r\n        });\r\n      }\r\n      this._hoveredTarget = target;\r\n      this._hoveredTargets = this.targets.concat();\r\n    },\r\n\r\n    /**\r\n     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\r\n     * @param {Fabric.Object} target the target where the target from the onDrag event\r\n     * @param {Event} e Event object fired on ondrag\r\n     * @private\r\n     */\r\n    _fireEnterLeaveEvents: function(target, e) {\r\n      var _draggedoverTarget = this._draggedoverTarget,\r\n          _hoveredTargets = this._hoveredTargets, targets = this.targets,\r\n          length = Math.max(_hoveredTargets.length, targets.length);\r\n\r\n      this.fireSyntheticInOutEvents(target, e, {\r\n        oldTarget: _draggedoverTarget,\r\n        evtOut: 'dragleave',\r\n        evtIn: 'dragenter',\r\n      });\r\n      for (var i = 0; i < length; i++) {\r\n        this.fireSyntheticInOutEvents(targets[i], e, {\r\n          oldTarget: _hoveredTargets[i],\r\n          evtOut: 'dragleave',\r\n          evtIn: 'dragenter',\r\n        });\r\n      }\r\n      this._draggedoverTarget = target;\r\n    },\r\n\r\n    /**\r\n     * Manage the synthetic in/out events for the fabric objects on the canvas\r\n     * @param {Fabric.Object} target the target where the target from the supported events\r\n     * @param {Event} e Event object fired\r\n     * @param {Object} config configuration for the function to work\r\n     * @param {String} config.targetName property on the canvas where the old target is stored\r\n     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\r\n     * @param {String} config.evtOut name of the event to fire for out\r\n     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\r\n     * @param {String} config.evtIn name of the event to fire for in\r\n     * @private\r\n     */\r\n    fireSyntheticInOutEvents: function(target, e, config) {\r\n      var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires,\r\n          targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\r\n      if (targetChanged) {\r\n        inOpt = { e: e, target: target, previousTarget: oldTarget };\r\n        outOpt = { e: e, target: oldTarget, nextTarget: target };\r\n      }\r\n      inFires = target && targetChanged;\r\n      outFires = oldTarget && targetChanged;\r\n      if (outFires) {\r\n        canvasEvtOut && this.fire(canvasEvtOut, outOpt);\r\n        oldTarget.fire(config.evtOut, outOpt);\r\n      }\r\n      if (inFires) {\r\n        canvasEvtIn && this.fire(canvasEvtIn, inOpt);\r\n        target.fire(config.evtIn, inOpt);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Method that defines actions when an Event Mouse Wheel\r\n     * @param {Event} e Event object fired on mouseup\r\n     */\r\n    __onMouseWheel: function(e) {\r\n      this._cacheTransformEventData(e);\r\n      this._handleEvent(e, 'wheel');\r\n      this._resetTransformEventData();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event fired on mousemove\r\n     */\r\n    _transformObject: function(e) {\r\n      var pointer = this.getPointer(e),\r\n          transform = this._currentTransform;\r\n\r\n      transform.reset = false;\r\n      transform.shiftKey = e.shiftKey;\r\n      transform.altKey = e[this.centeredKey];\r\n\r\n      this._performTransformAction(e, transform, pointer);\r\n      transform.actionPerformed && this.requestRenderAll();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _performTransformAction: function(e, transform, pointer) {\r\n      var x = pointer.x,\r\n          y = pointer.y,\r\n          action = transform.action,\r\n          actionPerformed = false,\r\n          actionHandler = transform.actionHandler;\r\n          // this object could be created from the function in the control handlers\r\n\r\n\r\n      if (actionHandler) {\r\n        actionPerformed = actionHandler(e, transform, x, y);\r\n      }\r\n      if (action === 'drag' && actionPerformed) {\r\n        transform.target.isMoving = true;\r\n        this.setCursor(transform.target.moveCursor || this.moveCursor);\r\n      }\r\n      transform.actionPerformed = transform.actionPerformed || actionPerformed;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _fire: fabric.controlsUtils.fireEvent,\r\n\r\n    /**\r\n     * Sets the cursor depending on where the canvas is being hovered.\r\n     * Note: very buggy in Opera\r\n     * @param {Event} e Event object\r\n     * @param {Object} target Object that the mouse is hovering, if so.\r\n     */\r\n    _setCursorFromEvent: function (e, target) {\r\n      if (!target) {\r\n        this.setCursor(this.defaultCursor);\r\n        return false;\r\n      }\r\n      var hoverCursor = target.hoverCursor || this.hoverCursor,\r\n          activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ?\r\n            this._activeObject : null,\r\n          // only show proper corner when group selection is not active\r\n          corner = (!activeSelection || !activeSelection.contains(target))\r\n          // here we call findTargetCorner always with undefined for the touch parameter.\r\n          // we assume that if you are using a cursor you do not need to interact with\r\n          // the bigger touch area.\r\n                    && target._findTargetCorner(this.getPointer(e, true));\r\n\r\n      if (!corner) {\r\n        if (target.subTargetCheck){\r\n          // hoverCursor should come from top-most subTarget,\r\n          // so we walk the array backwards\r\n          this.targets.concat().reverse().map(function(_target){\r\n            hoverCursor = _target.hoverCursor || hoverCursor;\r\n          });\r\n        }\r\n        this.setCursor(hoverCursor);\r\n      }\r\n      else {\r\n        this.setCursor(this.getCornerCursor(corner, target, e));\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    getCornerCursor: function(corner, target, e) {\r\n      var control = target.controls[corner];\r\n      return control.cursorStyleHandler(e, control, target);\r\n    }\r\n  });\r\n})();\r\n(function() {\r\n\r\n  var min = Math.min,\r\n      max = Math.max;\r\n\r\n  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     * @return {Boolean}\r\n     */\r\n    _shouldGroup: function(e, target) {\r\n      var activeObject = this._activeObject;\r\n      return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection &&\r\n            (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({ e: e });\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     */\r\n    _handleGrouping: function (e, target) {\r\n      var activeObject = this._activeObject;\r\n      // avoid multi select when shift click on a corner\r\n      if (activeObject.__corner) {\r\n        return;\r\n      }\r\n      if (target === activeObject) {\r\n        // if it's a group, find target again, using activeGroup objects\r\n        target = this.findTarget(e, true);\r\n        // if even object is not found or we are on activeObjectCorner, bail out\r\n        if (!target || !target.selectable) {\r\n          return;\r\n        }\r\n      }\r\n      if (activeObject && activeObject.type === 'activeSelection') {\r\n        this._updateActiveSelection(target, e);\r\n      }\r\n      else {\r\n        this._createActiveSelection(target, e);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _updateActiveSelection: function(target, e) {\r\n      var activeSelection = this._activeObject,\r\n          currentActiveObjects = activeSelection._objects.slice(0);\r\n      if (activeSelection.contains(target)) {\r\n        activeSelection.removeWithUpdate(target);\r\n        this._hoveredTarget = target;\r\n        this._hoveredTargets = this.targets.concat();\r\n        if (activeSelection.size() === 1) {\r\n          // activate last remaining object\r\n          this._setActiveObject(activeSelection.item(0), e);\r\n        }\r\n      }\r\n      else {\r\n        activeSelection.addWithUpdate(target);\r\n        this._hoveredTarget = activeSelection;\r\n        this._hoveredTargets = this.targets.concat();\r\n      }\r\n      this._fireSelectionEvents(currentActiveObjects, e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _createActiveSelection: function(target, e) {\r\n      var currentActives = this.getActiveObjects(), group = this._createGroup(target);\r\n      this._hoveredTarget = group;\r\n      // ISSUE 4115: should we consider subTargets here?\r\n      // this._hoveredTargets = [];\r\n      // this._hoveredTargets = this.targets.concat();\r\n      this._setActiveObject(group, e);\r\n      this._fireSelectionEvents(currentActives, e);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} target\r\n     */\r\n    _createGroup: function(target) {\r\n      var objects = this._objects,\r\n          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),\r\n          groupObjects = isActiveLower\r\n            ? [this._activeObject, target]\r\n            : [target, this._activeObject];\r\n      this._activeObject.isEditing && this._activeObject.exitEditing();\r\n      return new fabric.ActiveSelection(groupObjects, {\r\n        canvas: this\r\n      });\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Event} e mouse event\r\n     */\r\n    _groupSelectedObjects: function (e) {\r\n\r\n      var group = this._collectObjects(e),\r\n          aGroup;\r\n\r\n      // do not create group for 1 element only\r\n      if (group.length === 1) {\r\n        this.setActiveObject(group[0], e);\r\n      }\r\n      else if (group.length > 1) {\r\n        aGroup = new fabric.ActiveSelection(group.reverse(), {\r\n          canvas: this\r\n        });\r\n        this.setActiveObject(aGroup, e);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _collectObjects: function(e) {\r\n      var group = [],\r\n          currentObject,\r\n          x1 = this._groupSelector.ex,\r\n          y1 = this._groupSelector.ey,\r\n          x2 = x1 + this._groupSelector.left,\r\n          y2 = y1 + this._groupSelector.top,\r\n          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),\r\n          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),\r\n          allowIntersect = !this.selectionFullyContained,\r\n          isClick = x1 === x2 && y1 === y2;\r\n      // we iterate reverse order to collect top first in case of click.\r\n      for (var i = this._objects.length; i--; ) {\r\n        currentObject = this._objects[i];\r\n\r\n        if (!currentObject || !currentObject.selectable || !currentObject.visible) {\r\n          continue;\r\n        }\r\n\r\n        if ((allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true)) ||\r\n            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) ||\r\n            (allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true)) ||\r\n            (allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true))\r\n        ) {\r\n          group.push(currentObject);\r\n          // only add one object if it's a click\r\n          if (isClick) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (group.length > 1) {\r\n        group = group.filter(function(object) {\r\n          return !object.onSelect({ e: e });\r\n        });\r\n      }\r\n\r\n      return group;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _maybeGroupObjects: function(e) {\r\n      if (this.selection && this._groupSelector) {\r\n        this._groupSelectedObjects(e);\r\n      }\r\n      this.setCursor(this.defaultCursor);\r\n      // clear selection and current transformation\r\n      this._groupSelector = null;\r\n    }\r\n  });\r\n\r\n})();\r\n(function () {\r\n  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n    /**\r\n     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\r\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\r\n     * @example <caption>Generate jpeg dataURL with lower quality</caption>\r\n     * var dataURL = canvas.toDataURL({\r\n     *   format: 'jpeg',\r\n     *   quality: 0.8\r\n     * });\r\n     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\r\n     * var dataURL = canvas.toDataURL({\r\n     *   format: 'png',\r\n     *   left: 100,\r\n     *   top: 100,\r\n     *   width: 200,\r\n     *   height: 200\r\n     * });\r\n     * @example <caption>Generate double scaled png dataURL</caption>\r\n     * var dataURL = canvas.toDataURL({\r\n     *   format: 'png',\r\n     *   multiplier: 2\r\n     * });\r\n     */\r\n    toDataURL: function (options) {\r\n      options || (options = { });\r\n\r\n      var format = options.format || 'png',\r\n          quality = options.quality || 1,\r\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),\r\n          canvasEl = this.toCanvasElement(multiplier, options);\r\n      return fabric.util.toDataURL(canvasEl, format, quality);\r\n    },\r\n\r\n    /**\r\n     * Create a new HTMLCanvas element painted with the current canvas content.\r\n     * No need to resize the actual one or repaint it.\r\n     * Will transfer object ownership to a new canvas, paint it, and set everything back.\r\n     * This is an intermediary step used to get to a dataUrl but also it is useful to\r\n     * create quick image copies of a canvas without passing for the dataUrl string\r\n     * @param {Number} [multiplier] a zoom factor.\r\n     * @param {Object} [cropping] Cropping informations\r\n     * @param {Number} [cropping.left] Cropping left offset.\r\n     * @param {Number} [cropping.top] Cropping top offset.\r\n     * @param {Number} [cropping.width] Cropping width.\r\n     * @param {Number} [cropping.height] Cropping height.\r\n     */\r\n    toCanvasElement: function(multiplier, cropping) {\r\n      multiplier = multiplier || 1;\r\n      cropping = cropping || { };\r\n      var scaledWidth = (cropping.width || this.width) * multiplier,\r\n          scaledHeight = (cropping.height || this.height) * multiplier,\r\n          zoom = this.getZoom(),\r\n          originalWidth = this.width,\r\n          originalHeight = this.height,\r\n          newZoom = zoom * multiplier,\r\n          vp = this.viewportTransform,\r\n          translateX = (vp[4] - (cropping.left || 0)) * multiplier,\r\n          translateY = (vp[5] - (cropping.top || 0)) * multiplier,\r\n          originalInteractive = this.interactive,\r\n          newVp = [newZoom, 0, 0, newZoom, translateX, translateY],\r\n          originalRetina = this.enableRetinaScaling,\r\n          canvasEl = fabric.util.createCanvasElement(),\r\n          originalContextTop = this.contextTop;\r\n      canvasEl.width = scaledWidth;\r\n      canvasEl.height = scaledHeight;\r\n      this.contextTop = null;\r\n      this.enableRetinaScaling = false;\r\n      this.interactive = false;\r\n      this.viewportTransform = newVp;\r\n      this.width = scaledWidth;\r\n      this.height = scaledHeight;\r\n      this.calcViewportBoundaries();\r\n      this.renderCanvas(canvasEl.getContext('2d'), this._objects);\r\n      this.viewportTransform = vp;\r\n      this.width = originalWidth;\r\n      this.height = originalHeight;\r\n      this.calcViewportBoundaries();\r\n      this.interactive = originalInteractive;\r\n      this.enableRetinaScaling = originalRetina;\r\n      this.contextTop = originalContextTop;\r\n      return canvasEl;\r\n    },\r\n  });\r\n\r\n})();\r\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n  /**\r\n   * Populates canvas with data from the specified JSON.\r\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\r\n   * @param {String|Object} json JSON string or object\r\n   * @param {Function} callback Callback, invoked when json is parsed\r\n   *                            and corresponding objects (e.g: {@link fabric.Image})\r\n   *                            are initialized\r\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n   * @return {fabric.Canvas} instance\r\n   * @chainable\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\r\n   * @example <caption>loadFromJSON</caption>\r\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\r\n   * @example <caption>loadFromJSON with reviver</caption>\r\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\r\n   *   // `o` = json object\r\n   *   // `object` = fabric.Object instance\r\n   *   // ... do some stuff ...\r\n   * });\r\n   */\r\n  loadFromJSON: function (json, callback, reviver) {\r\n    if (!json) {\r\n      return;\r\n    }\r\n\r\n    // serialize if it wasn't already\r\n    var serialized = (typeof json === 'string')\r\n      ? JSON.parse(json)\r\n      : fabric.util.object.clone(json);\r\n\r\n    var _this = this,\r\n        clipPath = serialized.clipPath,\r\n        renderOnAddRemove = this.renderOnAddRemove;\r\n\r\n    this.renderOnAddRemove = false;\r\n\r\n    delete serialized.clipPath;\r\n\r\n    this._enlivenObjects(serialized.objects, function (enlivenedObjects) {\r\n      _this.clear();\r\n      _this._setBgOverlay(serialized, function () {\r\n        if (clipPath) {\r\n          _this._enlivenObjects([clipPath], function (enlivenedCanvasClip) {\r\n            _this.clipPath = enlivenedCanvasClip[0];\r\n            _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\r\n          });\r\n        }\r\n        else {\r\n          _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\r\n        }\r\n      });\r\n    }, reviver);\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object} serialized Object with background and overlay information\r\n   * @param {Array} restored canvas objects\r\n   * @param {Function} cached renderOnAddRemove callback\r\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n   */\r\n  __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {\r\n    var _this = this;\r\n    enlivenedObjects.forEach(function(obj, index) {\r\n      // we splice the array just in case some custom classes restored from JSON\r\n      // will add more object to canvas at canvas init.\r\n      _this.insertAt(obj, index);\r\n    });\r\n    this.renderOnAddRemove = renderOnAddRemove;\r\n    // remove parts i cannot set as options\r\n    delete serialized.objects;\r\n    delete serialized.backgroundImage;\r\n    delete serialized.overlayImage;\r\n    delete serialized.background;\r\n    delete serialized.overlay;\r\n    // this._initOptions does too many things to just\r\n    // call it. Normally loading an Object from JSON\r\n    // create the Object instance. Here the Canvas is\r\n    // already an instance and we are just loading things over it\r\n    this._setOptions(serialized);\r\n    this.renderAll();\r\n    callback && callback();\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object} serialized Object with background and overlay information\r\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n   */\r\n  _setBgOverlay: function(serialized, callback) {\r\n    var loaded = {\r\n      backgroundColor: false,\r\n      overlayColor: false,\r\n      backgroundImage: false,\r\n      overlayImage: false\r\n    };\r\n\r\n    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\r\n      callback && callback();\r\n      return;\r\n    }\r\n\r\n    var cbIfLoaded = function () {\r\n      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\r\n        callback && callback();\r\n      }\r\n    };\r\n\r\n    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);\r\n    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);\r\n    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);\r\n    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\r\n   * @param {(Object|String)} value Value to set\r\n   * @param {Object} loaded Set loaded property to true if property is set\r\n   * @param {Object} callback Callback function to invoke after property is set\r\n   */\r\n  __setBgOverlay: function(property, value, loaded, callback) {\r\n    var _this = this;\r\n\r\n    if (!value) {\r\n      loaded[property] = true;\r\n      callback && callback();\r\n      return;\r\n    }\r\n\r\n    if (property === 'backgroundImage' || property === 'overlayImage') {\r\n      fabric.util.enlivenObjects([value], function(enlivedObject){\r\n        _this[property] = enlivedObject[0];\r\n        loaded[property] = true;\r\n        callback && callback();\r\n      });\r\n    }\r\n    else {\r\n      this['set' + fabric.util.string.capitalize(property, true)](value, function() {\r\n        loaded[property] = true;\r\n        callback && callback();\r\n      });\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {Array} objects\r\n   * @param {Function} callback\r\n   * @param {Function} [reviver]\r\n   */\r\n  _enlivenObjects: function (objects, callback, reviver) {\r\n    if (!objects || objects.length === 0) {\r\n      callback && callback([]);\r\n      return;\r\n    }\r\n\r\n    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\r\n      callback && callback(enlivenedObjects);\r\n    }, null, reviver);\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} format\r\n   * @param {Function} callback\r\n   */\r\n  _toDataURL: function (format, callback) {\r\n    this.clone(function (clone) {\r\n      callback(clone.toDataURL(format));\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} format\r\n   * @param {Number} multiplier\r\n   * @param {Function} callback\r\n   */\r\n  _toDataURLWithMultiplier: function (format, multiplier, callback) {\r\n    this.clone(function (clone) {\r\n      callback(clone.toDataURLWithMultiplier(format, multiplier));\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Clones canvas instance\r\n   * @param {Object} [callback] Receives cloned instance as a first argument\r\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\r\n   */\r\n  clone: function (callback, properties) {\r\n    var data = JSON.stringify(this.toJSON(properties));\r\n    this.cloneWithoutData(function(clone) {\r\n      clone.loadFromJSON(data, function() {\r\n        callback && callback(clone);\r\n      });\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Clones canvas instance without cloning existing data.\r\n   * This essentially copies canvas dimensions, clipping properties, etc.\r\n   * but leaves data empty (so that you can populate it with your own)\r\n   * @param {Object} [callback] Receives cloned instance as a first argument\r\n   */\r\n  cloneWithoutData: function(callback) {\r\n    var el = fabric.util.createCanvasElement();\r\n\r\n    el.width = this.width;\r\n    el.height = this.height;\r\n\r\n    var clone = new fabric.Canvas(el);\r\n    if (this.backgroundImage) {\r\n      clone.setBackgroundImage(this.backgroundImage.src, function() {\r\n        clone.renderAll();\r\n        callback && callback(clone);\r\n      });\r\n      clone.backgroundImageOpacity = this.backgroundImageOpacity;\r\n      clone.backgroundImageStretch = this.backgroundImageStretch;\r\n    }\r\n    else {\r\n      callback && callback(clone);\r\n    }\r\n  }\r\n});\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      extend = fabric.util.object.extend,\r\n      clone = fabric.util.object.clone,\r\n      toFixed = fabric.util.toFixed,\r\n      capitalize = fabric.util.string.capitalize,\r\n      degreesToRadians = fabric.util.degreesToRadians,\r\n      objectCaching = !fabric.isLikelyNode,\r\n      ALIASING_LIMIT = 2;\r\n\r\n  if (fabric.Object) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Root object class from which all 2d shape classes inherit from\r\n   * @class fabric.Object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\r\n   * @see {@link fabric.Object#initialize} for constructor definition\r\n   *\r\n   * @fires added\r\n   * @fires removed\r\n   *\r\n   * @fires selected\r\n   * @fires deselected\r\n   * @fires modified\r\n   * @fires modified\r\n   * @fires moved\r\n   * @fires scaled\r\n   * @fires rotated\r\n   * @fires skewed\r\n   *\r\n   * @fires rotating\r\n   * @fires scaling\r\n   * @fires moving\r\n   * @fires skewing\r\n   *\r\n   * @fires mousedown\r\n   * @fires mouseup\r\n   * @fires mouseover\r\n   * @fires mouseout\r\n   * @fires mousewheel\r\n   * @fires mousedblclick\r\n   *\r\n   * @fires dragover\r\n   * @fires dragenter\r\n   * @fires dragleave\r\n   * @fires drop\r\n   */\r\n  fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Type of an object (rect, circle, path, etc.).\r\n     * Note that this property is meant to be read-only and not meant to be modified.\r\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\r\n     * @type String\r\n     * @default\r\n     */\r\n    type:                     'object',\r\n\r\n    /**\r\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\r\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n     * @type String\r\n     * @default\r\n     */\r\n    originX:                  'left',\r\n\r\n    /**\r\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\r\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n     * @type String\r\n     * @default\r\n     */\r\n    originY:                  'top',\r\n\r\n    /**\r\n     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\r\n     * @type Number\r\n     * @default\r\n     */\r\n    top:                      0,\r\n\r\n    /**\r\n     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\r\n     * @type Number\r\n     * @default\r\n     */\r\n    left:                     0,\r\n\r\n    /**\r\n     * Object width\r\n     * @type Number\r\n     * @default\r\n     */\r\n    width:                    0,\r\n\r\n    /**\r\n     * Object height\r\n     * @type Number\r\n     * @default\r\n     */\r\n    height:                   0,\r\n\r\n    /**\r\n     * Object scale factor (horizontal)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    scaleX:                   1,\r\n\r\n    /**\r\n     * Object scale factor (vertical)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    scaleY:                   1,\r\n\r\n    /**\r\n     * When true, an object is rendered as flipped horizontally\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    flipX:                    false,\r\n\r\n    /**\r\n     * When true, an object is rendered as flipped vertically\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    flipY:                    false,\r\n\r\n    /**\r\n     * Opacity of an object\r\n     * @type Number\r\n     * @default\r\n     */\r\n    opacity:                  1,\r\n\r\n    /**\r\n     * Angle of rotation of an object (in degrees)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    angle:                    0,\r\n\r\n    /**\r\n     * Angle of skew on x axes of an object (in degrees)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    skewX:                    0,\r\n\r\n    /**\r\n     * Angle of skew on y axes of an object (in degrees)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    skewY:                    0,\r\n\r\n    /**\r\n     * Size of object's controlling corners (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    cornerSize:               13,\r\n\r\n    /**\r\n     * Size of object's controlling corners when touch interaction is detected\r\n     * @type Number\r\n     * @default\r\n     */\r\n    touchCornerSize:               24,\r\n\r\n    /**\r\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    transparentCorners:       true,\r\n\r\n    /**\r\n     * Default cursor value used when hovering over this object on canvas\r\n     * @type String\r\n     * @default\r\n     */\r\n    hoverCursor:              null,\r\n\r\n    /**\r\n     * Default cursor value used when moving this object on canvas\r\n     * @type String\r\n     * @default\r\n     */\r\n    moveCursor:               null,\r\n\r\n    /**\r\n     * Padding between object and its controlling borders (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    padding:                  0,\r\n\r\n    /**\r\n     * Color of controlling borders of an object (when it's active)\r\n     * @type String\r\n     * @default\r\n     */\r\n    borderColor:              'rgb(178,204,255)',\r\n\r\n    /**\r\n     * Array specifying dash pattern of an object's borders (hasBorder must be true)\r\n     * @since 1.6.2\r\n     * @type Array\r\n     */\r\n    borderDashArray:          null,\r\n\r\n    /**\r\n     * Color of controlling corners of an object (when it's active)\r\n     * @type String\r\n     * @default\r\n     */\r\n    cornerColor:              'rgb(178,204,255)',\r\n\r\n    /**\r\n     * Color of controlling corners of an object (when it's active and transparentCorners false)\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */\r\n    cornerStrokeColor:        null,\r\n\r\n    /**\r\n     * Specify style of control, 'rect' or 'circle'\r\n     * @since 1.6.2\r\n     * @type String\r\n     */\r\n    cornerStyle:          'rect',\r\n\r\n    /**\r\n     * Array specifying dash pattern of an object's control (hasBorder must be true)\r\n     * @since 1.6.2\r\n     * @type Array\r\n     */\r\n    cornerDashArray:          null,\r\n\r\n    /**\r\n     * When true, this object will use center point as the origin of transformation\r\n     * when being scaled via the controls.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    centeredScaling:          false,\r\n\r\n    /**\r\n     * When true, this object will use center point as the origin of transformation\r\n     * when being rotated via the controls.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    centeredRotation:         true,\r\n\r\n    /**\r\n     * Color of object's fill\r\n     * takes css colors https://www.w3.org/TR/css-color-3/\r\n     * @type String\r\n     * @default\r\n     */\r\n    fill:                     'rgb(0,0,0)',\r\n\r\n    /**\r\n     * Fill rule used to fill an object\r\n     * accepted values are nonzero, evenodd\r\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\r\n     * @type String\r\n     * @default\r\n     */\r\n    fillRule:                 'nonzero',\r\n\r\n    /**\r\n     * Composite rule used for canvas globalCompositeOperation\r\n     * @type String\r\n     * @default\r\n     */\r\n    globalCompositeOperation: 'source-over',\r\n\r\n    /**\r\n     * Background color of an object.\r\n     * takes css colors https://www.w3.org/TR/css-color-3/\r\n     * @type String\r\n     * @default\r\n     */\r\n    backgroundColor:          '',\r\n\r\n    /**\r\n     * Selection Background color of an object. colored layer behind the object when it is active.\r\n     * does not mix good with globalCompositeOperation methods.\r\n     * @type String\r\n     * @default\r\n     */\r\n    selectionBackgroundColor:          '',\r\n\r\n    /**\r\n     * When defined, an object is rendered via stroke and this property specifies its color\r\n     * takes css colors https://www.w3.org/TR/css-color-3/\r\n     * @type String\r\n     * @default\r\n     */\r\n    stroke:                   null,\r\n\r\n    /**\r\n     * Width of a stroke used to render this object\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeWidth:              1,\r\n\r\n    /**\r\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\r\n     * @type Array\r\n     */\r\n    strokeDashArray:          null,\r\n\r\n    /**\r\n     * Line offset of an object's stroke\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeDashOffset: 0,\r\n\r\n    /**\r\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineCap:            'butt',\r\n\r\n    /**\r\n     * Corner style of an object's stroke (one of \"bevel\", \"round\", \"miter\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    strokeLineJoin:           'miter',\r\n\r\n    /**\r\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeMiterLimit:         4,\r\n\r\n    /**\r\n     * Shadow object representing shadow of this shape\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */\r\n    shadow:                   null,\r\n\r\n    /**\r\n     * Opacity of object's controlling borders when object is active and moving\r\n     * @type Number\r\n     * @default\r\n     */\r\n    borderOpacityWhenMoving:  0.4,\r\n\r\n    /**\r\n     * Scale factor of object's controlling borders\r\n     * bigger number will make a thicker border\r\n     * border is 1, so this is basically a border thickness\r\n     * since there is no way to change the border itself.\r\n     * @type Number\r\n     * @default\r\n     */\r\n    borderScaleFactor:        1,\r\n\r\n    /**\r\n     * Minimum allowed scale value of an object\r\n     * @type Number\r\n     * @default\r\n     */\r\n    minScaleLimit:            0,\r\n\r\n    /**\r\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\r\n     * But events still fire on it.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    selectable:               true,\r\n\r\n    /**\r\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    evented:                  true,\r\n\r\n    /**\r\n     * When set to `false`, an object is not rendered on canvas\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    visible:                  true,\r\n\r\n    /**\r\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    hasControls:              true,\r\n\r\n    /**\r\n     * When set to `false`, object's controlling borders are not rendered\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    hasBorders:               true,\r\n\r\n    /**\r\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    perPixelTargetFind:       false,\r\n\r\n    /**\r\n     * When `false`, default object's values are not included in its serialization\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    includeDefaultValues:     true,\r\n\r\n    /**\r\n     * When `true`, object horizontal movement is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockMovementX:            false,\r\n\r\n    /**\r\n     * When `true`, object vertical movement is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockMovementY:            false,\r\n\r\n    /**\r\n     * When `true`, object rotation is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockRotation:             false,\r\n\r\n    /**\r\n     * When `true`, object horizontal scaling is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockScalingX:             false,\r\n\r\n    /**\r\n     * When `true`, object vertical scaling is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockScalingY:             false,\r\n\r\n    /**\r\n     * When `true`, object horizontal skewing is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockSkewingX:             false,\r\n\r\n    /**\r\n     * When `true`, object vertical skewing is locked\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockSkewingY:             false,\r\n\r\n    /**\r\n     * When `true`, object cannot be flipped by scaling into negative values\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    lockScalingFlip:          false,\r\n\r\n    /**\r\n     * When `true`, object is not exported in OBJECT/JSON\r\n     * @since 1.6.3\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    excludeFromExport:        false,\r\n\r\n    /**\r\n     * When `true`, object is cached on an additional canvas.\r\n     * When `false`, object is not cached unless necessary ( clipPath )\r\n     * default to true\r\n     * @since 1.7.0\r\n     * @type Boolean\r\n     * @default true\r\n     */\r\n    objectCaching:            objectCaching,\r\n\r\n    /**\r\n     * When `true`, object properties are checked for cache invalidation. In some particular\r\n     * situation you may want this to be disabled ( spray brush, very big, groups)\r\n     * or if your application does not allow you to modify properties for groups child you want\r\n     * to disable it for groups.\r\n     * default to false\r\n     * since 1.7.0\r\n     * @type Boolean\r\n     * @default false\r\n     */\r\n    statefullCache:            false,\r\n\r\n    /**\r\n     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\r\n     * too much and will be redrawn with correct details at the end of scaling.\r\n     * this setting is performance and application dependant.\r\n     * default to true\r\n     * since 1.7.0\r\n     * @type Boolean\r\n     * @default true\r\n     */\r\n    noScaleCache:              true,\r\n\r\n    /**\r\n     * When `false`, the stoke width will scale with the object.\r\n     * When `true`, the stroke will always match the exact pixel size entered for stroke width.\r\n     * this Property does not work on Text classes or drawing call that uses strokeText,fillText methods\r\n     * default to false\r\n     * @since 2.6.0\r\n     * @type Boolean\r\n     * @default false\r\n     * @type Boolean\r\n     * @default false\r\n     */\r\n    strokeUniform:              false,\r\n\r\n    /**\r\n     * When set to `true`, object's cache will be rerendered next render call.\r\n     * since 1.7.0\r\n     * @type Boolean\r\n     * @default true\r\n     */\r\n    dirty:                true,\r\n\r\n    /**\r\n     * keeps the value of the last hovered corner during mouse move.\r\n     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\r\n     * It should be private, but there is no harm in using it as\r\n     * a read-only property.\r\n     * @type number|string|any\r\n     * @default 0\r\n     */\r\n    __corner: 0,\r\n\r\n    /**\r\n     * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\r\n     * @type String\r\n     * @default\r\n     */\r\n    paintFirst:           'fill',\r\n\r\n    /**\r\n     * When 'down', object is set to active on mousedown/touchstart\r\n     * When 'up', object is set to active on mouseup/touchend\r\n     * Experimental. Let's see if this breaks anything before supporting officially\r\n     * @private\r\n     * since 4.4.0\r\n     * @type String\r\n     * @default 'down'\r\n     */\r\n    activeOn:           'down',\r\n\r\n    /**\r\n     * List of properties to consider when checking if state\r\n     * of an object is changed (fabric.Object#hasStateChanged)\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */\r\n    stateProperties: (\r\n      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +\r\n      'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' +\r\n      'angle opacity fill globalCompositeOperation shadow visible backgroundColor ' +\r\n      'skewX skewY fillRule paintFirst clipPath strokeUniform'\r\n    ).split(' '),\r\n\r\n    /**\r\n     * List of properties to consider when checking if cache needs refresh\r\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n     * and refreshed at the next render\r\n     * @type Array\r\n     */\r\n    cacheProperties: (\r\n      'fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform' +\r\n      ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath'\r\n    ).split(' '),\r\n\r\n    /**\r\n     * List of properties to consider for animating colors.\r\n     * @type Array\r\n     */\r\n    colorProperties: (\r\n      'fill stroke backgroundColor'\r\n    ).split(' '),\r\n\r\n    /**\r\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n     * the clipPath object gets used when the object has rendered, and the context is placed in the center\r\n     * of the object cacheCanvas.\r\n     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\r\n     * @type fabric.Object\r\n     */\r\n    clipPath: undefined,\r\n\r\n    /**\r\n     * Meaningful ONLY when the object is used as clipPath.\r\n     * if true, the clipPath will make the object clip to the outside of the clipPath\r\n     * since 2.4.0\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n    inverted: false,\r\n\r\n    /**\r\n     * Meaningful ONLY when the object is used as clipPath.\r\n     * if true, the clipPath will have its top and left relative to canvas, and will\r\n     * not be influenced by the object transform. This will make the clipPath relative\r\n     * to the canvas, but clipping just a particular object.\r\n     * WARNING this is beta, this feature may change or be renamed.\r\n     * since 2.4.0\r\n     * @type boolean\r\n     * @default false\r\n     */\r\n    absolutePositioned: false,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      if (options) {\r\n        this.setOptions(options);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Create a the canvas used to keep the cached copy of the object\r\n     * @private\r\n     */\r\n    _createCacheCanvas: function() {\r\n      this._cacheProperties = {};\r\n      this._cacheCanvas = fabric.util.createCanvasElement();\r\n      this._cacheContext = this._cacheCanvas.getContext('2d');\r\n      this._updateCacheCanvas();\r\n      // if canvas gets created, is empty, so dirty.\r\n      this.dirty = true;\r\n    },\r\n\r\n    /**\r\n     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\r\n     * and each side do not cross fabric.cacheSideLimit\r\n     * those numbers are configurable so that you can get as much detail as you want\r\n     * making bargain with performances.\r\n     * @param {Object} dims\r\n     * @param {Object} dims.width width of canvas\r\n     * @param {Object} dims.height height of canvas\r\n     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.width width of canvas\r\n     * @return {Object}.height height of canvas\r\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     */\r\n    _limitCacheSize: function(dims) {\r\n      var perfLimitSizeTotal = fabric.perfLimitSizeTotal,\r\n          width = dims.width, height = dims.height,\r\n          max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\r\n      if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\r\n        if (width < min) {\r\n          dims.width = min;\r\n        }\r\n        if (height < min) {\r\n          dims.height = min;\r\n        }\r\n        return dims;\r\n      }\r\n      var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),\r\n          capValue = fabric.util.capValue,\r\n          x = capValue(min, limitedDims.x, max),\r\n          y = capValue(min, limitedDims.y, max);\r\n      if (width > x) {\r\n        dims.zoomX /= width / x;\r\n        dims.width = x;\r\n        dims.capped = true;\r\n      }\r\n      if (height > y) {\r\n        dims.zoomY /= height / y;\r\n        dims.height = y;\r\n        dims.capped = true;\r\n      }\r\n      return dims;\r\n    },\r\n\r\n    /**\r\n     * Return the dimension and the zoom level needed to create a cache canvas\r\n     * big enough to host the object to be cached.\r\n     * @private\r\n     * @return {Object}.x width of object to be cached\r\n     * @return {Object}.y height of object to be cached\r\n     * @return {Object}.width width of canvas\r\n     * @return {Object}.height height of canvas\r\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     */\r\n    _getCacheCanvasDimensions: function() {\r\n      var objectScale = this.getTotalObjectScaling(),\r\n          // caculate dimensions without skewing\r\n          dim = this._getTransformedDimensions(0, 0),\r\n          neededX = dim.x * objectScale.scaleX / this.scaleX,\r\n          neededY = dim.y * objectScale.scaleY / this.scaleY;\r\n      return {\r\n        // for sure this ALIASING_LIMIT is slightly creating problem\r\n        // in situation in which the cache canvas gets an upper limit\r\n        // also objectScale contains already scaleX and scaleY\r\n        width: neededX + ALIASING_LIMIT,\r\n        height: neededY + ALIASING_LIMIT,\r\n        zoomX: objectScale.scaleX,\r\n        zoomY: objectScale.scaleY,\r\n        x: neededX,\r\n        y: neededY\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Update width and height of the canvas for cache\r\n     * returns true or false if canvas needed resize.\r\n     * @private\r\n     * @return {Boolean} true if the canvas has been resized\r\n     */\r\n    _updateCacheCanvas: function() {\r\n      var targetCanvas = this.canvas;\r\n      if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\r\n        var target = targetCanvas._currentTransform.target,\r\n            action = targetCanvas._currentTransform.action;\r\n        if (this === target && action.slice && action.slice(0, 5) === 'scale') {\r\n          return false;\r\n        }\r\n      }\r\n      var canvas = this._cacheCanvas,\r\n          dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n          minCacheSize = fabric.minCacheSideLimit,\r\n          width = dims.width, height = dims.height, drawingWidth, drawingHeight,\r\n          zoomX = dims.zoomX, zoomY = dims.zoomY,\r\n          dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,\r\n          zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,\r\n          shouldRedraw = dimensionsChanged || zoomChanged,\r\n          additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\r\n      if (dimensionsChanged) {\r\n        var canvasWidth = this._cacheCanvas.width,\r\n            canvasHeight = this._cacheCanvas.height,\r\n            sizeGrowing = width > canvasWidth || height > canvasHeight,\r\n            sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) &&\r\n              canvasWidth > minCacheSize && canvasHeight > minCacheSize;\r\n        shouldResizeCanvas = sizeGrowing || sizeShrinking;\r\n        if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\r\n          additionalWidth = width * 0.1;\r\n          additionalHeight = height * 0.1;\r\n        }\r\n      }\r\n      if (this instanceof fabric.Text && this.path) {\r\n        shouldRedraw = true;\r\n        shouldResizeCanvas = true;\r\n        additionalWidth += this.getHeightOfLine(0) * this.zoomX;\r\n        additionalHeight += this.getHeightOfLine(0) * this.zoomY;\r\n      }\r\n      if (shouldRedraw) {\r\n        if (shouldResizeCanvas) {\r\n          canvas.width = Math.ceil(width + additionalWidth);\r\n          canvas.height = Math.ceil(height + additionalHeight);\r\n        }\r\n        else {\r\n          this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\r\n          this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n        drawingWidth = dims.x / 2;\r\n        drawingHeight = dims.y / 2;\r\n        this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\r\n        this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\r\n        this.cacheWidth = width;\r\n        this.cacheHeight = height;\r\n        this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\r\n        this._cacheContext.scale(zoomX, zoomY);\r\n        this.zoomX = zoomX;\r\n        this.zoomY = zoomY;\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Sets object's properties from options\r\n     * @param {Object} [options] Options object\r\n     */\r\n    setOptions: function(options) {\r\n      this._setOptions(options);\r\n      this._initGradient(options.fill, 'fill');\r\n      this._initGradient(options.stroke, 'stroke');\r\n      this._initPattern(options.fill, 'fill');\r\n      this._initPattern(options.stroke, 'stroke');\r\n    },\r\n\r\n    /**\r\n     * Transforms context when rendering an object\r\n     * @param {CanvasRenderingContext2D} ctx Context\r\n     */\r\n    transform: function(ctx) {\r\n      var needFullTransform = (this.group && !this.group._transformDone) ||\r\n         (this.group && this.canvas && ctx === this.canvas.contextTop);\r\n      var m = this.calcTransformMatrix(!needFullTransform);\r\n      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n    },\r\n\r\n    /**\r\n     * Returns an object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,\r\n\r\n          object = {\r\n            type:                     this.type,\r\n            version:                  fabric.version,\r\n            originX:                  this.originX,\r\n            originY:                  this.originY,\r\n            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),\r\n            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),\r\n            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),\r\n            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),\r\n            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,\r\n            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,\r\n            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\r\n            strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\r\n            strokeLineCap:            this.strokeLineCap,\r\n            strokeDashOffset:         this.strokeDashOffset,\r\n            strokeLineJoin:           this.strokeLineJoin,\r\n            strokeUniform:            this.strokeUniform,\r\n            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\r\n            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),\r\n            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),\r\n            angle:                    toFixed(this.angle, NUM_FRACTION_DIGITS),\r\n            flipX:                    this.flipX,\r\n            flipY:                    this.flipY,\r\n            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),\r\n            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,\r\n            visible:                  this.visible,\r\n            backgroundColor:          this.backgroundColor,\r\n            fillRule:                 this.fillRule,\r\n            paintFirst:               this.paintFirst,\r\n            globalCompositeOperation: this.globalCompositeOperation,\r\n            skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),\r\n            skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS),\r\n          };\r\n\r\n      if (this.clipPath && !this.clipPath.excludeFromExport) {\r\n        object.clipPath = this.clipPath.toObject(propertiesToInclude);\r\n        object.clipPath.inverted = this.clipPath.inverted;\r\n        object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\r\n      }\r\n\r\n      fabric.util.populateWithProperties(this, object, propertiesToInclude);\r\n      if (!this.includeDefaultValues) {\r\n        object = this._removeDefaultValues(object);\r\n      }\r\n\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Returns (dataless) object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toDatalessObject: function(propertiesToInclude) {\r\n      // will be overwritten by subclasses\r\n      return this.toObject(propertiesToInclude);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} object\r\n     */\r\n    _removeDefaultValues: function(object) {\r\n      var prototype = fabric.util.getKlass(object.type).prototype,\r\n          stateProperties = prototype.stateProperties;\r\n      stateProperties.forEach(function(prop) {\r\n        if (prop === 'left' || prop === 'top') {\r\n          return;\r\n        }\r\n        if (object[prop] === prototype[prop]) {\r\n          delete object[prop];\r\n        }\r\n        // basically a check for [] === []\r\n        if (Array.isArray(object[prop]) && Array.isArray(prototype[prop])\r\n          && object[prop].length === 0 && prototype[prop].length === 0) {\r\n          delete object[prop];\r\n        }\r\n      });\r\n\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Returns a string representation of an instance\r\n     * @return {String}\r\n     */\r\n    toString: function() {\r\n      return '#<fabric.' + capitalize(this.type) + '>';\r\n    },\r\n\r\n    /**\r\n     * Return the object scale factor counting also the group scaling\r\n     * @return {Object} object with scaleX and scaleY properties\r\n     */\r\n    getObjectScaling: function() {\r\n      // if the object is a top level one, on the canvas, we go for simple aritmetic\r\n      // otherwise the complex method with angles will return approximations and decimals\r\n      // and will likely kill the cache when not needed\r\n      // https://github.com/fabricjs/fabric.js/issues/7157\r\n      if (!this.group) {\r\n        return {\r\n          scaleX: this.scaleX,\r\n          scaleY: this.scaleY,\r\n        };\r\n      }\r\n      // if we are inside a group total zoom calculation is complex, we defer to generic matrices\r\n      var options = fabric.util.qrDecompose(this.calcTransformMatrix());\r\n      return { scaleX: Math.abs(options.scaleX), scaleY: Math.abs(options.scaleY) };\r\n    },\r\n\r\n    /**\r\n     * Return the object scale factor counting also the group scaling, zoom and retina\r\n     * @return {Object} object with scaleX and scaleY properties\r\n     */\r\n    getTotalObjectScaling: function() {\r\n      var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\r\n      if (this.canvas) {\r\n        var zoom = this.canvas.getZoom();\r\n        var retina = this.canvas.getRetinaScaling();\r\n        scaleX *= zoom * retina;\r\n        scaleY *= zoom * retina;\r\n      }\r\n      return { scaleX: scaleX, scaleY: scaleY };\r\n    },\r\n\r\n    /**\r\n     * Return the object opacity counting also the group property\r\n     * @return {Number}\r\n     */\r\n    getObjectOpacity: function() {\r\n      var opacity = this.opacity;\r\n      if (this.group) {\r\n        opacity *= this.group.getObjectOpacity();\r\n      }\r\n      return opacity;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} key\r\n     * @param {*} value\r\n     * @return {fabric.Object} thisArg\r\n     */\r\n    _set: function(key, value) {\r\n      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY'),\r\n          isChanged = this[key] !== value, groupNeedsUpdate = false;\r\n\r\n      if (shouldConstrainValue) {\r\n        value = this._constrainScale(value);\r\n      }\r\n      if (key === 'scaleX' && value < 0) {\r\n        this.flipX = !this.flipX;\r\n        value *= -1;\r\n      }\r\n      else if (key === 'scaleY' && value < 0) {\r\n        this.flipY = !this.flipY;\r\n        value *= -1;\r\n      }\r\n      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {\r\n        value = new fabric.Shadow(value);\r\n      }\r\n      else if (key === 'dirty' && this.group) {\r\n        this.group.set('dirty', value);\r\n      }\r\n\r\n      this[key] = value;\r\n\r\n      if (isChanged) {\r\n        groupNeedsUpdate = this.group && this.group.isOnACache();\r\n        if (this.cacheProperties.indexOf(key) > -1) {\r\n          this.dirty = true;\r\n          groupNeedsUpdate && this.group.set('dirty', true);\r\n        }\r\n        else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\r\n          this.group.set('dirty', true);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * This callback function is called by the parent group of an object every\r\n     * time a non-delegated property changes on the group. It is passed the key\r\n     * and value as parameters. Not adding in this function's signature to avoid\r\n     * Travis build error about unused variables.\r\n     */\r\n    setOnGroup: function() {\r\n      // implemented by sub-classes, as needed.\r\n    },\r\n\r\n    /**\r\n     * Retrieves viewportTransform from Object's canvas if possible\r\n     * @method getViewportTransform\r\n     * @memberOf fabric.Object.prototype\r\n     * @return {Array}\r\n     */\r\n    getViewportTransform: function() {\r\n      if (this.canvas && this.canvas.viewportTransform) {\r\n        return this.canvas.viewportTransform;\r\n      }\r\n      return fabric.iMatrix.concat();\r\n    },\r\n\r\n    /*\r\n     * @private\r\n     * return if the object would be visible in rendering\r\n     * @memberOf fabric.Object.prototype\r\n     * @return {Boolean}\r\n     */\r\n    isNotVisible: function() {\r\n      return this.opacity === 0 ||\r\n        (!this.width && !this.height && this.strokeWidth === 0) ||\r\n        !this.visible;\r\n    },\r\n\r\n    /**\r\n     * Renders an object on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    render: function(ctx) {\r\n      // do not render if width/height are zeros or object is not visible\r\n      if (this.isNotVisible()) {\r\n        return;\r\n      }\r\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n        return;\r\n      }\r\n      ctx.save();\r\n      this._setupCompositeOperation(ctx);\r\n      this.drawSelectionBackground(ctx);\r\n      this.transform(ctx);\r\n      this._setOpacity(ctx);\r\n      this._setShadow(ctx, this);\r\n      if (this.shouldCache()) {\r\n        this.renderCache();\r\n        this.drawCacheOnCanvas(ctx);\r\n      }\r\n      else {\r\n        this._removeCacheCanvas();\r\n        this.dirty = false;\r\n        this.drawObject(ctx);\r\n        if (this.objectCaching && this.statefullCache) {\r\n          this.saveState({ propertySet: 'cacheProperties' });\r\n        }\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    renderCache: function(options) {\r\n      options = options || {};\r\n      if (!this._cacheCanvas || !this._cacheContext) {\r\n        this._createCacheCanvas();\r\n      }\r\n      if (this.isCacheDirty()) {\r\n        this.statefullCache && this.saveState({ propertySet: 'cacheProperties' });\r\n        this.drawObject(this._cacheContext, options.forClipping);\r\n        this.dirty = false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Remove cacheCanvas and its dimensions from the objects\r\n     */\r\n    _removeCacheCanvas: function() {\r\n      this._cacheCanvas = null;\r\n      this._cacheContext = null;\r\n      this.cacheWidth = 0;\r\n      this.cacheHeight = 0;\r\n    },\r\n\r\n    /**\r\n     * return true if the object will draw a stroke\r\n     * Does not consider text styles. This is just a shortcut used at rendering time\r\n     * We want it to be an approximation and be fast.\r\n     * wrote to avoid extra caching, it has to return true when stroke happens,\r\n     * can guess when it will not happen at 100% chance, does not matter if it misses\r\n     * some use case where the stroke is invisible.\r\n     * @since 3.0.0\r\n     * @returns Boolean\r\n     */\r\n    hasStroke: function() {\r\n      return this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0;\r\n    },\r\n\r\n    /**\r\n     * return true if the object will draw a fill\r\n     * Does not consider text styles. This is just a shortcut used at rendering time\r\n     * We want it to be an approximation and be fast.\r\n     * wrote to avoid extra caching, it has to return true when fill happens,\r\n     * can guess when it will not happen at 100% chance, does not matter if it misses\r\n     * some use case where the fill is invisible.\r\n     * @since 3.0.0\r\n     * @returns Boolean\r\n     */\r\n    hasFill: function() {\r\n      return this.fill && this.fill !== 'transparent';\r\n    },\r\n\r\n    /**\r\n     * When set to `true`, force the object to have its own cache, even if it is inside a group\r\n     * it may be needed when your object behave in a particular way on the cache and always needs\r\n     * its own isolated canvas to render correctly.\r\n     * Created to be overridden\r\n     * since 1.7.12\r\n     * @returns Boolean\r\n     */\r\n    needsItsOwnCache: function() {\r\n      if (this.paintFirst === 'stroke' &&\r\n        this.hasFill() && this.hasStroke() && typeof this.shadow === 'object') {\r\n        return true;\r\n      }\r\n      if (this.clipPath) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * objectCaching is a global flag, wins over everything\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group outside is cached.\r\n     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\r\n     * @return {Boolean}\r\n     */\r\n    shouldCache: function() {\r\n      this.ownCaching = this.needsItsOwnCache() || (\r\n        this.objectCaching &&\r\n        (!this.group || !this.group.isOnACache())\r\n      );\r\n      return this.ownCaching;\r\n    },\r\n\r\n    /**\r\n     * Check if this object or a child object will cast a shadow\r\n     * used by Group.shouldCache to know if child has a shadow recursively\r\n     * @return {Boolean}\r\n     */\r\n    willDrawShadow: function() {\r\n      return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\r\n    },\r\n\r\n    /**\r\n     * Execute the drawing operation for an object clipPath\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {fabric.Object} clipPath\r\n     */\r\n    drawClipPathOnCache: function(ctx, clipPath) {\r\n      ctx.save();\r\n      // DEBUG: uncomment this line, comment the following\r\n      // ctx.globalAlpha = 0.4\r\n      if (clipPath.inverted) {\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n      }\r\n      else {\r\n        ctx.globalCompositeOperation = 'destination-in';\r\n      }\r\n      //ctx.scale(1 / 2, 1 / 2);\r\n      if (clipPath.absolutePositioned) {\r\n        var m = fabric.util.invertTransform(this.calcTransformMatrix());\r\n        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\r\n      }\r\n      clipPath.transform(ctx);\r\n      ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\r\n      ctx.drawImage(clipPath._cacheCanvas, -clipPath.cacheTranslationX, -clipPath.cacheTranslationY);\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Execute the drawing operation for an object on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    drawObject: function(ctx, forClipping) {\r\n      var originalFill = this.fill, originalStroke = this.stroke;\r\n      if (forClipping) {\r\n        this.fill = 'black';\r\n        this.stroke = '';\r\n        this._setClippingProperties(ctx);\r\n      }\r\n      else {\r\n        this._renderBackground(ctx);\r\n      }\r\n      this._render(ctx);\r\n      this._drawClipPath(ctx, this.clipPath);\r\n      this.fill = originalFill;\r\n      this.stroke = originalStroke;\r\n    },\r\n\r\n    /**\r\n     * Prepare clipPath state and cache and draw it on instance's cache\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {fabric.Object} clipPath\r\n     */\r\n    _drawClipPath: function (ctx, clipPath) {\r\n      if (!clipPath) { return; }\r\n      // needed to setup a couple of variables\r\n      // path canvas gets overridden with this one.\r\n      // TODO find a better solution?\r\n      clipPath.canvas = this.canvas;\r\n      clipPath.shouldCache();\r\n      clipPath._transformDone = true;\r\n      clipPath.renderCache({ forClipping: true });\r\n      this.drawClipPathOnCache(ctx, clipPath);\r\n    },\r\n\r\n    /**\r\n     * Paint the cached copy of the object on the target context.\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    drawCacheOnCanvas: function(ctx) {\r\n      ctx.scale(1 / this.zoomX, 1 / this.zoomY);\r\n      ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\r\n    },\r\n\r\n    /**\r\n     * Check if cache is dirty\r\n     * @param {Boolean} skipCanvas skip canvas checks because this object is painted\r\n     * on parent canvas.\r\n     */\r\n    isCacheDirty: function(skipCanvas) {\r\n      if (this.isNotVisible()) {\r\n        return false;\r\n      }\r\n      if (this._cacheCanvas && this._cacheContext && !skipCanvas && this._updateCacheCanvas()) {\r\n        // in this case the context is already cleared.\r\n        return true;\r\n      }\r\n      else {\r\n        if (this.dirty ||\r\n          (this.clipPath && this.clipPath.absolutePositioned) ||\r\n          (this.statefullCache && this.hasStateChanged('cacheProperties'))\r\n        ) {\r\n          if (this._cacheCanvas && this._cacheContext && !skipCanvas) {\r\n            var width = this.cacheWidth / this.zoomX;\r\n            var height = this.cacheHeight / this.zoomY;\r\n            this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Draws a background for the object big as its untransformed dimensions\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderBackground: function(ctx) {\r\n      if (!this.backgroundColor) {\r\n        return;\r\n      }\r\n      var dim = this._getNonTransformedDimensions();\r\n      ctx.fillStyle = this.backgroundColor;\r\n\r\n      ctx.fillRect(\r\n        -dim.x / 2,\r\n        -dim.y / 2,\r\n        dim.x,\r\n        dim.y\r\n      );\r\n      // if there is background color no other shadows\r\n      // should be casted\r\n      this._removeShadow(ctx);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _setOpacity: function(ctx) {\r\n      if (this.group && !this.group._transformDone) {\r\n        ctx.globalAlpha = this.getObjectOpacity();\r\n      }\r\n      else {\r\n        ctx.globalAlpha *= this.opacity;\r\n      }\r\n    },\r\n\r\n    _setStrokeStyles: function(ctx, decl) {\r\n      var stroke = decl.stroke;\r\n      if (stroke) {\r\n        ctx.lineWidth = decl.strokeWidth;\r\n        ctx.lineCap = decl.strokeLineCap;\r\n        ctx.lineDashOffset = decl.strokeDashOffset;\r\n        ctx.lineJoin = decl.strokeLineJoin;\r\n        ctx.miterLimit = decl.strokeMiterLimit;\r\n        if (stroke.toLive) {\r\n          if (stroke.gradientUnits === 'percentage' || stroke.gradientTransform || stroke.patternTransform) {\r\n            // need to transform gradient in a pattern.\r\n            // this is a slow process. If you are hitting this codepath, and the object\r\n            // is not using caching, you should consider switching it on.\r\n            // we need a canvas as big as the current object caching canvas.\r\n            this._applyPatternForTransformedGradient(ctx, stroke);\r\n          }\r\n          else {\r\n            // is a simple gradient or pattern\r\n            ctx.strokeStyle = stroke.toLive(ctx, this);\r\n            this._applyPatternGradientTransform(ctx, stroke);\r\n          }\r\n        }\r\n        else {\r\n          // is a color\r\n          ctx.strokeStyle = decl.stroke;\r\n        }\r\n      }\r\n    },\r\n\r\n    _setFillStyles: function(ctx, decl) {\r\n      var fill = decl.fill;\r\n      if (fill) {\r\n        if (fill.toLive) {\r\n          ctx.fillStyle = fill.toLive(ctx, this);\r\n          this._applyPatternGradientTransform(ctx, decl.fill);\r\n        }\r\n        else {\r\n          ctx.fillStyle = fill;\r\n        }\r\n      }\r\n    },\r\n\r\n    _setClippingProperties: function(ctx) {\r\n      ctx.globalAlpha = 1;\r\n      ctx.strokeStyle = 'transparent';\r\n      ctx.fillStyle = '#000000';\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * Sets line dash\r\n     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\r\n     * @param {Array} dashArray array representing dashes\r\n     */\r\n    _setLineDash: function(ctx, dashArray) {\r\n      if (!dashArray || dashArray.length === 0) {\r\n        return;\r\n      }\r\n      // Spec requires the concatenation of two copies the dash list when the number of elements is odd\r\n      if (1 & dashArray.length) {\r\n        dashArray.push.apply(dashArray, dashArray);\r\n      }\r\n      ctx.setLineDash(dashArray);\r\n    },\r\n\r\n    /**\r\n     * Renders controls and borders for the object\r\n     * the context here is not transformed\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} [styleOverride] properties to override the object style\r\n     */\r\n    _renderControls: function(ctx, styleOverride) {\r\n      var vpt = this.getViewportTransform(),\r\n          matrix = this.calcTransformMatrix(),\r\n          options, drawBorders, drawControls;\r\n      styleOverride = styleOverride || { };\r\n      drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;\r\n      drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;\r\n      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\r\n      options = fabric.util.qrDecompose(matrix);\r\n      ctx.save();\r\n      ctx.translate(options.translateX, options.translateY);\r\n      ctx.lineWidth = 1 * this.borderScaleFactor;\r\n      if (!this.group) {\r\n        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n      }\r\n      if (this.flipX) {\r\n        options.angle -= 180;\r\n      }\r\n      ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\r\n      if (styleOverride.forActiveSelection || this.group) {\r\n        drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\r\n      }\r\n      else {\r\n        drawBorders && this.drawBorders(ctx, styleOverride);\r\n      }\r\n      drawControls && this.drawControls(ctx, styleOverride);\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _setShadow: function(ctx) {\r\n      if (!this.shadow) {\r\n        return;\r\n      }\r\n\r\n      var shadow = this.shadow, canvas = this.canvas, scaling,\r\n          multX = (canvas && canvas.viewportTransform[0]) || 1,\r\n          multY = (canvas && canvas.viewportTransform[3]) || 1;\r\n      if (shadow.nonScaling) {\r\n        scaling = { scaleX: 1, scaleY: 1 };\r\n      }\r\n      else {\r\n        scaling = this.getObjectScaling();\r\n      }\r\n      if (canvas && canvas._isRetinaScaling()) {\r\n        multX *= fabric.devicePixelRatio;\r\n        multY *= fabric.devicePixelRatio;\r\n      }\r\n      ctx.shadowColor = shadow.color;\r\n      ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant *\r\n        (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\r\n      ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\r\n      ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _removeShadow: function(ctx) {\r\n      if (!this.shadow) {\r\n        return;\r\n      }\r\n\r\n      ctx.shadowColor = '';\r\n      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n     * @return {Object} offset.offsetX offset for text rendering\r\n     * @return {Object} offset.offsetY offset for text rendering\r\n     */\r\n    _applyPatternGradientTransform: function(ctx, filler) {\r\n      if (!filler || !filler.toLive) {\r\n        return { offsetX: 0, offsetY: 0 };\r\n      }\r\n      var t = filler.gradientTransform || filler.patternTransform;\r\n      var offsetX = -this.width / 2 + filler.offsetX || 0,\r\n          offsetY = -this.height / 2 + filler.offsetY || 0;\r\n\r\n      if (filler.gradientUnits === 'percentage') {\r\n        ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\r\n      }\r\n      else {\r\n        ctx.transform(1, 0, 0, 1, offsetX, offsetY);\r\n      }\r\n      if (t) {\r\n        ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\r\n      }\r\n      return { offsetX: offsetX, offsetY: offsetY };\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderPaintInOrder: function(ctx) {\r\n      if (this.paintFirst === 'stroke') {\r\n        this._renderStroke(ctx);\r\n        this._renderFill(ctx);\r\n      }\r\n      else {\r\n        this._renderFill(ctx);\r\n        this._renderStroke(ctx);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * function that actually render something on the context.\r\n     * empty here to allow Obects to work on tests to benchmark fabric functionalites\r\n     * not related to rendering\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _render: function(/* ctx */) {\r\n\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderFill: function(ctx) {\r\n      if (!this.fill) {\r\n        return;\r\n      }\r\n\r\n      ctx.save();\r\n      this._setFillStyles(ctx, this);\r\n      if (this.fillRule === 'evenodd') {\r\n        ctx.fill('evenodd');\r\n      }\r\n      else {\r\n        ctx.fill();\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderStroke: function(ctx) {\r\n      if (!this.stroke || this.strokeWidth === 0) {\r\n        return;\r\n      }\r\n\r\n      if (this.shadow && !this.shadow.affectStroke) {\r\n        this._removeShadow(ctx);\r\n      }\r\n\r\n      ctx.save();\r\n      if (this.strokeUniform && this.group) {\r\n        var scaling = this.getObjectScaling();\r\n        ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);\r\n      }\r\n      else if (this.strokeUniform) {\r\n        ctx.scale(1 / this.scaleX, 1 / this.scaleY);\r\n      }\r\n      this._setLineDash(ctx, this.strokeDashArray);\r\n      this._setStrokeStyles(ctx, this);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * This function try to patch the missing gradientTransform on canvas gradients.\r\n     * transforming a context to transform the gradient, is going to transform the stroke too.\r\n     * we want to transform the gradient but not the stroke operation, so we create\r\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\r\n     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size\r\n     * is limited.\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {fabric.Gradient} filler a fabric gradient instance\r\n     */\r\n    _applyPatternForTransformedGradient: function(ctx, filler) {\r\n      var dims = this._limitCacheSize(this._getCacheCanvasDimensions()),\r\n          pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(),\r\n          width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;\r\n      pCanvas.width = width;\r\n      pCanvas.height = height;\r\n      pCtx = pCanvas.getContext('2d');\r\n      pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);\r\n      pCtx.lineTo(0, height); pCtx.closePath();\r\n      pCtx.translate(width / 2, height / 2);\r\n      pCtx.scale(\r\n        dims.zoomX / this.scaleX / retinaScaling,\r\n        dims.zoomY / this.scaleY / retinaScaling\r\n      );\r\n      this._applyPatternGradientTransform(pCtx, filler);\r\n      pCtx.fillStyle = filler.toLive(ctx);\r\n      pCtx.fill();\r\n      ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);\r\n      ctx.scale(\r\n        retinaScaling * this.scaleX / dims.zoomX,\r\n        retinaScaling * this.scaleY / dims.zoomY\r\n      );\r\n      ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat');\r\n    },\r\n\r\n    /**\r\n     * This function is an helper for svg import. it returns the center of the object in the svg\r\n     * untransformed coordinates\r\n     * @private\r\n     * @return {Object} center point from element coordinates\r\n     */\r\n    _findCenterFromElement: function() {\r\n      return { x: this.left + this.width / 2, y: this.top + this.height / 2 };\r\n    },\r\n\r\n    /**\r\n     * This function is an helper for svg import. it decompose the transformMatrix\r\n     * and assign properties to object.\r\n     * untransformed coordinates\r\n     * @private\r\n     * @chainable\r\n     */\r\n    _assignTransformMatrixProps: function() {\r\n      if (this.transformMatrix) {\r\n        var options = fabric.util.qrDecompose(this.transformMatrix);\r\n        this.flipX = false;\r\n        this.flipY = false;\r\n        this.set('scaleX', options.scaleX);\r\n        this.set('scaleY', options.scaleY);\r\n        this.angle = options.angle;\r\n        this.skewX = options.skewX;\r\n        this.skewY = 0;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * This function is an helper for svg import. it removes the transform matrix\r\n     * and set to object properties that fabricjs can handle\r\n     * @private\r\n     * @param {Object} preserveAspectRatioOptions\r\n     * @return {thisArg}\r\n     */\r\n    _removeTransformMatrix: function(preserveAspectRatioOptions) {\r\n      var center = this._findCenterFromElement();\r\n      if (this.transformMatrix) {\r\n        this._assignTransformMatrixProps();\r\n        center = fabric.util.transformPoint(center, this.transformMatrix);\r\n      }\r\n      this.transformMatrix = null;\r\n      if (preserveAspectRatioOptions) {\r\n        this.scaleX *= preserveAspectRatioOptions.scaleX;\r\n        this.scaleY *= preserveAspectRatioOptions.scaleY;\r\n        this.cropX = preserveAspectRatioOptions.cropX;\r\n        this.cropY = preserveAspectRatioOptions.cropY;\r\n        center.x += preserveAspectRatioOptions.offsetLeft;\r\n        center.y += preserveAspectRatioOptions.offsetTop;\r\n        this.width = preserveAspectRatioOptions.width;\r\n        this.height = preserveAspectRatioOptions.height;\r\n      }\r\n      this.setPositionByOrigin(center, 'center', 'center');\r\n    },\r\n\r\n    /**\r\n     * Clones an instance, using a callback method will work for every object.\r\n     * @param {Function} callback Callback is invoked with a clone as a first argument\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     */\r\n    clone: function(callback, propertiesToInclude) {\r\n      var objectForm = this.toObject(propertiesToInclude);\r\n      if (this.constructor.fromObject) {\r\n        this.constructor.fromObject(objectForm, callback);\r\n      }\r\n      else {\r\n        fabric.Object._fromObject('Object', objectForm, callback);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Creates an instance of fabric.Image out of an object\r\n     * makes use of toCanvasElement.\r\n     * Once this method was based on toDataUrl and loadImage, so it also had a quality\r\n     * and format option. toCanvasElement is faster and produce no loss of quality.\r\n     * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\r\n     * toCanvasElement and then toBlob from the obtained canvas is also a good option.\r\n     * This method is sync now, but still support the callback because we did not want to break.\r\n     * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.\r\n     * @param {Function} callback callback, invoked with an instance as a first argument\r\n     * @param {Object} [options] for clone as image, passed to toDataURL\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n     * @return {fabric.Object} thisArg\r\n     */\r\n    cloneAsImage: function(callback, options) {\r\n      var canvasEl = this.toCanvasElement(options);\r\n      if (callback) {\r\n        callback(new fabric.Image(canvasEl));\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Converts an object into a HTMLCanvas element\r\n     * @param {Object} options Options object\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n     * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object\r\n     */\r\n    toCanvasElement: function(options) {\r\n      options || (options = { });\r\n\r\n      var utils = fabric.util, origParams = utils.saveObjectTransform(this),\r\n          originalGroup = this.group,\r\n          originalShadow = this.shadow, abs = Math.abs,\r\n          multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\r\n      delete this.group;\r\n      if (options.withoutTransform) {\r\n        utils.resetObjectTransform(this);\r\n      }\r\n      if (options.withoutShadow) {\r\n        this.shadow = null;\r\n      }\r\n\r\n      var el = fabric.util.createCanvasElement(),\r\n          // skip canvas zoom and calculate with setCoords now.\r\n          boundingRect = this.getBoundingRect(true, true),\r\n          shadow = this.shadow, scaling,\r\n          shadowOffset = { x: 0, y: 0 }, shadowBlur,\r\n          width, height;\r\n\r\n      if (shadow) {\r\n        shadowBlur = shadow.blur;\r\n        if (shadow.nonScaling) {\r\n          scaling = { scaleX: 1, scaleY: 1 };\r\n        }\r\n        else {\r\n          scaling = this.getObjectScaling();\r\n        }\r\n        // consider non scaling shadow.\r\n        shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * (abs(scaling.scaleX));\r\n        shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * (abs(scaling.scaleY));\r\n      }\r\n      width = boundingRect.width + shadowOffset.x;\r\n      height = boundingRect.height + shadowOffset.y;\r\n      // if the current width/height is not an integer\r\n      // we need to make it so.\r\n      el.width = Math.ceil(width);\r\n      el.height = Math.ceil(height);\r\n      var canvas = new fabric.StaticCanvas(el, {\r\n        enableRetinaScaling: false,\r\n        renderOnAddRemove: false,\r\n        skipOffscreen: false,\r\n      });\r\n      if (options.format === 'jpeg') {\r\n        canvas.backgroundColor = '#fff';\r\n      }\r\n      this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');\r\n\r\n      var originalCanvas = this.canvas;\r\n      canvas.add(this);\r\n      var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\r\n      this.shadow = originalShadow;\r\n      this.set('canvas', originalCanvas);\r\n      if (originalGroup) {\r\n        this.group = originalGroup;\r\n      }\r\n      this.set(origParams).setCoords();\r\n      // canvas.dispose will call image.dispose that will nullify the elements\r\n      // since this canvas is a simple element for the process, we remove references\r\n      // to objects in this way in order to avoid object trashing.\r\n      canvas._objects = [];\r\n      canvas.dispose();\r\n      canvas = null;\r\n\r\n      return canvasEl;\r\n    },\r\n\r\n    /**\r\n     * Converts an object into a data-url-like string\r\n     * @param {Object} options Options object\r\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n     */\r\n    toDataURL: function(options) {\r\n      options || (options = { });\r\n      return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);\r\n    },\r\n\r\n    /**\r\n     * Returns true if specified type is identical to the type of an instance\r\n     * @param {String} type Type to check against\r\n     * @return {Boolean}\r\n     */\r\n    isType: function(type) {\r\n      return arguments.length > 1 ? Array.from(arguments).includes(this.type) : this.type === type;\r\n    },\r\n\r\n    /**\r\n     * Returns complexity of an instance\r\n     * @return {Number} complexity of this instance (is 1 unless subclassed)\r\n     */\r\n    complexity: function() {\r\n      return 1;\r\n    },\r\n\r\n    /**\r\n     * Returns a JSON representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} JSON\r\n     */\r\n    toJSON: function(propertiesToInclude) {\r\n      // delegate, not alias\r\n      return this.toObject(propertiesToInclude);\r\n    },\r\n\r\n    /**\r\n     * Sets \"angle\" of an instance with centered rotation\r\n     * @param {Number} angle Angle value (in degrees)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    rotate: function(angle) {\r\n      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;\r\n\r\n      if (shouldCenterOrigin) {\r\n        this._setOriginToCenter();\r\n      }\r\n\r\n      this.set('angle', angle);\r\n\r\n      if (shouldCenterOrigin) {\r\n        this._resetOrigin();\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object horizontally on canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    centerH: function () {\r\n      this.canvas && this.canvas.centerObjectH(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object horizontally on current viewport of canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    viewportCenterH: function () {\r\n      this.canvas && this.canvas.viewportCenterObjectH(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically on canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    centerV: function () {\r\n      this.canvas && this.canvas.centerObjectV(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically on current viewport of canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    viewportCenterV: function () {\r\n      this.canvas && this.canvas.viewportCenterObjectV(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object vertically and horizontally on canvas to which is was added last\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    center: function () {\r\n      this.canvas && this.canvas.centerObject(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Centers object on current viewport of canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    viewportCenter: function () {\r\n      this.canvas && this.canvas.viewportCenterObject(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns coordinates of a pointer relative to an object\r\n     * @param {Event} e Event to operate upon\r\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\r\n     * @return {Object} Coordinates of a pointer (x, y)\r\n     */\r\n    getLocalPointer: function(e, pointer) {\r\n      pointer = pointer || this.canvas.getPointer(e);\r\n      var pClicked = new fabric.Point(pointer.x, pointer.y),\r\n          objectLeftTop = this._getLeftTopCoords();\r\n      if (this.angle) {\r\n        pClicked = fabric.util.rotatePoint(\r\n          pClicked, objectLeftTop, degreesToRadians(-this.angle));\r\n      }\r\n      return {\r\n        x: pClicked.x - objectLeftTop.x,\r\n        y: pClicked.y - objectLeftTop.y\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Sets canvas globalCompositeOperation for specific object\r\n     * custom composition operation for the particular object can be specified using globalCompositeOperation property\r\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\r\n     */\r\n    _setupCompositeOperation: function (ctx) {\r\n      if (this.globalCompositeOperation) {\r\n        ctx.globalCompositeOperation = this.globalCompositeOperation;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * cancel instance's running animations\r\n     * override if necessary to dispose artifacts such as `clipPath`\r\n     */\r\n    dispose: function () {\r\n      if (fabric.runningAnimations) {\r\n        fabric.runningAnimations.cancelByTarget(this);\r\n      }\r\n    }\r\n  });\r\n\r\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\r\n\r\n  extend(fabric.Object.prototype, fabric.Observable);\r\n\r\n  /**\r\n   * Defines the number of fraction digits to use when serializing object values.\r\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\r\n   * @static\r\n   * @memberOf fabric.Object\r\n   * @constant\r\n   * @type Number\r\n   */\r\n  fabric.Object.NUM_FRACTION_DIGITS = 2;\r\n\r\n  /**\r\n   * Defines which properties should be enlivened from the object passed to {@link fabric.Object._fromObject}\r\n   * @static\r\n   * @memberOf fabric.Object\r\n   * @constant\r\n   * @type string[]\r\n   */\r\n  fabric.Object.ENLIVEN_PROPS = ['clipPath'];\r\n\r\n  fabric.Object._fromObject = function(className, object, callback, extraParam) {\r\n    var klass = fabric[className];\r\n    object = clone(object, true);\r\n    fabric.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {\r\n      if (typeof patterns[0] !== 'undefined') {\r\n        object.fill = patterns[0];\r\n      }\r\n      if (typeof patterns[1] !== 'undefined') {\r\n        object.stroke = patterns[1];\r\n      }\r\n      fabric.util.enlivenObjectEnlivables(object, object, function () {\r\n        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\r\n        callback && callback(instance);\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Unique id used internally when creating SVG elements\r\n   * @static\r\n   * @memberOf fabric.Object\r\n   * @type Number\r\n   */\r\n  fabric.Object.__uid = 0;\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function() {\r\n\r\n  var degreesToRadians = fabric.util.degreesToRadians,\r\n      originXOffset = {\r\n        left: -0.5,\r\n        center: 0,\r\n        right: 0.5\r\n      },\r\n      originYOffset = {\r\n        top: -0.5,\r\n        center: 0,\r\n        bottom: 0.5\r\n      };\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Translates the coordinates from a set of origin to another (based on the object's dimensions)\r\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */\r\n    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\r\n      var x = point.x,\r\n          y = point.y,\r\n          offsetX, offsetY, dim;\r\n\r\n      if (typeof fromOriginX === 'string') {\r\n        fromOriginX = originXOffset[fromOriginX];\r\n      }\r\n      else {\r\n        fromOriginX -= 0.5;\r\n      }\r\n\r\n      if (typeof toOriginX === 'string') {\r\n        toOriginX = originXOffset[toOriginX];\r\n      }\r\n      else {\r\n        toOriginX -= 0.5;\r\n      }\r\n\r\n      offsetX = toOriginX - fromOriginX;\r\n\r\n      if (typeof fromOriginY === 'string') {\r\n        fromOriginY = originYOffset[fromOriginY];\r\n      }\r\n      else {\r\n        fromOriginY -= 0.5;\r\n      }\r\n\r\n      if (typeof toOriginY === 'string') {\r\n        toOriginY = originYOffset[toOriginY];\r\n      }\r\n      else {\r\n        toOriginY -= 0.5;\r\n      }\r\n\r\n      offsetY = toOriginY - fromOriginY;\r\n\r\n      if (offsetX || offsetY) {\r\n        dim = this._getTransformedDimensions();\r\n        x = point.x + offsetX * dim.x;\r\n        y = point.y + offsetY * dim.y;\r\n      }\r\n\r\n      return new fabric.Point(x, y);\r\n    },\r\n\r\n    /**\r\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\r\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */\r\n    translateToCenterPoint: function(point, originX, originY) {\r\n      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');\r\n      if (this.angle) {\r\n        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\r\n      }\r\n      return p;\r\n    },\r\n\r\n    /**\r\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\r\n     * @param {fabric.Point} center The point which corresponds to center of the object\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */\r\n    translateToOriginPoint: function(center, originX, originY) {\r\n      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n      if (this.angle) {\r\n        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\r\n      }\r\n      return p;\r\n    },\r\n\r\n    /**\r\n     * Returns the real center coordinates of the object\r\n     * @return {fabric.Point}\r\n     */\r\n    getCenterPoint: function() {\r\n      var leftTop = new fabric.Point(this.left, this.top);\r\n      return this.translateToCenterPoint(leftTop, this.originX, this.originY);\r\n    },\r\n\r\n    /**\r\n     * Returns the coordinates of the object based on center coordinates\r\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n     * @return {fabric.Point}\r\n     */\r\n    // getOriginPoint: function(center) {\r\n    //   return this.translateToOriginPoint(center, this.originX, this.originY);\r\n    // },\r\n\r\n    /**\r\n     * Returns the coordinates of the object as if it has a different origin\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */\r\n    getPointByOrigin: function(originX, originY) {\r\n      var center = this.getCenterPoint();\r\n      return this.translateToOriginPoint(center, originX, originY);\r\n    },\r\n\r\n    /**\r\n     * Returns the point in local coordinates\r\n     * @param {fabric.Point} point The point relative to the global coordinate system\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */\r\n    toLocalPoint: function(point, originX, originY) {\r\n      var center = this.getCenterPoint(),\r\n          p, p2;\r\n\r\n      if (typeof originX !== 'undefined' && typeof originY !== 'undefined' ) {\r\n        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);\r\n      }\r\n      else {\r\n        p = new fabric.Point(this.left, this.top);\r\n      }\r\n\r\n      p2 = new fabric.Point(point.x, point.y);\r\n      if (this.angle) {\r\n        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\r\n      }\r\n      return p2.subtractEquals(p);\r\n    },\r\n\r\n    /**\r\n     * Returns the point in global coordinates\r\n     * @param {fabric.Point} The point relative to the local coordinate system\r\n     * @return {fabric.Point}\r\n     */\r\n    // toGlobalPoint: function(point) {\r\n    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\r\n    // },\r\n\r\n    /**\r\n     * Sets the position of the object taking into consideration the object's origin\r\n     * @param {fabric.Point} pos The new position of the object\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {void}\r\n     */\r\n    setPositionByOrigin: function(pos, originX, originY) {\r\n      var center = this.translateToCenterPoint(pos, originX, originY),\r\n          position = this.translateToOriginPoint(center, this.originX, this.originY);\r\n      this.set('left', position.x);\r\n      this.set('top', position.y);\r\n    },\r\n\r\n    /**\r\n     * @param {String} to One of 'left', 'center', 'right'\r\n     */\r\n    adjustPosition: function(to) {\r\n      var angle = degreesToRadians(this.angle),\r\n          hypotFull = this.getScaledWidth(),\r\n          xFull = fabric.util.cos(angle) * hypotFull,\r\n          yFull = fabric.util.sin(angle) * hypotFull,\r\n          offsetFrom, offsetTo;\r\n\r\n      //TODO: this function does not consider mixed situation like top, center.\r\n      if (typeof this.originX === 'string') {\r\n        offsetFrom = originXOffset[this.originX];\r\n      }\r\n      else {\r\n        offsetFrom = this.originX - 0.5;\r\n      }\r\n      if (typeof to === 'string') {\r\n        offsetTo = originXOffset[to];\r\n      }\r\n      else {\r\n        offsetTo = to - 0.5;\r\n      }\r\n      this.left += xFull * (offsetTo - offsetFrom);\r\n      this.top += yFull * (offsetTo - offsetFrom);\r\n      this.setCoords();\r\n      this.originX = to;\r\n    },\r\n\r\n    /**\r\n     * Sets the origin/position of the object to it's center point\r\n     * @private\r\n     * @return {void}\r\n     */\r\n    _setOriginToCenter: function() {\r\n      this._originalOriginX = this.originX;\r\n      this._originalOriginY = this.originY;\r\n\r\n      var center = this.getCenterPoint();\r\n\r\n      this.originX = 'center';\r\n      this.originY = 'center';\r\n\r\n      this.left = center.x;\r\n      this.top = center.y;\r\n    },\r\n\r\n    /**\r\n     * Resets the origin/position of the object to it's original origin\r\n     * @private\r\n     * @return {void}\r\n     */\r\n    _resetOrigin: function() {\r\n      var originPoint = this.translateToOriginPoint(\r\n        this.getCenterPoint(),\r\n        this._originalOriginX,\r\n        this._originalOriginY);\r\n\r\n      this.originX = this._originalOriginX;\r\n      this.originY = this._originalOriginY;\r\n\r\n      this.left = originPoint.x;\r\n      this.top = originPoint.y;\r\n\r\n      this._originalOriginX = null;\r\n      this._originalOriginY = null;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _getLeftTopCoords: function() {\r\n      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');\r\n    },\r\n  });\r\n\r\n})();\r\n(function() {\r\n\r\n  function arrayFromCoords(coords) {\r\n    return [\r\n      new fabric.Point(coords.tl.x, coords.tl.y),\r\n      new fabric.Point(coords.tr.x, coords.tr.y),\r\n      new fabric.Point(coords.br.x, coords.br.y),\r\n      new fabric.Point(coords.bl.x, coords.bl.y)\r\n    ];\r\n  }\r\n\r\n  var util = fabric.util,\r\n      degreesToRadians = util.degreesToRadians,\r\n      multiplyMatrices = util.multiplyTransformMatrices,\r\n      transformPoint = util.transformPoint;\r\n\r\n  util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Describe object's corner position in canvas element coordinates.\r\n     * properties are depending on control keys and padding the main controls.\r\n     * each property is an object with x, y and corner.\r\n     * The `corner` property contains in a similar manner the 4 points of the\r\n     * interactive area of the corner.\r\n     * The coordinates depends from the controls positionHandler and are used\r\n     * to draw and locate controls\r\n     * @memberOf fabric.Object.prototype\r\n     */\r\n    oCoords: null,\r\n\r\n    /**\r\n     * Describe object's corner position in canvas object absolute coordinates\r\n     * properties are tl,tr,bl,br and describe the four main corner.\r\n     * each property is an object with x, y, instance of Fabric.Point.\r\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n     * skewX, skewY, angle, strokeWidth, top, left.\r\n     * Those coordinates are useful to understand where an object is. They get updated\r\n     * with oCoords but they do not need to be updated when zoom or panning change.\r\n     * The coordinates get updated with @method setCoords.\r\n     * You can calculate them without updating with @method calcACoords();\r\n     * @memberOf fabric.Object.prototype\r\n     */\r\n    aCoords: null,\r\n\r\n    /**\r\n     * Describe object's corner position in canvas element coordinates.\r\n     * includes padding. Used of object detection.\r\n     * set and refreshed with setCoords.\r\n     * @memberOf fabric.Object.prototype\r\n     */\r\n    lineCoords: null,\r\n\r\n    /**\r\n     * storage for object transform matrix\r\n     */\r\n    ownMatrixCache: null,\r\n\r\n    /**\r\n     * storage for object full transform matrix\r\n     */\r\n    matrixCache: null,\r\n\r\n    /**\r\n     * custom controls interface\r\n     * controls are added by default_controls.js\r\n     */\r\n    controls: { },\r\n\r\n    /**\r\n     * return correct set of coordinates for intersection\r\n     * this will return either aCoords or lineCoords.\r\n     * @param {Boolean} absolute will return aCoords if true or lineCoords\r\n     * @return {Object} {tl, tr, br, bl} points\r\n     */\r\n    _getCoords: function(absolute, calculate) {\r\n      if (calculate) {\r\n        return (absolute ? this.calcACoords() : this.calcLineCoords());\r\n      }\r\n      if (!this.aCoords || !this.lineCoords) {\r\n        this.setCoords(true);\r\n      }\r\n      return (absolute ? this.aCoords : this.lineCoords);\r\n    },\r\n\r\n    /**\r\n     * return correct set of coordinates for intersection\r\n     * this will return either aCoords or lineCoords.\r\n     * The coords are returned in an array.\r\n     * @return {Array} [tl, tr, br, bl] of points\r\n     */\r\n    getCoords: function(absolute, calculate) {\r\n      return arrayFromCoords(this._getCoords(absolute, calculate));\r\n    },\r\n\r\n    /**\r\n     * Checks if object intersects with an area formed by 2 points\r\n     * @param {Object} pointTL top-left point of area\r\n     * @param {Object} pointBR bottom-right point of area\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object intersects with an area formed by 2 points\r\n     */\r\n    intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\r\n      var coords = this.getCoords(absolute, calculate),\r\n          intersection = fabric.Intersection.intersectPolygonRectangle(\r\n            coords,\r\n            pointTL,\r\n            pointBR\r\n          );\r\n      return intersection.status === 'Intersection';\r\n    },\r\n\r\n    /**\r\n     * Checks if object intersects with another object\r\n     * @param {Object} other Object to test\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object intersects with another object\r\n     */\r\n    intersectsWithObject: function(other, absolute, calculate) {\r\n      var intersection = fabric.Intersection.intersectPolygonPolygon(\r\n        this.getCoords(absolute, calculate),\r\n        other.getCoords(absolute, calculate)\r\n      );\r\n\r\n      return intersection.status === 'Intersection'\r\n        || other.isContainedWithinObject(this, absolute, calculate)\r\n        || this.isContainedWithinObject(other, absolute, calculate);\r\n    },\r\n\r\n    /**\r\n     * Checks if object is fully contained within area of another object\r\n     * @param {Object} other Object to test\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object is fully contained within area of another object\r\n     */\r\n    isContainedWithinObject: function(other, absolute, calculate) {\r\n      var points = this.getCoords(absolute, calculate),\r\n          otherCoords = absolute ? other.aCoords : other.lineCoords,\r\n          i = 0, lines = other._getImageLines(otherCoords);\r\n      for (; i < 4; i++) {\r\n        if (!other.containsPoint(points[i], lines)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Checks if object is fully contained within area formed by 2 points\r\n     * @param {Object} pointTL top-left point of area\r\n     * @param {Object} pointBR bottom-right point of area\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\r\n     */\r\n    isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\r\n      var boundingRect = this.getBoundingRect(absolute, calculate);\r\n\r\n      return (\r\n        boundingRect.left >= pointTL.x &&\r\n        boundingRect.left + boundingRect.width <= pointBR.x &&\r\n        boundingRect.top >= pointTL.y &&\r\n        boundingRect.top + boundingRect.height <= pointBR.y\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Checks if point is inside the object\r\n     * @param {fabric.Point} point Point to check against\r\n     * @param {Object} [lines] object returned from @method _getImageLines\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if point is inside the object\r\n     */\r\n    containsPoint: function(point, lines, absolute, calculate) {\r\n      var coords = this._getCoords(absolute, calculate),\r\n          lines = lines || this._getImageLines(coords),\r\n          xPoints = this._findCrossPoints(point, lines);\r\n      // if xPoints is odd then point is inside the object\r\n      return (xPoints !== 0 && xPoints % 2 === 1);\r\n    },\r\n\r\n    /**\r\n     * Checks if object is contained within the canvas with current viewportTransform\r\n     * the check is done stopping at first point that appears on screen\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\r\n     * @return {Boolean} true if object is fully or partially contained within canvas\r\n     */\r\n    isOnScreen: function(calculate) {\r\n      if (!this.canvas) {\r\n        return false;\r\n      }\r\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n      var points = this.getCoords(true, calculate);\r\n      // if some point is on screen, the object is on screen.\r\n      if (points.some(function(point) {\r\n        return point.x <= pointBR.x && point.x >= pointTL.x &&\r\n        point.y <= pointBR.y && point.y >= pointTL.y;\r\n      })) {\r\n        return true;\r\n      }\r\n      // no points on screen, check intersection with absolute coordinates\r\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n        return true;\r\n      }\r\n      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n    },\r\n\r\n    /**\r\n     * Checks if the object contains the midpoint between canvas extremities\r\n     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\r\n     * @private\r\n     * @param {Fabric.Point} pointTL Top Left point\r\n     * @param {Fabric.Point} pointBR Top Right point\r\n     * @param {Boolean} calculate use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if the object contains the point\r\n     */\r\n    _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\r\n      // worst case scenario the object is so big that contains the screen\r\n      var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };\r\n      if (this.containsPoint(centerPoint, null, true, calculate)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Checks if object is partially contained within the canvas with current viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object is partially contained within canvas\r\n     */\r\n    isPartiallyOnScreen: function(calculate) {\r\n      if (!this.canvas) {\r\n        return false;\r\n      }\r\n      var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\r\n      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\r\n        return true;\r\n      }\r\n      var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {\r\n        return (point.x >= pointBR.x || point.x <= pointTL.x) &&\r\n        (point.y >= pointBR.y || point.y <= pointTL.y);\r\n      });\r\n      return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);\r\n    },\r\n\r\n    /**\r\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\r\n     * @private\r\n     * @param {Object} oCoords Coordinates of the object corners\r\n     */\r\n    _getImageLines: function(oCoords) {\r\n\r\n      var lines = {\r\n        topline: {\r\n          o: oCoords.tl,\r\n          d: oCoords.tr\r\n        },\r\n        rightline: {\r\n          o: oCoords.tr,\r\n          d: oCoords.br\r\n        },\r\n        bottomline: {\r\n          o: oCoords.br,\r\n          d: oCoords.bl\r\n        },\r\n        leftline: {\r\n          o: oCoords.bl,\r\n          d: oCoords.tl\r\n        }\r\n      };\r\n\r\n      // // debugging\r\n      // if (this.canvas.contextTop) {\r\n      //   this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\r\n      //   this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\r\n      //\r\n      //   this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\r\n      //   this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\r\n      //\r\n      //   this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\r\n      //   this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\r\n      //\r\n      //   this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\r\n      //   this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\r\n      // }\r\n\r\n      return lines;\r\n    },\r\n\r\n    /**\r\n     * Helper method to determine how many cross points are between the 4 object edges\r\n     * and the horizontal line determined by a point on canvas\r\n     * @private\r\n     * @param {fabric.Point} point Point to check\r\n     * @param {Object} lines Coordinates of the object being evaluated\r\n     */\r\n    // remove yi, not used but left code here just in case.\r\n    _findCrossPoints: function(point, lines) {\r\n      var b1, b2, a1, a2, xi, // yi,\r\n          xcount = 0,\r\n          iLine;\r\n\r\n      for (var lineKey in lines) {\r\n        iLine = lines[lineKey];\r\n        // optimisation 1: line below point. no cross\r\n        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {\r\n          continue;\r\n        }\r\n        // optimisation 2: line above point. no cross\r\n        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {\r\n          continue;\r\n        }\r\n        // optimisation 3: vertical line case\r\n        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {\r\n          xi = iLine.o.x;\r\n          // yi = point.y;\r\n        }\r\n        // calculate the intersection point\r\n        else {\r\n          b1 = 0;\r\n          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\r\n          a1 = point.y - b1 * point.x;\r\n          a2 = iLine.o.y - b2 * iLine.o.x;\r\n\r\n          xi = -(a1 - a2) / (b1 - b2);\r\n          // yi = a1 + b1 * xi;\r\n        }\r\n        // dont count xi < point.x cases\r\n        if (xi >= point.x) {\r\n          xcount += 1;\r\n        }\r\n        // optimisation 4: specific for square images\r\n        if (xcount === 2) {\r\n          break;\r\n        }\r\n      }\r\n      return xcount;\r\n    },\r\n\r\n    /**\r\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\r\n     * the box is intended as aligned to axis of canvas.\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\r\n     * @return {Object} Object with left, top, width, height properties\r\n     */\r\n    getBoundingRect: function(absolute, calculate) {\r\n      var coords = this.getCoords(absolute, calculate);\r\n      return util.makeBoundingBoxFromPoints(coords);\r\n    },\r\n\r\n    /**\r\n     * Returns width of an object's bounding box counting transformations\r\n     * before 2.0 it was named getWidth();\r\n     * @return {Number} width value\r\n     */\r\n    getScaledWidth: function() {\r\n      return this._getTransformedDimensions().x;\r\n    },\r\n\r\n    /**\r\n     * Returns height of an object bounding box counting transformations\r\n     * before 2.0 it was named getHeight();\r\n     * @return {Number} height value\r\n     */\r\n    getScaledHeight: function() {\r\n      return this._getTransformedDimensions().y;\r\n    },\r\n\r\n    /**\r\n     * Makes sure the scale is valid and modifies it if necessary\r\n     * @private\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\r\n    _constrainScale: function(value) {\r\n      if (Math.abs(value) < this.minScaleLimit) {\r\n        if (value < 0) {\r\n          return -this.minScaleLimit;\r\n        }\r\n        else {\r\n          return this.minScaleLimit;\r\n        }\r\n      }\r\n      else if (value === 0) {\r\n        return 0.0001;\r\n      }\r\n      return value;\r\n    },\r\n\r\n    /**\r\n     * Scales an object (equally by x and y)\r\n     * @param {Number} value Scale factor\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    scale: function(value) {\r\n      this._set('scaleX', value);\r\n      this._set('scaleY', value);\r\n      return this.setCoords();\r\n    },\r\n\r\n    /**\r\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\r\n     * @param {Number} value New width value\r\n     * @param {Boolean} absolute ignore viewport\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    scaleToWidth: function(value, absolute) {\r\n      // adjust to bounding rect factor so that rotated shapes would fit as well\r\n      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\r\n      return this.scale(value / this.width / boundingRectFactor);\r\n    },\r\n\r\n    /**\r\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\r\n     * @param {Number} value New height value\r\n     * @param {Boolean} absolute ignore viewport\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    scaleToHeight: function(value, absolute) {\r\n      // adjust to bounding rect factor so that rotated shapes would fit as well\r\n      var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\r\n      return this.scale(value / this.height / boundingRectFactor);\r\n    },\r\n\r\n    calcLineCoords: function() {\r\n      var vpt = this.getViewportTransform(),\r\n          padding = this.padding, angle = degreesToRadians(this.angle),\r\n          cos = util.cos(angle), sin = util.sin(angle),\r\n          cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP,\r\n          cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();\r\n\r\n      var lineCoords = {\r\n        tl: transformPoint(aCoords.tl, vpt),\r\n        tr: transformPoint(aCoords.tr, vpt),\r\n        bl: transformPoint(aCoords.bl, vpt),\r\n        br: transformPoint(aCoords.br, vpt),\r\n      };\r\n\r\n      if (padding) {\r\n        lineCoords.tl.x -= cosPMinusSinP;\r\n        lineCoords.tl.y -= cosPSinP;\r\n        lineCoords.tr.x += cosPSinP;\r\n        lineCoords.tr.y -= cosPMinusSinP;\r\n        lineCoords.bl.x -= cosPSinP;\r\n        lineCoords.bl.y += cosPMinusSinP;\r\n        lineCoords.br.x += cosPMinusSinP;\r\n        lineCoords.br.y += cosPSinP;\r\n      }\r\n\r\n      return lineCoords;\r\n    },\r\n\r\n    calcOCoords: function() {\r\n      var rotateMatrix = this._calcRotateMatrix(),\r\n          translateMatrix = this._calcTranslateMatrix(),\r\n          vpt = this.getViewportTransform(),\r\n          startMatrix = multiplyMatrices(vpt, translateMatrix),\r\n          finalMatrix = multiplyMatrices(startMatrix, rotateMatrix),\r\n          finalMatrix = multiplyMatrices(finalMatrix, [1 / vpt[0], 0, 0, 1 / vpt[3], 0, 0]),\r\n          dim = this._calculateCurrentDimensions(),\r\n          coords = {};\r\n      this.forEachControl(function(control, key, fabricObject) {\r\n        coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);\r\n      });\r\n\r\n      // debug code\r\n      // var canvas = this.canvas;\r\n      // setTimeout(function() {\r\n      //   canvas.contextTop.clearRect(0, 0, 700, 700);\r\n      //   canvas.contextTop.fillStyle = 'green';\r\n      //   Object.keys(coords).forEach(function(key) {\r\n      //     var control = coords[key];\r\n      //     canvas.contextTop.fillRect(control.x, control.y, 3, 3);\r\n      //   });\r\n      // }, 50);\r\n      return coords;\r\n    },\r\n\r\n    calcACoords: function() {\r\n      var rotateMatrix = this._calcRotateMatrix(),\r\n          translateMatrix = this._calcTranslateMatrix(),\r\n          finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix),\r\n          dim = this._getTransformedDimensions(),\r\n          w = dim.x / 2, h = dim.y / 2;\r\n      return {\r\n        // corners\r\n        tl: transformPoint({ x: -w, y: -h }, finalMatrix),\r\n        tr: transformPoint({ x: w, y: -h }, finalMatrix),\r\n        bl: transformPoint({ x: -w, y: h }, finalMatrix),\r\n        br: transformPoint({ x: w, y: h }, finalMatrix)\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Sets corner and controls position coordinates based on current angle, width and height, left and top.\r\n     * oCoords are used to find the corners\r\n     * aCoords are used to quickly find an object on the canvas\r\n     * lineCoords are used to quickly find object during pointer events.\r\n     * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\r\n     *\r\n     * @param {Boolean} [skipCorners] skip calculation of oCoords.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    setCoords: function(skipCorners) {\r\n      this.aCoords = this.calcACoords();\r\n      // in case we are in a group, for how the inner group target check works,\r\n      // lineCoords are exactly aCoords. Since the vpt gets absorbed by the normalized pointer.\r\n      this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();\r\n      if (skipCorners) {\r\n        return this;\r\n      }\r\n      // set coordinates of the draggable boxes in the corners used to scale/rotate the image\r\n      this.oCoords = this.calcOCoords();\r\n      this._setCornerCoords && this._setCornerCoords();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * calculate rotation matrix of an object\r\n     * @return {Array} rotation matrix for the object\r\n     */\r\n    _calcRotateMatrix: function() {\r\n      return util.calcRotateMatrix(this);\r\n    },\r\n\r\n    /**\r\n     * calculate the translation matrix for an object transform\r\n     * @return {Array} rotation matrix for the object\r\n     */\r\n    _calcTranslateMatrix: function() {\r\n      var center = this.getCenterPoint();\r\n      return [1, 0, 0, 1, center.x, center.y];\r\n    },\r\n\r\n    transformMatrixKey: function(skipGroup) {\r\n      var sep = '_', prefix = '';\r\n      if (!skipGroup && this.group) {\r\n        prefix = this.group.transformMatrixKey(skipGroup) + sep;\r\n      };\r\n      return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY +\r\n        sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY +\r\n        sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\r\n    },\r\n\r\n    /**\r\n     * calculate transform matrix that represents the current transformations from the\r\n     * object's properties.\r\n     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\r\n     * There are some situation in which this is useful to avoid the fake rotation.\r\n     * @return {Array} transform matrix for the object\r\n     */\r\n    calcTransformMatrix: function(skipGroup) {\r\n      var matrix = this.calcOwnMatrix();\r\n      if (skipGroup || !this.group) {\r\n        return matrix;\r\n      }\r\n      var key = this.transformMatrixKey(skipGroup), cache = this.matrixCache || (this.matrixCache = {});\r\n      if (cache.key === key) {\r\n        return cache.value;\r\n      }\r\n      if (this.group) {\r\n        matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);\r\n      }\r\n      cache.key = key;\r\n      cache.value = matrix;\r\n      return matrix;\r\n    },\r\n\r\n    /**\r\n     * calculate transform matrix that represents the current transformations from the\r\n     * object's properties, this matrix does not include the group transformation\r\n     * @return {Array} transform matrix for the object\r\n     */\r\n    calcOwnMatrix: function() {\r\n      var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\r\n      if (cache.key === key) {\r\n        return cache.value;\r\n      }\r\n      var tMatrix = this._calcTranslateMatrix(),\r\n          options = {\r\n            angle: this.angle,\r\n            translateX: tMatrix[4],\r\n            translateY: tMatrix[5],\r\n            scaleX: this.scaleX,\r\n            scaleY: this.scaleY,\r\n            skewX: this.skewX,\r\n            skewY: this.skewY,\r\n            flipX: this.flipX,\r\n            flipY: this.flipY,\r\n          };\r\n      cache.key = key;\r\n      cache.value = util.composeMatrix(options);\r\n      return cache.value;\r\n    },\r\n\r\n    /*\r\n     * Calculate object dimensions from its properties\r\n     * @private\r\n     * @return {Object} .x width dimension\r\n     * @return {Object} .y height dimension\r\n     */\r\n    _getNonTransformedDimensions: function() {\r\n      var strokeWidth = this.strokeWidth,\r\n          w = this.width + strokeWidth,\r\n          h = this.height + strokeWidth;\r\n      return { x: w, y: h };\r\n    },\r\n\r\n    /*\r\n     * Calculate object bounding box dimensions from its properties scale, skew.\r\n     * @param {Number} skewX, a value to override current skewX\r\n     * @param {Number} skewY, a value to override current skewY\r\n     * @private\r\n     * @return {Object} .x width dimension\r\n     * @return {Object} .y height dimension\r\n     */\r\n    _getTransformedDimensions: function(skewX, skewY) {\r\n      if (typeof skewX === 'undefined') {\r\n        skewX = this.skewX;\r\n      }\r\n      if (typeof skewY === 'undefined') {\r\n        skewY = this.skewY;\r\n      }\r\n      var dimensions, dimX, dimY,\r\n          noSkew = skewX === 0 && skewY === 0;\r\n\r\n      if (this.strokeUniform) {\r\n        dimX = this.width;\r\n        dimY = this.height;\r\n      }\r\n      else {\r\n        dimensions = this._getNonTransformedDimensions();\r\n        dimX = dimensions.x;\r\n        dimY = dimensions.y;\r\n      }\r\n      if (noSkew) {\r\n        return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);\r\n      }\r\n      var bbox = util.sizeAfterTransform(dimX, dimY, {\r\n        scaleX: this.scaleX,\r\n        scaleY: this.scaleY,\r\n        skewX: skewX,\r\n        skewY: skewY,\r\n      });\r\n      return this._finalizeDimensions(bbox.x, bbox.y);\r\n    },\r\n\r\n    /*\r\n     * Calculate object bounding box dimensions from its properties scale, skew.\r\n     * @param Number width width of the bbox\r\n     * @param Number height height of the bbox\r\n     * @private\r\n     * @return {Object} .x finalized width dimension\r\n     * @return {Object} .y finalized height dimension\r\n     */\r\n    _finalizeDimensions: function(width, height) {\r\n      return this.strokeUniform ?\r\n        { x: width + this.strokeWidth, y: height + this.strokeWidth }\r\n        :\r\n        { x: width, y: height };\r\n    },\r\n\r\n    /*\r\n     * Calculate object dimensions for controls box, including padding and canvas zoom.\r\n     * and active selection\r\n     * private\r\n     */\r\n    _calculateCurrentDimensions: function()  {\r\n      var vpt = this.getViewportTransform(),\r\n          dim = this._getTransformedDimensions(),\r\n          p = transformPoint(dim, vpt, true);\r\n      return p.scalarAdd(2 * this.padding);\r\n    },\r\n  });\r\n})();\r\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n  /**\r\n   * Moves an object to the bottom of the stack of drawn objects\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  sendToBack: function() {\r\n    if (this.group) {\r\n      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\r\n    }\r\n    else if (this.canvas) {\r\n      this.canvas.sendToBack(this);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Moves an object to the top of the stack of drawn objects\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  bringToFront: function() {\r\n    if (this.group) {\r\n      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\r\n    }\r\n    else if (this.canvas) {\r\n      this.canvas.bringToFront(this);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Moves an object down in stack of drawn objects\r\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  sendBackwards: function(intersecting) {\r\n    if (this.group) {\r\n      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\r\n    }\r\n    else if (this.canvas) {\r\n      this.canvas.sendBackwards(this, intersecting);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Moves an object up in stack of drawn objects\r\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  bringForward: function(intersecting) {\r\n    if (this.group) {\r\n      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\r\n    }\r\n    else if (this.canvas) {\r\n      this.canvas.bringForward(this, intersecting);\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Moves an object to specified level in stack of drawn objects\r\n   * @param {Number} index New position of object\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */\r\n  moveTo: function(index) {\r\n    if (this.group && this.group.type !== 'activeSelection') {\r\n      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\r\n    }\r\n    else if (this.canvas) {\r\n      this.canvas.moveTo(this, index);\r\n    }\r\n    return this;\r\n  }\r\n});\r\n\r\n(function() {\r\n\r\n  var extend = fabric.util.object.extend,\r\n      originalSet = 'stateProperties';\r\n\r\n  /*\r\n    Depends on `stateProperties`\r\n  */\r\n  function saveProps(origin, destination, props) {\r\n    var tmpObj = { }, deep = true;\r\n    props.forEach(function(prop) {\r\n      tmpObj[prop] = origin[prop];\r\n    });\r\n\r\n    extend(origin[destination], tmpObj, deep);\r\n  }\r\n\r\n  function _isEqual(origValue, currentValue, firstPass) {\r\n    if (origValue === currentValue) {\r\n      // if the objects are identical, return\r\n      return true;\r\n    }\r\n    else if (Array.isArray(origValue)) {\r\n      if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\r\n        return false;\r\n      }\r\n      for (var i = 0, len = origValue.length; i < len; i++) {\r\n        if (!_isEqual(origValue[i], currentValue[i])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    else if (origValue && typeof origValue === 'object') {\r\n      var keys = Object.keys(origValue), key;\r\n      if (!currentValue ||\r\n          typeof currentValue !== 'object' ||\r\n          (!firstPass && keys.length !== Object.keys(currentValue).length)\r\n      ) {\r\n        return false;\r\n      }\r\n      for (var i = 0, len = keys.length; i < len; i++) {\r\n        key = keys[i];\r\n        // since clipPath is in the statefull cache list and the clipPath objects\r\n        // would be iterated as an object, this would lead to possible infinite recursion\r\n        // we do not want to compare those.\r\n        if (key === 'canvas' || key === 'group') {\r\n          continue;\r\n        }\r\n        if (!_isEqual(origValue[key], currentValue[key])) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n\r\n    /**\r\n     * Returns true if object state (one of its state properties) was changed\r\n     * @param {String} [propertySet] optional name for the set of property we want to save\r\n     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\r\n     */\r\n    hasStateChanged: function(propertySet) {\r\n      propertySet = propertySet || originalSet;\r\n      var dashedPropertySet = '_' + propertySet;\r\n      if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\r\n        return true;\r\n      }\r\n      return !_isEqual(this[dashedPropertySet], this, true);\r\n    },\r\n\r\n    /**\r\n     * Saves state of an object\r\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n     * @return {fabric.Object} thisArg\r\n     */\r\n    saveState: function(options) {\r\n      var propertySet = options && options.propertySet || originalSet,\r\n          destination = '_' + propertySet;\r\n      if (!this[destination]) {\r\n        return this.setupState(options);\r\n      }\r\n      saveProps(this, destination, this[propertySet]);\r\n      if (options && options.stateProperties) {\r\n        saveProps(this, destination, options.stateProperties);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Setups state of an object\r\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n     * @return {fabric.Object} thisArg\r\n     */\r\n    setupState: function(options) {\r\n      options = options || { };\r\n      var propertySet = options.propertySet || originalSet;\r\n      options.propertySet = propertySet;\r\n      this['_' + propertySet] = { };\r\n      this.saveState(options);\r\n      return this;\r\n    }\r\n  });\r\n})();\r\n(function() {\r\n\r\n  var degreesToRadians = fabric.util.degreesToRadians;\r\n\r\n  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n    /**\r\n     * Determines which corner has been clicked\r\n     * @private\r\n     * @param {Object} pointer The pointer indicating the mouse position\r\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\r\n     */\r\n    _findTargetCorner: function(pointer, forTouch) {\r\n      // objects in group, anykind, are not self modificable,\r\n      // must not return an hovered corner.\r\n      if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {\r\n        return false;\r\n      }\r\n\r\n      var ex = pointer.x,\r\n          ey = pointer.y,\r\n          xPoints,\r\n          lines, keys = Object.keys(this.oCoords),\r\n          j = keys.length - 1, i;\r\n      this.__corner = 0;\r\n\r\n      // cycle in reverse order so we pick first the one on top\r\n      for (; j >= 0; j--) {\r\n        i = keys[j];\r\n        if (!this.isControlVisible(i)) {\r\n          continue;\r\n        }\r\n\r\n        lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);\r\n        // // debugging\r\n        //\r\n        // this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\r\n        // this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\r\n        //\r\n        // this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\r\n        // this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\r\n        //\r\n        // this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\r\n        // this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\r\n        //\r\n        // this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\r\n        // this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\r\n\r\n        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);\r\n        if (xPoints !== 0 && xPoints % 2 === 1) {\r\n          this.__corner = i;\r\n          return i;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Calls a function for each control. The function gets called,\r\n     * with the control, the object that is calling the iterator and the control's key\r\n     * @param {Function} fn function to iterate over the controls over\r\n     */\r\n    forEachControl: function(fn) {\r\n      for (var i in this.controls) {\r\n        fn(this.controls[i], i, this);\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Sets the coordinates of the draggable boxes in the corners of\r\n     * the image used to scale/rotate it.\r\n     * note: if we would switch to ROUND corner area, all of this would disappear.\r\n     * everything would resolve to a single point and a pythagorean theorem for the distance\r\n     * @private\r\n     */\r\n    _setCornerCoords: function() {\r\n      var coords = this.oCoords;\r\n\r\n      for (var control in coords) {\r\n        var controlObject = this.controls[control];\r\n        coords[control].corner = controlObject.calcCornerCoords(\r\n          this.angle, this.cornerSize, coords[control].x, coords[control].y, false);\r\n        coords[control].touchCorner = controlObject.calcCornerCoords(\r\n          this.angle, this.touchCornerSize, coords[control].x, coords[control].y, true);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Draws a colored layer behind the object, inside its selection borders.\r\n     * Requires public options: padding, selectionBackgroundColor\r\n     * this function is called when the context is transformed\r\n     * has checks to be skipped when the object is on a staticCanvas\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    drawSelectionBackground: function(ctx) {\r\n      if (!this.selectionBackgroundColor ||\r\n        (this.canvas && !this.canvas.interactive) ||\r\n        (this.canvas && this.canvas._activeObject !== this)\r\n      ) {\r\n        return this;\r\n      }\r\n      ctx.save();\r\n      var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(),\r\n          vpt = this.canvas.viewportTransform;\r\n      ctx.translate(center.x, center.y);\r\n      ctx.scale(1 / vpt[0], 1 / vpt[3]);\r\n      ctx.rotate(degreesToRadians(this.angle));\r\n      ctx.fillStyle = this.selectionBackgroundColor;\r\n      ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\r\n      ctx.restore();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Draws borders of an object's bounding box.\r\n     * Requires public properties: width, height\r\n     * Requires public options: padding, borderColor\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @param {Object} styleOverride object to override the object style\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    drawBorders: function(ctx, styleOverride) {\r\n      styleOverride = styleOverride || {};\r\n      var wh = this._calculateCurrentDimensions(),\r\n          strokeWidth = this.borderScaleFactor,\r\n          width = wh.x + strokeWidth,\r\n          height = wh.y + strokeWidth,\r\n          hasControls = typeof styleOverride.hasControls !== 'undefined' ?\r\n            styleOverride.hasControls : this.hasControls,\r\n          shouldStroke = false;\r\n\r\n      ctx.save();\r\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\r\n\r\n      ctx.strokeRect(\r\n        -width / 2,\r\n        -height / 2,\r\n        width,\r\n        height\r\n      );\r\n\r\n      if (hasControls) {\r\n        ctx.beginPath();\r\n        this.forEachControl(function(control, key, fabricObject) {\r\n          // in this moment, the ctx is centered on the object.\r\n          // width and height of the above function are the size of the bbox.\r\n          if (control.withConnection && control.getVisibility(fabricObject, key)) {\r\n            // reset movement for each control\r\n            shouldStroke = true;\r\n            ctx.moveTo(control.x * width, control.y * height);\r\n            ctx.lineTo(\r\n              control.x * width + control.offsetX,\r\n              control.y * height + control.offsetY\r\n            );\r\n          }\r\n        });\r\n        if (shouldStroke) {\r\n          ctx.stroke();\r\n        }\r\n      }\r\n      ctx.restore();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Draws borders of an object's bounding box when it is inside a group.\r\n     * Requires public properties: width, height\r\n     * Requires public options: padding, borderColor\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @param {object} options object representing current object parameters\r\n     * @param {Object} styleOverride object to override the object style\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    drawBordersInGroup: function(ctx, options, styleOverride) {\r\n      styleOverride = styleOverride || {};\r\n      var bbox = fabric.util.sizeAfterTransform(this.width, this.height, options),\r\n          strokeWidth = this.strokeWidth,\r\n          strokeUniform = this.strokeUniform,\r\n          borderScaleFactor = this.borderScaleFactor,\r\n          width =\r\n            bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor,\r\n          height =\r\n            bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;\r\n      ctx.save();\r\n      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\r\n      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\r\n      ctx.strokeRect(\r\n        -width / 2,\r\n        -height / 2,\r\n        width,\r\n        height\r\n      );\r\n\r\n      ctx.restore();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Draws corners of an object's bounding box.\r\n     * Requires public properties: width, height\r\n     * Requires public options: cornerSize, padding\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @param {Object} styleOverride object to override the object style\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    drawControls: function(ctx, styleOverride) {\r\n      styleOverride = styleOverride || {};\r\n      ctx.save();\r\n      var retinaScaling = this.canvas.getRetinaScaling(), matrix, p;\r\n      ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\r\n      ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\r\n      if (!this.transparentCorners) {\r\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\r\n      }\r\n      this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);\r\n      this.setCoords();\r\n      if (this.group) {\r\n        // fabricJS does not really support drawing controls inside groups,\r\n        // this piece of code here helps having at least the control in places.\r\n        // If an application needs to show some objects as selected because of some UI state\r\n        // can still call Object._renderControls() on any object they desire, independently of groups.\r\n        // using no padding, circular controls and hiding the rotating cursor is higly suggested,\r\n        matrix = this.group.calcTransformMatrix();\r\n      }\r\n      this.forEachControl(function(control, key, fabricObject) {\r\n        p = fabricObject.oCoords[key];\r\n        if (control.getVisibility(fabricObject, key)) {\r\n          if (matrix) {\r\n            p = fabric.util.transformPoint(p, matrix);\r\n          }\r\n          control.render(ctx, p.x, p.y, styleOverride, fabricObject);\r\n        }\r\n      });\r\n      ctx.restore();\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns true if the specified control is visible, false otherwise.\r\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n     * @returns {Boolean} true if the specified control is visible, false otherwise\r\n     */\r\n    isControlVisible: function(controlKey) {\r\n      return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);\r\n    },\r\n\r\n    /**\r\n     * Sets the visibility of the specified control.\r\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    setControlVisible: function(controlKey, visible) {\r\n      if (!this._controlsVisibility) {\r\n        this._controlsVisibility = {};\r\n      }\r\n      this._controlsVisibility[controlKey] = visible;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the visibility state of object controls.\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\r\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\r\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\r\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\r\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\r\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\r\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\r\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\r\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    setControlsVisibility: function(options) {\r\n      options || (options = { });\r\n\r\n      for (var p in options) {\r\n        this.setControlVisible(p, options[p]);\r\n      }\r\n      return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * This callback function is called every time _discardActiveObject or _setActiveObject\r\n     * try to to deselect this object. If the function returns true, the process is cancelled\r\n     * @param {Object} [options] options sent from the upper functions\r\n     * @param {Event} [options.e] event if the process is generated by an event\r\n     */\r\n    onDeselect: function() {\r\n      // implemented by sub-classes, as needed.\r\n    },\r\n\r\n\r\n    /**\r\n     * This callback function is called every time _discardActiveObject or _setActiveObject\r\n     * try to to select this object. If the function returns true, the process is cancelled\r\n     * @param {Object} [options] options sent from the upper functions\r\n     * @param {Event} [options.e] event if the process is generated by an event\r\n     */\r\n    onSelect: function() {\r\n      // implemented by sub-classes, as needed.\r\n    }\r\n  });\r\n})();\r\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\r\n\r\n  /**\r\n   * Animation duration (in ms) for fx* methods\r\n   * @type Number\r\n   * @default\r\n   */\r\n  FX_DURATION: 500,\r\n\r\n  /**\r\n   * Centers object horizontally with animation.\r\n   * @param {fabric.Object} object Object to center\r\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n   * @param {Function} [callbacks.onComplete] Invoked on completion\r\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n   * @return {fabric.AnimationContext} context\r\n   */\r\n  fxCenterObjectH: function (object, callbacks) {\r\n    callbacks = callbacks || { };\r\n\r\n    var empty = function() { },\r\n        onComplete = callbacks.onComplete || empty,\r\n        onChange = callbacks.onChange || empty,\r\n        _this = this;\r\n\r\n    return fabric.util.animate({\r\n      target: this,\r\n      startValue: object.left,\r\n      endValue: this.getCenterPoint().x,\r\n      duration: this.FX_DURATION,\r\n      onChange: function(value) {\r\n        object.set('left', value);\r\n        _this.requestRenderAll();\r\n        onChange();\r\n      },\r\n      onComplete: function() {\r\n        object.setCoords();\r\n        onComplete();\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Centers object vertically with animation.\r\n   * @param {fabric.Object} object Object to center\r\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n   * @param {Function} [callbacks.onComplete] Invoked on completion\r\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n   * @return {fabric.AnimationContext} context\r\n   */\r\n  fxCenterObjectV: function (object, callbacks) {\r\n    callbacks = callbacks || { };\r\n\r\n    var empty = function() { },\r\n        onComplete = callbacks.onComplete || empty,\r\n        onChange = callbacks.onChange || empty,\r\n        _this = this;\r\n\r\n    return fabric.util.animate({\r\n      target: this,\r\n      startValue: object.top,\r\n      endValue: this.getCenterPoint().y,\r\n      duration: this.FX_DURATION,\r\n      onChange: function(value) {\r\n        object.set('top', value);\r\n        _this.requestRenderAll();\r\n        onChange();\r\n      },\r\n      onComplete: function() {\r\n        object.setCoords();\r\n        onComplete();\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Same as `fabric.Canvas#remove` but animated\r\n   * @param {fabric.Object} object Object to remove\r\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n   * @param {Function} [callbacks.onComplete] Invoked on completion\r\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n   * @return {fabric.AnimationContext} context\r\n   */\r\n  fxRemove: function (object, callbacks) {\r\n    callbacks = callbacks || { };\r\n\r\n    var empty = function() { },\r\n        onComplete = callbacks.onComplete || empty,\r\n        onChange = callbacks.onChange || empty,\r\n        _this = this;\r\n\r\n    return fabric.util.animate({\r\n      target: this,\r\n      startValue: object.opacity,\r\n      endValue: 0,\r\n      duration: this.FX_DURATION,\r\n      onChange: function(value) {\r\n        object.set('opacity', value);\r\n        _this.requestRenderAll();\r\n        onChange();\r\n      },\r\n      onComplete: function () {\r\n        _this.remove(object);\r\n        onComplete();\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\r\n  /**\r\n   * Animates object's properties\r\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\r\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\r\n   * @return {fabric.Object} thisArg\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\r\n   * @return {fabric.AnimationContext | fabric.AnimationContext[]} animation context (or an array if passed multiple properties)\r\n   *\r\n   * As object — multiple properties\r\n   *\r\n   * object.animate({ left: ..., top: ... });\r\n   * object.animate({ left: ..., top: ... }, { duration: ... });\r\n   *\r\n   * As string — one property\r\n   *\r\n   * object.animate('left', ...);\r\n   * object.animate('left', { duration: ... });\r\n   *\r\n   */\r\n  animate: function () {\r\n    if (arguments[0] && typeof arguments[0] === 'object') {\r\n      var propsToAnimate = [], prop, skipCallbacks, out = [];\r\n      for (prop in arguments[0]) {\r\n        propsToAnimate.push(prop);\r\n      }\r\n      for (var i = 0, len = propsToAnimate.length; i < len; i++) {\r\n        prop = propsToAnimate[i];\r\n        skipCallbacks = i !== len - 1;\r\n        out.push(this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks));\r\n      }\r\n      return out;\r\n    }\r\n    else {\r\n      return this._animate.apply(this, arguments);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   * @param {String} property Property to animate\r\n   * @param {String} to Value to animate to\r\n   * @param {Object} [options] Options object\r\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\r\n   */\r\n  _animate: function(property, to, options, skipCallbacks) {\r\n    var _this = this, propPair;\r\n\r\n    to = to.toString();\r\n\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n    else {\r\n      options = fabric.util.object.clone(options);\r\n    }\r\n\r\n    if (~property.indexOf('.')) {\r\n      propPair = property.split('.');\r\n    }\r\n\r\n    var propIsColor =\r\n      _this.colorProperties.indexOf(property) > -1 ||\r\n      (propPair && _this.colorProperties.indexOf(propPair[1]) > -1);\r\n\r\n    var currentValue = propPair\r\n      ? this.get(propPair[0])[propPair[1]]\r\n      : this.get(property);\r\n\r\n    if (!('from' in options)) {\r\n      options.from = currentValue;\r\n    }\r\n\r\n    if (!propIsColor) {\r\n      if (~to.indexOf('=')) {\r\n        to = currentValue + parseFloat(to.replace('=', ''));\r\n      }\r\n      else {\r\n        to = parseFloat(to);\r\n      }\r\n    }\r\n\r\n    var _options = {\r\n      target: this,\r\n      startValue: options.from,\r\n      endValue: to,\r\n      byValue: options.by,\r\n      easing: options.easing,\r\n      duration: options.duration,\r\n      abort: options.abort && function(value, valueProgress, timeProgress) {\r\n        return options.abort.call(_this, value, valueProgress, timeProgress);\r\n      },\r\n      onChange: function (value, valueProgress, timeProgress) {\r\n        if (propPair) {\r\n          _this[propPair[0]][propPair[1]] = value;\r\n        }\r\n        else {\r\n          _this.set(property, value);\r\n        }\r\n        if (skipCallbacks) {\r\n          return;\r\n        }\r\n        options.onChange && options.onChange(value, valueProgress, timeProgress);\r\n      },\r\n      onComplete: function (value, valueProgress, timeProgress) {\r\n        if (skipCallbacks) {\r\n          return;\r\n        }\r\n\r\n        _this.setCoords();\r\n        options.onComplete && options.onComplete(value, valueProgress, timeProgress);\r\n      }\r\n    };\r\n\r\n    if (propIsColor) {\r\n      return fabric.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);\r\n    }\r\n    else {\r\n      return fabric.util.animate(_options);\r\n    }\r\n  }\r\n});\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      extend = fabric.util.object.extend;\r\n\r\n  if (fabric.Rect) {\r\n    fabric.warn('fabric.Rect is already defined');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Rectangle class\r\n   * @class fabric.Rect\r\n   * @extends fabric.Object\r\n   * @return {fabric.Rect} thisArg\r\n   * @see {@link fabric.Rect#initialize} for constructor definition\r\n   */\r\n  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\r\n\r\n    /**\r\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */\r\n    stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type: 'rect',\r\n\r\n    /**\r\n     * Horizontal border radius\r\n     * @type Number\r\n     * @default\r\n     */\r\n    rx:   0,\r\n\r\n    /**\r\n     * Vertical border radius\r\n     * @type Number\r\n     * @default\r\n     */\r\n    ry:   0,\r\n\r\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */\r\n    initialize: function(options) {\r\n      this.callSuper('initialize', options);\r\n      this._initRxRy();\r\n    },\r\n\r\n    /**\r\n     * Initializes rx/ry attributes\r\n     * @private\r\n     */\r\n    _initRxRy: function() {\r\n      if (this.rx && !this.ry) {\r\n        this.ry = this.rx;\r\n      }\r\n      else if (this.ry && !this.rx) {\r\n        this.rx = this.ry;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _render: function(ctx) {\r\n\r\n      // 1x1 case (used in spray brush) optimization was removed because\r\n      // with caching and higher zoom level this makes more damage than help\r\n\r\n      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,\r\n          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,\r\n          w = this.width,\r\n          h = this.height,\r\n          x = -this.width / 2,\r\n          y = -this.height / 2,\r\n          isRounded = rx !== 0 || ry !== 0,\r\n          /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */\r\n          k = 1 - 0.5522847498;\r\n      ctx.beginPath();\r\n\r\n      ctx.moveTo(x + rx, y);\r\n\r\n      ctx.lineTo(x + w - rx, y);\r\n      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\r\n\r\n      ctx.lineTo(x + w, y + h - ry);\r\n      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\r\n\r\n      ctx.lineTo(x + rx, y + h);\r\n      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\r\n\r\n      ctx.lineTo(x, y + ry);\r\n      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\r\n\r\n      ctx.closePath();\r\n\r\n      this._renderPaintInOrder(ctx);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));\r\n    },\r\n\r\n    \r\n  });\r\n\r\n  \r\n\r\n  /**\r\n   * Returns {@link fabric.Rect} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Rect\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\r\n   */\r\n  fabric.Rect.fromObject = function(object, callback) {\r\n    return fabric.Object._fromObject('Rect', object, callback);\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      extend = fabric.util.object.extend,\r\n      min = fabric.util.array.min,\r\n      max = fabric.util.array.max,\r\n      toFixed = fabric.util.toFixed,\r\n      projectStrokeOnPoints = fabric.util.projectStrokeOnPoints;\r\n\r\n  if (fabric.Polyline) {\r\n    fabric.warn('fabric.Polyline is already defined');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Polyline class\r\n   * @class fabric.Polyline\r\n   * @extends fabric.Object\r\n   * @see {@link fabric.Polyline#initialize} for constructor definition\r\n   */\r\n  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type: 'polyline',\r\n\r\n    /**\r\n     * Points array\r\n     * @type Array\r\n     * @default\r\n     */\r\n    points: null,\r\n\r\n    /**\r\n     * WARNING: Feature in progress\r\n     * Calculate the exact bounding box taking in account strokeWidth on acute angles\r\n     * this will be turned to true by default on fabric 6.0\r\n     * maybe will be left in as an optimization since calculations may be slow\r\n     * @deprecated\r\n     * @type Boolean\r\n     * @default false\r\n     */\r\n    exactBoundingBox: false,\r\n\r\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Array} points Array of points (where each point is an object with x and y)\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Polyline} thisArg\r\n     * @example\r\n     * var poly = new fabric.Polyline([\r\n     *     { x: 10, y: 10 },\r\n     *     { x: 50, y: 30 },\r\n     *     { x: 40, y: 70 },\r\n     *     { x: 60, y: 50 },\r\n     *     { x: 100, y: 150 },\r\n     *     { x: 40, y: 100 }\r\n     *   ], {\r\n     *   stroke: 'red',\r\n     *   left: 100,\r\n     *   top: 100\r\n     * });\r\n     */\r\n    initialize: function(points, options) {\r\n      options = options || {};\r\n      this.points = points || [];\r\n      this.callSuper('initialize', options);\r\n      this._setPositionDimensions(options);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _projectStrokeOnPoints: function () {\r\n      return projectStrokeOnPoints(this.points, this, true);\r\n    },\r\n\r\n    _setPositionDimensions: function(options) {\r\n      var calcDim = this._calcDimensions(options), correctLeftTop,\r\n          correctSize = this.exactBoundingBox ? this.strokeWidth : 0;\r\n      this.width = calcDim.width - correctSize;\r\n      this.height = calcDim.height - correctSize;\r\n      if (!options.fromSVG) {\r\n        correctLeftTop = this.translateToGivenOrigin(\r\n          {\r\n            // this looks bad, but is one way to keep it optional for now.\r\n            x: calcDim.left - this.strokeWidth / 2 + correctSize / 2,\r\n            y: calcDim.top - this.strokeWidth / 2 + correctSize / 2\r\n          },\r\n          'left',\r\n          'top',\r\n          this.originX,\r\n          this.originY\r\n        );\r\n      }\r\n      if (typeof options.left === 'undefined') {\r\n        this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;\r\n      }\r\n      if (typeof options.top === 'undefined') {\r\n        this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;\r\n      }\r\n      this.pathOffset = {\r\n        x: calcDim.left + this.width / 2 + correctSize / 2,\r\n        y: calcDim.top + this.height / 2 + correctSize / 2\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Calculate the polygon min and max point from points array,\r\n     * returning an object with left, top, width, height to measure the\r\n     * polygon size\r\n     * @return {Object} object.left X coordinate of the polygon leftmost point\r\n     * @return {Object} object.top Y coordinate of the polygon topmost point\r\n     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\r\n     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\r\n     * @private\r\n     */\r\n    _calcDimensions: function() {\r\n\r\n      var points = this.exactBoundingBox ? this._projectStrokeOnPoints() : this.points,\r\n          minX = min(points, 'x') || 0,\r\n          minY = min(points, 'y') || 0,\r\n          maxX = max(points, 'x') || 0,\r\n          maxY = max(points, 'y') || 0,\r\n          width = (maxX - minX),\r\n          height = (maxY - minY);\r\n\r\n      return {\r\n        left: minX,\r\n        top: minY,\r\n        width: width,\r\n        height: height,\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      return extend(this.callSuper('toObject', propertiesToInclude), {\r\n        points: this.points.concat()\r\n      });\r\n    },\r\n\r\n    \r\n\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    commonRender: function(ctx) {\r\n      var point, len = this.points.length,\r\n          x = this.pathOffset.x,\r\n          y = this.pathOffset.y;\r\n\r\n      if (!len || isNaN(this.points[len - 1].y)) {\r\n        // do not draw if no points or odd points\r\n        // NaN comes from parseFloat of a empty string in parser\r\n        return false;\r\n      }\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\r\n      for (var i = 0; i < len; i++) {\r\n        point = this.points[i];\r\n        ctx.lineTo(point.x - x, point.y - y);\r\n      }\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _render: function(ctx) {\r\n      if (!this.commonRender(ctx)) {\r\n        return;\r\n      }\r\n      this._renderPaintInOrder(ctx);\r\n    },\r\n\r\n    /**\r\n     * Returns complexity of an instance\r\n     * @return {Number} complexity of this instance\r\n     */\r\n    complexity: function() {\r\n      return this.get('points').length;\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  /**\r\n   * Returns fabric.Polyline instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Polyline\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n   */\r\n  fabric.Polyline.fromObject = function(object, callback) {\r\n    return fabric.Object._fromObject('Polyline', object, callback, 'points');\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      min = fabric.util.array.min,\r\n      max = fabric.util.array.max,\r\n      extend = fabric.util.object.extend,\r\n      clone = fabric.util.object.clone,\r\n      toFixed = fabric.util.toFixed;\r\n\r\n  if (fabric.Path) {\r\n    fabric.warn('fabric.Path is already defined');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Path class\r\n   * @class fabric.Path\r\n   * @extends fabric.Object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\r\n   * @see {@link fabric.Path#initialize} for constructor definition\r\n   */\r\n  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type: 'path',\r\n\r\n    /**\r\n     * Array of path points\r\n     * @type Array\r\n     * @default\r\n     */\r\n    path: null,\r\n\r\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),\r\n\r\n    stateProperties: fabric.Object.prototype.stateProperties.concat('path'),\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Path} thisArg\r\n     */\r\n    initialize: function (path, options) {\r\n      options = clone(options || {});\r\n      delete options.path;\r\n      this.callSuper('initialize', options);\r\n      this._setPath(path || [], options);\r\n    },\r\n\r\n    /**\r\n    * @private\r\n    * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n    * @param {Object} [options] Options object\r\n    */\r\n    _setPath: function (path, options) {\r\n      this.path = fabric.util.makePathSimpler(\r\n        Array.isArray(path) ? path : fabric.util.parsePath(path)\r\n      );\r\n\r\n      fabric.Polyline.prototype._setPositionDimensions.call(this, options || {});\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx context to render path on\r\n     */\r\n    _renderPathCommands: function(ctx) {\r\n      var current, // current instruction\r\n          subpathStartX = 0,\r\n          subpathStartY = 0,\r\n          x = 0, // current x\r\n          y = 0, // current y\r\n          controlX = 0, // current control point x\r\n          controlY = 0, // current control point y\r\n          l = -this.pathOffset.x,\r\n          t = -this.pathOffset.y;\r\n\r\n      ctx.beginPath();\r\n\r\n      for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n        current = this.path[i];\r\n\r\n        switch (current[0]) { // first letter\r\n\r\n          case 'L': // lineto, absolute\r\n            x = current[1];\r\n            y = current[2];\r\n            ctx.lineTo(x + l, y + t);\r\n            break;\r\n\r\n          case 'M': // moveTo, absolute\r\n            x = current[1];\r\n            y = current[2];\r\n            subpathStartX = x;\r\n            subpathStartY = y;\r\n            ctx.moveTo(x + l, y + t);\r\n            break;\r\n\r\n          case 'C': // bezierCurveTo, absolute\r\n            x = current[5];\r\n            y = current[6];\r\n            controlX = current[3];\r\n            controlY = current[4];\r\n            ctx.bezierCurveTo(\r\n              current[1] + l,\r\n              current[2] + t,\r\n              controlX + l,\r\n              controlY + t,\r\n              x + l,\r\n              y + t\r\n            );\r\n            break;\r\n\r\n          case 'Q': // quadraticCurveTo, absolute\r\n            ctx.quadraticCurveTo(\r\n              current[1] + l,\r\n              current[2] + t,\r\n              current[3] + l,\r\n              current[4] + t\r\n            );\r\n            x = current[3];\r\n            y = current[4];\r\n            controlX = current[1];\r\n            controlY = current[2];\r\n            break;\r\n\r\n          case 'z':\r\n          case 'Z':\r\n            x = subpathStartX;\r\n            y = subpathStartY;\r\n            ctx.closePath();\r\n            break;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx context to render path on\r\n     */\r\n    _render: function(ctx) {\r\n      this._renderPathCommands(ctx);\r\n      this._renderPaintInOrder(ctx);\r\n    },\r\n\r\n    /**\r\n     * Returns string representation of an instance\r\n     * @return {String} string representation of an instance\r\n     */\r\n    toString: function() {\r\n      return '#<fabric.Path (' + this.complexity() +\r\n        '): { \"top\": ' + this.top + ', \"left\": ' + this.left + ' }>';\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      return extend(this.callSuper('toObject', propertiesToInclude), {\r\n        path: this.path.map(function(item) { return item.slice(); }),\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Returns dataless object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toDatalessObject: function(propertiesToInclude) {\r\n      var o = this.toObject(['sourcePath'].concat(propertiesToInclude));\r\n      if (o.sourcePath) {\r\n        delete o.path;\r\n      }\r\n      return o;\r\n    },\r\n\r\n    \r\n\r\n    /**\r\n     * Returns number representation of an instance complexity\r\n     * @return {Number} complexity of this instance\r\n     */\r\n    complexity: function() {\r\n      return this.path.length;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _calcDimensions: function() {\r\n\r\n      var aX = [],\r\n          aY = [],\r\n          current, // current instruction\r\n          subpathStartX = 0,\r\n          subpathStartY = 0,\r\n          x = 0, // current x\r\n          y = 0, // current y\r\n          bounds;\r\n\r\n      for (var i = 0, len = this.path.length; i < len; ++i) {\r\n\r\n        current = this.path[i];\r\n\r\n        switch (current[0]) { // first letter\r\n\r\n          case 'L': // lineto, absolute\r\n            x = current[1];\r\n            y = current[2];\r\n            bounds = [];\r\n            break;\r\n\r\n          case 'M': // moveTo, absolute\r\n            x = current[1];\r\n            y = current[2];\r\n            subpathStartX = x;\r\n            subpathStartY = y;\r\n            bounds = [];\r\n            break;\r\n\r\n          case 'C': // bezierCurveTo, absolute\r\n            bounds = fabric.util.getBoundsOfCurve(x, y,\r\n              current[1],\r\n              current[2],\r\n              current[3],\r\n              current[4],\r\n              current[5],\r\n              current[6]\r\n            );\r\n            x = current[5];\r\n            y = current[6];\r\n            break;\r\n\r\n          case 'Q': // quadraticCurveTo, absolute\r\n            bounds = fabric.util.getBoundsOfCurve(x, y,\r\n              current[1],\r\n              current[2],\r\n              current[1],\r\n              current[2],\r\n              current[3],\r\n              current[4]\r\n            );\r\n            x = current[3];\r\n            y = current[4];\r\n            break;\r\n\r\n          case 'z':\r\n          case 'Z':\r\n            x = subpathStartX;\r\n            y = subpathStartY;\r\n            break;\r\n        }\r\n        bounds.forEach(function (point) {\r\n          aX.push(point.x);\r\n          aY.push(point.y);\r\n        });\r\n        aX.push(x);\r\n        aY.push(y);\r\n      }\r\n\r\n      var minX = min(aX) || 0,\r\n          minY = min(aY) || 0,\r\n          maxX = max(aX) || 0,\r\n          maxY = max(aY) || 0,\r\n          deltaX = maxX - minX,\r\n          deltaY = maxY - minY;\r\n\r\n      return {\r\n        left: minX,\r\n        top: minY,\r\n        width: deltaX,\r\n        height: deltaY\r\n      };\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Creates an instance of fabric.Path from an object\r\n   * @static\r\n   * @memberOf fabric.Path\r\n   * @param {Object} object\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n   */\r\n  fabric.Path.fromObject = function(object, callback) {\r\n    if (typeof object.sourcePath === 'string') {\r\n      var pathUrl = object.sourcePath;\r\n      fabric.loadSVGFromURL(pathUrl, function (elements) {\r\n        var path = elements[0];\r\n        path.setOptions(object);\r\n        callback && callback(path);\r\n      });\r\n    }\r\n    else {\r\n      fabric.Object._fromObject('Path', object, callback, 'path');\r\n    }\r\n  };\r\n\r\n  \r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      min = fabric.util.array.min,\r\n      max = fabric.util.array.max;\r\n\r\n  if (fabric.Group) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Group class\r\n   * @class fabric.Group\r\n   * @extends fabric.Object\r\n   * @mixes fabric.Collection\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n   * @see {@link fabric.Group#initialize} for constructor definition\r\n   */\r\n  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type: 'group',\r\n\r\n    /**\r\n     * Width of stroke\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeWidth: 0,\r\n\r\n    /**\r\n     * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    subTargetCheck: false,\r\n\r\n    /**\r\n     * Groups are container, do not render anything on theyr own, ence no cache properties\r\n     * @type Array\r\n     * @default\r\n     */\r\n    cacheProperties: [],\r\n\r\n    /**\r\n     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\r\n     * available setting this boolean to true.\r\n     * @type Boolean\r\n     * @since 2.0.0\r\n     * @default\r\n     */\r\n    useSetOnGroup: false,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} objects Group objects\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\r\n     * @return {Object} thisArg\r\n     */\r\n    initialize: function(objects, options, isAlreadyGrouped) {\r\n      options = options || {};\r\n      this._objects = [];\r\n      // if objects enclosed in a group have been grouped already,\r\n      // we cannot change properties of objects.\r\n      // Thus we need to set options to group without objects,\r\n      isAlreadyGrouped && this.callSuper('initialize', options);\r\n      this._objects = objects || [];\r\n      for (var i = this._objects.length; i--; ) {\r\n        this._objects[i].group = this;\r\n      }\r\n\r\n      if (!isAlreadyGrouped) {\r\n        var center = options && options.centerPoint;\r\n        // we want to set origins before calculating the bounding box.\r\n        // so that the topleft can be set with that in mind.\r\n        // if specific top and left are passed, are overwritten later\r\n        // with the callSuper('initialize', options)\r\n        if (options.originX !== undefined) {\r\n          this.originX = options.originX;\r\n        }\r\n        if (options.originY !== undefined) {\r\n          this.originY = options.originY;\r\n        }\r\n        // if coming from svg i do not want to calc bounds.\r\n        // i assume width and height are passed along options\r\n        center || this._calcBounds();\r\n        this._updateObjectsCoords(center);\r\n        delete options.centerPoint;\r\n        this.callSuper('initialize', options);\r\n      }\r\n      else {\r\n        this._updateObjectsACoords();\r\n      }\r\n\r\n      this.setCoords();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _updateObjectsACoords: function() {\r\n      var skipControls = true;\r\n      for (var i = this._objects.length; i--; ){\r\n        this._objects[i].setCoords(skipControls);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n     */\r\n    _updateObjectsCoords: function(center) {\r\n      var center = center || this.getCenterPoint();\r\n      for (var i = this._objects.length; i--; ){\r\n        this._updateObjectCoords(this._objects[i], center);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} object\r\n     * @param {fabric.Point} center, current center of group.\r\n     */\r\n    _updateObjectCoords: function(object, center) {\r\n      var objectLeft = object.left,\r\n          objectTop = object.top,\r\n          skipControls = true;\r\n\r\n      object.set({\r\n        left: objectLeft - center.x,\r\n        top: objectTop - center.y\r\n      });\r\n      object.group = this;\r\n      object.setCoords(skipControls);\r\n    },\r\n\r\n    /**\r\n     * Returns string represenation of a group\r\n     * @return {String}\r\n     */\r\n    toString: function() {\r\n      return '#<fabric.Group: (' + this.complexity() + ')>';\r\n    },\r\n\r\n    /**\r\n     * Adds an object to a group; Then recalculates group's dimension, position.\r\n     * @param {Object} object\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */\r\n    addWithUpdate: function(object) {\r\n      var nested = !!this.group;\r\n      this._restoreObjectsState();\r\n      fabric.util.resetObjectTransform(this);\r\n      if (object) {\r\n        if (nested) {\r\n          // if this group is inside another group, we need to pre transform the object\r\n          fabric.util.removeTransformFromObject(object, this.group.calcTransformMatrix());\r\n        }\r\n        this._objects.push(object);\r\n        object.group = this;\r\n        object._set('canvas', this.canvas);\r\n      }\r\n      this._calcBounds();\r\n      this._updateObjectsCoords();\r\n      this.dirty = true;\r\n      if (nested) {\r\n        this.group.addWithUpdate();\r\n      }\r\n      else {\r\n        this.setCoords();\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Removes an object from a group; Then recalculates group's dimension, position.\r\n     * @param {Object} object\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */\r\n    removeWithUpdate: function(object) {\r\n      this._restoreObjectsState();\r\n      fabric.util.resetObjectTransform(this);\r\n\r\n      this.remove(object);\r\n      this._calcBounds();\r\n      this._updateObjectsCoords();\r\n      this.setCoords();\r\n      this.dirty = true;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _onObjectAdded: function(object) {\r\n      this.dirty = true;\r\n      object.group = this;\r\n      object._set('canvas', this.canvas);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _onObjectRemoved: function(object) {\r\n      this.dirty = true;\r\n      delete object.group;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _set: function(key, value) {\r\n      var i = this._objects.length;\r\n      if (this.useSetOnGroup) {\r\n        while (i--) {\r\n          this._objects[i].setOnGroup(key, value);\r\n        }\r\n      }\r\n      if (key === 'canvas') {\r\n        while (i--) {\r\n          this._objects[i]._set(key, value);\r\n        }\r\n      }\r\n      fabric.Object.prototype._set.call(this, key, value);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      var _includeDefaultValues = this.includeDefaultValues;\r\n      var objsToObject = this._objects\r\n        .filter(function (obj) {\r\n          return !obj.excludeFromExport;\r\n        })\r\n        .map(function (obj) {\r\n          var originalDefaults = obj.includeDefaultValues;\r\n          obj.includeDefaultValues = _includeDefaultValues;\r\n          var _obj = obj.toObject(propertiesToInclude);\r\n          obj.includeDefaultValues = originalDefaults;\r\n          return _obj;\r\n        });\r\n      var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\r\n      obj.objects = objsToObject;\r\n      return obj;\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance, in dataless mode.\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */\r\n    toDatalessObject: function(propertiesToInclude) {\r\n      var objsToObject, sourcePath = this.sourcePath;\r\n      if (sourcePath) {\r\n        objsToObject = sourcePath;\r\n      }\r\n      else {\r\n        var _includeDefaultValues = this.includeDefaultValues;\r\n        objsToObject = this._objects.map(function(obj) {\r\n          var originalDefaults = obj.includeDefaultValues;\r\n          obj.includeDefaultValues = _includeDefaultValues;\r\n          var _obj = obj.toDatalessObject(propertiesToInclude);\r\n          obj.includeDefaultValues = originalDefaults;\r\n          return _obj;\r\n        });\r\n      }\r\n      var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\r\n      obj.objects = objsToObject;\r\n      return obj;\r\n    },\r\n\r\n    /**\r\n     * Renders instance on a given context\r\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\r\n     */\r\n    render: function(ctx) {\r\n      this._transformDone = true;\r\n      this.callSuper('render', ctx);\r\n      this._transformDone = false;\r\n    },\r\n\r\n    /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group is already cached.\r\n     * @return {Boolean}\r\n     */\r\n    shouldCache: function() {\r\n      var ownCache = fabric.Object.prototype.shouldCache.call(this);\r\n      if (ownCache) {\r\n        for (var i = 0, len = this._objects.length; i < len; i++) {\r\n          if (this._objects[i].willDrawShadow()) {\r\n            this.ownCaching = false;\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return ownCache;\r\n    },\r\n\r\n    /**\r\n     * Check if this object or a child object will cast a shadow\r\n     * @return {Boolean}\r\n     */\r\n    willDrawShadow: function() {\r\n      if (fabric.Object.prototype.willDrawShadow.call(this)) {\r\n        return true;\r\n      }\r\n      for (var i = 0, len = this._objects.length; i < len; i++) {\r\n        if (this._objects[i].willDrawShadow()) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Check if this group or its parent group are caching, recursively up\r\n     * @return {Boolean}\r\n     */\r\n    isOnACache: function() {\r\n      return this.ownCaching || (this.group && this.group.isOnACache());\r\n    },\r\n\r\n    /**\r\n     * Execute the drawing operation for an object on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    drawObject: function(ctx) {\r\n      for (var i = 0, len = this._objects.length; i < len; i++) {\r\n        this._objects[i].render(ctx);\r\n      }\r\n      this._drawClipPath(ctx, this.clipPath);\r\n    },\r\n\r\n    /**\r\n     * Check if cache is dirty\r\n     */\r\n    isCacheDirty: function(skipCanvas) {\r\n      if (this.callSuper('isCacheDirty', skipCanvas)) {\r\n        return true;\r\n      }\r\n      if (!this.statefullCache) {\r\n        return false;\r\n      }\r\n      for (var i = 0, len = this._objects.length; i < len; i++) {\r\n        if (this._objects[i].isCacheDirty(true)) {\r\n          if (this._cacheCanvas) {\r\n            // if this group has not a cache canvas there is nothing to clean\r\n            var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\r\n            this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Restores original state of each of group objects (original state is that which was before group was created).\r\n     * if the nested boolean is true, the original state will be restored just for the\r\n     * first group and not for all the group chain\r\n     * @private\r\n     * @param {Boolean} nested tell the function to restore object state up to the parent group and not more\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */\r\n    _restoreObjectsState: function() {\r\n      var groupMatrix = this.calcOwnMatrix();\r\n      this._objects.forEach(function(object) {\r\n        // instead of using _this = this;\r\n        fabric.util.addTransformToObject(object, groupMatrix);\r\n        delete object.group;\r\n        object.setCoords();\r\n      });\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys a group (restoring state of its objects)\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */\r\n    destroy: function() {\r\n      // when group is destroyed objects needs to get a repaint to be eventually\r\n      // displayed on canvas.\r\n      this._objects.forEach(function(object) {\r\n        object.set('dirty', true);\r\n      });\r\n      return this._restoreObjectsState();\r\n    },\r\n\r\n    dispose: function () {\r\n      this.callSuper('dispose');\r\n      this.forEachObject(function (object) {\r\n        object.dispose && object.dispose();\r\n      });\r\n      this._objects = [];\r\n    },\r\n\r\n    /**\r\n     * make a group an active selection, remove the group from canvas\r\n     * the group has to be on canvas for this to work.\r\n     * @return {fabric.ActiveSelection} thisArg\r\n     * @chainable\r\n     */\r\n    toActiveSelection: function() {\r\n      if (!this.canvas) {\r\n        return;\r\n      }\r\n      var objects = this._objects, canvas = this.canvas;\r\n      this._objects = [];\r\n      var options = this.toObject();\r\n      delete options.objects;\r\n      var activeSelection = new fabric.ActiveSelection([]);\r\n      activeSelection.set(options);\r\n      activeSelection.type = 'activeSelection';\r\n      canvas.remove(this);\r\n      objects.forEach(function(object) {\r\n        object.group = activeSelection;\r\n        object.dirty = true;\r\n        canvas.add(object);\r\n      });\r\n      activeSelection.canvas = canvas;\r\n      activeSelection._objects = objects;\r\n      canvas._activeObject = activeSelection;\r\n      activeSelection.setCoords();\r\n      return activeSelection;\r\n    },\r\n\r\n    /**\r\n     * Destroys a group (restoring state of its objects)\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */\r\n    ungroupOnCanvas: function() {\r\n      return this._restoreObjectsState();\r\n    },\r\n\r\n    /**\r\n     * Sets coordinates of all objects inside group\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */\r\n    setObjectsCoords: function() {\r\n      var skipControls = true;\r\n      this.forEachObject(function(object) {\r\n        object.setCoords(skipControls);\r\n      });\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _calcBounds: function(onlyWidthHeight) {\r\n      var aX = [],\r\n          aY = [],\r\n          o, prop, coords,\r\n          props = ['tr', 'br', 'bl', 'tl'],\r\n          i = 0, iLen = this._objects.length,\r\n          j, jLen = props.length;\r\n\r\n      for ( ; i < iLen; ++i) {\r\n        o = this._objects[i];\r\n        coords = o.calcACoords();\r\n        for (j = 0; j < jLen; j++) {\r\n          prop = props[j];\r\n          aX.push(coords[prop].x);\r\n          aY.push(coords[prop].y);\r\n        }\r\n        o.aCoords = coords;\r\n      }\r\n\r\n      this._getBounds(aX, aY, onlyWidthHeight);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _getBounds: function(aX, aY, onlyWidthHeight) {\r\n      var minXY = new fabric.Point(min(aX), min(aY)),\r\n          maxXY = new fabric.Point(max(aX), max(aY)),\r\n          top = minXY.y || 0, left = minXY.x || 0,\r\n          width = (maxXY.x - minXY.x) || 0,\r\n          height = (maxXY.y - minXY.y) || 0;\r\n      this.width = width;\r\n      this.height = height;\r\n      if (!onlyWidthHeight) {\r\n        // the bounding box always finds the topleft most corner.\r\n        // whatever is the group origin, we set up here the left/top position.\r\n        this.setPositionByOrigin({ x: left, y: top }, 'left', 'top');\r\n      }\r\n    },\r\n\r\n    \r\n  });\r\n\r\n  /**\r\n   * Returns {@link fabric.Group} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Group\r\n   * @param {Object} object Object to create a group from\r\n   * @param {Function} [callback] Callback to invoke when an group instance is created\r\n   */\r\n  fabric.Group.fromObject = function(object, callback) {\r\n    var objects = object.objects,\r\n        options = fabric.util.object.clone(object, true);\r\n    delete options.objects;\r\n    if (typeof objects === 'string') {\r\n      // it has to be an url or something went wrong.\r\n      fabric.loadSVGFromURL(objects, function (elements) {\r\n        var group = fabric.util.groupSVGElements(elements, object, objects);\r\n        group.set(options);\r\n        callback && callback(group);\r\n      });\r\n      return;\r\n    }\r\n    fabric.util.enlivenObjects(objects, function (enlivenedObjects) {\r\n      var options = fabric.util.object.clone(object, true);\r\n      delete options.objects;\r\n      fabric.util.enlivenObjectEnlivables(object, options, function () {\r\n        callback && callback(new fabric.Group(enlivenedObjects, options, true));\r\n      });\r\n    });\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { });\r\n\r\n  if (fabric.ActiveSelection) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Group class\r\n   * @class fabric.ActiveSelection\r\n   * @extends fabric.Group\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n   * @see {@link fabric.ActiveSelection#initialize} for constructor definition\r\n   */\r\n  fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type: 'activeSelection',\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} objects ActiveSelection objects\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */\r\n    initialize: function(objects, options) {\r\n      options = options || {};\r\n      this._objects = objects || [];\r\n      for (var i = this._objects.length; i--; ) {\r\n        this._objects[i].group = this;\r\n      }\r\n\r\n      if (options.originX) {\r\n        this.originX = options.originX;\r\n      }\r\n      if (options.originY) {\r\n        this.originY = options.originY;\r\n      }\r\n      this._calcBounds();\r\n      this._updateObjectsCoords();\r\n      fabric.Object.prototype.initialize.call(this, options);\r\n      this.setCoords();\r\n    },\r\n\r\n    /**\r\n     * Change te activeSelection to a normal group,\r\n     * High level function that automatically adds it to canvas as\r\n     * active object. no events fired.\r\n     * @since 2.0.0\r\n     * @return {fabric.Group}\r\n     */\r\n    toGroup: function() {\r\n      var objects = this._objects.concat();\r\n      this._objects = [];\r\n      var options = fabric.Object.prototype.toObject.call(this);\r\n      var newGroup = new fabric.Group([]);\r\n      delete options.type;\r\n      newGroup.set(options);\r\n      objects.forEach(function(object) {\r\n        object.canvas.remove(object);\r\n        object.group = newGroup;\r\n      });\r\n      newGroup._objects = objects;\r\n      if (!this.canvas) {\r\n        return newGroup;\r\n      }\r\n      var canvas = this.canvas;\r\n      canvas.add(newGroup);\r\n      canvas._activeObject = newGroup;\r\n      newGroup.setCoords();\r\n      return newGroup;\r\n    },\r\n\r\n    /**\r\n     * If returns true, deselection is cancelled.\r\n     * @since 2.0.0\r\n     * @return {Boolean} [cancel]\r\n     */\r\n    onDeselect: function() {\r\n      this.destroy();\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Returns string representation of a group\r\n     * @return {String}\r\n     */\r\n    toString: function() {\r\n      return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';\r\n    },\r\n\r\n    /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * objectCaching is a global flag, wins over everything\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group outside is cached.\r\n     * @return {Boolean}\r\n     */\r\n    shouldCache: function() {\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Check if this group or its parent group are caching, recursively up\r\n     * @return {Boolean}\r\n     */\r\n    isOnACache: function() {\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Renders controls and borders for the object\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} [styleOverride] properties to override the object style\r\n     * @param {Object} [childrenOverride] properties to override the children overrides\r\n     */\r\n    _renderControls: function(ctx, styleOverride, childrenOverride) {\r\n      ctx.save();\r\n      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\r\n      this.callSuper('_renderControls', ctx, styleOverride);\r\n      childrenOverride = childrenOverride || { };\r\n      if (typeof childrenOverride.hasControls === 'undefined') {\r\n        childrenOverride.hasControls = false;\r\n      }\r\n      childrenOverride.forActiveSelection = true;\r\n      for (var i = 0, len = this._objects.length; i < len; i++) {\r\n        this._objects[i]._renderControls(ctx, childrenOverride);\r\n      }\r\n      ctx.restore();\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns {@link fabric.ActiveSelection} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.ActiveSelection\r\n   * @param {Object} object Object to create a group from\r\n   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\r\n   */\r\n  fabric.ActiveSelection.fromObject = function(object, callback) {\r\n    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\r\n      delete object.objects;\r\n      callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\r\n    });\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var extend = fabric.util.object.extend;\r\n\r\n  if (!global.fabric) {\r\n    global.fabric = { };\r\n  }\r\n\r\n  if (global.fabric.Image) {\r\n    fabric.warn('fabric.Image is already defined.');\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Image class\r\n   * @class fabric.Image\r\n   * @extends fabric.Object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\r\n   * @see {@link fabric.Image#initialize} for constructor definition\r\n   */\r\n  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type: 'image',\r\n\r\n    /**\r\n     * Width of a stroke.\r\n     * For image quality a stroke multiple of 2 gives better results.\r\n     * @type Number\r\n     * @default\r\n     */\r\n    strokeWidth: 0,\r\n\r\n    /**\r\n     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.\r\n     * This allows for relative urls as image src.\r\n     * @since 2.7.0\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    srcFromAttribute: false,\r\n\r\n    /**\r\n     * private\r\n     * contains last value of scaleX to detect\r\n     * if the Image got resized after the last Render\r\n     * @type Number\r\n     */\r\n    _lastScaleX: 1,\r\n\r\n    /**\r\n     * private\r\n     * contains last value of scaleY to detect\r\n     * if the Image got resized after the last Render\r\n     * @type Number\r\n     */\r\n    _lastScaleY: 1,\r\n\r\n    /**\r\n     * private\r\n     * contains last value of scaling applied by the apply filter chain\r\n     * @type Number\r\n     */\r\n    _filterScalingX: 1,\r\n\r\n    /**\r\n     * private\r\n     * contains last value of scaling applied by the apply filter chain\r\n     * @type Number\r\n     */\r\n    _filterScalingY: 1,\r\n\r\n    /**\r\n     * minimum scale factor under which any resizeFilter is triggered to resize the image\r\n     * 0 will disable the automatic resize. 1 will trigger automatically always.\r\n     * number bigger than 1 are not implemented yet.\r\n     * @type Number\r\n     */\r\n    minimumScaleTrigger: 0.5,\r\n\r\n    /**\r\n     * List of properties to consider when checking if\r\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */\r\n    stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),\r\n\r\n    /**\r\n     * List of properties to consider when checking if cache needs refresh\r\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n     * and refreshed at the next render\r\n     * @type Array\r\n     */\r\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat('cropX', 'cropY'),\r\n\r\n    /**\r\n     * key used to retrieve the texture representing this image\r\n     * @since 2.0.0\r\n     * @type String\r\n     * @default\r\n     */\r\n    cacheKey: '',\r\n\r\n    /**\r\n     * Image crop in pixels from original image size.\r\n     * @since 2.0.0\r\n     * @type Number\r\n     * @default\r\n     */\r\n    cropX: 0,\r\n\r\n    /**\r\n     * Image crop in pixels from original image size.\r\n     * @since 2.0.0\r\n     * @type Number\r\n     * @default\r\n     */\r\n    cropY: 0,\r\n\r\n    /**\r\n     * Indicates whether this canvas will use image smoothing when painting this image.\r\n     * Also influence if the cacheCanvas for this image uses imageSmoothing\r\n     * @since 4.0.0-beta.11\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    imageSmoothing: true,\r\n\r\n    /**\r\n     * Constructor\r\n     * Image can be initialized with any canvas drawable or a string.\r\n     * The string should be a url and will be loaded as an image.\r\n     * Canvas and Image element work out of the box, while videos require extra code to work.\r\n     * Please check video element events for seeking.\r\n     * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element\r\n     * @param {Object} [options] Options object\r\n     * @param {function} [callback] callback function to call after eventual filters applied.\r\n     * @return {fabric.Image} thisArg\r\n     */\r\n    initialize: function(element, options) {\r\n      options || (options = { });\r\n      this.filters = [];\r\n      this.cacheKey = 'texture' + fabric.Object.__uid++;\r\n      this.callSuper('initialize', options);\r\n      this._initElement(element, options);\r\n    },\r\n\r\n    /**\r\n     * Returns image element which this instance if based on\r\n     * @return {HTMLImageElement} Image element\r\n     */\r\n    getElement: function() {\r\n      return this._element || {};\r\n    },\r\n\r\n    /**\r\n     * Sets image element for this instance to a specified one.\r\n     * If filters defined they are applied to new image.\r\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\r\n     * @param {HTMLImageElement} element\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Image} thisArg\r\n     * @chainable\r\n     */\r\n    setElement: function(element, options) {\r\n      this.removeTexture(this.cacheKey);\r\n      this.removeTexture(this.cacheKey + '_filtered');\r\n      this._element = element;\r\n      this._originalElement = element;\r\n      this._initConfig(options);\r\n      if (this.filters.length !== 0) {\r\n        this.applyFilters();\r\n      }\r\n      // resizeFilters work on the already filtered copy.\r\n      // we need to apply resizeFilters AFTER normal filters.\r\n      // applyResizeFilters is run more often than normal filters\r\n      // and is triggered by user interactions rather than dev code\r\n      if (this.resizeFilter) {\r\n        this.applyResizeFilters();\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Delete a single texture if in webgl mode\r\n     */\r\n    removeTexture: function(key) {\r\n      var backend = fabric.filterBackend;\r\n      if (backend && backend.evictCachesForKey) {\r\n        backend.evictCachesForKey(key);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Delete textures, reference to elements and eventually JSDOM cleanup\r\n     */\r\n    dispose: function () {\r\n      this.callSuper('dispose');\r\n      this.removeTexture(this.cacheKey);\r\n      this.removeTexture(this.cacheKey + '_filtered');\r\n      this._cacheContext = undefined;\r\n      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach((function(element) {\r\n        fabric.util.cleanUpJsdomNode(this[element]);\r\n        this[element] = undefined;\r\n      }).bind(this));\r\n    },\r\n\r\n    /**\r\n     * Get the crossOrigin value (of the corresponding image element)\r\n     */\r\n    getCrossOrigin: function() {\r\n      return this._originalElement && (this._originalElement.crossOrigin || null);\r\n    },\r\n\r\n    /**\r\n     * Returns original size of an image\r\n     * @return {Object} Object with \"width\" and \"height\" properties\r\n     */\r\n    getOriginalSize: function() {\r\n      var element = this.getElement();\r\n      return {\r\n        width: element.naturalWidth || element.width,\r\n        height: element.naturalHeight || element.height\r\n      };\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _stroke: function(ctx) {\r\n      if (!this.stroke || this.strokeWidth === 0) {\r\n        return;\r\n      }\r\n      var w = this.width / 2, h = this.height / 2;\r\n      ctx.beginPath();\r\n      ctx.moveTo(-w, -h);\r\n      ctx.lineTo(w, -h);\r\n      ctx.lineTo(w, h);\r\n      ctx.lineTo(-w, h);\r\n      ctx.lineTo(-w, -h);\r\n      ctx.closePath();\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      var filters = [];\r\n\r\n      this.filters.forEach(function(filterObj) {\r\n        if (filterObj) {\r\n          filters.push(filterObj.toObject());\r\n        }\r\n      });\r\n      var object = extend(\r\n        this.callSuper(\r\n          'toObject',\r\n          ['cropX', 'cropY'].concat(propertiesToInclude)\r\n        ), {\r\n          src: this.getSrc(),\r\n          crossOrigin: this.getCrossOrigin(),\r\n          filters: filters,\r\n        });\r\n      if (this.resizeFilter) {\r\n        object.resizeFilter = this.resizeFilter.toObject();\r\n      }\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\r\n     * @return {Boolean}\r\n     */\r\n    hasCrop: function() {\r\n      return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\r\n    },\r\n\r\n    \r\n\r\n    /**\r\n     * Returns source of an image\r\n     * @param {Boolean} filtered indicates if the src is needed for svg\r\n     * @return {String} Source of an image\r\n     */\r\n    getSrc: function(filtered) {\r\n      var element = filtered ? this._element : this._originalElement;\r\n      if (element) {\r\n        if (element.toDataURL) {\r\n          return element.toDataURL();\r\n        }\r\n\r\n        if (this.srcFromAttribute) {\r\n          return element.getAttribute('src');\r\n        }\r\n        else {\r\n          return element.src;\r\n        }\r\n      }\r\n      else {\r\n        return this.src || '';\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets source of an image\r\n     * @param {String} src Source string (URL)\r\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.crossOrigin] crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n     * @return {fabric.Image} thisArg\r\n     * @chainable\r\n     */\r\n    setSrc: function(src, callback, options) {\r\n      fabric.util.loadImage(src, function(img, isError) {\r\n        this.setElement(img, options);\r\n        this._setWidthHeight();\r\n        callback && callback(this, isError);\r\n      }, this, options && options.crossOrigin);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns string representation of an instance\r\n     * @return {String} String representation of an instance\r\n     */\r\n    toString: function() {\r\n      return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\r\n    },\r\n\r\n    applyResizeFilters: function() {\r\n      var filter = this.resizeFilter,\r\n          minimumScale = this.minimumScaleTrigger,\r\n          objectScale = this.getTotalObjectScaling(),\r\n          scaleX = objectScale.scaleX,\r\n          scaleY = objectScale.scaleY,\r\n          elementToFilter = this._filteredEl || this._originalElement;\r\n      if (this.group) {\r\n        this.set('dirty', true);\r\n      }\r\n      if (!filter || (scaleX > minimumScale && scaleY > minimumScale)) {\r\n        this._element = elementToFilter;\r\n        this._filterScalingX = 1;\r\n        this._filterScalingY = 1;\r\n        this._lastScaleX = scaleX;\r\n        this._lastScaleY = scaleY;\r\n        return;\r\n      }\r\n      if (!fabric.filterBackend) {\r\n        fabric.filterBackend = fabric.initFilterBackend();\r\n      }\r\n      var canvasEl = fabric.util.createCanvasElement(),\r\n          cacheKey = this._filteredEl ? (this.cacheKey + '_filtered') : this.cacheKey,\r\n          sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\r\n      canvasEl.width = sourceWidth;\r\n      canvasEl.height = sourceHeight;\r\n      this._element = canvasEl;\r\n      this._lastScaleX = filter.scaleX = scaleX;\r\n      this._lastScaleY = filter.scaleY = scaleY;\r\n      fabric.filterBackend.applyFilters(\r\n        [filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\r\n      this._filterScalingX = canvasEl.width / this._originalElement.width;\r\n      this._filterScalingY = canvasEl.height / this._originalElement.height;\r\n    },\r\n\r\n    /**\r\n     * Applies filters assigned to this image (from \"filters\" array) or from filter param\r\n     * @method applyFilters\r\n     * @param {Array} filters to be applied\r\n     * @param {Boolean} forResizing specify if the filter operation is a resize operation\r\n     * @return {thisArg} return the fabric.Image object\r\n     * @chainable\r\n     */\r\n    applyFilters: function(filters) {\r\n\r\n      filters = filters || this.filters || [];\r\n      filters = filters.filter(function(filter) { return filter && !filter.isNeutralState(); });\r\n      this.set('dirty', true);\r\n\r\n      // needs to clear out or WEBGL will not resize correctly\r\n      this.removeTexture(this.cacheKey + '_filtered');\r\n\r\n      if (filters.length === 0) {\r\n        this._element = this._originalElement;\r\n        this._filteredEl = null;\r\n        this._filterScalingX = 1;\r\n        this._filterScalingY = 1;\r\n        return this;\r\n      }\r\n\r\n      var imgElement = this._originalElement,\r\n          sourceWidth = imgElement.naturalWidth || imgElement.width,\r\n          sourceHeight = imgElement.naturalHeight || imgElement.height;\r\n\r\n      if (this._element === this._originalElement) {\r\n        // if the element is the same we need to create a new element\r\n        var canvasEl = fabric.util.createCanvasElement();\r\n        canvasEl.width = sourceWidth;\r\n        canvasEl.height = sourceHeight;\r\n        this._element = canvasEl;\r\n        this._filteredEl = canvasEl;\r\n      }\r\n      else {\r\n        // clear the existing element to get new filter data\r\n        // also dereference the eventual resized _element\r\n        this._element = this._filteredEl;\r\n        this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);\r\n        // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\r\n        this._lastScaleX = 1;\r\n        this._lastScaleY = 1;\r\n      }\r\n      if (!fabric.filterBackend) {\r\n        fabric.filterBackend = fabric.initFilterBackend();\r\n      }\r\n      fabric.filterBackend.applyFilters(\r\n        filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\r\n      if (this._originalElement.width !== this._element.width ||\r\n        this._originalElement.height !== this._element.height) {\r\n        this._filterScalingX = this._element.width / this._originalElement.width;\r\n        this._filterScalingY = this._element.height / this._originalElement.height;\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _render: function(ctx) {\r\n      fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\r\n      if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\r\n        this.applyResizeFilters();\r\n      }\r\n      this._stroke(ctx);\r\n      this._renderPaintInOrder(ctx);\r\n    },\r\n\r\n    /**\r\n     * Paint the cached copy of the object on the target context.\r\n     * it will set the imageSmoothing for the draw operation\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    drawCacheOnCanvas: function(ctx) {\r\n      fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\r\n      fabric.Object.prototype.drawCacheOnCanvas.call(this, ctx);\r\n    },\r\n\r\n    /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group outside is cached.\r\n     * This is the special image version where we would like to avoid caching where possible.\r\n     * Essentially images do not benefit from caching. They may require caching, and in that\r\n     * case we do it. Also caching an image usually ends in a loss of details.\r\n     * A full performance audit should be done.\r\n     * @return {Boolean}\r\n     */\r\n    shouldCache: function() {\r\n      return this.needsItsOwnCache();\r\n    },\r\n\r\n    _renderFill: function(ctx) {\r\n      var elementToDraw = this._element;\r\n      if (!elementToDraw) {\r\n        return;\r\n      }\r\n      var scaleX = this._filterScalingX, scaleY = this._filterScalingY,\r\n          w = this.width, h = this.height, min = Math.min, max = Math.max,\r\n          // crop values cannot be lesser than 0.\r\n          cropX = max(this.cropX, 0), cropY = max(this.cropY, 0),\r\n          elWidth = elementToDraw.naturalWidth || elementToDraw.width,\r\n          elHeight = elementToDraw.naturalHeight || elementToDraw.height,\r\n          sX = cropX * scaleX,\r\n          sY = cropY * scaleY,\r\n          // the width height cannot exceed element width/height, starting from the crop offset.\r\n          sW = min(w * scaleX, elWidth - sX),\r\n          sH = min(h * scaleY, elHeight - sY),\r\n          x = -w / 2, y = -h / 2,\r\n          maxDestW = min(w, elWidth / scaleX - cropX),\r\n          maxDestH = min(h, elHeight / scaleY - cropY);\r\n\r\n      elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\r\n    },\r\n\r\n    /**\r\n     * needed to check if image needs resize\r\n     * @private\r\n     */\r\n    _needsResize: function() {\r\n      var scale = this.getTotalObjectScaling();\r\n      return (scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _resetWidthHeight: function() {\r\n      this.set(this.getOriginalSize());\r\n    },\r\n\r\n    /**\r\n     * The Image class's initialization method. This method is automatically\r\n     * called by the constructor.\r\n     * @private\r\n     * @param {HTMLImageElement|String} element The element representing the image\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initElement: function(element, options) {\r\n      this.setElement(fabric.util.getById(element), options);\r\n      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */\r\n    _initConfig: function(options) {\r\n      options || (options = { });\r\n      this.setOptions(options);\r\n      this._setWidthHeight(options);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Array} filters to be initialized\r\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\r\n     */\r\n    _initFilters: function(filters, callback) {\r\n      if (filters && filters.length) {\r\n        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\r\n          callback && callback(enlivenedObjects);\r\n        }, 'fabric.Image.filters');\r\n      }\r\n      else {\r\n        callback && callback();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * Set the width and the height of the image object, using the element or the\r\n     * options.\r\n     * @param {Object} [options] Object with width/height properties\r\n     */\r\n    _setWidthHeight: function(options) {\r\n      options || (options = { });\r\n      var el = this.getElement();\r\n      this.width = options.width || el.naturalWidth || el.width || 0;\r\n      this.height = options.height || el.naturalHeight || el.height || 0;\r\n    },\r\n\r\n    /**\r\n     * Calculate offset for center and scale factor for the image in order to respect\r\n     * the preserveAspectRatio attribute\r\n     * @private\r\n     * @return {Object}\r\n     */\r\n    parsePreserveAspectRatioAttribute: function() {\r\n      var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),\r\n          rWidth = this._element.width, rHeight = this._element.height,\r\n          scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0,\r\n          offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };\r\n      if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {\r\n        if (pAR.meetOrSlice === 'meet') {\r\n          scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\r\n          offset = (pWidth - rWidth * scaleX) / 2;\r\n          if (pAR.alignX === 'Min') {\r\n            offsetLeft = -offset;\r\n          }\r\n          if (pAR.alignX === 'Max') {\r\n            offsetLeft = offset;\r\n          }\r\n          offset = (pHeight - rHeight * scaleY) / 2;\r\n          if (pAR.alignY === 'Min') {\r\n            offsetTop = -offset;\r\n          }\r\n          if (pAR.alignY === 'Max') {\r\n            offsetTop = offset;\r\n          }\r\n        }\r\n        if (pAR.meetOrSlice === 'slice') {\r\n          scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\r\n          offset = rWidth - pWidth / scaleX;\r\n          if (pAR.alignX === 'Mid') {\r\n            cropX = offset / 2;\r\n          }\r\n          if (pAR.alignX === 'Max') {\r\n            cropX = offset;\r\n          }\r\n          offset = rHeight - pHeight / scaleY;\r\n          if (pAR.alignY === 'Mid') {\r\n            cropY = offset / 2;\r\n          }\r\n          if (pAR.alignY === 'Max') {\r\n            cropY = offset;\r\n          }\r\n          rWidth = pWidth / scaleX;\r\n          rHeight = pHeight / scaleY;\r\n        }\r\n      }\r\n      else {\r\n        scaleX = pWidth / rWidth;\r\n        scaleY = pHeight / rHeight;\r\n      }\r\n      return {\r\n        width: rWidth,\r\n        height: rHeight,\r\n        scaleX: scaleX,\r\n        scaleY: scaleY,\r\n        offsetLeft: offsetLeft,\r\n        offsetTop: offsetTop,\r\n        cropX: cropX,\r\n        cropY: cropY\r\n      };\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Default CSS class name for canvas\r\n   * @static\r\n   * @type String\r\n   * @default\r\n   */\r\n  fabric.Image.CSS_CANVAS = 'canvas-img';\r\n\r\n  /**\r\n   * Alias for getSrc\r\n   * @static\r\n   */\r\n  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\r\n\r\n  /**\r\n   * Creates an instance of fabric.Image from its object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} callback Callback to invoke when an image instance is created\r\n   */\r\n  fabric.Image.fromObject = function(_object, callback) {\r\n    var object = fabric.util.object.clone(_object);\r\n    fabric.util.loadImage(object.src, function(img, isError) {\r\n      if (isError) {\r\n        callback && callback(null, true);\r\n        return;\r\n      }\r\n      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\r\n        object.filters = filters || [];\r\n        fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {\r\n          object.resizeFilter = resizeFilters[0];\r\n          fabric.util.enlivenObjectEnlivables(object, object, function () {\r\n            var image = new fabric.Image(img, object);\r\n            callback(image, false);\r\n          });\r\n        });\r\n      });\r\n    }, null, object.crossOrigin);\r\n  };\r\n\r\n  /**\r\n   * Creates an instance of fabric.Image from an URL string\r\n   * @static\r\n   * @param {String} url URL to create an image from\r\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument). Second argument is a boolean indicating if an error occurred or not.\r\n   * @param {Object} [imgOptions] Options object\r\n   */\r\n  fabric.Image.fromURL = function(url, callback, imgOptions) {\r\n    fabric.util.loadImage(url, function(img, isError) {\r\n      callback && callback(new fabric.Image(img, imgOptions), isError);\r\n    }, null, imgOptions && imgOptions.crossOrigin);\r\n  };\r\n\r\n  \r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  /**\r\n   * Tests if webgl supports certain precision\r\n   * @param {WebGL} Canvas WebGL context to test on\r\n   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\r\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\r\n   */\r\n  function testPrecision(gl, precision){\r\n    var fragmentSource = 'precision ' + precision + ' float;\\nvoid main(){}';\r\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragmentShader, fragmentSource);\r\n    gl.compileShader(fragmentShader);\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Indicate whether this filtering backend is supported by the user's browser.\r\n   * @param {Number} tileSize check if the tileSize is supported\r\n   * @returns {Boolean} Whether the user's browser supports WebGL.\r\n   */\r\n  fabric.isWebglSupported = function(tileSize) {\r\n    if (fabric.isLikelyNode) {\r\n      return false;\r\n    }\r\n    tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\r\n    var canvas = document.createElement('canvas');\r\n    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n    var isSupported = false;\r\n    // eslint-disable-next-line\r\n    if (gl) {\r\n      fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n      isSupported = fabric.maxTextureSize >= tileSize;\r\n      var precisions = ['highp', 'mediump', 'lowp'];\r\n      for (var i = 0; i < 3; i++){\r\n        if (testPrecision(gl, precisions[i])){\r\n          fabric.webGlPrecision = precisions[i];\r\n          break;\r\n        };\r\n      }\r\n    }\r\n    this.isSupported = isSupported;\r\n    return isSupported;\r\n  };\r\n\r\n  fabric.WebglFilterBackend = WebglFilterBackend;\r\n\r\n  /**\r\n   * WebGL filter backend.\r\n   */\r\n  function WebglFilterBackend(options) {\r\n    if (options && options.tileSize) {\r\n      this.tileSize = options.tileSize;\r\n    }\r\n    this.setupGLContext(this.tileSize, this.tileSize);\r\n    this.captureGPUInfo();\r\n  };\r\n\r\n  WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\r\n\r\n    tileSize: 2048,\r\n\r\n    /**\r\n     * Experimental. This object is a sort of repository of help layers used to avoid\r\n     * of recreating them during frequent filtering. If you are previewing a filter with\r\n     * a slider you probably do not want to create help layers every filter step.\r\n     * in this object there will be appended some canvases, created once, resized sometimes\r\n     * cleared never. Clearing is left to the developer.\r\n     **/\r\n    resources: {\r\n\r\n    },\r\n\r\n    /**\r\n     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\r\n     */\r\n    setupGLContext: function(width, height) {\r\n      this.dispose();\r\n      this.createWebGLCanvas(width, height);\r\n      // eslint-disable-next-line\r\n      this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\r\n      this.chooseFastestCopyGLTo2DMethod(width, height);\r\n    },\r\n\r\n    /**\r\n     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\r\n     * putImageData is faster than drawImage for that specific operation.\r\n     */\r\n    chooseFastestCopyGLTo2DMethod: function(width, height) {\r\n      var canMeasurePerf = typeof window.performance !== 'undefined', canUseImageData;\r\n      try {\r\n        new ImageData(1, 1);\r\n        canUseImageData = true;\r\n      }\r\n      catch (e) {\r\n        canUseImageData = false;\r\n      }\r\n      // eslint-disable-next-line no-undef\r\n      var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';\r\n      // eslint-disable-next-line no-undef\r\n      var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';\r\n\r\n      if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\r\n        return;\r\n      }\r\n\r\n      var targetCanvas = fabric.util.createCanvasElement();\r\n      // eslint-disable-next-line no-undef\r\n      var imageBuffer = new ArrayBuffer(width * height * 4);\r\n      if (fabric.forceGLPutImageData) {\r\n        this.imageBuffer = imageBuffer;\r\n        this.copyGLTo2D = copyGLTo2DPutImageData;\r\n        return;\r\n      }\r\n      var testContext = {\r\n        imageBuffer: imageBuffer,\r\n        destinationWidth: width,\r\n        destinationHeight: height,\r\n        targetCanvas: targetCanvas\r\n      };\r\n      var startTime, drawImageTime, putImageDataTime;\r\n      targetCanvas.width = width;\r\n      targetCanvas.height = height;\r\n\r\n      startTime = window.performance.now();\r\n      copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\r\n      drawImageTime = window.performance.now() - startTime;\r\n\r\n      startTime = window.performance.now();\r\n      copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\r\n      putImageDataTime = window.performance.now() - startTime;\r\n\r\n      if (drawImageTime > putImageDataTime) {\r\n        this.imageBuffer = imageBuffer;\r\n        this.copyGLTo2D = copyGLTo2DPutImageData;\r\n      }\r\n      else {\r\n        this.copyGLTo2D = copyGLTo2DDrawImage;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Create a canvas element and associated WebGL context and attaches them as\r\n     * class properties to the GLFilterBackend class.\r\n     */\r\n    createWebGLCanvas: function(width, height) {\r\n      var canvas = fabric.util.createCanvasElement();\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      var glOptions = {\r\n            alpha: true,\r\n            premultipliedAlpha: false,\r\n            depth: false,\r\n            stencil: false,\r\n            antialias: false\r\n          },\r\n          gl = canvas.getContext('webgl', glOptions);\r\n      if (!gl) {\r\n        gl = canvas.getContext('experimental-webgl', glOptions);\r\n      }\r\n      if (!gl) {\r\n        return;\r\n      }\r\n      gl.clearColor(0, 0, 0, 0);\r\n      // this canvas can fire webglcontextlost and webglcontextrestored\r\n      this.canvas = canvas;\r\n      this.gl = gl;\r\n    },\r\n\r\n    /**\r\n     * Attempts to apply the requested filters to the source provided, drawing the filtered output\r\n     * to the provided target canvas.\r\n     *\r\n     * @param {Array} filters The filters to apply.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\r\n     * @param {Number} width The width of the source input.\r\n     * @param {Number} height The height of the source input.\r\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\r\n     * omitted, caching will be skipped.\r\n     */\r\n    applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\r\n      var gl = this.gl;\r\n      var cachedTexture;\r\n      if (cacheKey) {\r\n        cachedTexture = this.getCachedTexture(cacheKey, source);\r\n      }\r\n      var pipelineState = {\r\n        originalWidth: source.width || source.originalWidth,\r\n        originalHeight: source.height || source.originalHeight,\r\n        sourceWidth: width,\r\n        sourceHeight: height,\r\n        destinationWidth: width,\r\n        destinationHeight: height,\r\n        context: gl,\r\n        sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\r\n        targetTexture: this.createTexture(gl, width, height),\r\n        originalTexture: cachedTexture ||\r\n          this.createTexture(gl, width, height, !cachedTexture && source),\r\n        passes: filters.length,\r\n        webgl: true,\r\n        aPosition: this.aPosition,\r\n        programCache: this.programCache,\r\n        pass: 0,\r\n        filterBackend: this,\r\n        targetCanvas: targetCanvas\r\n      };\r\n      var tempFbo = gl.createFramebuffer();\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\r\n      filters.forEach(function(filter) { filter && filter.applyTo(pipelineState); });\r\n      resizeCanvasIfNeeded(pipelineState);\r\n      this.copyGLTo2D(gl, pipelineState);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      gl.deleteTexture(pipelineState.sourceTexture);\r\n      gl.deleteTexture(pipelineState.targetTexture);\r\n      gl.deleteFramebuffer(tempFbo);\r\n      targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);\r\n      return pipelineState;\r\n    },\r\n\r\n    /**\r\n     * Detach event listeners, remove references, and clean up caches.\r\n     */\r\n    dispose: function() {\r\n      if (this.canvas) {\r\n        this.canvas = null;\r\n        this.gl = null;\r\n      }\r\n      this.clearWebGLCaches();\r\n    },\r\n\r\n    /**\r\n     * Wipe out WebGL-related caches.\r\n     */\r\n    clearWebGLCaches: function() {\r\n      this.programCache = {};\r\n      this.textureCache = {};\r\n    },\r\n\r\n    /**\r\n     * Create a WebGL texture object.\r\n     *\r\n     * Accepts specific dimensions to initialize the texture to or a source image.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\r\n     * @param {Number} width The width to initialize the texture at.\r\n     * @param {Number} height The height to initialize the texture.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\r\n     * @returns {WebGLTexture}\r\n     */\r\n    createTexture: function(gl, width, height, textureImageSource) {\r\n      var texture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      if (textureImageSource) {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\r\n      }\r\n      else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      }\r\n      return texture;\r\n    },\r\n\r\n    /**\r\n     * Can be optionally used to get a texture from the cache array\r\n     *\r\n     * If an existing texture is not found, a new texture is created and cached.\r\n     *\r\n     * @param {String} uniqueId A cache key to use to find an existing texture.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\r\n     * texture cache entry if one does not already exist.\r\n     */\r\n    getCachedTexture: function(uniqueId, textureImageSource) {\r\n      if (this.textureCache[uniqueId]) {\r\n        return this.textureCache[uniqueId];\r\n      }\r\n      else {\r\n        var texture = this.createTexture(\r\n          this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\r\n        this.textureCache[uniqueId] = texture;\r\n        return texture;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Clear out cached resources related to a source image that has been\r\n     * filtered previously.\r\n     *\r\n     * @param {String} cacheKey The cache key provided when the source image was filtered.\r\n     */\r\n    evictCachesForKey: function(cacheKey) {\r\n      if (this.textureCache[cacheKey]) {\r\n        this.gl.deleteTexture(this.textureCache[cacheKey]);\r\n        delete this.textureCache[cacheKey];\r\n      }\r\n    },\r\n\r\n    copyGLTo2D: copyGLTo2DDrawImage,\r\n\r\n    /**\r\n     * Attempt to extract GPU information strings from a WebGL context.\r\n     *\r\n     * Useful information when debugging or blacklisting specific GPUs.\r\n     *\r\n     * @returns {Object} A GPU info object with renderer and vendor strings.\r\n     */\r\n    captureGPUInfo: function() {\r\n      if (this.gpuInfo) {\r\n        return this.gpuInfo;\r\n      }\r\n      var gl = this.gl, gpuInfo = { renderer: '', vendor: '' };\r\n      if (!gl) {\r\n        return gpuInfo;\r\n      }\r\n      var ext = gl.getExtension('WEBGL_debug_renderer_info');\r\n      if (ext) {\r\n        var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\r\n        var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\r\n        if (renderer) {\r\n          gpuInfo.renderer = renderer.toLowerCase();\r\n        }\r\n        if (vendor) {\r\n          gpuInfo.vendor = vendor.toLowerCase();\r\n        }\r\n      }\r\n      this.gpuInfo = gpuInfo;\r\n      return gpuInfo;\r\n    },\r\n  };\r\n})();\r\n\r\nfunction resizeCanvasIfNeeded(pipelineState) {\r\n  var targetCanvas = pipelineState.targetCanvas,\r\n      width = targetCanvas.width, height = targetCanvas.height,\r\n      dWidth = pipelineState.destinationWidth,\r\n      dHeight = pipelineState.destinationHeight;\r\n\r\n  if (width !== dWidth || height !== dHeight) {\r\n    targetCanvas.width = dWidth;\r\n    targetCanvas.height = dHeight;\r\n  }\r\n}\r\n\r\n/**\r\n * Copy an input WebGL canvas on to an output 2D canvas.\r\n *\r\n * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\r\n * desired output image appearing in the bottom-left corner of the WebGL canvas.\r\n *\r\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n */\r\nfunction copyGLTo2DDrawImage(gl, pipelineState) {\r\n  var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas,\r\n      ctx = targetCanvas.getContext('2d');\r\n  ctx.translate(0, targetCanvas.height); // move it down again\r\n  ctx.scale(1, -1); // vertical flip\r\n  // where is my image on the big glcanvas?\r\n  var sourceY = glCanvas.height - targetCanvas.height;\r\n  ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0,\r\n    targetCanvas.width, targetCanvas.height);\r\n}\r\n\r\n/**\r\n * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\r\n * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\r\n *\r\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n */\r\nfunction copyGLTo2DPutImageData(gl, pipelineState) {\r\n  var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext('2d'),\r\n      dWidth = pipelineState.destinationWidth,\r\n      dHeight = pipelineState.destinationHeight,\r\n      numBytes = dWidth * dHeight * 4;\r\n\r\n  // eslint-disable-next-line no-undef\r\n  var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\r\n  // eslint-disable-next-line no-undef\r\n  var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\r\n\r\n  gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\r\n  var imgData = new ImageData(u8Clamped, dWidth, dHeight);\r\n  ctx.putImageData(imgData, 0, 0);\r\n}\r\n(function() {\r\n\r\n  'use strict';\r\n\r\n  var noop = function() {};\r\n\r\n  fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\r\n\r\n  /**\r\n   * Canvas 2D filter backend.\r\n   */\r\n  function Canvas2dFilterBackend() {};\r\n\r\n  Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\r\n    evictCachesForKey: noop,\r\n    dispose: noop,\r\n    clearWebGLCaches: noop,\r\n\r\n    /**\r\n     * Experimental. This object is a sort of repository of help layers used to avoid\r\n     * of recreating them during frequent filtering. If you are previewing a filter with\r\n     * a slider you probably do not want to create help layers every filter step.\r\n     * in this object there will be appended some canvases, created once, resized sometimes\r\n     * cleared never. Clearing is left to the developer.\r\n     **/\r\n    resources: {\r\n\r\n    },\r\n\r\n    /**\r\n     * Apply a set of filters against a source image and draw the filtered output\r\n     * to the provided destination canvas.\r\n     *\r\n     * @param {EnhancedFilter} filters The filter to apply.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\r\n     * @param {Number} sourceWidth The width of the source input.\r\n     * @param {Number} sourceHeight The height of the source input.\r\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n     */\r\n    applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\r\n      var ctx = targetCanvas.getContext('2d');\r\n      ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\r\n      var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n      var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\r\n      var pipelineState = {\r\n        sourceWidth: sourceWidth,\r\n        sourceHeight: sourceHeight,\r\n        imageData: imageData,\r\n        originalEl: sourceElement,\r\n        originalImageData: originalImageData,\r\n        canvasEl: targetCanvas,\r\n        ctx: ctx,\r\n        filterBackend: this,\r\n      };\r\n      filters.forEach(function(filter) { filter.applyTo(pipelineState); });\r\n      if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\r\n        targetCanvas.width = pipelineState.imageData.width;\r\n        targetCanvas.height = pipelineState.imageData.height;\r\n      }\r\n      ctx.putImageData(pipelineState.imageData, 0, 0);\r\n      return pipelineState;\r\n    },\r\n\r\n  };\r\n})();\r\n/**\r\n * @namespace fabric.Image.filters\r\n * @memberOf fabric.Image\r\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\r\n * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n */\r\nfabric.Image = fabric.Image || { };\r\nfabric.Image.filters = fabric.Image.filters || { };\r\n\r\n/**\r\n * Root filter class from which all filter classes inherit from\r\n * @class fabric.Image.filters.BaseFilter\r\n * @memberOf fabric.Image.filters\r\n */\r\nfabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\r\n\r\n  /**\r\n   * Filter type\r\n   * @param {String} type\r\n   * @default\r\n   */\r\n  type: 'BaseFilter',\r\n\r\n  /**\r\n   * Array of attributes to send with buffers. do not modify\r\n   * @private\r\n   */\r\n\r\n  vertexSource: 'attribute vec2 aPosition;\\n' +\r\n    'varying vec2 vTexCoord;\\n' +\r\n    'void main() {\\n' +\r\n      'vTexCoord = aPosition;\\n' +\r\n      'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n    '}',\r\n\r\n  fragmentSource: 'precision highp float;\\n' +\r\n    'varying vec2 vTexCoord;\\n' +\r\n    'uniform sampler2D uTexture;\\n' +\r\n    'void main() {\\n' +\r\n      'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n    '}',\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {Object} [options] Options object\r\n   */\r\n  initialize: function(options) {\r\n    if (options) {\r\n      this.setOptions(options);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Sets filter's properties from options\r\n   * @param {Object} [options] Options object\r\n   */\r\n  setOptions: function(options) {\r\n    for (var prop in options) {\r\n      this[prop] = options[prop];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Compile this filter's shader program.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\r\n   * @param {String} fragmentSource fragmentShader source for compilation\r\n   * @param {String} vertexSource vertexShader source for compilation\r\n   */\r\n  createProgram: function(gl, fragmentSource, vertexSource) {\r\n    fragmentSource = fragmentSource || this.fragmentSource;\r\n    vertexSource = vertexSource || this.vertexSource;\r\n    if (fabric.webGlPrecision !== 'highp'){\r\n      fragmentSource = fragmentSource.replace(\r\n        /precision highp float/g,\r\n        'precision ' + fabric.webGlPrecision + ' float'\r\n      );\r\n    }\r\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertexShader, vertexSource);\r\n    gl.compileShader(vertexShader);\r\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n      throw new Error(\r\n        // eslint-disable-next-line prefer-template\r\n        'Vertex shader compile error for ' + this.type + ': ' +\r\n        gl.getShaderInfoLog(vertexShader)\r\n      );\r\n    }\r\n\r\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragmentShader, fragmentSource);\r\n    gl.compileShader(fragmentShader);\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n      throw new Error(\r\n        // eslint-disable-next-line prefer-template\r\n        'Fragment shader compile error for ' + this.type + ': ' +\r\n        gl.getShaderInfoLog(fragmentShader)\r\n      );\r\n    }\r\n\r\n    var program = gl.createProgram();\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      throw new Error(\r\n        // eslint-disable-next-line prefer-template\r\n        'Shader link error for \"${this.type}\" ' +\r\n        gl.getProgramInfoLog(program)\r\n      );\r\n    }\r\n\r\n    var attributeLocations = this.getAttributeLocations(gl, program);\r\n    var uniformLocations = this.getUniformLocations(gl, program) || { };\r\n    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');\r\n    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');\r\n    return {\r\n      program: program,\r\n      attributeLocations: attributeLocations,\r\n      uniformLocations: uniformLocations\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Return a map of attribute names to WebGLAttributeLocation objects.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\r\n   * @returns {Object} A map of attribute names to attribute locations.\r\n   */\r\n  getAttributeLocations: function(gl, program) {\r\n    return {\r\n      aPosition: gl.getAttribLocation(program, 'aPosition'),\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Return a map of uniform names to WebGLUniformLocation objects.\r\n   *\r\n   * Intended to be overridden by subclasses.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\r\n   * @returns {Object} A map of uniform names to uniform locations.\r\n   */\r\n  getUniformLocations: function (/* gl, program */) {\r\n    // in case i do not need any special uniform i need to return an empty object\r\n    return { };\r\n  },\r\n\r\n  /**\r\n   * Send attribute data from this filter to its shader program on the GPU.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\r\n   */\r\n  sendAttributeData: function(gl, attributeLocations, aPositionData) {\r\n    var attributeLocation = attributeLocations.aPosition;\r\n    var buffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.enableVertexAttribArray(attributeLocation);\r\n    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\r\n    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\r\n  },\r\n\r\n  _setupFrameBuffer: function(options) {\r\n    var gl = options.context, width, height;\r\n    if (options.passes > 1) {\r\n      width = options.destinationWidth;\r\n      height = options.destinationHeight;\r\n      if (options.sourceWidth !== width || options.sourceHeight !== height) {\r\n        gl.deleteTexture(options.targetTexture);\r\n        options.targetTexture = options.filterBackend.createTexture(gl, width, height);\r\n      }\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D,\r\n        options.targetTexture, 0);\r\n    }\r\n    else {\r\n      // draw last filter on canvas and not to framebuffer.\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      gl.finish();\r\n    }\r\n  },\r\n\r\n  _swapTextures: function(options) {\r\n    options.passes--;\r\n    options.pass++;\r\n    var temp = options.targetTexture;\r\n    options.targetTexture = options.sourceTexture;\r\n    options.sourceTexture = temp;\r\n  },\r\n\r\n  /**\r\n   * Generic isNeutral implementation for one parameter based filters.\r\n   * Used only in image applyFilters to discard filters that will not have an effect\r\n   * on the image\r\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\r\n   * @param {Object} options\r\n   **/\r\n  isNeutralState: function(/* options */) {\r\n    var main = this.mainParameter,\r\n        _class = fabric.Image.filters[this.type].prototype;\r\n    if (main) {\r\n      if (Array.isArray(_class[main])) {\r\n        for (var i = _class[main].length; i--;) {\r\n          if (this[main][i] !== _class[main][i]) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n      else {\r\n        return _class[main] === this[main];\r\n      }\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Apply this filter to the input image data provided.\r\n   *\r\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Number} options.passes The number of filters remaining to be executed\r\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n   */\r\n  applyTo: function(options) {\r\n    if (options.webgl) {\r\n      this._setupFrameBuffer(options);\r\n      this.applyToWebGL(options);\r\n      this._swapTextures(options);\r\n    }\r\n    else {\r\n      this.applyTo2d(options);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Retrieves the cached shader.\r\n   * @param {Object} options\r\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n   */\r\n  retrieveShader: function(options) {\r\n    if (!options.programCache.hasOwnProperty(this.type)) {\r\n      options.programCache[this.type] = this.createProgram(options.context);\r\n    }\r\n    return options.programCache[this.type];\r\n  },\r\n\r\n  /**\r\n   * Apply this filter using webgl.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Number} options.passes The number of filters remaining to be executed\r\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\r\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n   */\r\n  applyToWebGL: function(options) {\r\n    var gl = options.context;\r\n    var shader = this.retrieveShader(options);\r\n    if (options.pass === 0 && options.originalTexture) {\r\n      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\r\n    }\r\n    else {\r\n      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\r\n    }\r\n    gl.useProgram(shader.program);\r\n    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\r\n\r\n    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\r\n    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\r\n\r\n    this.sendUniformData(gl, shader.uniformLocations);\r\n    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n  },\r\n\r\n  bindAdditionalTexture: function(gl, texture, textureUnit) {\r\n    gl.activeTexture(textureUnit);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // reset active texture to 0 as usual\r\n    gl.activeTexture(gl.TEXTURE0);\r\n  },\r\n\r\n  unbindAdditionalTexture: function(gl, textureUnit) {\r\n    gl.activeTexture(textureUnit);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n  },\r\n\r\n  getMainParameter: function() {\r\n    return this[this.mainParameter];\r\n  },\r\n\r\n  setMainParameter: function(value) {\r\n    this[this.mainParameter] = value;\r\n  },\r\n\r\n  /**\r\n   * Send uniform data from this filter to its shader program on the GPU.\r\n   *\r\n   * Intended to be overridden by subclasses.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\r\n   */\r\n  sendUniformData: function(/* gl, uniformLocations */) {\r\n    // Intentionally left blank.  Override me in subclasses.\r\n  },\r\n\r\n  /**\r\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\r\n   * remember that options.targetCanvas is available for use till end of chain.\r\n   */\r\n  createHelpLayer: function(options) {\r\n    if (!options.helpLayer) {\r\n      var helpLayer = document.createElement('canvas');\r\n      helpLayer.width = options.sourceWidth;\r\n      helpLayer.height = options.sourceHeight;\r\n      options.helpLayer = helpLayer;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Returns object representation of an instance\r\n   * @return {Object} Object representation of an instance\r\n   */\r\n  toObject: function() {\r\n    var object = { type: this.type }, mainP = this.mainParameter;\r\n    if (mainP) {\r\n      object[mainP] = this[mainP];\r\n    }\r\n    return object;\r\n  },\r\n\r\n  /**\r\n   * Returns a JSON representation of an instance\r\n   * @return {Object} JSON\r\n   */\r\n  toJSON: function() {\r\n    // delegate, not alias\r\n    return this.toObject();\r\n  }\r\n});\r\n\r\nfabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\r\n  var filter = new fabric.Image.filters[object.type](object);\r\n  callback && callback(filter);\r\n  return filter;\r\n};\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Color Matrix filter class\r\n   * @class fabric.Image.filters.ColorMatrix\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\r\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\r\n   * @example <caption>Kodachrome filter</caption>\r\n   * var filter = new fabric.Image.filters.ColorMatrix({\r\n   *  matrix: [\r\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\r\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\r\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\r\n       0, 0, 0, 1, 0\r\n      ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'ColorMatrix',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'uniform mat4 uColorMatrix;\\n' +\r\n      'uniform vec4 uConstants;\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'color *= uColorMatrix;\\n' +\r\n        'color += uConstants;\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Colormatrix for pixels.\r\n     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n     * outside the -1, 1 range.\r\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n     * @param {Array} matrix array of 20 numbers.\r\n     * @default\r\n     */\r\n    matrix: [\r\n      1, 0, 0, 0, 0,\r\n      0, 1, 0, 0, 0,\r\n      0, 0, 1, 0, 0,\r\n      0, 0, 0, 1, 0\r\n    ],\r\n\r\n    mainParameter: 'matrix',\r\n\r\n    /**\r\n     * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\r\n     * to save some calculation\r\n     * @type Boolean\r\n     * @default true\r\n     */\r\n    colorsOnly: true,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      this.callSuper('initialize', options);\r\n      // create a new array instead mutating the prototype with push\r\n      this.matrix = this.matrix.slice(0);\r\n    },\r\n\r\n    /**\r\n     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data,\r\n          iLen = data.length,\r\n          m = this.matrix,\r\n          r, g, b, a, i, colorsOnly = this.colorsOnly;\r\n\r\n      for (i = 0; i < iLen; i += 4) {\r\n        r = data[i];\r\n        g = data[i + 1];\r\n        b = data[i + 2];\r\n        if (colorsOnly) {\r\n          data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\r\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\r\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\r\n        }\r\n        else {\r\n          a = data[i + 3];\r\n          data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\r\n          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\r\n          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\r\n          data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),\r\n        uConstants: gl.getUniformLocation(program, 'uConstants'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      var m = this.matrix,\r\n          matrix = [\r\n            m[0], m[1], m[2], m[3],\r\n            m[5], m[6], m[7], m[8],\r\n            m[10], m[11], m[12], m[13],\r\n            m[15], m[16], m[17], m[18]\r\n          ],\r\n          constants = [m[4], m[9], m[14], m[19]];\r\n      gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\r\n      gl.uniform4fv(uniformLocations.uConstants, constants);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] function to invoke after filter creation\r\n   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\r\n   */\r\n  fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Brightness filter class\r\n   * @class fabric.Image.filters.Brightness\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Brightness({\r\n   *   brightness: 0.05\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Brightness',\r\n\r\n    /**\r\n     * Fragment source for the brightness program\r\n     */\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform float uBrightness;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'color.rgb += uBrightness;\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Brightness value, from -1 to 1.\r\n     * translated to -255 to 255 for 2d\r\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n     * @param {Number} brightness\r\n     * @default\r\n     */\r\n    brightness: 0,\r\n\r\n    /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */\r\n    mainParameter: 'brightness',\r\n\r\n    /**\r\n    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n    *\r\n    * @param {Object} options\r\n    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n    */\r\n    applyTo2d: function(options) {\r\n      if (this.brightness === 0) {\r\n        return;\r\n      }\r\n      var imageData = options.imageData,\r\n          data = imageData.data, i, len = data.length,\r\n          brightness = Math.round(this.brightness * 255);\r\n      for (i = 0; i < len; i += 4) {\r\n        data[i] = data[i] + brightness;\r\n        data[i + 1] = data[i + 1] + brightness;\r\n        data[i + 2] = data[i + 2] + brightness;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uBrightness: gl.getUniformLocation(program, 'uBrightness'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1f(uniformLocations.uBrightness, this.brightness);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\r\n   */\r\n  fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      extend = fabric.util.object.extend,\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\r\n   * @class fabric.Image.filters.Convolute\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example <caption>Sharpen filter</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   matrix: [ 0, -1,  0,\r\n   *            -1,  5, -1,\r\n   *             0, -1,  0 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   * @example <caption>Blur filter</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   matrix: [ 1/9, 1/9, 1/9,\r\n   *             1/9, 1/9, 1/9,\r\n   *             1/9, 1/9, 1/9 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   * @example <caption>Emboss filter</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   matrix: [ 1,   1,  1,\r\n   *             1, 0.7, -1,\r\n   *            -1,  -1, -1 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   * @example <caption>Emboss filter with opaqueness</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   opaque: true,\r\n   *   matrix: [ 1,   1,  1,\r\n   *             1, 0.7, -1,\r\n   *            -1,  -1, -1 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */\r\n  filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Convolute',\r\n\r\n    /*\r\n     * Opaque value (true/false)\r\n     */\r\n    opaque: false,\r\n\r\n    /*\r\n     * matrix for the filter, max 9x9\r\n     */\r\n    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],\r\n\r\n    /**\r\n     * Fragment source for the brightness program\r\n     */\r\n    fragmentSource: {\r\n      Convolute_3_1: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[9];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n' +\r\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n      Convolute_3_0: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[9];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n          'for (float h = 0.0; h < 3.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 3.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n' +\r\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.a = alpha;\\n' +\r\n        '}',\r\n      Convolute_5_1: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[25];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n      Convolute_5_0: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[25];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n          'for (float h = 0.0; h < 5.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 5.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n' +\r\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.a = alpha;\\n' +\r\n        '}',\r\n      Convolute_7_1: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[49];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n      Convolute_7_0: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[49];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n          'for (float h = 0.0; h < 7.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 7.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n' +\r\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.a = alpha;\\n' +\r\n        '}',\r\n      Convolute_9_1: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[81];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 0);\\n' +\r\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n              'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n      Convolute_9_0: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform float uMatrix[81];\\n' +\r\n        'uniform float uStepW;\\n' +\r\n        'uniform float uStepH;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = vec4(0, 0, 0, 1);\\n' +\r\n          'for (float h = 0.0; h < 9.0; h+=1.0) {\\n' +\r\n            'for (float w = 0.0; w < 9.0; w+=1.0) {\\n' +\r\n              'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n' +\r\n              'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n' +\r\n            '}\\n' +\r\n          '}\\n' +\r\n          'float alpha = texture2D(uTexture, vTexCoord).a;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'gl_FragColor.a = alpha;\\n' +\r\n        '}',\r\n    },\r\n\r\n    /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.Convolute.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\r\n     * @param {Array} [options.matrix] Filter matrix\r\n     */\r\n\r\n\r\n    /**\r\n    * Retrieves the cached shader.\r\n    * @param {Object} options\r\n    * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n    */\r\n    retrieveShader: function(options) {\r\n      var size = Math.sqrt(this.matrix.length);\r\n      var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);\r\n      var shaderSource = this.fragmentSource[cacheKey];\r\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n      }\r\n      return options.programCache[cacheKey];\r\n    },\r\n\r\n    /**\r\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data,\r\n          weights = this.matrix,\r\n          side = Math.round(Math.sqrt(weights.length)),\r\n          halfSide = Math.floor(side / 2),\r\n          sw = imageData.width,\r\n          sh = imageData.height,\r\n          output = options.ctx.createImageData(sw, sh),\r\n          dst = output.data,\r\n          // go through the destination image pixels\r\n          alphaFac = this.opaque ? 1 : 0,\r\n          r, g, b, a, dstOff,\r\n          scx, scy, srcOff, wt,\r\n          x, y, cx, cy;\r\n\r\n      for (y = 0; y < sh; y++) {\r\n        for (x = 0; x < sw; x++) {\r\n          dstOff = (y * sw + x) * 4;\r\n          // calculate the weighed sum of the source image pixels that\r\n          // fall under the convolution matrix\r\n          r = 0; g = 0; b = 0; a = 0;\r\n\r\n          for (cy = 0; cy < side; cy++) {\r\n            for (cx = 0; cx < side; cx++) {\r\n              scy = y + cy - halfSide;\r\n              scx = x + cx - halfSide;\r\n\r\n              // eslint-disable-next-line max-depth\r\n              if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\r\n                continue;\r\n              }\r\n\r\n              srcOff = (scy * sw + scx) * 4;\r\n              wt = weights[cy * side + cx];\r\n\r\n              r += data[srcOff] * wt;\r\n              g += data[srcOff + 1] * wt;\r\n              b += data[srcOff + 2] * wt;\r\n              // eslint-disable-next-line max-depth\r\n              if (!alphaFac) {\r\n                a += data[srcOff + 3] * wt;\r\n              }\r\n            }\r\n          }\r\n          dst[dstOff] = r;\r\n          dst[dstOff + 1] = g;\r\n          dst[dstOff + 2] = b;\r\n          if (!alphaFac) {\r\n            dst[dstOff + 3] = a;\r\n          }\r\n          else {\r\n            dst[dstOff + 3] = data[dstOff + 3];\r\n          }\r\n        }\r\n      }\r\n      options.imageData = output;\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uMatrix: gl.getUniformLocation(program, 'uMatrix'),\r\n        uOpaque: gl.getUniformLocation(program, 'uOpaque'),\r\n        uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),\r\n        uSize: gl.getUniformLocation(program, 'uSize'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      return extend(this.callSuper('toObject'), {\r\n        opaque: this.opaque,\r\n        matrix: this.matrix\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\r\n   */\r\n  fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Grayscale image filter class\r\n   * @class fabric.Image.filters.Grayscale\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Grayscale();\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Grayscale',\r\n\r\n    fragmentSource: {\r\n      average: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float average = (color.r + color.b + color.g) / 3.0;\\n' +\r\n          'gl_FragColor = vec4(average, average, average, color.a);\\n' +\r\n        '}',\r\n      lightness: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform int uMode;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n' +\r\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n        '}',\r\n      luminosity: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform int uMode;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 col = texture2D(uTexture, vTexCoord);\\n' +\r\n          'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n' +\r\n          'gl_FragColor = vec4(average, average, average, col.a);\\n' +\r\n        '}',\r\n    },\r\n\r\n\r\n    /**\r\n     * Grayscale mode, between 'average', 'lightness', 'luminosity'\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    mode: 'average',\r\n\r\n    mainParameter: 'mode',\r\n\r\n    /**\r\n     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data, i,\r\n          len = data.length, value,\r\n          mode = this.mode;\r\n      for (i = 0; i < len; i += 4) {\r\n        if (mode === 'average') {\r\n          value = (data[i] + data[i + 1] + data[i + 2]) / 3;\r\n        }\r\n        else if (mode === 'lightness') {\r\n          value = (Math.min(data[i], data[i + 1], data[i + 2]) +\r\n            Math.max(data[i], data[i + 1], data[i + 2])) / 2;\r\n        }\r\n        else if (mode === 'luminosity') {\r\n          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\r\n        }\r\n        data[i] = value;\r\n        data[i + 1] = value;\r\n        data[i + 2] = value;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      var cacheKey = this.type + '_' + this.mode;\r\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n        var shaderSource = this.fragmentSource[this.mode];\r\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n      }\r\n      return options.programCache[cacheKey];\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uMode: gl.getUniformLocation(program, 'uMode'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      // default average mode.\r\n      var mode = 1;\r\n      gl.uniform1i(uniformLocations.uMode, mode);\r\n    },\r\n\r\n    /**\r\n     * Grayscale filter isNeutralState implementation\r\n     * The filter is never neutral\r\n     * on the image\r\n     **/\r\n    isNeutralState: function() {\r\n      return false;\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\r\n   */\r\n  fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Invert filter class\r\n   * @class fabric.Image.filters.Invert\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Invert();\r\n   * object.filters.push(filter);\r\n   * object.applyFilters(canvas.renderAll.bind(canvas));\r\n   */\r\n  filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Invert',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform int uInvert;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'if (uInvert == 1) {\\n' +\r\n          'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n' +\r\n        '} else {\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Filter invert. if false, does nothing\r\n     * @param {Boolean} invert\r\n     * @default\r\n     */\r\n    invert: true,\r\n\r\n    mainParameter: 'invert',\r\n\r\n    /**\r\n     * Apply the Invert operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data, i,\r\n          len = data.length;\r\n      for (i = 0; i < len; i += 4) {\r\n        data[i] = 255 - data[i];\r\n        data[i + 1] = 255 - data[i + 1];\r\n        data[i + 2] = 255 - data[i + 2];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Invert filter isNeutralState implementation\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * @param {Object} options\r\n     **/\r\n    isNeutralState: function() {\r\n      return !this.invert;\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uInvert: gl.getUniformLocation(program, 'uInvert'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1i(uniformLocations.uInvert, this.invert);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\r\n   */\r\n  fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      extend = fabric.util.object.extend,\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Noise filter class\r\n   * @class fabric.Image.filters.Noise\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Noise({\r\n   *   noise: 700\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */\r\n  filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Noise',\r\n\r\n    /**\r\n     * Fragment source for the noise program\r\n     */\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform float uStepH;\\n' +\r\n      'uniform float uNoise;\\n' +\r\n      'uniform float uSeed;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'float rand(vec2 co, float seed, float vScale) {\\n' +\r\n        'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n' +\r\n      '}\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */\r\n    mainParameter: 'noise',\r\n\r\n    /**\r\n     * Noise value, from\r\n     * @param {Number} noise\r\n     * @default\r\n     */\r\n    noise: 0,\r\n\r\n    /**\r\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      if (this.noise === 0) {\r\n        return;\r\n      }\r\n      var imageData = options.imageData,\r\n          data = imageData.data, i, len = data.length,\r\n          noise = this.noise, rand;\r\n\r\n      for (i = 0, len = data.length; i < len; i += 4) {\r\n\r\n        rand = (0.5 - Math.random()) * noise;\r\n\r\n        data[i] += rand;\r\n        data[i + 1] += rand;\r\n        data[i + 2] += rand;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uNoise: gl.getUniformLocation(program, 'uNoise'),\r\n        uSeed: gl.getUniformLocation(program, 'uSeed'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\r\n      gl.uniform1f(uniformLocations.uSeed, Math.random());\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      return extend(this.callSuper('toObject'), {\r\n        noise: this.noise\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\r\n   */\r\n  fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Pixelate filter class\r\n   * @class fabric.Image.filters.Pixelate\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Pixelate({\r\n   *   blocksize: 8\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Pixelate',\r\n\r\n    blocksize: 4,\r\n\r\n    mainParameter: 'blocksize',\r\n\r\n    /**\r\n     * Fragment source for the Pixelate program\r\n     */\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform float uBlocksize;\\n' +\r\n      'uniform float uStepW;\\n' +\r\n      'uniform float uStepH;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'float blockW = uBlocksize * uStepW;\\n' +\r\n        'float blockH = uBlocksize * uStepW;\\n' +\r\n        'int posX = int(vTexCoord.x / blockW);\\n' +\r\n        'int posY = int(vTexCoord.y / blockH);\\n' +\r\n        'float fposX = float(posX);\\n' +\r\n        'float fposY = float(posY);\\n' +\r\n        'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n' +\r\n        'vec4 color = texture2D(uTexture, squareCoords);\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data,\r\n          iLen = imageData.height,\r\n          jLen = imageData.width,\r\n          index, i, j, r, g, b, a,\r\n          _i, _j, _iLen, _jLen;\r\n\r\n      for (i = 0; i < iLen; i += this.blocksize) {\r\n        for (j = 0; j < jLen; j += this.blocksize) {\r\n\r\n          index = (i * 4) * jLen + (j * 4);\r\n\r\n          r = data[index];\r\n          g = data[index + 1];\r\n          b = data[index + 2];\r\n          a = data[index + 3];\r\n\r\n          _iLen = Math.min(i + this.blocksize, iLen);\r\n          _jLen = Math.min(j + this.blocksize, jLen);\r\n          for (_i = i; _i < _iLen; _i++) {\r\n            for (_j = j; _j < _jLen; _j++) {\r\n              index = (_i * 4) * jLen + (_j * 4);\r\n              data[index] = r;\r\n              data[index + 1] = g;\r\n              data[index + 2] = b;\r\n              data[index + 3] = a;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Indicate when the filter is not gonna apply changes to the image\r\n     **/\r\n    isNeutralState: function() {\r\n      return this.blocksize === 1;\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),\r\n        uStepW: gl.getUniformLocation(program, 'uStepW'),\r\n        uStepH: gl.getUniformLocation(program, 'uStepH'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\r\n   */\r\n  fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      extend = fabric.util.object.extend,\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Remove white filter class\r\n   * @class fabric.Image.filters.RemoveColor\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.RemoveColor({\r\n   *   threshold: 0.2,\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */\r\n  filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'RemoveColor',\r\n\r\n    /**\r\n     * Color to remove, in any format understood by fabric.Color.\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    color: '#FFFFFF',\r\n\r\n    /**\r\n     * Fragment source for the brightness program\r\n     */\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform vec4 uLow;\\n' +\r\n      'uniform vec4 uHigh;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'gl_FragColor = texture2D(uTexture, vTexCoord);\\n' +\r\n        'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n' +\r\n          'gl_FragColor.a = 0.0;\\n' +\r\n        '}\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * distance to actual color, as value up or down from each r,g,b\r\n     * between 0 and 1\r\n     **/\r\n    distance: 0.02,\r\n\r\n    /**\r\n     * For color to remove inside distance, use alpha channel for a smoother deletion\r\n     * NOT IMPLEMENTED YET\r\n     **/\r\n    useAlpha: false,\r\n\r\n    /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Number} [options.color=#RRGGBB] Threshold value\r\n     * @param {Number} [options.distance=10] Distance value\r\n     */\r\n\r\n    /**\r\n     * Applies filter to canvas element\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data, i,\r\n          distance = this.distance * 255,\r\n          r, g, b,\r\n          source = new fabric.Color(this.color).getSource(),\r\n          lowC = [\r\n            source[0] - distance,\r\n            source[1] - distance,\r\n            source[2] - distance,\r\n          ],\r\n          highC = [\r\n            source[0] + distance,\r\n            source[1] + distance,\r\n            source[2] + distance,\r\n          ];\r\n\r\n\r\n      for (i = 0; i < data.length; i += 4) {\r\n        r = data[i];\r\n        g = data[i + 1];\r\n        b = data[i + 2];\r\n\r\n        if (r > lowC[0] &&\r\n            g > lowC[1] &&\r\n            b > lowC[2] &&\r\n            r < highC[0] &&\r\n            g < highC[1] &&\r\n            b < highC[2]) {\r\n          data[i + 3] = 0;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uLow: gl.getUniformLocation(program, 'uLow'),\r\n        uHigh: gl.getUniformLocation(program, 'uHigh'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      var source = new fabric.Color(this.color).getSource(),\r\n          distance = parseFloat(this.distance),\r\n          lowC = [\r\n            0 + source[0] / 255 - distance,\r\n            0 + source[1] / 255 - distance,\r\n            0 + source[2] / 255 - distance,\r\n            1\r\n          ],\r\n          highC = [\r\n            source[0] / 255 + distance,\r\n            source[1] / 255 + distance,\r\n            source[2] / 255 + distance,\r\n            1\r\n          ];\r\n      gl.uniform4fv(uniformLocations.uLow, lowC);\r\n      gl.uniform4fv(uniformLocations.uHigh, highC);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      return extend(this.callSuper('toObject'), {\r\n        color: this.color,\r\n        distance: this.distance\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\r\n   */\r\n  fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  var matrices = {\r\n    Brownie: [\r\n      0.59970,0.34553,-0.27082,0,0.186,\r\n      -0.03770,0.86095,0.15059,0,-0.1449,\r\n      0.24113,-0.07441,0.44972,0,-0.02965,\r\n      0,0,0,1,0\r\n    ],\r\n    Vintage: [\r\n      0.62793,0.32021,-0.03965,0,0.03784,\r\n      0.02578,0.64411,0.03259,0,0.02926,\r\n      0.04660,-0.08512,0.52416,0,0.02023,\r\n      0,0,0,1,0\r\n    ],\r\n    Kodachrome: [\r\n      1.12855,-0.39673,-0.03992,0,0.24991,\r\n      -0.16404,1.08352,-0.05498,0,0.09698,\r\n      -0.16786,-0.56034,1.60148,0,0.13972,\r\n      0,0,0,1,0\r\n    ],\r\n    Technicolor: [\r\n      1.91252,-0.85453,-0.09155,0,0.04624,\r\n      -0.30878,1.76589,-0.10601,0,-0.27589,\r\n      -0.23110,-0.75018,1.84759,0,0.12137,\r\n      0,0,0,1,0\r\n    ],\r\n    Polaroid: [\r\n      1.438,-0.062,-0.062,0,0,\r\n      -0.122,1.378,-0.122,0,0,\r\n      -0.016,-0.016,1.483,0,0,\r\n      0,0,0,1,0\r\n    ],\r\n    Sepia: [\r\n      0.393, 0.769, 0.189, 0, 0,\r\n      0.349, 0.686, 0.168, 0, 0,\r\n      0.272, 0.534, 0.131, 0, 0,\r\n      0, 0, 0, 1, 0\r\n    ],\r\n    BlackWhite: [\r\n      1.5, 1.5, 1.5, 0, -1,\r\n      1.5, 1.5, 1.5, 0, -1,\r\n      1.5, 1.5, 1.5, 0, -1,\r\n      0, 0, 0, 1, 0,\r\n    ]\r\n  };\r\n\r\n  for (var key in matrices) {\r\n    filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\r\n\r\n      /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */\r\n      type: key,\r\n\r\n      /**\r\n       * Colormatrix for the effect\r\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n       * outside the -1, 1 range.\r\n       * @param {Array} matrix array of 20 numbers.\r\n       * @default\r\n       */\r\n      matrix: matrices[key],\r\n\r\n      /**\r\n       * Lock the matrix export for this kind of static, parameter less filters.\r\n       */\r\n      mainParameter: false,\r\n      /**\r\n       * Lock the colormatrix on the color part, skipping alpha\r\n       */\r\n      colorsOnly: true,\r\n\r\n    });\r\n    fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n  }\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n  'use strict';\r\n\r\n  var fabric = global.fabric,\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Color Blend filter class\r\n   * @class fabric.Image.filter.BlendColor\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @example\r\n   * var filter = new fabric.Image.filters.BlendColor({\r\n   *  color: '#000',\r\n   *  mode: 'multiply'\r\n   * });\r\n   *\r\n   * var filter = new fabric.Image.filters.BlendImage({\r\n   *  image: fabricImageObject,\r\n   *  mode: 'multiply',\r\n   *  alpha: 0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */\r\n\r\n  filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\r\n    type: 'BlendColor',\r\n\r\n    /**\r\n     * Color to make the blend operation with. default to a reddish color since black or white\r\n     * gives always strong result.\r\n     * @type String\r\n     * @default\r\n     **/\r\n    color: '#F95C63',\r\n\r\n    /**\r\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n     * darken, lighten, overlay, exclusion, tint.\r\n     * @type String\r\n     * @default\r\n     **/\r\n    mode: 'multiply',\r\n\r\n    /**\r\n     * alpha value. represent the strength of the blend color operation.\r\n     * @type Number\r\n     * @default\r\n     **/\r\n    alpha: 1,\r\n\r\n    /**\r\n     * Fragment source for the Multiply program\r\n     */\r\n    fragmentSource: {\r\n      multiply: 'gl_FragColor.rgb *= uColor.rgb;\\n',\r\n      screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n',\r\n      add: 'gl_FragColor.rgb += uColor.rgb;\\n',\r\n      diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n',\r\n      subtract: 'gl_FragColor.rgb -= uColor.rgb;\\n',\r\n      lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n',\r\n      darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n',\r\n      exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n',\r\n      overlay: 'if (uColor.r < 0.5) {\\n' +\r\n          'gl_FragColor.r *= 2.0 * uColor.r;\\n' +\r\n        '} else {\\n' +\r\n          'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n' +\r\n        '}\\n' +\r\n        'if (uColor.g < 0.5) {\\n' +\r\n          'gl_FragColor.g *= 2.0 * uColor.g;\\n' +\r\n        '} else {\\n' +\r\n          'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n' +\r\n        '}\\n' +\r\n        'if (uColor.b < 0.5) {\\n' +\r\n          'gl_FragColor.b *= 2.0 * uColor.b;\\n' +\r\n        '} else {\\n' +\r\n          'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n' +\r\n        '}\\n',\r\n      tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\\n' +\r\n        'gl_FragColor.rgb += uColor.rgb;\\n',\r\n    },\r\n\r\n    /**\r\n     * build the fragment source for the filters, joining the common part with\r\n     * the specific one.\r\n     * @param {String} mode the mode of the filter, a key of this.fragmentSource\r\n     * @return {String} the source to be compiled\r\n     * @private\r\n     */\r\n    buildSource: function(mode) {\r\n      return 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform vec4 uColor;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n          'if (color.a > 0.0) {\\n' +\r\n            this.fragmentSource[mode] +\r\n          '}\\n' +\r\n        '}';\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      var cacheKey = this.type + '_' + this.mode, shaderSource;\r\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n        shaderSource = this.buildSource(this.mode);\r\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n      }\r\n      return options.programCache[cacheKey];\r\n    },\r\n\r\n    /**\r\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          data = imageData.data, iLen = data.length,\r\n          tr, tg, tb,\r\n          r, g, b,\r\n          source, alpha1 = 1 - this.alpha;\r\n\r\n      source = new fabric.Color(this.color).getSource();\r\n      tr = source[0] * this.alpha;\r\n      tg = source[1] * this.alpha;\r\n      tb = source[2] * this.alpha;\r\n\r\n      for (var i = 0; i < iLen; i += 4) {\r\n\r\n        r = data[i];\r\n        g = data[i + 1];\r\n        b = data[i + 2];\r\n\r\n        switch (this.mode) {\r\n          case 'multiply':\r\n            data[i] = r * tr / 255;\r\n            data[i + 1] = g * tg / 255;\r\n            data[i + 2] = b * tb / 255;\r\n            break;\r\n          case 'screen':\r\n            data[i] = 255 - (255 - r) * (255 - tr) / 255;\r\n            data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\r\n            data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\r\n            break;\r\n          case 'add':\r\n            data[i] = r + tr;\r\n            data[i + 1] = g + tg;\r\n            data[i + 2] = b + tb;\r\n            break;\r\n          case 'diff':\r\n          case 'difference':\r\n            data[i] = Math.abs(r - tr);\r\n            data[i + 1] = Math.abs(g - tg);\r\n            data[i + 2] = Math.abs(b - tb);\r\n            break;\r\n          case 'subtract':\r\n            data[i] = r - tr;\r\n            data[i + 1] = g - tg;\r\n            data[i + 2] = b - tb;\r\n            break;\r\n          case 'darken':\r\n            data[i] = Math.min(r, tr);\r\n            data[i + 1] = Math.min(g, tg);\r\n            data[i + 2] = Math.min(b, tb);\r\n            break;\r\n          case 'lighten':\r\n            data[i] = Math.max(r, tr);\r\n            data[i + 1] = Math.max(g, tg);\r\n            data[i + 2] = Math.max(b, tb);\r\n            break;\r\n          case 'overlay':\r\n            data[i] = tr < 128 ? (2 * r * tr / 255) : (255 - 2 * (255 - r) * (255 - tr) / 255);\r\n            data[i + 1] = tg < 128 ? (2 * g * tg / 255) : (255 - 2 * (255 - g) * (255 - tg) / 255);\r\n            data[i + 2] = tb < 128 ? (2 * b * tb / 255) : (255 - 2 * (255 - b) * (255 - tb) / 255);\r\n            break;\r\n          case 'exclusion':\r\n            data[i] = tr + r - ((2 * tr * r) / 255);\r\n            data[i + 1] = tg + g - ((2 * tg * g) / 255);\r\n            data[i + 2] = tb + b - ((2 * tb * b) / 255);\r\n            break;\r\n          case 'tint':\r\n            data[i] = tr + r * alpha1;\r\n            data[i + 1] = tg + g * alpha1;\r\n            data[i + 2] = tb + b * alpha1;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uColor: gl.getUniformLocation(program, 'uColor'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      var source = new fabric.Color(this.color).getSource();\r\n      source[0] = this.alpha * source[0] / 255;\r\n      source[1] = this.alpha * source[1] / 255;\r\n      source[2] = this.alpha * source[2] / 255;\r\n      source[3] = this.alpha;\r\n      gl.uniform4fv(uniformLocations.uColor, source);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      return {\r\n        type: this.type,\r\n        color: this.color,\r\n        mode: this.mode,\r\n        alpha: this.alpha\r\n      };\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\r\n   */\r\n  fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n  'use strict';\r\n\r\n  var fabric = global.fabric,\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Image Blend filter class\r\n   * @class fabric.Image.filter.BlendImage\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @example\r\n   * var filter = new fabric.Image.filters.BlendColor({\r\n   *  color: '#000',\r\n   *  mode: 'multiply'\r\n   * });\r\n   *\r\n   * var filter = new fabric.Image.filters.BlendImage({\r\n   *  image: fabricImageObject,\r\n   *  mode: 'multiply',\r\n   *  alpha: 0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */\r\n\r\n  filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\r\n    type: 'BlendImage',\r\n\r\n    /**\r\n     * Color to make the blend operation with. default to a reddish color since black or white\r\n     * gives always strong result.\r\n     **/\r\n    image: null,\r\n\r\n    /**\r\n     * Blend mode for the filter (one of \"multiply\", \"mask\")\r\n     * @type String\r\n     * @default\r\n     **/\r\n    mode: 'multiply',\r\n\r\n    /**\r\n     * alpha value. represent the strength of the blend image operation.\r\n     * not implemented.\r\n     **/\r\n    alpha: 1,\r\n\r\n    vertexSource: 'attribute vec2 aPosition;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'varying vec2 vTexCoord2;\\n' +\r\n      'uniform mat3 uTransformMatrix;\\n' +\r\n      'void main() {\\n' +\r\n        'vTexCoord = aPosition;\\n' +\r\n        'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n' +\r\n        'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Fragment source for the Multiply program\r\n     */\r\n    fragmentSource: {\r\n      multiply: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform sampler2D uImage;\\n' +\r\n        'uniform vec4 uColor;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'varying vec2 vTexCoord2;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n          'color.rgba *= color2.rgba;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n      mask: 'precision highp float;\\n' +\r\n        'uniform sampler2D uTexture;\\n' +\r\n        'uniform sampler2D uImage;\\n' +\r\n        'uniform vec4 uColor;\\n' +\r\n        'varying vec2 vTexCoord;\\n' +\r\n        'varying vec2 vTexCoord2;\\n' +\r\n        'void main() {\\n' +\r\n          'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n          'vec4 color2 = texture2D(uImage, vTexCoord2);\\n' +\r\n          'color.a = color2.a;\\n' +\r\n          'gl_FragColor = color;\\n' +\r\n        '}',\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      var cacheKey = this.type + '_' + this.mode;\r\n      var shaderSource = this.fragmentSource[this.mode];\r\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\r\n      }\r\n      return options.programCache[cacheKey];\r\n    },\r\n\r\n    applyToWebGL: function(options) {\r\n      // load texture to blend.\r\n      var gl = options.context,\r\n          texture = this.createTexture(options.filterBackend, this.image);\r\n      this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\r\n      this.callSuper('applyToWebGL', options);\r\n      this.unbindAdditionalTexture(gl, gl.TEXTURE1);\r\n    },\r\n\r\n    createTexture: function(backend, image) {\r\n      return backend.getCachedTexture(image.cacheKey, image._element);\r\n    },\r\n\r\n    /**\r\n     * Calculate a transformMatrix to adapt the image to blend over\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    calculateMatrix: function() {\r\n      var image = this.image,\r\n          width = image._element.width,\r\n          height = image._element.height;\r\n      return [\r\n        1 / image.scaleX, 0, 0,\r\n        0, 1 / image.scaleY, 0,\r\n        -image.left / width, -image.top / height, 1\r\n      ];\r\n    },\r\n\r\n    /**\r\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          resources = options.filterBackend.resources,\r\n          data = imageData.data, iLen = data.length,\r\n          width = imageData.width,\r\n          height = imageData.height,\r\n          tr, tg, tb, ta,\r\n          r, g, b, a,\r\n          canvas1, context, image = this.image, blendData;\r\n\r\n      if (!resources.blendImage) {\r\n        resources.blendImage = fabric.util.createCanvasElement();\r\n      }\r\n      canvas1 = resources.blendImage;\r\n      context = canvas1.getContext('2d');\r\n      if (canvas1.width !== width || canvas1.height !== height) {\r\n        canvas1.width = width;\r\n        canvas1.height = height;\r\n      }\r\n      else {\r\n        context.clearRect(0, 0, width, height);\r\n      }\r\n      context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\r\n      context.drawImage(image._element, 0, 0, width, height);\r\n      blendData = context.getImageData(0, 0, width, height).data;\r\n      for (var i = 0; i < iLen; i += 4) {\r\n\r\n        r = data[i];\r\n        g = data[i + 1];\r\n        b = data[i + 2];\r\n        a = data[i + 3];\r\n\r\n        tr = blendData[i];\r\n        tg = blendData[i + 1];\r\n        tb = blendData[i + 2];\r\n        ta = blendData[i + 3];\r\n\r\n        switch (this.mode) {\r\n          case 'multiply':\r\n            data[i] = r * tr / 255;\r\n            data[i + 1] = g * tg / 255;\r\n            data[i + 2] = b * tb / 255;\r\n            data[i + 3] = a * ta / 255;\r\n            break;\r\n          case 'mask':\r\n            data[i + 3] = ta;\r\n            break;\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),\r\n        uImage: gl.getUniformLocation(program, 'uImage'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      var matrix = this.calculateMatrix();\r\n      gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\r\n      gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      return {\r\n        type: this.type,\r\n        image: this.image && this.image.toObject(),\r\n        mode: this.mode,\r\n        alpha: this.alpha\r\n      };\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} callback to be invoked after filter creation\r\n   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\r\n   */\r\n  fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\r\n    fabric.Image.fromObject(object.image, function(image) {\r\n      var options = fabric.util.object.clone(object);\r\n      options.image = image;\r\n      callback(new fabric.Image.filters.BlendImage(options));\r\n    });\r\n  };\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,\r\n      sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin,\r\n      ceil = Math.ceil,\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Resize image filter class\r\n   * @class fabric.Image.filters.Resize\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Resize();\r\n   * object.filters.push(filter);\r\n   * object.applyFilters(canvas.renderAll.bind(canvas));\r\n   */\r\n  filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Resize',\r\n\r\n    /**\r\n     * Resize type\r\n     * for webgl resizeType is just lanczos, for canvas2d can be:\r\n     * bilinear, hermite, sliceHack, lanczos.\r\n     * @param {String} resizeType\r\n     * @default\r\n     */\r\n    resizeType: 'hermite',\r\n\r\n    /**\r\n     * Scale factor for resizing, x axis\r\n     * @param {Number} scaleX\r\n     * @default\r\n     */\r\n    scaleX: 1,\r\n\r\n    /**\r\n     * Scale factor for resizing, y axis\r\n     * @param {Number} scaleY\r\n     * @default\r\n     */\r\n    scaleY: 1,\r\n\r\n    /**\r\n     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\r\n     * @param {Number} lanczosLobes\r\n     * @default\r\n     */\r\n    lanczosLobes: 3,\r\n\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uDelta: gl.getUniformLocation(program, 'uDelta'),\r\n        uTaps: gl.getUniformLocation(program, 'uTaps'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);\r\n      gl.uniform1fv(uniformLocations.uTaps, this.taps);\r\n    },\r\n\r\n    /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    retrieveShader: function(options) {\r\n      var filterWindow = this.getFilterWindow(), cacheKey = this.type + '_' + filterWindow;\r\n      if (!options.programCache.hasOwnProperty(cacheKey)) {\r\n        var fragmentShader = this.generateShader(filterWindow);\r\n        options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\r\n      }\r\n      return options.programCache[cacheKey];\r\n    },\r\n\r\n    getFilterWindow: function() {\r\n      var scale = this.tempScale;\r\n      return Math.ceil(this.lanczosLobes / scale);\r\n    },\r\n\r\n    getTaps: function() {\r\n      var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale,\r\n          filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\r\n      for (var i = 1; i <= filterWindow; i++) {\r\n        taps[i - 1] = lobeFunction(i * scale);\r\n      }\r\n      return taps;\r\n    },\r\n\r\n    /**\r\n     * Generate vertex and shader sources from the necessary steps numbers\r\n     * @param {Number} filterWindow\r\n     */\r\n    generateShader: function(filterWindow) {\r\n      var offsets = new Array(filterWindow),\r\n          fragmentShader = this.fragmentSourceTOP, filterWindow;\r\n\r\n      for (var i = 1; i <= filterWindow; i++) {\r\n        offsets[i - 1] = i + '.0 * uDelta';\r\n      }\r\n\r\n      fragmentShader += 'uniform float uTaps[' + filterWindow + '];\\n';\r\n      fragmentShader += 'void main() {\\n';\r\n      fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\\n';\r\n      fragmentShader += '  float sum = 1.0;\\n';\r\n\r\n      offsets.forEach(function(offset, i) {\r\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\\n';\r\n        fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\\n';\r\n        fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\\n';\r\n      });\r\n      fragmentShader += '  gl_FragColor = color / sum;\\n';\r\n      fragmentShader += '}';\r\n      return fragmentShader;\r\n    },\r\n\r\n    fragmentSourceTOP: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform vec2 uDelta;\\n' +\r\n      'varying vec2 vTexCoord;\\n',\r\n\r\n    /**\r\n     * Apply the resize filter to the image\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyTo: function(options) {\r\n      if (options.webgl) {\r\n        options.passes++;\r\n        this.width = options.sourceWidth;\r\n        this.horizontal = true;\r\n        this.dW = Math.round(this.width * this.scaleX);\r\n        this.dH = options.sourceHeight;\r\n        this.tempScale = this.dW / this.width;\r\n        this.taps = this.getTaps();\r\n        options.destinationWidth = this.dW;\r\n        this._setupFrameBuffer(options);\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n        options.sourceWidth = options.destinationWidth;\r\n\r\n        this.height = options.sourceHeight;\r\n        this.horizontal = false;\r\n        this.dH = Math.round(this.height * this.scaleY);\r\n        this.tempScale = this.dH / this.height;\r\n        this.taps = this.getTaps();\r\n        options.destinationHeight = this.dH;\r\n        this._setupFrameBuffer(options);\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n        options.sourceHeight = options.destinationHeight;\r\n      }\r\n      else {\r\n        this.applyTo2d(options);\r\n      }\r\n    },\r\n\r\n    isNeutralState: function() {\r\n      return this.scaleX === 1 && this.scaleY === 1;\r\n    },\r\n\r\n    lanczosCreate: function(lobes) {\r\n      return function(x) {\r\n        if (x >= lobes || x <= -lobes) {\r\n          return 0.0;\r\n        }\r\n        if (x < 1.19209290E-07 && x > -1.19209290E-07) {\r\n          return 1.0;\r\n        }\r\n        x *= Math.PI;\r\n        var xx = x / lobes;\r\n        return (sin(x) / x) * sin(xx) / xx;\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Applies filter to canvas element\r\n     * @memberOf fabric.Image.filters.Resize.prototype\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} scaleX\r\n     * @param {Number} scaleY\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData,\r\n          scaleX = this.scaleX,\r\n          scaleY = this.scaleY;\r\n\r\n      this.rcpScaleX = 1 / scaleX;\r\n      this.rcpScaleY = 1 / scaleY;\r\n\r\n      var oW = imageData.width, oH = imageData.height,\r\n          dW = round(oW * scaleX), dH = round(oH * scaleY),\r\n          newData;\r\n\r\n      if (this.resizeType === 'sliceHack') {\r\n        newData = this.sliceByTwo(options, oW, oH, dW, dH);\r\n      }\r\n      else if (this.resizeType === 'hermite') {\r\n        newData = this.hermiteFastResize(options, oW, oH, dW, dH);\r\n      }\r\n      else if (this.resizeType === 'bilinear') {\r\n        newData = this.bilinearFiltering(options, oW, oH, dW, dH);\r\n      }\r\n      else if (this.resizeType === 'lanczos') {\r\n        newData = this.lanczosResize(options, oW, oH, dW, dH);\r\n      }\r\n      options.imageData = newData;\r\n    },\r\n\r\n    /**\r\n     * Filter sliceByTwo\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */\r\n    sliceByTwo: function(options, oW, oH, dW, dH) {\r\n      var imageData = options.imageData,\r\n          mult = 0.5, doneW = false, doneH = false, stepW = oW * mult,\r\n          stepH = oH * mult, resources = fabric.filterBackend.resources,\r\n          tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\r\n      if (!resources.sliceByTwo) {\r\n        resources.sliceByTwo = document.createElement('canvas');\r\n      }\r\n      tmpCanvas = resources.sliceByTwo;\r\n      if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\r\n        tmpCanvas.width = oW * 1.5;\r\n        tmpCanvas.height = oH;\r\n      }\r\n      ctx = tmpCanvas.getContext('2d');\r\n      ctx.clearRect(0, 0, oW * 1.5, oH);\r\n      ctx.putImageData(imageData, 0, 0);\r\n\r\n      dW = floor(dW);\r\n      dH = floor(dH);\r\n\r\n      while (!doneW || !doneH) {\r\n        oW = stepW;\r\n        oH = stepH;\r\n        if (dW < floor(stepW * mult)) {\r\n          stepW = floor(stepW * mult);\r\n        }\r\n        else {\r\n          stepW = dW;\r\n          doneW = true;\r\n        }\r\n        if (dH < floor(stepH * mult)) {\r\n          stepH = floor(stepH * mult);\r\n        }\r\n        else {\r\n          stepH = dH;\r\n          doneH = true;\r\n        }\r\n        ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\r\n        sX = dX;\r\n        sY = dY;\r\n        dY += stepH;\r\n      }\r\n      return ctx.getImageData(sX, sY, dW, dH);\r\n    },\r\n\r\n    /**\r\n     * Filter lanczosResize\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */\r\n    lanczosResize: function(options, oW, oH, dW, dH) {\r\n\r\n      function process(u) {\r\n        var v, i, weight, idx, a, red, green,\r\n            blue, alpha, fX, fY;\r\n        center.x = (u + 0.5) * ratioX;\r\n        icenter.x = floor(center.x);\r\n        for (v = 0; v < dH; v++) {\r\n          center.y = (v + 0.5) * ratioY;\r\n          icenter.y = floor(center.y);\r\n          a = 0; red = 0; green = 0; blue = 0; alpha = 0;\r\n          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {\r\n            if (i < 0 || i >= oW) {\r\n              continue;\r\n            }\r\n            fX = floor(1000 * abs(i - center.x));\r\n            if (!cacheLanc[fX]) {\r\n              cacheLanc[fX] = { };\r\n            }\r\n            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {\r\n              if (j < 0 || j >= oH) {\r\n                continue;\r\n              }\r\n              fY = floor(1000 * abs(j - center.y));\r\n              if (!cacheLanc[fX][fY]) {\r\n                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\r\n              }\r\n              weight = cacheLanc[fX][fY];\r\n              if (weight > 0) {\r\n                idx = (j * oW + i) * 4;\r\n                a += weight;\r\n                red += weight * srcData[idx];\r\n                green += weight * srcData[idx + 1];\r\n                blue += weight * srcData[idx + 2];\r\n                alpha += weight * srcData[idx + 3];\r\n              }\r\n            }\r\n          }\r\n          idx = (v * dW + u) * 4;\r\n          destData[idx] = red / a;\r\n          destData[idx + 1] = green / a;\r\n          destData[idx + 2] = blue / a;\r\n          destData[idx + 3] = alpha / a;\r\n        }\r\n\r\n        if (++u < dW) {\r\n          return process(u);\r\n        }\r\n        else {\r\n          return destImg;\r\n        }\r\n      }\r\n\r\n      var srcData = options.imageData.data,\r\n          destImg = options.ctx.createImageData(dW, dH),\r\n          destData = destImg.data,\r\n          lanczos = this.lanczosCreate(this.lanczosLobes),\r\n          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,\r\n          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,\r\n          range2X = ceil(ratioX * this.lanczosLobes / 2),\r\n          range2Y = ceil(ratioY * this.lanczosLobes / 2),\r\n          cacheLanc = { }, center = { }, icenter = { };\r\n\r\n      return process(0);\r\n    },\r\n\r\n    /**\r\n     * bilinearFiltering\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */\r\n    bilinearFiltering: function(options, oW, oH, dW, dH) {\r\n      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,\r\n          color, offset = 0, origPix, ratioX = this.rcpScaleX,\r\n          ratioY = this.rcpScaleY,\r\n          w4 = 4 * (oW - 1), img = options.imageData,\r\n          pixels = img.data, destImage = options.ctx.createImageData(dW, dH),\r\n          destPixels = destImage.data;\r\n      for (i = 0; i < dH; i++) {\r\n        for (j = 0; j < dW; j++) {\r\n          x = floor(ratioX * j);\r\n          y = floor(ratioY * i);\r\n          xDiff = ratioX * j - x;\r\n          yDiff = ratioY * i - y;\r\n          origPix = 4 * (y * oW + x);\r\n\r\n          for (chnl = 0; chnl < 4; chnl++) {\r\n            a = pixels[origPix + chnl];\r\n            b = pixels[origPix + 4 + chnl];\r\n            c = pixels[origPix + w4 + chnl];\r\n            d = pixels[origPix + w4 + 4 + chnl];\r\n            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +\r\n                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\r\n            destPixels[offset++] = color;\r\n          }\r\n        }\r\n      }\r\n      return destImage;\r\n    },\r\n\r\n    /**\r\n     * hermiteFastResize\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */\r\n    hermiteFastResize: function(options, oW, oH, dW, dH) {\r\n      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,\r\n          ratioWHalf = ceil(ratioW / 2),\r\n          ratioHHalf = ceil(ratioH / 2),\r\n          img = options.imageData, data = img.data,\r\n          img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\r\n      for (var j = 0; j < dH; j++) {\r\n        for (var i = 0; i < dW; i++) {\r\n          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,\r\n              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\r\n          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {\r\n            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,\r\n                centerX = (i + 0.5) * ratioW, w0 = dy * dy;\r\n            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {\r\n              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,\r\n                  w = sqrt(w0 + dx * dx);\r\n              /* eslint-disable max-depth */\r\n              if (w > 1 && w < -1) {\r\n                continue;\r\n              }\r\n              //hermite filter\r\n              weight = 2 * w * w * w - 3 * w * w + 1;\r\n              if (weight > 0) {\r\n                dx = 4 * (xx + yy * oW);\r\n                //alpha\r\n                gxA += weight * data[dx + 3];\r\n                weightsAlpha += weight;\r\n                //colors\r\n                if (data[dx + 3] < 255) {\r\n                  weight = weight * data[dx + 3] / 250;\r\n                }\r\n                gxR += weight * data[dx];\r\n                gxG += weight * data[dx + 1];\r\n                gxB += weight * data[dx + 2];\r\n                weights += weight;\r\n              }\r\n              /* eslint-enable max-depth */\r\n            }\r\n          }\r\n          data2[x2] = gxR / weights;\r\n          data2[x2 + 1] = gxG / weights;\r\n          data2[x2 + 2] = gxB / weights;\r\n          data2[x2 + 3] = gxA / weightsAlpha;\r\n        }\r\n      }\r\n      return img2;\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function() {\r\n      return {\r\n        type: this.type,\r\n        scaleX: this.scaleX,\r\n        scaleY: this.scaleY,\r\n        resizeType: this.resizeType,\r\n        lanczosLobes: this.lanczosLobes\r\n      };\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\r\n   */\r\n  fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Contrast filter class\r\n   * @class fabric.Image.filters.Contrast\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Contrast({\r\n   *   contrast: 0.25\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Contrast',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform float uContrast;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n' +\r\n        'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * contrast value, range from -1 to 1.\r\n     * @param {Number} contrast\r\n     * @default 0\r\n     */\r\n    contrast: 0,\r\n\r\n    mainParameter: 'contrast',\r\n\r\n    /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.Contrast.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\r\n     */\r\n\r\n    /**\r\n      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\r\n      *\r\n      * @param {Object} options\r\n      * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n      */\r\n    applyTo2d: function(options) {\r\n      if (this.contrast === 0) {\r\n        return;\r\n      }\r\n      var imageData = options.imageData, i, len,\r\n          data = imageData.data, len = data.length,\r\n          contrast = Math.floor(this.contrast * 255),\r\n          contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\r\n\r\n      for (i = 0; i < len; i += 4) {\r\n        data[i] = contrastF * (data[i] - 128) + 128;\r\n        data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\r\n        data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uContrast: gl.getUniformLocation(program, 'uContrast'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1f(uniformLocations.uContrast, this.contrast);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\r\n   */\r\n  fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Saturate filter class\r\n   * @class fabric.Image.filters.Saturation\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Saturation({\r\n   *   saturation: 1\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Saturation',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform float uSaturation;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'float rgMax = max(color.r, color.g);\\n' +\r\n        'float rgbMax = max(rgMax, color.b);\\n' +\r\n        'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n' +\r\n        'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n' +\r\n        'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Saturation value, from -1 to 1.\r\n     * Increases/decreases the color saturation.\r\n     * A value of 0 has no effect.\r\n     * \r\n     * @param {Number} saturation\r\n     * @default\r\n     */\r\n    saturation: 0,\r\n\r\n    mainParameter: 'saturation',\r\n\r\n    /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.Saturate.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\r\n     */\r\n\r\n    /**\r\n     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      if (this.saturation === 0) {\r\n        return;\r\n      }\r\n      var imageData = options.imageData,\r\n          data = imageData.data, len = data.length,\r\n          adjust = -this.saturation, i, max;\r\n\r\n      for (i = 0; i < len; i += 4) {\r\n        max = Math.max(data[i], data[i + 1], data[i + 2]);\r\n        data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\r\n        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\r\n        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uSaturation: gl.getUniformLocation(program, 'uSaturation'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\r\n   */\r\n  fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Blur filter class\r\n   * @class fabric.Image.filters.Blur\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Blur({\r\n   *   blur: 0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */\r\n  filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\r\n\r\n    type: 'Blur',\r\n\r\n    /*\r\n'gl_FragColor = vec4(0.0);',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\r\n'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\r\n*/\r\n\r\n    /* eslint-disable max-len */\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform vec2 uDelta;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'const float nSamples = 15.0;\\n' +\r\n      'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n' +\r\n      'float random(vec3 scale) {\\n' +\r\n        /* use the fragment position for a different seed per-pixel */\r\n        'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n' +\r\n      '}\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = vec4(0.0);\\n' +\r\n        'float total = 0.0;\\n' +\r\n        'float offset = random(v3offset);\\n' +\r\n        'for (float t = -nSamples; t <= nSamples; t++) {\\n' +\r\n          'float percent = (t + offset - 0.5) / nSamples;\\n' +\r\n          'float weight = 1.0 - abs(percent);\\n' +\r\n          'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n' +\r\n          'total += weight;\\n' +\r\n        '}\\n' +\r\n        'gl_FragColor = color / total;\\n' +\r\n      '}',\r\n    /* eslint-enable max-len */\r\n\r\n    /**\r\n     * blur value, in percentage of image dimensions.\r\n     * specific to keep the image blur constant at different resolutions\r\n     * range between 0 and 1.\r\n     * @type Number\r\n     * @default\r\n     */\r\n    blur: 0,\r\n\r\n    mainParameter: 'blur',\r\n\r\n    applyTo: function(options) {\r\n      if (options.webgl) {\r\n        // this aspectRatio is used to give the same blur to vertical and horizontal\r\n        this.aspectRatio = options.sourceWidth / options.sourceHeight;\r\n        options.passes++;\r\n        this._setupFrameBuffer(options);\r\n        this.horizontal = true;\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n        this._setupFrameBuffer(options);\r\n        this.horizontal = false;\r\n        this.applyToWebGL(options);\r\n        this._swapTextures(options);\r\n      }\r\n      else {\r\n        this.applyTo2d(options);\r\n      }\r\n    },\r\n\r\n    applyTo2d: function(options) {\r\n      // paint canvasEl with current image data.\r\n      //options.ctx.putImageData(options.imageData, 0, 0);\r\n      options.imageData = this.simpleBlur(options);\r\n    },\r\n\r\n    simpleBlur: function(options) {\r\n      var resources = options.filterBackend.resources, canvas1, canvas2,\r\n          width = options.imageData.width,\r\n          height = options.imageData.height;\r\n\r\n      if (!resources.blurLayer1) {\r\n        resources.blurLayer1 = fabric.util.createCanvasElement();\r\n        resources.blurLayer2 = fabric.util.createCanvasElement();\r\n      }\r\n      canvas1 = resources.blurLayer1;\r\n      canvas2 = resources.blurLayer2;\r\n      if (canvas1.width !== width || canvas1.height !== height) {\r\n        canvas2.width = canvas1.width = width;\r\n        canvas2.height = canvas1.height = height;\r\n      }\r\n      var ctx1 = canvas1.getContext('2d'),\r\n          ctx2 = canvas2.getContext('2d'),\r\n          nSamples = 15,\r\n          random, percent, j, i,\r\n          blur = this.blur * 0.06 * 0.5;\r\n\r\n      // load first canvas\r\n      ctx1.putImageData(options.imageData, 0, 0);\r\n      ctx2.clearRect(0, 0, width, height);\r\n\r\n      for (i = -nSamples; i <= nSamples; i++) {\r\n        random = (Math.random() - 0.5) / 4;\r\n        percent = i / nSamples;\r\n        j = blur * percent * width + random;\r\n        ctx2.globalAlpha = 1 - Math.abs(percent);\r\n        ctx2.drawImage(canvas1, j, random);\r\n        ctx1.drawImage(canvas2, 0, 0);\r\n        ctx2.globalAlpha = 1;\r\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n      }\r\n      for (i = -nSamples; i <= nSamples; i++) {\r\n        random = (Math.random() - 0.5) / 4;\r\n        percent = i / nSamples;\r\n        j = blur * percent * height + random;\r\n        ctx2.globalAlpha = 1 - Math.abs(percent);\r\n        ctx2.drawImage(canvas1, random, j);\r\n        ctx1.drawImage(canvas2, 0, 0);\r\n        ctx2.globalAlpha = 1;\r\n        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\r\n      }\r\n      options.ctx.drawImage(canvas1, 0, 0);\r\n      var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\r\n      ctx1.globalAlpha = 1;\r\n      ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\r\n      return newImageData;\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        delta: gl.getUniformLocation(program, 'uDelta'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      var delta = this.chooseRightDelta();\r\n      gl.uniform2fv(uniformLocations.delta, delta);\r\n    },\r\n\r\n    /**\r\n     * choose right value of image percentage to blur with\r\n     * @returns {Array} a numeric array with delta values\r\n     */\r\n    chooseRightDelta: function() {\r\n      var blurScale = 1, delta = [0, 0], blur;\r\n      if (this.horizontal) {\r\n        if (this.aspectRatio > 1) {\r\n          // image is wide, i want to shrink radius horizontal\r\n          blurScale = 1 / this.aspectRatio;\r\n        }\r\n      }\r\n      else {\r\n        if (this.aspectRatio < 1) {\r\n          // image is tall, i want to shrink radius vertical\r\n          blurScale = this.aspectRatio;\r\n        }\r\n      }\r\n      blur = blurScale * this.blur * 0.12;\r\n      if (this.horizontal) {\r\n        delta[0] = blur;\r\n      }\r\n      else {\r\n        delta[1] = blur;\r\n      }\r\n      return delta;\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Deserialize a JSON definition of a BlurFilter into a concrete instance.\r\n   */\r\n  filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * Gamma filter class\r\n   * @class fabric.Image.filters.Gamma\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Gamma({\r\n   *   gamma: [1, 0.5, 2.1]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'Gamma',\r\n\r\n    fragmentSource: 'precision highp float;\\n' +\r\n      'uniform sampler2D uTexture;\\n' +\r\n      'uniform vec3 uGamma;\\n' +\r\n      'varying vec2 vTexCoord;\\n' +\r\n      'void main() {\\n' +\r\n        'vec4 color = texture2D(uTexture, vTexCoord);\\n' +\r\n        'vec3 correction = (1.0 / uGamma);\\n' +\r\n        'color.r = pow(color.r, correction.r);\\n' +\r\n        'color.g = pow(color.g, correction.g);\\n' +\r\n        'color.b = pow(color.b, correction.b);\\n' +\r\n        'gl_FragColor = color;\\n' +\r\n        'gl_FragColor.rgb *= color.a;\\n' +\r\n      '}',\r\n\r\n    /**\r\n     * Gamma array value, from 0.01 to 2.2.\r\n     * @param {Array} gamma\r\n     * @default\r\n     */\r\n    gamma: [1, 1, 1],\r\n\r\n    /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */\r\n    mainParameter: 'gamma',\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      this.gamma = [1, 1, 1];\r\n      filters.BaseFilter.prototype.initialize.call(this, options);\r\n    },\r\n\r\n    /**\r\n     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */\r\n    applyTo2d: function(options) {\r\n      var imageData = options.imageData, data = imageData.data,\r\n          gamma = this.gamma, len = data.length,\r\n          rInv = 1 / gamma[0], gInv = 1 / gamma[1],\r\n          bInv = 1 / gamma[2], i;\r\n\r\n      if (!this.rVals) {\r\n        // eslint-disable-next-line\r\n        this.rVals = new Uint8Array(256);\r\n        // eslint-disable-next-line\r\n        this.gVals = new Uint8Array(256);\r\n        // eslint-disable-next-line\r\n        this.bVals = new Uint8Array(256);\r\n      }\r\n\r\n      // This is an optimization - pre-compute a look-up table for each color channel\r\n      // instead of performing these pow calls for each pixel in the image.\r\n      for (i = 0, len = 256; i < len; i++) {\r\n        this.rVals[i] = Math.pow(i / 255, rInv) * 255;\r\n        this.gVals[i] = Math.pow(i / 255, gInv) * 255;\r\n        this.bVals[i] = Math.pow(i / 255, bInv) * 255;\r\n      }\r\n      for (i = 0, len = data.length; i < len; i += 4) {\r\n        data[i] = this.rVals[data[i]];\r\n        data[i + 1] = this.gVals[data[i + 1]];\r\n        data[i + 2] = this.bVals[data[i + 2]];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */\r\n    getUniformLocations: function(gl, program) {\r\n      return {\r\n        uGamma: gl.getUniformLocation(program, 'uGamma'),\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */\r\n    sendUniformData: function(gl, uniformLocations) {\r\n      gl.uniform3fv(uniformLocations.uGamma, this.gamma);\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\r\n   */\r\n  fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * A container class that knows how to apply a sequence of filters to an input image.\r\n   */\r\n  filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\r\n\r\n    type: 'Composed',\r\n\r\n    /**\r\n     * A non sparse array of filters to apply\r\n     */\r\n    subFilters: [],\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */\r\n    initialize: function(options) {\r\n      this.callSuper('initialize', options);\r\n      // create a new array instead mutating the prototype with push\r\n      this.subFilters = this.subFilters.slice(0);\r\n    },\r\n\r\n    /**\r\n     * Apply this container's filters to the input image provided.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be applied.\r\n     */\r\n    applyTo: function(options) {\r\n      options.passes += this.subFilters.length - 1;\r\n      this.subFilters.forEach(function(filter) {\r\n        filter.applyTo(options);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Serialize this filter into JSON.\r\n     *\r\n     * @returns {Object} A JSON representation of this filter.\r\n     */\r\n    toObject: function() {\r\n      return fabric.util.object.extend(this.callSuper('toObject'), {\r\n        subFilters: this.subFilters.map(function(filter) { return filter.toObject(); }),\r\n      });\r\n    },\r\n\r\n    isNeutralState: function() {\r\n      return !this.subFilters.some(function(filter) { return !filter.isNeutralState(); });\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\r\n   */\r\n  fabric.Image.filters.Composed.fromObject = function(object, callback) {\r\n    var filters = object.subFilters || [],\r\n        subFilters = filters.map(function(filter) {\r\n          return new fabric.Image.filters[filter.type](filter);\r\n        }),\r\n        instance = new fabric.Image.filters.Composed({ subFilters: subFilters });\r\n    callback && callback(instance);\r\n    return instance;\r\n  };\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric  = global.fabric || (global.fabric = { }),\r\n      filters = fabric.Image.filters,\r\n      createClass = fabric.util.createClass;\r\n\r\n  /**\r\n   * HueRotation filter class\r\n   * @class fabric.Image.filters.HueRotation\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.HueRotation({\r\n   *   rotation: -0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */\r\n  filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\r\n\r\n    /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */\r\n    type: 'HueRotation',\r\n\r\n    /**\r\n     * HueRotation value, from -1 to 1.\r\n     * the unit is radians\r\n     * @param {Number} myParameter\r\n     * @default\r\n     */\r\n    rotation: 0,\r\n\r\n    /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */\r\n    mainParameter: 'rotation',\r\n\r\n    calculateMatrix: function() {\r\n      var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad),\r\n          aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\r\n      this.matrix = [\r\n        1, 0, 0, 0, 0,\r\n        0, 1, 0, 0, 0,\r\n        0, 0, 1, 0, 0,\r\n        0, 0, 0, 1, 0\r\n      ];\r\n      this.matrix[0] = cos + OneMinusCos / 3;\r\n      this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\r\n      this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\r\n      this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\r\n      this.matrix[6] = cos + aThird * OneMinusCos;\r\n      this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\r\n      this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\r\n      this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\r\n      this.matrix[12] = cos + aThird * OneMinusCos;\r\n    },\r\n\r\n    /**\r\n     * HueRotation isNeutralState implementation\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * @param {Object} options\r\n     **/\r\n    isNeutralState: function(options) {\r\n      this.calculateMatrix();\r\n      return filters.BaseFilter.prototype.isNeutralState.call(this, options);\r\n    },\r\n\r\n    /**\r\n     * Apply this filter to the input image data provided.\r\n     *\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */\r\n    applyTo: function(options) {\r\n      this.calculateMatrix();\r\n      filters.BaseFilter.prototype.applyTo.call(this, options);\r\n    },\r\n\r\n  });\r\n\r\n  /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\r\n   */\r\n  fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function(global) {\r\n\r\n  'use strict';\r\n\r\n  var fabric = global.fabric || (global.fabric = { }),\r\n      clone = fabric.util.object.clone;\r\n\r\n  if (fabric.Text) {\r\n    fabric.warn('fabric.Text is already defined');\r\n    return;\r\n  }\r\n\r\n  var additionalProps =\r\n    ('fontFamily fontWeight fontSize text underline overline linethrough' +\r\n    ' textAlign fontStyle lineHeight textBackgroundColor charSpacing styles' +\r\n    ' direction path pathStartOffset pathSide pathAlign').split(' ');\r\n\r\n  /**\r\n   * Text class\r\n   * @class fabric.Text\r\n   * @extends fabric.Object\r\n   * @return {fabric.Text} thisArg\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\r\n   * @see {@link fabric.Text#initialize} for constructor definition\r\n   */\r\n  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\r\n\r\n    /**\r\n     * Properties which when set cause object to change dimensions\r\n     * @type Array\r\n     * @private\r\n     */\r\n    _dimensionAffectingProps: [\r\n      'fontSize',\r\n      'fontWeight',\r\n      'fontFamily',\r\n      'fontStyle',\r\n      'lineHeight',\r\n      'text',\r\n      'charSpacing',\r\n      'textAlign',\r\n      'styles',\r\n      'path',\r\n      'pathStartOffset',\r\n      'pathSide',\r\n      'pathAlign'\r\n    ],\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _reNewline: /\\r?\\n/,\r\n\r\n    /**\r\n     * Use this regular expression to filter for whitespaces that is not a new line.\r\n     * Mostly used when text is 'justify' aligned.\r\n     * @private\r\n     */\r\n    _reSpacesAndTabs: /[ \\t\\r]/g,\r\n\r\n    /**\r\n     * Use this regular expression to filter for whitespace that is not a new line.\r\n     * Mostly used when text is 'justify' aligned.\r\n     * @private\r\n     */\r\n    _reSpaceAndTab: /[ \\t\\r]/,\r\n\r\n    /**\r\n     * Use this regular expression to filter consecutive groups of non spaces.\r\n     * Mostly used when text is 'justify' aligned.\r\n     * @private\r\n     */\r\n    _reWords: /\\S+/g,\r\n\r\n    /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */\r\n    type:                 'text',\r\n\r\n    /**\r\n     * Font size (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    fontSize:             40,\r\n\r\n    /**\r\n     * Font weight (e.g. bold, normal, 400, 600, 800)\r\n     * @type {(Number|String)}\r\n     * @default\r\n     */\r\n    fontWeight:           'normal',\r\n\r\n    /**\r\n     * Font family\r\n     * @type String\r\n     * @default\r\n     */\r\n    fontFamily:           'Times New Roman',\r\n\r\n    /**\r\n     * Text decoration underline.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    underline:       false,\r\n\r\n    /**\r\n     * Text decoration overline.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    overline:       false,\r\n\r\n    /**\r\n     * Text decoration linethrough.\r\n     * @type Boolean\r\n     * @default\r\n     */\r\n    linethrough:       false,\r\n\r\n    /**\r\n     * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\r\n     * \"justify-left\", \"justify-center\" or \"justify-right\".\r\n     * @type String\r\n     * @default\r\n     */\r\n    textAlign:            'left',\r\n\r\n    /**\r\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\r\n     * @type String\r\n     * @default\r\n     */\r\n    fontStyle:            'normal',\r\n\r\n    /**\r\n     * Line height\r\n     * @type Number\r\n     * @default\r\n     */\r\n    lineHeight:           1.16,\r\n\r\n    /**\r\n     * Superscript schema object (minimum overlap)\r\n     * @type {Object}\r\n     * @default\r\n     */\r\n    superscript: {\r\n      size:      0.60, // fontSize factor\r\n      baseline: -0.35  // baseline-shift factor (upwards)\r\n    },\r\n\r\n    /**\r\n     * Subscript schema object (minimum overlap)\r\n     * @type {Object}\r\n     * @default\r\n     */\r\n    subscript: {\r\n      size:      0.60, // fontSize factor\r\n      baseline:  0.11  // baseline-shift factor (downwards)\r\n    },\r\n\r\n    /**\r\n     * Background color of text lines\r\n     * @type String\r\n     * @default\r\n     */\r\n    textBackgroundColor:  '',\r\n\r\n    /**\r\n     * List of properties to consider when checking if\r\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */\r\n    stateProperties: fabric.Object.prototype.stateProperties.concat(additionalProps),\r\n\r\n    /**\r\n     * List of properties to consider when checking if cache needs refresh\r\n     * @type Array\r\n     */\r\n    cacheProperties: fabric.Object.prototype.cacheProperties.concat(additionalProps),\r\n\r\n    /**\r\n     * When defined, an object is rendered via stroke and this property specifies its color.\r\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\r\n     * @type String\r\n     * @default\r\n     */\r\n    stroke:               null,\r\n\r\n    /**\r\n     * Shadow object representing shadow of this shape.\r\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */\r\n    shadow:               null,\r\n\r\n    /**\r\n     * fabric.Path that the text should follow.\r\n     * since 4.6.0 the path will be drawn automatically.\r\n     * if you want to make the path visible, give it a stroke and strokeWidth or fill value\r\n     * if you want it to be hidden, assign visible = false to the path.\r\n     * This feature is in BETA, and SVG import/export is not yet supported.\r\n     * @type fabric.Path\r\n     * @example\r\n     * var textPath = new fabric.Text('Text on a path', {\r\n     *     top: 150,\r\n     *     left: 150,\r\n     *     textAlign: 'center',\r\n     *     charSpacing: -50,\r\n     *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {\r\n     *         strokeWidth: 1,\r\n     *         visible: false\r\n     *     }),\r\n     *     pathSide: 'left',\r\n     *     pathStartOffset: 0\r\n     * });\r\n     * @default\r\n     */\r\n    path:               null,\r\n\r\n    /**\r\n     * Offset amount for text path starting position\r\n     * Only used when text has a path\r\n     * @type Number\r\n     * @default\r\n     */\r\n    pathStartOffset:               0,\r\n\r\n    /**\r\n     * Which side of the path the text should be drawn on.\r\n     * Only used when text has a path\r\n     * @type {String} 'left|right'\r\n     * @default\r\n     */\r\n    pathSide:               'left',\r\n\r\n    /**\r\n     * How text is aligned to the path. This property determines\r\n     * the perpendicular position of each character relative to the path.\r\n     * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\r\n     * This feature is in BETA, and its behavior may change\r\n     * @type String\r\n     * @default\r\n     */\r\n    pathAlign:               'baseline',\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _fontSizeFraction: 0.222,\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    offsets: {\r\n      underline: 0.10,\r\n      linethrough: -0.315,\r\n      overline: -0.88\r\n    },\r\n\r\n    /**\r\n     * Text Line proportion to font Size (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */\r\n    _fontSizeMult:             1.13,\r\n\r\n    /**\r\n     * additional space between characters\r\n     * expressed in thousands of em unit\r\n     * @type Number\r\n     * @default\r\n     */\r\n    charSpacing:             0,\r\n\r\n    /**\r\n     * Object containing character styles - top-level properties -> line numbers,\r\n     * 2nd-level properties - character numbers\r\n     * @type Object\r\n     * @default\r\n     */\r\n    styles: null,\r\n\r\n    /**\r\n     * Reference to a context to measure text char or couple of chars\r\n     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\r\n     * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every\r\n     * text object created.\r\n     * @type {CanvasRenderingContext2D}\r\n     * @default\r\n     */\r\n    _measuringContext: null,\r\n\r\n    /**\r\n     * Baseline shift, styles only, keep at 0 for the main text object\r\n     * @type {Number}\r\n     * @default\r\n     */\r\n    deltaY: 0,\r\n\r\n    /**\r\n     * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\r\n     * determine the direction of the text.\r\n     * This has to be set manually together with textAlign and originX for proper\r\n     * experience.\r\n     * some interesting link for the future\r\n     * https://www.w3.org/International/questions/qa-bidi-unicode-controls\r\n     * @since 4.5.0\r\n     * @type {String} 'ltr|rtl'\r\n     * @default\r\n     */\r\n    direction: 'ltr',\r\n\r\n    /**\r\n     * Array of properties that define a style unit (of 'styles').\r\n     * @type {Array}\r\n     * @default\r\n     */\r\n    _styleProperties: [\r\n      'stroke',\r\n      'strokeWidth',\r\n      'fill',\r\n      'fontFamily',\r\n      'fontSize',\r\n      'fontWeight',\r\n      'fontStyle',\r\n      'underline',\r\n      'overline',\r\n      'linethrough',\r\n      'deltaY',\r\n      'textBackgroundColor',\r\n    ],\r\n\r\n    /**\r\n     * contains characters bounding boxes\r\n     */\r\n    __charBounds: [],\r\n\r\n    /**\r\n     * use this size when measuring text. To avoid IE11 rounding errors\r\n     * @type {Number}\r\n     * @default\r\n     * @readonly\r\n     * @private\r\n     */\r\n    CACHE_FONT_SIZE: 400,\r\n\r\n    /**\r\n     * contains the min text width to avoid getting 0\r\n     * @type {Number}\r\n     * @default\r\n     */\r\n    MIN_TEXT_WIDTH: 2,\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {String} text Text string\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Text} thisArg\r\n     */\r\n    initialize: function(text, options) {\r\n      this.styles = options ? (options.styles || { }) : { };\r\n      this.text = text;\r\n      this.__skipDimension = true;\r\n      this.callSuper('initialize', options);\r\n      if (this.path) {\r\n        this.setPathInfo();\r\n      }\r\n      this.__skipDimension = false;\r\n      this.initDimensions();\r\n      this.setCoords();\r\n      this.setupState({ propertySet: '_dimensionAffectingProps' });\r\n    },\r\n\r\n    /**\r\n     * If text has a path, it will add the extra information needed\r\n     * for path and text calculations\r\n     * @return {fabric.Text} thisArg\r\n     */\r\n    setPathInfo: function() {\r\n      var path = this.path;\r\n      if (path) {\r\n        path.segmentsInfo = fabric.util.getPathSegmentsInfo(path.path);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Return a context for measurement of text string.\r\n     * if created it gets stored for reuse\r\n     * this is for internal use, please do not use it\r\n     * @private\r\n     * @param {String} text Text string\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Text} thisArg\r\n     */\r\n    getMeasuringContext: function() {\r\n      // if we did not return we have to measure something.\r\n      if (!fabric._measuringContext) {\r\n        fabric._measuringContext = this.canvas && this.canvas.contextCache ||\r\n          fabric.util.createCanvasElement().getContext('2d');\r\n      }\r\n      return fabric._measuringContext;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * Divides text into lines of text and lines of graphemes.\r\n     */\r\n    _splitText: function() {\r\n      var newLines = this._splitTextIntoLines(this.text);\r\n      this.textLines = newLines.lines;\r\n      this._textLines = newLines.graphemeLines;\r\n      this._unwrappedTextLines = newLines._unwrappedLines;\r\n      this._text = newLines.graphemeText;\r\n      return newLines;\r\n    },\r\n\r\n    /**\r\n     * Initialize or update text dimensions.\r\n     * Updates this.width and this.height with the proper values.\r\n     * Does not return dimensions.\r\n     */\r\n    initDimensions: function() {\r\n      if (this.__skipDimension) {\r\n        return;\r\n      }\r\n      this._splitText();\r\n      this._clearCache();\r\n      if (this.path) {\r\n        this.width = this.path.width;\r\n        this.height = this.path.height;\r\n      }\r\n      else {\r\n        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\r\n        this.height = this.calcTextHeight();\r\n      }\r\n      if (this.textAlign.indexOf('justify') !== -1) {\r\n        // once text is measured we need to make space fatter to make justified text.\r\n        this.enlargeSpaces();\r\n      }\r\n      this.saveState({ propertySet: '_dimensionAffectingProps' });\r\n    },\r\n\r\n    /**\r\n     * Enlarge space boxes and shift the others\r\n     */\r\n    enlargeSpaces: function() {\r\n      var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {\r\n          continue;\r\n        }\r\n        accumulatedSpace = 0;\r\n        line = this._textLines[i];\r\n        currentLineWidth = this.getLineWidth(i);\r\n        if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\r\n          numberOfSpaces = spaces.length;\r\n          diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\r\n          for (var j = 0, jlen = line.length; j <= jlen; j++) {\r\n            charBound = this.__charBounds[i][j];\r\n            if (this._reSpaceAndTab.test(line[j])) {\r\n              charBound.width += diffSpace;\r\n              charBound.kernedWidth += diffSpace;\r\n              charBound.left += accumulatedSpace;\r\n              accumulatedSpace += diffSpace;\r\n            }\r\n            else {\r\n              charBound.left += accumulatedSpace;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Detect if the text line is ended with an hard break\r\n     * text and itext do not have wrapping, return false\r\n     * @return {Boolean}\r\n     */\r\n    isEndOfWrapping: function(lineIndex) {\r\n      return lineIndex === this._textLines.length - 1;\r\n    },\r\n\r\n    /**\r\n     * Detect if a line has a linebreak and so we need to account for it when moving\r\n     * and counting style.\r\n     * It return always for text and Itext.\r\n     * @return Number\r\n     */\r\n    missingNewlineOffset: function() {\r\n      return 1;\r\n    },\r\n\r\n    /**\r\n     * Returns string representation of an instance\r\n     * @return {String} String representation of text object\r\n     */\r\n    toString: function() {\r\n      return '#<fabric.Text (' + this.complexity() +\r\n        '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\r\n    },\r\n\r\n    /**\r\n     * Return the dimension and the zoom level needed to create a cache canvas\r\n     * big enough to host the object to be cached.\r\n     * @private\r\n     * @param {Object} dim.x width of object to be cached\r\n     * @param {Object} dim.y height of object to be cached\r\n     * @return {Object}.width width of canvas\r\n     * @return {Object}.height height of canvas\r\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     */\r\n    _getCacheCanvasDimensions: function() {\r\n      var dims = this.callSuper('_getCacheCanvasDimensions');\r\n      var fontSize = this.fontSize;\r\n      dims.width += fontSize * dims.zoomX;\r\n      dims.height += fontSize * dims.zoomY;\r\n      return dims;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _render: function(ctx) {\r\n      var path = this.path;\r\n      path && !path.isNotVisible() && path._render(ctx);\r\n      this._setTextStyles(ctx);\r\n      this._renderTextLinesBackground(ctx);\r\n      this._renderTextDecoration(ctx, 'underline');\r\n      this._renderText(ctx);\r\n      this._renderTextDecoration(ctx, 'overline');\r\n      this._renderTextDecoration(ctx, 'linethrough');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderText: function(ctx) {\r\n      if (this.paintFirst === 'stroke') {\r\n        this._renderTextStroke(ctx);\r\n        this._renderTextFill(ctx);\r\n      }\r\n      else {\r\n        this._renderTextFill(ctx);\r\n        this._renderTextStroke(ctx);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set the font parameter of the context with the object properties or with charStyle\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} [charStyle] object with font style properties\r\n     * @param {String} [charStyle.fontFamily] Font Family\r\n     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\r\n     * @param {String} [charStyle.fontWeight] Font weight\r\n     * @param {String} [charStyle.fontStyle] Font style (italic|normal)\r\n     */\r\n    _setTextStyles: function(ctx, charStyle, forMeasuring) {\r\n      ctx.textBaseline = 'alphabetical';\r\n      if (this.path) {\r\n        switch (this.pathAlign) {\r\n          case 'center':\r\n            ctx.textBaseline = 'middle';\r\n            break;\r\n          case 'ascender':\r\n            ctx.textBaseline = 'top';\r\n            break;\r\n          case 'descender':\r\n            ctx.textBaseline = 'bottom';\r\n            break;\r\n        }\r\n      }\r\n      ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\r\n    },\r\n\r\n    /**\r\n     * calculate and return the text Width measuring each line.\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @return {Number} Maximum width of fabric.Text object\r\n     */\r\n    calcTextWidth: function() {\r\n      var maxWidth = this.getLineWidth(0);\r\n\r\n      for (var i = 1, len = this._textLines.length; i < len; i++) {\r\n        var currentLineWidth = this.getLineWidth(i);\r\n        if (currentLineWidth > maxWidth) {\r\n          maxWidth = currentLineWidth;\r\n        }\r\n      }\r\n      return maxWidth;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {String} line Text to render\r\n     * @param {Number} left Left position of text\r\n     * @param {Number} top Top position of text\r\n     * @param {Number} lineIndex Index of a line in a text\r\n     */\r\n    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\r\n      this._renderChars(method, ctx, line, left, top, lineIndex);\r\n    },\r\n\r\n    /**\r\n     * Renders the text background for lines, taking care of style\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderTextLinesBackground: function(ctx) {\r\n      if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {\r\n        return;\r\n      }\r\n      var heightOfLine,\r\n          lineLeftOffset, originalFill = ctx.fillStyle,\r\n          line, lastColor,\r\n          leftOffset = this._getLeftOffset(),\r\n          lineTopOffset = this._getTopOffset(),\r\n          boxStart = 0, boxWidth = 0, charBox, currentColor, path = this.path,\r\n          drawStart;\r\n\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        heightOfLine = this.getHeightOfLine(i);\r\n        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {\r\n          lineTopOffset += heightOfLine;\r\n          continue;\r\n        }\r\n        line = this._textLines[i];\r\n        lineLeftOffset = this._getLineLeftOffset(i);\r\n        boxWidth = 0;\r\n        boxStart = 0;\r\n        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');\r\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n          charBox = this.__charBounds[i][j];\r\n          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');\r\n          if (path) {\r\n            ctx.save();\r\n            ctx.translate(charBox.renderLeft, charBox.renderTop);\r\n            ctx.rotate(charBox.angle);\r\n            ctx.fillStyle = currentColor;\r\n            currentColor && ctx.fillRect(\r\n              -charBox.width / 2,\r\n              -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction),\r\n              charBox.width,\r\n              heightOfLine / this.lineHeight\r\n            );\r\n            ctx.restore();\r\n          }\r\n          else if (currentColor !== lastColor) {\r\n            drawStart = leftOffset + lineLeftOffset + boxStart;\r\n            if (this.direction === 'rtl') {\r\n              drawStart = this.width - drawStart - boxWidth;\r\n            }\r\n            ctx.fillStyle = lastColor;\r\n            lastColor && ctx.fillRect(\r\n              drawStart,\r\n              lineTopOffset,\r\n              boxWidth,\r\n              heightOfLine / this.lineHeight\r\n            );\r\n            boxStart = charBox.left;\r\n            boxWidth = charBox.width;\r\n            lastColor = currentColor;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n        }\r\n        if (currentColor && !path) {\r\n          drawStart = leftOffset + lineLeftOffset + boxStart;\r\n          if (this.direction === 'rtl') {\r\n            drawStart = this.width - drawStart - boxWidth;\r\n          }\r\n          ctx.fillStyle = currentColor;\r\n          ctx.fillRect(\r\n            drawStart,\r\n            lineTopOffset,\r\n            boxWidth,\r\n            heightOfLine / this.lineHeight\r\n          );\r\n        }\r\n        lineTopOffset += heightOfLine;\r\n      }\r\n      ctx.fillStyle = originalFill;\r\n      // if there is text background color no\r\n      // other shadows should be casted\r\n      this._removeShadow(ctx);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} decl style declaration for cache\r\n     * @param {String} decl.fontFamily fontFamily\r\n     * @param {String} decl.fontStyle fontStyle\r\n     * @param {String} decl.fontWeight fontWeight\r\n     * @return {Object} reference to cache\r\n     */\r\n    getFontCache: function(decl) {\r\n      var fontFamily = decl.fontFamily.toLowerCase();\r\n      if (!fabric.charWidthsCache[fontFamily]) {\r\n        fabric.charWidthsCache[fontFamily] = { };\r\n      }\r\n      var cache = fabric.charWidthsCache[fontFamily],\r\n          cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();\r\n      if (!cache[cacheProp]) {\r\n        cache[cacheProp] = { };\r\n      }\r\n      return cache[cacheProp];\r\n    },\r\n\r\n    /**\r\n     * measure and return the width of a single character.\r\n     * possibly overridden to accommodate different measure logic or\r\n     * to hook some external lib for character measurement\r\n     * @private\r\n     * @param {String} _char, char to be measured\r\n     * @param {Object} charStyle style of char to be measured\r\n     * @param {String} [previousChar] previous char\r\n     * @param {Object} [prevCharStyle] style of previous char\r\n     */\r\n    _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\r\n      // first i try to return from cache\r\n      var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle),\r\n          previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char,\r\n          stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth,\r\n          fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\r\n\r\n      if (previousChar && fontCache[previousChar] !== undefined) {\r\n        previousWidth = fontCache[previousChar];\r\n      }\r\n      if (fontCache[_char] !== undefined) {\r\n        kernedWidth = width = fontCache[_char];\r\n      }\r\n      if (stylesAreEqual && fontCache[couple] !== undefined) {\r\n        coupleWidth = fontCache[couple];\r\n        kernedWidth = coupleWidth - previousWidth;\r\n      }\r\n      if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\r\n        var ctx = this.getMeasuringContext();\r\n        // send a TRUE to specify measuring font size CACHE_FONT_SIZE\r\n        this._setTextStyles(ctx, charStyle, true);\r\n      }\r\n      if (width === undefined) {\r\n        kernedWidth = width = ctx.measureText(_char).width;\r\n        fontCache[_char] = width;\r\n      }\r\n      if (previousWidth === undefined && stylesAreEqual && previousChar) {\r\n        previousWidth = ctx.measureText(previousChar).width;\r\n        fontCache[previousChar] = previousWidth;\r\n      }\r\n      if (stylesAreEqual && coupleWidth === undefined) {\r\n        // we can measure the kerning couple and subtract the width of the previous character\r\n        coupleWidth = ctx.measureText(couple).width;\r\n        fontCache[couple] = coupleWidth;\r\n        kernedWidth = coupleWidth - previousWidth;\r\n      }\r\n      return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };\r\n    },\r\n\r\n    /**\r\n     * Computes height of character at given position\r\n     * @param {Number} line the line index number\r\n     * @param {Number} _char the character index number\r\n     * @return {Number} fontSize of the character\r\n     */\r\n    getHeightOfChar: function(line, _char) {\r\n      return this.getValueOfPropertyAt(line, _char, 'fontSize');\r\n    },\r\n\r\n    /**\r\n     * measure a text line measuring all characters.\r\n     * @param {Number} lineIndex line number\r\n     * @return {Number} Line width\r\n     */\r\n    measureLine: function(lineIndex) {\r\n      var lineInfo = this._measureLine(lineIndex);\r\n      if (this.charSpacing !== 0) {\r\n        lineInfo.width -= this._getWidthOfCharSpacing();\r\n      }\r\n      if (lineInfo.width < 0) {\r\n        lineInfo.width = 0;\r\n      }\r\n      return lineInfo;\r\n    },\r\n\r\n    /**\r\n     * measure every grapheme of a line, populating __charBounds\r\n     * @param {Number} lineIndex\r\n     * @return {Object} object.width total width of characters\r\n     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\r\n     */\r\n    _measureLine: function(lineIndex) {\r\n      var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme,\r\n          graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length),\r\n          positionInPath = 0, startingPoint, totalPathLength, path = this.path,\r\n          reverse = this.pathSide === 'right';\r\n\r\n      this.__charBounds[lineIndex] = lineBounds;\r\n      for (i = 0; i < line.length; i++) {\r\n        grapheme = line[i];\r\n        graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\r\n        lineBounds[i] = graphemeInfo;\r\n        width += graphemeInfo.kernedWidth;\r\n        prevGrapheme = grapheme;\r\n      }\r\n      // this latest bound box represent the last character of the line\r\n      // to simplify cursor handling in interactive mode.\r\n      lineBounds[i] = {\r\n        left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\r\n        width: 0,\r\n        kernedWidth: 0,\r\n        height: this.fontSize\r\n      };\r\n      if (path) {\r\n        totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;\r\n        startingPoint = fabric.util.getPointOnPath(path.path, 0, path.segmentsInfo);\r\n        startingPoint.x += path.pathOffset.x;\r\n        startingPoint.y += path.pathOffset.y;\r\n        switch (this.textAlign) {\r\n          case 'left':\r\n            positionInPath = reverse ? (totalPathLength - width) : 0;\r\n            break;\r\n          case 'center':\r\n            positionInPath = (totalPathLength - width) / 2;\r\n            break;\r\n          case 'right':\r\n            positionInPath = reverse ? 0 : (totalPathLength - width);\r\n            break;\r\n          //todo - add support for justify\r\n        }\r\n        positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\r\n        for (i = reverse ? line.length - 1 : 0;\r\n          reverse ? i >= 0 : i < line.length;\r\n          reverse ? i-- : i++) {\r\n          graphemeInfo = lineBounds[i];\r\n          if (positionInPath > totalPathLength) {\r\n            positionInPath %= totalPathLength;\r\n          }\r\n          else if (positionInPath < 0) {\r\n            positionInPath += totalPathLength;\r\n          }\r\n          // it would probably much faster to send all the grapheme position for a line\r\n          // and calculate path position/angle at once.\r\n          this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);\r\n          positionInPath += graphemeInfo.kernedWidth;\r\n        }\r\n      }\r\n      return { width: width, numOfSpaces: numOfSpaces };\r\n    },\r\n\r\n    /**\r\n     * Calculate the angle  and the left,top position of the char that follow a path.\r\n     * It appends it to graphemeInfo to be reused later at rendering\r\n     * @private\r\n     * @param {Number} positionInPath to be measured\r\n     * @param {Object} graphemeInfo current grapheme box information\r\n     * @param {Object} startingPoint position of the point\r\n     */\r\n    _setGraphemeOnPath: function(positionInPath, graphemeInfo, startingPoint) {\r\n      var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,\r\n          path = this.path;\r\n\r\n      // we are at currentPositionOnPath. we want to know what point on the path is.\r\n      var info = fabric.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);\r\n      graphemeInfo.renderLeft = info.x - startingPoint.x;\r\n      graphemeInfo.renderTop = info.y - startingPoint.y;\r\n      graphemeInfo.angle = info.angle + (this.pathSide ===  'right' ? Math.PI : 0);\r\n    },\r\n\r\n    /**\r\n     * Measure and return the info of a single grapheme.\r\n     * needs the the info of previous graphemes already filled\r\n     * @private\r\n     * @param {String} grapheme to be measured\r\n     * @param {Number} lineIndex index of the line where the char is\r\n     * @param {Number} charIndex position in the line\r\n     * @param {String} [prevGrapheme] character preceding the one to be measured\r\n     */\r\n    _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\r\n      var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n          prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : { },\r\n          info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),\r\n          kernedWidth = info.kernedWidth,\r\n          width = info.width, charSpacing;\r\n\r\n      if (this.charSpacing !== 0) {\r\n        charSpacing = this._getWidthOfCharSpacing();\r\n        width += charSpacing;\r\n        kernedWidth += charSpacing;\r\n      }\r\n\r\n      var box = {\r\n        width: width,\r\n        left: 0,\r\n        height: style.fontSize,\r\n        kernedWidth: kernedWidth,\r\n        deltaY: style.deltaY,\r\n      };\r\n      if (charIndex > 0 && !skipLeft) {\r\n        var previousBox = this.__charBounds[lineIndex][charIndex - 1];\r\n        box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\r\n      }\r\n      return box;\r\n    },\r\n\r\n    /**\r\n     * Calculate height of line at 'lineIndex'\r\n     * @param {Number} lineIndex index of line to calculate\r\n     * @return {Number}\r\n     */\r\n    getHeightOfLine: function(lineIndex) {\r\n      if (this.__lineHeights[lineIndex]) {\r\n        return this.__lineHeights[lineIndex];\r\n      }\r\n\r\n      var line = this._textLines[lineIndex],\r\n          // char 0 is measured before the line cycle because it nneds to char\r\n          // emptylines\r\n          maxHeight = this.getHeightOfChar(lineIndex, 0);\r\n      for (var i = 1, len = line.length; i < len; i++) {\r\n        maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\r\n      }\r\n\r\n      return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\r\n    },\r\n\r\n    /**\r\n     * Calculate text box height\r\n     */\r\n    calcTextHeight: function() {\r\n      var lineHeight, height = 0;\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        lineHeight = this.getHeightOfLine(i);\r\n        height += (i === len - 1 ? lineHeight / this.lineHeight : lineHeight);\r\n      }\r\n      return height;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @return {Number} Left offset\r\n     */\r\n    _getLeftOffset: function() {\r\n      return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @return {Number} Top offset\r\n     */\r\n    _getTopOffset: function() {\r\n      return -this.height / 2;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n     */\r\n    _renderTextCommon: function(ctx, method) {\r\n      ctx.save();\r\n      var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset();\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        var heightOfLine = this.getHeightOfLine(i),\r\n            maxHeight = heightOfLine / this.lineHeight,\r\n            leftOffset = this._getLineLeftOffset(i);\r\n        this._renderTextLine(\r\n          method,\r\n          ctx,\r\n          this._textLines[i],\r\n          left + leftOffset,\r\n          top + lineHeights + maxHeight,\r\n          i\r\n        );\r\n        lineHeights += heightOfLine;\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderTextFill: function(ctx) {\r\n      if (!this.fill && !this.styleHas('fill')) {\r\n        return;\r\n      }\r\n\r\n      this._renderTextCommon(ctx, 'fillText');\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderTextStroke: function(ctx) {\r\n      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\r\n        return;\r\n      }\r\n\r\n      if (this.shadow && !this.shadow.affectStroke) {\r\n        this._removeShadow(ctx);\r\n      }\r\n\r\n      ctx.save();\r\n      this._setLineDash(ctx, this.strokeDashArray);\r\n      ctx.beginPath();\r\n      this._renderTextCommon(ctx, 'strokeText');\r\n      ctx.closePath();\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} method fillText or strokeText.\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Array} line Content of the line, splitted in an array by grapheme\r\n     * @param {Number} left\r\n     * @param {Number} top\r\n     * @param {Number} lineIndex\r\n     */\r\n    _renderChars: function(method, ctx, line, left, top, lineIndex) {\r\n      // set proper line offset\r\n      var lineHeight = this.getHeightOfLine(lineIndex),\r\n          isJustify = this.textAlign.indexOf('justify') !== -1,\r\n          actualStyle,\r\n          nextStyle,\r\n          charsToRender = '',\r\n          charBox,\r\n          boxWidth = 0,\r\n          timeToRender,\r\n          path = this.path,\r\n          shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path,\r\n          isLtr = this.direction === 'ltr', sign = this.direction === 'ltr' ? 1 : -1,\r\n          drawingLeft, currentDirection = ctx.canvas.getAttribute('dir');\r\n      ctx.save();\r\n      if (currentDirection !== this.direction) {\r\n        ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');\r\n        ctx.direction = isLtr ? 'ltr' : 'rtl';\r\n        ctx.textAlign = isLtr ? 'left' : 'right';\r\n      }\r\n      top -= lineHeight * this._fontSizeFraction / this.lineHeight;\r\n      if (shortCut) {\r\n        // render all the line in one pass without checking\r\n        // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\r\n        this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top, lineHeight);\r\n        ctx.restore();\r\n        return;\r\n      }\r\n      for (var i = 0, len = line.length - 1; i <= len; i++) {\r\n        timeToRender = i === len || this.charSpacing || path;\r\n        charsToRender += line[i];\r\n        charBox = this.__charBounds[lineIndex][i];\r\n        if (boxWidth === 0) {\r\n          left += sign * (charBox.kernedWidth - charBox.width);\r\n          boxWidth += charBox.width;\r\n        }\r\n        else {\r\n          boxWidth += charBox.kernedWidth;\r\n        }\r\n        if (isJustify && !timeToRender) {\r\n          if (this._reSpaceAndTab.test(line[i])) {\r\n            timeToRender = true;\r\n          }\r\n        }\r\n        if (!timeToRender) {\r\n          // if we have charSpacing, we render char by char\r\n          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\r\n          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\r\n          timeToRender = fabric.util.hasStyleChanged(actualStyle, nextStyle, false);\r\n        }\r\n        if (timeToRender) {\r\n          if (path) {\r\n            ctx.save();\r\n            ctx.translate(charBox.renderLeft, charBox.renderTop);\r\n            ctx.rotate(charBox.angle);\r\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, -boxWidth / 2, 0, lineHeight);\r\n            ctx.restore();\r\n          }\r\n          else {\r\n            drawingLeft = left;\r\n            this._renderChar(method, ctx, lineIndex, i, charsToRender, drawingLeft, top, lineHeight);\r\n          }\r\n          charsToRender = '';\r\n          actualStyle = nextStyle;\r\n          left += sign * boxWidth;\r\n          boxWidth = 0;\r\n        }\r\n      }\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * This function try to patch the missing gradientTransform on canvas gradients.\r\n     * transforming a context to transform the gradient, is going to transform the stroke too.\r\n     * we want to transform the gradient but not the stroke operation, so we create\r\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\r\n     * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\r\n     * is limited.\r\n     * @private\r\n     * @param {fabric.Gradient} filler a fabric gradient instance\r\n     * @return {CanvasPattern} a pattern to use as fill/stroke style\r\n     */\r\n    _applyPatternGradientTransformText: function(filler) {\r\n      var pCanvas = fabric.util.createCanvasElement(), pCtx,\r\n          // TODO: verify compatibility with strokeUniform\r\n          width = this.width + this.strokeWidth, height = this.height + this.strokeWidth;\r\n      pCanvas.width = width;\r\n      pCanvas.height = height;\r\n      pCtx = pCanvas.getContext('2d');\r\n      pCtx.beginPath(); pCtx.moveTo(0, 0); pCtx.lineTo(width, 0); pCtx.lineTo(width, height);\r\n      pCtx.lineTo(0, height); pCtx.closePath();\r\n      pCtx.translate(width / 2, height / 2);\r\n      pCtx.fillStyle = filler.toLive(pCtx);\r\n      this._applyPatternGradientTransform(pCtx, filler);\r\n      pCtx.fill();\r\n      return pCtx.createPattern(pCanvas, 'no-repeat');\r\n    },\r\n\r\n    handleFiller: function(ctx, property, filler) {\r\n      var offsetX, offsetY;\r\n      if (filler.toLive) {\r\n        if (filler.gradientUnits === 'percentage' || filler.gradientTransform || filler.patternTransform) {\r\n          // need to transform gradient in a pattern.\r\n          // this is a slow process. If you are hitting this codepath, and the object\r\n          // is not using caching, you should consider switching it on.\r\n          // we need a canvas as big as the current object caching canvas.\r\n          offsetX = -this.width / 2;\r\n          offsetY = -this.height / 2;\r\n          ctx.translate(offsetX, offsetY);\r\n          ctx[property] = this._applyPatternGradientTransformText(filler);\r\n          return { offsetX: offsetX, offsetY: offsetY };\r\n        }\r\n        else {\r\n          // is a simple gradient or pattern\r\n          ctx[property] = filler.toLive(ctx, this);\r\n          return this._applyPatternGradientTransform(ctx, filler);\r\n        }\r\n      }\r\n      else {\r\n        // is a color\r\n        ctx[property] = filler;\r\n      }\r\n      return { offsetX: 0, offsetY: 0 };\r\n    },\r\n\r\n    _setStrokeStyles: function(ctx, decl) {\r\n      ctx.lineWidth = decl.strokeWidth;\r\n      ctx.lineCap = this.strokeLineCap;\r\n      ctx.lineDashOffset = this.strokeDashOffset;\r\n      ctx.lineJoin = this.strokeLineJoin;\r\n      ctx.miterLimit = this.strokeMiterLimit;\r\n      return this.handleFiller(ctx, 'strokeStyle', decl.stroke);\r\n    },\r\n\r\n    _setFillStyles: function(ctx, decl) {\r\n      return this.handleFiller(ctx, 'fillStyle', decl.fill);\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {String} method\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @param {String} _char\r\n     * @param {Number} left Left coordinate\r\n     * @param {Number} top Top coordinate\r\n     * @param {Number} lineHeight Height of the line\r\n     */\r\n    _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\r\n      var decl = this._getStyleDeclaration(lineIndex, charIndex),\r\n          fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),\r\n          shouldFill = method === 'fillText' && fullDecl.fill,\r\n          shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth,\r\n          fillOffsets, strokeOffsets;\r\n\r\n      if (!shouldStroke && !shouldFill) {\r\n        return;\r\n      }\r\n      ctx.save();\r\n\r\n      shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));\r\n      shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));\r\n\r\n      ctx.font = this._getFontDeclaration(fullDecl);\r\n\r\n\r\n      if (decl && decl.textBackgroundColor) {\r\n        this._removeShadow(ctx);\r\n      }\r\n      if (decl && decl.deltaY) {\r\n        top += decl.deltaY;\r\n      }\r\n      shouldFill && ctx.fillText(_char, left - fillOffsets.offsetX, top - fillOffsets.offsetY);\r\n      shouldStroke && ctx.strokeText(_char, left - strokeOffsets.offsetX, top - strokeOffsets.offsetY);\r\n      ctx.restore();\r\n    },\r\n\r\n    /**\r\n     * Turns the character into a 'superior figure' (i.e. 'superscript')\r\n     * @param {Number} start selection start\r\n     * @param {Number} end selection end\r\n     * @returns {fabric.Text} thisArg\r\n     * @chainable\r\n     */\r\n    setSuperscript: function(start, end) {\r\n      return this._setScript(start, end, this.superscript);\r\n    },\r\n\r\n    /**\r\n     * Turns the character into an 'inferior figure' (i.e. 'subscript')\r\n     * @param {Number} start selection start\r\n     * @param {Number} end selection end\r\n     * @returns {fabric.Text} thisArg\r\n     * @chainable\r\n     */\r\n    setSubscript: function(start, end) {\r\n      return this._setScript(start, end, this.subscript);\r\n    },\r\n\r\n    /**\r\n     * Applies 'schema' at given position\r\n     * @private\r\n     * @param {Number} start selection start\r\n     * @param {Number} end selection end\r\n     * @param {Number} schema\r\n     * @returns {fabric.Text} thisArg\r\n     * @chainable\r\n     */\r\n    _setScript: function(start, end, schema) {\r\n      var loc = this.get2DCursorLocation(start, true),\r\n          fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),\r\n          dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),\r\n          style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };\r\n      this.setSelectionStyles(style, start, end);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {Number} lineIndex index text line\r\n     * @return {Number} Line left offset\r\n     */\r\n    _getLineLeftOffset: function(lineIndex) {\r\n      var lineWidth = this.getLineWidth(lineIndex),\r\n          lineDiff = this.width - lineWidth, textAlign = this.textAlign, direction = this.direction,\r\n          isEndOfWrapping, leftOffset = 0, isEndOfWrapping = this.isEndOfWrapping(lineIndex);\r\n      if (textAlign === 'justify'\r\n        || (textAlign === 'justify-center' && !isEndOfWrapping)\r\n        || (textAlign === 'justify-right' && !isEndOfWrapping)\r\n        || (textAlign === 'justify-left' && !isEndOfWrapping)\r\n      ) {\r\n        return 0;\r\n      }\r\n      if (textAlign === 'center') {\r\n        leftOffset = lineDiff / 2;\r\n      }\r\n      if (textAlign === 'right') {\r\n        leftOffset = lineDiff;\r\n      }\r\n      if (textAlign === 'justify-center') {\r\n        leftOffset = lineDiff / 2;\r\n      }\r\n      if (textAlign === 'justify-right') {\r\n        leftOffset = lineDiff;\r\n      }\r\n      if (direction === 'rtl') {\r\n        leftOffset -= lineDiff;\r\n      }\r\n      return leftOffset;\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _clearCache: function() {\r\n      this.__lineWidths = [];\r\n      this.__lineHeights = [];\r\n      this.__charBounds = [];\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _shouldClearDimensionCache: function() {\r\n      var shouldClear = this._forceClearCache;\r\n      shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));\r\n      if (shouldClear) {\r\n        this.dirty = true;\r\n        this._forceClearCache = false;\r\n      }\r\n      return shouldClear;\r\n    },\r\n\r\n    /**\r\n     * Measure a single line given its index. Used to calculate the initial\r\n     * text bounding box. The values are calculated and stored in __lineWidths cache.\r\n     * @private\r\n     * @param {Number} lineIndex line number\r\n     * @return {Number} Line width\r\n     */\r\n    getLineWidth: function(lineIndex) {\r\n      if (this.__lineWidths[lineIndex] !== undefined) {\r\n        return this.__lineWidths[lineIndex];\r\n      }\r\n\r\n      var lineInfo = this.measureLine(lineIndex);\r\n      var width = lineInfo.width;\r\n      this.__lineWidths[lineIndex] = width;\r\n      return width;\r\n    },\r\n\r\n    _getWidthOfCharSpacing: function() {\r\n      if (this.charSpacing !== 0) {\r\n        return this.fontSize * this.charSpacing / 1000;\r\n      }\r\n      return 0;\r\n    },\r\n\r\n    /**\r\n     * Retrieves the value of property at given character position\r\n     * @param {Number} lineIndex the line number\r\n     * @param {Number} charIndex the character number\r\n     * @param {String} property the property name\r\n     * @returns the value of 'property'\r\n     */\r\n    getValueOfPropertyAt: function(lineIndex, charIndex, property) {\r\n      var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\r\n      if (charStyle && typeof charStyle[property] !== 'undefined') {\r\n        return charStyle[property];\r\n      }\r\n      return this[property];\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    _renderTextDecoration: function(ctx, type) {\r\n      if (!this[type] && !this.styleHas(type)) {\r\n        return;\r\n      }\r\n      var heightOfLine, size, _size,\r\n          lineLeftOffset, dy, _dy,\r\n          line, lastDecoration,\r\n          leftOffset = this._getLeftOffset(),\r\n          topOffset = this._getTopOffset(), top,\r\n          boxStart, boxWidth, charBox, currentDecoration,\r\n          maxHeight, currentFill, lastFill, path = this.path,\r\n          charSpacing = this._getWidthOfCharSpacing(),\r\n          offsetY = this.offsets[type];\r\n\r\n      for (var i = 0, len = this._textLines.length; i < len; i++) {\r\n        heightOfLine = this.getHeightOfLine(i);\r\n        if (!this[type] && !this.styleHas(type, i)) {\r\n          topOffset += heightOfLine;\r\n          continue;\r\n        }\r\n        line = this._textLines[i];\r\n        maxHeight = heightOfLine / this.lineHeight;\r\n        lineLeftOffset = this._getLineLeftOffset(i);\r\n        boxStart = 0;\r\n        boxWidth = 0;\r\n        lastDecoration = this.getValueOfPropertyAt(i, 0, type);\r\n        lastFill = this.getValueOfPropertyAt(i, 0, 'fill');\r\n        top = topOffset + maxHeight * (1 - this._fontSizeFraction);\r\n        size = this.getHeightOfChar(i, 0);\r\n        dy = this.getValueOfPropertyAt(i, 0, 'deltaY');\r\n        for (var j = 0, jlen = line.length; j < jlen; j++) {\r\n          charBox = this.__charBounds[i][j];\r\n          currentDecoration = this.getValueOfPropertyAt(i, j, type);\r\n          currentFill = this.getValueOfPropertyAt(i, j, 'fill');\r\n          _size = this.getHeightOfChar(i, j);\r\n          _dy = this.getValueOfPropertyAt(i, j, 'deltaY');\r\n          if (path && currentDecoration && currentFill) {\r\n            ctx.save();\r\n            ctx.fillStyle = lastFill;\r\n            ctx.translate(charBox.renderLeft, charBox.renderTop);\r\n            ctx.rotate(charBox.angle);\r\n            ctx.fillRect(\r\n              -charBox.kernedWidth / 2,\r\n              offsetY * _size + _dy,\r\n              charBox.kernedWidth,\r\n              this.fontSize / 15\r\n            );\r\n            ctx.restore();\r\n          }\r\n          else if (\r\n            (currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy)\r\n            && boxWidth > 0\r\n          ) {\r\n            var drawStart = leftOffset + lineLeftOffset + boxStart;\r\n            if (this.direction === 'rtl') {\r\n              drawStart = this.width - drawStart - boxWidth;\r\n            }\r\n            if (lastDecoration && lastFill) {\r\n              ctx.fillStyle = lastFill;\r\n              ctx.fillRect(\r\n                drawStart,\r\n                top + offsetY * size + dy,\r\n                boxWidth,\r\n                this.fontSize / 15\r\n              );\r\n            }\r\n            boxStart = charBox.left;\r\n            boxWidth = charBox.width;\r\n            lastDecoration = currentDecoration;\r\n            lastFill = currentFill;\r\n            size = _size;\r\n            dy = _dy;\r\n          }\r\n          else {\r\n            boxWidth += charBox.kernedWidth;\r\n          }\r\n        }\r\n        var drawStart = leftOffset + lineLeftOffset + boxStart;\r\n        if (this.direction === 'rtl') {\r\n          drawStart = this.width - drawStart - boxWidth;\r\n        }\r\n        ctx.fillStyle = currentFill;\r\n        currentDecoration && currentFill && ctx.fillRect(\r\n          drawStart,\r\n          top + offsetY * size + dy,\r\n          boxWidth - charSpacing,\r\n          this.fontSize / 15\r\n        );\r\n        topOffset += heightOfLine;\r\n      }\r\n      // if there is text background color no\r\n      // other shadows should be casted\r\n      this._removeShadow(ctx);\r\n    },\r\n\r\n    /**\r\n     * return font declaration string for canvas context\r\n     * @param {Object} [styleObject] object\r\n     * @returns {String} font declaration formatted for canvas context.\r\n     */\r\n    _getFontDeclaration: function(styleObject, forMeasuring) {\r\n      var style = styleObject || this, family = this.fontFamily,\r\n          fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\r\n      var fontFamily = family === undefined ||\r\n      family.indexOf('\\'') > -1 || family.indexOf(',') > -1 ||\r\n      family.indexOf('\"') > -1 || fontIsGeneric\r\n        ? style.fontFamily : '\"' + style.fontFamily + '\"';\r\n      return [\r\n        // node-canvas needs \"weight style\", while browsers need \"style weight\"\r\n        // verify if this can be fixed in JSDOM\r\n        (fabric.isLikelyNode ? style.fontWeight : style.fontStyle),\r\n        (fabric.isLikelyNode ? style.fontStyle : style.fontWeight),\r\n        forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px',\r\n        fontFamily\r\n      ].join(' ');\r\n    },\r\n\r\n    /**\r\n     * Renders text instance on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */\r\n    render: function(ctx) {\r\n      // do not render if object is not visible\r\n      if (!this.visible) {\r\n        return;\r\n      }\r\n      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\r\n        return;\r\n      }\r\n      if (this._shouldClearDimensionCache()) {\r\n        this.initDimensions();\r\n      }\r\n      this.callSuper('render', ctx);\r\n    },\r\n\r\n    /**\r\n     * Returns the text as an array of lines.\r\n     * @param {String} text text to split\r\n     * @returns {Array} Lines in the text\r\n     */\r\n    _splitTextIntoLines: function(text) {\r\n      var lines = text.split(this._reNewline),\r\n          newLines = new Array(lines.length),\r\n          newLine = ['\\n'],\r\n          newText = [];\r\n      for (var i = 0; i < lines.length; i++) {\r\n        newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\r\n        newText = newText.concat(newLines[i], newLine);\r\n      }\r\n      newText.pop();\r\n      return { _unwrappedLines: newLines, lines: lines, graphemeText: newText, graphemeLines: newLines };\r\n    },\r\n\r\n    /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function(propertiesToInclude) {\r\n      var allProperties = additionalProps.concat(propertiesToInclude);\r\n      var obj = this.callSuper('toObject', allProperties);\r\n      obj.styles = fabric.util.stylesToArray(this.styles, this.text);\r\n      if (obj.path) {\r\n        obj.path = this.path.toObject();\r\n      }\r\n      return obj;\r\n    },\r\n\r\n    /**\r\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */\r\n    set: function(key, value) {\r\n      this.callSuper('set', key, value);\r\n      var needsDims = false;\r\n      var isAddingPath = false;\r\n      if (typeof key === 'object') {\r\n        for (var _key in key) {\r\n          if (_key === 'path') {\r\n            this.setPathInfo();\r\n          }\r\n          needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\r\n          isAddingPath = isAddingPath || _key === 'path';\r\n        }\r\n      }\r\n      else {\r\n        needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\r\n        isAddingPath = key === 'path';\r\n      }\r\n      if (isAddingPath) {\r\n        this.setPathInfo();\r\n      }\r\n      if (needsDims) {\r\n        this.initDimensions();\r\n        this.setCoords();\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Returns complexity of an instance\r\n     * @return {Number} complexity\r\n     */\r\n    complexity: function() {\r\n      return 1;\r\n    }\r\n  });\r\n\r\n  \r\n\r\n  /**\r\n   * Returns fabric.Text instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Text\r\n   * @param {Object} object plain js Object to create an instance from\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\r\n   */\r\n  fabric.Text.fromObject = function(object, callback) {\r\n    var objectCopy = clone(object), path = object.path;\r\n    delete objectCopy.path;\r\n    return fabric.Object._fromObject('Text', objectCopy, function(textInstance) {\r\n      textInstance.styles = fabric.util.stylesFromArray(object.styles, object.text);\r\n      if (path) {\r\n        fabric.Object._fromObject('Path', path, function(pathInstance) {\r\n          textInstance.set('path', pathInstance);\r\n          callback(textInstance);\r\n        }, 'path');\r\n      }\r\n      else {\r\n        callback(textInstance);\r\n      }\r\n    }, 'text');\r\n  };\r\n\r\n  fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];\r\n\r\n  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\r\n\r\n})(typeof exports !== 'undefined' ? exports : this);\r\n(function() {\r\n  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\r\n    /**\r\n     * Returns true if object has no styling or no styling in a line\r\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n     * @return {Boolean}\r\n     */\r\n    isEmptyStyles: function(lineIndex) {\r\n      if (!this.styles) {\r\n        return true;\r\n      }\r\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n        return true;\r\n      }\r\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { line: this.styles[lineIndex] };\r\n      for (var p1 in obj) {\r\n        for (var p2 in obj[p1]) {\r\n          // eslint-disable-next-line no-unused-vars\r\n          for (var p3 in obj[p1][p2]) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Returns true if object has a style property or has it ina specified line\r\n     * This function is used to detect if a text will use a particular property or not.\r\n     * @param {String} property to check for\r\n     * @param {Number} lineIndex to check the style on\r\n     * @return {Boolean}\r\n     */\r\n    styleHas: function(property, lineIndex) {\r\n      if (!this.styles || !property || property === '') {\r\n        return false;\r\n      }\r\n      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {\r\n        return false;\r\n      }\r\n      var obj = typeof lineIndex === 'undefined' ? this.styles : { 0: this.styles[lineIndex] };\r\n      // eslint-disable-next-line\r\n      for (var p1 in obj) {\r\n        // eslint-disable-next-line\r\n        for (var p2 in obj[p1]) {\r\n          if (typeof obj[p1][p2][property] !== 'undefined') {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Check if characters in a text have a value for a property\r\n     * whose value matches the textbox's value for that property.  If so,\r\n     * the character-level property is deleted.  If the character\r\n     * has no other properties, then it is also deleted.  Finally,\r\n     * if the line containing that character has no other characters\r\n     * then it also is deleted.\r\n     *\r\n     * @param {string} property The property to compare between characters and text.\r\n     */\r\n    cleanStyle: function(property) {\r\n      if (!this.styles || !property || property === '') {\r\n        return false;\r\n      }\r\n      var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue,\r\n          allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\r\n      // eslint-disable-next-line\r\n      for (var p1 in obj) {\r\n        letterCount = 0;\r\n        // eslint-disable-next-line\r\n        for (var p2 in obj[p1]) {\r\n          var styleObject = obj[p1][p2],\r\n              stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\r\n\r\n          stylesCount++;\r\n\r\n          if (stylePropertyHasBeenSet) {\r\n            if (!stylePropertyValue) {\r\n              stylePropertyValue = styleObject[property];\r\n            }\r\n            else if (styleObject[property] !== stylePropertyValue) {\r\n              allStyleObjectPropertiesMatch = false;\r\n            }\r\n\r\n            if (styleObject[property] === this[property]) {\r\n              delete styleObject[property];\r\n            }\r\n          }\r\n          else {\r\n            allStyleObjectPropertiesMatch = false;\r\n          }\r\n\r\n          if (Object.keys(styleObject).length !== 0) {\r\n            letterCount++;\r\n          }\r\n          else {\r\n            delete obj[p1][p2];\r\n          }\r\n        }\r\n\r\n        if (letterCount === 0) {\r\n          delete obj[p1];\r\n        }\r\n      }\r\n      // if every grapheme has the same style set then\r\n      // delete those styles and set it on the parent\r\n      for (var i = 0; i < this._textLines.length; i++) {\r\n        graphemeCount += this._textLines[i].length;\r\n      }\r\n      if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\r\n        this[property] = stylePropertyValue;\r\n        this.removeStyle(property);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Remove a style property or properties from all individual character styles\r\n     * in a text object.  Deletes the character style object if it contains no other style\r\n     * props.  Deletes a line style object if it contains no other character styles.\r\n     *\r\n     * @param {String} props The property to remove from character styles.\r\n     */\r\n    removeStyle: function(property) {\r\n      if (!this.styles || !property || property === '') {\r\n        return;\r\n      }\r\n      var obj = this.styles, line, lineNum, charNum;\r\n      for (lineNum in obj) {\r\n        line = obj[lineNum];\r\n        for (charNum in line) {\r\n          delete line[charNum][property];\r\n          if (Object.keys(line[charNum]).length === 0) {\r\n            delete line[charNum];\r\n          }\r\n        }\r\n        if (Object.keys(line).length === 0) {\r\n          delete obj[lineNum];\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _extendStyles: function(index, styles) {\r\n      var loc = this.get2DCursorLocation(index);\r\n\r\n      if (!this._getLineStyle(loc.lineIndex)) {\r\n        this._setLineStyle(loc.lineIndex);\r\n      }\r\n\r\n      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\r\n        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\r\n      }\r\n\r\n      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\r\n    },\r\n\r\n    /**\r\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\r\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\r\n     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\r\n     */\r\n    get2DCursorLocation: function(selectionStart, skipWrapping) {\r\n      if (typeof selectionStart === 'undefined') {\r\n        selectionStart = this.selectionStart;\r\n      }\r\n      var lines = skipWrapping ? this._unwrappedTextLines : this._textLines,\r\n          len = lines.length;\r\n      for (var i = 0; i < len; i++) {\r\n        if (selectionStart <= lines[i].length) {\r\n          return {\r\n            lineIndex: i,\r\n            charIndex: selectionStart\r\n          };\r\n        }\r\n        selectionStart -= lines[i].length + this.missingNewlineOffset(i);\r\n      }\r\n      return {\r\n        lineIndex: i - 1,\r\n        charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Gets style of a current selection/cursor (at the start position)\r\n     * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\r\n     * @param {Number} [startIndex] Start index to get styles at\r\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n     * @param {Boolean} [complete] get full style or not\r\n     * @return {Array} styles an array with one, zero or more Style objects\r\n     */\r\n    getSelectionStyles: function(startIndex, endIndex, complete) {\r\n      if (typeof startIndex === 'undefined') {\r\n        startIndex = this.selectionStart || 0;\r\n      }\r\n      if (typeof endIndex === 'undefined') {\r\n        endIndex = this.selectionEnd || startIndex;\r\n      }\r\n      var styles = [];\r\n      for (var i = startIndex; i < endIndex; i++) {\r\n        styles.push(this.getStyleAtPosition(i, complete));\r\n      }\r\n      return styles;\r\n    },\r\n\r\n    /**\r\n     * Gets style of a current selection/cursor position\r\n     * @param {Number} position  to get styles at\r\n     * @param {Boolean} [complete] full style if true\r\n     * @return {Object} style Style object at a specified index\r\n     * @private\r\n     */\r\n    getStyleAtPosition: function(position, complete) {\r\n      var loc = this.get2DCursorLocation(position),\r\n          style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) :\r\n            this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\r\n      return style || {};\r\n    },\r\n\r\n    /**\r\n     * Sets style of a current selection, if no selection exist, do not set anything.\r\n     * @param {Object} [styles] Styles object\r\n     * @param {Number} [startIndex] Start index to get styles at\r\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n     * @return {fabric.IText} thisArg\r\n     * @chainable\r\n     */\r\n    setSelectionStyles: function(styles, startIndex, endIndex) {\r\n      if (typeof startIndex === 'undefined') {\r\n        startIndex = this.selectionStart || 0;\r\n      }\r\n      if (typeof endIndex === 'undefined') {\r\n        endIndex = this.selectionEnd || startIndex;\r\n      }\r\n      for (var i = startIndex; i < endIndex; i++) {\r\n        this._extendStyles(i, styles);\r\n      }\r\n      /* not included in _extendStyles to avoid clearing cache more than once */\r\n      this._forceClearCache = true;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * get the reference, not a clone, of the style object for a given character\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @return {Object} style object\r\n     */\r\n    _getStyleDeclaration: function(lineIndex, charIndex) {\r\n      var lineStyle = this.styles && this.styles[lineIndex];\r\n      if (!lineStyle) {\r\n        return null;\r\n      }\r\n      return lineStyle[charIndex];\r\n    },\r\n\r\n    /**\r\n     * return a new object that contains all the style property for a character\r\n     * the object returned is newly created\r\n     * @param {Number} lineIndex of the line where the character is\r\n     * @param {Number} charIndex position of the character on the line\r\n     * @return {Object} style object\r\n     */\r\n    getCompleteStyleDeclaration: function(lineIndex, charIndex) {\r\n      var style = this._getStyleDeclaration(lineIndex, charIndex) || { },\r\n          styleObject = { }, prop;\r\n      for (var i = 0; i < this._styleProperties.length; i++) {\r\n        prop = this._styleProperties[i];\r\n        styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];\r\n      }\r\n      return styleObject;\r\n    },\r\n\r\n    /**\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @param {Object} style\r\n     * @private\r\n     */\r\n    _setStyleDeclaration: function(lineIndex, charIndex, style) {\r\n      this.styles[lineIndex][charIndex] = style;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @private\r\n     */\r\n    _deleteStyleDeclaration: function(lineIndex, charIndex) {\r\n      delete this.styles[lineIndex][charIndex];\r\n    },\r\n\r\n    /**\r\n     * @param {Number} lineIndex\r\n     * @return {Boolean} if the line exists or not\r\n     * @private\r\n     */\r\n    _getLineStyle: function(lineIndex) {\r\n      return !!this.styles[lineIndex];\r\n    },\r\n\r\n    /**\r\n     * Set the line style to an empty object so that is initialized\r\n     * @param {Number} lineIndex\r\n     * @private\r\n     */\r\n    _setLineStyle: function(lineIndex) {\r\n      this.styles[lineIndex] = {};\r\n    },\r\n\r\n    /**\r\n     * @param {Number} lineIndex\r\n     * @private\r\n     */\r\n    _deleteLineStyle: function(lineIndex) {\r\n      delete this.styles[lineIndex];\r\n    }\r\n  });\r\n})();\r\n(function() {\r\n\r\n  var controlsUtils = fabric.controlsUtils,\r\n      scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler,\r\n      scaleStyleHandler = controlsUtils.scaleCursorStyleHandler,\r\n      scalingEqually = controlsUtils.scalingEqually,\r\n      scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX,\r\n      scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY,\r\n      scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName,\r\n      objectControls = fabric.Object.prototype.controls;\r\n\r\n  objectControls.ml = new fabric.Control({\r\n    x: -0.5,\r\n    y: 0,\r\n    cursorStyleHandler: scaleSkewStyleHandler,\r\n    actionHandler: scalingXOrSkewingY,\r\n    getActionName: scaleOrSkewActionName,\r\n  });\r\n\r\n  objectControls.mr = new fabric.Control({\r\n    x: 0.5,\r\n    y: 0,\r\n    cursorStyleHandler: scaleSkewStyleHandler,\r\n    actionHandler: scalingXOrSkewingY,\r\n    getActionName: scaleOrSkewActionName,\r\n  });\r\n\r\n  objectControls.mb = new fabric.Control({\r\n    x: 0,\r\n    y: 0.5,\r\n    cursorStyleHandler: scaleSkewStyleHandler,\r\n    actionHandler: scalingYOrSkewingX,\r\n    getActionName: scaleOrSkewActionName,\r\n  });\r\n\r\n  objectControls.mt = new fabric.Control({\r\n    x: 0,\r\n    y: -0.5,\r\n    cursorStyleHandler: scaleSkewStyleHandler,\r\n    actionHandler: scalingYOrSkewingX,\r\n    getActionName: scaleOrSkewActionName,\r\n  });\r\n\r\n  objectControls.tl = new fabric.Control({\r\n    x: -0.5,\r\n    y: -0.5,\r\n    cursorStyleHandler: scaleStyleHandler,\r\n    actionHandler: scalingEqually\r\n  });\r\n\r\n  objectControls.tr = new fabric.Control({\r\n    x: 0.5,\r\n    y: -0.5,\r\n    cursorStyleHandler: scaleStyleHandler,\r\n    actionHandler: scalingEqually\r\n  });\r\n\r\n  objectControls.bl = new fabric.Control({\r\n    x: -0.5,\r\n    y: 0.5,\r\n    cursorStyleHandler: scaleStyleHandler,\r\n    actionHandler: scalingEqually\r\n  });\r\n\r\n  objectControls.br = new fabric.Control({\r\n    x: 0.5,\r\n    y: 0.5,\r\n    cursorStyleHandler: scaleStyleHandler,\r\n    actionHandler: scalingEqually\r\n  });\r\n\r\n  objectControls.mtr = new fabric.Control({\r\n    x: 0,\r\n    y: -0.5,\r\n    actionHandler: controlsUtils.rotationWithSnapping,\r\n    cursorStyleHandler: controlsUtils.rotationStyleHandler,\r\n    offsetY: -40,\r\n    withConnection: true,\r\n    actionName: 'rotate',\r\n  });\r\n\r\n  if (fabric.Textbox) {\r\n    // this is breaking the prototype inheritance, no time / ideas to fix it.\r\n    // is important to document that if you want to have all objects to have a\r\n    // specific custom control, you have to add it to Object prototype and to Textbox\r\n    // prototype. The controls are shared as references. So changes to control `tr`\r\n    // can still apply to all objects if needed.\r\n    var textBoxControls = fabric.Textbox.prototype.controls = { };\r\n\r\n    textBoxControls.mtr = objectControls.mtr;\r\n    textBoxControls.tr = objectControls.tr;\r\n    textBoxControls.br = objectControls.br;\r\n    textBoxControls.tl = objectControls.tl;\r\n    textBoxControls.bl = objectControls.bl;\r\n    textBoxControls.mt = objectControls.mt;\r\n    textBoxControls.mb = objectControls.mb;\r\n\r\n    textBoxControls.mr = new fabric.Control({\r\n      x: 0.5,\r\n      y: 0,\r\n      actionHandler: controlsUtils.changeWidth,\r\n      cursorStyleHandler: scaleSkewStyleHandler,\r\n      actionName: 'resizing',\r\n    });\r\n\r\n    textBoxControls.ml = new fabric.Control({\r\n      x: -0.5,\r\n      y: 0,\r\n      actionHandler: controlsUtils.changeWidth,\r\n      cursorStyleHandler: scaleSkewStyleHandler,\r\n      actionName: 'resizing',\r\n    });\r\n  }\r\n})();\r\n(function () {\r\n  /** ERASER_START */\r\n\r\n  /**\r\n   * add `eraser` to enlivened props\r\n   */\r\n  fabric.Object.ENLIVEN_PROPS.push('eraser');\r\n\r\n  var __drawClipPath = fabric.Object.prototype._drawClipPath;\r\n  var _needsItsOwnCache = fabric.Object.prototype.needsItsOwnCache;\r\n  var _toObject = fabric.Object.prototype.toObject;\r\n  var _getSvgCommons = fabric.Object.prototype.getSvgCommons;\r\n  var __createBaseClipPathSVGMarkup = fabric.Object.prototype._createBaseClipPathSVGMarkup;\r\n  var __createBaseSVGMarkup = fabric.Object.prototype._createBaseSVGMarkup;\r\n\r\n  fabric.Object.prototype.cacheProperties.push('eraser');\r\n  fabric.Object.prototype.stateProperties.push('eraser');\r\n\r\n  /**\r\n   * @fires erasing:end\r\n   */\r\n  fabric.util.object.extend(fabric.Object.prototype, {\r\n    /**\r\n     * Indicates whether this object can be erased by {@link fabric.EraserBrush}\r\n     * The `deep` option introduces fine grained control over a group's `erasable` property.\r\n     * When set to `deep` the eraser will erase nested objects if they are erasable, leaving the group and the other objects untouched.\r\n     * When set to `true` the eraser will erase the entire group. Once the group changes the eraser is propagated to its children for proper functionality.\r\n     * When set to `false` the eraser will leave all objects including the group untouched.\r\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\r\n     * @type boolean | 'deep'\r\n     * @default true\r\n     */\r\n    erasable: true,\r\n\r\n    /**\r\n     * @tutorial {@link http://fabricjs.com/erasing#eraser}\r\n     * @type fabric.Eraser\r\n     */\r\n    eraser: undefined,\r\n\r\n    /**\r\n     * @override\r\n     * @returns Boolean\r\n     */\r\n    needsItsOwnCache: function () {\r\n      return _needsItsOwnCache.call(this) || !!this.eraser;\r\n    },\r\n\r\n    /**\r\n     * draw eraser above clip path\r\n     * @override\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {fabric.Object} clipPath\r\n     */\r\n    _drawClipPath: function (ctx, clipPath) {\r\n      __drawClipPath.call(this, ctx, clipPath);\r\n      if (this.eraser) {\r\n        //  update eraser size to match instance\r\n        var size = this._getNonTransformedDimensions();\r\n        this.eraser.isType('eraser') && this.eraser.set({\r\n          width: size.x,\r\n          height: size.y\r\n        });\r\n        __drawClipPath.call(this, ctx, this.eraser);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns an object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */\r\n    toObject: function (propertiesToInclude) {\r\n      var object = _toObject.call(this, ['erasable'].concat(propertiesToInclude));\r\n      if (this.eraser && !this.eraser.excludeFromExport) {\r\n        object.eraser = this.eraser.toObject(propertiesToInclude);\r\n      }\r\n      return object;\r\n    },\r\n\r\n    \r\n  });\r\n\r\n  var __restoreObjectsState = fabric.Group.prototype._restoreObjectsState;\r\n  fabric.util.object.extend(fabric.Group.prototype, {\r\n    /**\r\n     * @private\r\n     * @param {fabric.Path} path\r\n     */\r\n    _addEraserPathToObjects: function (path) {\r\n      this._objects.forEach(function (object) {\r\n        fabric.EraserBrush.prototype._addPathToObjectEraser.call(\r\n          fabric.EraserBrush.prototype,\r\n          object,\r\n          path\r\n        );\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Applies the group's eraser to its objects\r\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\r\n     */\r\n    applyEraserToObjects: function () {\r\n      var _this = this, eraser = this.eraser;\r\n      if (eraser) {\r\n        delete this.eraser;\r\n        var transform = _this.calcTransformMatrix();\r\n        eraser.clone(function (eraser) {\r\n          var clipPath = _this.clipPath;\r\n          eraser.getObjects('path')\r\n            .forEach(function (path) {\r\n              //  first we transform the path from the group's coordinate system to the canvas'\r\n              var originalTransform = fabric.util.multiplyTransformMatrices(\r\n                transform,\r\n                path.calcTransformMatrix()\r\n              );\r\n              fabric.util.applyTransformToObject(path, originalTransform);\r\n              if (clipPath) {\r\n                clipPath.clone(function (_clipPath) {\r\n                  var eraserPath = fabric.EraserBrush.prototype.applyClipPathToPath.call(\r\n                    fabric.EraserBrush.prototype,\r\n                    path,\r\n                    _clipPath,\r\n                    transform\r\n                  );\r\n                  _this._addEraserPathToObjects(eraserPath);\r\n                }, ['absolutePositioned', 'inverted']);\r\n              }\r\n              else {\r\n                _this._addEraserPathToObjects(path);\r\n              }\r\n            });\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Propagate the group's eraser to its objects, crucial for proper functionality of the eraser within the group and nested objects.\r\n     * @private\r\n     */\r\n    _restoreObjectsState: function () {\r\n      this.erasable === true && this.applyEraserToObjects();\r\n      return __restoreObjectsState.call(this);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * An object's Eraser\r\n   * @private\r\n   * @class fabric.Eraser\r\n   * @extends fabric.Group\r\n   * @memberof fabric\r\n   */\r\n  fabric.Eraser = fabric.util.createClass(fabric.Group, {\r\n    /**\r\n     * @readonly\r\n     * @static\r\n     */\r\n    type: 'eraser',\r\n\r\n    /**\r\n     * @default\r\n     */\r\n    originX: 'center',\r\n\r\n    /**\r\n     * @default\r\n     */\r\n    originY: 'center',\r\n\r\n    drawObject: function (ctx) {\r\n      ctx.save();\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\r\n      ctx.restore();\r\n      this.callSuper('drawObject', ctx);\r\n    },\r\n\r\n    /**\r\n     * eraser should retain size\r\n     * dimensions should not change when paths are added or removed\r\n     * handled by {@link fabric.Object#_drawClipPath}\r\n     * @override\r\n     * @private\r\n     */\r\n    _getBounds: function () {\r\n      //  noop\r\n    },\r\n\r\n    \r\n  });\r\n\r\n  /**\r\n   * Returns {@link fabric.Eraser} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Eraser\r\n   * @param {Object} object Object to create an Eraser from\r\n   * @param {Function} [callback] Callback to invoke when an eraser instance is created\r\n   */\r\n  fabric.Eraser.fromObject = function (object, callback) {\r\n    var objects = object.objects;\r\n    fabric.util.enlivenObjects(objects, function (enlivenedObjects) {\r\n      var options = fabric.util.object.clone(object, true);\r\n      delete options.objects;\r\n      fabric.util.enlivenObjectEnlivables(object, options, function () {\r\n        callback && callback(new fabric.Eraser(enlivenedObjects, options, true));\r\n      });\r\n    });\r\n  };\r\n\r\n  var __renderOverlay = fabric.Canvas.prototype._renderOverlay;\r\n  /**\r\n   * @fires erasing:start\r\n   * @fires erasing:end\r\n   */\r\n  fabric.util.object.extend(fabric.Canvas.prototype, {\r\n    /**\r\n     * Used by {@link #renderAll}\r\n     * @returns boolean\r\n     */\r\n    isErasing: function () {\r\n      return (\r\n        this.isDrawingMode &&\r\n        this.freeDrawingBrush &&\r\n        this.freeDrawingBrush.type === 'eraser' &&\r\n        this.freeDrawingBrush._isErasing\r\n      );\r\n    },\r\n\r\n    /**\r\n     * While erasing the brush clips out the erasing path from canvas\r\n     * so we need to render it on top of canvas every render\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     */\r\n    _renderOverlay: function (ctx) {\r\n      __renderOverlay.call(this, ctx);\r\n      if (this.isErasing() && !this.freeDrawingBrush.inverted) {\r\n        this.freeDrawingBrush._render();\r\n      }\r\n    }\r\n  });\r\n\r\n  /**\r\n   * EraserBrush class\r\n   * Supports selective erasing meaning that only erasable objects are affected by the eraser brush.\r\n   * Supports **inverted** erasing meaning that the brush can \"undo\" erasing.\r\n   *\r\n   * In order to support selective erasing, the brush clips the entire canvas\r\n   * and then draws all non-erasable objects over the erased path using a pattern brush so to speak (masking).\r\n   * If brush is **inverted** there is no need to clip canvas. The brush draws all erasable objects without their eraser.\r\n   * This achieves the desired effect of seeming to erase or unerase only erasable objects.\r\n   * After erasing is done the created path is added to all intersected objects' `eraser` property.\r\n   *\r\n   * In order to update the EraserBrush call `preparePattern`.\r\n   * It may come in handy when canvas changes during erasing (i.e animations) and you want the eraser to reflect the changes.\r\n   *\r\n   * @tutorial {@link http://fabricjs.com/erasing}\r\n   * @class fabric.EraserBrush\r\n   * @extends fabric.PencilBrush\r\n   * @memberof fabric\r\n   */\r\n  fabric.EraserBrush = fabric.util.createClass(\r\n    fabric.PencilBrush,\r\n    /** @lends fabric.EraserBrush.prototype */ {\r\n      type: 'eraser',\r\n\r\n      /**\r\n       * When set to `true` the brush will create a visual effect of undoing erasing\r\n       */\r\n      inverted: false,\r\n\r\n      /**\r\n       * @private\r\n       */\r\n      _isErasing: false,\r\n\r\n      /**\r\n       *\r\n       * @private\r\n       * @param {fabric.Object} object\r\n       * @returns boolean\r\n       */\r\n      _isErasable: function (object) {\r\n        return object.erasable !== false;\r\n      },\r\n\r\n      /**\r\n       * @private\r\n       * This is designed to support erasing a collection with both erasable and non-erasable objects.\r\n       * Iterates over collections to allow nested selective erasing.\r\n       * Prepares the pattern brush that will draw on the top context to achieve the desired visual effect.\r\n       * If brush is **NOT** inverted render all non-erasable objects.\r\n       * If brush is inverted render all erasable objects that have been erased with their clip path inverted.\r\n       * This will render the erased parts as if they were not erased.\r\n       *\r\n       * @param {fabric.Collection} collection\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {{ visibility: fabric.Object[], eraser: fabric.Object[], collection: fabric.Object[] }} restorationContext\r\n       */\r\n      _prepareCollectionTraversal: function (collection, ctx, restorationContext) {\r\n        collection.forEachObject(function (obj) {\r\n          if (obj.forEachObject && obj.erasable === 'deep') {\r\n            //  traverse\r\n            this._prepareCollectionTraversal(obj, ctx, restorationContext);\r\n          }\r\n          else if (!this.inverted && obj.erasable && obj.visible) {\r\n            //  render only non-erasable objects\r\n            obj.visible = false;\r\n            collection.dirty = true;\r\n            restorationContext.visibility.push(obj);\r\n            restorationContext.collection.push(collection);\r\n          }\r\n          else if (this.inverted && obj.visible) {\r\n            //  render only erasable objects that were erased\r\n            if (obj.erasable && obj.eraser) {\r\n              obj.eraser.inverted = true;\r\n              obj.dirty = true;\r\n              collection.dirty = true;\r\n              restorationContext.eraser.push(obj);\r\n              restorationContext.collection.push(collection);\r\n            }\r\n            else {\r\n              obj.visible = false;\r\n              collection.dirty = true;\r\n              restorationContext.visibility.push(obj);\r\n              restorationContext.collection.push(collection);\r\n            }\r\n          }\r\n        }, this);\r\n      },\r\n\r\n      /**\r\n       * Prepare the pattern for the erasing brush\r\n       * This pattern will be drawn on the top context, achieving a visual effect of erasing only erasable objects\r\n       * @todo decide how overlay color should behave when `inverted === true`, currently draws over it which is undesirable\r\n       * @private\r\n       */\r\n      preparePattern: function () {\r\n        if (!this._patternCanvas) {\r\n          this._patternCanvas = fabric.util.createCanvasElement();\r\n        }\r\n        var canvas = this._patternCanvas;\r\n        canvas.width = this.canvas.width;\r\n        canvas.height = this.canvas.height;\r\n        var patternCtx = canvas.getContext('2d');\r\n        if (this.canvas._isRetinaScaling()) {\r\n          var retinaScaling = this.canvas.getRetinaScaling();\r\n          this.canvas.__initRetinaScaling(retinaScaling, canvas, patternCtx);\r\n        }\r\n        var backgroundImage = this.canvas.backgroundImage,\r\n            bgErasable = backgroundImage && this._isErasable(backgroundImage),\r\n            overlayImage = this.canvas.overlayImage,\r\n            overlayErasable = overlayImage && this._isErasable(overlayImage);\r\n        if (!this.inverted && ((backgroundImage && !bgErasable) || !!this.canvas.backgroundColor)) {\r\n          if (bgErasable) { this.canvas.backgroundImage = undefined; }\r\n          this.canvas._renderBackground(patternCtx);\r\n          if (bgErasable) { this.canvas.backgroundImage = backgroundImage; }\r\n        }\r\n        else if (this.inverted && (backgroundImage && bgErasable)) {\r\n          var color = this.canvas.backgroundColor;\r\n          this.canvas.backgroundColor = undefined;\r\n          this.canvas._renderBackground(patternCtx);\r\n          this.canvas.backgroundColor = color;\r\n        }\r\n        patternCtx.save();\r\n        patternCtx.transform.apply(patternCtx, this.canvas.viewportTransform);\r\n        var restorationContext = { visibility: [], eraser: [], collection: [] };\r\n        this._prepareCollectionTraversal(this.canvas, patternCtx, restorationContext);\r\n        this.canvas._renderObjects(patternCtx, this.canvas._objects);\r\n        restorationContext.visibility.forEach(function (obj) { obj.visible = true; });\r\n        restorationContext.eraser.forEach(function (obj) {\r\n          obj.eraser.inverted = false;\r\n          obj.dirty = true;\r\n        });\r\n        restorationContext.collection.forEach(function (obj) { obj.dirty = true; });\r\n        patternCtx.restore();\r\n        if (!this.inverted && ((overlayImage && !overlayErasable) || !!this.canvas.overlayColor)) {\r\n          if (overlayErasable) { this.canvas.overlayImage = undefined; }\r\n          __renderOverlay.call(this.canvas, patternCtx);\r\n          if (overlayErasable) { this.canvas.overlayImage = overlayImage; }\r\n        }\r\n        else if (this.inverted && (overlayImage && overlayErasable)) {\r\n          var color = this.canvas.overlayColor;\r\n          this.canvas.overlayColor = undefined;\r\n          __renderOverlay.call(this.canvas, patternCtx);\r\n          this.canvas.overlayColor = color;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Sets brush styles\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       */\r\n      _setBrushStyles: function (ctx) {\r\n        this.callSuper('_setBrushStyles', ctx);\r\n        ctx.strokeStyle = 'black';\r\n      },\r\n\r\n      /**\r\n       * **Customiztion**\r\n       *\r\n       * if you need the eraser to update on each render (i.e animating during erasing) override this method by **adding** the following (performance may suffer):\r\n       * @example\r\n       * ```\r\n       * if(ctx === this.canvas.contextTop) {\r\n       *  this.preparePattern();\r\n       * }\r\n       * ```\r\n       *\r\n       * @override fabric.BaseBrush#_saveAndTransform\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       */\r\n      _saveAndTransform: function (ctx) {\r\n        this.callSuper('_saveAndTransform', ctx);\r\n        this._setBrushStyles(ctx);\r\n        ctx.globalCompositeOperation = ctx === this.canvas.getContext() ? 'destination-out' : 'source-over';\r\n      },\r\n\r\n      /**\r\n       * We indicate {@link fabric.PencilBrush} to repaint itself if necessary\r\n       * @returns\r\n       */\r\n      needsFullRender: function () {\r\n        return true;\r\n      },\r\n\r\n      /**\r\n       *\r\n       * @param {fabric.Point} pointer\r\n       * @param {fabric.IEvent} options\r\n       * @returns\r\n       */\r\n      onMouseDown: function (pointer, options) {\r\n        if (!this.canvas._isMainEvent(options.e)) {\r\n          return;\r\n        }\r\n        this._prepareForDrawing(pointer);\r\n        // capture coordinates immediately\r\n        // this allows to draw dots (when movement never occurs)\r\n        this._captureDrawingPath(pointer);\r\n\r\n        //  prepare for erasing\r\n        this.preparePattern();\r\n        this._isErasing = true;\r\n        this.canvas.fire('erasing:start');\r\n        this._render();\r\n      },\r\n\r\n      /**\r\n       * Rendering Logic:\r\n       * 1. Use brush to clip canvas by rendering it on top of canvas (unnecessary if `inverted === true`)\r\n       * 2. Render brush with canvas pattern on top context\r\n       *\r\n       */\r\n      _render: function () {\r\n        var ctx;\r\n        if (!this.inverted) {\r\n          //  clip canvas\r\n          ctx = this.canvas.getContext();\r\n          this.callSuper('_render', ctx);\r\n        }\r\n        //  render brush and mask it with image of non erasables\r\n        ctx = this.canvas.contextTop;\r\n        this.canvas.clearContext(ctx);\r\n        this.callSuper('_render', ctx);\r\n        ctx.save();\r\n        var t = this.canvas.getRetinaScaling(), s = 1 / t;\r\n        ctx.scale(s, s);\r\n        ctx.globalCompositeOperation = 'source-in';\r\n        ctx.drawImage(this._patternCanvas, 0, 0);\r\n        ctx.restore();\r\n      },\r\n\r\n      /**\r\n       * Creates fabric.Path object\r\n       * @override\r\n       * @private\r\n       * @param {(string|number)[][]} pathData Path data\r\n       * @return {fabric.Path} Path to add on canvas\r\n       * @returns\r\n       */\r\n      createPath: function (pathData) {\r\n        var path = this.callSuper('createPath', pathData);\r\n        path.globalCompositeOperation = this.inverted ? 'source-over' : 'destination-out';\r\n        path.stroke = this.inverted ? 'white' : 'black';\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Utility to apply a clip path to a path.\r\n       * Used to preserve clipping on eraser paths in nested objects.\r\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\r\n       * @param {fabric.Path} path The eraser path in canvas coordinate plane\r\n       * @param {fabric.Object} clipPath The clipPath to apply to the path\r\n       * @param {number[]} clipPathContainerTransformMatrix The transform matrix of the object that the clip path belongs to\r\n       * @returns {fabric.Path} path with clip path\r\n       */\r\n      applyClipPathToPath: function (path, clipPath, clipPathContainerTransformMatrix) {\r\n        var pathInvTransform = fabric.util.invertTransform(path.calcTransformMatrix()),\r\n            clipPathTransform = clipPath.calcTransformMatrix(),\r\n            transform = clipPath.absolutePositioned ?\r\n              pathInvTransform :\r\n              fabric.util.multiplyTransformMatrices(\r\n                pathInvTransform,\r\n                clipPathContainerTransformMatrix\r\n              );\r\n        //  when passing down a clip path it becomes relative to the parent\r\n        //  so we transform it acoordingly and set `absolutePositioned` to false\r\n        clipPath.absolutePositioned = false;\r\n        fabric.util.applyTransformToObject(\r\n          clipPath,\r\n          fabric.util.multiplyTransformMatrices(\r\n            transform,\r\n            clipPathTransform\r\n          )\r\n        );\r\n        //  We need to clip `path` with both `clipPath` and it's own clip path if existing (`path.clipPath`)\r\n        //  so in turn `path` erases an object only where it overlaps with all it's clip paths, regardless of how many there are.\r\n        //  this is done because both clip paths may have nested clip paths of their own (this method walks down a collection => this may reccur),\r\n        //  so we can't assign one to the other's clip path property.\r\n        path.clipPath = path.clipPath ? fabric.util.mergeClipPaths(clipPath, path.clipPath) : clipPath;\r\n        return path;\r\n      },\r\n\r\n      /**\r\n       * Utility to apply a clip path to a path.\r\n       * Used to preserve clipping on eraser paths in nested objects.\r\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\r\n       * @param {fabric.Path} path The eraser path\r\n       * @param {fabric.Object} object The clipPath to apply to path belongs to object\r\n       * @param {Function} callback Callback to be invoked with the cloned path after applying the clip path\r\n       */\r\n      clonePathWithClipPath: function (path, object, callback) {\r\n        var objTransform = object.calcTransformMatrix();\r\n        var clipPath = object.clipPath;\r\n        var _this = this;\r\n        path.clone(function (_path) {\r\n          clipPath.clone(function (_clipPath) {\r\n            callback(_this.applyClipPathToPath(_path, _clipPath, objTransform));\r\n          }, ['absolutePositioned', 'inverted']);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Adds path to object's eraser, walks down object's descendants if necessary\r\n       *\r\n       * @fires erasing:end on object\r\n       * @param {fabric.Object} obj\r\n       * @param {fabric.Path} path\r\n       */\r\n      _addPathToObjectEraser: function (obj, path) {\r\n        var _this = this;\r\n        //  object is collection, i.e group\r\n        if (obj.forEachObject && obj.erasable === 'deep') {\r\n          var targets = obj._objects.filter(function (_obj) {\r\n            return _obj.erasable;\r\n          });\r\n          if (targets.length > 0 && obj.clipPath) {\r\n            this.clonePathWithClipPath(path, obj, function (_path) {\r\n              targets.forEach(function (_obj) {\r\n                _this._addPathToObjectEraser(_obj, _path);\r\n              });\r\n            });\r\n          }\r\n          else if (targets.length > 0) {\r\n            targets.forEach(function (_obj) {\r\n              _this._addPathToObjectEraser(_obj, path);\r\n            });\r\n          }\r\n          return;\r\n        }\r\n        //  prepare eraser\r\n        var eraser = obj.eraser;\r\n        if (!eraser) {\r\n          eraser = new fabric.Eraser();\r\n          obj.eraser = eraser;\r\n        }\r\n        //  clone and add path\r\n        path.clone(function (path) {\r\n          // http://fabricjs.com/using-transformations\r\n          var desiredTransform = fabric.util.multiplyTransformMatrices(\r\n            fabric.util.invertTransform(\r\n              obj.calcTransformMatrix()\r\n            ),\r\n            path.calcTransformMatrix()\r\n          );\r\n          fabric.util.applyTransformToObject(path, desiredTransform);\r\n          eraser.addWithUpdate(path);\r\n          obj.set('dirty', true);\r\n          obj.fire('erasing:end', {\r\n            path: path\r\n          });\r\n          if (obj.group && Array.isArray(_this.__subTargets)) {\r\n            _this.__subTargets.push(obj);\r\n          }\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Add the eraser path to canvas drawables' clip paths\r\n       *\r\n       * @param {fabric.Canvas} source\r\n       * @param {fabric.Canvas} path\r\n       * @returns {Object} canvas drawables that were erased by the path\r\n       */\r\n      applyEraserToCanvas: function (path) {\r\n        var canvas = this.canvas;\r\n        var drawables = {};\r\n        [\r\n          'backgroundImage',\r\n          'overlayImage',\r\n        ].forEach(function (prop) {\r\n          var drawable = canvas[prop];\r\n          if (drawable && drawable.erasable) {\r\n            this._addPathToObjectEraser(drawable, path);\r\n            drawables[prop] = drawable;\r\n          }\r\n        }, this);\r\n        return drawables;\r\n      },\r\n\r\n      /**\r\n       * On mouseup after drawing the path on contextTop canvas\r\n       * we use the points captured to create an new fabric path object\r\n       * and add it to every intersected erasable object.\r\n       */\r\n      _finalizeAndAddPath: function () {\r\n        var ctx = this.canvas.contextTop, canvas = this.canvas;\r\n        ctx.closePath();\r\n        if (this.decimate) {\r\n          this._points = this.decimatePoints(this._points, this.decimate);\r\n        }\r\n\r\n        // clear\r\n        canvas.clearContext(canvas.contextTop);\r\n        this._isErasing = false;\r\n\r\n        var pathData = this._points && this._points.length > 1 ?\r\n          this.convertPointsToSVGPath(this._points) :\r\n          null;\r\n        if (!pathData || this._isEmptySVGPath(pathData)) {\r\n          canvas.fire('erasing:end');\r\n          // do not create 0 width/height paths, as they are\r\n          // rendered inconsistently across browsers\r\n          // Firefox 4, for example, renders a dot,\r\n          // whereas Chrome 10 renders nothing\r\n          canvas.requestRenderAll();\r\n          return;\r\n        }\r\n\r\n        var path = this.createPath(pathData);\r\n        //  needed for `intersectsWithObject`\r\n        path.setCoords();\r\n        //  commense event sequence\r\n        canvas.fire('before:path:created', { path: path });\r\n\r\n        // finalize erasing\r\n        var drawables = this.applyEraserToCanvas(path);\r\n        var _this = this;\r\n        this.__subTargets = [];\r\n        var targets = [];\r\n        canvas.forEachObject(function (obj) {\r\n          if (obj.erasable && obj.intersectsWithObject(path, true, true)) {\r\n            _this._addPathToObjectEraser(obj, path);\r\n            targets.push(obj);\r\n          }\r\n        });\r\n        //  fire erasing:end\r\n        canvas.fire('erasing:end', {\r\n          path: path,\r\n          targets: targets,\r\n          subTargets: this.__subTargets,\r\n          drawables: drawables\r\n        });\r\n        delete this.__subTargets;\r\n\r\n        canvas.requestRenderAll();\r\n        this._resetShadow();\r\n\r\n        // fire event 'path' created\r\n        canvas.fire('path:created', { path: path });\r\n      }\r\n    }\r\n  );\r\n\r\n  /** ERASER_END */\r\n})();\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","(self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || []).push([[405],{\n\n/***/ 8312:\n/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {\n\n\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return __webpack_require__(7381);\n      }\n    ]);\n    if(false) {}\n  \n\n/***/ }),\n\n/***/ 7381:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": function() { return /* binding */ HomePage; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(5893);\n// EXTERNAL MODULE: ./node_modules/next/head.js\nvar head = __webpack_require__(9008);\nvar head_default = /*#__PURE__*/__webpack_require__.n(head);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n;// CONCATENATED MODULE: ./src/useCanvas.ts\n\nconst CanvasContext = react.createContext(null);\nCanvasContext.displayName = \"CanvasContext\";\n\nfunction useCanvas(canvasId) {\n    const context = (0,react.useContext)(CanvasContext);\n    if (!context) {\n        throw new Error(\"No CanvasContext.Provider\");\n    }\n    if (typeof canvasId === \"undefined\") {\n        return context;\n    } else if (canvasId == null) {\n        return {};\n    } else {\n        var _context_canvases_canvasId;\n        return (_context_canvases_canvasId = context.canvases[canvasId]) !== null && _context_canvases_canvasId !== void 0 ? _context_canvases_canvasId : {};\n    }\n}\n/* harmony default export */ var src_useCanvas = (useCanvas);\n\n;// CONCATENATED MODULE: ./src/useTools.ts\n\nconst ToolsContext = react.createContext(null);\nToolsContext.displayName = \"ToolsContext\";\n\nfunction useTools() {\n    const context = (0,react.useContext)(ToolsContext);\n    if (!context) {\n        throw new Error(\"No ToolsContext.Provider\");\n    }\n    return context;\n}\n\n// EXTERNAL MODULE: ./node_modules/react-popper/lib/esm/usePopper.js + 55 modules\nvar usePopper = __webpack_require__(5237);\n// EXTERNAL MODULE: ./node_modules/rc-slider/es/index.js + 36 modules\nvar es = __webpack_require__(6863);\n// EXTERNAL MODULE: ./node_modules/react-icons/ri/index.esm.js\nvar index_esm = __webpack_require__(9352);\n// EXTERNAL MODULE: ./node_modules/react-icons/fa/index.esm.js\nvar fa_index_esm = __webpack_require__(9583);\n// EXTERNAL MODULE: ./node_modules/react-icons/go/index.esm.js\nvar go_index_esm = __webpack_require__(6653);\n// EXTERNAL MODULE: ./node_modules/react-icons/gi/index.esm.js\nvar gi_index_esm = __webpack_require__(2585);\n// EXTERNAL MODULE: ./node_modules/react-icons/io/index.esm.js\nvar io_index_esm = __webpack_require__(1649);\n// EXTERNAL MODULE: ./node_modules/react-icons/im/index.esm.js\nvar im_index_esm = __webpack_require__(3990);\n;// CONCATENATED MODULE: ./src/CanvasTools.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nfunction CanvasTools() {\n    const nameInputRef = (0,react.useRef)(null);\n    const fileInputRef = (0,react.useRef)(null);\n    const fileTypeRef = (0,react.useRef)(null);\n    const { activeCanvas , backgroundColor , setBackgroundColor , selectedObjects , lockedObjects , lockSelection , unlockSelection , bringForward , sendBackward , duplicate , deleteSelection , undo , redo , canUndo , canRedo , brushColor , setBrushColor , brushSize , setBrushSize , hueRotate , setHueRotate , saturation , setSaturation , brightness , setBrightness , activeCanvasType , addImages , exportSkin  } = useTools();\n    const { isDrawingMode , setDrawingMode  } = src_useCanvas(activeCanvas);\n    const [isMac, setIsMac] = (0,react.useState)(false);\n    const commandKeyPrefix = isMac ? \"⌘\" : \"Ctrl \";\n    const shiftKeySymbol = \"⇧\";\n    // Brush popup\n    const [referenceElement, setReferenceElement] = (0,react.useState)(null);\n    const [popperElement, setPopperElement] = (0,react.useState)(null);\n    const [arrowElement, setArrowElement] = (0,react.useState)(null);\n    const [isBrushToolsOpen, setBrushToolsOpen] = (0,react.useState)(false);\n    const [isFilterToolsOpen, setFilterToolsOpen] = (0,react.useState)(false);\n    const { styles , attributes  } = (0,usePopper/* usePopper */.D)(referenceElement, popperElement, {\n        modifiers: [\n            {\n                name: \"arrow\",\n                options: {\n                    element: arrowElement\n                }\n            },\n            {\n                name: \"offset\",\n                options: {\n                    offset: [\n                        0,\n                        10\n                    ]\n                }\n            }\n        ]\n    });\n    if (isFilterToolsOpen && !selectedObjects.length) {\n        setFilterToolsOpen(false);\n    }\n    const isSelectionLocked = selectedObjects.length ? selectedObjects.every((object)=>lockedObjects.has(object)) : false;\n    const handleBackgroundColorChange = (event)=>{\n        setBackgroundColor(event.target.value);\n    };\n    (0,react.useEffect)(()=>{\n        if (navigator.platform && navigator.platform.startsWith(\"Mac\")) {\n            setIsMac(true);\n        } else if (navigator.userAgent.match(/\\(Macintosh;/)) {\n            setIsMac(true);\n        }\n    }, []);\n    (0,react.useEffect)(()=>{\n        if (popperElement) {\n            popperElement.focus();\n        }\n    }, [\n        popperElement\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n        className: \"CanvasTools\",\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"CanvasBackgroundColor\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        className: \"ColorSwatch\",\n                        type: \"radio\",\n                        name: \"backgroundColor\",\n                        id: \"canvasBackgroundColorBlack\",\n                        value: \"black\",\n                        checked: backgroundColor === \"black\",\n                        onChange: handleBackgroundColorChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"canvasBackgroundColorBlack\",\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"span\", {\n                            className: \"HiddenLabel\",\n                            children: \"Black\"\n                        })\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        className: \"ColorSwatch\",\n                        type: \"radio\",\n                        name: \"backgroundColor\",\n                        id: \"canvasBackgroundColorMagenta\",\n                        value: \"magenta\",\n                        checked: backgroundColor === \"magenta\",\n                        onChange: handleBackgroundColorChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"canvasBackgroundColorMagenta\",\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"span\", {\n                            className: \"HiddenLabel\",\n                            children: \"Magenta\"\n                        })\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        className: \"ColorSwatch\",\n                        type: \"radio\",\n                        name: \"backgroundColor\",\n                        id: \"canvasBackgroundColorWhite\",\n                        value: \"white\",\n                        checked: backgroundColor === \"white\",\n                        onChange: handleBackgroundColorChange\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"canvasBackgroundColorWhite\",\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"span\", {\n                            className: \"HiddenLabel\",\n                            children: \"White\"\n                        })\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Buttons\",\n                children: [\n                    activeCanvasType === \"color\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                                ref: fileInputRef,\n                                onChange: async (event)=>{\n                                    const imageUrl = await new Promise((resolve, reject)=>{\n                                        var _event_target_files;\n                                        const inputFile = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n                                        if (inputFile) {\n                                            const reader = new FileReader();\n                                            reader.addEventListener(\"load\", (event)=>{\n                                                var _event_target;\n                                                resolve((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result);\n                                            });\n                                            reader.readAsDataURL(inputFile);\n                                        } else {\n                                            reject(new Error(\"No input file provided.\"));\n                                        }\n                                    });\n                                    addImages([\n                                        imageUrl\n                                    ]);\n                                },\n                                type: \"file\",\n                                accept: \".png, image/png\",\n                                hidden: true\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Add Image\",\n                                title: \"Add Image\",\n                                onClick: ()=>{\n                                    if (fileInputRef.current) {\n                                        fileInputRef.current.click();\n                                    }\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImPlus */.yAv, {\n                                    style: {\n                                        fontSize: 14\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                ref: setReferenceElement,\n                                \"data-active\": isFilterToolsOpen ? \"\" : undefined,\n                                disabled: !selectedObjects.length,\n                                \"aria-label\": \"Filters\",\n                                title: \"Filters\",\n                                onClick: ()=>{\n                                    setFilterToolsOpen((isOpen)=>!isOpen);\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImContrast */.J76, {})\n                            }),\n                            isFilterToolsOpen ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                className: \"BrushToolsPopup\",\n                                ref: setPopperElement,\n                                style: styles.popper,\n                                tabIndex: -1,\n                                onBlur: (event)=>{\n                                    const newFocusElement = event.relatedTarget;\n                                    const isFocusLeaving = !newFocusElement || !event.currentTarget.contains(newFocusElement);\n                                    if (isFocusLeaving) {\n                                        setFilterToolsOpen(false);\n                                    }\n                                },\n                                ...attributes.popper,\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                        className: \"Fields\",\n                                        children: [\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"label\", {\n                                                        children: [\n                                                            \"Hue:\",\n                                                            \" \",\n                                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"strong\", {\n                                                                children: hueRotate == null ? \"MULTIPLE VALUES\" : /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                                                                    children: [\n                                                                        Math.round(hueRotate * 180),\n                                                                        \"\\xb0\"\n                                                                    ]\n                                                                })\n                                                            })\n                                                        ]\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: -180,\n                                                            max: 180,\n                                                            startPoint: 0,\n                                                            value: Math.round((hueRotate !== null && hueRotate !== void 0 ? hueRotate : 0) * 180),\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setHueRotate(value / 180);\n                                                            },\n                                                            trackStyle: {\n                                                                height: 8,\n                                                                background: \"#03fccf\"\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"#03fccf\",\n                                                                background: \"rgb(5, 69, 76)\",\n                                                                // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"rgba(255, 255, 255, 0.3)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            }),\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"label\", {\n                                                        children: [\n                                                            \"Saturation:\",\n                                                            \" \",\n                                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"strong\", {\n                                                                children: saturation == null ? \"MULTIPLE VALUES\" : \"\".concat(Math.round(saturation * 100 + 100), \"%\")\n                                                            })\n                                                        ]\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: -100,\n                                                            max: 100,\n                                                            startPoint: 0,\n                                                            value: Math.round((saturation !== null && saturation !== void 0 ? saturation : 0) * 100),\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setSaturation(value / 100);\n                                                            },\n                                                            trackStyle: {\n                                                                height: 8,\n                                                                background: \"#03fccf\"\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"#03fccf\",\n                                                                background: \"rgb(5, 69, 76)\",\n                                                                // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"rgba(255, 255, 255, 0.3)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            }),\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"label\", {\n                                                        children: [\n                                                            \"Brightness:\",\n                                                            \" \",\n                                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"strong\", {\n                                                                children: brightness == null ? \"MULTIPLE VALUES\" : \"\".concat(Math.round(brightness * 100 + 100), \"%\")\n                                                            })\n                                                        ]\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: -100,\n                                                            max: 100,\n                                                            startPoint: 0,\n                                                            value: Math.round((brightness !== null && brightness !== void 0 ? brightness : 0) * 100),\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setBrightness(value / 100);\n                                                            },\n                                                            trackStyle: {\n                                                                height: 8,\n                                                                background: \"#03fccf\"\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"#03fccf\",\n                                                                background: \"rgb(5, 69, 76)\",\n                                                                // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"rgba(255, 255, 255, 0.3)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                        className: \"PopupArrow\",\n                                        ref: setArrowElement,\n                                        style: styles.arrow\n                                    })\n                                ]\n                            }) : null,\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": isSelectionLocked ? \"Unlock\" : \"Lock\",\n                                title: isSelectionLocked ? \"Unlock (L)\" : \"Lock (L)\",\n                                onClick: isSelectionLocked ? unlockSelection : lockSelection,\n                                \"data-locked\": isSelectionLocked ? \"\" : undefined,\n                                children: isSelectionLocked ? /*#__PURE__*/ (0,jsx_runtime.jsx)(fa_index_esm/* FaUnlock */.D5B, {\n                                    style: {\n                                        fontSize: 14\n                                    }\n                                }) : /*#__PURE__*/ (0,jsx_runtime.jsx)(fa_index_esm/* FaLock */.kUi, {\n                                    style: {\n                                        fontSize: 14\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Bring Forward\",\n                                title: \"Bring Forward (F)\",\n                                onClick: bringForward,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(go_index_esm/* GoArrowUp */.KhA, {\n                                    style: {\n                                        fontSize: 22\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Send Backward\",\n                                title: \"Send Backward (B)\",\n                                onClick: sendBackward,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(go_index_esm/* GoArrowDown */.O9L, {\n                                    style: {\n                                        fontSize: 22\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Duplicate\",\n                                title: \"Duplicate (D)\",\n                                onClick: duplicate,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(index_esm/* RiFileCopyFill */.xvH, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Delete\",\n                                title: \"Delete (Backspace)\",\n                                onClick: deleteSelection,\n                                disabled: isSelectionLocked,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(fa_index_esm/* FaTrashAlt */.AMf, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Undo\",\n                                title: \"Undo (\".concat(commandKeyPrefix, \"Z)\"),\n                                onClick: undo,\n                                disabled: !canUndo,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImUndo2 */.UIL, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Redo\",\n                                title: \"Redo (\".concat(isMac ? \"\".concat(shiftKeySymbol).concat(commandKeyPrefix, \"Z)\") : \"\".concat(commandKeyPrefix, \" Y\")),\n                                onClick: redo,\n                                disabled: !canRedo,\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(im_index_esm/* ImRedo2 */.rks, {})\n                            })\n                        ]\n                    }) : null,\n                    activeCanvasType === \"metallic\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"data-active\": isDrawingMode ? undefined : \"\",\n                                \"aria-label\": \"Select\",\n                                title: \"Select (S)\",\n                                onClick: ()=>{\n                                    setDrawingMode(false);\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(gi_index_esm/* GiArrowCursor */.Pvc, {})\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                ref: setReferenceElement,\n                                \"data-active\": isDrawingMode ? \"\" : undefined,\n                                \"aria-label\": \"Paint\",\n                                title: \"Paint (P)\",\n                                onClick: ()=>{\n                                    setDrawingMode(true);\n                                    setBrushToolsOpen((isOpen)=>!isOpen);\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(io_index_esm/* IoMdBrush */.VUP, {})\n                            }),\n                            isBrushToolsOpen ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                className: \"BrushToolsPopup\",\n                                ref: setPopperElement,\n                                style: styles.popper,\n                                tabIndex: -1,\n                                onBlur: (event)=>{\n                                    const newFocusElement = event.relatedTarget;\n                                    const isFocusLeaving = !newFocusElement || !event.currentTarget.contains(newFocusElement);\n                                    if (isFocusLeaving) {\n                                        setBrushToolsOpen(false);\n                                    }\n                                },\n                                ...attributes.popper,\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                        className: \"Fields\",\n                                        children: [\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                                                        children: \"Metallic Amount\"\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: 0,\n                                                            max: 255,\n                                                            trackStyle: {\n                                                                display: \"none\"\n                                                            },\n                                                            value: brushColor,\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setBrushColor(value);\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"rgb(20, 105, 241)\",\n                                                                background: \"rgb(\".concat(brushColor, \", \").concat(brushColor, \", \").concat(brushColor, \")\"),\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"linear-gradient(to right, black 0%, white 100%)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            }),\n                                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                className: \"Field\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                                                        children: \"Brush Size\"\n                                                    }),\n                                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                        className: \"SliderContainer\",\n                                                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(es/* default */.Z, {\n                                                            min: 1,\n                                                            max: 50,\n                                                            trackStyle: {\n                                                                height: 8,\n                                                                background: \"#03fccf\"\n                                                            },\n                                                            value: brushSize,\n                                                            onChange: (value)=>{\n                                                                if (Array.isArray(value)) {\n                                                                    value = value[0];\n                                                                }\n                                                                setBrushSize(value);\n                                                            },\n                                                            handleStyle: {\n                                                                width: 20,\n                                                                height: 20,\n                                                                marginTop: -6,\n                                                                borderColor: \"#03fccf\",\n                                                                background: \"rgb(5, 69, 76)\",\n                                                                // background: `rgb(${brushColor}, ${brushColor}, ${brushColor})`,\n                                                                opacity: 1\n                                                            },\n                                                            railStyle: {\n                                                                height: 8,\n                                                                border: \"1px solid #555\",\n                                                                background: \"rgba(255, 255, 255, 0.3)\"\n                                                            }\n                                                        })\n                                                    })\n                                                ]\n                                            })\n                                        ]\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                        className: \"PopupArrow\",\n                                        ref: setArrowElement,\n                                        style: styles.arrow\n                                    })\n                                ]\n                            }) : null\n                        ]\n                    }) : null\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Export\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                        ref: nameInputRef,\n                        type: \"text\",\n                        name: \"CustomSkinName\",\n                        placeholder: \"Skin Name\",\n                        size: 12\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: ()=>{\n                            const name = nameInputRef.current ? nameInputRef.current.value : \"\";\n                            const format = fileTypeRef.current ? fileTypeRef.current.value : \".png\";\n                            exportSkin({\n                                name,\n                                format\n                            });\n                        },\n                        children: \"Export\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                        ref: fileTypeRef,\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                value: \"png\",\n                                children: \".png\"\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                value: \"vl2\",\n                                children: \".vl2\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/next/config.js\nvar config = __webpack_require__(1752);\nvar config_default = /*#__PURE__*/__webpack_require__.n(config);\n// EXTERNAL MODULE: ./vendor/fabric/fabric.js\nvar fabric = __webpack_require__(6287);\n;// CONCATENATED MODULE: ./src/useWarrior.ts\n\nconst WarriorContext = react.createContext(null);\nWarriorContext.displayName = \"WarriorContext\";\n\nfunction useWarrior() {\n    const context = (0,react.useContext)(WarriorContext);\n    if (!context) {\n        throw new Error(\"No WarriorContext.Provider\");\n    }\n    return context;\n}\n\n;// CONCATENATED MODULE: ./src/fabricUtils.ts\n\nfunction createFabricImage(url) {\n    return new Promise((resolve)=>fabric.fabric.Image.fromURL(url, resolve, {\n            crossOrigin: \"anonymous\"\n        }));\n}\n\n// EXTERNAL MODULE: ./node_modules/comlink/dist/esm/comlink.mjs\nvar comlink = __webpack_require__(4375);\n;// CONCATENATED MODULE: ./node_modules/worker-loader/dist/cjs.js!./src/imageProcessing.worker.ts\nfunction Worker_fn() {\n  return new Worker(__webpack_require__.p + \"static/chunks/imageProcessing.worker-ec557200a46215b3.worker.js\");\n}\n\n;// CONCATENATED MODULE: ./src/useImageWorker.ts\n\n\n\nfunction useImageWorker() {\n    const workerRef = (0,react.useRef)(null);\n    const functionsRef = (0,react.useRef)(null);\n    const value = (0,react.useMemo)(()=>{\n        const getFunctions = ()=>{\n            return functionsRef.current;\n        };\n        return {\n            async combineColorAndAlphaImageUrls () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.combineColorAndAlphaImageUrls(...args);\n            },\n            async removeAlphaFromArrayBuffer () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.removeAlphaFromArrayBuffer(...args);\n            },\n            async convertArrayBufferAlphaToGrayscale () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.convertArrayBufferAlphaToGrayscale(...args);\n            },\n            async convertGrayscaleImageUrlToMetallicRoughness () {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                const functions = await getFunctions();\n                return functions === null || functions === void 0 ? void 0 : functions.convertGrayscaleImageUrlToMetallicRoughness(...args);\n            }\n        };\n    }, []);\n    (0,react.useEffect)(()=>{\n        const worker = new Worker_fn();\n        const functions = comlink/* wrap */.Ud(worker);\n        workerRef.current = worker;\n        functionsRef.current = functions;\n        return ()=>{\n            functions[comlink/* releaseProxy */.Yy]();\n            worker.terminate();\n        };\n    }, []);\n    return value;\n}\n\n;// CONCATENATED MODULE: ./src/useSettings.ts\nfunction useSettings() {\n    return {\n        canvasPadding: 64,\n        basePath:  true ? \"/t2-model-skinner\" : 0\n    };\n}\n\n// EXTERNAL MODULE: ./node_modules/pngjs/browser.js\nvar browser = __webpack_require__(7113);\n// EXTERNAL MODULE: ./node_modules/get-stream/index.js\nvar get_stream = __webpack_require__(31);\n;// CONCATENATED MODULE: ./src/imageUtils.ts\n\n\nfunction arrayBufferToBase64(arrayBuffer) {\n    let base64 = \"\";\n    const encodings = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    const bytes = new Uint8Array(arrayBuffer);\n    const byteLength = bytes.byteLength;\n    const byteRemainder = byteLength % 3;\n    const mainLength = byteLength - byteRemainder;\n    let a, b, c, d;\n    let chunk;\n    // Main loop deals with bytes in chunks of 3\n    for(let i = 0; i < mainLength; i = i + 3){\n        // Combine the three bytes into a single integer\n        chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];\n        // Use bitmasks to extract 6-bit segments from the triplet\n        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n        b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12\n        c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6\n        d = chunk & 63; // 63 = 2^6 - 1\n        // Convert the raw binary segments to the appropriate ASCII encoding\n        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    }\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n        chunk = bytes[mainLength];\n        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n        // Set the 4 least significant bits to zero\n        b = (chunk & 3) << 4; // 3   = 2^2 - 1\n        base64 += encodings[a] + encodings[b] + \"==\";\n    } else if (byteRemainder == 2) {\n        chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n        b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4\n        // Set the 2 least significant bits to zero\n        c = (chunk & 15) << 2; // 15 = 2^4 - 1\n        base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\n    }\n    return base64;\n}\nasync function rgbaToArrayBuffer(rgba, param) {\n    let { width , height  } = param;\n    const png = new PNG({\n        width,\n        height,\n        inputHasAlpha: true\n    });\n    png.data = rgba;\n    png.pack();\n    const arrayBuffer = await getStream.buffer(png);\n    return arrayBuffer;\n}\nfunction arrayBufferToImageUrl(arrayBuffer) {\n    const base64 = arrayBufferToBase64(arrayBuffer);\n    return \"data:image/png;base64,\".concat(base64);\n}\nasync function imageUrlToArrayBuffer(url) {\n    const response = await fetch(url);\n    if (response.ok) {\n        const arrayBuffer = await response.arrayBuffer();\n        return arrayBuffer;\n    } else {\n        throw new Error(\"Failed to load image URL: \".concat(url));\n    }\n}\nasync function arrayBufferToRgba(arrayBuffer) {\n    const png = await new Promise((resolve, reject)=>new PNG().parse(arrayBuffer, (err, data)=>{\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        }));\n    return {\n        rgba: png.data,\n        width: png.width,\n        height: png.height\n    };\n}\nasync function setGrayscaleFromAlpha(rgba) {\n    const length = rgba.length;\n    for(let i = 0; i < length; i += 4){\n        const alpha = rgba[i + 3];\n        rgba[i] = alpha;\n        rgba[i + 1] = alpha;\n        rgba[i + 2] = alpha;\n        rgba[i + 3] = 255;\n    }\n}\nasync function setAlphaFromGrayscale(rgba, grayscaleRgba) {\n    const length = rgba.length;\n    // Modify image to map white pixels on the metallic canvas\n    // to the alpha channel.\n    for(let i = 0; i < length; i += 4){\n        rgba[i + 3] = Math.max(1, grayscaleRgba[i]);\n    }\n}\nasync function setAlphaToMax(rgba) {\n    const length = rgba.length;\n    for(let i = 0; i < length; i += 4){\n        rgba[i + 3] = 255;\n    }\n}\nfunction setMetallicFromGrayscale(rgba) {\n    const length = rgba.length;\n    for(let i = 0; i < length; i += 4){\n        const grayscale = rgba[i];\n        // Red meanings nothing, set to 0.\n        rgba[i] = 0;\n        // Green maps to roughness. We want more metallic to be less rough.\n        rgba[i + 1] = grayscale > 0 ? 255 - Math.min(grayscale * 2 + 64, 255) : 255;\n        // Blue and alpha values should already be correct.\n        rgba[i + 2] = grayscale ? Math.min(grayscale * 1 + 64, 255) : 0;\n    }\n}\nasync function imageUrlToRgba(imageUrl) {\n    const arrayBuffer = await imageUrlToArrayBuffer(imageUrl);\n    const { rgba , width , height  } = await arrayBufferToRgba(arrayBuffer);\n    return {\n        rgba,\n        width,\n        height\n    };\n}\nasync function rgbaToImageUrl(rgba, param) {\n    let { width , height  } = param;\n    const arrayBuffer = await rgbaToArrayBuffer(rgba, {\n        width,\n        height\n    });\n    const imageUrl = arrayBufferToImageUrl(arrayBuffer);\n    return imageUrl;\n}\nasync function combineColorAndAlphaImageUrls(param) {\n    let { colorImageUrl , metallicImageUrl  } = param;\n    const [{ rgba , width , height  }, { rgba: metallicRgba  }] = await Promise.all([\n        imageUrlToRgba(colorImageUrl),\n        imageUrlToRgba(metallicImageUrl)\n    ]);\n    setAlphaFromGrayscale(rgba, metallicRgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\nasync function removeAlphaFromArrayBuffer(arrayBuffer) {\n    const { rgba , width , height  } = await arrayBufferToRgba(arrayBuffer);\n    setAlphaToMax(rgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\nasync function convertArrayBufferAlphaToGrayscale(arrayBuffer) {\n    const { rgba , width , height  } = await arrayBufferToRgba(arrayBuffer);\n    setGrayscaleFromAlpha(rgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\nasync function convertGrayscaleImageUrlToMetallicRoughness(imageUrl) {\n    const { rgba , width , height  } = await imageUrlToRgba(imageUrl);\n    setMetallicFromGrayscale(rgba);\n    const outputImageUrl = await rgbaToImageUrl(rgba, {\n        width,\n        height\n    });\n    return outputImageUrl;\n}\n\n;// CONCATENATED MODULE: ./src/ToolsProvider.tsx\n\n\n\n\n\n\n\n\n\n\n\nconst { publicRuntimeConfig  } = config_default()();\nconst { materials  } = publicRuntimeConfig;\nfunction lockObject(object) {\n    object.lockMovementX = true;\n    object.lockMovementY = true;\n    object.lockScalingX = true;\n    object.lockScalingY = true;\n    object.lockRotation = true;\n}\nfunction unlockObject(object) {\n    object.lockMovementX = false;\n    object.lockMovementY = false;\n    object.lockScalingX = false;\n    object.lockScalingY = false;\n    object.lockRotation = false;\n}\nfunction isActiveSelection(object) {\n    return object.type === \"activeSelection\";\n}\nfunction ToolsProvider(param) {\n    let { children  } = param;\n    const { actualModel , selectedModelType  } = useWarrior();\n    const [selectedMaterialIndex, setSelectedMaterialIndex] = (0,react.useState)(0);\n    const materialDefs = materials[actualModel];\n    var _materialDefs_selectedMaterialIndex;\n    const materialDef = (_materialDefs_selectedMaterialIndex = materialDefs[selectedMaterialIndex]) !== null && _materialDefs_selectedMaterialIndex !== void 0 ? _materialDefs_selectedMaterialIndex : null;\n    var _materialDef_size;\n    const textureSize = (0,react.useMemo)(()=>(_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : [\n            512,\n            512\n        ], [\n        materialDef\n    ]);\n    const hasMetallic = !(materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1);\n    const [activeCanvasType, setActiveCanvasType] = (0,react.useState)(\"color\");\n    if (!hasMetallic && activeCanvasType === \"metallic\") {\n        setActiveCanvasType(\"color\");\n    }\n    const [backgroundColor, setBackgroundColor] = (0,react.useState)(\"magenta\");\n    const [lockedObjects, setLockedObjects] = (0,react.useState)(()=>new Set());\n    const [brushColor, setBrushColor] = (0,react.useState)(200);\n    const [brushSize, setBrushSize] = (0,react.useState)(10);\n    const [filterMap, setFilterMap] = (0,react.useState)(()=>new Map());\n    const [selectedObjects, setSelectedObjects] = (0,react.useState)(()=>[]);\n    const activeCanvas = materialDef ? \"\".concat(materialDef.name, \":\").concat(activeCanvasType) : null;\n    const metallicCanvasId = materialDef ? \"\".concat(materialDef.name, \":metallic\") : null;\n    const { canvases  } = src_useCanvas();\n    const { canvas , notifyChange , undo , redo , canUndo , canRedo  } = src_useCanvas(activeCanvas);\n    const { canvas: metallicCanvas  } = src_useCanvas(metallicCanvasId);\n    const [isDrawingMode, setDrawingMode] = (0,react.useState)(false);\n    const { combineColorAndAlphaImageUrls  } = useImageWorker();\n    const { canvasPadding  } = useSettings();\n    const [filterChanges, setFilterChanges] = (0,react.useState)(()=>[]);\n    const getFilter = (name)=>{\n        if (selectedObjects.length) {\n            var _filterMap_get, _name;\n            const getValue = (i)=>(_name = ((_filterMap_get = filterMap.get(selectedObjects[i])) !== null && _filterMap_get !== void 0 ? _filterMap_get : {})[name]) !== null && _name !== void 0 ? _name : 0;\n            const firstValue = getValue(0);\n            if (selectedObjects.slice(1).every((selectedObject, i)=>getValue(i + 1) === firstValue)) {\n                return firstValue;\n            }\n            return null;\n        } else {\n            return 0;\n        }\n    };\n    const hueRotate = getFilter(\"HueRotation\");\n    const saturation = getFilter(\"Saturation\");\n    const brightness = getFilter(\"Brightness\");\n    const setFilter = (0,react.useCallback)((name, value)=>{\n        if (!selectedObjects.length) {\n            setFilterChanges([]);\n            return;\n        }\n        const filterChanges = [];\n        const newFilterMap = new Map(filterMap);\n        for (const selectedObject of selectedObjects){\n            var _filterMap_get;\n            const existingFilters = (_filterMap_get = filterMap.get(selectedObject)) !== null && _filterMap_get !== void 0 ? _filterMap_get : {};\n            const newFilters = {\n                ...existingFilters,\n                [name]: value\n            };\n            newFilterMap.set(selectedObject, newFilters);\n            filterChanges.push([\n                selectedObject,\n                newFilters\n            ]);\n        }\n        setFilterMap(newFilterMap);\n        setFilterChanges(filterChanges);\n    }, [\n        filterMap,\n        selectedObjects\n    ]);\n    const setHueRotate = (0,react.useCallback)((value)=>setFilter(\"HueRotation\", value), [\n        setFilter\n    ]);\n    const setSaturation = (0,react.useCallback)((value)=>setFilter(\"Saturation\", value), [\n        setFilter\n    ]);\n    const setBrightness = (0,react.useCallback)((value)=>setFilter(\"Brightness\", value), [\n        setFilter\n    ]);\n    (0,react.useEffect)(()=>{\n        if (!filterChanges.length) {\n            return;\n        }\n        for (const [selectedObject, newFilters] of filterChanges){\n            if (selectedObject instanceof fabric.fabric.Image) {\n                selectedObject.filters = [];\n                for(const key in newFilters){\n                    var _newFilters_key;\n                    const filterValue = (_newFilters_key = newFilters[key]) !== null && _newFilters_key !== void 0 ? _newFilters_key : 0;\n                    if (filterValue !== 0) {\n                        switch(key){\n                            case \"HueRotation\":\n                                selectedObject.filters.push(// @ts-expect-error @types/fabric does not include HueRotation.\n                                new fabric.fabric.Image.filters.HueRotation({\n                                    rotation: filterValue\n                                }));\n                                break;\n                            case \"Saturation\":\n                                selectedObject.filters.push(new fabric.fabric.Image.filters.Saturation({\n                                    saturation: filterValue\n                                }));\n                                break;\n                            case \"Brightness\":\n                                selectedObject.filters.push(new fabric.fabric.Image.filters.Brightness({\n                                    brightness: filterValue\n                                }));\n                                break;\n                        }\n                    }\n                }\n                selectedObject.applyFilters();\n            }\n        }\n        setFilterChanges([]);\n        if (notifyChange) {\n            notifyChange();\n        }\n    }, [\n        filterChanges,\n        notifyChange\n    ]);\n    const lockSelection = (0,react.useCallback)(()=>{\n        if (selectedObjects.length) {\n            setLockedObjects((lockedObjects)=>{\n                const newLockedObjects = new Set(lockedObjects);\n                for (const selectedObject of selectedObjects){\n                    newLockedObjects.add(selectedObject);\n                    lockObject(selectedObject);\n                }\n                return newLockedObjects;\n            });\n        }\n    }, [\n        selectedObjects\n    ]);\n    const unlockSelection = (0,react.useCallback)(()=>{\n        if (selectedObjects.length) {\n            setLockedObjects((lockedObjects)=>{\n                const newLockedObjects = new Set(lockedObjects);\n                for (const selectedObject of selectedObjects){\n                    newLockedObjects.delete(selectedObject);\n                    unlockObject(selectedObject);\n                }\n                return newLockedObjects;\n            });\n        }\n    }, [\n        selectedObjects\n    ]);\n    const bringForward = (0,react.useCallback)(async ()=>{\n        const object = canvas.getActiveObject();\n        if (object) {\n            canvas.bringForward(object, true);\n            notifyChange();\n        }\n    }, [\n        canvas,\n        notifyChange\n    ]);\n    const sendBackward = (0,react.useCallback)(async ()=>{\n        const object = canvas.getActiveObject();\n        if (object) {\n            // Don't allow below base skin.\n            if (canvas._objects[0] === object || canvas._objects[1] === object) {\n                return;\n            }\n            canvas.sendBackwards(object, true);\n            notifyChange();\n        }\n    }, [\n        canvas,\n        notifyChange\n    ]);\n    const addImages = (0,react.useCallback)(async (imageUrls)=>{\n        let lastAddedImage;\n        for (const imageUrl of imageUrls){\n            const image = await createFabricImage(imageUrl);\n            if (!image.width || !image.height) {\n                throw new Error(\"Zero-height image\");\n            }\n            const widthRatio = image.width / textureSize[0];\n            const heightRatio = image.height / textureSize[1];\n            if (widthRatio > 1 || heightRatio > 1) {\n                let scale;\n                if (widthRatio > heightRatio) {\n                    scale = 1 / widthRatio;\n                } else {\n                    scale = 1 / heightRatio;\n                }\n                image.scaleX = scale;\n                image.scaleY = scale;\n            }\n            if (activeCanvasType === \"metallic\") {\n                if (!image.filters) {\n                    image.filters = [];\n                }\n                const grayscaleFilter = new fabric.fabric.Image.filters.Grayscale();\n                image.filters.push(grayscaleFilter);\n                image.applyFilters();\n            }\n            setDrawingMode(false);\n            canvas.centerObject(image);\n            canvas.add(image);\n            lastAddedImage = image;\n        }\n        if (lastAddedImage) {\n            canvas.setActiveObject(lastAddedImage);\n        }\n    }, [\n        canvas,\n        activeCanvasType,\n        textureSize\n    ]);\n    const duplicate = (0,react.useCallback)(async ()=>{\n        const object = canvas.getActiveObject();\n        if (object) {\n            const copy = await new Promise((resolve)=>object.clone(resolve));\n            var _copy_top, _copy_left;\n            copy.set({\n                top: ((_copy_top = copy.top) !== null && _copy_top !== void 0 ? _copy_top : 0) + 20,\n                left: ((_copy_left = copy.left) !== null && _copy_left !== void 0 ? _copy_left : 0) + 20,\n                evented: true\n            });\n            if (isActiveSelection(copy)) {\n                copy.canvas = canvas;\n                copy.forEachObject((object)=>{\n                    canvas.add(object);\n                });\n                copy.setCoords();\n            }\n            canvas.discardActiveObject();\n            canvas.add(copy);\n            canvas.setActiveObject(copy);\n        }\n    }, [\n        canvas\n    ]);\n    const deleteSelection = (0,react.useCallback)(async ()=>{\n        const objects = canvas.getActiveObjects();\n        canvas.discardActiveObject();\n        canvas.remove(...objects);\n        canvas.requestRenderAll();\n    // forceUpdateRef.current();\n    }, [\n        canvas\n    ]);\n    const exportSkin = (0,react.useCallback)(async (param)=>{\n        let { format , name =\"\"  } = param;\n        const { savePngFile , saveZipFile , createZipFile  } = await Promise.all(/* import() */[__webpack_require__.e(354), __webpack_require__.e(70)]).then(__webpack_require__.bind(__webpack_require__, 8070));\n        name = name.trim() || \"MyCustomSkin\";\n        const materialExports = await Promise.all(materialDefs.filter((materialDef)=>materialDef && !materialDef.hidden).map(async (materialDef)=>{\n            var _canvases_, _canvases_1;\n            const colorCanvas = (_canvases_ = canvases[\"\".concat(materialDef.name, \":color\")]) === null || _canvases_ === void 0 ? void 0 : _canvases_.canvas;\n            const metallicCanvas = (_canvases_1 = canvases[\"\".concat(materialDef.name, \":metallic\")]) === null || _canvases_1 === void 0 ? void 0 : _canvases_1.canvas;\n            var _materialDef_size;\n            const textureSize = (_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : [\n                512,\n                512\n            ];\n            let outputImageUrl;\n            const colorImageUrl = colorCanvas.toDataURL({\n                top: canvasPadding,\n                left: canvasPadding,\n                width: textureSize[0],\n                height: textureSize[1]\n            });\n            if (metallicCanvas) {\n                const metallicImageUrl = metallicCanvas.toDataURL({\n                    top: canvasPadding,\n                    left: canvasPadding,\n                    width: textureSize[0],\n                    height: textureSize[1]\n                });\n                outputImageUrl = await combineColorAndAlphaImageUrls({\n                    colorImageUrl,\n                    metallicImageUrl\n                });\n            } else {\n                outputImageUrl = colorImageUrl;\n            }\n            let filename;\n            switch(selectedModelType){\n                case \"player\":\n                    filename = \"\".concat(name, \".\").concat(actualModel, \".png\");\n                    break;\n                case \"weapon\":\n                case \"vehicle\":\n                    if (materialDef) {\n                        var _materialDef_file;\n                        filename = \"\".concat((_materialDef_file = materialDef.file) !== null && _materialDef_file !== void 0 ? _materialDef_file : materialDef.name, \".png\");\n                    } else if (selectedModelType === \"weapon\") {\n                        filename = \"weapon_\".concat(actualModel, \".png\");\n                    } else {\n                        filename = \"\".concat(actualModel, \".png\");\n                    }\n            }\n            return {\n                imageUrl: outputImageUrl,\n                filename\n            };\n        }));\n        switch(format){\n            case \"png\":\n                {\n                    const { imageUrl , filename  } = materialExports[selectedMaterialIndex];\n                    savePngFile(imageUrl, filename);\n                    break;\n                }\n            case \"vl2\":\n                {\n                    const files = await Promise.all(materialExports.map(async (materialExport)=>({\n                            data: await imageUrlToArrayBuffer(materialExport.imageUrl),\n                            name: materialExport.filename\n                        })));\n                    const zip = createZipFile(files);\n                    const camelCaseName = actualModel.replace(/(?:^([a-z])|_([a-z]))/g, (match, a, b)=>(a || b).toUpperCase());\n                    const zipFileName = selectedModelType === \"player\" ? \"zPlayerSkin-\".concat(name, \".vl2\") : \"zWeapon\".concat(camelCaseName, \"-\").concat(name, \".vl2\");\n                    await saveZipFile(zip, zipFileName);\n                }\n        }\n        return;\n    }, [\n        actualModel,\n        canvasPadding,\n        canvases,\n        combineColorAndAlphaImageUrls,\n        materialDefs,\n        selectedMaterialIndex,\n        selectedModelType\n    ]);\n    const context = (0,react.useMemo)(()=>({\n            activeCanvas,\n            activeCanvasType,\n            setActiveCanvasType,\n            backgroundColor,\n            setBackgroundColor,\n            lockedObjects,\n            setLockedObjects,\n            brushColor,\n            setBrushColor,\n            brushSize,\n            setBrushSize,\n            hueRotate,\n            setHueRotate,\n            saturation,\n            setSaturation,\n            brightness,\n            setBrightness,\n            selectedObjects,\n            lockSelection,\n            unlockSelection,\n            bringForward,\n            sendBackward,\n            addImages,\n            duplicate,\n            deleteSelection,\n            undo,\n            redo,\n            canUndo,\n            canRedo,\n            exportSkin,\n            isDrawingMode,\n            setDrawingMode,\n            selectedMaterialIndex,\n            setSelectedMaterialIndex,\n            textureSize,\n            hasMetallic\n        }), [\n        activeCanvas,\n        activeCanvasType,\n        backgroundColor,\n        lockedObjects,\n        brushColor,\n        brushSize,\n        hueRotate,\n        saturation,\n        brightness,\n        setHueRotate,\n        setSaturation,\n        setBrightness,\n        selectedObjects,\n        lockSelection,\n        unlockSelection,\n        bringForward,\n        sendBackward,\n        addImages,\n        duplicate,\n        deleteSelection,\n        undo,\n        redo,\n        canUndo,\n        canRedo,\n        exportSkin,\n        isDrawingMode,\n        selectedMaterialIndex,\n        textureSize,\n        hasMetallic\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas) {\n            const handleSelectionUpdated = ()=>{\n                setSelectedObjects(canvas.getActiveObjects());\n            };\n            canvas.on(\"selection:cleared\", handleSelectionUpdated);\n            canvas.on(\"selection:updated\", handleSelectionUpdated);\n            canvas.on(\"selection:created\", handleSelectionUpdated);\n            handleSelectionUpdated();\n            return ()=>{\n                canvas.off(\"selection:cleared\", handleSelectionUpdated);\n                canvas.off(\"selection:updated\", handleSelectionUpdated);\n                canvas.off(\"selection:created\", handleSelectionUpdated);\n            };\n        }\n    }, [\n        canvas\n    ]);\n    (0,react.useEffect)(()=>{\n        if (metallicCanvas) {\n            metallicCanvas.freeDrawingBrush.width = brushSize;\n        }\n    }, [\n        metallicCanvas,\n        brushSize\n    ]);\n    (0,react.useEffect)(()=>{\n        if (metallicCanvas) {\n            metallicCanvas.freeDrawingBrush.color = \"rgb(\".concat(brushColor, \", \").concat(brushColor, \", \").concat(brushColor, \")\");\n        }\n    }, [\n        metallicCanvas,\n        brushColor\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(ToolsContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CanvasBackdrop.tsx\n\n\n\nfunction CanvasBackdrop() {\n    const { backgroundColor , textureSize  } = useTools();\n    const { canvasPadding  } = useSettings();\n    return textureSize ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: \"CanvasBackdrop\",\n        style: {\n            backgroundColor,\n            top: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1]\n        }\n    }) : null;\n}\n\n;// CONCATENATED MODULE: ./src/CanvasProvider.tsx\n\n\n\nfunction CanvasProvider(param) {\n    let { children  } = param;\n    const [canvases, setCanvases] = (0,react.useState)({});\n    const registerCanvas = (0,react.useCallback)((canvasId, canvasInfo)=>{\n        setCanvases((canvases)=>{\n            return {\n                ...canvases,\n                [canvasId]: canvasInfo\n            };\n        });\n    }, []);\n    const unregisterCanvas = (0,react.useCallback)((canvasId)=>{\n        setCanvases((canvases)=>{\n            const { [canvasId]: canvas , ...rest } = canvases;\n            return rest;\n        });\n    }, []);\n    const context = (0,react.useMemo)(()=>{\n        return {\n            canvases,\n            registerCanvas,\n            unregisterCanvas\n        };\n    }, [\n        canvases,\n        registerCanvas,\n        unregisterCanvas\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CanvasInteractions.tsx\n\n\n\n\nfunction CanvasInteractions(param) {\n    let { children  } = param;\n    const ref = (0,react.useRef)(null);\n    const { activeCanvas , bringForward , sendBackward , duplicate , deleteSelection , addImages , undo , redo  } = useTools();\n    const { canvas , notifyChange , setDrawingMode  } = src_useCanvas(activeCanvas);\n    const nudge = async function() {\n        let { top =0 , left =0  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const objects = canvas.getActiveObjects();\n        for (const object of objects){\n            var _object_top;\n            object.top = ((_object_top = object.top) !== null && _object_top !== void 0 ? _object_top : 0) + top;\n            var _object_left;\n            object.left = ((_object_left = object.left) !== null && _object_left !== void 0 ? _object_left : 0) + left;\n        }\n        notifyChange();\n    };\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: \"CanvasInteractions\",\n        tabIndex: 0,\n        ref: ref,\n        onDrop: async (event)=>{\n            event.preventDefault();\n            if (ref.current) {\n                ref.current.focus();\n            }\n            const { items  } = event.dataTransfer;\n            const images = Array.from(items).filter((item)=>item.kind === \"file\" && item.type.match(/^image\\//));\n            const imageUrls = await Promise.all(images.map(async (droppedImageFile)=>{\n                const file = droppedImageFile.getAsFile();\n                if (!file) {\n                    throw new Error(\"Not a file.\");\n                }\n                const reader = new FileReader();\n                const imageUrl = await new Promise((resolve, reject)=>{\n                    reader.onload = async (event)=>{\n                        if (event.target && typeof event.target.result === \"string\") {\n                            resolve(event.target.result);\n                        } else {\n                            reject(new Error(\"Failed to load image data.\"));\n                        }\n                    };\n                    reader.readAsDataURL(file);\n                });\n                return imageUrl;\n            }).filter(Boolean));\n            await addImages(imageUrls);\n        },\n        onKeyDown: async (event)=>{\n            const target = event.target;\n            if (target.nodeName === \"INPUT\" || target.nodeName === \"TEXTAREA\") {\n                return;\n            }\n            if (event.ctrlKey || event.metaKey) {\n                switch(event.key){\n                    case \"z\":\n                        if (event.altKey) {\n                            return;\n                        } else if (event.shiftKey) {\n                            event.preventDefault();\n                            redo();\n                            return;\n                        } else {\n                            event.preventDefault();\n                            undo();\n                            return;\n                        }\n                    case \"y\":\n                        if (event.altKey || event.shiftKey) {\n                            return;\n                        } else {\n                            event.preventDefault();\n                            redo();\n                            return;\n                        }\n                }\n            }\n            if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n                return;\n            }\n            switch(event.key){\n                case \"Backspace\":\n                case \"Delete\":\n                    {\n                        event.preventDefault();\n                        await deleteSelection();\n                        break;\n                    }\n                case \"ArrowLeft\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            left: -1\n                        });\n                        break;\n                    }\n                case \"ArrowRight\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            left: 1\n                        });\n                        break;\n                    }\n                case \"ArrowUp\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            top: -1\n                        });\n                        break;\n                    }\n                case \"ArrowDown\":\n                    {\n                        event.preventDefault();\n                        await nudge({\n                            top: 1\n                        });\n                        break;\n                    }\n                case \"d\":\n                    {\n                        event.preventDefault();\n                        await duplicate();\n                        break;\n                    }\n                case \"f\":\n                    {\n                        event.preventDefault();\n                        await bringForward();\n                        break;\n                    }\n                case \"b\":\n                    {\n                        event.preventDefault();\n                        await sendBackward();\n                        break;\n                    }\n                case \"p\":\n                    {\n                        if (activeCanvas === \"metallic\") {\n                            event.preventDefault();\n                            setDrawingMode(true);\n                        }\n                        break;\n                    }\n                case \"s\":\n                    if (activeCanvas === \"color\") {\n                        event.preventDefault();\n                        setDrawingMode(false);\n                    }\n                    break;\n            }\n        },\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/CanvasToggle.tsx\n\n\nfunction CanvasToggle() {\n    const { activeCanvasType , setActiveCanvasType , hasMetallic  } = useTools();\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n        className: \"CanvasToggle\",\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                type: \"button\",\n                \"data-selected\": activeCanvasType === \"color\" ? \"\" : undefined,\n                onClick: ()=>{\n                    setActiveCanvasType(\"color\");\n                },\n                children: \"Color\"\n            }),\n            hasMetallic ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                type: \"button\",\n                \"data-selected\": activeCanvasType === \"metallic\" ? \"\" : undefined,\n                onClick: ()=>{\n                    setActiveCanvasType(\"metallic\");\n                },\n                children: \"Metallic\"\n            }) : null\n        ]\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/react-icons/ai/index.esm.js\nvar ai_index_esm = __webpack_require__(8193);\n;// CONCATENATED MODULE: ./src/WarriorSelector.tsx\n\n\n\n\n\n\nconst { publicRuntimeConfig: WarriorSelector_publicRuntimeConfig  } = config_default()();\nconst { defaultSkins , customSkins , modelDefaults , materials: WarriorSelector_materials  } = WarriorSelector_publicRuntimeConfig;\nfunction WarriorSelector() {\n    var _defaultSkins_actualModel, _customSkins_actualModel, _customSkins_actualModel1;\n    const { selectedModel , setSelectedModel , selectedModelType , setSelectedModelType , selectedSkin , setSelectedSkin , setSelectedSkinType , actualModel , setSelectedAnimation , setSkinImageUrls , setAnimationPaused  } = useWarrior();\n    const { selectedMaterialIndex , setSelectedMaterialIndex  } = useTools();\n    const materialDefs = WarriorSelector_materials[actualModel];\n    const materialDef = materialDefs[selectedMaterialIndex];\n    const fileInputRef = (0,react.useRef)(null);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n        className: \"Toolbar\",\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Field\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"ModelSelect\",\n                        children: \"Model\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                        id: \"ModelSelect\",\n                        value: selectedModel,\n                        onChange: (event)=>{\n                            var _defaultSkins_newSelectedModel, _customSkins_newSelectedModel;\n                            const parentNode = event.target.selectedOptions[0].parentNode;\n                            const newSelectedModel = event.target.value;\n                            const { modelType  } = parentNode.dataset;\n                            if (!modelType) {\n                                throw new Error(\"No data-model-type found\");\n                            }\n                            const newModelHasSkin = ((_defaultSkins_newSelectedModel = defaultSkins[newSelectedModel]) === null || _defaultSkins_newSelectedModel === void 0 ? void 0 : _defaultSkins_newSelectedModel.includes(selectedSkin)) || ((_customSkins_newSelectedModel = customSkins[newSelectedModel]) === null || _customSkins_newSelectedModel === void 0 ? void 0 : _customSkins_newSelectedModel.includes(selectedSkin)) || false;\n                            // startTransition(() => {\n                            setSelectedAnimation(null);\n                            setAnimationPaused(false);\n                            setSelectedModelType(modelType);\n                            setSelectedModel(newSelectedModel);\n                            setSelectedMaterialIndex(0);\n                            if (!newModelHasSkin) {\n                                var _modelDefaults_newSelectedModel;\n                                setSelectedSkin((_modelDefaults_newSelectedModel = modelDefaults[newSelectedModel]) !== null && _modelDefaults_newSelectedModel !== void 0 ? _modelDefaults_newSelectedModel : null);\n                                setSelectedSkinType(\"default\");\n                            }\n                        // });\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"optgroup\", {\n                                label: \"Players\",\n                                \"data-model-type\": \"player\",\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"lmale\",\n                                        children: \"Human Male • Light\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mmale\",\n                                        children: \"Human Male • Medium\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"hmale\",\n                                        children: \"Human Male • Heavy\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"lfemale\",\n                                        children: \"Human Female • Light\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mfemale\",\n                                        children: \"Human Female • Medium\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"hfemale\",\n                                        children: \"Human Female • Heavy\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"lbioderm\",\n                                        children: \"Bioderm • Light\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mbioderm\",\n                                        children: \"Bioderm • Medium\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"hbioderm\",\n                                        children: \"Bioderm • Heavy\"\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"optgroup\", {\n                                label: \"Weapons\",\n                                \"data-model-type\": \"weapon\",\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"disc\",\n                                        children: \"Disc Launcher\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"chaingun\",\n                                        children: \"Chaingun\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"grenade_launcher\",\n                                        children: \"Grenade Launcher\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"sniper\",\n                                        children: \"Laser Rifle\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"energy\",\n                                        children: \"Blaster\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"shocklance\",\n                                        children: \"Shocklance\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"elf\",\n                                        children: \"ELF Projector\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"missile\",\n                                        children: \"Missile Launcher\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"mortar\",\n                                        children: \"Mortar\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"repair\",\n                                        children: \"Repair Pack\"\n                                    }),\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"targeting\",\n                                        children: \"Targeting Laser\"\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                label: \"Vehicles\",\n                                \"data-model-type\": \"vehicle\",\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                    value: \"vehicle_air_scout\",\n                                    children: \"Shrike\"\n                                })\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Field\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                        htmlFor: \"SkinSelect\",\n                        children: \"Skin\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                        className: \"Buttons\",\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                                id: \"SkinSelect\",\n                                value: selectedSkin !== null && selectedSkin !== void 0 ? selectedSkin : \"\",\n                                onChange: async (event)=>{\n                                    const parentNode = event.target.selectedOptions[0].parentNode;\n                                    var _parentNode_dataset_skinType;\n                                    const skinType = event.target.value ? (_parentNode_dataset_skinType = parentNode.dataset.skinType) !== null && _parentNode_dataset_skinType !== void 0 ? _parentNode_dataset_skinType : null : null;\n                                    setSelectedSkin(event.target.value || null);\n                                    setSelectedSkinType(skinType);\n                                },\n                                children: [\n                                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                        value: \"\",\n                                        children: \"Select a skin…\"\n                                    }),\n                                    selectedModelType === \"player\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                                        children: [\n                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Default Skins\",\n                                                \"data-skin-type\": \"default\",\n                                                children: (_defaultSkins_actualModel = defaultSkins[actualModel]) === null || _defaultSkins_actualModel === void 0 ? void 0 : _defaultSkins_actualModel.map((name)=>{\n                                                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                        value: name,\n                                                        children: name\n                                                    }, name);\n                                                })\n                                            }),\n                                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Custom Skins\",\n                                                \"data-skin-type\": \"custom\",\n                                                children: (_customSkins_actualModel = customSkins[actualModel]) === null || _customSkins_actualModel === void 0 ? void 0 : _customSkins_actualModel.map((name)=>{\n                                                    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                        value: name,\n                                                        children: name\n                                                    }, name);\n                                                })\n                                            })\n                                        ]\n                                    }) : null,\n                                    selectedModelType === \"weapon\" || selectedModelType === \"vehicle\" ? /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n                                        children: [\n                                            modelDefaults[actualModel] ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Default Skins\",\n                                                \"data-skin-type\": \"default\",\n                                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                    value: modelDefaults[actualModel],\n                                                    children: \"Default\"\n                                                })\n                                            }) : null,\n                                            ((_customSkins_actualModel1 = customSkins[actualModel]) === null || _customSkins_actualModel1 === void 0 ? void 0 : _customSkins_actualModel1.length) ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"optgroup\", {\n                                                label: \"Custom Skins\",\n                                                \"data-skin-type\": \"custom\",\n                                                children: customSkins[actualModel].map((name)=>/*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                                        value: name,\n                                                        children: name\n                                                    }, name))\n                                            }) : null\n                                        ]\n                                    }) : null\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                                type: \"button\",\n                                \"aria-label\": \"Load Skin\",\n                                title: \"Load a Skin\",\n                                onClick: ()=>{\n                                    if (fileInputRef.current) {\n                                        fileInputRef.current.click();\n                                    }\n                                },\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(ai_index_esm/* AiTwotoneFolderOpen */.FjK, {\n                                    style: {\n                                        fontSize: 18\n                                    }\n                                })\n                            }),\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"input\", {\n                                ref: fileInputRef,\n                                onChange: async (event)=>{\n                                    const imageUrl = await new Promise((resolve, reject)=>{\n                                        var _event_target_files;\n                                        const inputFile = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n                                        if (inputFile) {\n                                            const reader = new FileReader();\n                                            reader.addEventListener(\"load\", (event)=>{\n                                                var _event_target;\n                                                resolve((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result);\n                                            });\n                                            reader.readAsDataURL(inputFile);\n                                        } else {\n                                            reject(new Error(\"No input file provided.\"));\n                                        }\n                                    });\n                                    setSelectedSkin(null);\n                                    setSkinImageUrls({\n                                        [materialDef.name]: imageUrl\n                                    });\n                                },\n                                type: \"file\",\n                                accept: \".png, image/png\",\n                                hidden: true\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n;// CONCATENATED MODULE: ./src/WarriorProvider.tsx\n\n\n\n\n\nconst { publicRuntimeConfig: WarriorProvider_publicRuntimeConfig  } = config_default()();\nconst { materials: WarriorProvider_materials , modelDefaults: WarriorProvider_modelDefaults  } = WarriorProvider_publicRuntimeConfig;\nconst baseSkinPath = \"https://exogen.github.io/t2-skins/skins\";\nfunction getSkinImageUrls(param) {\n    let { basePath , actualModel , selectedModelType , selectedSkin , selectedSkinType  } = param;\n    const materialDefs = WarriorProvider_materials[actualModel];\n    switch(selectedModelType){\n        case \"player\":\n            switch(selectedSkinType){\n                case \"default\":\n                    return {\n                        base: \"\".concat(basePath, \"/textures/\").concat(selectedSkin, \".\").concat(actualModel, \".png\")\n                    };\n                case \"custom\":\n                    return {\n                        base: \"\".concat(baseSkinPath, \"/\").concat(selectedSkin, \".\").concat(actualModel, \".png\")\n                    };\n            }\n            break;\n        case \"weapon\":\n        case \"vehicle\":\n            return materialDefs.reduce((skinImageUrls, materialDef)=>{\n                if (materialDef) {\n                    switch(selectedSkinType){\n                        case \"default\":\n                            if (materialDef.hasDefault !== false) {\n                                var _materialDef_file;\n                                skinImageUrls[materialDef.name] = \"\".concat(basePath, \"/textures/\").concat((_materialDef_file = materialDef.file) !== null && _materialDef_file !== void 0 ? _materialDef_file : materialDef.name, \".png\");\n                            }\n                            break;\n                        case \"custom\":\n                            var _materialDef_file1;\n                            skinImageUrls[materialDef.name] = \"\".concat(baseSkinPath, \"/\").concat(selectedSkin, \"/\").concat((_materialDef_file1 = materialDef.file) !== null && _materialDef_file1 !== void 0 ? _materialDef_file1 : materialDef.name, \".png\");\n                            break;\n                    }\n                }\n                return skinImageUrls;\n            }, {});\n    }\n    return {};\n}\nfunction getModelUrl(basePath, actualModel, selectedAnimation) {\n    switch(actualModel){\n        default:\n            return \"\".concat(basePath, \"/\").concat(actualModel).concat(selectedAnimation ? \".anim\" : \"\", \".glb\");\n    }\n}\nfunction WarriorProvider(param) {\n    let { children  } = param;\n    const [selectedModel, setSelectedModel] = (0,react.useState)(\"lmale\");\n    const [selectedModelType, setSelectedModelType] = (0,react.useState)(\"player\");\n    const [selectedSkin, setSelectedSkin] = (0,react.useState)(\"Blood Eagle\");\n    const [selectedSkinType, setSelectedSkinType] = (0,react.useState)(\"default\");\n    const [selectedAnimation, setSelectedAnimation] = (0,react.useState)(null);\n    const [animationPaused, setAnimationPaused] = (0,react.useState)(false);\n    const { basePath  } = useSettings();\n    const actualModel = selectedModel === \"hfemale\" ? \"hmale\" : selectedModel;\n    const selectedModelUrl = getModelUrl(basePath, actualModel, selectedAnimation);\n    const [skinImageUrls, setSkinImageUrls] = (0,react.useState)(()=>getSkinImageUrls({\n            basePath,\n            actualModel,\n            selectedModelType,\n            selectedSkin,\n            selectedSkinType\n        }));\n    const defaultSkinImageUrls = (0,react.useMemo)(()=>getSkinImageUrls({\n            basePath,\n            actualModel,\n            selectedModelType,\n            selectedSkin: WarriorProvider_modelDefaults[actualModel],\n            selectedSkinType: \"default\"\n        }), [\n        actualModel,\n        basePath,\n        selectedModelType\n    ]);\n    const context = (0,react.useMemo)(()=>{\n        return {\n            selectedModel,\n            setSelectedModel,\n            selectedModelType,\n            setSelectedModelType,\n            actualModel,\n            selectedModelUrl,\n            animationPaused,\n            setAnimationPaused,\n            selectedSkin,\n            setSelectedSkin,\n            selectedSkinType,\n            setSelectedSkinType,\n            selectedAnimation,\n            setSelectedAnimation,\n            skinImageUrls,\n            setSkinImageUrls,\n            defaultSkinImageUrls\n        };\n    }, [\n        selectedModel,\n        setSelectedModel,\n        selectedModelType,\n        setSelectedModelType,\n        actualModel,\n        selectedModelUrl,\n        animationPaused,\n        setAnimationPaused,\n        selectedSkin,\n        setSelectedSkin,\n        selectedSkinType,\n        setSelectedSkinType,\n        selectedAnimation,\n        setSelectedAnimation,\n        skinImageUrls,\n        setSkinImageUrls,\n        defaultSkinImageUrls\n    ]);\n    (0,react.useEffect)(()=>{\n        if (selectedSkin) {\n            setSkinImageUrls(getSkinImageUrls({\n                basePath,\n                actualModel,\n                selectedModelType,\n                selectedSkin,\n                selectedSkinType\n            }));\n        }\n    }, [\n        basePath,\n        actualModel,\n        selectedModelType,\n        selectedSkin,\n        selectedSkinType\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/next/dynamic.js\nvar dynamic = __webpack_require__(5152);\nvar dynamic_default = /*#__PURE__*/__webpack_require__.n(dynamic);\n;// CONCATENATED MODULE: ./src/useEnvironment.ts\n\nconst EnvironmentContext = react.createContext(null);\nEnvironmentContext.displayName = \"EnvironmentContext\";\n\nfunction useEnvironment() {\n    const context = (0,react.useContext)(EnvironmentContext);\n    if (!context) {\n        throw new Error(\"No EnvironmentContext.Provider\");\n    }\n    return context;\n}\n\n;// CONCATENATED MODULE: ./src/useSkin.ts\n\nconst SkinContext = react.createContext(null);\nSkinContext.displayName = \"SkinContext\";\n\nfunction useSkin() {\n    const context = (0,react.useContext)(SkinContext);\n    if (!context) {\n        throw new Error(\"No SkinContext.Provider\");\n    }\n    return context;\n}\n\n// EXTERNAL MODULE: ./src/useModelViewer.ts\nvar useModelViewer = __webpack_require__(8496);\n;// CONCATENATED MODULE: ./src/Material.tsx\n\n\n\n\nfunction useTexture(param) {\n    let { material , materialDef , textureType , imageUrl  } = param;\n    const { modelViewer  } = (0,useModelViewer/* default */.Z)();\n    const { basePath  } = useSettings();\n    (0,react.useEffect)(()=>{\n        let stale = false;\n        const updateTexture = async ()=>{\n            if (!materialDef || materialDef.hidden) {\n                if (textureType === \"metallicRoughnessTexture\") {\n                    return;\n                } else {\n                    material.setAlphaMode(\"BLEND\");\n                    material.pbrMetallicRoughness.setBaseColorFactor([\n                        0,\n                        0,\n                        0,\n                        0\n                    ]);\n                }\n            } else {\n                const { alphaMode , alphaCutoff , baseColorFactor , emissiveFactor , emissiveTexture =false , metallicFactor =1 , roughnessFactor =1  } = materialDef;\n                let textureUrl = imageUrl !== null && imageUrl !== void 0 ? imageUrl : \"\".concat(basePath, \"/white.png\");\n                switch(textureType){\n                    case \"baseColorTexture\":\n                        if (baseColorFactor) {\n                            material.pbrMetallicRoughness.setBaseColorFactor(baseColorFactor);\n                        }\n                        if (alphaMode) {\n                            material.setAlphaMode(alphaMode);\n                        }\n                        if (alphaCutoff) {\n                            material.setAlphaCutoff(alphaCutoff);\n                        }\n                        if (emissiveFactor) {\n                            material.setEmissiveFactor(emissiveFactor);\n                        }\n                        break;\n                    case \"metallicRoughnessTexture\":\n                        material.pbrMetallicRoughness.setMetallicFactor(metallicFactor);\n                        material.pbrMetallicRoughness.setRoughnessFactor(roughnessFactor);\n                        if (metallicFactor === 0 && roughnessFactor === 1) {\n                            textureUrl = \"\".concat(basePath, \"/green.png\");\n                        }\n                }\n                const texture = await modelViewer.createTexture(textureUrl);\n                if (!stale) {\n                    material.pbrMetallicRoughness[textureType].setTexture(texture);\n                    if (textureType === \"baseColorTexture\" && emissiveTexture) {\n                        material.emissiveTexture.setTexture(texture);\n                    }\n                }\n            }\n        };\n        updateTexture();\n        return ()=>{\n            stale = true;\n        };\n    }, [\n        basePath,\n        modelViewer,\n        material,\n        materialDef,\n        textureType,\n        imageUrl\n    ]);\n}\nfunction Material(param) {\n    let { material , materialDef  } = param;\n    const { getSkinImages  } = useSkin();\n    var _getSkinImages;\n    const { colorImageUrl , metallicImageUrl  } = (_getSkinImages = getSkinImages(material.name)) !== null && _getSkinImages !== void 0 ? _getSkinImages : {};\n    useTexture({\n        material,\n        materialDef,\n        textureType: \"baseColorTexture\",\n        imageUrl: colorImageUrl\n    });\n    useTexture({\n        material,\n        materialDef,\n        textureType: \"metallicRoughnessTexture\",\n        imageUrl: metallicImageUrl\n    });\n    return null;\n}\n\n;// CONCATENATED MODULE: ./src/Materials.tsx\n\n\n\n\n\nconst { publicRuntimeConfig: Materials_publicRuntimeConfig  } = config_default()();\nconst { materials: Materials_materials  } = Materials_publicRuntimeConfig;\nfunction Materials() {\n    const { actualModel  } = useWarrior();\n    const { model  } = (0,useModelViewer/* default */.Z)();\n    const materialDefs = Materials_materials[actualModel];\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, {\n        children: model.materials.map((material, i)=>{\n            var _materialDefs_find;\n            const materialDef = (_materialDefs_find = materialDefs.find((materialDef)=>materialDef.index === i)) !== null && _materialDefs_find !== void 0 ? _materialDefs_find : materialDefs[i];\n            return /*#__PURE__*/ (0,jsx_runtime.jsx)(Material, {\n                material: material,\n                materialDef: materialDef\n            }, material.name);\n        })\n    });\n}\n\n;// CONCATENATED MODULE: ./src/WarriorViewer.tsx\n\n\n\n\n\n\nconst ModelViewer = dynamic_default()(()=>Promise.all(/* import() */[__webpack_require__.e(737), __webpack_require__.e(258), __webpack_require__.e(990)]).then(__webpack_require__.bind(__webpack_require__, 85)), {\n    loadableGenerated: {\n        webpack: ()=>[\n                /*require.resolve*/(85)\n            ]\n    },\n    ssr: false\n});\nconst { publicRuntimeConfig: WarriorViewer_publicRuntimeConfig  } = config_default()();\nconst { cameraOverrides  } = WarriorViewer_publicRuntimeConfig;\nfunction WarriorViewer() {\n    var _cameraOverrides_selectedModel, _cameraOverrides_selectedModel1;\n    const { selectedModel , selectedModelUrl , selectedModelType , selectedAnimation , animationPaused  } = useWarrior();\n    const { environmentImageUrl  } = useEnvironment();\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(ModelViewer, {\n        modelUrl: selectedModelUrl,\n        environmentImageUrl: environmentImageUrl,\n        animationName: selectedAnimation,\n        animationPaused: animationPaused,\n        cameraOrbit: selectedModelType === \"weapon\" ? \"315deg 70deg 105%\" : undefined,\n        cameraTarget: (_cameraOverrides_selectedModel = cameraOverrides[selectedModel]) === null || _cameraOverrides_selectedModel === void 0 ? void 0 : _cameraOverrides_selectedModel.target,\n        fieldOfView: (_cameraOverrides_selectedModel1 = cameraOverrides[selectedModel]) === null || _cameraOverrides_selectedModel1 === void 0 ? void 0 : _cameraOverrides_selectedModel1.fov,\n        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(Materials, {})\n    });\n}\n\n;// CONCATENATED MODULE: ./src/EnvironmentSelector.tsx\n\n\nfunction EnvironmentSelector() {\n    const { selectedEnvironment , setSelectedEnvironment  } = useEnvironment();\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                htmlFor: \"EnvMapSelect\",\n                children: \"Environment\"\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                id: \"EnvMapSelect\",\n                value: selectedEnvironment !== null && selectedEnvironment !== void 0 ? selectedEnvironment : \"\",\n                onChange: (event)=>{\n                    setSelectedEnvironment(event.target.value || null);\n                },\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"\",\n                        children: \"Default\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"clarens_night_02_1k.hdr\",\n                        children: \"Clarens Night\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"dry_cracked_lake_1k.hdr\",\n                        children: \"Dry Cracked Lake\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"fouriesburg_mountain_midday_1k.hdr\",\n                        children: \"Fouriesburg Mountain\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"goegap_1k.hdr\",\n                        children: \"Goegap\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"hilly_terrain_01_1k.hdr\",\n                        children: \"Hilly Terrain\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"kloofendal_48d_partly_cloudy_puresky_1k.hdr\",\n                        children: \"Kloofendal Partly Cloudy\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"kloppenheim_06_puresky_1k.hdr\",\n                        children: \"Kloppenheim\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"lilienstein_1k.hdr\",\n                        children: \"Lilienstein\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"spruit_sunrise_1k_HDR.hdr\",\n                        children: \"Spruit Sunrise\"\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                        value: \"umhlanga_sunrise_1k.hdr\",\n                        children: \"Umhlanga Sunrise\"\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n;// CONCATENATED MODULE: ./src/AnimationSelector.tsx\n\n\n\n\n\nconst { publicRuntimeConfig: AnimationSelector_publicRuntimeConfig  } = config_default()();\nconst { animations , animationLabels , animationLabelOverrides  } = AnimationSelector_publicRuntimeConfig;\nfunction AnimationSelector() {\n    const { actualModel , selectedModelType , selectedAnimation , setSelectedAnimation , animationPaused , setAnimationPaused  } = useWarrior();\n    var _animations_actualModel;\n    const animationList = (0,react.useMemo)(()=>[\n            ...selectedModelType === \"player\" ? animations.global : [],\n            ...(_animations_actualModel = animations[actualModel]) !== null && _animations_actualModel !== void 0 ? _animations_actualModel : []\n        ], [\n        actualModel,\n        selectedModelType\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"label\", {\n                children: \"Animation\"\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                className: \"Buttons\",\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"select\", {\n                        value: selectedAnimation !== null && selectedAnimation !== void 0 ? selectedAnimation : \"\",\n                        onChange: (event)=>{\n                            setSelectedAnimation(event.target.value || null);\n                            setAnimationPaused(false);\n                        },\n                        children: [\n                            /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                value: \"\",\n                                children: \"None\"\n                            }),\n                            animationList.map((animationName)=>{\n                                var _animationLabelOverrides_actualModel;\n                                var _animationLabelOverrides_actualModel_animationName;\n                                const label = (_animationLabelOverrides_actualModel_animationName = (_animationLabelOverrides_actualModel = animationLabelOverrides[actualModel]) === null || _animationLabelOverrides_actualModel === void 0 ? void 0 : _animationLabelOverrides_actualModel[animationName]) !== null && _animationLabelOverrides_actualModel_animationName !== void 0 ? _animationLabelOverrides_actualModel_animationName : animationLabels[animationName];\n                                return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                                    value: animationName,\n                                    children: label !== null && label !== void 0 ? label : animationName\n                                }, animationName);\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(\"button\", {\n                        type: \"button\",\n                        disabled: !selectedAnimation,\n                        onClick: ()=>{\n                            setAnimationPaused((animationPaused)=>!animationPaused);\n                        },\n                        children: animationPaused || !selectedAnimation ? /*#__PURE__*/ (0,jsx_runtime.jsx)(io_index_esm/* IoMdPlay */.v$e, {}) : /*#__PURE__*/ (0,jsx_runtime.jsx)(io_index_esm/* IoMdPause */.IWN, {})\n                    })\n                ]\n            })\n        ]\n    });\n}\n\n;// CONCATENATED MODULE: ./src/EnvironmentProvider.tsx\n\n\n\n\nfunction EnvironmentProvider(param) {\n    let { children  } = param;\n    const [selectedEnvironment, setSelectedEnvironment] = (0,react.useState)(null);\n    const { basePath  } = useSettings();\n    const context = (0,react.useMemo)(()=>{\n        const environmentImageUrl = selectedEnvironment ? \"\".concat(basePath, \"/\").concat(selectedEnvironment) : null;\n        return {\n            selectedEnvironment,\n            setSelectedEnvironment,\n            environmentImageUrl\n        };\n    }, [\n        basePath,\n        selectedEnvironment,\n        setSelectedEnvironment\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(EnvironmentContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/SkinProvider.tsx\n\n\n\nfunction SkinProvider(param) {\n    let { children  } = param;\n    const [materialSkins, setMaterialSkins] = (0,react.useState)({});\n    const setters = (0,react.useMemo)(()=>({\n            setSkinImages (materialName, skinImages) {\n                setMaterialSkins((materialSkins)=>{\n                    return {\n                        ...materialSkins,\n                        [materialName]: skinImages\n                    };\n                });\n            },\n            setColorImageUrl (materialName, colorImageUrl) {\n                setMaterialSkins((materialSkins)=>{\n                    return {\n                        ...materialSkins,\n                        [materialName]: {\n                            ...materialSkins[materialName],\n                            colorImageUrl\n                        }\n                    };\n                });\n            },\n            setMetallicImageUrl (materialName, metallicImageUrl) {\n                setMaterialSkins((materialSkins)=>{\n                    return {\n                        ...materialSkins,\n                        [materialName]: {\n                            ...materialSkins[materialName],\n                            metallicImageUrl\n                        }\n                    };\n                });\n            }\n        }), []);\n    const context = (0,react.useMemo)(()=>{\n        return {\n            materialSkins,\n            getSkinImages (materialName) {\n                return materialSkins[materialName];\n            },\n            getColorImageUrl (materialName) {\n                return materialSkins[materialName].colorImageUrl;\n            },\n            getMetallicImageUrl (materialName) {\n                return materialSkins[materialName].metallicImageUrl;\n            },\n            ...setters\n        };\n    }, [\n        materialSkins,\n        setters\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(SkinContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n;// CONCATENATED MODULE: ./src/MaterialSelector.tsx\n\n\n\n\nconst { publicRuntimeConfig: MaterialSelector_publicRuntimeConfig  } = config_default()();\nconst { materials: MaterialSelector_materials  } = MaterialSelector_publicRuntimeConfig;\nfunction MaterialSelector() {\n    const { actualModel  } = useWarrior();\n    const { selectedMaterialIndex , setSelectedMaterialIndex  } = useTools();\n    const materialDefs = MaterialSelector_materials[actualModel];\n    var _materialDef_label;\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"select\", {\n        value: selectedMaterialIndex,\n        onChange: (event)=>{\n            setSelectedMaterialIndex(parseInt(event.target.value, 10));\n        },\n        children: materialDefs.map((materialDef, i)=>materialDef && !materialDef.hidden ? /*#__PURE__*/ (0,jsx_runtime.jsx)(\"option\", {\n                value: i,\n                children: (_materialDef_label = materialDef.label) !== null && _materialDef_label !== void 0 ? _materialDef_label : materialDef.name\n            }, materialDef.name) : null)\n    });\n}\n\n;// CONCATENATED MODULE: ./src/Canvas.tsx\n\n\n\n\n\n\n\nfunction updateObjectControlOptions() {\n    fabric.fabric.Object.prototype.set({\n        transparentCorners: false,\n        borderColor: \"#8afff1\",\n        cornerSize: 9,\n        cornerStyle: \"circle\",\n        cornerColor: \"#8afff1\",\n        cornerStrokeColor: \"#1c9f7c\",\n        strokeWidth: 10,\n        perPixelTargetFind: true\n    });\n}\nfunction Canvas(param) {\n    let { canvasId , onChange , baseImageUrl , textureSize , defaultDrawingMode =false  } = param;\n    const canvasElementRef = (0,react.useRef)(null);\n    const [canvas, setCanvas] = (0,react.useState)(null);\n    const { activeCanvas  } = useTools();\n    const { canvasPadding  } = useSettings();\n    const { registerCanvas , unregisterCanvas  } = src_useCanvas();\n    const [isDrawingMode, setDrawingMode] = (0,react.useState)(defaultDrawingMode);\n    const handleChangeRef = (0,react.useRef)();\n    const trackChanges = (0,react.useRef)(true);\n    const [undoHistory, setUndoHistory] = (0,react.useState)(()=>[]);\n    const [redoHistory, setRedoHistory] = (0,react.useState)(()=>[]);\n    const canUndo = undoHistory.length > 1;\n    const canRedo = redoHistory.length > 0;\n    const handleChange = (0,react.useCallback)((canvas)=>{\n        const handleChange = handleChangeRef.current;\n        if (handleChange) {\n            handleChange(canvas);\n        }\n    }, []);\n    const undo = (0,react.useCallback)(async ()=>{\n        if (!canvas) {\n            return;\n        }\n        if (undoHistory.length > 1) {\n            const [restoreState, currentState] = undoHistory.slice(-2);\n            trackChanges.current = false;\n            canvas.renderOnAddRemove = false;\n            canvas.clear();\n            canvas.loadFromJSON(restoreState, ()=>{\n                canvas.renderAll();\n                trackChanges.current = true;\n                canvas.renderOnAddRemove = true;\n            });\n            setUndoHistory((undoHistory)=>undoHistory.slice(0, -1));\n            setRedoHistory((redoHistory)=>[\n                    currentState,\n                    ...redoHistory\n                ]);\n        }\n    }, [\n        canvas,\n        undoHistory\n    ]);\n    const redo = (0,react.useCallback)(()=>{\n        if (!canvas) {\n            return;\n        }\n        if (redoHistory.length > 0) {\n            const nextState = redoHistory[0];\n            trackChanges.current = false;\n            canvas.renderOnAddRemove = false;\n            canvas.clear();\n            canvas.loadFromJSON(nextState, ()=>{\n                canvas.renderAll();\n                trackChanges.current = true;\n                canvas.renderOnAddRemove = true;\n            });\n            setUndoHistory((undoHistory)=>[\n                    ...undoHistory,\n                    nextState\n                ]);\n            setRedoHistory((redoHistory)=>redoHistory.slice(1));\n        }\n    }, [\n        canvas,\n        redoHistory\n    ]);\n    (0,react.useEffect)(()=>{\n        handleChangeRef.current = onChange;\n    }, [\n        onChange\n    ]);\n    const isActive = activeCanvas === canvasId;\n    (0,react.useEffect)(()=>{\n        const options = {\n            preserveObjectStacking: true,\n            targetFindTolerance: 2\n        };\n        updateObjectControlOptions();\n        const canvas = new fabric.fabric.Canvas(canvasElementRef.current, options);\n        let isSnapshotting = false;\n        let changeTimer;\n        const handleChangeWithCanvasArg = ()=>{\n            handleChange(canvas);\n        };\n        const handleRender = ()=>{\n            if (isSnapshotting) {\n                return;\n            }\n            if (!trackChanges.current) {\n                return;\n            }\n            clearTimeout(changeTimer);\n            changeTimer = setTimeout(()=>{\n                const snapshot = snapshotCanvas();\n                setUndoHistory((history)=>[\n                        ...history.slice(-5),\n                        snapshot\n                    ]);\n                setRedoHistory([]);\n            }, 150);\n        };\n        const snapshotCanvas = ()=>{\n            isSnapshotting = true;\n            const snapshot = canvas.toJSON([\n                \"lockMovementX\",\n                \"lockMovementY\",\n                \"lockRotation\",\n                \"lockScalingX\",\n                \"lockScalingY\",\n                \"selectable\",\n                \"hoverCursor\",\n                \"moveCursor\"\n            ]);\n            isSnapshotting = false;\n            return snapshot;\n        };\n        canvas.on(\"object:modified\", handleChangeWithCanvasArg);\n        canvas.on(\"object:added\", handleChangeWithCanvasArg);\n        canvas.on(\"object:removed\", handleChangeWithCanvasArg);\n        canvas.on(\"after:render\", handleRender);\n        setCanvas(canvas);\n        return ()=>{\n            clearTimeout(changeTimer);\n            setCanvas(null);\n            canvas.dispose();\n        };\n    }, [\n        handleChange\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas) {\n            canvas.isDrawingMode = isDrawingMode;\n        }\n    }, [\n        canvas,\n        isDrawingMode\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas && isActive) {\n            canvas.calcOffset();\n        }\n    }, [\n        canvas,\n        isActive\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas) {\n            registerCanvas(canvasId, {\n                canvas,\n                notifyChange: ()=>{\n                    canvas.renderAll();\n                    handleChange(canvas);\n                },\n                undo,\n                redo,\n                canUndo,\n                canRedo,\n                isDrawingMode,\n                setDrawingMode\n            });\n            return ()=>{\n                unregisterCanvas(canvasId);\n            };\n        }\n    }, [\n        canvas,\n        registerCanvas,\n        unregisterCanvas,\n        canvasId,\n        handleChange,\n        isDrawingMode,\n        setDrawingMode,\n        undo,\n        redo,\n        canUndo,\n        canRedo\n    ]);\n    (0,react.useEffect)(()=>{\n        if (canvas && textureSize) {\n            trackChanges.current = false;\n            canvas.clear();\n            if (baseImageUrl) {\n                let stale = false;\n                const addImage = async ()=>{\n                    const image = await createFabricImage(baseImageUrl);\n                    if (!stale) {\n                        if (!image.width || !image.height) {\n                            throw new Error(\"Zero-height image\");\n                        }\n                        image.selectable = false;\n                        image.lockMovementX = true;\n                        image.lockMovementY = true;\n                        image.lockScalingX = true;\n                        image.lockScalingY = true;\n                        image.lockRotation = true;\n                        image.hoverCursor = \"default\";\n                        image.moveCursor = \"default\";\n                        const [expectedWidth, expectedHeight] = textureSize;\n                        const scaleX = image.width === expectedWidth ? 1 : expectedWidth / image.width;\n                        const scaleY = image.height === expectedHeight ? 1 : expectedHeight / image.height;\n                        if (scaleX !== 1 || scaleY !== 1) {\n                            image.scaleX = scaleX;\n                            image.scaleY = scaleY;\n                        }\n                        canvas.centerObject(image);\n                        canvas.add(image);\n                    }\n                    trackChanges.current = true;\n                    canvas.requestRenderAll();\n                };\n                addImage();\n                return ()=>{\n                    stale = true;\n                };\n            }\n        }\n    }, [\n        canvas,\n        baseImageUrl,\n        textureSize\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n        className: \"CanvasContainer\",\n        \"data-active\": isActive ? \"true\" : \"false\",\n        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"canvas\", {\n            width: textureSize[0] + canvasPadding * 2,\n            height: textureSize[1] + canvasPadding * 2,\n            ref: canvasElementRef\n        })\n    });\n}\n\n;// CONCATENATED MODULE: ./src/useImageLoader.ts\n\nconst ImageLoaderContext = react.createContext(null);\nImageLoaderContext.displayName = \"ImageLoaderContext\";\nfunction useImageLoader() {\n    const context = (0,react.useContext)(ImageLoaderContext);\n    if (!context) {\n        throw new Error(\"ImageLoaderContext.Provider not found!\");\n    }\n    return context;\n}\n\n;// CONCATENATED MODULE: ./src/ColorCanvas.tsx\n\n\n\n\n\n\n\n\nconst defaultTextureSize = [\n    512,\n    512\n];\nfunction ColorCanvas(param) {\n    let { materialDef  } = param;\n    const { skinImageUrls , defaultSkinImageUrls  } = useWarrior();\n    const skinImageUrl = skinImageUrls[materialDef.name];\n    const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\n    const { setColorImageUrl  } = useSkin();\n    const { canvasPadding  } = useSettings();\n    const [noAlphaImageUrl, setNoAlphaImageUrl] = (0,react.useState)(null);\n    const { removeAlphaFromArrayBuffer  } = useImageWorker();\n    const { loadImage  } = useImageLoader();\n    var _materialDef_size;\n    const textureSize = (0,react.useMemo)(()=>(_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : defaultTextureSize, [\n        materialDef\n    ]);\n    const handleChange = (0,react.useCallback)(async (canvas)=>{\n        const imageUrl = canvas.toDataURL({\n            top: canvasPadding,\n            left: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1]\n        });\n        setColorImageUrl(materialDef.name, imageUrl);\n    }, [\n        textureSize,\n        canvasPadding,\n        setColorImageUrl,\n        materialDef\n    ]);\n    (0,react.useEffect)(()=>{\n        if (skinImageUrl) {\n            let stale = false;\n            const generateImageUrl = async ()=>{\n                let arrayBuffer;\n                try {\n                    arrayBuffer = await loadImage(skinImageUrl);\n                } catch (err) {\n                    if (materialDef.hasDefault !== false) {\n                        arrayBuffer = await loadImage(defaultSkinImageUrl);\n                    } else {\n                        return;\n                    }\n                }\n                const outputImageUrl = await removeAlphaFromArrayBuffer(arrayBuffer);\n                if (!stale) {\n                    setNoAlphaImageUrl(outputImageUrl);\n                }\n            };\n            generateImageUrl();\n            return ()=>{\n                stale = true;\n            };\n        } else {\n            setNoAlphaImageUrl(null);\n        }\n    }, [\n        materialDef,\n        skinImageUrl,\n        defaultSkinImageUrl,\n        removeAlphaFromArrayBuffer,\n        loadImage\n    ]);\n    const canvasId = \"\".concat(materialDef.name, \":color\");\n    return textureSize ? /*#__PURE__*/ (0,jsx_runtime.jsx)(Canvas, {\n        canvasId: canvasId,\n        canvasType: \"color\",\n        onChange: handleChange,\n        baseImageUrl: noAlphaImageUrl,\n        textureSize: textureSize\n    }, canvasId) : null;\n}\n\n;// CONCATENATED MODULE: ./src/MetallicCanvas.tsx\n\n\n\n\n\n\n\n\nconst MetallicCanvas_defaultTextureSize = [\n    512,\n    512\n];\nfunction MetallicCanvas(param) {\n    let { materialDef  } = param;\n    const { skinImageUrls , defaultSkinImageUrls  } = useWarrior();\n    const skinImageUrl = skinImageUrls[materialDef.name];\n    const defaultSkinImageUrl = defaultSkinImageUrls[materialDef.name];\n    const { setMetallicImageUrl  } = useSkin();\n    const { canvasPadding  } = useSettings();\n    const [alphaImageUrl, setAlphaImageUrl] = (0,react.useState)(null);\n    const runningChangeHandlers = (0,react.useRef)(0);\n    const { convertGrayscaleImageUrlToMetallicRoughness , convertArrayBufferAlphaToGrayscale  } = useImageWorker();\n    const { loadImage  } = useImageLoader();\n    var _materialDef_size;\n    const textureSize = (0,react.useMemo)(()=>(_materialDef_size = materialDef.size) !== null && _materialDef_size !== void 0 ? _materialDef_size : MetallicCanvas_defaultTextureSize, [\n        materialDef\n    ]);\n    const handleChange = (0,react.useCallback)(async (canvas)=>{\n        runningChangeHandlers.current += 1;\n        const imageUrl = canvas.toDataURL({\n            top: canvasPadding,\n            left: canvasPadding,\n            width: textureSize[0],\n            height: textureSize[1]\n        });\n        let outputImageUrl;\n        try {\n            outputImageUrl = await convertGrayscaleImageUrlToMetallicRoughness(imageUrl);\n        } finally{\n            runningChangeHandlers.current -= 1;\n        }\n        if (runningChangeHandlers.current === 0) {\n            setMetallicImageUrl(materialDef.name, outputImageUrl);\n        }\n    }, [\n        textureSize,\n        canvasPadding,\n        setMetallicImageUrl,\n        convertGrayscaleImageUrlToMetallicRoughness,\n        materialDef\n    ]);\n    (0,react.useEffect)(()=>{\n        if (skinImageUrl) {\n            let stale = false;\n            const generateImageUrl = async ()=>{\n                let arrayBuffer;\n                try {\n                    arrayBuffer = await loadImage(skinImageUrl);\n                } catch (err) {\n                    if (materialDef.hasDefault !== false) {\n                        arrayBuffer = await loadImage(defaultSkinImageUrl);\n                    } else {\n                        return;\n                    }\n                }\n                const outputImageUrl = await convertArrayBufferAlphaToGrayscale(arrayBuffer);\n                if (!stale) {\n                    setAlphaImageUrl(outputImageUrl);\n                }\n            };\n            generateImageUrl();\n            return ()=>{\n                stale = true;\n            };\n        } else {\n            setAlphaImageUrl(null);\n        }\n    }, [\n        materialDef,\n        skinImageUrl,\n        defaultSkinImageUrl,\n        textureSize,\n        convertArrayBufferAlphaToGrayscale,\n        loadImage\n    ]);\n    const canvasId = \"\".concat(materialDef.name, \":metallic\");\n    return textureSize ? /*#__PURE__*/ (0,jsx_runtime.jsx)(Canvas, {\n        canvasId: canvasId,\n        canvasType: \"metallic\",\n        onChange: handleChange,\n        baseImageUrl: alphaImageUrl,\n        textureSize: textureSize,\n        defaultDrawingMode: true\n    }, canvasId) : null;\n}\n\n;// CONCATENATED MODULE: ./src/MaterialCanvases.tsx\n\n\n\n\n\n\nconst { publicRuntimeConfig: MaterialCanvases_publicRuntimeConfig  } = config_default()();\nconst { materials: MaterialCanvases_materials  } = MaterialCanvases_publicRuntimeConfig;\nfunction MaterialCanvases() {\n    const { actualModel  } = useWarrior();\n    const materialDefs = MaterialCanvases_materials[actualModel];\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(jsx_runtime.Fragment, {\n        children: materialDefs.map((materialDef)=>{\n            if (!materialDef) {\n                return null;\n            }\n            const hasMetallic = !(materialDef.metallicFactor === 0 && materialDef.roughnessFactor === 1);\n            return /*#__PURE__*/ (0,jsx_runtime.jsxs)(react.Fragment, {\n                children: [\n                    /*#__PURE__*/ (0,jsx_runtime.jsx)(ColorCanvas, {\n                        materialDef: materialDef\n                    }),\n                    hasMetallic ? /*#__PURE__*/ (0,jsx_runtime.jsx)(MetallicCanvas, {\n                        materialDef: materialDef\n                    }) : null\n                ]\n            }, \"\".concat(actualModel, \"-\").concat(materialDef.name));\n        })\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\nvar QueryClientProvider = __webpack_require__(5945);\n;// CONCATENATED MODULE: ./src/ImageLoaderProvider.tsx\n\n\n\n\n\nfunction ImageLoaderProvider(param) {\n    let { children  } = param;\n    const queryClient = (0,QueryClientProvider/* useQueryClient */.NL)();\n    const context = (0,react.useMemo)(()=>{\n        return {\n            async loadImage (imageUrl) {\n                if (imageUrl.startsWith(\"data:\")) {\n                    return imageUrlToArrayBuffer(imageUrl);\n                } else {\n                    const arrayBuffer = await queryClient.fetchQuery({\n                        queryKey: [\n                            imageUrl\n                        ]\n                    });\n                    return arrayBuffer;\n                }\n            }\n        };\n    }, [\n        queryClient\n    ]);\n    return /*#__PURE__*/ (0,jsx_runtime.jsx)(ImageLoaderContext.Provider, {\n        value: context,\n        children: children\n    });\n}\n\n// EXTERNAL MODULE: ./node_modules/@tanstack/query-core/build/lib/queryClient.mjs + 13 modules\nvar queryClient = __webpack_require__(8709);\n;// CONCATENATED MODULE: ./src/pages/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function imageFetcher(param) {\n    let { queryKey  } = param;\n    const [imageUrl] = queryKey;\n    return imageUrlToArrayBuffer(imageUrl);\n}\nconst pages_queryClient = new queryClient/* QueryClient */.S({\n    defaultOptions: {\n        queries: {\n            queryFn: imageFetcher,\n            staleTime: Infinity,\n            cacheTime: 60000,\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false\n        }\n    }\n});\nfunction HomePage() {\n    return /*#__PURE__*/ (0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,jsx_runtime.jsx)((head_default()), {\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"title\", {\n                    children: \"T2 Model Viewer & Skinner\"\n                })\n            }),\n            /*#__PURE__*/ (0,jsx_runtime.jsx)(QueryClientProvider/* QueryClientProvider */.aH, {\n                client: pages_queryClient,\n                children: /*#__PURE__*/ (0,jsx_runtime.jsx)(\"main\", {\n                    children: /*#__PURE__*/ (0,jsx_runtime.jsx)(ImageLoaderProvider, {\n                        children: /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorProvider, {\n                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(EnvironmentProvider, {\n                                children: /*#__PURE__*/ (0,jsx_runtime.jsxs)(SkinProvider, {\n                                    children: [\n                                        /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                            className: \"Viewport\",\n                                            children: [\n                                                /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                    className: \"ModelTools\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                            className: \"Field\",\n                                                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(EnvironmentSelector, {})\n                                                        }),\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(\"div\", {\n                                                            className: \"Field\",\n                                                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(AnimationSelector, {})\n                                                        })\n                                                    ]\n                                                }),\n                                                /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorViewer, {})\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasProvider, {\n                                            children: /*#__PURE__*/ (0,jsx_runtime.jsx)(ToolsProvider, {\n                                                children: /*#__PURE__*/ (0,jsx_runtime.jsxs)(CanvasInteractions, {\n                                                    children: [\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(WarriorSelector, {}),\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                            className: \"CanvasViewport\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,jsx_runtime.jsxs)(\"div\", {\n                                                                    className: \"CanvasSelector\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasToggle, {}),\n                                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(MaterialSelector, {})\n                                                                    ]\n                                                                }),\n                                                                /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasBackdrop, {}),\n                                                                /*#__PURE__*/ (0,jsx_runtime.jsx)(MaterialCanvases, {})\n                                                            ]\n                                                        }),\n                                                        /*#__PURE__*/ (0,jsx_runtime.jsx)(CanvasTools, {})\n                                                    ]\n                                                })\n                                            })\n                                        })\n                                    ]\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        ]\n    });\n}\n\n\n/***/ }),\n\n/***/ 8496:\n/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"K\": function() { return /* binding */ ModelViewerContext; },\n/* harmony export */   \"Z\": function() { return /* binding */ useModelViewer; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\nconst ModelViewerContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nModelViewerContext.displayName = \"ModelViewerContext\";\nfunction useModelViewer() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ModelViewerContext);\n    if (!context) {\n        throw new Error(\"No ModelViewerContext.Provider\");\n    }\n    return context;\n}\n\n\n/***/ }),\n\n/***/ 6287:\n/***/ (function(__unused_webpack_module, exports, __webpack_require__) {\n\n/* provided dependency */ var Buffer = __webpack_require__(1876)[\"Buffer\"];\n/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */ var fabric = fabric || {\n    version: \"5.2.1\"\n};\nif (true) {\n    exports.fabric = fabric;\n} else {}\n/* _AMD_END_ */ if (typeof document !== \"undefined\" && \"object\" !== \"undefined\") {\n    if (document instanceof (typeof HTMLDocument !== \"undefined\" ? HTMLDocument : Document)) {\n        fabric.document = document;\n    } else {\n        fabric.document = document.implementation.createHTMLDocument(\"\");\n    }\n    fabric.window = window;\n} else {\n    // assume we're running under node.js when document/window are not present\n    var jsdom = __webpack_require__(6734);\n    var virtualWindow = new jsdom.JSDOM(decodeURIComponent(\"%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\"), {\n        features: {\n            FetchExternalResources: [\n                \"img\"\n            ]\n        },\n        resources: \"usable\"\n    }).window;\n    fabric.document = virtualWindow.document;\n    fabric.jsdomImplForWrapper = (__webpack_require__(6907).implForWrapper);\n    fabric.nodeCanvas = (__webpack_require__(4866).Canvas);\n    fabric.window = virtualWindow;\n    DOMParser = fabric.window.DOMParser;\n}\n/**\r\n * True when in environment that supports touch events\r\n * @type boolean\r\n */ fabric.isTouchSupported = \"ontouchstart\" in fabric.window || \"ontouchstart\" in fabric.document || fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0;\n/**\r\n * True when in environment that's probably Node.js\r\n * @type boolean\r\n */ fabric.isLikelyNode = typeof Buffer !== \"undefined\" && \"object\" === \"undefined\";\n/**\r\n * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.\r\n */ fabric.DPI = 96;\nfabric.reNum = \"(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)\";\nfabric.commaWsp = \"(?:\\\\s+,?\\\\s*|,\\\\s*)\";\nfabric.rePathCommand = /([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/ig;\nfabric.reNonWord = /[ \\n\\.,;!\\?\\-]/;\nfabric.fontPaths = {};\nfabric.iMatrix = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n];\nfabric.svgNS = \"http://www.w3.org/2000/svg\";\n/**\r\n * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.\r\n * @since 1.7.14\r\n * @type Number\r\n * @default\r\n */ fabric.perfLimitSizeTotal = 2097152;\n/**\r\n * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000\r\n * @since 1.7.14\r\n * @type Number\r\n * @default\r\n */ fabric.maxCacheSideLimit = 4096;\n/**\r\n * Lowest pixel limit for cache canvases, set at 256PX\r\n * @since 1.7.14\r\n * @type Number\r\n * @default\r\n */ fabric.minCacheSideLimit = 256;\n/**\r\n * Cache Object for widths of chars in text rendering.\r\n */ fabric.charWidthsCache = {};\n/**\r\n * if webgl is enabled and available, textureSize will determine the size\r\n * of the canvas backend\r\n * @since 2.0.0\r\n * @type Number\r\n * @default\r\n */ fabric.textureSize = 2048;\n/**\r\n * When 'true', style information is not retained when copy/pasting text, making\r\n * pasted text use destination style.\r\n * Defaults to 'false'.\r\n * @type Boolean\r\n * @default\r\n */ fabric.disableStyleCopyPaste = false;\n/**\r\n * Enable webgl for filtering picture is available\r\n * A filtering backend will be initialized, this will both take memory and\r\n * time since a default 2048x2048 canvas will be created for the gl context\r\n * @since 2.0.0\r\n * @type Boolean\r\n * @default\r\n */ fabric.enableGLFiltering = true;\n/**\r\n * Device Pixel Ratio\r\n * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html\r\n */ fabric.devicePixelRatio = fabric.window.devicePixelRatio || fabric.window.webkitDevicePixelRatio || fabric.window.mozDevicePixelRatio || 1;\n/**\r\n * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,\r\n * which is unitless and not rendered equally across browsers.\r\n *\r\n * Values that work quite well (as of October 2017) are:\r\n * - Chrome: 1.5\r\n * - Edge: 1.75\r\n * - Firefox: 0.9\r\n * - Safari: 0.95\r\n *\r\n * @since 2.0.0\r\n * @type Number\r\n * @default 1\r\n */ fabric.browserShadowBlurConstant = 1;\n/**\r\n * This object contains the result of arc to bezier conversion for faster retrieving if the same arc needs to be converted again.\r\n * It was an internal variable, is accessible since version 2.3.4\r\n */ fabric.arcToSegmentsCache = {};\n/**\r\n * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.\r\n * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing\r\n * you do not get any speed benefit and you get a big object in memory.\r\n * The object was a private variable before, while now is appended to the lib so that you have access to it and you\r\n * can eventually clear it.\r\n * It was an internal variable, is accessible since version 2.3.4\r\n */ fabric.boundsOfCurveCache = {};\n/**\r\n * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better\r\n * @default true\r\n */ fabric.cachesBoundsOfCurve = true;\n/**\r\n * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on\r\n * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true\r\n * this has to be set before instantiating the filtering backend ( before filtering the first image )\r\n * @type Boolean\r\n * @default false\r\n */ fabric.forceGLPutImageData = false;\nfabric.initFilterBackend = function() {\n    if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {\n        console.log(\"max texture size: \" + fabric.maxTextureSize);\n        return new fabric.WebglFilterBackend({\n            tileSize: fabric.textureSize\n        });\n    } else if (fabric.Canvas2dFilterBackend) {\n        return new fabric.Canvas2dFilterBackend();\n    }\n};\n(function() {\n    /**\r\n   * @private\r\n   * @param {String} eventName\r\n   * @param {Function} handler\r\n   */ function _removeEventListener(eventName, handler) {\n        if (!this.__eventListeners[eventName]) {\n            return;\n        }\n        var eventListener = this.__eventListeners[eventName];\n        if (handler) {\n            eventListener[eventListener.indexOf(handler)] = false;\n        } else {\n            fabric.util.array.fill(eventListener, false);\n        }\n    }\n    /**\r\n   * Observes specified event\r\n   * @memberOf fabric.Observable\r\n   * @alias on\r\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n   * @param {Function} handler Function that receives a notification when an event of the specified type occurs\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ function on(eventName, handler) {\n        if (!this.__eventListeners) {\n            this.__eventListeners = {};\n        }\n        // one object with key/value pairs was passed\n        if (arguments.length === 1) {\n            for(var prop in eventName){\n                this.on(prop, eventName[prop]);\n            }\n        } else {\n            if (!this.__eventListeners[eventName]) {\n                this.__eventListeners[eventName] = [];\n            }\n            this.__eventListeners[eventName].push(handler);\n        }\n        return this;\n    }\n    function _once(eventName, handler) {\n        var _handler = (function() {\n            handler.apply(this, arguments);\n            this.off(eventName, _handler);\n        }).bind(this);\n        this.on(eventName, _handler);\n    }\n    function once(eventName, handler) {\n        // one object with key/value pairs was passed\n        if (arguments.length === 1) {\n            for(var prop in eventName){\n                _once.call(this, prop, eventName[prop]);\n            }\n        } else {\n            _once.call(this, eventName, handler);\n        }\n        return this;\n    }\n    /**\r\n   * Stops event observing for a particular event handler. Calling this method\r\n   * without arguments removes all handlers for all events\r\n   * @memberOf fabric.Observable\r\n   * @alias off\r\n   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})\r\n   * @param {Function} handler Function to be deleted from EventListeners\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ function off(eventName, handler) {\n        if (!this.__eventListeners) {\n            return this;\n        }\n        // remove all key/value pairs (event name -> event handler)\n        if (arguments.length === 0) {\n            for(eventName in this.__eventListeners){\n                _removeEventListener.call(this, eventName);\n            }\n        } else if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n            for(var prop in eventName){\n                _removeEventListener.call(this, prop, eventName[prop]);\n            }\n        } else {\n            _removeEventListener.call(this, eventName, handler);\n        }\n        return this;\n    }\n    /**\r\n   * Fires event with an optional options object\r\n   * @memberOf fabric.Observable\r\n   * @param {String} eventName Event name to fire\r\n   * @param {Object} [options] Options object\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ function fire(eventName, options) {\n        if (!this.__eventListeners) {\n            return this;\n        }\n        var listenersForEvent = this.__eventListeners[eventName];\n        if (!listenersForEvent) {\n            return this;\n        }\n        for(var i = 0, len = listenersForEvent.length; i < len; i++){\n            listenersForEvent[i] && listenersForEvent[i].call(this, options || {});\n        }\n        this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {\n            return value !== false;\n        });\n        return this;\n    }\n    /**\r\n   * @namespace fabric.Observable\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}\r\n   * @see {@link http://fabricjs.com/events|Events demo}\r\n   */ fabric.Observable = {\n        fire: fire,\n        on: on,\n        once: once,\n        off: off\n    };\n})();\n/**\r\n * @namespace fabric.Collection\r\n */ fabric.Collection = {\n    _objects: [],\n    /**\r\n   * Adds objects to collection, Canvas or Group, then renders canvas\r\n   * (if `renderOnAddRemove` is not `false`).\r\n   * in case of Group no changes to bounding box are made.\r\n   * Objects should be instances of (or inherit from) fabric.Object\r\n   * Use of this function is highly discouraged for groups.\r\n   * you can add a bunch of objects with the add method but then you NEED\r\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n   * @param {...fabric.Object} object Zero or more fabric instances\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ add: function() {\n        this._objects.push.apply(this._objects, arguments);\n        if (this._onObjectAdded) {\n            for(var i = 0, length = arguments.length; i < length; i++){\n                this._onObjectAdded(arguments[i]);\n            }\n        }\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n    },\n    /**\r\n   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n   * An object should be an instance of (or inherit from) fabric.Object\r\n   * Use of this function is highly discouraged for groups.\r\n   * you can add a bunch of objects with the insertAt method but then you NEED\r\n   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.\r\n   * @param {Object} object Object to insert\r\n   * @param {Number} index Index to insert object at\r\n   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ insertAt: function(object, index, nonSplicing) {\n        var objects = this._objects;\n        if (nonSplicing) {\n            objects[index] = object;\n        } else {\n            objects.splice(index, 0, object);\n        }\n        this._onObjectAdded && this._onObjectAdded(object);\n        this.renderOnAddRemove && this.requestRenderAll();\n        return this;\n    },\n    /**\r\n   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)\r\n   * @param {...fabric.Object} object Zero or more fabric instances\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ remove: function() {\n        var objects = this._objects, index, somethingRemoved = false;\n        for(var i = 0, length = arguments.length; i < length; i++){\n            index = objects.indexOf(arguments[i]);\n            // only call onObjectRemoved if an object was actually removed\n            if (index !== -1) {\n                somethingRemoved = true;\n                objects.splice(index, 1);\n                this._onObjectRemoved && this._onObjectRemoved(arguments[i]);\n            }\n        }\n        this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();\n        return this;\n    },\n    /**\r\n   * Executes given function for each object in this group\r\n   * @param {Function} callback\r\n   *                   Callback invoked with current object as first argument,\r\n   *                   index - as second and an array of all objects - as third.\r\n   *                   Callback is invoked in a context of Global Object (e.g. `window`)\r\n   *                   when no `context` argument is given\r\n   *\r\n   * @param {Object} context Context (aka thisObject)\r\n   * @return {Self} thisArg\r\n   * @chainable\r\n   */ forEachObject: function(callback, context) {\n        var objects = this.getObjects();\n        for(var i = 0, len = objects.length; i < len; i++){\n            callback.call(context, objects[i], i, objects);\n        }\n        return this;\n    },\n    /**\r\n   * Returns an array of children objects of this instance\r\n   * Type parameter introduced in 1.3.10\r\n   * since 2.3.5 this method return always a COPY of the array;\r\n   * @param {String} [type] When specified, only objects of this type are returned\r\n   * @return {Array}\r\n   */ getObjects: function(type) {\n        if (typeof type === \"undefined\") {\n            return this._objects.concat();\n        }\n        return this._objects.filter(function(o) {\n            return o.type === type;\n        });\n    },\n    /**\r\n   * Returns object at specified index\r\n   * @param {Number} index\r\n   * @return {Self} thisArg\r\n   */ item: function(index) {\n        return this._objects[index];\n    },\n    /**\r\n   * Returns true if collection contains no objects\r\n   * @return {Boolean} true if collection is empty\r\n   */ isEmpty: function() {\n        return this._objects.length === 0;\n    },\n    /**\r\n   * Returns a size of a collection (i.e: length of an array containing its objects)\r\n   * @return {Number} Collection size\r\n   */ size: function() {\n        return this._objects.length;\n    },\n    /**\r\n   * Returns true if collection contains an object\r\n   * @param {Object} object Object to check against\r\n   * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`\r\n   * @return {Boolean} `true` if collection contains an object\r\n   */ contains: function(object, deep) {\n        if (this._objects.indexOf(object) > -1) {\n            return true;\n        } else if (deep) {\n            return this._objects.some(function(obj) {\n                return typeof obj.contains === \"function\" && obj.contains(object, true);\n            });\n        }\n        return false;\n    },\n    /**\r\n   * Returns number representation of a collection complexity\r\n   * @return {Number} complexity\r\n   */ complexity: function() {\n        return this._objects.reduce(function(memo, current) {\n            memo += current.complexity ? current.complexity() : 0;\n            return memo;\n        }, 0);\n    }\n};\n/**\r\n * @namespace fabric.CommonMethods\r\n */ fabric.CommonMethods = {\n    /**\r\n   * Sets object's properties from options\r\n   * @param {Object} [options] Options object\r\n   */ _setOptions: function(options) {\n        for(var prop in options){\n            this.set(prop, options[prop]);\n        }\n    },\n    /**\r\n   * @private\r\n   * @param {Object} [filler] Options object\r\n   * @param {String} [property] property to set the Gradient to\r\n   */ _initGradient: function(filler, property) {\n        if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {\n            this.set(property, new fabric.Gradient(filler));\n        }\n    },\n    /**\r\n   * @private\r\n   * @param {Object} [filler] Options object\r\n   * @param {String} [property] property to set the Pattern to\r\n   * @param {Function} [callback] callback to invoke after pattern load\r\n   */ _initPattern: function(filler, property, callback) {\n        if (filler && filler.source && !(filler instanceof fabric.Pattern)) {\n            this.set(property, new fabric.Pattern(filler, callback));\n        } else {\n            callback && callback();\n        }\n    },\n    /**\r\n   * @private\r\n   */ _setObject: function(obj) {\n        for(var prop in obj){\n            this._set(prop, obj[prop]);\n        }\n    },\n    /**\r\n   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n   * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ set: function(key, value) {\n        if (typeof key === \"object\") {\n            this._setObject(key);\n        } else {\n            this._set(key, value);\n        }\n        return this;\n    },\n    _set: function(key, value) {\n        this[key] = value;\n    },\n    /**\r\n   * Toggles specified property from `true` to `false` or from `false` to `true`\r\n   * @param {String} property Property to toggle\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ toggle: function(property) {\n        var value = this.get(property);\n        if (typeof value === \"boolean\") {\n            this.set(property, !value);\n        }\n        return this;\n    },\n    /**\r\n   * Basic getter\r\n   * @param {String} property Property name\r\n   * @return {*} value of a property\r\n   */ get: function(property) {\n        return this[property];\n    }\n};\n(function(global) {\n    var sqrt = Math.sqrt, atan2 = Math.atan2, pow = Math.pow, PiBy180 = Math.PI / 180, PiBy2 = Math.PI / 2;\n    /**\r\n   * @namespace fabric.util\r\n   */ fabric.util = {\n        /**\r\n     * Calculate the cos of an angle, avoiding returning floats for known results\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} angle the angle in radians or in degree\r\n     * @return {Number}\r\n     */ cos: function(angle) {\n            if (angle === 0) {\n                return 1;\n            }\n            if (angle < 0) {\n                // cos(a) = cos(-a)\n                angle = -angle;\n            }\n            var angleSlice = angle / PiBy2;\n            switch(angleSlice){\n                case 1:\n                case 3:\n                    return 0;\n                case 2:\n                    return -1;\n            }\n            return Math.cos(angle);\n        },\n        /**\r\n     * Calculate the sin of an angle, avoiding returning floats for known results\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} angle the angle in radians or in degree\r\n     * @return {Number}\r\n     */ sin: function(angle) {\n            if (angle === 0) {\n                return 0;\n            }\n            var angleSlice = angle / PiBy2, sign = 1;\n            if (angle < 0) {\n                // sin(-a) = -sin(a)\n                sign = -1;\n            }\n            switch(angleSlice){\n                case 1:\n                    return sign;\n                case 2:\n                    return 0;\n                case 3:\n                    return -sign;\n            }\n            return Math.sin(angle);\n        },\n        /**\r\n     * Removes value from an array.\r\n     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} array\r\n     * @param {*} value\r\n     * @return {Array} original array\r\n     */ removeFromArray: function(array, value) {\n            var idx = array.indexOf(value);\n            if (idx !== -1) {\n                array.splice(idx, 1);\n            }\n            return array;\n        },\n        /**\r\n     * Returns random number between 2 specified ones.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} min lower limit\r\n     * @param {Number} max upper limit\r\n     * @return {Number} random value (between min and max)\r\n     */ getRandomInt: function(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        },\n        /**\r\n     * Transforms degrees to radians.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} degrees value in degrees\r\n     * @return {Number} value in radians\r\n     */ degreesToRadians: function(degrees) {\n            return degrees * PiBy180;\n        },\n        /**\r\n     * Transforms radians to degrees.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number} radians value in radians\r\n     * @return {Number} value in degrees\r\n     */ radiansToDegrees: function(radians) {\n            return radians / PiBy180;\n        },\n        /**\r\n     * Rotates `point` around `origin` with `radians`\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Point} point The point to rotate\r\n     * @param {fabric.Point} origin The origin of the rotation\r\n     * @param {Number} radians The radians of the angle for the rotation\r\n     * @return {fabric.Point} The new rotated point\r\n     */ rotatePoint: function(point, origin, radians) {\n            var newPoint = new fabric.Point(point.x - origin.x, point.y - origin.y), v = fabric.util.rotateVector(newPoint, radians);\n            return new fabric.Point(v.x, v.y).addEquals(origin);\n        },\n        /**\r\n     * Rotates `vector` with `radians`\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Object} vector The vector to rotate (x and y)\r\n     * @param {Number} radians The radians of the angle for the rotation\r\n     * @return {Object} The new rotated point\r\n     */ rotateVector: function(vector, radians) {\n            var sin = fabric.util.sin(radians), cos = fabric.util.cos(radians), rx = vector.x * cos - vector.y * sin, ry = vector.x * sin + vector.y * cos;\n            return {\n                x: rx,\n                y: ry\n            };\n        },\n        /**\r\n     * Creates a vetor from points represented as a point\r\n     * @static\r\n     * @memberOf fabric.util\r\n     *\r\n     * @typedef {Object} Point\r\n     * @property {number} x\r\n     * @property {number} y\r\n     *\r\n     * @param {Point} from\r\n     * @param {Point} to\r\n     * @returns {Point} vector\r\n     */ createVector: function(from, to) {\n            return new fabric.Point(to.x - from.x, to.y - from.y);\n        },\n        /**\r\n     * Calculates angle between 2 vectors using dot product\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point} a\r\n     * @param {Point} b\r\n     * @returns the angle in radian between the vectors\r\n     */ calcAngleBetweenVectors: function(a, b) {\n            return Math.acos((a.x * b.x + a.y * b.y) / (Math.hypot(a.x, a.y) * Math.hypot(b.x, b.y)));\n        },\n        /**\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point} v\r\n     * @returns {Point} vector representing the unit vector of pointing to the direction of `v`\r\n     */ getHatVector: function(v) {\n            return new fabric.Point(v.x, v.y).multiply(1 / Math.hypot(v.x, v.y));\n        },\n        /**\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point} A\r\n     * @param {Point} B\r\n     * @param {Point} C\r\n     * @returns {{ vector: Point, angle: number }} vector representing the bisector of A and A's angle\r\n     */ getBisector: function(A, B, C) {\n            var AB = fabric.util.createVector(A, B), AC = fabric.util.createVector(A, C);\n            var alpha = fabric.util.calcAngleBetweenVectors(AB, AC);\n            //  check if alpha is relative to AB->BC\n            var ro = fabric.util.calcAngleBetweenVectors(fabric.util.rotateVector(AB, alpha), AC);\n            var phi = alpha * (ro === 0 ? 1 : -1) / 2;\n            return {\n                vector: fabric.util.getHatVector(fabric.util.rotateVector(AB, phi)),\n                angle: alpha\n            };\n        },\n        /**\r\n     * Project stroke width on points returning 2 projections for each point as follows:\r\n     * - `miter`: 2 points corresponding to the outer boundary and the inner boundary of stroke.\r\n     * - `bevel`: 2 points corresponding to the bevel boundaries, tangent to the bisector.\r\n     * - `round`: same as `bevel`\r\n     * Used to calculate object's bounding box\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Point[]} points\r\n     * @param {Object} options\r\n     * @param {number} options.strokeWidth\r\n     * @param {'miter'|'bevel'|'round'} options.strokeLineJoin\r\n     * @param {number} options.strokeMiterLimit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit\r\n     * @param {boolean} options.strokeUniform\r\n     * @param {number} options.scaleX\r\n     * @param {number} options.scaleY\r\n     * @param {boolean} [openPath] whether the shape is open or not, affects the calculations of the first and last points\r\n     * @returns {fabric.Point[]} array of size 2n/4n of all suspected points\r\n     */ projectStrokeOnPoints: function(points, options, openPath) {\n            var coords = [], s = options.strokeWidth / 2, strokeUniformScalar = options.strokeUniform ? new fabric.Point(1 / options.scaleX, 1 / options.scaleY) : new fabric.Point(1, 1), getStrokeHatVector = function(v) {\n                var scalar = s / Math.hypot(v.x, v.y);\n                return new fabric.Point(v.x * scalar * strokeUniformScalar.x, v.y * scalar * strokeUniformScalar.y);\n            };\n            if (points.length <= 1) {\n                return coords;\n            }\n            points.forEach(function(p, index) {\n                var A = new fabric.Point(p.x, p.y), B, C;\n                if (index === 0) {\n                    C = points[index + 1];\n                    B = openPath ? getStrokeHatVector(fabric.util.createVector(C, A)).addEquals(A) : points[points.length - 1];\n                } else if (index === points.length - 1) {\n                    B = points[index - 1];\n                    C = openPath ? getStrokeHatVector(fabric.util.createVector(B, A)).addEquals(A) : points[0];\n                } else {\n                    B = points[index - 1];\n                    C = points[index + 1];\n                }\n                var bisector = fabric.util.getBisector(A, B, C), bisectorVector = bisector.vector, alpha = bisector.angle, scalar, miterVector;\n                if (options.strokeLineJoin === \"miter\") {\n                    scalar = -s / Math.sin(alpha / 2);\n                    miterVector = new fabric.Point(bisectorVector.x * scalar * strokeUniformScalar.x, bisectorVector.y * scalar * strokeUniformScalar.y);\n                    if (Math.hypot(miterVector.x, miterVector.y) / s <= options.strokeMiterLimit) {\n                        coords.push(A.add(miterVector));\n                        coords.push(A.subtract(miterVector));\n                        return;\n                    }\n                }\n                scalar = -s * Math.SQRT2;\n                miterVector = new fabric.Point(bisectorVector.x * scalar * strokeUniformScalar.x, bisectorVector.y * scalar * strokeUniformScalar.y);\n                coords.push(A.add(miterVector));\n                coords.push(A.subtract(miterVector));\n            });\n            return coords;\n        },\n        /**\r\n     * Apply transform t to point p\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {fabric.Point} p The point to transform\r\n     * @param  {Array} t The transform\r\n     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied\r\n     * @return {fabric.Point} The transformed point\r\n     */ transformPoint: function(p, t, ignoreOffset) {\n            if (ignoreOffset) {\n                return new fabric.Point(t[0] * p.x + t[2] * p.y, t[1] * p.x + t[3] * p.y);\n            }\n            return new fabric.Point(t[0] * p.x + t[2] * p.y + t[4], t[1] * p.x + t[3] * p.y + t[5]);\n        },\n        /**\r\n     * Returns coordinates of points's bounding rectangle (left, top, width, height)\r\n     * @param {Array} points 4 points array\r\n     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix\r\n     * @return {Object} Object with left, top, width, height properties\r\n     */ makeBoundingBoxFromPoints: function(points, transform) {\n            if (transform) {\n                for(var i = 0; i < points.length; i++){\n                    points[i] = fabric.util.transformPoint(points[i], transform);\n                }\n            }\n            var xPoints = [\n                points[0].x,\n                points[1].x,\n                points[2].x,\n                points[3].x\n            ], minX = fabric.util.array.min(xPoints), maxX = fabric.util.array.max(xPoints), width = maxX - minX, yPoints = [\n                points[0].y,\n                points[1].y,\n                points[2].y,\n                points[3].y\n            ], minY = fabric.util.array.min(yPoints), maxY = fabric.util.array.max(yPoints), height = maxY - minY;\n            return {\n                left: minX,\n                top: minY,\n                width: width,\n                height: height\n            };\n        },\n        /**\r\n     * Invert transformation t\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} t The transform\r\n     * @return {Array} The inverted transform\r\n     */ invertTransform: function(t) {\n            var a = 1 / (t[0] * t[3] - t[1] * t[2]), r = [\n                a * t[3],\n                -a * t[1],\n                -a * t[2],\n                a * t[0]\n            ], o = fabric.util.transformPoint({\n                x: t[4],\n                y: t[5]\n            }, r, true);\n            r[4] = -o.x;\n            r[5] = -o.y;\n            return r;\n        },\n        /**\r\n     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Number|String} number number to operate on\r\n     * @param {Number} fractionDigits number of fraction digits to \"leave\"\r\n     * @return {Number}\r\n     */ toFixed: function(number, fractionDigits) {\n            return parseFloat(Number(number).toFixed(fractionDigits));\n        },\n        /**\r\n     * Converts from attribute value to pixel value if applicable.\r\n     * Returns converted pixels or original value not converted.\r\n     * @param {Number|String} value number to operate on\r\n     * @param {Number} fontSize\r\n     * @return {Number|String}\r\n     */ parseUnit: function(value, fontSize) {\n            var unit = /\\D{0,2}$/.exec(value), number = parseFloat(value);\n            if (!fontSize) {\n                fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;\n            }\n            switch(unit[0]){\n                case \"mm\":\n                    return number * fabric.DPI / 25.4;\n                case \"cm\":\n                    return number * fabric.DPI / 2.54;\n                case \"in\":\n                    return number * fabric.DPI;\n                case \"pt\":\n                    return number * fabric.DPI / 72; // or * 4 / 3\n                case \"pc\":\n                    return number * fabric.DPI / 72 * 12; // or * 16\n                case \"em\":\n                    return number * fontSize;\n                default:\n                    return number;\n            }\n        },\n        /**\r\n     * Function which always returns `false`.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {Boolean}\r\n     */ falseFunction: function() {\n            return false;\n        },\n        /**\r\n     * Returns klass \"Class\" object of given namespace\r\n     * @memberOf fabric.util\r\n     * @param {String} type Type of object (eg. 'circle')\r\n     * @param {String} namespace Namespace to get klass \"Class\" object from\r\n     * @return {Object} klass \"Class\"\r\n     */ getKlass: function(type, namespace) {\n            // capitalize first letter only\n            type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));\n            return fabric.util.resolveNamespace(namespace)[type];\n        },\n        /**\r\n     * Returns array of attributes for given svg that fabric parses\r\n     * @memberOf fabric.util\r\n     * @param {String} type Type of svg element (eg. 'circle')\r\n     * @return {Array} string names of supported attributes\r\n     */ getSvgAttributes: function(type) {\n            var attributes = [\n                \"instantiated_by_use\",\n                \"style\",\n                \"id\",\n                \"class\"\n            ];\n            switch(type){\n                case \"linearGradient\":\n                    attributes = attributes.concat([\n                        \"x1\",\n                        \"y1\",\n                        \"x2\",\n                        \"y2\",\n                        \"gradientUnits\",\n                        \"gradientTransform\"\n                    ]);\n                    break;\n                case \"radialGradient\":\n                    attributes = attributes.concat([\n                        \"gradientUnits\",\n                        \"gradientTransform\",\n                        \"cx\",\n                        \"cy\",\n                        \"r\",\n                        \"fx\",\n                        \"fy\",\n                        \"fr\"\n                    ]);\n                    break;\n                case \"stop\":\n                    attributes = attributes.concat([\n                        \"offset\",\n                        \"stop-color\",\n                        \"stop-opacity\"\n                    ]);\n                    break;\n            }\n            return attributes;\n        },\n        /**\r\n     * Returns object of given namespace\r\n     * @memberOf fabric.util\r\n     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'\r\n     * @return {Object} Object for given namespace (default fabric)\r\n     */ resolveNamespace: function(namespace) {\n            if (!namespace) {\n                return fabric;\n            }\n            var parts = namespace.split(\".\"), len = parts.length, i, obj = global || fabric.window;\n            for(i = 0; i < len; ++i){\n                obj = obj[parts[i]];\n            }\n            return obj;\n        },\n        /**\r\n     * Loads image element from given url and passes it to a callback\r\n     * @memberOf fabric.util\r\n     * @param {String} url URL representing an image\r\n     * @param {Function} callback Callback; invoked with loaded image\r\n     * @param {*} [context] Context to invoke callback in\r\n     * @param {Object} [crossOrigin] crossOrigin value to set image element to\r\n     */ loadImage: function(url, callback, context, crossOrigin) {\n            if (!url) {\n                callback && callback.call(context, url);\n                return;\n            }\n            var img = fabric.util.createImage();\n            /** @ignore */ var onLoadCallback = function() {\n                callback && callback.call(context, img, false);\n                img = img.onload = img.onerror = null;\n            };\n            img.onload = onLoadCallback;\n            /** @ignore */ img.onerror = function() {\n                fabric.log(\"Error loading \" + img.src);\n                callback && callback.call(context, null, true);\n                img = img.onload = img.onerror = null;\n            };\n            // data-urls appear to be buggy with crossOrigin\n            // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767\n            // see https://code.google.com/p/chromium/issues/detail?id=315152\n            //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069\n            // crossOrigin null is the same as not set.\n            if (url.indexOf(\"data\") !== 0 && crossOrigin !== undefined && crossOrigin !== null) {\n                img.crossOrigin = crossOrigin;\n            }\n            // IE10 / IE11-Fix: SVG contents from data: URI\n            // will only be available if the IMG is present\n            // in the DOM (and visible)\n            if (url.substring(0, 14) === \"data:image/svg\") {\n                img.onload = null;\n                fabric.util.loadImageInDom(img, onLoadCallback);\n            }\n            img.src = url;\n        },\n        /**\r\n     * Attaches SVG image with data: URL to the dom\r\n     * @memberOf fabric.util\r\n     * @param {Object} img Image object with data:image/svg src\r\n     * @param {Function} callback Callback; invoked with loaded image\r\n     * @return {Object} DOM element (div containing the SVG image)\r\n     */ loadImageInDom: function(img, onLoadCallback) {\n            var div = fabric.document.createElement(\"div\");\n            div.style.width = div.style.height = \"1px\";\n            div.style.left = div.style.top = \"-100%\";\n            div.style.position = \"absolute\";\n            div.appendChild(img);\n            fabric.document.querySelector(\"body\").appendChild(div);\n            /**\r\n       * Wrap in function to:\r\n       *   1. Call existing callback\r\n       *   2. Cleanup DOM\r\n       */ img.onload = function() {\n                onLoadCallback();\n                div.parentNode.removeChild(div);\n                div = null;\n            };\n        },\n        /**\r\n     * Creates corresponding fabric instances from their object representations\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} objects Objects to enliven\r\n     * @param {Function} callback Callback to invoke when all objects are created\r\n     * @param {String} namespace Namespace to get klass \"Class\" object from\r\n     * @param {Function} reviver Method for further parsing of object elements,\r\n     * called after each fabric object created.\r\n     */ enlivenObjects: function(objects, callback, namespace, reviver) {\n            objects = objects || [];\n            var enlivenedObjects = [], numLoadedObjects = 0, numTotalObjects = objects.length;\n            function onLoaded() {\n                if (++numLoadedObjects === numTotalObjects) {\n                    callback && callback(enlivenedObjects.filter(function(obj) {\n                        // filter out undefined objects (objects that gave error)\n                        return obj;\n                    }));\n                }\n            }\n            if (!numTotalObjects) {\n                callback && callback(enlivenedObjects);\n                return;\n            }\n            objects.forEach(function(o, index) {\n                // if sparse array\n                if (!o || !o.type) {\n                    onLoaded();\n                    return;\n                }\n                var klass = fabric.util.getKlass(o.type, namespace);\n                klass.fromObject(o, function(obj, error) {\n                    error || (enlivenedObjects[index] = obj);\n                    reviver && reviver(o, obj, error);\n                    onLoaded();\n                });\n            });\n        },\n        /**\r\n     * Creates corresponding fabric instances residing in an object, e.g. `clipPath`\r\n     * @see {@link fabric.Object.ENLIVEN_PROPS}\r\n     * @param {Object} object\r\n     * @param {Object} [context] assign enlived props to this object (pass null to skip this)\r\n     * @param {(objects:fabric.Object[]) => void} callback\r\n     */ enlivenObjectEnlivables: function(object, context, callback) {\n            var enlivenProps = fabric.Object.ENLIVEN_PROPS.filter(function(key) {\n                return !!object[key];\n            });\n            fabric.util.enlivenObjects(enlivenProps.map(function(key) {\n                return object[key];\n            }), function(enlivedProps) {\n                var objects = {};\n                enlivenProps.forEach(function(key, index) {\n                    objects[key] = enlivedProps[index];\n                    context && (context[key] = enlivedProps[index]);\n                });\n                callback && callback(objects);\n            });\n        },\n        /**\r\n     * Create and wait for loading of patterns\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} patterns Objects to enliven\r\n     * @param {Function} callback Callback to invoke when all objects are created\r\n     * called after each fabric object created.\r\n     */ enlivenPatterns: function(patterns, callback) {\n            patterns = patterns || [];\n            function onLoaded() {\n                if (++numLoadedPatterns === numPatterns) {\n                    callback && callback(enlivenedPatterns);\n                }\n            }\n            var enlivenedPatterns = [], numLoadedPatterns = 0, numPatterns = patterns.length;\n            if (!numPatterns) {\n                callback && callback(enlivenedPatterns);\n                return;\n            }\n            patterns.forEach(function(p, index) {\n                if (p && p.source) {\n                    new fabric.Pattern(p, function(pattern) {\n                        enlivenedPatterns[index] = pattern;\n                        onLoaded();\n                    });\n                } else {\n                    enlivenedPatterns[index] = p;\n                    onLoaded();\n                }\n            });\n        },\n        /**\r\n     * Groups SVG elements (usually those retrieved from SVG document)\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Array} elements SVG elements to group\r\n     * @param {Object} [options] Options object\r\n     * @param {String} path Value to set sourcePath to\r\n     * @return {fabric.Object|fabric.Group}\r\n     */ groupSVGElements: function(elements, options, path) {\n            var object;\n            if (elements && elements.length === 1) {\n                return elements[0];\n            }\n            if (options) {\n                if (options.width && options.height) {\n                    options.centerPoint = {\n                        x: options.width / 2,\n                        y: options.height / 2\n                    };\n                } else {\n                    delete options.width;\n                    delete options.height;\n                }\n            }\n            object = new fabric.Group(elements, options);\n            if (typeof path !== \"undefined\") {\n                object.sourcePath = path;\n            }\n            return object;\n        },\n        /**\r\n     * Populates an object with properties of another object\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param {Object} source Source object\r\n     * @param {Object} destination Destination object\r\n     * @return {Array} properties Properties names to include\r\n     */ populateWithProperties: function(source, destination, properties) {\n            if (properties && Array.isArray(properties)) {\n                for(var i = 0, len = properties.length; i < len; i++){\n                    if (properties[i] in source) {\n                        destination[properties[i]] = source[properties[i]];\n                    }\n                }\n            }\n        },\n        /**\r\n     * Creates canvas element\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {CanvasElement} initialized canvas element\r\n     */ createCanvasElement: function() {\n            return fabric.document.createElement(\"canvas\");\n        },\n        /**\r\n     * Creates a canvas element that is a copy of another and is also painted\r\n     * @param {CanvasElement} canvas to copy size and content of\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {CanvasElement} initialized canvas element\r\n     */ copyCanvasElement: function(canvas) {\n            var newCanvas = fabric.util.createCanvasElement();\n            newCanvas.width = canvas.width;\n            newCanvas.height = canvas.height;\n            newCanvas.getContext(\"2d\").drawImage(canvas, 0, 0);\n            return newCanvas;\n        },\n        /**\r\n     * since 2.6.0 moved from canvas instance to utility.\r\n     * @param {CanvasElement} canvasEl to copy size and content of\r\n     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too\r\n     * @param {Number} quality <= 1 and > 0\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {String} data url\r\n     */ toDataURL: function(canvasEl, format, quality) {\n            return canvasEl.toDataURL(\"image/\" + format, quality);\n        },\n        /**\r\n     * Creates image element (works on client and node)\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @return {HTMLImageElement} HTML image element\r\n     */ createImage: function() {\n            return fabric.document.createElement(\"img\");\n        },\n        /**\r\n     * Multiply matrix A by matrix B to nest transformations\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Array} a First transformMatrix\r\n     * @param  {Array} b Second transformMatrix\r\n     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices\r\n     * @return {Array} The product of the two transform matrices\r\n     */ multiplyTransformMatrices: function(a, b, is2x2) {\n            // Matrix multiply a * b\n            return [\n                a[0] * b[0] + a[2] * b[1],\n                a[1] * b[0] + a[3] * b[1],\n                a[0] * b[2] + a[2] * b[3],\n                a[1] * b[2] + a[3] * b[3],\n                is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],\n                is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]\n            ];\n        },\n        /**\r\n     * Decomposes standard 2x3 matrix into transform components\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Array} a transformMatrix\r\n     * @return {Object} Components of transform\r\n     */ qrDecompose: function(a) {\n            var angle = atan2(a[1], a[0]), denom = pow(a[0], 2) + pow(a[1], 2), scaleX = sqrt(denom), scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX, skewX = atan2(a[0] * a[2] + a[1] * a[3], denom);\n            return {\n                angle: angle / PiBy180,\n                scaleX: scaleX,\n                scaleY: scaleY,\n                skewX: skewX / PiBy180,\n                skewY: 0,\n                translateX: a[4],\n                translateY: a[5]\n            };\n        },\n        /**\r\n     * Returns a transform matrix starting from an object of the same kind of\r\n     * the one returned from qrDecompose, useful also if you want to calculate some\r\n     * transformations from an object that is not enlived yet\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Object} options\r\n     * @param  {Number} [options.angle] angle in degrees\r\n     * @return {Number[]} transform matrix\r\n     */ calcRotateMatrix: function(options) {\n            if (!options.angle) {\n                return fabric.iMatrix.concat();\n            }\n            var theta = fabric.util.degreesToRadians(options.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);\n            return [\n                cos,\n                sin,\n                -sin,\n                cos,\n                0,\n                0\n            ];\n        },\n        /**\r\n     * Returns a transform matrix starting from an object of the same kind of\r\n     * the one returned from qrDecompose, useful also if you want to calculate some\r\n     * transformations from an object that is not enlived yet.\r\n     * is called DimensionsTransformMatrix because those properties are the one that influence\r\n     * the size of the resulting box of the object.\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Object} options\r\n     * @param  {Number} [options.scaleX]\r\n     * @param  {Number} [options.scaleY]\r\n     * @param  {Boolean} [options.flipX]\r\n     * @param  {Boolean} [options.flipY]\r\n     * @param  {Number} [options.skewX]\r\n     * @param  {Number} [options.skewY]\r\n     * @return {Number[]} transform matrix\r\n     */ calcDimensionsMatrix: function(options) {\n            var scaleX = typeof options.scaleX === \"undefined\" ? 1 : options.scaleX, scaleY = typeof options.scaleY === \"undefined\" ? 1 : options.scaleY, scaleMatrix = [\n                options.flipX ? -scaleX : scaleX,\n                0,\n                0,\n                options.flipY ? -scaleY : scaleY,\n                0,\n                0\n            ], multiply = fabric.util.multiplyTransformMatrices, degreesToRadians = fabric.util.degreesToRadians;\n            if (options.skewX) {\n                scaleMatrix = multiply(scaleMatrix, [\n                    1,\n                    0,\n                    Math.tan(degreesToRadians(options.skewX)),\n                    1\n                ], true);\n            }\n            if (options.skewY) {\n                scaleMatrix = multiply(scaleMatrix, [\n                    1,\n                    Math.tan(degreesToRadians(options.skewY)),\n                    0,\n                    1\n                ], true);\n            }\n            return scaleMatrix;\n        },\n        /**\r\n     * Returns a transform matrix starting from an object of the same kind of\r\n     * the one returned from qrDecompose, useful also if you want to calculate some\r\n     * transformations from an object that is not enlived yet\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {Object} options\r\n     * @param  {Number} [options.angle]\r\n     * @param  {Number} [options.scaleX]\r\n     * @param  {Number} [options.scaleY]\r\n     * @param  {Boolean} [options.flipX]\r\n     * @param  {Boolean} [options.flipY]\r\n     * @param  {Number} [options.skewX]\r\n     * @param  {Number} [options.skewX]\r\n     * @param  {Number} [options.translateX]\r\n     * @param  {Number} [options.translateY]\r\n     * @return {Number[]} transform matrix\r\n     */ composeMatrix: function(options) {\n            var matrix = [\n                1,\n                0,\n                0,\n                1,\n                options.translateX || 0,\n                options.translateY || 0\n            ], multiply = fabric.util.multiplyTransformMatrices;\n            if (options.angle) {\n                matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));\n            }\n            if (options.scaleX !== 1 || options.scaleY !== 1 || options.skewX || options.skewY || options.flipX || options.flipY) {\n                matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));\n            }\n            return matrix;\n        },\n        /**\r\n     * reset an object transform state to neutral. Top and left are not accounted for\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {fabric.Object} target object to transform\r\n     */ resetObjectTransform: function(target) {\n            target.scaleX = 1;\n            target.scaleY = 1;\n            target.skewX = 0;\n            target.skewY = 0;\n            target.flipX = false;\n            target.flipY = false;\n            target.rotate(0);\n        },\n        /**\r\n     * Extract Object transform values\r\n     * @static\r\n     * @memberOf fabric.util\r\n     * @param  {fabric.Object} target object to read from\r\n     * @return {Object} Components of transform\r\n     */ saveObjectTransform: function(target) {\n            return {\n                scaleX: target.scaleX,\n                scaleY: target.scaleY,\n                skewX: target.skewX,\n                skewY: target.skewY,\n                angle: target.angle,\n                left: target.left,\n                flipX: target.flipX,\n                flipY: target.flipY,\n                top: target.top\n            };\n        },\n        /**\r\n     * Returns true if context has transparent pixel\r\n     * at specified location (taking tolerance into account)\r\n     * @param {CanvasRenderingContext2D} ctx context\r\n     * @param {Number} x x coordinate\r\n     * @param {Number} y y coordinate\r\n     * @param {Number} tolerance Tolerance\r\n     */ isTransparent: function(ctx, x, y, tolerance) {\n            // If tolerance is > 0 adjust start coords to take into account.\n            // If moves off Canvas fix to 0\n            if (tolerance > 0) {\n                if (x > tolerance) {\n                    x -= tolerance;\n                } else {\n                    x = 0;\n                }\n                if (y > tolerance) {\n                    y -= tolerance;\n                } else {\n                    y = 0;\n                }\n            }\n            var _isTransparent = true, i, temp, imageData = ctx.getImageData(x, y, tolerance * 2 || 1, tolerance * 2 || 1), l = imageData.data.length;\n            // Split image data - for tolerance > 1, pixelDataSize = 4;\n            for(i = 3; i < l; i += 4){\n                temp = imageData.data[i];\n                _isTransparent = temp <= 0;\n                if (_isTransparent === false) {\n                    break; // Stop if colour found\n                }\n            }\n            imageData = null;\n            return _isTransparent;\n        },\n        /**\r\n     * Parse preserveAspectRatio attribute from element\r\n     * @param {string} attribute to be parsed\r\n     * @return {Object} an object containing align and meetOrSlice attribute\r\n     */ parsePreserveAspectRatioAttribute: function(attribute) {\n            var meetOrSlice = \"meet\", alignX = \"Mid\", alignY = \"Mid\", aspectRatioAttrs = attribute.split(\" \"), align;\n            if (aspectRatioAttrs && aspectRatioAttrs.length) {\n                meetOrSlice = aspectRatioAttrs.pop();\n                if (meetOrSlice !== \"meet\" && meetOrSlice !== \"slice\") {\n                    align = meetOrSlice;\n                    meetOrSlice = \"meet\";\n                } else if (aspectRatioAttrs.length) {\n                    align = aspectRatioAttrs.pop();\n                }\n            }\n            //divide align in alignX and alignY\n            alignX = align !== \"none\" ? align.slice(1, 4) : \"none\";\n            alignY = align !== \"none\" ? align.slice(5, 8) : \"none\";\n            return {\n                meetOrSlice: meetOrSlice,\n                alignX: alignX,\n                alignY: alignY\n            };\n        },\n        /**\r\n     * Clear char widths cache for the given font family or all the cache if no\r\n     * fontFamily is specified.\r\n     * Use it if you know you are loading fonts in a lazy way and you are not waiting\r\n     * for custom fonts to load properly when adding text objects to the canvas.\r\n     * If a text object is added when its own font is not loaded yet, you will get wrong\r\n     * measurement and so wrong bounding boxes.\r\n     * After the font cache is cleared, either change the textObject text content or call\r\n     * initDimensions() to trigger a recalculation\r\n     * @memberOf fabric.util\r\n     * @param {String} [fontFamily] font family to clear\r\n     */ clearFabricFontCache: function(fontFamily) {\n            fontFamily = (fontFamily || \"\").toLowerCase();\n            if (!fontFamily) {\n                fabric.charWidthsCache = {};\n            } else if (fabric.charWidthsCache[fontFamily]) {\n                delete fabric.charWidthsCache[fontFamily];\n            }\n        },\n        /**\r\n     * Given current aspect ratio, determines the max width and height that can\r\n     * respect the total allowed area for the cache.\r\n     * @memberOf fabric.util\r\n     * @param {Number} ar aspect ratio\r\n     * @param {Number} maximumArea Maximum area you want to achieve\r\n     * @return {Object.x} Limited dimensions by X\r\n     * @return {Object.y} Limited dimensions by Y\r\n     */ limitDimsByArea: function(ar, maximumArea) {\n            var roughWidth = Math.sqrt(maximumArea * ar), perfLimitSizeY = Math.floor(maximumArea / roughWidth);\n            return {\n                x: Math.floor(roughWidth),\n                y: perfLimitSizeY\n            };\n        },\n        capValue: function(min, value, max) {\n            return Math.max(min, Math.min(value, max));\n        },\n        /**\r\n     * Finds the scale for the object source to fit inside the object destination,\r\n     * keeping aspect ratio intact.\r\n     * respect the total allowed area for the cache.\r\n     * @memberOf fabric.util\r\n     * @param {Object | fabric.Object} source\r\n     * @param {Number} source.height natural unscaled height of the object\r\n     * @param {Number} source.width natural unscaled width of the object\r\n     * @param {Object | fabric.Object} destination\r\n     * @param {Number} destination.height natural unscaled height of the object\r\n     * @param {Number} destination.width natural unscaled width of the object\r\n     * @return {Number} scale factor to apply to source to fit into destination\r\n     */ findScaleToFit: function(source, destination) {\n            return Math.min(destination.width / source.width, destination.height / source.height);\n        },\n        /**\r\n     * Finds the scale for the object source to cover entirely the object destination,\r\n     * keeping aspect ratio intact.\r\n     * respect the total allowed area for the cache.\r\n     * @memberOf fabric.util\r\n     * @param {Object | fabric.Object} source\r\n     * @param {Number} source.height natural unscaled height of the object\r\n     * @param {Number} source.width natural unscaled width of the object\r\n     * @param {Object | fabric.Object} destination\r\n     * @param {Number} destination.height natural unscaled height of the object\r\n     * @param {Number} destination.width natural unscaled width of the object\r\n     * @return {Number} scale factor to apply to source to cover destination\r\n     */ findScaleToCover: function(source, destination) {\n            return Math.max(destination.width / source.width, destination.height / source.height);\n        },\n        /**\r\n     * given an array of 6 number returns something like `\"matrix(...numbers)\"`\r\n     * @memberOf fabric.util\r\n     * @param {Array} transform an array with 6 numbers\r\n     * @return {String} transform matrix for svg\r\n     * @return {Object.y} Limited dimensions by Y\r\n     */ matrixToSVG: function(transform) {\n            return \"matrix(\" + transform.map(function(value) {\n                return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);\n            }).join(\" \") + \")\";\n        },\n        /**\r\n     * given an object and a transform, apply the inverse transform to the object,\r\n     * this is equivalent to remove from that object that transformation, so that\r\n     * added in a space with the removed transform, the object will be the same as before.\r\n     * Removing from an object a transform that scale by 2 is like scaling it by 1/2.\r\n     * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg\r\n     * in the opposite direction.\r\n     * This util is used to add objects inside transformed groups or nested groups.\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} object the object you want to transform\r\n     * @param {Array} transform the destination transform\r\n     */ removeTransformFromObject: function(object, transform) {\n            var inverted = fabric.util.invertTransform(transform), finalTransform = fabric.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());\n            fabric.util.applyTransformToObject(object, finalTransform);\n        },\n        /**\r\n     * given an object and a transform, apply the transform to the object.\r\n     * this is equivalent to change the space where the object is drawn.\r\n     * Adding to an object a transform that scale by 2 is like scaling it by 2.\r\n     * This is used when removing an object from an active selection for example.\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} object the object you want to transform\r\n     * @param {Array} transform the destination transform\r\n     */ addTransformToObject: function(object, transform) {\n            fabric.util.applyTransformToObject(object, fabric.util.multiplyTransformMatrices(transform, object.calcOwnMatrix()));\n        },\n        /**\r\n     * discard an object transform state and apply the one from the matrix.\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} object the object you want to transform\r\n     * @param {Array} transform the destination transform\r\n     */ applyTransformToObject: function(object, transform) {\n            var options = fabric.util.qrDecompose(transform), center = new fabric.Point(options.translateX, options.translateY);\n            object.flipX = false;\n            object.flipY = false;\n            object.set(\"scaleX\", options.scaleX);\n            object.set(\"scaleY\", options.scaleY);\n            object.skewX = options.skewX;\n            object.skewY = options.skewY;\n            object.angle = options.angle;\n            object.setPositionByOrigin(center, \"center\", \"center\");\n        },\n        /**\r\n     * given a width and height, return the size of the bounding box\r\n     * that can contains the box with width/height with applied transform\r\n     * described in options.\r\n     * Use to calculate the boxes around objects for controls.\r\n     * @memberOf fabric.util\r\n     * @param {Number} width\r\n     * @param {Number} height\r\n     * @param {Object} options\r\n     * @param {Number} options.scaleX\r\n     * @param {Number} options.scaleY\r\n     * @param {Number} options.skewX\r\n     * @param {Number} options.skewY\r\n     * @return {Object.x} width of containing\r\n     * @return {Object.y} height of containing\r\n     */ sizeAfterTransform: function(width, height, options) {\n            var dimX = width / 2, dimY = height / 2, points = [\n                {\n                    x: -dimX,\n                    y: -dimY\n                },\n                {\n                    x: dimX,\n                    y: -dimY\n                },\n                {\n                    x: -dimX,\n                    y: dimY\n                },\n                {\n                    x: dimX,\n                    y: dimY\n                }\n            ], transformMatrix = fabric.util.calcDimensionsMatrix(options), bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);\n            return {\n                x: bbox.width,\n                y: bbox.height\n            };\n        },\n        /**\r\n     * Merges 2 clip paths into one visually equal clip path\r\n     *\r\n     * **IMPORTANT**:\\\r\n     * Does **NOT** clone the arguments, clone them proir if necessary.\r\n     *\r\n     * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.\r\n     * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.\r\n     *\r\n     * In order to handle the `inverted` property we follow logic described in the following cases:\\\r\n     * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\\\r\n     * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\\\r\n     * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.\r\n     *\r\n     * @memberOf fabric.util\r\n     * @param {fabric.Object} c1\r\n     * @param {fabric.Object} c2\r\n     * @returns {fabric.Object} merged clip path\r\n     */ mergeClipPaths: function(c1, c2) {\n            var a = c1, b = c2;\n            if (a.inverted && !b.inverted) {\n                //  case (2)\n                a = c2;\n                b = c1;\n            }\n            //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane\n            fabric.util.applyTransformToObject(b, fabric.util.multiplyTransformMatrices(fabric.util.invertTransform(a.calcTransformMatrix()), b.calcTransformMatrix()));\n            //  assign the `inverted` prop to the wrapping group\n            var inverted = a.inverted && b.inverted;\n            if (inverted) {\n                //  case (1)\n                a.inverted = b.inverted = false;\n            }\n            return new fabric.Group([\n                a\n            ], {\n                clipPath: b,\n                inverted: inverted\n            });\n        },\n        /**\r\n     * @memberOf fabric.util\r\n     * @param {Object} prevStyle first style to compare\r\n     * @param {Object} thisStyle second style to compare\r\n     * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties\r\n     * @return {boolean} true if the style changed\r\n     */ hasStyleChanged: function(prevStyle, thisStyle, forTextSpans) {\n            forTextSpans = forTextSpans || false;\n            return prevStyle.fill !== thisStyle.fill || prevStyle.stroke !== thisStyle.stroke || prevStyle.strokeWidth !== thisStyle.strokeWidth || prevStyle.fontSize !== thisStyle.fontSize || prevStyle.fontFamily !== thisStyle.fontFamily || prevStyle.fontWeight !== thisStyle.fontWeight || prevStyle.fontStyle !== thisStyle.fontStyle || prevStyle.deltaY !== thisStyle.deltaY || forTextSpans && (prevStyle.overline !== thisStyle.overline || prevStyle.underline !== thisStyle.underline || prevStyle.linethrough !== thisStyle.linethrough);\n        },\n        /**\r\n     * Returns the array form of a text object's inline styles property with styles grouped in ranges\r\n     * rather than per character. This format is less verbose, and is better suited for storage\r\n     * so it is used in serialization (not during runtime).\r\n     * @memberOf fabric.util\r\n     * @param {object} styles per character styles for a text object\r\n     * @param {String} text the text string that the styles are applied to\r\n     * @return {{start: number, end: number, style: object}[]}\r\n     */ stylesToArray: function(styles, text) {\n            // clone style structure to prevent mutation\n            var styles = fabric.util.object.clone(styles, true), textLines = text.split(\"\\n\"), charIndex = -1, prevStyle = {}, stylesArray = [];\n            //loop through each textLine\n            for(var i = 0; i < textLines.length; i++){\n                if (!styles[i]) {\n                    //no styles exist for this line, so add the line's length to the charIndex total\n                    charIndex += textLines[i].length;\n                    continue;\n                }\n                //loop through each character of the current line\n                for(var c = 0; c < textLines[i].length; c++){\n                    charIndex++;\n                    var thisStyle = styles[i][c];\n                    //check if style exists for this character\n                    if (thisStyle) {\n                        var styleChanged = fabric.util.hasStyleChanged(prevStyle, thisStyle, true);\n                        if (styleChanged) {\n                            stylesArray.push({\n                                start: charIndex,\n                                end: charIndex + 1,\n                                style: thisStyle\n                            });\n                        } else {\n                            //if style is the same as previous character, increase end index\n                            stylesArray[stylesArray.length - 1].end++;\n                        }\n                    }\n                    prevStyle = thisStyle || {};\n                }\n            }\n            return stylesArray;\n        },\n        /**\r\n     * Returns the object form of the styles property with styles that are assigned per\r\n     * character rather than grouped by range. This format is more verbose, and is\r\n     * only used during runtime (not for serialization/storage)\r\n     * @memberOf fabric.util\r\n     * @param {Array} styles the serialized form of a text object's styles\r\n     * @param {String} text the text string that the styles are applied to\r\n     * @return {Object}\r\n     */ stylesFromArray: function(styles, text) {\n            if (!Array.isArray(styles)) {\n                return styles;\n            }\n            var textLines = text.split(\"\\n\"), charIndex = -1, styleIndex = 0, stylesObject = {};\n            //loop through each textLine\n            for(var i = 0; i < textLines.length; i++){\n                //loop through each character of the current line\n                for(var c = 0; c < textLines[i].length; c++){\n                    charIndex++;\n                    //check if there's a style collection that includes the current character\n                    if (styles[styleIndex] && styles[styleIndex].start <= charIndex && charIndex < styles[styleIndex].end) {\n                        //create object for line index if it doesn't exist\n                        stylesObject[i] = stylesObject[i] || {};\n                        //assign a style at this character's index\n                        stylesObject[i][c] = Object.assign({}, styles[styleIndex].style);\n                        //if character is at the end of the current style collection, move to the next\n                        if (charIndex === styles[styleIndex].end - 1) {\n                            styleIndex++;\n                        }\n                    }\n                }\n            }\n            return stylesObject;\n        }\n    };\n})( true ? exports : 0);\n(function() {\n    var _join = Array.prototype.join, commandLengths = {\n        m: 2,\n        l: 2,\n        h: 1,\n        v: 1,\n        c: 6,\n        s: 4,\n        q: 4,\n        t: 2,\n        a: 7\n    }, repeatedCommands = {\n        m: \"l\",\n        M: \"L\"\n    };\n    function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {\n        var costh2 = fabric.util.cos(th2), sinth2 = fabric.util.sin(th2), costh3 = fabric.util.cos(th3), sinth3 = fabric.util.sin(th3), toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1, toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1, cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2), cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2), cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3), cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);\n        return [\n            \"C\",\n            cp1X,\n            cp1Y,\n            cp2X,\n            cp2Y,\n            toX,\n            toY\n        ];\n    }\n    /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp\r\n   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here\r\n   * http://mozilla.org/MPL/2.0/\r\n   */ function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {\n        var PI = Math.PI, th = rotateX * PI / 180, sinTh = fabric.util.sin(th), cosTh = fabric.util.cos(th), fromX = 0, fromY = 0;\n        rx = Math.abs(rx);\n        ry = Math.abs(ry);\n        var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5, py = -cosTh * toY * 0.5 + sinTh * toX * 0.5, rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px, pl = rx2 * ry2 - rx2 * py2 - ry2 * px2, root = 0;\n        if (pl < 0) {\n            var s = Math.sqrt(1 - pl / (rx2 * ry2));\n            rx *= s;\n            ry *= s;\n        } else {\n            root = (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));\n        }\n        var cx = root * rx * py / ry, cy = -root * ry * px / rx, cx1 = cosTh * cx - sinTh * cy + toX * 0.5, cy1 = sinTh * cx + cosTh * cy + toY * 0.5, mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry), dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);\n        if (sweep === 0 && dtheta > 0) {\n            dtheta -= 2 * PI;\n        } else if (sweep === 1 && dtheta < 0) {\n            dtheta += 2 * PI;\n        }\n        // Convert into cubic bezier segments <= 90deg\n        var segments = Math.ceil(Math.abs(dtheta / PI * 2)), result = [], mDelta = dtheta / segments, mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2), th3 = mTheta + mDelta;\n        for(var i = 0; i < segments; i++){\n            result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);\n            fromX = result[i][5];\n            fromY = result[i][6];\n            mTheta = th3;\n            th3 += mDelta;\n        }\n        return result;\n    }\n    /*\r\n   * Private\r\n   */ function calcVectorAngle(ux, uy, vx, vy) {\n        var ta = Math.atan2(uy, ux), tb = Math.atan2(vy, vx);\n        if (tb >= ta) {\n            return tb - ta;\n        } else {\n            return 2 * Math.PI - (ta - tb);\n        }\n    }\n    /**\r\n   * Calculate bounding box of a beziercurve\r\n   * @param {Number} x0 starting point\r\n   * @param {Number} y0\r\n   * @param {Number} x1 first control point\r\n   * @param {Number} y1\r\n   * @param {Number} x2 secondo control point\r\n   * @param {Number} y2\r\n   * @param {Number} x3 end of bezier\r\n   * @param {Number} y3\r\n   */ // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.\n    // TODO: can we normalize this with the starting points set at 0 and then translated the bbox?\n    function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var argsString;\n        if (fabric.cachesBoundsOfCurve) {\n            argsString = _join.call(arguments);\n            if (fabric.boundsOfCurveCache[argsString]) {\n                return fabric.boundsOfCurveCache[argsString];\n            }\n        }\n        var sqrt = Math.sqrt, min = Math.min, max = Math.max, abs = Math.abs, tvalues = [], bounds = [\n            [],\n            []\n        ], a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n        for(var i = 0; i < 2; ++i){\n            if (i > 0) {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            if (b2ac < 0) {\n                continue;\n            }\n            sqrtb2ac = sqrt(b2ac);\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n        var x, y, j = tvalues.length, jlen = j, mt;\n        while(j--){\n            t = tvalues[j];\n            mt = 1 - t;\n            x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[0][j] = x;\n            y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n            bounds[1][j] = y;\n        }\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        var result = [\n            {\n                x: min.apply(null, bounds[0]),\n                y: min.apply(null, bounds[1])\n            },\n            {\n                x: max.apply(null, bounds[0]),\n                y: max.apply(null, bounds[1])\n            }\n        ];\n        if (fabric.cachesBoundsOfCurve) {\n            fabric.boundsOfCurveCache[argsString] = result;\n        }\n        return result;\n    }\n    /**\r\n   * Converts arc to a bunch of bezier curves\r\n   * @param {Number} fx starting point x\r\n   * @param {Number} fy starting point y\r\n   * @param {Array} coords Arc command\r\n   */ function fromArcToBeziers(fx, fy, coords) {\n        var rx = coords[1], ry = coords[2], rot = coords[3], large = coords[4], sweep = coords[5], tx = coords[6], ty = coords[7], segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);\n        for(var i = 0, len = segsNorm.length; i < len; i++){\n            segsNorm[i][1] += fx;\n            segsNorm[i][2] += fy;\n            segsNorm[i][3] += fx;\n            segsNorm[i][4] += fy;\n            segsNorm[i][5] += fx;\n            segsNorm[i][6] += fy;\n        }\n        return segsNorm;\n    }\n    ;\n    /**\r\n   * This function take a parsed SVG path and make it simpler for fabricJS logic.\r\n   * simplification consist of: only UPPERCASE absolute commands ( relative converted to absolute )\r\n   * S converted in C, T converted in Q, A converted in C.\r\n   * @param {Array} path the array of commands of a parsed svg path for fabric.Path\r\n   * @return {Array} the simplified array of commands of a parsed svg path for fabric.Path\r\n   */ function makePathSimpler(path) {\n        // x and y represent the last point of the path. the previous command point.\n        // we add them to each relative command to make it an absolute comment.\n        // we also swap the v V h H with L, because are easier to transform.\n        var x = 0, y = 0, len = path.length, // x1 and y1 represent the last point of the subpath. the subpath is started with\n        // m or M command. When a z or Z command is drawn, x and y need to be resetted to\n        // the last x1 and y1.\n        x1 = 0, y1 = 0, current, i, converted, // previous will host the letter of the previous command, to handle S and T.\n        // controlX and controlY will host the previous reflected control point\n        destinationPath = [], previous, controlX, controlY;\n        for(i = 0; i < len; ++i){\n            converted = false;\n            current = path[i].slice(0);\n            switch(current[0]){\n                case \"l\":\n                    current[0] = \"L\";\n                    current[1] += x;\n                    current[2] += y;\n                // falls through\n                case \"L\":\n                    x = current[1];\n                    y = current[2];\n                    break;\n                case \"h\":\n                    current[1] += x;\n                // falls through\n                case \"H\":\n                    current[0] = \"L\";\n                    current[2] = y;\n                    x = current[1];\n                    break;\n                case \"v\":\n                    current[1] += y;\n                // falls through\n                case \"V\":\n                    current[0] = \"L\";\n                    y = current[1];\n                    current[1] = x;\n                    current[2] = y;\n                    break;\n                case \"m\":\n                    current[0] = \"M\";\n                    current[1] += x;\n                    current[2] += y;\n                // falls through\n                case \"M\":\n                    x = current[1];\n                    y = current[2];\n                    x1 = current[1];\n                    y1 = current[2];\n                    break;\n                case \"c\":\n                    current[0] = \"C\";\n                    current[1] += x;\n                    current[2] += y;\n                    current[3] += x;\n                    current[4] += y;\n                    current[5] += x;\n                    current[6] += y;\n                // falls through\n                case \"C\":\n                    controlX = current[3];\n                    controlY = current[4];\n                    x = current[5];\n                    y = current[6];\n                    break;\n                case \"s\":\n                    current[0] = \"S\";\n                    current[1] += x;\n                    current[2] += y;\n                    current[3] += x;\n                    current[4] += y;\n                // falls through\n                case \"S\":\n                    // would be sScC but since we are swapping sSc for C, we check just that.\n                    if (previous === \"C\") {\n                        // calculate reflection of previous control points\n                        controlX = 2 * x - controlX;\n                        controlY = 2 * y - controlY;\n                    } else {\n                        // If there is no previous command or if the previous command was not a C, c, S, or s,\n                        // the control point is coincident with the current point\n                        controlX = x;\n                        controlY = y;\n                    }\n                    x = current[3];\n                    y = current[4];\n                    current[0] = \"C\";\n                    current[5] = current[3];\n                    current[6] = current[4];\n                    current[3] = current[1];\n                    current[4] = current[2];\n                    current[1] = controlX;\n                    current[2] = controlY;\n                    // current[3] and current[4] are NOW the second control point.\n                    // we keep it for the next reflection.\n                    controlX = current[3];\n                    controlY = current[4];\n                    break;\n                case \"q\":\n                    current[0] = \"Q\";\n                    current[1] += x;\n                    current[2] += y;\n                    current[3] += x;\n                    current[4] += y;\n                // falls through\n                case \"Q\":\n                    controlX = current[1];\n                    controlY = current[2];\n                    x = current[3];\n                    y = current[4];\n                    break;\n                case \"t\":\n                    current[0] = \"T\";\n                    current[1] += x;\n                    current[2] += y;\n                // falls through\n                case \"T\":\n                    if (previous === \"Q\") {\n                        // calculate reflection of previous control point\n                        controlX = 2 * x - controlX;\n                        controlY = 2 * y - controlY;\n                    } else {\n                        // If there is no previous command or if the previous command was not a Q, q, T or t,\n                        // assume the control point is coincident with the current point\n                        controlX = x;\n                        controlY = y;\n                    }\n                    current[0] = \"Q\";\n                    x = current[1];\n                    y = current[2];\n                    current[1] = controlX;\n                    current[2] = controlY;\n                    current[3] = x;\n                    current[4] = y;\n                    break;\n                case \"a\":\n                    current[0] = \"A\";\n                    current[6] += x;\n                    current[7] += y;\n                // falls through\n                case \"A\":\n                    converted = true;\n                    destinationPath = destinationPath.concat(fromArcToBeziers(x, y, current));\n                    x = current[6];\n                    y = current[7];\n                    break;\n                case \"z\":\n                case \"Z\":\n                    x = x1;\n                    y = y1;\n                    break;\n                default:\n            }\n            if (!converted) {\n                destinationPath.push(current);\n            }\n            previous = current[0];\n        }\n        return destinationPath;\n    }\n    ;\n    /**\r\n   * Calc length from point x1,y1 to x2,y2\r\n   * @param {Number} x1 starting point x\r\n   * @param {Number} y1 starting point y\r\n   * @param {Number} x2 starting point x\r\n   * @param {Number} y2 starting point y\r\n   * @return {Number} length of segment\r\n   */ function calcLineLength(x1, y1, x2, y2) {\n        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    // functions for the Cubic beizer\n    // taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350\n    function CB1(t) {\n        return t * t * t;\n    }\n    function CB2(t) {\n        return 3 * t * t * (1 - t);\n    }\n    function CB3(t) {\n        return 3 * t * (1 - t) * (1 - t);\n    }\n    function CB4(t) {\n        return (1 - t) * (1 - t) * (1 - t);\n    }\n    function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        return function(pct) {\n            var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);\n            return {\n                x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,\n                y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4\n            };\n        };\n    }\n    function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        return function(pct) {\n            var invT = 1 - pct, tangentX = 3 * invT * invT * (p2x - p1x) + 6 * invT * pct * (p3x - p2x) + 3 * pct * pct * (p4x - p3x), tangentY = 3 * invT * invT * (p2y - p1y) + 6 * invT * pct * (p3y - p2y) + 3 * pct * pct * (p4y - p3y);\n            return Math.atan2(tangentY, tangentX);\n        };\n    }\n    function QB1(t) {\n        return t * t;\n    }\n    function QB2(t) {\n        return 2 * t * (1 - t);\n    }\n    function QB3(t) {\n        return (1 - t) * (1 - t);\n    }\n    function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return function(pct) {\n            var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);\n            return {\n                x: p3x * c1 + p2x * c2 + p1x * c3,\n                y: p3y * c1 + p2y * c2 + p1y * c3\n            };\n        };\n    }\n    function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {\n        return function(pct) {\n            var invT = 1 - pct, tangentX = 2 * invT * (p2x - p1x) + 2 * pct * (p3x - p2x), tangentY = 2 * invT * (p2y - p1y) + 2 * pct * (p3y - p2y);\n            return Math.atan2(tangentY, tangentX);\n        };\n    }\n    // this will run over a path segment ( a cubic or quadratic segment) and approximate it\n    // with 100 segemnts. This will good enough to calculate the length of the curve\n    function pathIterator(iterator, x1, y1) {\n        var tempP = {\n            x: x1,\n            y: y1\n        }, p, tmpLen = 0, perc;\n        for(perc = 1; perc <= 100; perc += 1){\n            p = iterator(perc / 100);\n            tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);\n            tempP = p;\n        }\n        return tmpLen;\n    }\n    /**\r\n   * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1\r\n   * that correspond to that pixels run over the path.\r\n   * The percentage will be then used to find the correct point on the canvas for the path.\r\n   * @param {Array} segInfo fabricJS collection of information on a parsed path\r\n   * @param {Number} distance from starting point, in pixels.\r\n   * @return {Object} info object with x and y ( the point on canvas ) and angle, the tangent on that point;\r\n   */ function findPercentageForDistance(segInfo, distance) {\n        var perc = 0, tmpLen = 0, iterator = segInfo.iterator, tempP = {\n            x: segInfo.x,\n            y: segInfo.y\n        }, p, nextLen, nextStep = 0.01, angleFinder = segInfo.angleFinder, lastPerc;\n        // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100\n        // the path\n        while(tmpLen < distance && nextStep > 0.0001){\n            p = iterator(perc);\n            lastPerc = perc;\n            nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);\n            // compare tmpLen each cycle with distance, decide next perc to test.\n            if (nextLen + tmpLen > distance) {\n                // we discard this step and we make smaller steps.\n                perc -= nextStep;\n                nextStep /= 2;\n            } else {\n                tempP = p;\n                perc += nextStep;\n                tmpLen += nextLen;\n            }\n        }\n        p.angle = angleFinder(lastPerc);\n        return p;\n    }\n    /**\r\n   * Run over a parsed and simplifed path and extrac some informations.\r\n   * informations are length of each command and starting point\r\n   * @param {Array} path fabricJS parsed path commands\r\n   * @return {Array} path commands informations\r\n   */ function getPathSegmentsInfo(path) {\n        var totalLength = 0, len = path.length, current, //x2 and y2 are the coords of segment start\n        //x1 and y1 are the coords of the current point\n        x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo, angleFinder;\n        for(var i = 0; i < len; i++){\n            current = path[i];\n            tempInfo = {\n                x: x1,\n                y: y1,\n                command: current[0]\n            };\n            switch(current[0]){\n                case \"M\":\n                    tempInfo.length = 0;\n                    x2 = x1 = current[1];\n                    y2 = y1 = current[2];\n                    break;\n                case \"L\":\n                    tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);\n                    x1 = current[1];\n                    y1 = current[2];\n                    break;\n                case \"C\":\n                    iterator = getPointOnCubicBezierIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);\n                    angleFinder = getTangentCubicIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);\n                    tempInfo.iterator = iterator;\n                    tempInfo.angleFinder = angleFinder;\n                    tempInfo.length = pathIterator(iterator, x1, y1);\n                    x1 = current[5];\n                    y1 = current[6];\n                    break;\n                case \"Q\":\n                    iterator = getPointOnQuadraticBezierIterator(x1, y1, current[1], current[2], current[3], current[4]);\n                    angleFinder = getTangentQuadraticIterator(x1, y1, current[1], current[2], current[3], current[4]);\n                    tempInfo.iterator = iterator;\n                    tempInfo.angleFinder = angleFinder;\n                    tempInfo.length = pathIterator(iterator, x1, y1);\n                    x1 = current[3];\n                    y1 = current[4];\n                    break;\n                case \"Z\":\n                case \"z\":\n                    // we add those in order to ease calculations later\n                    tempInfo.destX = x2;\n                    tempInfo.destY = y2;\n                    tempInfo.length = calcLineLength(x1, y1, x2, y2);\n                    x1 = x2;\n                    y1 = y2;\n                    break;\n            }\n            totalLength += tempInfo.length;\n            info.push(tempInfo);\n        }\n        info.push({\n            length: totalLength,\n            x: x1,\n            y: y1\n        });\n        return info;\n    }\n    function getPointOnPath(path, distance, infos) {\n        if (!infos) {\n            infos = getPathSegmentsInfo(path);\n        }\n        var i = 0;\n        while(distance - infos[i].length > 0 && i < infos.length - 2){\n            distance -= infos[i].length;\n            i++;\n        }\n        // var distance = infos[infos.length - 1] * perc;\n        var segInfo = infos[i], segPercent = distance / segInfo.length, command = segInfo.command, segment = path[i], info;\n        switch(command){\n            case \"M\":\n                return {\n                    x: segInfo.x,\n                    y: segInfo.y,\n                    angle: 0\n                };\n            case \"Z\":\n            case \"z\":\n                info = new fabric.Point(segInfo.x, segInfo.y).lerp(new fabric.Point(segInfo.destX, segInfo.destY), segPercent);\n                info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);\n                return info;\n            case \"L\":\n                info = new fabric.Point(segInfo.x, segInfo.y).lerp(new fabric.Point(segment[1], segment[2]), segPercent);\n                info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);\n                return info;\n            case \"C\":\n                return findPercentageForDistance(segInfo, distance);\n            case \"Q\":\n                return findPercentageForDistance(segInfo, distance);\n        }\n    }\n    /**\r\n   *\r\n   * @param {string} pathString\r\n   * @return {(string|number)[][]} An array of SVG path commands\r\n   * @example <caption>Usage</caption>\r\n   * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [\r\n   *   ['M', 3, 4],\r\n   *   ['Q', 3, 5, 2, 1, 4, 0],\r\n   *   ['Q', 9, 12, 2, 1, 4, 0],\r\n   * ];\r\n   *\r\n   */ function parsePath(pathString) {\n        var result = [], coords = [], currentPath, parsed, re = fabric.rePathCommand, rNumber = \"[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?\\\\s*\", rNumberCommaWsp = \"(\" + rNumber + \")\" + fabric.commaWsp, rFlagCommaWsp = \"([01])\" + fabric.commaWsp + \"?\", rArcSeq = rNumberCommaWsp + \"?\" + rNumberCommaWsp + \"?\" + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp + rNumberCommaWsp + \"?(\" + rNumber + \")\", regArcArgumentSequence = new RegExp(rArcSeq, \"g\"), match, coordsStr, // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)\n        path;\n        if (!pathString || !pathString.match) {\n            return result;\n        }\n        path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);\n        for(var i = 0, coordsParsed, len = path.length; i < len; i++){\n            currentPath = path[i];\n            coordsStr = currentPath.slice(1).trim();\n            coords.length = 0;\n            var command = currentPath.charAt(0);\n            coordsParsed = [\n                command\n            ];\n            if (command.toLowerCase() === \"a\") {\n                // arcs have special flags that apparently don't require spaces so handle special\n                for(var args; args = regArcArgumentSequence.exec(coordsStr);){\n                    for(var j = 1; j < args.length; j++){\n                        coords.push(args[j]);\n                    }\n                }\n            } else {\n                while(match = re.exec(coordsStr)){\n                    coords.push(match[0]);\n                }\n            }\n            for(var j = 0, jlen = coords.length; j < jlen; j++){\n                parsed = parseFloat(coords[j]);\n                if (!isNaN(parsed)) {\n                    coordsParsed.push(parsed);\n                }\n            }\n            var commandLength = commandLengths[command.toLowerCase()], repeatedCommand = repeatedCommands[command] || command;\n            if (coordsParsed.length - 1 > commandLength) {\n                for(var k = 1, klen = coordsParsed.length; k < klen; k += commandLength){\n                    result.push([\n                        command\n                    ].concat(coordsParsed.slice(k, k + commandLength)));\n                    command = repeatedCommand;\n                }\n            } else {\n                result.push(coordsParsed);\n            }\n        }\n        return result;\n    }\n    ;\n    /**\r\n   *\r\n   * Converts points to a smooth SVG path\r\n   * @param {{ x: number,y: number }[]} points Array of points\r\n   * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.\r\n   * @return {(string|number)[][]} An array of SVG path commands\r\n   */ function getSmoothPathFromPoints(points, correction) {\n        var path = [], i, p1 = new fabric.Point(points[0].x, points[0].y), p2 = new fabric.Point(points[1].x, points[1].y), len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;\n        correction = correction || 0;\n        if (manyPoints) {\n            multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;\n            multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;\n        }\n        path.push([\n            \"M\",\n            p1.x - multSignX * correction,\n            p1.y - multSignY * correction\n        ]);\n        for(i = 1; i < len; i++){\n            if (!p1.eq(p2)) {\n                var midPoint = p1.midPointFrom(p2);\n                // p1 is our bezier control point\n                // midpoint is our endpoint\n                // start point is p(i-1) value.\n                path.push([\n                    \"Q\",\n                    p1.x,\n                    p1.y,\n                    midPoint.x,\n                    midPoint.y\n                ]);\n            }\n            p1 = points[i];\n            if (i + 1 < points.length) {\n                p2 = points[i + 1];\n            }\n        }\n        if (manyPoints) {\n            multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;\n            multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;\n        }\n        path.push([\n            \"L\",\n            p1.x + multSignX * correction,\n            p1.y + multSignY * correction\n        ]);\n        return path;\n    }\n    /**\r\n   * Transform a path by transforming each segment.\r\n   * it has to be a simplified path or it won't work.\r\n   * WARNING: this depends from pathOffset for correct operation\r\n   * @param {Array} path fabricJS parsed and simplified path commands\r\n   * @param {Array} transform matrix that represent the transformation\r\n   * @param {Object} [pathOffset] the fabric.Path pathOffset\r\n   * @param {Number} pathOffset.x\r\n   * @param {Number} pathOffset.y\r\n   * @returns {Array} the transformed path\r\n   */ function transformPath(path, transform, pathOffset) {\n        if (pathOffset) {\n            transform = fabric.util.multiplyTransformMatrices(transform, [\n                1,\n                0,\n                0,\n                1,\n                -pathOffset.x,\n                -pathOffset.y\n            ]);\n        }\n        return path.map(function(pathSegment) {\n            var newSegment = pathSegment.slice(0), point = {};\n            for(var i = 1; i < pathSegment.length - 1; i += 2){\n                point.x = pathSegment[i];\n                point.y = pathSegment[i + 1];\n                point = fabric.util.transformPoint(point, transform);\n                newSegment[i] = point.x;\n                newSegment[i + 1] = point.y;\n            }\n            return newSegment;\n        });\n    }\n    /**\r\n   * Join path commands to go back to svg format\r\n   * @param {Array} pathData fabricJS parsed path commands\r\n   * @return {String} joined path 'M 0 0 L 20 30'\r\n   */ fabric.util.joinPath = function(pathData) {\n        return pathData.map(function(segment) {\n            return segment.join(\" \");\n        }).join(\" \");\n    };\n    fabric.util.parsePath = parsePath;\n    fabric.util.makePathSimpler = makePathSimpler;\n    fabric.util.getSmoothPathFromPoints = getSmoothPathFromPoints;\n    fabric.util.getPathSegmentsInfo = getPathSegmentsInfo;\n    fabric.util.getBoundsOfCurve = getBoundsOfCurve;\n    fabric.util.getPointOnPath = getPointOnPath;\n    fabric.util.transformPath = transformPath;\n})();\n(function() {\n    var slice = Array.prototype.slice;\n    /**\r\n   * Invokes method on all items in a given array\r\n   * @memberOf fabric.util.array\r\n   * @param {Array} array Array to iterate over\r\n   * @param {String} method Name of a method to invoke\r\n   * @return {Array}\r\n   */ function invoke(array, method) {\n        var args = slice.call(arguments, 2), result = [];\n        for(var i = 0, len = array.length; i < len; i++){\n            result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);\n        }\n        return result;\n    }\n    /**\r\n   * Finds maximum value in array (not necessarily \"first\" one)\r\n   * @memberOf fabric.util.array\r\n   * @param {Array} array Array to iterate over\r\n   * @param {String} byProperty\r\n   * @return {*}\r\n   */ function max(array, byProperty) {\n        return find(array, byProperty, function(value1, value2) {\n            return value1 >= value2;\n        });\n    }\n    /**\r\n   * Finds minimum value in array (not necessarily \"first\" one)\r\n   * @memberOf fabric.util.array\r\n   * @param {Array} array Array to iterate over\r\n   * @param {String} byProperty\r\n   * @return {*}\r\n   */ function min(array, byProperty) {\n        return find(array, byProperty, function(value1, value2) {\n            return value1 < value2;\n        });\n    }\n    /**\r\n   * @private\r\n   */ function fill(array, value) {\n        var k = array.length;\n        while(k--){\n            array[k] = value;\n        }\n        return array;\n    }\n    /**\r\n   * @private\r\n   */ function find(array, byProperty, condition) {\n        if (!array || array.length === 0) {\n            return;\n        }\n        var i = array.length - 1, result = byProperty ? array[i][byProperty] : array[i];\n        if (byProperty) {\n            while(i--){\n                if (condition(array[i][byProperty], result)) {\n                    result = array[i][byProperty];\n                }\n            }\n        } else {\n            while(i--){\n                if (condition(array[i], result)) {\n                    result = array[i];\n                }\n            }\n        }\n        return result;\n    }\n    /**\r\n   * @namespace fabric.util.array\r\n   */ fabric.util.array = {\n        fill: fill,\n        invoke: invoke,\n        min: min,\n        max: max\n    };\n})();\n(function() {\n    /**\r\n   * Copies all enumerable properties of one js object to another\r\n   * this does not and cannot compete with generic utils.\r\n   * Does not clone or extend fabric.Object subclasses.\r\n   * This is mostly for internal use and has extra handling for fabricJS objects\r\n   * it skips the canvas and group properties in deep cloning.\r\n   * @memberOf fabric.util.object\r\n   * @param {Object} destination Where to copy to\r\n   * @param {Object} source Where to copy from\r\n   * @param {Boolean} [deep] Whether to extend nested objects\r\n   * @return {Object}\r\n   */ function extend(destination, source, deep) {\n        // JScript DontEnum bug is not taken care of\n        // the deep clone is for internal use, is not meant to avoid\n        // javascript traps or cloning html element or self referenced objects.\n        if (deep) {\n            if (!fabric.isLikelyNode && source instanceof Element) {\n                // avoid cloning deep images, canvases,\n                destination = source;\n            } else if (source instanceof Array) {\n                destination = [];\n                for(var i = 0, len = source.length; i < len; i++){\n                    destination[i] = extend({}, source[i], deep);\n                }\n            } else if (source && typeof source === \"object\") {\n                for(var property in source){\n                    if (property === \"canvas\" || property === \"group\") {\n                        // we do not want to clone this props at all.\n                        // we want to keep the keys in the copy\n                        destination[property] = null;\n                    } else if (source.hasOwnProperty(property)) {\n                        destination[property] = extend({}, source[property], deep);\n                    }\n                }\n            } else {\n                // this sounds odd for an extend but is ok for recursive use\n                destination = source;\n            }\n        } else {\n            for(var property in source){\n                destination[property] = source[property];\n            }\n        }\n        return destination;\n    }\n    /**\r\n   * Creates an empty object and copies all enumerable properties of another object to it\r\n   * This method is mostly for internal use, and not intended for duplicating shapes in canvas. \r\n   * @memberOf fabric.util.object\r\n   * @param {Object} object Object to clone\r\n   * @param {Boolean} [deep] Whether to clone nested objects\r\n   * @return {Object}\r\n   */ //TODO: this function return an empty object if you try to clone null\n    function clone(object, deep) {\n        return extend({}, object, deep);\n    }\n    /** @namespace fabric.util.object */ fabric.util.object = {\n        extend: extend,\n        clone: clone\n    };\n    fabric.util.object.extend(fabric.util, fabric.Observable);\n})();\n(function() {\n    /**\r\n   * Camelizes a string\r\n   * @memberOf fabric.util.string\r\n   * @param {String} string String to camelize\r\n   * @return {String} Camelized version of a string\r\n   */ function camelize(string) {\n        return string.replace(/-+(.)?/g, function(match, character) {\n            return character ? character.toUpperCase() : \"\";\n        });\n    }\n    /**\r\n   * Capitalizes a string\r\n   * @memberOf fabric.util.string\r\n   * @param {String} string String to capitalize\r\n   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized\r\n   * and other letters stay untouched, if false first letter is capitalized\r\n   * and other letters are converted to lowercase.\r\n   * @return {String} Capitalized version of a string\r\n   */ function capitalize(string, firstLetterOnly) {\n        return string.charAt(0).toUpperCase() + (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());\n    }\n    /**\r\n   * Escapes XML in a string\r\n   * @memberOf fabric.util.string\r\n   * @param {String} string String to escape\r\n   * @return {String} Escaped version of a string\r\n   */ function escapeXml(string) {\n        return string.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    }\n    /**\r\n   * Divide a string in the user perceived single units\r\n   * @memberOf fabric.util.string\r\n   * @param {String} textstring String to escape\r\n   * @return {Array} array containing the graphemes\r\n   */ function graphemeSplit(textstring) {\n        var i = 0, chr, graphemes = [];\n        for(i = 0, chr; i < textstring.length; i++){\n            if ((chr = getWholeChar(textstring, i)) === false) {\n                continue;\n            }\n            graphemes.push(chr);\n        }\n        return graphemes;\n    }\n    // taken from mdn in the charAt doc page.\n    function getWholeChar(str, i) {\n        var code = str.charCodeAt(i);\n        if (isNaN(code)) {\n            return \"\"; // Position not found\n        }\n        if (code < 0xD800 || code > 0xDFFF) {\n            return str.charAt(i);\n        }\n        // High surrogate (could change last hex to 0xDB7F to treat high private\n        // surrogates as single characters)\n        if (0xD800 <= code && code <= 0xDBFF) {\n            if (str.length <= i + 1) {\n                throw \"High surrogate without following low surrogate\";\n            }\n            var next = str.charCodeAt(i + 1);\n            if (0xDC00 > next || next > 0xDFFF) {\n                throw \"High surrogate without following low surrogate\";\n            }\n            return str.charAt(i) + str.charAt(i + 1);\n        }\n        // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n        if (i === 0) {\n            throw \"Low surrogate without preceding high surrogate\";\n        }\n        var prev = str.charCodeAt(i - 1);\n        // (could change last hex to 0xDB7F to treat high private\n        // surrogates as single characters)\n        if (0xD800 > prev || prev > 0xDBFF) {\n            throw \"Low surrogate without preceding high surrogate\";\n        }\n        // We can pass over low surrogates now as the second component\n        // in a pair which we have already processed\n        return false;\n    }\n    /**\r\n   * String utilities\r\n   * @namespace fabric.util.string\r\n   */ fabric.util.string = {\n        camelize: camelize,\n        capitalize: capitalize,\n        escapeXml: escapeXml,\n        graphemeSplit: graphemeSplit\n    };\n})();\n(function() {\n    var slice = Array.prototype.slice, emptyFunction = function() {}, IS_DONTENUM_BUGGY = function() {\n        for(var p in {\n            toString: 1\n        }){\n            if (p === \"toString\") {\n                return false;\n            }\n        }\n        return true;\n    }(), /** @ignore */ addMethods = function(klass, source, parent) {\n        for(var property in source){\n            if (property in klass.prototype && typeof klass.prototype[property] === \"function\" && (source[property] + \"\").indexOf(\"callSuper\") > -1) {\n                klass.prototype[property] = function(property) {\n                    return function() {\n                        var superclass = this.constructor.superclass;\n                        this.constructor.superclass = parent;\n                        var returnValue = source[property].apply(this, arguments);\n                        this.constructor.superclass = superclass;\n                        if (property !== \"initialize\") {\n                            return returnValue;\n                        }\n                    };\n                }(property);\n            } else {\n                klass.prototype[property] = source[property];\n            }\n            if (IS_DONTENUM_BUGGY) {\n                if (source.toString !== Object.prototype.toString) {\n                    klass.prototype.toString = source.toString;\n                }\n                if (source.valueOf !== Object.prototype.valueOf) {\n                    klass.prototype.valueOf = source.valueOf;\n                }\n            }\n        }\n    };\n    function Subclass() {}\n    function callSuper(methodName) {\n        var parentMethod = null, _this = this;\n        // climb prototype chain to find method not equal to callee's method\n        while(_this.constructor.superclass){\n            var superClassMethod = _this.constructor.superclass.prototype[methodName];\n            if (_this[methodName] !== superClassMethod) {\n                parentMethod = superClassMethod;\n                break;\n            }\n            // eslint-disable-next-line\n            _this = _this.constructor.superclass.prototype;\n        }\n        if (!parentMethod) {\n            return console.log(\"tried to callSuper \" + methodName + \", method not found in prototype chain\", this);\n        }\n        return arguments.length > 1 ? parentMethod.apply(this, slice.call(arguments, 1)) : parentMethod.call(this);\n    }\n    /**\r\n   * Helper for creation of \"classes\".\r\n   * @memberOf fabric.util\r\n   * @param {Function} [parent] optional \"Class\" to inherit from\r\n   * @param {Object} [properties] Properties shared by all instances of this class\r\n   *                  (be careful modifying objects defined here as this would affect all instances)\r\n   */ function createClass() {\n        var parent = null, properties = slice.call(arguments, 0);\n        if (typeof properties[0] === \"function\") {\n            parent = properties.shift();\n        }\n        function klass() {\n            this.initialize.apply(this, arguments);\n        }\n        klass.superclass = parent;\n        klass.subclasses = [];\n        if (parent) {\n            Subclass.prototype = parent.prototype;\n            klass.prototype = new Subclass();\n            parent.subclasses.push(klass);\n        }\n        for(var i = 0, length = properties.length; i < length; i++){\n            addMethods(klass, properties[i], parent);\n        }\n        if (!klass.prototype.initialize) {\n            klass.prototype.initialize = emptyFunction;\n        }\n        klass.prototype.constructor = klass;\n        klass.prototype.callSuper = callSuper;\n        return klass;\n    }\n    fabric.util.createClass = createClass;\n})();\n(function() {\n    // since ie11 can use addEventListener but they do not support options, i need to check\n    var couldUseAttachEvent = !!fabric.document.createElement(\"div\").attachEvent, touchEvents = [\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\"\n    ];\n    /**\r\n   * Adds an event listener to an element\r\n   * @function\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element\r\n   * @param {String} eventName\r\n   * @param {Function} handler\r\n   */ fabric.util.addListener = function(element, eventName, handler, options) {\n        element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);\n    };\n    /**\r\n   * Removes an event listener from an element\r\n   * @function\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element\r\n   * @param {String} eventName\r\n   * @param {Function} handler\r\n   */ fabric.util.removeListener = function(element, eventName, handler, options) {\n        element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);\n    };\n    function getTouchInfo(event) {\n        var touchProp = event.changedTouches;\n        if (touchProp && touchProp[0]) {\n            return touchProp[0];\n        }\n        return event;\n    }\n    fabric.util.getPointer = function(event) {\n        var element = event.target, scroll = fabric.util.getScrollLeftTop(element), _evt = getTouchInfo(event);\n        return {\n            x: _evt.clientX + scroll.left,\n            y: _evt.clientY + scroll.top\n        };\n    };\n    fabric.util.isTouchEvent = function(event) {\n        return touchEvents.indexOf(event.type) > -1 || event.pointerType === \"touch\";\n    };\n})();\n(function() {\n    /**\r\n   * Cross-browser wrapper for setting element's style\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element\r\n   * @param {Object} styles\r\n   * @return {HTMLElement} Element that was passed as a first argument\r\n   */ function setStyle(element, styles) {\n        var elementStyle = element.style;\n        if (!elementStyle) {\n            return element;\n        }\n        if (typeof styles === \"string\") {\n            element.style.cssText += \";\" + styles;\n            return styles.indexOf(\"opacity\") > -1 ? setOpacity(element, styles.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1]) : element;\n        }\n        for(var property in styles){\n            if (property === \"opacity\") {\n                setOpacity(element, styles[property]);\n            } else {\n                var normalizedProperty = property === \"float\" || property === \"cssFloat\" ? typeof elementStyle.styleFloat === \"undefined\" ? \"cssFloat\" : \"styleFloat\" : property;\n                elementStyle.setProperty(normalizedProperty, styles[property]);\n            }\n        }\n        return element;\n    }\n    var parseEl = fabric.document.createElement(\"div\"), supportsOpacity = typeof parseEl.style.opacity === \"string\", supportsFilters = typeof parseEl.style.filter === \"string\", reOpacity = /alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/, /** @ignore */ setOpacity = function(element) {\n        return element;\n    };\n    if (supportsOpacity) {\n        /** @ignore */ setOpacity = function(element, value) {\n            element.style.opacity = value;\n            return element;\n        };\n    } else if (supportsFilters) {\n        /** @ignore */ setOpacity = function(element, value) {\n            var es = element.style;\n            if (element.currentStyle && !element.currentStyle.hasLayout) {\n                es.zoom = 1;\n            }\n            if (reOpacity.test(es.filter)) {\n                value = value >= 0.9999 ? \"\" : \"alpha(opacity=\" + value * 100 + \")\";\n                es.filter = es.filter.replace(reOpacity, value);\n            } else {\n                es.filter += \" alpha(opacity=\" + value * 100 + \")\";\n            }\n            return element;\n        };\n    }\n    fabric.util.setStyle = setStyle;\n})();\n(function() {\n    var _slice = Array.prototype.slice;\n    /**\r\n   * Takes id and returns an element with that id (if one exists in a document)\r\n   * @memberOf fabric.util\r\n   * @param {String|HTMLElement} id\r\n   * @return {HTMLElement|null}\r\n   */ function getById(id) {\n        return typeof id === \"string\" ? fabric.document.getElementById(id) : id;\n    }\n    var sliceCanConvertNodelists, /**\r\n       * Converts an array-like object (e.g. arguments or NodeList) to an array\r\n       * @memberOf fabric.util\r\n       * @param {Object} arrayLike\r\n       * @return {Array}\r\n       */ toArray = function(arrayLike) {\n        return _slice.call(arrayLike, 0);\n    };\n    try {\n        sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;\n    } catch (err) {}\n    if (!sliceCanConvertNodelists) {\n        toArray = function(arrayLike) {\n            var arr = new Array(arrayLike.length), i = arrayLike.length;\n            while(i--){\n                arr[i] = arrayLike[i];\n            }\n            return arr;\n        };\n    }\n    /**\r\n   * Creates specified element with specified attributes\r\n   * @memberOf fabric.util\r\n   * @param {String} tagName Type of an element to create\r\n   * @param {Object} [attributes] Attributes to set on an element\r\n   * @return {HTMLElement} Newly created element\r\n   */ function makeElement(tagName, attributes) {\n        var el = fabric.document.createElement(tagName);\n        for(var prop in attributes){\n            if (prop === \"class\") {\n                el.className = attributes[prop];\n            } else if (prop === \"for\") {\n                el.htmlFor = attributes[prop];\n            } else {\n                el.setAttribute(prop, attributes[prop]);\n            }\n        }\n        return el;\n    }\n    /**\r\n   * Adds class to an element\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to add class to\r\n   * @param {String} className Class to add to an element\r\n   */ function addClass(element, className) {\n        if (element && (\" \" + element.className + \" \").indexOf(\" \" + className + \" \") === -1) {\n            element.className += (element.className ? \" \" : \"\") + className;\n        }\n    }\n    /**\r\n   * Wraps element with another element\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to wrap\r\n   * @param {HTMLElement|String} wrapper Element to wrap with\r\n   * @param {Object} [attributes] Attributes to set on a wrapper\r\n   * @return {HTMLElement} wrapper\r\n   */ function wrapElement(element, wrapper, attributes) {\n        if (typeof wrapper === \"string\") {\n            wrapper = makeElement(wrapper, attributes);\n        }\n        if (element.parentNode) {\n            element.parentNode.replaceChild(wrapper, element);\n        }\n        wrapper.appendChild(element);\n        return wrapper;\n    }\n    /**\r\n   * Returns element scroll offsets\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to operate on\r\n   * @return {Object} Object with left/top values\r\n   */ function getScrollLeftTop(element) {\n        var left = 0, top = 0, docElement = fabric.document.documentElement, body = fabric.document.body || {\n            scrollLeft: 0,\n            scrollTop: 0\n        };\n        // While loop checks (and then sets element to) .parentNode OR .host\n        //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,\n        //  but the .parentNode of a root ShadowDOM node will always be null, instead\n        //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938\n        while(element && (element.parentNode || element.host)){\n            // Set element to element parent, or 'host' in case of ShadowDOM\n            element = element.parentNode || element.host;\n            if (element === fabric.document) {\n                left = body.scrollLeft || docElement.scrollLeft || 0;\n                top = body.scrollTop || docElement.scrollTop || 0;\n            } else {\n                left += element.scrollLeft || 0;\n                top += element.scrollTop || 0;\n            }\n            if (element.nodeType === 1 && element.style.position === \"fixed\") {\n                break;\n            }\n        }\n        return {\n            left: left,\n            top: top\n        };\n    }\n    /**\r\n   * Returns offset for a given element\r\n   * @function\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to get offset for\r\n   * @return {Object} Object with \"left\" and \"top\" properties\r\n   */ function getElementOffset(element) {\n        var docElem, doc = element && element.ownerDocument, box = {\n            left: 0,\n            top: 0\n        }, offset = {\n            left: 0,\n            top: 0\n        }, scrollLeftTop, offsetAttributes = {\n            borderLeftWidth: \"left\",\n            borderTopWidth: \"top\",\n            paddingLeft: \"left\",\n            paddingTop: \"top\"\n        };\n        if (!doc) {\n            return offset;\n        }\n        for(var attr in offsetAttributes){\n            offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;\n        }\n        docElem = doc.documentElement;\n        if (typeof element.getBoundingClientRect !== \"undefined\") {\n            box = element.getBoundingClientRect();\n        }\n        scrollLeftTop = getScrollLeftTop(element);\n        return {\n            left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,\n            top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top\n        };\n    }\n    /**\r\n   * Returns style attribute value of a given element\r\n   * @memberOf fabric.util\r\n   * @param {HTMLElement} element Element to get style attribute for\r\n   * @param {String} attr Style attribute to get for element\r\n   * @return {String} Style attribute value of the given element.\r\n   */ var getElementStyle;\n    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {\n        getElementStyle = function(element, attr) {\n            var style = fabric.document.defaultView.getComputedStyle(element, null);\n            return style ? style[attr] : undefined;\n        };\n    } else {\n        getElementStyle = function(element, attr) {\n            var value = element.style[attr];\n            if (!value && element.currentStyle) {\n                value = element.currentStyle[attr];\n            }\n            return value;\n        };\n    }\n    (function() {\n        var style = fabric.document.documentElement.style, selectProp = \"userSelect\" in style ? \"userSelect\" : \"MozUserSelect\" in style ? \"MozUserSelect\" : \"WebkitUserSelect\" in style ? \"WebkitUserSelect\" : \"KhtmlUserSelect\" in style ? \"KhtmlUserSelect\" : \"\";\n        /**\r\n     * Makes element unselectable\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to make unselectable\r\n     * @return {HTMLElement} Element that was passed in\r\n     */ function makeElementUnselectable(element) {\n            if (typeof element.onselectstart !== \"undefined\") {\n                element.onselectstart = fabric.util.falseFunction;\n            }\n            if (selectProp) {\n                element.style[selectProp] = \"none\";\n            } else if (typeof element.unselectable === \"string\") {\n                element.unselectable = \"on\";\n            }\n            return element;\n        }\n        /**\r\n     * Makes element selectable\r\n     * @memberOf fabric.util\r\n     * @param {HTMLElement} element Element to make selectable\r\n     * @return {HTMLElement} Element that was passed in\r\n     */ function makeElementSelectable(element) {\n            if (typeof element.onselectstart !== \"undefined\") {\n                element.onselectstart = null;\n            }\n            if (selectProp) {\n                element.style[selectProp] = \"\";\n            } else if (typeof element.unselectable === \"string\") {\n                element.unselectable = \"\";\n            }\n            return element;\n        }\n        fabric.util.makeElementUnselectable = makeElementUnselectable;\n        fabric.util.makeElementSelectable = makeElementSelectable;\n    })();\n    function getNodeCanvas(element) {\n        var impl = fabric.jsdomImplForWrapper(element);\n        return impl._canvas || impl._image;\n    }\n    ;\n    function cleanUpJsdomNode(element) {\n        if (!fabric.isLikelyNode) {\n            return;\n        }\n        var impl = fabric.jsdomImplForWrapper(element);\n        if (impl) {\n            impl._image = null;\n            impl._canvas = null;\n            // unsure if necessary\n            impl._currentSrc = null;\n            impl._attributes = null;\n            impl._classList = null;\n        }\n    }\n    function setImageSmoothing(ctx, value) {\n        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;\n        ctx.imageSmoothingEnabled = value;\n    }\n    /**\r\n   * setImageSmoothing sets the context imageSmoothingEnabled property.\r\n   * Used by canvas and by ImageObject.\r\n   * @memberOf fabric.util\r\n   * @since 4.0.0\r\n   * @param {HTMLRenderingContext2D} ctx to set on\r\n   * @param {Boolean} value true or false\r\n   */ fabric.util.setImageSmoothing = setImageSmoothing;\n    fabric.util.getById = getById;\n    fabric.util.toArray = toArray;\n    fabric.util.addClass = addClass;\n    fabric.util.makeElement = makeElement;\n    fabric.util.wrapElement = wrapElement;\n    fabric.util.getScrollLeftTop = getScrollLeftTop;\n    fabric.util.getElementOffset = getElementOffset;\n    fabric.util.getNodeCanvas = getNodeCanvas;\n    fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;\n})();\n(function() {\n    function addParamToUrl(url, param) {\n        return url + (/\\?/.test(url) ? \"&\" : \"?\") + param;\n    }\n    function emptyFn() {}\n    /**\r\n   * Cross-browser abstraction for sending XMLHttpRequest\r\n   * @memberOf fabric.util\r\n   * @param {String} url URL to send XMLHttpRequest to\r\n   * @param {Object} [options] Options object\r\n   * @param {String} [options.method=\"GET\"]\r\n   * @param {String} [options.parameters] parameters to append to url in GET or in body\r\n   * @param {String} [options.body] body to send with POST or PUT request\r\n   * @param {Function} options.onComplete Callback to invoke when request is completed\r\n   * @return {XMLHttpRequest} request\r\n   */ function request(url, options) {\n        options || (options = {});\n        var method = options.method ? options.method.toUpperCase() : \"GET\", onComplete = options.onComplete || function() {}, xhr = new fabric.window.XMLHttpRequest(), body = options.body || options.parameters;\n        /** @ignore */ xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                onComplete(xhr);\n                xhr.onreadystatechange = emptyFn;\n            }\n        };\n        if (method === \"GET\") {\n            body = null;\n            if (typeof options.parameters === \"string\") {\n                url = addParamToUrl(url, options.parameters);\n            }\n        }\n        xhr.open(method, url, true);\n        if (method === \"POST\" || method === \"PUT\") {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n        xhr.send(body);\n        return xhr;\n    }\n    fabric.util.request = request;\n})();\n/**\r\n * Wrapper around `console.log` (when available)\r\n * @param {*} [values] Values to log\r\n */ fabric.log = console.log;\n/**\r\n * Wrapper around `console.warn` (when available)\r\n * @param {*} [values] Values to log as a warning\r\n */ fabric.warn = console.warn;\n(function() {\n    var extend = fabric.util.object.extend, clone = fabric.util.object.clone;\n    /**\r\n   * @typedef {Object} AnimationOptions\r\n   * Animation of a value or list of values.\r\n   * When using lists, think of something like this:\r\n   * fabric.util.animate({\r\n   *   startValue: [1, 2, 3],\r\n   *   endValue: [2, 4, 6],\r\n   *   onChange: function([a, b, c]) {\r\n   *     canvas.zoomToPoint({x: b, y: c}, a)\r\n   *     canvas.renderAll()\r\n   *   }\r\n   * });\r\n   * @example\r\n   * @property {Function} [onChange] Callback; invoked on every value change\r\n   * @property {Function} [onComplete] Callback; invoked when value change is completed\r\n   * @example\r\n   * // Note: startValue, endValue, and byValue must match the type\r\n   * var animationOptions = { startValue: 0, endValue: 1, byValue: 0.25 }\r\n   * var animationOptions = { startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] }\r\n   * @property {number | number[]} [startValue=0] Starting value\r\n   * @property {number | number[]} [endValue=100] Ending value\r\n   * @property {number | number[]} [byValue=100] Value to modify the property by\r\n   * @property {Function} [easing] Easing function\r\n   * @property {Number} [duration=500] Duration of change (in ms)\r\n   * @property {Function} [abort] Additional function with logic. If returns true, animation aborts.\r\n   *\r\n   * @typedef {() => void} CancelFunction\r\n   *\r\n   * @typedef {Object} AnimationCurrentState\r\n   * @property {number | number[]} currentValue value in range [`startValue`, `endValue`]\r\n   * @property {number} completionRate value in range [0, 1]\r\n   * @property {number} durationRate value in range [0, 1]\r\n   *\r\n   * @typedef {(AnimationOptions & AnimationCurrentState & { cancel: CancelFunction }} AnimationContext\r\n   */ /**\r\n   * Array holding all running animations\r\n   * @memberof fabric\r\n   * @type {AnimationContext[]}\r\n   */ var RUNNING_ANIMATIONS = [];\n    fabric.util.object.extend(RUNNING_ANIMATIONS, {\n        /**\r\n     * cancel all running animations at the next requestAnimFrame\r\n     * @returns {AnimationContext[]}\r\n     */ cancelAll: function() {\n            var animations = this.splice(0);\n            animations.forEach(function(animation) {\n                animation.cancel();\n            });\n            return animations;\n        },\n        /**\r\n     * cancel all running animations attached to canvas at the next requestAnimFrame\r\n     * @param {fabric.Canvas} canvas\r\n     * @returns {AnimationContext[]}\r\n     */ cancelByCanvas: function(canvas) {\n            if (!canvas) {\n                return [];\n            }\n            var cancelled = this.filter(function(animation) {\n                return typeof animation.target === \"object\" && animation.target.canvas === canvas;\n            });\n            cancelled.forEach(function(animation) {\n                animation.cancel();\n            });\n            return cancelled;\n        },\n        /**\r\n     * cancel all running animations for target at the next requestAnimFrame\r\n     * @param {*} target\r\n     * @returns {AnimationContext[]}\r\n     */ cancelByTarget: function(target) {\n            var cancelled = this.findAnimationsByTarget(target);\n            cancelled.forEach(function(animation) {\n                animation.cancel();\n            });\n            return cancelled;\n        },\n        /**\r\n     *\r\n     * @param {CancelFunction} cancelFunc the function returned by animate\r\n     * @returns {number}\r\n     */ findAnimationIndex: function(cancelFunc) {\n            return this.indexOf(this.findAnimation(cancelFunc));\n        },\n        /**\r\n     *\r\n     * @param {CancelFunction} cancelFunc the function returned by animate\r\n     * @returns {AnimationContext | undefined} animation's options object\r\n     */ findAnimation: function(cancelFunc) {\n            return this.find(function(animation) {\n                return animation.cancel === cancelFunc;\n            });\n        },\n        /**\r\n     *\r\n     * @param {*} target the object that is assigned to the target property of the animation context\r\n     * @returns {AnimationContext[]} array of animation options object associated with target\r\n     */ findAnimationsByTarget: function(target) {\n            if (!target) {\n                return [];\n            }\n            return this.filter(function(animation) {\n                return animation.target === target;\n            });\n        }\n    });\n    function noop() {\n        return false;\n    }\n    function defaultEasing(t, b, c, d) {\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\n    }\n    /**\r\n   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.\r\n   * @memberOf fabric.util\r\n   * @param {AnimationOptions} [options] Animation options\r\n   * @example\r\n   * // Note: startValue, endValue, and byValue must match the type\r\n   * fabric.util.animate({ startValue: 0, endValue: 1, byValue: 0.25 })\r\n   * fabric.util.animate({ startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] })\r\n   * @returns {CancelFunction} cancel function\r\n   */ function animate(options) {\n        options || (options = {});\n        var cancel = false, context, removeFromRegistry = function() {\n            var index = fabric.runningAnimations.indexOf(context);\n            return index > -1 && fabric.runningAnimations.splice(index, 1)[0];\n        };\n        context = extend(clone(options), {\n            cancel: function() {\n                cancel = true;\n                return removeFromRegistry();\n            },\n            currentValue: \"startValue\" in options ? options.startValue : 0,\n            completionRate: 0,\n            durationRate: 0\n        });\n        fabric.runningAnimations.push(context);\n        requestAnimFrame(function(timestamp) {\n            var start = timestamp || +new Date(), duration = options.duration || 500, finish = start + duration, time, onChange = options.onChange || noop, abort = options.abort || noop, onComplete = options.onComplete || noop, easing = options.easing || defaultEasing, isMany = \"startValue\" in options ? options.startValue.length > 0 : false, startValue = \"startValue\" in options ? options.startValue : 0, endValue = \"endValue\" in options ? options.endValue : 100, byValue = options.byValue || (isMany ? startValue.map(function(value, i) {\n                return endValue[i] - startValue[i];\n            }) : endValue - startValue);\n            options.onStart && options.onStart();\n            (function tick(ticktime) {\n                time = ticktime || +new Date();\n                var currentTime = time > finish ? duration : time - start, timePerc = currentTime / duration, current = isMany ? startValue.map(function(_value, i) {\n                    return easing(currentTime, startValue[i], byValue[i], duration);\n                }) : easing(currentTime, startValue, byValue, duration), valuePerc = isMany ? Math.abs((current[0] - startValue[0]) / byValue[0]) : Math.abs((current - startValue) / byValue);\n                //  update context\n                context.currentValue = isMany ? current.slice() : current;\n                context.completionRate = valuePerc;\n                context.durationRate = timePerc;\n                if (cancel) {\n                    return;\n                }\n                if (abort(current, valuePerc, timePerc)) {\n                    removeFromRegistry();\n                    return;\n                }\n                if (time > finish) {\n                    //  update context\n                    context.currentValue = isMany ? endValue.slice() : endValue;\n                    context.completionRate = 1;\n                    context.durationRate = 1;\n                    //  execute callbacks\n                    onChange(isMany ? endValue.slice() : endValue, 1, 1);\n                    onComplete(endValue, 1, 1);\n                    removeFromRegistry();\n                    return;\n                } else {\n                    onChange(current, valuePerc, timePerc);\n                    requestAnimFrame(tick);\n                }\n            })(start);\n        });\n        return context.cancel;\n    }\n    var _requestAnimFrame = fabric.window.requestAnimationFrame || fabric.window.webkitRequestAnimationFrame || fabric.window.mozRequestAnimationFrame || fabric.window.oRequestAnimationFrame || fabric.window.msRequestAnimationFrame || function(callback) {\n        return fabric.window.setTimeout(callback, 1000 / 60);\n    };\n    var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;\n    /**\r\n   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method\r\n   * @memberOf fabric.util\r\n   * @param {Function} callback Callback to invoke\r\n   * @param {DOMElement} element optional Element to associate with animation\r\n   */ function requestAnimFrame() {\n        return _requestAnimFrame.apply(fabric.window, arguments);\n    }\n    function cancelAnimFrame() {\n        return _cancelAnimFrame.apply(fabric.window, arguments);\n    }\n    fabric.util.animate = animate;\n    fabric.util.requestAnimFrame = requestAnimFrame;\n    fabric.util.cancelAnimFrame = cancelAnimFrame;\n    fabric.runningAnimations = RUNNING_ANIMATIONS;\n})();\n(function() {\n    // Calculate an in-between color. Returns a \"rgba()\" string.\n    // Credit: Edwin Martin <edwin@bitstorm.org>\n    //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js\n    function calculateColor(begin, end, pos) {\n        var color = \"rgba(\" + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + \",\" + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + \",\" + parseInt(begin[2] + pos * (end[2] - begin[2]), 10);\n        color += \",\" + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);\n        color += \")\";\n        return color;\n    }\n    /**\r\n   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.\r\n   * @memberOf fabric.util\r\n   * @param {String} fromColor The starting color in hex or rgb(a) format.\r\n   * @param {String} toColor The starting color in hex or rgb(a) format.\r\n   * @param {Number} [duration] Duration of change (in ms).\r\n   * @param {Object} [options] Animation options\r\n   * @param {Function} [options.onChange] Callback; invoked on every value change\r\n   * @param {Function} [options.onComplete] Callback; invoked when value change is completed\r\n   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.\r\n   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.\r\n   * @returns {Function} abort function\r\n   */ function animateColor(fromColor, toColor, duration, options) {\n        var startColor = new fabric.Color(fromColor).getSource(), endColor = new fabric.Color(toColor).getSource(), originalOnComplete = options.onComplete, originalOnChange = options.onChange;\n        options = options || {};\n        return fabric.util.animate(fabric.util.object.extend(options, {\n            duration: duration || 500,\n            startValue: startColor,\n            endValue: endColor,\n            byValue: endColor,\n            easing: function(currentTime, startValue, byValue, duration) {\n                var posValue = options.colorEasing ? options.colorEasing(currentTime, duration) : 1 - Math.cos(currentTime / duration * (Math.PI / 2));\n                return calculateColor(startValue, byValue, posValue);\n            },\n            // has to take in account for color restoring;\n            onComplete: function(current, valuePerc, timePerc) {\n                if (originalOnComplete) {\n                    return originalOnComplete(calculateColor(endColor, endColor, 0), valuePerc, timePerc);\n                }\n            },\n            onChange: function(current, valuePerc, timePerc) {\n                if (originalOnChange) {\n                    if (Array.isArray(current)) {\n                        return originalOnChange(calculateColor(current, current, 0), valuePerc, timePerc);\n                    }\n                    originalOnChange(current, valuePerc, timePerc);\n                }\n            }\n        }));\n    }\n    fabric.util.animateColor = animateColor;\n})();\n(function(global) {\n    \"use strict\";\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */ var fabric = global.fabric || (global.fabric = {});\n    if (fabric.Point) {\n        fabric.warn(\"fabric.Point is already defined\");\n        return;\n    }\n    fabric.Point = Point;\n    /**\r\n   * Point class\r\n   * @class fabric.Point\r\n   * @memberOf fabric\r\n   * @constructor\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @return {fabric.Point} thisArg\r\n   */ function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    Point.prototype = /** @lends fabric.Point.prototype */ {\n        type: \"point\",\n        constructor: Point,\n        /**\r\n     * Adds another point to this one and returns another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} new Point instance with added values\r\n     */ add: function(that) {\n            return new Point(this.x + that.x, this.y + that.y);\n        },\n        /**\r\n     * Adds another point to this one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */ addEquals: function(that) {\n            this.x += that.x;\n            this.y += that.y;\n            return this;\n        },\n        /**\r\n     * Adds value to this point and returns a new one\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} new Point with added value\r\n     */ scalarAdd: function(scalar) {\n            return new Point(this.x + scalar, this.y + scalar);\n        },\n        /**\r\n     * Adds value to this point\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */ scalarAddEquals: function(scalar) {\n            this.x += scalar;\n            this.y += scalar;\n            return this;\n        },\n        /**\r\n     * Subtracts another point from this point and returns a new one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} new Point object with subtracted values\r\n     */ subtract: function(that) {\n            return new Point(this.x - that.x, this.y - that.y);\n        },\n        /**\r\n     * Subtracts another point from this point\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */ subtractEquals: function(that) {\n            this.x -= that.x;\n            this.y -= that.y;\n            return this;\n        },\n        /**\r\n     * Subtracts value from this point and returns a new one\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point}\r\n     */ scalarSubtract: function(scalar) {\n            return new Point(this.x - scalar, this.y - scalar);\n        },\n        /**\r\n     * Subtracts value from this point\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */ scalarSubtractEquals: function(scalar) {\n            this.x -= scalar;\n            this.y -= scalar;\n            return this;\n        },\n        /**\r\n     * Multiplies this point by a value and returns a new one\r\n     * TODO: rename in scalarMultiply in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point}\r\n     */ multiply: function(scalar) {\n            return new Point(this.x * scalar, this.y * scalar);\n        },\n        /**\r\n     * Multiplies this point by a value\r\n     * TODO: rename in scalarMultiplyEquals in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */ multiplyEquals: function(scalar) {\n            this.x *= scalar;\n            this.y *= scalar;\n            return this;\n        },\n        /**\r\n     * Divides this point by a value and returns a new one\r\n     * TODO: rename in scalarDivide in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point}\r\n     */ divide: function(scalar) {\n            return new Point(this.x / scalar, this.y / scalar);\n        },\n        /**\r\n     * Divides this point by a value\r\n     * TODO: rename in scalarDivideEquals in 2.0\r\n     * @param {Number} scalar\r\n     * @return {fabric.Point} thisArg\r\n     * @chainable\r\n     */ divideEquals: function(scalar) {\n            this.x /= scalar;\n            this.y /= scalar;\n            return this;\n        },\n        /**\r\n     * Returns true if this point is equal to another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */ eq: function(that) {\n            return this.x === that.x && this.y === that.y;\n        },\n        /**\r\n     * Returns true if this point is less than another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */ lt: function(that) {\n            return this.x < that.x && this.y < that.y;\n        },\n        /**\r\n     * Returns true if this point is less than or equal to another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */ lte: function(that) {\n            return this.x <= that.x && this.y <= that.y;\n        },\n        /**\r\n\r\n     * Returns true if this point is greater another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */ gt: function(that) {\n            return this.x > that.x && this.y > that.y;\n        },\n        /**\r\n     * Returns true if this point is greater than or equal to another one\r\n     * @param {fabric.Point} that\r\n     * @return {Boolean}\r\n     */ gte: function(that) {\n            return this.x >= that.x && this.y >= that.y;\n        },\n        /**\r\n     * Returns new point which is the result of linear interpolation with this one and another one\r\n     * @param {fabric.Point} that\r\n     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5\r\n     * @return {fabric.Point}\r\n     */ lerp: function(that, t) {\n            if (typeof t === \"undefined\") {\n                t = 0.5;\n            }\n            t = Math.max(Math.min(1, t), 0);\n            return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);\n        },\n        /**\r\n     * Returns distance from this point and another one\r\n     * @param {fabric.Point} that\r\n     * @return {Number}\r\n     */ distanceFrom: function(that) {\n            var dx = this.x - that.x, dy = this.y - that.y;\n            return Math.sqrt(dx * dx + dy * dy);\n        },\n        /**\r\n     * Returns the point between this point and another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point}\r\n     */ midPointFrom: function(that) {\n            return this.lerp(that);\n        },\n        /**\r\n     * Returns a new point which is the min of this and another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point}\r\n     */ min: function(that) {\n            return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));\n        },\n        /**\r\n     * Returns a new point which is the max of this and another one\r\n     * @param {fabric.Point} that\r\n     * @return {fabric.Point}\r\n     */ max: function(that) {\n            return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));\n        },\n        /**\r\n     * Returns string representation of this point\r\n     * @return {String}\r\n     */ toString: function() {\n            return this.x + \",\" + this.y;\n        },\n        /**\r\n     * Sets x/y of this point\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @chainable\r\n     */ setXY: function(x, y) {\n            this.x = x;\n            this.y = y;\n            return this;\n        },\n        /**\r\n     * Sets x of this point\r\n     * @param {Number} x\r\n     * @chainable\r\n     */ setX: function(x) {\n            this.x = x;\n            return this;\n        },\n        /**\r\n     * Sets y of this point\r\n     * @param {Number} y\r\n     * @chainable\r\n     */ setY: function(y) {\n            this.y = y;\n            return this;\n        },\n        /**\r\n     * Sets x/y of this point from another point\r\n     * @param {fabric.Point} that\r\n     * @chainable\r\n     */ setFromPoint: function(that) {\n            this.x = that.x;\n            this.y = that.y;\n            return this;\n        },\n        /**\r\n     * Swaps x/y of this point and another point\r\n     * @param {fabric.Point} that\r\n     */ swap: function(that) {\n            var x = this.x, y = this.y;\n            this.x = that.x;\n            this.y = that.y;\n            that.x = x;\n            that.y = y;\n        },\n        /**\r\n     * return a cloned instance of the point\r\n     * @return {fabric.Point}\r\n     */ clone: function() {\n            return new Point(this.x, this.y);\n        }\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */ var fabric = global.fabric || (global.fabric = {});\n    if (fabric.Intersection) {\n        fabric.warn(\"fabric.Intersection is already defined\");\n        return;\n    }\n    /**\r\n   * Intersection class\r\n   * @class fabric.Intersection\r\n   * @memberOf fabric\r\n   * @constructor\r\n   */ function Intersection(status) {\n        this.status = status;\n        this.points = [];\n    }\n    fabric.Intersection = Intersection;\n    fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {\n        constructor: Intersection,\n        /**\r\n     * Appends a point to intersection\r\n     * @param {fabric.Point} point\r\n     * @return {fabric.Intersection} thisArg\r\n     * @chainable\r\n     */ appendPoint: function(point) {\n            this.points.push(point);\n            return this;\n        },\n        /**\r\n     * Appends points to intersection\r\n     * @param {Array} points\r\n     * @return {fabric.Intersection} thisArg\r\n     * @chainable\r\n     */ appendPoints: function(points) {\n            this.points = this.points.concat(points);\n            return this;\n        }\n    };\n    /**\r\n   * Checks if one line intersects another\r\n   * TODO: rename in intersectSegmentSegment\r\n   * @static\r\n   * @param {fabric.Point} a1\r\n   * @param {fabric.Point} a2\r\n   * @param {fabric.Point} b1\r\n   * @param {fabric.Point} b2\r\n   * @return {fabric.Intersection}\r\n   */ fabric.Intersection.intersectLineLine = function(a1, a2, b1, b2) {\n        var result, uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x), ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x), uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n        if (uB !== 0) {\n            var ua = uaT / uB, ub = ubT / uB;\n            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));\n            } else {\n                result = new Intersection();\n            }\n        } else {\n            if (uaT === 0 || ubT === 0) {\n                result = new Intersection(\"Coincident\");\n            } else {\n                result = new Intersection(\"Parallel\");\n            }\n        }\n        return result;\n    };\n    /**\r\n   * Checks if line intersects polygon\r\n   * TODO: rename in intersectSegmentPolygon\r\n   * fix detection of coincident\r\n   * @static\r\n   * @param {fabric.Point} a1\r\n   * @param {fabric.Point} a2\r\n   * @param {Array} points\r\n   * @return {fabric.Intersection}\r\n   */ fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {\n        var result = new Intersection(), length = points.length, b1, b2, inter, i;\n        for(i = 0; i < length; i++){\n            b1 = points[i];\n            b2 = points[(i + 1) % length];\n            inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n            result.appendPoints(inter.points);\n        }\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        return result;\n    };\n    /**\r\n   * Checks if polygon intersects another polygon\r\n   * @static\r\n   * @param {Array} points1\r\n   * @param {Array} points2\r\n   * @return {fabric.Intersection}\r\n   */ fabric.Intersection.intersectPolygonPolygon = function(points1, points2) {\n        var result = new Intersection(), length = points1.length, i;\n        for(i = 0; i < length; i++){\n            var a1 = points1[i], a2 = points1[(i + 1) % length], inter = Intersection.intersectLinePolygon(a1, a2, points2);\n            result.appendPoints(inter.points);\n        }\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        return result;\n    };\n    /**\r\n   * Checks if polygon intersects rectangle\r\n   * @static\r\n   * @param {Array} points\r\n   * @param {fabric.Point} r1\r\n   * @param {fabric.Point} r2\r\n   * @return {fabric.Intersection}\r\n   */ fabric.Intersection.intersectPolygonRectangle = function(points, r1, r2) {\n        var min = r1.min(r2), max = r1.max(r2), topRight = new fabric.Point(max.x, min.y), bottomLeft = new fabric.Point(min.x, max.y), inter1 = Intersection.intersectLinePolygon(min, topRight, points), inter2 = Intersection.intersectLinePolygon(topRight, max, points), inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points), inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points), result = new Intersection();\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        return result;\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {});\n    if (fabric.Color) {\n        fabric.warn(\"fabric.Color is already defined.\");\n        return;\n    }\n    /**\r\n   * Color class\r\n   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;\r\n   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.\r\n   *\r\n   * @class fabric.Color\r\n   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list\r\n   * @return {fabric.Color} thisArg\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}\r\n   */ function Color(color) {\n        if (!color) {\n            this.setSource([\n                0,\n                0,\n                0,\n                1\n            ]);\n        } else {\n            this._tryParsingColor(color);\n        }\n    }\n    fabric.Color = Color;\n    fabric.Color.prototype = /** @lends fabric.Color.prototype */ {\n        /**\r\n     * @private\r\n     * @param {String|Array} color Color value to parse\r\n     */ _tryParsingColor: function(color) {\n            var source;\n            if (color in Color.colorNameMap) {\n                color = Color.colorNameMap[color];\n            }\n            if (color === \"transparent\") {\n                source = [\n                    255,\n                    255,\n                    255,\n                    0\n                ];\n            }\n            if (!source) {\n                source = Color.sourceFromHex(color);\n            }\n            if (!source) {\n                source = Color.sourceFromRgb(color);\n            }\n            if (!source) {\n                source = Color.sourceFromHsl(color);\n            }\n            if (!source) {\n                //if color is not recognize let's make black as canvas does\n                source = [\n                    0,\n                    0,\n                    0,\n                    1\n                ];\n            }\n            if (source) {\n                this.setSource(source);\n            }\n        },\n        /**\r\n     * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n     * @private\r\n     * @param {Number} r Red color value\r\n     * @param {Number} g Green color value\r\n     * @param {Number} b Blue color value\r\n     * @return {Array} Hsl color\r\n     */ _rgbToHsl: function(r, g, b) {\n            r /= 255;\n            g /= 255;\n            b /= 255;\n            var h, s, l, max = fabric.util.array.max([\n                r,\n                g,\n                b\n            ]), min = fabric.util.array.min([\n                r,\n                g,\n                b\n            ]);\n            l = (max + min) / 2;\n            if (max === min) {\n                h = s = 0; // achromatic\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch(max){\n                    case r:\n                        h = (g - b) / d + (g < b ? 6 : 0);\n                        break;\n                    case g:\n                        h = (b - r) / d + 2;\n                        break;\n                    case b:\n                        h = (r - g) / d + 4;\n                        break;\n                }\n                h /= 6;\n            }\n            return [\n                Math.round(h * 360),\n                Math.round(s * 100),\n                Math.round(l * 100)\n            ];\n        },\n        /**\r\n     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n     * @return {Array}\r\n     */ getSource: function() {\n            return this._source;\n        },\n        /**\r\n     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])\r\n     * @param {Array} source\r\n     */ setSource: function(source) {\n            this._source = source;\n        },\n        /**\r\n     * Returns color representation in RGB format\r\n     * @return {String} ex: rgb(0-255,0-255,0-255)\r\n     */ toRgb: function() {\n            var source = this.getSource();\n            return \"rgb(\" + source[0] + \",\" + source[1] + \",\" + source[2] + \")\";\n        },\n        /**\r\n     * Returns color representation in RGBA format\r\n     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)\r\n     */ toRgba: function() {\n            var source = this.getSource();\n            return \"rgba(\" + source[0] + \",\" + source[1] + \",\" + source[2] + \",\" + source[3] + \")\";\n        },\n        /**\r\n     * Returns color representation in HSL format\r\n     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)\r\n     */ toHsl: function() {\n            var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);\n            return \"hsl(\" + hsl[0] + \",\" + hsl[1] + \"%,\" + hsl[2] + \"%)\";\n        },\n        /**\r\n     * Returns color representation in HSLA format\r\n     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)\r\n     */ toHsla: function() {\n            var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);\n            return \"hsla(\" + hsl[0] + \",\" + hsl[1] + \"%,\" + hsl[2] + \"%,\" + source[3] + \")\";\n        },\n        /**\r\n     * Returns color representation in HEX format\r\n     * @return {String} ex: FF5555\r\n     */ toHex: function() {\n            var source = this.getSource(), r, g, b;\n            r = source[0].toString(16);\n            r = r.length === 1 ? \"0\" + r : r;\n            g = source[1].toString(16);\n            g = g.length === 1 ? \"0\" + g : g;\n            b = source[2].toString(16);\n            b = b.length === 1 ? \"0\" + b : b;\n            return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();\n        },\n        /**\r\n     * Returns color representation in HEXA format\r\n     * @return {String} ex: FF5555CC\r\n     */ toHexa: function() {\n            var source = this.getSource(), a;\n            a = Math.round(source[3] * 255);\n            a = a.toString(16);\n            a = a.length === 1 ? \"0\" + a : a;\n            return this.toHex() + a.toUpperCase();\n        },\n        /**\r\n     * Gets value of alpha channel for this color\r\n     * @return {Number} 0-1\r\n     */ getAlpha: function() {\n            return this.getSource()[3];\n        },\n        /**\r\n     * Sets value of alpha channel for this color\r\n     * @param {Number} alpha Alpha value 0-1\r\n     * @return {fabric.Color} thisArg\r\n     */ setAlpha: function(alpha) {\n            var source = this.getSource();\n            source[3] = alpha;\n            this.setSource(source);\n            return this;\n        },\n        /**\r\n     * Transforms color to its grayscale representation\r\n     * @return {fabric.Color} thisArg\r\n     */ toGrayscale: function() {\n            var source = this.getSource(), average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10), currentAlpha = source[3];\n            this.setSource([\n                average,\n                average,\n                average,\n                currentAlpha\n            ]);\n            return this;\n        },\n        /**\r\n     * Transforms color to its black and white representation\r\n     * @param {Number} threshold\r\n     * @return {fabric.Color} thisArg\r\n     */ toBlackWhite: function(threshold) {\n            var source = this.getSource(), average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), currentAlpha = source[3];\n            threshold = threshold || 127;\n            average = Number(average) < Number(threshold) ? 0 : 255;\n            this.setSource([\n                average,\n                average,\n                average,\n                currentAlpha\n            ]);\n            return this;\n        },\n        /**\r\n     * Overlays color with another color\r\n     * @param {String|fabric.Color} otherColor\r\n     * @return {fabric.Color} thisArg\r\n     */ overlayWith: function(otherColor) {\n            if (!(otherColor instanceof Color)) {\n                otherColor = new Color(otherColor);\n            }\n            var result = [], alpha = this.getAlpha(), otherAlpha = 0.5, source = this.getSource(), otherSource = otherColor.getSource(), i;\n            for(i = 0; i < 3; i++){\n                result.push(Math.round(source[i] * (1 - otherAlpha) + otherSource[i] * otherAlpha));\n            }\n            result[3] = alpha;\n            this.setSource(result);\n            return this;\n        }\n    };\n    /**\r\n   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   */ // eslint-disable-next-line max-len\n    fabric.Color.reRGBa = /^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i;\n    /**\r\n   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   */ fabric.Color.reHSLa = /^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i;\n    /**\r\n   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   */ fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n    /**\r\n   * Map of the 148 color names with HEX code\r\n   * @static\r\n   * @field\r\n   * @memberOf fabric.Color\r\n   * @see: https://www.w3.org/TR/css3-color/#svg-color\r\n   */ fabric.Color.colorNameMap = {\n        aliceblue: \"#F0F8FF\",\n        antiquewhite: \"#FAEBD7\",\n        aqua: \"#00FFFF\",\n        aquamarine: \"#7FFFD4\",\n        azure: \"#F0FFFF\",\n        beige: \"#F5F5DC\",\n        bisque: \"#FFE4C4\",\n        black: \"#000000\",\n        blanchedalmond: \"#FFEBCD\",\n        blue: \"#0000FF\",\n        blueviolet: \"#8A2BE2\",\n        brown: \"#A52A2A\",\n        burlywood: \"#DEB887\",\n        cadetblue: \"#5F9EA0\",\n        chartreuse: \"#7FFF00\",\n        chocolate: \"#D2691E\",\n        coral: \"#FF7F50\",\n        cornflowerblue: \"#6495ED\",\n        cornsilk: \"#FFF8DC\",\n        crimson: \"#DC143C\",\n        cyan: \"#00FFFF\",\n        darkblue: \"#00008B\",\n        darkcyan: \"#008B8B\",\n        darkgoldenrod: \"#B8860B\",\n        darkgray: \"#A9A9A9\",\n        darkgrey: \"#A9A9A9\",\n        darkgreen: \"#006400\",\n        darkkhaki: \"#BDB76B\",\n        darkmagenta: \"#8B008B\",\n        darkolivegreen: \"#556B2F\",\n        darkorange: \"#FF8C00\",\n        darkorchid: \"#9932CC\",\n        darkred: \"#8B0000\",\n        darksalmon: \"#E9967A\",\n        darkseagreen: \"#8FBC8F\",\n        darkslateblue: \"#483D8B\",\n        darkslategray: \"#2F4F4F\",\n        darkslategrey: \"#2F4F4F\",\n        darkturquoise: \"#00CED1\",\n        darkviolet: \"#9400D3\",\n        deeppink: \"#FF1493\",\n        deepskyblue: \"#00BFFF\",\n        dimgray: \"#696969\",\n        dimgrey: \"#696969\",\n        dodgerblue: \"#1E90FF\",\n        firebrick: \"#B22222\",\n        floralwhite: \"#FFFAF0\",\n        forestgreen: \"#228B22\",\n        fuchsia: \"#FF00FF\",\n        gainsboro: \"#DCDCDC\",\n        ghostwhite: \"#F8F8FF\",\n        gold: \"#FFD700\",\n        goldenrod: \"#DAA520\",\n        gray: \"#808080\",\n        grey: \"#808080\",\n        green: \"#008000\",\n        greenyellow: \"#ADFF2F\",\n        honeydew: \"#F0FFF0\",\n        hotpink: \"#FF69B4\",\n        indianred: \"#CD5C5C\",\n        indigo: \"#4B0082\",\n        ivory: \"#FFFFF0\",\n        khaki: \"#F0E68C\",\n        lavender: \"#E6E6FA\",\n        lavenderblush: \"#FFF0F5\",\n        lawngreen: \"#7CFC00\",\n        lemonchiffon: \"#FFFACD\",\n        lightblue: \"#ADD8E6\",\n        lightcoral: \"#F08080\",\n        lightcyan: \"#E0FFFF\",\n        lightgoldenrodyellow: \"#FAFAD2\",\n        lightgray: \"#D3D3D3\",\n        lightgrey: \"#D3D3D3\",\n        lightgreen: \"#90EE90\",\n        lightpink: \"#FFB6C1\",\n        lightsalmon: \"#FFA07A\",\n        lightseagreen: \"#20B2AA\",\n        lightskyblue: \"#87CEFA\",\n        lightslategray: \"#778899\",\n        lightslategrey: \"#778899\",\n        lightsteelblue: \"#B0C4DE\",\n        lightyellow: \"#FFFFE0\",\n        lime: \"#00FF00\",\n        limegreen: \"#32CD32\",\n        linen: \"#FAF0E6\",\n        magenta: \"#FF00FF\",\n        maroon: \"#800000\",\n        mediumaquamarine: \"#66CDAA\",\n        mediumblue: \"#0000CD\",\n        mediumorchid: \"#BA55D3\",\n        mediumpurple: \"#9370DB\",\n        mediumseagreen: \"#3CB371\",\n        mediumslateblue: \"#7B68EE\",\n        mediumspringgreen: \"#00FA9A\",\n        mediumturquoise: \"#48D1CC\",\n        mediumvioletred: \"#C71585\",\n        midnightblue: \"#191970\",\n        mintcream: \"#F5FFFA\",\n        mistyrose: \"#FFE4E1\",\n        moccasin: \"#FFE4B5\",\n        navajowhite: \"#FFDEAD\",\n        navy: \"#000080\",\n        oldlace: \"#FDF5E6\",\n        olive: \"#808000\",\n        olivedrab: \"#6B8E23\",\n        orange: \"#FFA500\",\n        orangered: \"#FF4500\",\n        orchid: \"#DA70D6\",\n        palegoldenrod: \"#EEE8AA\",\n        palegreen: \"#98FB98\",\n        paleturquoise: \"#AFEEEE\",\n        palevioletred: \"#DB7093\",\n        papayawhip: \"#FFEFD5\",\n        peachpuff: \"#FFDAB9\",\n        peru: \"#CD853F\",\n        pink: \"#FFC0CB\",\n        plum: \"#DDA0DD\",\n        powderblue: \"#B0E0E6\",\n        purple: \"#800080\",\n        rebeccapurple: \"#663399\",\n        red: \"#FF0000\",\n        rosybrown: \"#BC8F8F\",\n        royalblue: \"#4169E1\",\n        saddlebrown: \"#8B4513\",\n        salmon: \"#FA8072\",\n        sandybrown: \"#F4A460\",\n        seagreen: \"#2E8B57\",\n        seashell: \"#FFF5EE\",\n        sienna: \"#A0522D\",\n        silver: \"#C0C0C0\",\n        skyblue: \"#87CEEB\",\n        slateblue: \"#6A5ACD\",\n        slategray: \"#708090\",\n        slategrey: \"#708090\",\n        snow: \"#FFFAFA\",\n        springgreen: \"#00FF7F\",\n        steelblue: \"#4682B4\",\n        tan: \"#D2B48C\",\n        teal: \"#008080\",\n        thistle: \"#D8BFD8\",\n        tomato: \"#FF6347\",\n        turquoise: \"#40E0D0\",\n        violet: \"#EE82EE\",\n        wheat: \"#F5DEB3\",\n        white: \"#FFFFFF\",\n        whitesmoke: \"#F5F5F5\",\n        yellow: \"#FFFF00\",\n        yellowgreen: \"#9ACD32\"\n    };\n    /**\r\n   * @private\r\n   * @param {Number} p\r\n   * @param {Number} q\r\n   * @param {Number} t\r\n   * @return {Number}\r\n   */ function hue2rgb(p, q, t) {\n        if (t < 0) {\n            t += 1;\n        }\n        if (t > 1) {\n            t -= 1;\n        }\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n            return q;\n        }\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n    }\n    /**\r\n   * Returns new color object, when given a color in RGB format\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)\r\n   * @return {fabric.Color}\r\n   */ fabric.Color.fromRgb = function(color) {\n        return Color.fromSource(Color.sourceFromRgb(color));\n    };\n    /**\r\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)\r\n   * @return {Array} source\r\n   */ fabric.Color.sourceFromRgb = function(color) {\n        var match = color.match(Color.reRGBa);\n        if (match) {\n            var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1), g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1), b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);\n            return [\n                parseInt(r, 10),\n                parseInt(g, 10),\n                parseInt(b, 10),\n                match[4] ? parseFloat(match[4]) : 1\n            ];\n        }\n    };\n    /**\r\n   * Returns new color object, when given a color in RGBA format\r\n   * @static\r\n   * @function\r\n   * @memberOf fabric.Color\r\n   * @param {String} color\r\n   * @return {fabric.Color}\r\n   */ fabric.Color.fromRgba = Color.fromRgb;\n    /**\r\n   * Returns new color object, when given a color in HSL format\r\n   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)\r\n   * @memberOf fabric.Color\r\n   * @return {fabric.Color}\r\n   */ fabric.Color.fromHsl = function(color) {\n        return Color.fromSource(Color.sourceFromHsl(color));\n    };\n    /**\r\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.\r\n   * Adapted from <a href=\"https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html\">https://github.com/mjijackson</a>\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)\r\n   * @return {Array} source\r\n   * @see http://http://www.w3.org/TR/css3-color/#hsl-color\r\n   */ fabric.Color.sourceFromHsl = function(color) {\n        var match = color.match(Color.reHSLa);\n        if (!match) {\n            return;\n        }\n        var h = (parseFloat(match[1]) % 360 + 360) % 360 / 360, s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1), l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1), r, g, b;\n        if (s === 0) {\n            r = g = b = l;\n        } else {\n            var q = l <= 0.5 ? l * (s + 1) : l + s - l * s, p = l * 2 - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n        return [\n            Math.round(r * 255),\n            Math.round(g * 255),\n            Math.round(b * 255),\n            match[4] ? parseFloat(match[4]) : 1\n        ];\n    };\n    /**\r\n   * Returns new color object, when given a color in HSLA format\r\n   * @static\r\n   * @function\r\n   * @memberOf fabric.Color\r\n   * @param {String} color\r\n   * @return {fabric.Color}\r\n   */ fabric.Color.fromHsla = Color.fromHsl;\n    /**\r\n   * Returns new color object, when given a color in HEX format\r\n   * @static\r\n   * @memberOf fabric.Color\r\n   * @param {String} color Color value ex: FF5555\r\n   * @return {fabric.Color}\r\n   */ fabric.Color.fromHex = function(color) {\n        return Color.fromSource(Color.sourceFromHex(color));\n    };\n    /**\r\n   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format\r\n   * @static\r\n   * @memberOf fabric.Color\r\n   * @param {String} color ex: FF5555 or FF5544CC (RGBa)\r\n   * @return {Array} source\r\n   */ fabric.Color.sourceFromHex = function(color) {\n        if (color.match(Color.reHex)) {\n            var value = color.slice(color.indexOf(\"#\") + 1), isShortNotation = value.length === 3 || value.length === 4, isRGBa = value.length === 8 || value.length === 4, r = isShortNotation ? value.charAt(0) + value.charAt(0) : value.substring(0, 2), g = isShortNotation ? value.charAt(1) + value.charAt(1) : value.substring(2, 4), b = isShortNotation ? value.charAt(2) + value.charAt(2) : value.substring(4, 6), a = isRGBa ? isShortNotation ? value.charAt(3) + value.charAt(3) : value.substring(6, 8) : \"FF\";\n            return [\n                parseInt(r, 16),\n                parseInt(g, 16),\n                parseInt(b, 16),\n                parseFloat((parseInt(a, 16) / 255).toFixed(2))\n            ];\n        }\n    };\n    /**\r\n   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])\r\n   * @static\r\n   * @memberOf fabric.Color\r\n   * @param {Array} source\r\n   * @return {fabric.Color}\r\n   */ fabric.Color.fromSource = function(source) {\n        var oColor = new Color();\n        oColor.setSource(source);\n        return oColor;\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), scaleMap = [\n        \"e\",\n        \"se\",\n        \"s\",\n        \"sw\",\n        \"w\",\n        \"nw\",\n        \"n\",\n        \"ne\",\n        \"e\"\n    ], skewMap = [\n        \"ns\",\n        \"nesw\",\n        \"ew\",\n        \"nwse\"\n    ], controls = {}, LEFT = \"left\", TOP = \"top\", RIGHT = \"right\", BOTTOM = \"bottom\", CENTER = \"center\", opposite = {\n        top: BOTTOM,\n        bottom: TOP,\n        left: RIGHT,\n        right: LEFT,\n        center: CENTER\n    }, radiansToDegrees = fabric.util.radiansToDegrees, sign = Math.sign || function(x) {\n        return (x > 0) - (x < 0) || +x;\n    };\n    /**\r\n   * Combine control position and object angle to find the control direction compared\r\n   * to the object center.\r\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\r\n   * @param {fabric.Control} control the control class\r\n   * @return {Number} 0 - 7 a quadrant number\r\n   */ function findCornerQuadrant(fabricObject, control) {\n        var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;\n        return Math.round(cornerAngle % 360 / 45);\n    }\n    function fireEvent(eventName, options) {\n        var target = options.transform.target, canvas = target.canvas, canvasOptions = fabric.util.object.clone(options);\n        canvasOptions.target = target;\n        canvas && canvas.fire(\"object:\" + eventName, canvasOptions);\n        target.fire(eventName, options);\n    }\n    /**\r\n   * Inspect event and fabricObject properties to understand if the scaling action\r\n   * @param {Event} eventData from the user action\r\n   * @param {fabric.Object} fabricObject the fabric object about to scale\r\n   * @return {Boolean} true if scale is proportional\r\n   */ function scaleIsProportional(eventData, fabricObject) {\n        var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey, uniformIsToggled = eventData[uniScaleKey];\n        return canvas.uniformScaling && !uniformIsToggled || !canvas.uniformScaling && uniformIsToggled;\n    }\n    /**\r\n   * Checks if transform is centered\r\n   * @param {Object} transform transform data\r\n   * @return {Boolean} true if transform is centered\r\n   */ function isTransformCentered(transform) {\n        return transform.originX === CENTER && transform.originY === CENTER;\n    }\n    /**\r\n   * Inspect fabricObject to understand if the current scaling action is allowed\r\n   * @param {fabric.Object} fabricObject the fabric object about to scale\r\n   * @param {String} by 'x' or 'y' or ''\r\n   * @param {Boolean} scaleProportionally true if we are trying to scale proportionally\r\n   * @return {Boolean} true if scaling is not allowed at current conditions\r\n   */ function scalingIsForbidden(fabricObject, by, scaleProportionally) {\n        var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;\n        if (lockX && lockY) {\n            return true;\n        }\n        if (!by && (lockX || lockY) && scaleProportionally) {\n            return true;\n        }\n        if (lockX && by === \"x\") {\n            return true;\n        }\n        if (lockY && by === \"y\") {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n   * return the correct cursor style for the scale action\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */ function scaleCursorStyleHandler(eventData, control, fabricObject) {\n        var notAllowed = \"not-allowed\", scaleProportionally = scaleIsProportional(eventData, fabricObject), by = \"\";\n        if (control.x !== 0 && control.y === 0) {\n            by = \"x\";\n        } else if (control.x === 0 && control.y !== 0) {\n            by = \"y\";\n        }\n        if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {\n            return notAllowed;\n        }\n        var n = findCornerQuadrant(fabricObject, control);\n        return scaleMap[n] + \"-resize\";\n    }\n    /**\r\n   * return the correct cursor style for the skew action\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */ function skewCursorStyleHandler(eventData, control, fabricObject) {\n        var notAllowed = \"not-allowed\";\n        if (control.x !== 0 && fabricObject.lockSkewingY) {\n            return notAllowed;\n        }\n        if (control.y !== 0 && fabricObject.lockSkewingX) {\n            return notAllowed;\n        }\n        var n = findCornerQuadrant(fabricObject, control) % 4;\n        return skewMap[n] + \"-resize\";\n    }\n    /**\r\n   * Combine skew and scale style handlers to cover fabric standard use case\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */ function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {\n        if (eventData[fabricObject.canvas.altActionKey]) {\n            return controls.skewCursorStyleHandler(eventData, control, fabricObject);\n        }\n        return controls.scaleCursorStyleHandler(eventData, control, fabricObject);\n    }\n    /**\r\n   * Inspect event, control and fabricObject to return the correct action name\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} an action name\r\n   */ function scaleOrSkewActionName(eventData, control, fabricObject) {\n        var isAlternative = eventData[fabricObject.canvas.altActionKey];\n        if (control.x === 0) {\n            // then is scaleY or skewX\n            return isAlternative ? \"skewX\" : \"scaleY\";\n        }\n        if (control.y === 0) {\n            // then is scaleY or skewX\n            return isAlternative ? \"skewY\" : \"scaleX\";\n        }\n    }\n    /**\r\n   * Find the correct style for the control that is used for rotation.\r\n   * this function is very simple and it just take care of not-allowed or standard cursor\r\n   * @param {Event} eventData the javascript event that is causing the scale\r\n   * @param {fabric.Control} control the control that is interested in the action\r\n   * @param {fabric.Object} fabricObject the fabric object that is interested in the action\r\n   * @return {String} a valid css string for the cursor\r\n   */ function rotationStyleHandler(eventData, control, fabricObject) {\n        if (fabricObject.lockRotation) {\n            return \"not-allowed\";\n        }\n        return control.cursorStyle;\n    }\n    function commonEventInfo(eventData, transform, x, y) {\n        return {\n            e: eventData,\n            transform: transform,\n            pointer: {\n                x: x,\n                y: y\n            }\n        };\n    }\n    /**\r\n   * Wrap an action handler with saving/restoring object position on the transform.\r\n   * this is the code that permits to objects to keep their position while transforming.\r\n   * @param {Function} actionHandler the function to wrap\r\n   * @return {Function} a function with an action handler signature\r\n   */ function wrapWithFixedAnchor(actionHandler) {\n        return function(eventData, transform, x, y) {\n            var target = transform.target, centerPoint = target.getCenterPoint(), constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY), actionPerformed = actionHandler(eventData, transform, x, y);\n            target.setPositionByOrigin(constraint, transform.originX, transform.originY);\n            return actionPerformed;\n        };\n    }\n    /**\r\n   * Wrap an action handler with firing an event if the action is performed\r\n   * @param {Function} actionHandler the function to wrap\r\n   * @return {Function} a function with an action handler signature\r\n   */ function wrapWithFireEvent(eventName, actionHandler) {\n        return function(eventData, transform, x, y) {\n            var actionPerformed = actionHandler(eventData, transform, x, y);\n            if (actionPerformed) {\n                fireEvent(eventName, commonEventInfo(eventData, transform, x, y));\n            }\n            return actionPerformed;\n        };\n    }\n    /**\r\n   * Transforms a point described by x and y in a distance from the top left corner of the object\r\n   * bounding box.\r\n   * @param {Object} transform\r\n   * @param {String} originX\r\n   * @param {String} originY\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @return {Fabric.Point} the normalized point\r\n   */ function getLocalPoint(transform, originX, originY, x, y) {\n        var target = transform.target, control = target.controls[transform.corner], zoom = target.canvas.getZoom(), padding = target.padding / zoom, localPoint = target.toLocalPoint(new fabric.Point(x, y), originX, originY);\n        if (localPoint.x >= padding) {\n            localPoint.x -= padding;\n        }\n        if (localPoint.x <= -padding) {\n            localPoint.x += padding;\n        }\n        if (localPoint.y >= padding) {\n            localPoint.y -= padding;\n        }\n        if (localPoint.y <= padding) {\n            localPoint.y += padding;\n        }\n        localPoint.x -= control.offsetX;\n        localPoint.y -= control.offsetY;\n        return localPoint;\n    }\n    /**\r\n   * Detect if the fabric object is flipped on one side.\r\n   * @param {fabric.Object} target\r\n   * @return {Boolean} true if one flip, but not two.\r\n   */ function targetHasOneFlip(target) {\n        return target.flipX !== target.flipY;\n    }\n    /**\r\n   * Utility function to compensate the scale factor when skew is applied on both axes\r\n   * @private\r\n   */ function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {\n        if (target[oppositeSkew] !== 0) {\n            var newDim = target._getTransformedDimensions()[axis];\n            var newValue = reference / newDim * target[scaleToCompensate];\n            target.set(scaleToCompensate, newValue);\n        }\n    }\n    /**\r\n   * Action handler for skewing on the X axis\r\n   * @private\r\n   */ function skewObjectX(eventData, transform, x, y) {\n        var target = transform.target, // find how big the object would be, if there was no skewX. takes in account scaling\n        dimNoSkew = target._getTransformedDimensions(0, target.skewY), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), // the mouse is in the center of the object, and we want it to stay there.\n        // so the object will grow twice as much as the mouse.\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\n        totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x, currentSkew = target.skewX, newSkew;\n        if (totalSkewSize < 2) {\n            // let's make it easy to go back to position 0.\n            newSkew = 0;\n        } else {\n            newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleX, dimNoSkew.y / target.scaleY));\n            // now we have to find the sign of the skew.\n            // it mostly depend on the origin of transformation.\n            if (transform.originX === LEFT && transform.originY === BOTTOM) {\n                newSkew = -newSkew;\n            }\n            if (transform.originX === RIGHT && transform.originY === TOP) {\n                newSkew = -newSkew;\n            }\n            if (targetHasOneFlip(target)) {\n                newSkew = -newSkew;\n            }\n        }\n        var hasSkewed = currentSkew !== newSkew;\n        if (hasSkewed) {\n            var dimBeforeSkewing = target._getTransformedDimensions().y;\n            target.set(\"skewX\", newSkew);\n            compensateScaleForSkew(target, \"skewY\", \"scaleY\", \"y\", dimBeforeSkewing);\n        }\n        return hasSkewed;\n    }\n    /**\r\n   * Action handler for skewing on the Y axis\r\n   * @private\r\n   */ function skewObjectY(eventData, transform, x, y) {\n        var target = transform.target, // find how big the object would be, if there was no skewX. takes in account scaling\n        dimNoSkew = target._getTransformedDimensions(target.skewX, 0), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), // the mouse is in the center of the object, and we want it to stay there.\n        // so the object will grow twice as much as the mouse.\n        // this makes the skew growth to localPoint * 2 - dimNoSkew.\n        totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y, currentSkew = target.skewY, newSkew;\n        if (totalSkewSize < 2) {\n            // let's make it easy to go back to position 0.\n            newSkew = 0;\n        } else {\n            newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleY, dimNoSkew.x / target.scaleX));\n            // now we have to find the sign of the skew.\n            // it mostly depend on the origin of transformation.\n            if (transform.originX === LEFT && transform.originY === BOTTOM) {\n                newSkew = -newSkew;\n            }\n            if (transform.originX === RIGHT && transform.originY === TOP) {\n                newSkew = -newSkew;\n            }\n            if (targetHasOneFlip(target)) {\n                newSkew = -newSkew;\n            }\n        }\n        var hasSkewed = currentSkew !== newSkew;\n        if (hasSkewed) {\n            var dimBeforeSkewing = target._getTransformedDimensions().x;\n            target.set(\"skewY\", newSkew);\n            compensateScaleForSkew(target, \"skewX\", \"scaleX\", \"x\", dimBeforeSkewing);\n        }\n        return hasSkewed;\n    }\n    /**\r\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\r\n   * skew direction and determine the correct transform origin for the anchor point\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function skewHandlerX(eventData, transform, x, y) {\n        // step1 figure out and change transform origin.\n        // if skewX > 0 and originY bottom we anchor on right\n        // if skewX > 0 and originY top we anchor on left\n        // if skewX < 0 and originY bottom we anchor on left\n        // if skewX < 0 and originY top we anchor on right\n        // if skewX is 0, we look for mouse position to understand where are we going.\n        var target = transform.target, currentSkew = target.skewX, originX, originY = transform.originY;\n        if (target.lockSkewingX) {\n            return false;\n        }\n        if (currentSkew === 0) {\n            var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\n            if (localPointFromCenter.x > 0) {\n                // we are pulling right, anchor left;\n                originX = LEFT;\n            } else {\n                // we are pulling right, anchor right\n                originX = RIGHT;\n            }\n        } else {\n            if (currentSkew > 0) {\n                originX = originY === TOP ? LEFT : RIGHT;\n            }\n            if (currentSkew < 0) {\n                originX = originY === TOP ? RIGHT : LEFT;\n            }\n            // is the object flipped on one side only? swap the origin.\n            if (targetHasOneFlip(target)) {\n                originX = originX === LEFT ? RIGHT : LEFT;\n            }\n        }\n        // once we have the origin, we find the anchor point\n        transform.originX = originX;\n        var finalHandler = wrapWithFireEvent(\"skewing\", wrapWithFixedAnchor(skewObjectX));\n        return finalHandler(eventData, transform, x, y);\n    }\n    /**\r\n   * Wrapped Action handler for skewing on the Y axis, takes care of the\r\n   * skew direction and determine the correct transform origin for the anchor point\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function skewHandlerY(eventData, transform, x, y) {\n        // step1 figure out and change transform origin.\n        // if skewY > 0 and originX left we anchor on top\n        // if skewY > 0 and originX right we anchor on bottom\n        // if skewY < 0 and originX left we anchor on bottom\n        // if skewY < 0 and originX right we anchor on top\n        // if skewY is 0, we look for mouse position to understand where are we going.\n        var target = transform.target, currentSkew = target.skewY, originY, originX = transform.originX;\n        if (target.lockSkewingY) {\n            return false;\n        }\n        if (currentSkew === 0) {\n            var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);\n            if (localPointFromCenter.y > 0) {\n                // we are pulling down, anchor up;\n                originY = TOP;\n            } else {\n                // we are pulling up, anchor down\n                originY = BOTTOM;\n            }\n        } else {\n            if (currentSkew > 0) {\n                originY = originX === LEFT ? TOP : BOTTOM;\n            }\n            if (currentSkew < 0) {\n                originY = originX === LEFT ? BOTTOM : TOP;\n            }\n            // is the object flipped on one side only? swap the origin.\n            if (targetHasOneFlip(target)) {\n                originY = originY === TOP ? BOTTOM : TOP;\n            }\n        }\n        // once we have the origin, we find the anchor point\n        transform.originY = originY;\n        var finalHandler = wrapWithFireEvent(\"skewing\", wrapWithFixedAnchor(skewObjectY));\n        return finalHandler(eventData, transform, x, y);\n    }\n    /**\r\n   * Action handler for rotation and snapping, without anchor point.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   * @private\r\n   */ function rotationWithSnapping(eventData, transform, x, y) {\n        var t = transform, target = t.target, pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);\n        if (target.lockRotation) {\n            return false;\n        }\n        var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x), curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x), angle = radiansToDegrees(curAngle - lastAngle + t.theta), hasRotated = true;\n        if (target.snapAngle > 0) {\n            var snapAngle = target.snapAngle, snapThreshold = target.snapThreshold || snapAngle, rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle, leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;\n            if (Math.abs(angle - leftAngleLocked) < snapThreshold) {\n                angle = leftAngleLocked;\n            } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {\n                angle = rightAngleLocked;\n            }\n        }\n        // normalize angle to positive value\n        if (angle < 0) {\n            angle = 360 + angle;\n        }\n        angle %= 360;\n        hasRotated = target.angle !== angle;\n        target.angle = angle;\n        return hasRotated;\n    }\n    /**\r\n   * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @param {Object} options additional information for scaling\r\n   * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling\r\n   * @return {Boolean} true if some change happened\r\n   * @private\r\n   */ function scaleObject(eventData, transform, x, y, options) {\n        options = options || {};\n        var target = transform.target, lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY, by = options.by, newPoint, scaleX, scaleY, dim, scaleProportionally = scaleIsProportional(eventData, target), forbidScaling = scalingIsForbidden(target, by, scaleProportionally), signX, signY, gestureScale = transform.gestureScale;\n        if (forbidScaling) {\n            return false;\n        }\n        if (gestureScale) {\n            scaleX = transform.scaleX * gestureScale;\n            scaleY = transform.scaleY * gestureScale;\n        } else {\n            newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y);\n            // use of sign: We use sign to detect change of direction of an action. sign usually change when\n            // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling\n            // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily\n            // cross many time the origin point and flip the object. so we need a way to filter out the noise.\n            // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.\n            signX = by !== \"y\" ? sign(newPoint.x) : 1;\n            signY = by !== \"x\" ? sign(newPoint.y) : 1;\n            if (!transform.signX) {\n                transform.signX = signX;\n            }\n            if (!transform.signY) {\n                transform.signY = signY;\n            }\n            if (target.lockScalingFlip && (transform.signX !== signX || transform.signY !== signY)) {\n                return false;\n            }\n            dim = target._getTransformedDimensions();\n            // missing detection of flip and logic to switch the origin\n            if (scaleProportionally && !by) {\n                // uniform scaling\n                var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y), original = transform.original, originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) + Math.abs(dim.y * original.scaleY / target.scaleY), scale = distance / originalDistance;\n                scaleX = original.scaleX * scale;\n                scaleY = original.scaleY * scale;\n            } else {\n                scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);\n                scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);\n            }\n            // if we are scaling by center, we need to double the scale\n            if (isTransformCentered(transform)) {\n                scaleX *= 2;\n                scaleY *= 2;\n            }\n            if (transform.signX !== signX && by !== \"y\") {\n                transform.originX = opposite[transform.originX];\n                scaleX *= -1;\n                transform.signX = signX;\n            }\n            if (transform.signY !== signY && by !== \"x\") {\n                transform.originY = opposite[transform.originY];\n                scaleY *= -1;\n                transform.signY = signY;\n            }\n        }\n        // minScale is taken are in the setter.\n        var oldScaleX = target.scaleX, oldScaleY = target.scaleY;\n        if (!by) {\n            !lockScalingX && target.set(\"scaleX\", scaleX);\n            !lockScalingY && target.set(\"scaleY\", scaleY);\n        } else {\n            // forbidden cases already handled on top here.\n            by === \"x\" && target.set(\"scaleX\", scaleX);\n            by === \"y\" && target.set(\"scaleY\", scaleY);\n        }\n        return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;\n    }\n    /**\r\n   * Generic scaling logic, to scale from corners either equally or freely.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function scaleObjectFromCorner(eventData, transform, x, y) {\n        return scaleObject(eventData, transform, x, y);\n    }\n    /**\r\n   * Scaling logic for the X axis.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function scaleObjectX(eventData, transform, x, y) {\n        return scaleObject(eventData, transform, x, y, {\n            by: \"x\"\n        });\n    }\n    /**\r\n   * Scaling logic for the Y axis.\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function scaleObjectY(eventData, transform, x, y) {\n        return scaleObject(eventData, transform, x, y, {\n            by: \"y\"\n        });\n    }\n    /**\r\n   * Composed action handler to either scale Y or skew X\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function scalingYOrSkewingX(eventData, transform, x, y) {\n        // ok some safety needed here.\n        if (eventData[transform.target.canvas.altActionKey]) {\n            return controls.skewHandlerX(eventData, transform, x, y);\n        }\n        return controls.scalingY(eventData, transform, x, y);\n    }\n    /**\r\n   * Composed action handler to either scale X or skew Y\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function scalingXOrSkewingY(eventData, transform, x, y) {\n        // ok some safety needed here.\n        if (eventData[transform.target.canvas.altActionKey]) {\n            return controls.skewHandlerY(eventData, transform, x, y);\n        }\n        return controls.scalingX(eventData, transform, x, y);\n    }\n    /**\r\n   * Action handler to change textbox width\r\n   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if some change happened\r\n   */ function changeWidth(eventData, transform, x, y) {\n        var target = transform.target, localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y), strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1), multiplier = isTransformCentered(transform) ? 2 : 1, oldWidth = target.width, newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;\n        target.set(\"width\", Math.max(newWidth, 0));\n        return oldWidth !== newWidth;\n    }\n    /**\r\n   * Action handler\r\n   * @private\r\n   * @param {Event} eventData javascript event that is doing the transform\r\n   * @param {Object} transform javascript object containing a series of information around the current transform\r\n   * @param {number} x current mouse x position, canvas normalized\r\n   * @param {number} y current mouse y position, canvas normalized\r\n   * @return {Boolean} true if the translation occurred\r\n   */ function dragHandler(eventData, transform, x, y) {\n        var target = transform.target, newLeft = x - transform.offsetX, newTop = y - transform.offsetY, moveX = !target.get(\"lockMovementX\") && target.left !== newLeft, moveY = !target.get(\"lockMovementY\") && target.top !== newTop;\n        moveX && target.set(\"left\", newLeft);\n        moveY && target.set(\"top\", newTop);\n        if (moveX || moveY) {\n            fireEvent(\"moving\", commonEventInfo(eventData, transform, x, y));\n        }\n        return moveX || moveY;\n    }\n    controls.scaleCursorStyleHandler = scaleCursorStyleHandler;\n    controls.skewCursorStyleHandler = skewCursorStyleHandler;\n    controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;\n    controls.rotationWithSnapping = wrapWithFireEvent(\"rotating\", wrapWithFixedAnchor(rotationWithSnapping));\n    controls.scalingEqually = wrapWithFireEvent(\"scaling\", wrapWithFixedAnchor(scaleObjectFromCorner));\n    controls.scalingX = wrapWithFireEvent(\"scaling\", wrapWithFixedAnchor(scaleObjectX));\n    controls.scalingY = wrapWithFireEvent(\"scaling\", wrapWithFixedAnchor(scaleObjectY));\n    controls.scalingYOrSkewingX = scalingYOrSkewingX;\n    controls.scalingXOrSkewingY = scalingXOrSkewingY;\n    controls.changeWidth = wrapWithFireEvent(\"resizing\", wrapWithFixedAnchor(changeWidth));\n    controls.skewHandlerX = skewHandlerX;\n    controls.skewHandlerY = skewHandlerY;\n    controls.dragHandler = dragHandler;\n    controls.scaleOrSkewActionName = scaleOrSkewActionName;\n    controls.rotationStyleHandler = rotationStyleHandler;\n    controls.fireEvent = fireEvent;\n    controls.wrapWithFixedAnchor = wrapWithFixedAnchor;\n    controls.wrapWithFireEvent = wrapWithFireEvent;\n    controls.getLocalPoint = getLocalPoint;\n    fabric.controlsUtils = controls;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), degreesToRadians = fabric.util.degreesToRadians, controls = fabric.controlsUtils;\n    /**\r\n   * Render a round control, as per fabric features.\r\n   * This function is written to respect object properties like transparentCorners, cornerSize\r\n   * cornerColor, cornerStrokeColor\r\n   * plus the addition of offsetY and offsetX.\r\n   * @param {CanvasRenderingContext2D} ctx context to render on\r\n   * @param {Number} left x coordinate where the control center should be\r\n   * @param {Number} top y coordinate where the control center should be\r\n   * @param {Object} styleOverride override for fabric.Object controls style\r\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\r\n   */ function renderCircleControl(ctx, left, top, styleOverride, fabricObject) {\n        styleOverride = styleOverride || {};\n        var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== \"undefined\" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? \"stroke\" : \"fill\", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), myLeft = left, myTop = top, size;\n        ctx.save();\n        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\n        // as soon as fabric react v5, remove ie11, use proper ellipse code.\n        if (xSize > ySize) {\n            size = xSize;\n            ctx.scale(1.0, ySize / xSize);\n            myTop = top * xSize / ySize;\n        } else if (ySize > xSize) {\n            size = ySize;\n            ctx.scale(xSize / ySize, 1.0);\n            myLeft = left * ySize / xSize;\n        } else {\n            size = xSize;\n        }\n        // this is still wrong\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);\n        ctx[methodName]();\n        if (stroke) {\n            ctx.stroke();\n        }\n        ctx.restore();\n    }\n    /**\r\n   * Render a square control, as per fabric features.\r\n   * This function is written to respect object properties like transparentCorners, cornerSize\r\n   * cornerColor, cornerStrokeColor\r\n   * plus the addition of offsetY and offsetX.\r\n   * @param {CanvasRenderingContext2D} ctx context to render on\r\n   * @param {Number} left x coordinate where the control center should be\r\n   * @param {Number} top y coordinate where the control center should be\r\n   * @param {Object} styleOverride override for fabric.Object controls style\r\n   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls\r\n   */ function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {\n        styleOverride = styleOverride || {};\n        var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== \"undefined\" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? \"stroke\" : \"fill\", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), xSizeBy2 = xSize / 2, ySizeBy2 = ySize / 2;\n        ctx.save();\n        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;\n        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;\n        // this is still wrong\n        ctx.lineWidth = 1;\n        ctx.translate(left, top);\n        ctx.rotate(degreesToRadians(fabricObject.angle));\n        // this does not work, and fixed with ( && ) does not make sense.\n        // to have real transparent corners we need the controls on upperCanvas\n        // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n        ctx[methodName + \"Rect\"](-xSizeBy2, -ySizeBy2, xSize, ySize);\n        if (stroke) {\n            ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);\n        }\n        ctx.restore();\n    }\n    controls.renderCircleControl = renderCircleControl;\n    controls.renderSquareControl = renderSquareControl;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {});\n    function Control(options) {\n        for(var i in options){\n            this[i] = options[i];\n        }\n    }\n    fabric.Control = Control;\n    fabric.Control.prototype = /** @lends fabric.Control.prototype */ {\n        /**\r\n     * keep track of control visibility.\r\n     * mainly for backward compatibility.\r\n     * if you do not want to see a control, you can remove it\r\n     * from the controlset.\r\n     * @type {Boolean}\r\n     * @default true\r\n     */ visible: true,\n        /**\r\n     * Name of the action that the control will likely execute.\r\n     * This is optional. FabricJS uses to identify what the user is doing for some\r\n     * extra optimizations. If you are writing a custom control and you want to know\r\n     * somewhere else in the code what is going on, you can use this string here.\r\n     * you can also provide a custom getActionName if your control run multiple actions\r\n     * depending on some external state.\r\n     * default to scale since is the most common, used on 4 corners by default\r\n     * @type {String}\r\n     * @default 'scale'\r\n     */ actionName: \"scale\",\n        /**\r\n     * Drawing angle of the control.\r\n     * NOT used for now, but name marked as needed for internal logic\r\n     * example: to reuse the same drawing function for different rotated controls\r\n     * @type {Number}\r\n     * @default 0\r\n     */ angle: 0,\n        /**\r\n     * Relative position of the control. X\r\n     * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities\r\n     * of the bounding box.\r\n     * @type {Number}\r\n     * @default 0\r\n     */ x: 0,\n        /**\r\n     * Relative position of the control. Y\r\n     * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities\r\n     * of the bounding box.\r\n     * @type {Number}\r\n     * @default 0\r\n     */ y: 0,\n        /**\r\n     * Horizontal offset of the control from the defined position. In pixels\r\n     * Positive offset moves the control to the right, negative to the left.\r\n     * It used when you want to have position of control that does not scale with\r\n     * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on\r\n     * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will\r\n     * stay 30 pixels no matter how the object is big. Another example is having 2\r\n     * controls in the corner, that stay in the same position when the object scale.\r\n     * of the bounding box.\r\n     * @type {Number}\r\n     * @default 0\r\n     */ offsetX: 0,\n        /**\r\n     * Vertical offset of the control from the defined position. In pixels\r\n     * Positive offset moves the control to the bottom, negative to the top.\r\n     * @type {Number}\r\n     * @default 0\r\n     */ offsetY: 0,\n        /**\r\n     * Sets the length of the control. If null, defaults to object's cornerSize.\r\n     * Expects both sizeX and sizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */ sizeX: null,\n        /**\r\n     * Sets the height of the control. If null, defaults to object's cornerSize.\r\n     * Expects both sizeX and sizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */ sizeY: null,\n        /**\r\n     * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.\r\n     * Expects both touchSizeX and touchSizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */ touchSizeX: null,\n        /**\r\n     * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.\r\n     * Expects both touchSizeX and touchSizeY to be set when set.\r\n     * @type {?Number}\r\n     * @default null\r\n     */ touchSizeY: null,\n        /**\r\n     * Css cursor style to display when the control is hovered.\r\n     * if the method `cursorStyleHandler` is provided, this property is ignored.\r\n     * @type {String}\r\n     * @default 'crosshair'\r\n     */ cursorStyle: \"crosshair\",\n        /**\r\n     * If controls has an offsetY or offsetX, draw a line that connects\r\n     * the control to the bounding box\r\n     * @type {Boolean}\r\n     * @default false\r\n     */ withConnection: false,\n        /**\r\n     * The control actionHandler, provide one to handle action ( control being moved )\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {Object} transformData properties of the current transform\r\n     * @param {Number} x x position of the cursor\r\n     * @param {Number} y y position of the cursor\r\n     * @return {Boolean} true if the action/event modified the object\r\n     */ actionHandler: function() {},\n        /**\r\n     * The control handler for mouse down, provide one to handle mouse down on control\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {Object} transformData properties of the current transform\r\n     * @param {Number} x x position of the cursor\r\n     * @param {Number} y y position of the cursor\r\n     * @return {Boolean} true if the action/event modified the object\r\n     */ mouseDownHandler: function() {},\n        /**\r\n     * The control mouseUpHandler, provide one to handle an effect on mouse up.\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {Object} transformData properties of the current transform\r\n     * @param {Number} x x position of the cursor\r\n     * @param {Number} y y position of the cursor\r\n     * @return {Boolean} true if the action/event modified the object\r\n     */ mouseUpHandler: function() {},\n        /**\r\n     * Returns control actionHandler\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Object} fabricObject on which the control is displayed\r\n     * @param {fabric.Control} control control for which the action handler is being asked\r\n     * @return {Function} the action handler\r\n     */ getActionHandler: function() {\n            return this.actionHandler;\n        },\n        /**\r\n     * Returns control mouseDown handler\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Object} fabricObject on which the control is displayed\r\n     * @param {fabric.Control} control control for which the action handler is being asked\r\n     * @return {Function} the action handler\r\n     */ getMouseDownHandler: function() {\n            return this.mouseDownHandler;\n        },\n        /**\r\n     * Returns control mouseUp handler\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Object} fabricObject on which the control is displayed\r\n     * @param {fabric.Control} control control for which the action handler is being asked\r\n     * @return {Function} the action handler\r\n     */ getMouseUpHandler: function() {\n            return this.mouseUpHandler;\n        },\n        /**\r\n     * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate\r\n     * function you can pass one in the constructor\r\n     * the cursorStyle property\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Control} control the current control ( likely this)\r\n     * @param {fabric.Object} object on which the control is displayed\r\n     * @return {String}\r\n     */ cursorStyleHandler: function(eventData, control /* fabricObject */ ) {\n            return control.cursorStyle;\n        },\n        /**\r\n     * Returns the action name. The basic implementation just return the actionName property.\r\n     * @param {Event} eventData the native mouse event\r\n     * @param {fabric.Control} control the current control ( likely this)\r\n     * @param {fabric.Object} object on which the control is displayed\r\n     * @return {String}\r\n     */ getActionName: function(eventData, control /* fabricObject */ ) {\n            return control.actionName;\n        },\n        /**\r\n     * Returns controls visibility\r\n     * @param {fabric.Object} object on which the control is displayed\r\n     * @param {String} controlKey key where the control is memorized on the\r\n     * @return {Boolean}\r\n     */ getVisibility: function(fabricObject, controlKey) {\n            var objectVisibility = fabricObject._controlsVisibility;\n            if (objectVisibility && typeof objectVisibility[controlKey] !== \"undefined\") {\n                return objectVisibility[controlKey];\n            }\n            return this.visible;\n        },\n        /**\r\n     * Sets controls visibility\r\n     * @param {Boolean} visibility for the object\r\n     * @return {Void}\r\n     */ setVisibility: function(visibility /* name, fabricObject */ ) {\n            this.visible = visibility;\n        },\n        positionHandler: function(dim, finalMatrix /*, fabricObject, currentControl */ ) {\n            var point = fabric.util.transformPoint({\n                x: this.x * dim.x + this.offsetX,\n                y: this.y * dim.y + this.offsetY\n            }, finalMatrix);\n            return point;\n        },\n        /**\r\n     * Returns the coords for this control based on object values.\r\n     * @param {Number} objectAngle angle from the fabric object holding the control\r\n     * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if\r\n     *   isTouch is true)\r\n     * @param {Number} centerX x coordinate where the control center should be\r\n     * @param {Number} centerY y coordinate where the control center should be\r\n     * @param {boolean} isTouch true if touch corner, false if normal corner\r\n     */ calcCornerCoords: function(objectAngle, objectCornerSize, centerX, centerY, isTouch) {\n            var cosHalfOffset, sinHalfOffset, cosHalfOffsetComp, sinHalfOffsetComp, xSize = isTouch ? this.touchSizeX : this.sizeX, ySize = isTouch ? this.touchSizeY : this.sizeY;\n            if (xSize && ySize && xSize !== ySize) {\n                // handle rectangular corners\n                var controlTriangleAngle = Math.atan2(ySize, xSize);\n                var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;\n                var newTheta = controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\n                var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);\n                cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta);\n                sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta);\n                // use complementary angle for two corners\n                cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newThetaComp);\n                sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newThetaComp);\n            } else {\n                // handle square corners\n                // use default object corner size unless size is defined\n                var cornerSize = xSize && ySize ? xSize : objectCornerSize;\n                /* 0.7071067812 stands for sqrt(2)/2 */ cornerHypotenuse = cornerSize * 0.7071067812;\n                // complementary angles are equal since they're both 45 degrees\n                var newTheta = fabric.util.degreesToRadians(45 - objectAngle);\n                cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newTheta);\n                sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newTheta);\n            }\n            return {\n                tl: {\n                    x: centerX - sinHalfOffsetComp,\n                    y: centerY - cosHalfOffsetComp\n                },\n                tr: {\n                    x: centerX + cosHalfOffset,\n                    y: centerY - sinHalfOffset\n                },\n                bl: {\n                    x: centerX - cosHalfOffset,\n                    y: centerY + sinHalfOffset\n                },\n                br: {\n                    x: centerX + sinHalfOffsetComp,\n                    y: centerY + cosHalfOffsetComp\n                }\n            };\n        },\n        /**\r\n    * Render function for the control.\r\n    * When this function runs the context is unscaled. unrotate. Just retina scaled.\r\n    * all the functions will have to translate to the point left,top before starting Drawing\r\n    * if they want to draw a control where the position is detected.\r\n    * left and top are the result of the positionHandler function\r\n    * @param {RenderingContext2D} ctx the context where the control will be drawn\r\n    * @param {Number} left position of the canvas where we are about to render the control.\r\n    * @param {Number} top position of the canvas where we are about to render the control.\r\n    * @param {Object} styleOverride\r\n    * @param {fabric.Object} fabricObject the object where the control is about to be rendered\r\n    */ render: function(ctx, left, top, styleOverride, fabricObject) {\n            styleOverride = styleOverride || {};\n            switch(styleOverride.cornerStyle || fabricObject.cornerStyle){\n                case \"circle\":\n                    fabric.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);\n                    break;\n                default:\n                    fabric.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);\n            }\n        }\n    };\n})( true ? exports : 0);\n(function() {\n    \"use strict\";\n    if (fabric.StaticCanvas) {\n        fabric.warn(\"fabric.StaticCanvas is already defined.\");\n        return;\n    }\n    // aliases for faster resolution\n    var extend = fabric.util.object.extend, getElementOffset = fabric.util.getElementOffset, removeFromArray = fabric.util.removeFromArray, toFixed = fabric.util.toFixed, transformPoint = fabric.util.transformPoint, invertTransform = fabric.util.invertTransform, getNodeCanvas = fabric.util.getNodeCanvas, createCanvasElement = fabric.util.createCanvasElement, CANVAS_INIT_ERROR = new Error(\"Could not initialize `canvas` element\");\n    /**\r\n   * Static canvas class\r\n   * @class fabric.StaticCanvas\r\n   * @mixes fabric.Collection\r\n   * @mixes fabric.Observable\r\n   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}\r\n   * @see {@link fabric.StaticCanvas#initialize} for constructor definition\r\n   * @fires before:render\r\n   * @fires after:render\r\n   * @fires canvas:cleared\r\n   * @fires object:added\r\n   * @fires object:removed\r\n   */ fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */ {\n        /**\r\n     * Constructor\r\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */ initialize: function(el, options) {\n            options || (options = {});\n            this.renderAndResetBound = this.renderAndReset.bind(this);\n            this.requestRenderAllBound = this.requestRenderAll.bind(this);\n            this._initStatic(el, options);\n        },\n        /**\r\n     * Background color of canvas instance.\r\n     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.\r\n     * @type {(String|fabric.Pattern)}\r\n     * @default\r\n     */ backgroundColor: \"\",\n        /**\r\n     * Background image of canvas instance.\r\n     * since 2.4.0 image caching is active, please when putting an image as background, add to the\r\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n     * vale. As an alternative you can disable image objectCaching\r\n     * @type fabric.Image\r\n     * @default\r\n     */ backgroundImage: null,\n        /**\r\n     * Overlay color of canvas instance.\r\n     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}\r\n     * @since 1.3.9\r\n     * @type {(String|fabric.Pattern)}\r\n     * @default\r\n     */ overlayColor: \"\",\n        /**\r\n     * Overlay image of canvas instance.\r\n     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the\r\n     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom\r\n     * vale. As an alternative you can disable image objectCaching\r\n     * @type fabric.Image\r\n     * @default\r\n     */ overlayImage: null,\n        /**\r\n     * Indicates whether toObject/toDatalessObject should include default values\r\n     * if set to false, takes precedence over the object value.\r\n     * @type Boolean\r\n     * @default\r\n     */ includeDefaultValues: true,\n        /**\r\n     * Indicates whether objects' state should be saved\r\n     * @type Boolean\r\n     * @default\r\n     */ stateful: false,\n        /**\r\n     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},\r\n     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.\r\n     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once\r\n     * since the renders are quequed and executed one per frame.\r\n     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )\r\n     * Left default to true to do not break documentation and old app, fiddles.\r\n     * @type Boolean\r\n     * @default\r\n     */ renderOnAddRemove: true,\n        /**\r\n     * Indicates whether object controls (borders/controls) are rendered above overlay image\r\n     * @type Boolean\r\n     * @default\r\n     */ controlsAboveOverlay: false,\n        /**\r\n     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas\r\n     * @type Boolean\r\n     * @default\r\n     */ allowTouchScrolling: false,\n        /**\r\n     * Indicates whether this canvas will use image smoothing, this is on by default in browsers\r\n     * @type Boolean\r\n     * @default\r\n     */ imageSmoothingEnabled: true,\n        /**\r\n     * The transformation (a Canvas 2D API transform matrix) which focuses the viewport\r\n     * @type Array\r\n     * @example <caption>Default transform</caption>\r\n     * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];\r\n     * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>\r\n     * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];\r\n     * @default\r\n     */ viewportTransform: fabric.iMatrix.concat(),\n        /**\r\n     * if set to false background image is not affected by viewport transform\r\n     * @since 1.6.3\r\n     * @type Boolean\r\n     * @default\r\n     */ backgroundVpt: true,\n        /**\r\n     * if set to false overlya image is not affected by viewport transform\r\n     * @since 1.6.3\r\n     * @type Boolean\r\n     * @default\r\n     */ overlayVpt: true,\n        /**\r\n     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens\r\n     * @type Boolean\r\n     * @default\r\n     */ enableRetinaScaling: true,\n        /**\r\n     * Describe canvas element extension over design\r\n     * properties are tl,tr,bl,br.\r\n     * if canvas is not zoomed/panned those points are the four corner of canvas\r\n     * if canvas is viewportTransformed you those points indicate the extension\r\n     * of canvas element in plain untrasformed coordinates\r\n     * The coordinates get updated with @method calcViewportBoundaries.\r\n     * @memberOf fabric.StaticCanvas.prototype\r\n     */ vptCoords: {},\n        /**\r\n     * Based on vptCoords and object.aCoords, skip rendering of objects that\r\n     * are not included in current viewport.\r\n     * May greatly help in applications with crowded canvas and use of zoom/pan\r\n     * If One of the corner of the bounding box of the object is on the canvas\r\n     * the objects get rendered.\r\n     * @memberOf fabric.StaticCanvas.prototype\r\n     * @type Boolean\r\n     * @default\r\n     */ skipOffscreen: true,\n        /**\r\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n     * the clipPath object gets used when the canvas has rendered, and the context is placed in the\r\n     * top left corner of the canvas.\r\n     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true\r\n     * @type fabric.Object\r\n     */ clipPath: undefined,\n        /**\r\n     * @private\r\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n     * @param {Object} [options] Options object\r\n     */ _initStatic: function(el, options) {\n            var cb = this.requestRenderAllBound;\n            this._objects = [];\n            this._createLowerCanvas(el);\n            this._initOptions(options);\n            // only initialize retina scaling once\n            if (!this.interactive) {\n                this._initRetinaScaling();\n            }\n            if (options.overlayImage) {\n                this.setOverlayImage(options.overlayImage, cb);\n            }\n            if (options.backgroundImage) {\n                this.setBackgroundImage(options.backgroundImage, cb);\n            }\n            if (options.backgroundColor) {\n                this.setBackgroundColor(options.backgroundColor, cb);\n            }\n            if (options.overlayColor) {\n                this.setOverlayColor(options.overlayColor, cb);\n            }\n            this.calcOffset();\n        },\n        /**\r\n     * @private\r\n     */ _isRetinaScaling: function() {\n            return fabric.devicePixelRatio > 1 && this.enableRetinaScaling;\n        },\n        /**\r\n     * @private\r\n     * @return {Number} retinaScaling if applied, otherwise 1;\r\n     */ getRetinaScaling: function() {\n            return this._isRetinaScaling() ? Math.max(1, fabric.devicePixelRatio) : 1;\n        },\n        /**\r\n     * @private\r\n     */ _initRetinaScaling: function() {\n            if (!this._isRetinaScaling()) {\n                return;\n            }\n            var scaleRatio = fabric.devicePixelRatio;\n            this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);\n            if (this.upperCanvasEl) {\n                this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);\n            }\n        },\n        __initRetinaScaling: function(scaleRatio, canvas, context) {\n            canvas.setAttribute(\"width\", this.width * scaleRatio);\n            canvas.setAttribute(\"height\", this.height * scaleRatio);\n            context.scale(scaleRatio, scaleRatio);\n        },\n        /**\r\n     * Calculates canvas element offset relative to the document\r\n     * This method is also attached as \"resize\" event handler of window\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */ calcOffset: function() {\n            this._offset = getElementOffset(this.lowerCanvasEl);\n            return this;\n        },\n        /**\r\n     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas\r\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to\r\n     * @param {Function} callback callback to invoke when image is loaded and set as an overlay\r\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}\r\n     * @example <caption>Normal overlayImage with left/top = 0</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   // Needed to position overlayImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>overlayImage with different properties</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>\r\n     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {\r\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));\r\n     * });\r\n     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   width: canvas.width,\r\n     *   height: canvas.height,\r\n     *   // Needed to position overlayImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>overlayImage loaded from cross-origin</caption>\r\n     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top',\r\n     *   crossOrigin: 'anonymous'\r\n     * });\r\n     */ setOverlayImage: function(image, callback, options) {\n            return this.__setBgOverlayImage(\"overlayImage\", image, callback, options);\n        },\n        /**\r\n     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas\r\n     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to\r\n     * @param {Function} callback Callback to invoke when image is loaded and set as background\r\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}\r\n     * @example <caption>Normal backgroundImage with left/top = 0</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   // Needed to position backgroundImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>backgroundImage with different properties</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>\r\n     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {\r\n     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});\r\n     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));\r\n     * });\r\n     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   width: canvas.width,\r\n     *   height: canvas.height,\r\n     *   // Needed to position backgroundImage at 0/0\r\n     *   originX: 'left',\r\n     *   originY: 'top'\r\n     * });\r\n     * @example <caption>backgroundImage loaded from cross-origin</caption>\r\n     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {\r\n     *   opacity: 0.5,\r\n     *   angle: 45,\r\n     *   left: 400,\r\n     *   top: 400,\r\n     *   originX: 'left',\r\n     *   originY: 'top',\r\n     *   crossOrigin: 'anonymous'\r\n     * });\r\n     */ // TODO: fix stretched examples\n        setBackgroundImage: function(image, callback, options) {\n            return this.__setBgOverlayImage(\"backgroundImage\", image, callback, options);\n        },\n        /**\r\n     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas\r\n     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to\r\n     * @param {Function} callback Callback to invoke when foreground color is set\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}\r\n     * @example <caption>Normal overlayColor - color value</caption>\r\n     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as overlayColor</caption>\r\n     * canvas.setOverlayColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n     * }, canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>\r\n     * canvas.setOverlayColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n     *   repeat: 'repeat',\r\n     *   offsetX: 200,\r\n     *   offsetY: 100\r\n     * }, canvas.renderAll.bind(canvas));\r\n     */ setOverlayColor: function(overlayColor, callback) {\n            return this.__setBgOverlayColor(\"overlayColor\", overlayColor, callback);\n        },\n        /**\r\n     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas\r\n     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to\r\n     * @param {Function} callback Callback to invoke when background color is set\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}\r\n     * @example <caption>Normal backgroundColor - color value</caption>\r\n     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as backgroundColor</caption>\r\n     * canvas.setBackgroundColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'\r\n     * }, canvas.renderAll.bind(canvas));\r\n     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>\r\n     * canvas.setBackgroundColor({\r\n     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',\r\n     *   repeat: 'repeat',\r\n     *   offsetX: 200,\r\n     *   offsetY: 100\r\n     * }, canvas.renderAll.bind(canvas));\r\n     */ setBackgroundColor: function(backgroundColor, callback) {\n            return this.__setBgOverlayColor(\"backgroundColor\", backgroundColor, callback);\n        },\n        /**\r\n     * @private\r\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}\r\n     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})\r\n     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to\r\n     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.\r\n     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.\r\n     */ __setBgOverlayImage: function(property, image, callback, options) {\n            if (typeof image === \"string\") {\n                fabric.util.loadImage(image, function(img, isError) {\n                    if (img) {\n                        var instance = new fabric.Image(img, options);\n                        this[property] = instance;\n                        instance.canvas = this;\n                    }\n                    callback && callback(img, isError);\n                }, this, options && options.crossOrigin);\n            } else {\n                options && image.setOptions(options);\n                this[property] = image;\n                image && (image.canvas = this);\n                callback && callback(image, false);\n            }\n            return this;\n        },\n        /**\r\n     * @private\r\n     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}\r\n     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})\r\n     * @param {(Object|String|null)} color Object with pattern information, color value or null\r\n     * @param {Function} [callback] Callback is invoked when color is set\r\n     */ __setBgOverlayColor: function(property, color, callback) {\n            this[property] = color;\n            this._initGradient(color, property);\n            this._initPattern(color, property, callback);\n            return this;\n        },\n        /**\r\n     * @private\r\n     */ _createCanvasElement: function() {\n            var element = createCanvasElement();\n            if (!element) {\n                throw CANVAS_INIT_ERROR;\n            }\n            if (!element.style) {\n                element.style = {};\n            }\n            if (typeof element.getContext === \"undefined\") {\n                throw CANVAS_INIT_ERROR;\n            }\n            return element;\n        },\n        /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */ _initOptions: function(options) {\n            var lowerCanvasEl = this.lowerCanvasEl;\n            this._setOptions(options);\n            this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;\n            this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;\n            if (!this.lowerCanvasEl.style) {\n                return;\n            }\n            lowerCanvasEl.width = this.width;\n            lowerCanvasEl.height = this.height;\n            lowerCanvasEl.style.width = this.width + \"px\";\n            lowerCanvasEl.style.height = this.height + \"px\";\n            this.viewportTransform = this.viewportTransform.slice();\n        },\n        /**\r\n     * Creates a bottom canvas\r\n     * @private\r\n     * @param {HTMLElement} [canvasEl]\r\n     */ _createLowerCanvas: function(canvasEl) {\n            // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node\n            if (canvasEl && canvasEl.getContext) {\n                this.lowerCanvasEl = canvasEl;\n            } else {\n                this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();\n            }\n            fabric.util.addClass(this.lowerCanvasEl, \"lower-canvas\");\n            this._originalCanvasStyle = this.lowerCanvasEl.style;\n            if (this.interactive) {\n                this._applyCanvasStyle(this.lowerCanvasEl);\n            }\n            this.contextContainer = this.lowerCanvasEl.getContext(\"2d\");\n        },\n        /**\r\n     * Returns canvas width (in px)\r\n     * @return {Number}\r\n     */ getWidth: function() {\n            return this.width;\n        },\n        /**\r\n     * Returns canvas height (in px)\r\n     * @return {Number}\r\n     */ getHeight: function() {\n            return this.height;\n        },\n        /**\r\n     * Sets width of this canvas instance\r\n     * @param {Number|String} value                         Value to set width to\r\n     * @param {Object}        [options]                     Options object\r\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ setWidth: function(value, options) {\n            return this.setDimensions({\n                width: value\n            }, options);\n        },\n        /**\r\n     * Sets height of this canvas instance\r\n     * @param {Number|String} value                         Value to set height to\r\n     * @param {Object}        [options]                     Options object\r\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ setHeight: function(value, options) {\n            return this.setDimensions({\n                height: value\n            }, options);\n        },\n        /**\r\n     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)\r\n     * @param {Object}        dimensions                    Object with width/height properties\r\n     * @param {Number|String} [dimensions.width]            Width of canvas element\r\n     * @param {Number|String} [dimensions.height]           Height of canvas element\r\n     * @param {Object}        [options]                     Options object\r\n     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions\r\n     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ setDimensions: function(dimensions, options) {\n            var cssValue;\n            options = options || {};\n            for(var prop in dimensions){\n                cssValue = dimensions[prop];\n                if (!options.cssOnly) {\n                    this._setBackstoreDimension(prop, dimensions[prop]);\n                    cssValue += \"px\";\n                    this.hasLostContext = true;\n                }\n                if (!options.backstoreOnly) {\n                    this._setCssDimension(prop, cssValue);\n                }\n            }\n            if (this._isCurrentlyDrawing) {\n                this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);\n            }\n            this._initRetinaScaling();\n            this.calcOffset();\n            if (!options.cssOnly) {\n                this.requestRenderAll();\n            }\n            return this;\n        },\n        /**\r\n     * Helper for setting width/height\r\n     * @private\r\n     * @param {String} prop property (width|height)\r\n     * @param {Number} value value to set property to\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ _setBackstoreDimension: function(prop, value) {\n            this.lowerCanvasEl[prop] = value;\n            if (this.upperCanvasEl) {\n                this.upperCanvasEl[prop] = value;\n            }\n            if (this.cacheCanvasEl) {\n                this.cacheCanvasEl[prop] = value;\n            }\n            this[prop] = value;\n            return this;\n        },\n        /**\r\n     * Helper for setting css width/height\r\n     * @private\r\n     * @param {String} prop property (width|height)\r\n     * @param {String} value value to set property to\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ _setCssDimension: function(prop, value) {\n            this.lowerCanvasEl.style[prop] = value;\n            if (this.upperCanvasEl) {\n                this.upperCanvasEl.style[prop] = value;\n            }\n            if (this.wrapperEl) {\n                this.wrapperEl.style[prop] = value;\n            }\n            return this;\n        },\n        /**\r\n     * Returns canvas zoom level\r\n     * @return {Number}\r\n     */ getZoom: function() {\n            return this.viewportTransform[0];\n        },\n        /**\r\n     * Sets viewport transformation of this canvas instance\r\n     * @param {Array} vpt a Canvas 2D API transform matrix\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ setViewportTransform: function(vpt) {\n            var activeObject = this._activeObject, backgroundObject = this.backgroundImage, overlayObject = this.overlayImage, object, i, len;\n            this.viewportTransform = vpt;\n            for(i = 0, len = this._objects.length; i < len; i++){\n                object = this._objects[i];\n                object.group || object.setCoords(true);\n            }\n            if (activeObject) {\n                activeObject.setCoords();\n            }\n            if (backgroundObject) {\n                backgroundObject.setCoords(true);\n            }\n            if (overlayObject) {\n                overlayObject.setCoords(true);\n            }\n            this.calcViewportBoundaries();\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * Sets zoom level of this canvas instance, the zoom centered around point\r\n     * meaning that following zoom to point with the same point will have the visual\r\n     * effect of the zoom originating from that point. The point won't move.\r\n     * It has nothing to do with canvas center or visual center of the viewport.\r\n     * @param {fabric.Point} point to zoom with respect to\r\n     * @param {Number} value to set zoom to, less than 1 zooms out\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ zoomToPoint: function(point, value) {\n            // TODO: just change the scale, preserve other transformations\n            var before = point, vpt = this.viewportTransform.slice(0);\n            point = transformPoint(point, invertTransform(this.viewportTransform));\n            vpt[0] = value;\n            vpt[3] = value;\n            var after = transformPoint(point, vpt);\n            vpt[4] += before.x - after.x;\n            vpt[5] += before.y - after.y;\n            return this.setViewportTransform(vpt);\n        },\n        /**\r\n     * Sets zoom level of this canvas instance\r\n     * @param {Number} value to set zoom to, less than 1 zooms out\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ setZoom: function(value) {\n            this.zoomToPoint(new fabric.Point(0, 0), value);\n            return this;\n        },\n        /**\r\n     * Pan viewport so as to place point at top left corner of canvas\r\n     * @param {fabric.Point} point to move to\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ absolutePan: function(point) {\n            var vpt = this.viewportTransform.slice(0);\n            vpt[4] = -point.x;\n            vpt[5] = -point.y;\n            return this.setViewportTransform(vpt);\n        },\n        /**\r\n     * Pans viewpoint relatively\r\n     * @param {fabric.Point} point (position vector) to move by\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable true\r\n     */ relativePan: function(point) {\n            return this.absolutePan(new fabric.Point(-point.x - this.viewportTransform[4], -point.y - this.viewportTransform[5]));\n        },\n        /**\r\n     * Returns &lt;canvas> element corresponding to this instance\r\n     * @return {HTMLCanvasElement}\r\n     */ getElement: function() {\n            return this.lowerCanvasEl;\n        },\n        /**\r\n     * @private\r\n     * @param {fabric.Object} obj Object that was added\r\n     */ _onObjectAdded: function(obj) {\n            this.stateful && obj.setupState();\n            obj._set(\"canvas\", this);\n            obj.setCoords();\n            this.fire(\"object:added\", {\n                target: obj\n            });\n            obj.fire(\"added\");\n        },\n        /**\r\n     * @private\r\n     * @param {fabric.Object} obj Object that was removed\r\n     */ _onObjectRemoved: function(obj) {\n            this.fire(\"object:removed\", {\n                target: obj\n            });\n            obj.fire(\"removed\");\n            delete obj.canvas;\n        },\n        /**\r\n     * Clears specified context of canvas element\r\n     * @param {CanvasRenderingContext2D} ctx Context to clear\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ clearContext: function(ctx) {\n            ctx.clearRect(0, 0, this.width, this.height);\n            return this;\n        },\n        /**\r\n     * Returns context of canvas where objects are drawn\r\n     * @return {CanvasRenderingContext2D}\r\n     */ getContext: function() {\n            return this.contextContainer;\n        },\n        /**\r\n     * Clears all contexts (background, main, top) of an instance\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ clear: function() {\n            this.remove.apply(this, this.getObjects());\n            this.backgroundImage = null;\n            this.overlayImage = null;\n            this.backgroundColor = \"\";\n            this.overlayColor = \"\";\n            if (this._hasITextHandlers) {\n                this.off(\"mouse:up\", this._mouseUpITextHandler);\n                this._iTextInstances = null;\n                this._hasITextHandlers = false;\n            }\n            this.clearContext(this.contextContainer);\n            this.fire(\"canvas:cleared\");\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * Renders the canvas\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */ renderAll: function() {\n            var canvasToDrawOn = this.contextContainer;\n            this.renderCanvas(canvasToDrawOn, this._objects);\n            return this;\n        },\n        /**\r\n     * Function created to be instance bound at initialization\r\n     * used in requestAnimationFrame rendering\r\n     * Let the fabricJS call it. If you call it manually you could have more\r\n     * animationFrame stacking on to of each other\r\n     * for an imperative rendering, use canvas.renderAll\r\n     * @private\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */ renderAndReset: function() {\n            this.isRendering = 0;\n            this.renderAll();\n        },\n        /**\r\n     * Append a renderAll request to next animation frame.\r\n     * unless one is already in progress, in that case nothing is done\r\n     * a boolean flag will avoid appending more.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */ requestRenderAll: function() {\n            if (!this.isRendering) {\n                this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);\n            }\n            return this;\n        },\n        /**\r\n     * Calculate the position of the 4 corner of canvas with current viewportTransform.\r\n     * helps to determinate when an object is in the current rendering viewport using\r\n     * object absolute coordinates ( aCoords )\r\n     * @return {Object} points.tl\r\n     * @chainable\r\n     */ calcViewportBoundaries: function() {\n            var points = {}, width = this.width, height = this.height, iVpt = invertTransform(this.viewportTransform);\n            points.tl = transformPoint({\n                x: 0,\n                y: 0\n            }, iVpt);\n            points.br = transformPoint({\n                x: width,\n                y: height\n            }, iVpt);\n            points.tr = new fabric.Point(points.br.x, points.tl.y);\n            points.bl = new fabric.Point(points.tl.x, points.br.y);\n            this.vptCoords = points;\n            return points;\n        },\n        cancelRequestedRender: function() {\n            if (this.isRendering) {\n                fabric.util.cancelAnimFrame(this.isRendering);\n                this.isRendering = 0;\n            }\n        },\n        /**\r\n     * Renders background, objects, overlay and controls.\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {Array} objects to render\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */ renderCanvas: function(ctx, objects) {\n            var v = this.viewportTransform, path = this.clipPath;\n            this.cancelRequestedRender();\n            this.calcViewportBoundaries();\n            this.clearContext(ctx);\n            fabric.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);\n            this.fire(\"before:render\", {\n                ctx: ctx\n            });\n            this._renderBackground(ctx);\n            ctx.save();\n            //apply viewport transform once for all rendering process\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n            this._renderObjects(ctx, objects);\n            ctx.restore();\n            if (!this.controlsAboveOverlay && this.interactive) {\n                this.drawControls(ctx);\n            }\n            if (path) {\n                path.canvas = this;\n                // needed to setup a couple of variables\n                path.shouldCache();\n                path._transformDone = true;\n                path.renderCache({\n                    forClipping: true\n                });\n                this.drawClipPathOnCanvas(ctx);\n            }\n            this._renderOverlay(ctx);\n            if (this.controlsAboveOverlay && this.interactive) {\n                this.drawControls(ctx);\n            }\n            this.fire(\"after:render\", {\n                ctx: ctx\n            });\n        },\n        /**\r\n     * Paint the cached clipPath on the lowerCanvasEl\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ drawClipPathOnCanvas: function(ctx) {\n            var v = this.viewportTransform, path = this.clipPath;\n            ctx.save();\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n            // DEBUG: uncomment this line, comment the following\n            // ctx.globalAlpha = 0.4;\n            ctx.globalCompositeOperation = \"destination-in\";\n            path.transform(ctx);\n            ctx.scale(1 / path.zoomX, 1 / path.zoomY);\n            ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);\n            ctx.restore();\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Array} objects to render\r\n     */ _renderObjects: function(ctx, objects) {\n            var i, len;\n            for(i = 0, len = objects.length; i < len; ++i){\n                objects[i] && objects[i].render(ctx);\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {string} property 'background' or 'overlay'\r\n     */ _renderBackgroundOrOverlay: function(ctx, property) {\n            var fill = this[property + \"Color\"], object = this[property + \"Image\"], v = this.viewportTransform, needsVpt = this[property + \"Vpt\"];\n            if (!fill && !object) {\n                return;\n            }\n            if (fill) {\n                ctx.save();\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.lineTo(this.width, 0);\n                ctx.lineTo(this.width, this.height);\n                ctx.lineTo(0, this.height);\n                ctx.closePath();\n                ctx.fillStyle = fill.toLive ? fill.toLive(ctx, this) : fill;\n                if (needsVpt) {\n                    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n                }\n                ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);\n                var m = fill.gradientTransform || fill.patternTransform;\n                m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n                ctx.fill();\n                ctx.restore();\n            }\n            if (object) {\n                ctx.save();\n                if (needsVpt) {\n                    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n                }\n                object.render(ctx);\n                ctx.restore();\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderBackground: function(ctx) {\n            this._renderBackgroundOrOverlay(ctx, \"background\");\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderOverlay: function(ctx) {\n            this._renderBackgroundOrOverlay(ctx, \"overlay\");\n        },\n        /**\r\n     * Returns coordinates of a center of canvas.\r\n     * Returned value is an object with top and left properties\r\n     * @return {Object} object with \"top\" and \"left\" number values\r\n     * @deprecated migrate to `getCenterPoint`\r\n     */ getCenter: function() {\n            return {\n                top: this.height / 2,\n                left: this.width / 2\n            };\n        },\n        /**\r\n     * Returns coordinates of a center of canvas.\r\n     * @return {fabric.Point} \r\n     */ getCenterPoint: function() {\n            return new fabric.Point(this.width / 2, this.height / 2);\n        },\n        /**\r\n     * Centers object horizontally in the canvas\r\n     * @param {fabric.Object} object Object to center horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     */ centerObjectH: function(object) {\n            return this._centerObject(object, new fabric.Point(this.getCenterPoint().x, object.getCenterPoint().y));\n        },\n        /**\r\n     * Centers object vertically in the canvas\r\n     * @param {fabric.Object} object Object to center vertically\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ centerObjectV: function(object) {\n            return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenterPoint().y));\n        },\n        /**\r\n     * Centers object vertically and horizontally in the canvas\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ centerObject: function(object) {\n            var center = this.getCenterPoint();\n            return this._centerObject(object, center);\n        },\n        /**\r\n     * Centers object vertically and horizontally in the viewport\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ viewportCenterObject: function(object) {\n            var vpCenter = this.getVpCenter();\n            return this._centerObject(object, vpCenter);\n        },\n        /**\r\n     * Centers object horizontally in the viewport, object.top is unchanged\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ viewportCenterObjectH: function(object) {\n            var vpCenter = this.getVpCenter();\n            this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));\n            return this;\n        },\n        /**\r\n     * Centers object Vertically in the viewport, object.top is unchanged\r\n     * @param {fabric.Object} object Object to center vertically and horizontally\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ viewportCenterObjectV: function(object) {\n            var vpCenter = this.getVpCenter();\n            return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));\n        },\n        /**\r\n     * Calculate the point in canvas that correspond to the center of actual viewport.\r\n     * @return {fabric.Point} vpCenter, viewport center\r\n     * @chainable\r\n     */ getVpCenter: function() {\n            var center = this.getCenterPoint(), iVpt = invertTransform(this.viewportTransform);\n            return transformPoint(center, iVpt);\n        },\n        /**\r\n     * @private\r\n     * @param {fabric.Object} object Object to center\r\n     * @param {fabric.Point} center Center point\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ _centerObject: function(object, center) {\n            object.setPositionByOrigin(center, \"center\", \"center\");\n            object.setCoords();\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * Returns dataless JSON representation of canvas\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {String} json string\r\n     */ toDatalessJSON: function(propertiesToInclude) {\n            return this.toDatalessObject(propertiesToInclude);\n        },\n        /**\r\n     * Returns object representation of canvas\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            return this._toObjectMethod(\"toObject\", propertiesToInclude);\n        },\n        /**\r\n     * Returns dataless object representation of canvas\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toDatalessObject: function(propertiesToInclude) {\n            return this._toObjectMethod(\"toDatalessObject\", propertiesToInclude);\n        },\n        /**\r\n     * @private\r\n     */ _toObjectMethod: function(methodName, propertiesToInclude) {\n            var clipPath = this.clipPath, data = {\n                version: fabric.version,\n                objects: this._toObjects(methodName, propertiesToInclude)\n            };\n            if (clipPath && !clipPath.excludeFromExport) {\n                data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);\n            }\n            extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));\n            fabric.util.populateWithProperties(this, data, propertiesToInclude);\n            return data;\n        },\n        /**\r\n     * @private\r\n     */ _toObjects: function(methodName, propertiesToInclude) {\n            return this._objects.filter(function(object) {\n                return !object.excludeFromExport;\n            }).map(function(instance) {\n                return this._toObject(instance, methodName, propertiesToInclude);\n            }, this);\n        },\n        /**\r\n     * @private\r\n     */ _toObject: function(instance, methodName, propertiesToInclude) {\n            var originalValue;\n            if (!this.includeDefaultValues) {\n                originalValue = instance.includeDefaultValues;\n                instance.includeDefaultValues = false;\n            }\n            var object = instance[methodName](propertiesToInclude);\n            if (!this.includeDefaultValues) {\n                instance.includeDefaultValues = originalValue;\n            }\n            return object;\n        },\n        /**\r\n     * @private\r\n     */ __serializeBgOverlay: function(methodName, propertiesToInclude) {\n            var data = {}, bgImage = this.backgroundImage, overlayImage = this.overlayImage, bgColor = this.backgroundColor, overlayColor = this.overlayColor;\n            if (bgColor && bgColor.toObject) {\n                if (!bgColor.excludeFromExport) {\n                    data.background = bgColor.toObject(propertiesToInclude);\n                }\n            } else if (bgColor) {\n                data.background = bgColor;\n            }\n            if (overlayColor && overlayColor.toObject) {\n                if (!overlayColor.excludeFromExport) {\n                    data.overlay = overlayColor.toObject(propertiesToInclude);\n                }\n            } else if (overlayColor) {\n                data.overlay = overlayColor;\n            }\n            if (bgImage && !bgImage.excludeFromExport) {\n                data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);\n            }\n            if (overlayImage && !overlayImage.excludeFromExport) {\n                data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);\n            }\n            return data;\n        },\n        /**\r\n     * Moves an object or the objects of a multiple selection\r\n     * to the bottom of the stack of drawn objects\r\n     * @param {fabric.Object} object Object to send to back\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ sendToBack: function(object) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, objs;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = objs.length; i--;){\n                    obj = objs[i];\n                    removeFromArray(this._objects, obj);\n                    this._objects.unshift(obj);\n                }\n            } else {\n                removeFromArray(this._objects, object);\n                this._objects.unshift(object);\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * Moves an object or the objects of a multiple selection\r\n     * to the top of the stack of drawn objects\r\n     * @param {fabric.Object} object Object to send\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ bringToFront: function(object) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, objs;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = 0; i < objs.length; i++){\n                    obj = objs[i];\n                    removeFromArray(this._objects, obj);\n                    this._objects.push(obj);\n                }\n            } else {\n                removeFromArray(this._objects, object);\n                this._objects.push(object);\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * Moves an object or a selection down in stack of drawn objects\r\n     * An optional parameter, intersecting allows to move the object in behind\r\n     * the first intersecting object. Where intersection is calculated with\r\n     * bounding box. If no intersection is found, there will not be change in the\r\n     * stack.\r\n     * @param {fabric.Object} object Object to send\r\n     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ sendBackwards: function(object, intersecting) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = 0; i < objs.length; i++){\n                    obj = objs[i];\n                    idx = this._objects.indexOf(obj);\n                    if (idx > 0 + objsMoved) {\n                        newIdx = idx - 1;\n                        removeFromArray(this._objects, obj);\n                        this._objects.splice(newIdx, 0, obj);\n                    }\n                    objsMoved++;\n                }\n            } else {\n                idx = this._objects.indexOf(object);\n                if (idx !== 0) {\n                    // if object is not on the bottom of stack\n                    newIdx = this._findNewLowerIndex(object, idx, intersecting);\n                    removeFromArray(this._objects, object);\n                    this._objects.splice(newIdx, 0, object);\n                }\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * @private\r\n     */ _findNewLowerIndex: function(object, idx, intersecting) {\n            var newIdx, i;\n            if (intersecting) {\n                newIdx = idx;\n                // traverse down the stack looking for the nearest intersecting object\n                for(i = idx - 1; i >= 0; --i){\n                    var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);\n                    if (isIntersecting) {\n                        newIdx = i;\n                        break;\n                    }\n                }\n            } else {\n                newIdx = idx - 1;\n            }\n            return newIdx;\n        },\n        /**\r\n     * Moves an object or a selection up in stack of drawn objects\r\n     * An optional parameter, intersecting allows to move the object in front\r\n     * of the first intersecting object. Where intersection is calculated with\r\n     * bounding box. If no intersection is found, there will not be change in the\r\n     * stack.\r\n     * @param {fabric.Object} object Object to send\r\n     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ bringForward: function(object, intersecting) {\n            if (!object) {\n                return this;\n            }\n            var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;\n            if (object === activeSelection && object.type === \"activeSelection\") {\n                objs = activeSelection._objects;\n                for(i = objs.length; i--;){\n                    obj = objs[i];\n                    idx = this._objects.indexOf(obj);\n                    if (idx < this._objects.length - 1 - objsMoved) {\n                        newIdx = idx + 1;\n                        removeFromArray(this._objects, obj);\n                        this._objects.splice(newIdx, 0, obj);\n                    }\n                    objsMoved++;\n                }\n            } else {\n                idx = this._objects.indexOf(object);\n                if (idx !== this._objects.length - 1) {\n                    // if object is not on top of stack (last item in an array)\n                    newIdx = this._findNewUpperIndex(object, idx, intersecting);\n                    removeFromArray(this._objects, object);\n                    this._objects.splice(newIdx, 0, object);\n                }\n            }\n            this.renderOnAddRemove && this.requestRenderAll();\n            return this;\n        },\n        /**\r\n     * @private\r\n     */ _findNewUpperIndex: function(object, idx, intersecting) {\n            var newIdx, i, len;\n            if (intersecting) {\n                newIdx = idx;\n                // traverse up the stack looking for the nearest intersecting object\n                for(i = idx + 1, len = this._objects.length; i < len; ++i){\n                    var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);\n                    if (isIntersecting) {\n                        newIdx = i;\n                        break;\n                    }\n                }\n            } else {\n                newIdx = idx + 1;\n            }\n            return newIdx;\n        },\n        /**\r\n     * Moves an object to specified level in stack of drawn objects\r\n     * @param {fabric.Object} object Object to send\r\n     * @param {Number} index Position to move to\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ moveTo: function(object, index) {\n            removeFromArray(this._objects, object);\n            this._objects.splice(index, 0, object);\n            return this.renderOnAddRemove && this.requestRenderAll();\n        },\n        /**\r\n     * Clears a canvas element and dispose objects\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ dispose: function() {\n            // cancel eventually ongoing renders\n            if (this.isRendering) {\n                fabric.util.cancelAnimFrame(this.isRendering);\n                this.isRendering = 0;\n            }\n            this.forEachObject(function(object) {\n                object.dispose && object.dispose();\n            });\n            this._objects = [];\n            if (this.backgroundImage && this.backgroundImage.dispose) {\n                this.backgroundImage.dispose();\n            }\n            this.backgroundImage = null;\n            if (this.overlayImage && this.overlayImage.dispose) {\n                this.overlayImage.dispose();\n            }\n            this.overlayImage = null;\n            this._iTextInstances = null;\n            this.contextContainer = null;\n            // restore canvas style\n            this.lowerCanvasEl.classList.remove(\"lower-canvas\");\n            fabric.util.setStyle(this.lowerCanvasEl, this._originalCanvasStyle);\n            delete this._originalCanvasStyle;\n            // restore canvas size to original size in case retina scaling was applied\n            this.lowerCanvasEl.setAttribute(\"width\", this.width);\n            this.lowerCanvasEl.setAttribute(\"height\", this.height);\n            fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);\n            this.lowerCanvasEl = undefined;\n            return this;\n        },\n        /**\r\n     * Returns a string representation of an instance\r\n     * @return {String} string representation of an instance\r\n     */ toString: function() {\n            return \"#<fabric.Canvas (\" + this.complexity() + \"): \" + \"{ objects: \" + this._objects.length + \" }>\";\n        }\n    });\n    extend(fabric.StaticCanvas.prototype, fabric.Observable);\n    extend(fabric.StaticCanvas.prototype, fabric.Collection);\n    extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);\n    extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {\n        /**\r\n     * @static\r\n     * @type String\r\n     * @default\r\n     */ EMPTY_JSON: '{\"objects\": [], \"background\": \"white\"}',\n        /**\r\n     * Provides a way to check support of some of the canvas methods\r\n     * (either those of HTMLCanvasElement itself, or rendering context)\r\n     *\r\n     * @param {String} methodName Method to check support for;\r\n     *                            Could be one of \"setLineDash\"\r\n     * @return {Boolean | null} `true` if method is supported (or at least exists),\r\n     *                          `null` if canvas element or context can not be initialized\r\n     */ supports: function(methodName) {\n            var el = createCanvasElement();\n            if (!el || !el.getContext) {\n                return null;\n            }\n            var ctx = el.getContext(\"2d\");\n            if (!ctx) {\n                return null;\n            }\n            switch(methodName){\n                case \"setLineDash\":\n                    return typeof ctx.setLineDash !== \"undefined\";\n                default:\n                    return null;\n            }\n        }\n    });\n    /**\r\n   * Returns Object representation of canvas\r\n   * this alias is provided because if you call JSON.stringify on an instance,\r\n   * the toJSON object will be invoked if it exists.\r\n   * Having a toJSON method means you can do JSON.stringify(myCanvas)\r\n   * @function\r\n   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n   * @return {Object} JSON compatible object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}\r\n   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}\r\n   * @example <caption>JSON without additional properties</caption>\r\n   * var json = canvas.toJSON();\r\n   * @example <caption>JSON with additional properties included</caption>\r\n   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);\r\n   * @example <caption>JSON without default values</caption>\r\n   * canvas.includeDefaultValues = false;\r\n   * var json = canvas.toJSON();\r\n   */ fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;\n    if (fabric.isLikelyNode) {\n        fabric.StaticCanvas.prototype.createPNGStream = function() {\n            var impl = getNodeCanvas(this.lowerCanvasEl);\n            return impl && impl.createPNGStream();\n        };\n        fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {\n            var impl = getNodeCanvas(this.lowerCanvasEl);\n            return impl && impl.createJPEGStream(opts);\n        };\n    }\n})();\n/**\r\n * BaseBrush class\r\n * @class fabric.BaseBrush\r\n * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}\r\n */ fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {\n    /**\r\n   * Color of a brush\r\n   * @type String\r\n   * @default\r\n   */ color: \"rgb(0, 0, 0)\",\n    /**\r\n   * Width of a brush, has to be a Number, no string literals\r\n   * @type Number\r\n   * @default\r\n   */ width: 1,\n    /**\r\n   * Shadow object representing shadow of this shape.\r\n   * <b>Backwards incompatibility note:</b> This property replaces \"shadowColor\" (String), \"shadowOffsetX\" (Number),\r\n   * \"shadowOffsetY\" (Number) and \"shadowBlur\" (Number) since v1.2.12\r\n   * @type fabric.Shadow\r\n   * @default\r\n   */ shadow: null,\n    /**\r\n   * Line endings style of a brush (one of \"butt\", \"round\", \"square\")\r\n   * @type String\r\n   * @default\r\n   */ strokeLineCap: \"round\",\n    /**\r\n   * Corner style of a brush (one of \"bevel\", \"round\", \"miter\")\r\n   * @type String\r\n   * @default\r\n   */ strokeLineJoin: \"round\",\n    /**\r\n   * Maximum miter length (used for strokeLineJoin = \"miter\") of a brush's\r\n   * @type Number\r\n   * @default\r\n   */ strokeMiterLimit: 10,\n    /**\r\n   * Stroke Dash Array.\r\n   * @type Array\r\n   * @default\r\n   */ strokeDashArray: null,\n    /**\r\n   * When `true`, the free drawing is limited to the whiteboard size. Default to false.\r\n   * @type Boolean\r\n   * @default false\r\n  */ limitedToCanvasSize: false,\n    /**\r\n   * Sets brush styles\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */ _setBrushStyles: function(ctx) {\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = this.width;\n        ctx.lineCap = this.strokeLineCap;\n        ctx.miterLimit = this.strokeMiterLimit;\n        ctx.lineJoin = this.strokeLineJoin;\n        ctx.setLineDash(this.strokeDashArray || []);\n    },\n    /**\r\n   * Sets the transformation on given context\r\n   * @param {RenderingContext2d} ctx context to render on\r\n   * @private\r\n   */ _saveAndTransform: function(ctx) {\n        var v = this.canvas.viewportTransform;\n        ctx.save();\n        ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n    },\n    /**\r\n   * Sets brush shadow styles\r\n   * @private\r\n   */ _setShadow: function() {\n        if (!this.shadow) {\n            return;\n        }\n        var canvas = this.canvas, shadow = this.shadow, ctx = canvas.contextTop, zoom = canvas.getZoom();\n        if (canvas && canvas._isRetinaScaling()) {\n            zoom *= fabric.devicePixelRatio;\n        }\n        ctx.shadowColor = shadow.color;\n        ctx.shadowBlur = shadow.blur * zoom;\n        ctx.shadowOffsetX = shadow.offsetX * zoom;\n        ctx.shadowOffsetY = shadow.offsetY * zoom;\n    },\n    needsFullRender: function() {\n        var color = new fabric.Color(this.color);\n        return color.getAlpha() < 1 || !!this.shadow;\n    },\n    /**\r\n   * Removes brush shadow styles\r\n   * @private\r\n   */ _resetShadow: function() {\n        var ctx = this.canvas.contextTop;\n        ctx.shadowColor = \"\";\n        ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n    },\n    /**\r\n   * Check is pointer is outside canvas boundaries\r\n   * @param {Object} pointer\r\n   * @private\r\n  */ _isOutSideCanvas: function(pointer) {\n        return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();\n    }\n});\n(function() {\n    /**\r\n   * PencilBrush class\r\n   * @class fabric.PencilBrush\r\n   * @extends fabric.BaseBrush\r\n   */ fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {\n        /**\r\n     * Discard points that are less than `decimate` pixel distant from each other\r\n     * @type Number\r\n     * @default 0.4\r\n     */ decimate: 0.4,\n        /**\r\n     * Draws a straight line between last recorded point to current pointer\r\n     * Used for `shift` functionality\r\n     *\r\n     * @type boolean\r\n     * @default false\r\n     */ drawStraightLine: false,\n        /**\r\n     * The event modifier key that makes the brush draw a straight line.\r\n     * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.\r\n     * @type {'altKey' | 'shiftKey' | 'ctrlKey' | 'none' | undefined | null}\r\n     */ straightLineKey: \"shiftKey\",\n        /**\r\n     * Constructor\r\n     * @param {fabric.Canvas} canvas\r\n     * @return {fabric.PencilBrush} Instance of a pencil brush\r\n     */ initialize: function(canvas) {\n            this.canvas = canvas;\n            this._points = [];\n        },\n        needsFullRender: function() {\n            return this.callSuper(\"needsFullRender\") || this._hasStraightLine;\n        },\n        /**\r\n     * Invoked inside on mouse down and mouse move\r\n     * @param {Object} pointer\r\n     */ _drawSegment: function(ctx, p1, p2) {\n            var midPoint = p1.midPointFrom(p2);\n            ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);\n            return midPoint;\n        },\n        /**\r\n     * Invoked on mouse down\r\n     * @param {Object} pointer\r\n     */ onMouseDown: function(pointer, options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return;\n            }\n            this.drawStraightLine = options.e[this.straightLineKey];\n            this._prepareForDrawing(pointer);\n            // capture coordinates immediately\n            // this allows to draw dots (when movement never occurs)\n            this._captureDrawingPath(pointer);\n            this._render();\n        },\n        /**\r\n     * Invoked on mouse move\r\n     * @param {Object} pointer\r\n     */ onMouseMove: function(pointer, options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return;\n            }\n            this.drawStraightLine = options.e[this.straightLineKey];\n            if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n                return;\n            }\n            if (this._captureDrawingPath(pointer) && this._points.length > 1) {\n                if (this.needsFullRender()) {\n                    // redraw curve\n                    // clear top canvas\n                    this.canvas.clearContext(this.canvas.contextTop);\n                    this._render();\n                } else {\n                    var points = this._points, length = points.length, ctx = this.canvas.contextTop;\n                    // draw the curve update\n                    this._saveAndTransform(ctx);\n                    if (this.oldEnd) {\n                        ctx.beginPath();\n                        ctx.moveTo(this.oldEnd.x, this.oldEnd.y);\n                    }\n                    this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);\n                    ctx.stroke();\n                    ctx.restore();\n                }\n            }\n        },\n        /**\r\n     * Invoked on mouse up\r\n     */ onMouseUp: function(options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return true;\n            }\n            this.drawStraightLine = false;\n            this.oldEnd = undefined;\n            this._finalizeAndAddPath();\n            return false;\n        },\n        /**\r\n     * @private\r\n     * @param {Object} pointer Actual mouse position related to the canvas.\r\n     */ _prepareForDrawing: function(pointer) {\n            var p = new fabric.Point(pointer.x, pointer.y);\n            this._reset();\n            this._addPoint(p);\n            this.canvas.contextTop.moveTo(p.x, p.y);\n        },\n        /**\r\n     * @private\r\n     * @param {fabric.Point} point Point to be added to points array\r\n     */ _addPoint: function(point) {\n            if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {\n                return false;\n            }\n            if (this.drawStraightLine && this._points.length > 1) {\n                this._hasStraightLine = true;\n                this._points.pop();\n            }\n            this._points.push(point);\n            return true;\n        },\n        /**\r\n     * Clear points array and set contextTop canvas style.\r\n     * @private\r\n     */ _reset: function() {\n            this._points = [];\n            this._setBrushStyles(this.canvas.contextTop);\n            this._setShadow();\n            this._hasStraightLine = false;\n        },\n        /**\r\n     * @private\r\n     * @param {Object} pointer Actual mouse position related to the canvas.\r\n     */ _captureDrawingPath: function(pointer) {\n            var pointerPoint = new fabric.Point(pointer.x, pointer.y);\n            return this._addPoint(pointerPoint);\n        },\n        /**\r\n     * Draw a smooth path on the topCanvas using quadraticCurveTo\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} [ctx]\r\n     */ _render: function(ctx) {\n            var i, len, p1 = this._points[0], p2 = this._points[1];\n            ctx = ctx || this.canvas.contextTop;\n            this._saveAndTransform(ctx);\n            ctx.beginPath();\n            //if we only have 2 points in the path and they are the same\n            //it means that the user only clicked the canvas without moving the mouse\n            //then we should be drawing a dot. A path isn't drawn between two identical dots\n            //that's why we set them apart a bit\n            if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {\n                var width = this.width / 1000;\n                p1 = new fabric.Point(p1.x, p1.y);\n                p2 = new fabric.Point(p2.x, p2.y);\n                p1.x -= width;\n                p2.x += width;\n            }\n            ctx.moveTo(p1.x, p1.y);\n            for(i = 1, len = this._points.length; i < len; i++){\n                // we pick the point between pi + 1 & pi + 2 as the\n                // end point and p1 as our control point.\n                this._drawSegment(ctx, p1, p2);\n                p1 = this._points[i];\n                p2 = this._points[i + 1];\n            }\n            // Draw last line as a straight line while\n            // we wait for the next point to be able to calculate\n            // the bezier control point\n            ctx.lineTo(p1.x, p1.y);\n            ctx.stroke();\n            ctx.restore();\n        },\n        /**\r\n     * Converts points to SVG path\r\n     * @param {Array} points Array of points\r\n     * @return {(string|number)[][]} SVG path commands\r\n     */ convertPointsToSVGPath: function(points) {\n            var correction = this.width / 1000;\n            return fabric.util.getSmoothPathFromPoints(points, correction);\n        },\n        /**\r\n     * @private\r\n     * @param {(string|number)[][]} pathData SVG path commands\r\n     * @returns {boolean}\r\n     */ _isEmptySVGPath: function(pathData) {\n            var pathString = fabric.util.joinPath(pathData);\n            return pathString === \"M 0 0 Q 0 0 0 0 L 0 0\";\n        },\n        /**\r\n     * Creates fabric.Path object to add on canvas\r\n     * @param {(string|number)[][]} pathData Path data\r\n     * @return {fabric.Path} Path to add on canvas\r\n     */ createPath: function(pathData) {\n            var path = new fabric.Path(pathData, {\n                fill: null,\n                stroke: this.color,\n                strokeWidth: this.width,\n                strokeLineCap: this.strokeLineCap,\n                strokeMiterLimit: this.strokeMiterLimit,\n                strokeLineJoin: this.strokeLineJoin,\n                strokeDashArray: this.strokeDashArray\n            });\n            if (this.shadow) {\n                this.shadow.affectStroke = true;\n                path.shadow = new fabric.Shadow(this.shadow);\n            }\n            return path;\n        },\n        /**\r\n     * Decimate points array with the decimate value\r\n     */ decimatePoints: function(points, distance) {\n            if (points.length <= 2) {\n                return points;\n            }\n            var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2), i, l = points.length - 1, lastPoint = points[0], newPoints = [\n                lastPoint\n            ], cDistance;\n            for(i = 1; i < l - 1; i++){\n                cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);\n                if (cDistance >= adjustedDistance) {\n                    lastPoint = points[i];\n                    newPoints.push(lastPoint);\n                }\n            }\n            /**\r\n       * Add the last point from the original line to the end of the array.\r\n       * This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.\r\n       */ newPoints.push(points[l]);\n            return newPoints;\n        },\n        /**\r\n     * On mouseup after drawing the path on contextTop canvas\r\n     * we use the points captured to create an new fabric path object\r\n     * and add it to the fabric canvas.\r\n     */ _finalizeAndAddPath: function() {\n            var ctx = this.canvas.contextTop;\n            ctx.closePath();\n            if (this.decimate) {\n                this._points = this.decimatePoints(this._points, this.decimate);\n            }\n            var pathData = this.convertPointsToSVGPath(this._points);\n            if (this._isEmptySVGPath(pathData)) {\n                // do not create 0 width/height paths, as they are\n                // rendered inconsistently across browsers\n                // Firefox 4, for example, renders a dot,\n                // whereas Chrome 10 renders nothing\n                this.canvas.requestRenderAll();\n                return;\n            }\n            var path = this.createPath(pathData);\n            this.canvas.clearContext(this.canvas.contextTop);\n            this.canvas.fire(\"before:path:created\", {\n                path: path\n            });\n            this.canvas.add(path);\n            this.canvas.requestRenderAll();\n            path.setCoords();\n            this._resetShadow();\n            // fire event 'path' created\n            this.canvas.fire(\"path:created\", {\n                path: path\n            });\n        }\n    });\n})();\n/**\r\n * CircleBrush class\r\n * @class fabric.CircleBrush\r\n */ fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {\n    /**\r\n   * Width of a brush\r\n   * @type Number\r\n   * @default\r\n   */ width: 10,\n    /**\r\n   * Constructor\r\n   * @param {fabric.Canvas} canvas\r\n   * @return {fabric.CircleBrush} Instance of a circle brush\r\n   */ initialize: function(canvas) {\n        this.canvas = canvas;\n        this.points = [];\n    },\n    /**\r\n   * Invoked inside on mouse down and mouse move\r\n   * @param {Object} pointer\r\n   */ drawDot: function(pointer) {\n        var point = this.addPoint(pointer), ctx = this.canvas.contextTop;\n        this._saveAndTransform(ctx);\n        this.dot(ctx, point);\n        ctx.restore();\n    },\n    dot: function(ctx, point) {\n        ctx.fillStyle = point.fill;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);\n        ctx.closePath();\n        ctx.fill();\n    },\n    /**\r\n   * Invoked on mouse down\r\n   */ onMouseDown: function(pointer) {\n        this.points.length = 0;\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._setShadow();\n        this.drawDot(pointer);\n    },\n    /**\r\n   * Render the full state of the brush\r\n   * @private\r\n   */ _render: function() {\n        var ctx = this.canvas.contextTop, i, len, points = this.points;\n        this._saveAndTransform(ctx);\n        for(i = 0, len = points.length; i < len; i++){\n            this.dot(ctx, points[i]);\n        }\n        ctx.restore();\n    },\n    /**\r\n   * Invoked on mouse move\r\n   * @param {Object} pointer\r\n   */ onMouseMove: function(pointer) {\n        if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n            return;\n        }\n        if (this.needsFullRender()) {\n            this.canvas.clearContext(this.canvas.contextTop);\n            this.addPoint(pointer);\n            this._render();\n        } else {\n            this.drawDot(pointer);\n        }\n    },\n    /**\r\n   * Invoked on mouse up\r\n   */ onMouseUp: function() {\n        var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;\n        this.canvas.renderOnAddRemove = false;\n        var circles = [];\n        for(i = 0, len = this.points.length; i < len; i++){\n            var point = this.points[i], circle = new fabric.Circle({\n                radius: point.radius,\n                left: point.x,\n                top: point.y,\n                originX: \"center\",\n                originY: \"center\",\n                fill: point.fill\n            });\n            this.shadow && (circle.shadow = new fabric.Shadow(this.shadow));\n            circles.push(circle);\n        }\n        var group = new fabric.Group(circles);\n        group.canvas = this.canvas;\n        this.canvas.fire(\"before:path:created\", {\n            path: group\n        });\n        this.canvas.add(group);\n        this.canvas.fire(\"path:created\", {\n            path: group\n        });\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._resetShadow();\n        this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n        this.canvas.requestRenderAll();\n    },\n    /**\r\n   * @param {Object} pointer\r\n   * @return {fabric.Point} Just added pointer point\r\n   */ addPoint: function(pointer) {\n        var pointerPoint = new fabric.Point(pointer.x, pointer.y), circleRadius = fabric.util.getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2, circleColor = new fabric.Color(this.color).setAlpha(fabric.util.getRandomInt(0, 100) / 100).toRgba();\n        pointerPoint.radius = circleRadius;\n        pointerPoint.fill = circleColor;\n        this.points.push(pointerPoint);\n        return pointerPoint;\n    }\n});\n/**\r\n * SprayBrush class\r\n * @class fabric.SprayBrush\r\n */ fabric.SprayBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {\n    /**\r\n   * Width of a spray\r\n   * @type Number\r\n   * @default\r\n   */ width: 10,\n    /**\r\n   * Density of a spray (number of dots per chunk)\r\n   * @type Number\r\n   * @default\r\n   */ density: 20,\n    /**\r\n   * Width of spray dots\r\n   * @type Number\r\n   * @default\r\n   */ dotWidth: 1,\n    /**\r\n   * Width variance of spray dots\r\n   * @type Number\r\n   * @default\r\n   */ dotWidthVariance: 1,\n    /**\r\n   * Whether opacity of a dot should be random\r\n   * @type Boolean\r\n   * @default\r\n   */ randomOpacity: false,\n    /**\r\n   * Whether overlapping dots (rectangles) should be removed (for performance reasons)\r\n   * @type Boolean\r\n   * @default\r\n   */ optimizeOverlapping: true,\n    /**\r\n   * Constructor\r\n   * @param {fabric.Canvas} canvas\r\n   * @return {fabric.SprayBrush} Instance of a spray brush\r\n   */ initialize: function(canvas) {\n        this.canvas = canvas;\n        this.sprayChunks = [];\n    },\n    /**\r\n   * Invoked on mouse down\r\n   * @param {Object} pointer\r\n   */ onMouseDown: function(pointer) {\n        this.sprayChunks.length = 0;\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._setShadow();\n        this.addSprayChunk(pointer);\n        this.render(this.sprayChunkPoints);\n    },\n    /**\r\n   * Invoked on mouse move\r\n   * @param {Object} pointer\r\n   */ onMouseMove: function(pointer) {\n        if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {\n            return;\n        }\n        this.addSprayChunk(pointer);\n        this.render(this.sprayChunkPoints);\n    },\n    /**\r\n   * Invoked on mouse up\r\n   */ onMouseUp: function() {\n        var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;\n        this.canvas.renderOnAddRemove = false;\n        var rects = [];\n        for(var i = 0, ilen = this.sprayChunks.length; i < ilen; i++){\n            var sprayChunk = this.sprayChunks[i];\n            for(var j = 0, jlen = sprayChunk.length; j < jlen; j++){\n                var rect = new fabric.Rect({\n                    width: sprayChunk[j].width,\n                    height: sprayChunk[j].width,\n                    left: sprayChunk[j].x + 1,\n                    top: sprayChunk[j].y + 1,\n                    originX: \"center\",\n                    originY: \"center\",\n                    fill: this.color\n                });\n                rects.push(rect);\n            }\n        }\n        if (this.optimizeOverlapping) {\n            rects = this._getOptimizedRects(rects);\n        }\n        var group = new fabric.Group(rects);\n        this.shadow && group.set(\"shadow\", new fabric.Shadow(this.shadow));\n        this.canvas.fire(\"before:path:created\", {\n            path: group\n        });\n        this.canvas.add(group);\n        this.canvas.fire(\"path:created\", {\n            path: group\n        });\n        this.canvas.clearContext(this.canvas.contextTop);\n        this._resetShadow();\n        this.canvas.renderOnAddRemove = originalRenderOnAddRemove;\n        this.canvas.requestRenderAll();\n    },\n    /**\r\n   * @private\r\n   * @param {Array} rects\r\n   */ _getOptimizedRects: function(rects) {\n        // avoid creating duplicate rects at the same coordinates\n        var uniqueRects = {}, key, i, len;\n        for(i = 0, len = rects.length; i < len; i++){\n            key = rects[i].left + \"\" + rects[i].top;\n            if (!uniqueRects[key]) {\n                uniqueRects[key] = rects[i];\n            }\n        }\n        var uniqueRectsArray = [];\n        for(key in uniqueRects){\n            uniqueRectsArray.push(uniqueRects[key]);\n        }\n        return uniqueRectsArray;\n    },\n    /**\r\n   * Render new chunk of spray brush\r\n   */ render: function(sprayChunk) {\n        var ctx = this.canvas.contextTop, i, len;\n        ctx.fillStyle = this.color;\n        this._saveAndTransform(ctx);\n        for(i = 0, len = sprayChunk.length; i < len; i++){\n            var point = sprayChunk[i];\n            if (typeof point.opacity !== \"undefined\") {\n                ctx.globalAlpha = point.opacity;\n            }\n            ctx.fillRect(point.x, point.y, point.width, point.width);\n        }\n        ctx.restore();\n    },\n    /**\r\n   * Render all spray chunks\r\n   */ _render: function() {\n        var ctx = this.canvas.contextTop, i, ilen;\n        ctx.fillStyle = this.color;\n        this._saveAndTransform(ctx);\n        for(i = 0, ilen = this.sprayChunks.length; i < ilen; i++){\n            this.render(this.sprayChunks[i]);\n        }\n        ctx.restore();\n    },\n    /**\r\n   * @param {Object} pointer\r\n   */ addSprayChunk: function(pointer) {\n        this.sprayChunkPoints = [];\n        var x, y, width, radius = this.width / 2, i;\n        for(i = 0; i < this.density; i++){\n            x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);\n            y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);\n            if (this.dotWidthVariance) {\n                width = fabric.util.getRandomInt(// bottom clamp width to 1\n                Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance);\n            } else {\n                width = this.dotWidth;\n            }\n            var point = new fabric.Point(x, y);\n            point.width = width;\n            if (this.randomOpacity) {\n                point.opacity = fabric.util.getRandomInt(0, 100) / 100;\n            }\n            this.sprayChunkPoints.push(point);\n        }\n        this.sprayChunks.push(this.sprayChunkPoints);\n    }\n});\n/**\r\n * PatternBrush class\r\n * @class fabric.PatternBrush\r\n * @extends fabric.BaseBrush\r\n */ fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {\n    getPatternSrc: function() {\n        var dotWidth = 20, dotDistance = 5, patternCanvas = fabric.util.createCanvasElement(), patternCtx = patternCanvas.getContext(\"2d\");\n        patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;\n        patternCtx.fillStyle = this.color;\n        patternCtx.beginPath();\n        patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);\n        patternCtx.closePath();\n        patternCtx.fill();\n        return patternCanvas;\n    },\n    getPatternSrcFunction: function() {\n        return String(this.getPatternSrc).replace(\"this.color\", '\"' + this.color + '\"');\n    },\n    /**\r\n   * Creates \"pattern\" instance property\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */ getPattern: function(ctx) {\n        return ctx.createPattern(this.source || this.getPatternSrc(), \"repeat\");\n    },\n    /**\r\n   * Sets brush styles\r\n   * @param {CanvasRenderingContext2D} ctx\r\n   */ _setBrushStyles: function(ctx) {\n        this.callSuper(\"_setBrushStyles\", ctx);\n        ctx.strokeStyle = this.getPattern(ctx);\n    },\n    /**\r\n   * Creates path\r\n   */ createPath: function(pathData) {\n        var path = this.callSuper(\"createPath\", pathData), topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);\n        path.stroke = new fabric.Pattern({\n            source: this.source || this.getPatternSrcFunction(),\n            offsetX: -topLeft.x,\n            offsetY: -topLeft.y\n        });\n        return path;\n    }\n});\n(function() {\n    var getPointer = fabric.util.getPointer, degreesToRadians = fabric.util.degreesToRadians, isTouchEvent = fabric.util.isTouchEvent;\n    /**\r\n   * Canvas class\r\n   * @class fabric.Canvas\r\n   * @extends fabric.StaticCanvas\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}\r\n   * @see {@link fabric.Canvas#initialize} for constructor definition\r\n   *\r\n   * @fires object:modified at the end of a transform or any change when statefull is true\r\n   * @fires object:rotating while an object is being rotated from the control\r\n   * @fires object:scaling while an object is being scaled by controls\r\n   * @fires object:moving while an object is being dragged\r\n   * @fires object:skewing while an object is being skewed from the controls\r\n   *\r\n   * @fires before:transform before a transform is is started\r\n   * @fires before:selection:cleared\r\n   * @fires selection:cleared\r\n   * @fires selection:updated\r\n   * @fires selection:created\r\n   *\r\n   * @fires path:created after a drawing operation ends and the path is added\r\n   * @fires mouse:down\r\n   * @fires mouse:move\r\n   * @fires mouse:up\r\n   * @fires mouse:down:before  on mouse down, before the inner fabric logic runs\r\n   * @fires mouse:move:before on mouse move, before the inner fabric logic runs\r\n   * @fires mouse:up:before on mouse up, before the inner fabric logic runs\r\n   * @fires mouse:over\r\n   * @fires mouse:out\r\n   * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.\r\n   *\r\n   * @fires dragover\r\n   * @fires dragenter\r\n   * @fires dragleave\r\n   * @fires drop:before before drop event. same native event. This is added to handle edge cases\r\n   * @fires drop\r\n   * @fires after:render at the end of the render process, receives the context in the callback\r\n   * @fires before:render at start the render process, receives the context in the callback\r\n   *\r\n   */ fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {\n        /**\r\n     * Constructor\r\n     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */ initialize: function(el, options) {\n            options || (options = {});\n            this.renderAndResetBound = this.renderAndReset.bind(this);\n            this.requestRenderAllBound = this.requestRenderAll.bind(this);\n            this._initStatic(el, options);\n            this._initInteractive();\n            this._createCacheCanvas();\n        },\n        /**\r\n     * When true, objects can be transformed by one side (unproportionally)\r\n     * when dragged on the corners that normally would not do that.\r\n     * @type Boolean\r\n     * @default\r\n     * @since fabric 4.0 // changed name and default value\r\n     */ uniformScaling: true,\n        /**\r\n     * Indicates which key switches uniform scaling.\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled.\r\n     * totally wrong named. this sounds like `uniform scaling`\r\n     * if Canvas.uniformScaling is true, pressing this will set it to false\r\n     * and viceversa.\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */ uniScaleKey: \"shiftKey\",\n        /**\r\n     * When true, objects use center point as the origin of scale transformation.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */ centeredScaling: false,\n        /**\r\n     * When true, objects use center point as the origin of rotate transformation.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */ centeredRotation: false,\n        /**\r\n     * Indicates which key enable centered Transform\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled feature disabled.\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */ centeredKey: \"altKey\",\n        /**\r\n     * Indicates which key enable alternate action on corner\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled feature disabled.\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */ altActionKey: \"shiftKey\",\n        /**\r\n     * Indicates that canvas is interactive. This property should not be changed.\r\n     * @type Boolean\r\n     * @default\r\n     */ interactive: true,\n        /**\r\n     * Indicates whether group selection should be enabled\r\n     * @type Boolean\r\n     * @default\r\n     */ selection: true,\n        /**\r\n     * Indicates which key or keys enable multiple click selection\r\n     * Pass value as a string or array of strings\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * If `null` or empty or containing any other string that is not a modifier key\r\n     * feature is disabled.\r\n     * @since 1.6.2\r\n     * @type String|Array\r\n     * @default\r\n     */ selectionKey: \"shiftKey\",\n        /**\r\n     * Indicates which key enable alternative selection\r\n     * in case of target overlapping with active object\r\n     * values: 'altKey', 'shiftKey', 'ctrlKey'.\r\n     * For a series of reason that come from the general expectations on how\r\n     * things should work, this feature works only for preserveObjectStacking true.\r\n     * If `null` or 'none' or any other string that is not a modifier key\r\n     * feature is disabled.\r\n     * @since 1.6.5\r\n     * @type null|String\r\n     * @default\r\n     */ altSelectionKey: null,\n        /**\r\n     * Color of selection\r\n     * @type String\r\n     * @default\r\n     */ selectionColor: \"rgba(100, 100, 255, 0.3)\",\n        /**\r\n     * Default dash array pattern\r\n     * If not empty the selection border is dashed\r\n     * @type Array\r\n     */ selectionDashArray: [],\n        /**\r\n     * Color of the border of selection (usually slightly darker than color of selection itself)\r\n     * @type String\r\n     * @default\r\n     */ selectionBorderColor: \"rgba(255, 255, 255, 0.3)\",\n        /**\r\n     * Width of a line used in object/group selection\r\n     * @type Number\r\n     * @default\r\n     */ selectionLineWidth: 1,\n        /**\r\n     * Select only shapes that are fully contained in the dragged selection rectangle.\r\n     * @type Boolean\r\n     * @default\r\n     */ selectionFullyContained: false,\n        /**\r\n     * Default cursor value used when hovering over an object on canvas\r\n     * @type String\r\n     * @default\r\n     */ hoverCursor: \"move\",\n        /**\r\n     * Default cursor value used when moving an object on canvas\r\n     * @type String\r\n     * @default\r\n     */ moveCursor: \"move\",\n        /**\r\n     * Default cursor value used for the entire canvas\r\n     * @type String\r\n     * @default\r\n     */ defaultCursor: \"default\",\n        /**\r\n     * Cursor value used during free drawing\r\n     * @type String\r\n     * @default\r\n     */ freeDrawingCursor: \"crosshair\",\n        /**\r\n     * Cursor value used for disabled elements ( corners with disabled action )\r\n     * @type String\r\n     * @since 2.0.0\r\n     * @default\r\n     */ notAllowedCursor: \"not-allowed\",\n        /**\r\n     * Default element class that's given to wrapper (div) element of canvas\r\n     * @type String\r\n     * @default\r\n     */ containerClass: \"canvas-container\",\n        /**\r\n     * When true, object detection happens on per-pixel basis rather than on per-bounding-box\r\n     * @type Boolean\r\n     * @default\r\n     */ perPixelTargetFind: false,\n        /**\r\n     * Number of pixels around target pixel to tolerate (consider active) during object detection\r\n     * @type Number\r\n     * @default\r\n     */ targetFindTolerance: 0,\n        /**\r\n     * When true, target detection is skipped. Target detection will return always undefined.\r\n     * click selection won't work anymore, events will fire with no targets.\r\n     * if something is selected before setting it to true, it will be deselected at the first click.\r\n     * area selection will still work. check the `selection` property too.\r\n     * if you deactivate both, you should look into staticCanvas.\r\n     * @type Boolean\r\n     * @default\r\n     */ skipTargetFind: false,\n        /**\r\n     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.\r\n     * After mousedown, mousemove creates a shape,\r\n     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.\r\n     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}\r\n     * @type Boolean\r\n     * @default\r\n     */ isDrawingMode: false,\n        /**\r\n     * Indicates whether objects should remain in current stack position when selected.\r\n     * When false objects are brought to top and rendered as part of the selection group\r\n     * @type Boolean\r\n     * @default\r\n     */ preserveObjectStacking: false,\n        /**\r\n     * Indicates the angle that an object will lock to while rotating.\r\n     * @type Number\r\n     * @since 1.6.7\r\n     * @default\r\n     */ snapAngle: 0,\n        /**\r\n     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.\r\n     * When `null`, the snapThreshold will default to the snapAngle.\r\n     * @type null|Number\r\n     * @since 1.6.7\r\n     * @default\r\n     */ snapThreshold: null,\n        /**\r\n     * Indicates if the right click on canvas can output the context menu or not\r\n     * @type Boolean\r\n     * @since 1.6.5\r\n     * @default\r\n     */ stopContextMenu: false,\n        /**\r\n     * Indicates if the canvas can fire right click events\r\n     * @type Boolean\r\n     * @since 1.6.5\r\n     * @default\r\n     */ fireRightClick: false,\n        /**\r\n     * Indicates if the canvas can fire middle click events\r\n     * @type Boolean\r\n     * @since 1.7.8\r\n     * @default\r\n     */ fireMiddleClick: false,\n        /**\r\n     * Keep track of the subTargets for Mouse Events\r\n     * @type fabric.Object[]\r\n     */ targets: [],\n        /**\r\n     * When the option is enabled, PointerEvent is used instead of MouseEvent.\r\n     * @type Boolean\r\n     * @default\r\n     */ enablePointerEvents: false,\n        /**\r\n     * Keep track of the hovered target\r\n     * @type fabric.Object\r\n     * @private\r\n     */ _hoveredTarget: null,\n        /**\r\n     * hold the list of nested targets hovered\r\n     * @type fabric.Object[]\r\n     * @private\r\n     */ _hoveredTargets: [],\n        /**\r\n     * @private\r\n     */ _initInteractive: function() {\n            this._currentTransform = null;\n            this._groupSelector = null;\n            this._initWrapperElement();\n            this._createUpperCanvas();\n            this._initEventListeners();\n            this._initRetinaScaling();\n            this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);\n            this.calcOffset();\n        },\n        /**\r\n     * Divides objects in two groups, one to render immediately\r\n     * and one to render as activeGroup.\r\n     * @return {Array} objects to render immediately and pushes the other in the activeGroup.\r\n     */ _chooseObjectsToRender: function() {\n            var activeObjects = this.getActiveObjects(), object, objsToRender, activeGroupObjects;\n            if (activeObjects.length > 0 && !this.preserveObjectStacking) {\n                objsToRender = [];\n                activeGroupObjects = [];\n                for(var i = 0, length = this._objects.length; i < length; i++){\n                    object = this._objects[i];\n                    if (activeObjects.indexOf(object) === -1) {\n                        objsToRender.push(object);\n                    } else {\n                        activeGroupObjects.push(object);\n                    }\n                }\n                if (activeObjects.length > 1) {\n                    this._activeObject._objects = activeGroupObjects;\n                }\n                objsToRender.push.apply(objsToRender, activeGroupObjects);\n            } else {\n                objsToRender = this._objects;\n            }\n            return objsToRender;\n        },\n        /**\r\n     * Renders both the top canvas and the secondary container canvas.\r\n     * @return {fabric.Canvas} instance\r\n     * @chainable\r\n     */ renderAll: function() {\n            if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {\n                this.clearContext(this.contextTop);\n                this.contextTopDirty = false;\n            }\n            if (this.hasLostContext) {\n                this.renderTopLayer(this.contextTop);\n                this.hasLostContext = false;\n            }\n            var canvasToDrawOn = this.contextContainer;\n            this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());\n            return this;\n        },\n        renderTopLayer: function(ctx) {\n            ctx.save();\n            if (this.isDrawingMode && this._isCurrentlyDrawing) {\n                this.freeDrawingBrush && this.freeDrawingBrush._render();\n                this.contextTopDirty = true;\n            }\n            // we render the top context - last object\n            if (this.selection && this._groupSelector) {\n                this._drawSelection(ctx);\n                this.contextTopDirty = true;\n            }\n            ctx.restore();\n        },\n        /**\r\n     * Method to render only the top canvas.\r\n     * Also used to render the group selection box.\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ renderTop: function() {\n            var ctx = this.contextTop;\n            this.clearContext(ctx);\n            this.renderTopLayer(ctx);\n            this.fire(\"after:render\");\n            return this;\n        },\n        /**\r\n     * @private\r\n     */ _normalizePointer: function(object, pointer) {\n            var m = object.calcTransformMatrix(), invertedM = fabric.util.invertTransform(m), vptPointer = this.restorePointerVpt(pointer);\n            return fabric.util.transformPoint(vptPointer, invertedM);\n        },\n        /**\r\n     * Returns true if object is transparent at a certain location\r\n     * @param {fabric.Object} target Object to check\r\n     * @param {Number} x Left coordinate\r\n     * @param {Number} y Top coordinate\r\n     * @return {Boolean}\r\n     */ isTargetTransparent: function(target, x, y) {\n            // in case the target is the activeObject, we cannot execute this optimization\n            // because we need to draw controls too.\n            if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {\n                var normalizedPointer = this._normalizePointer(target, {\n                    x: x,\n                    y: y\n                }), targetRelativeX = Math.max(target.cacheTranslationX + normalizedPointer.x * target.zoomX, 0), targetRelativeY = Math.max(target.cacheTranslationY + normalizedPointer.y * target.zoomY, 0);\n                var isTransparent = fabric.util.isTransparent(target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);\n                return isTransparent;\n            }\n            var ctx = this.contextCache, originalColor = target.selectionBackgroundColor, v = this.viewportTransform;\n            target.selectionBackgroundColor = \"\";\n            this.clearContext(ctx);\n            ctx.save();\n            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);\n            target.render(ctx);\n            ctx.restore();\n            target.selectionBackgroundColor = originalColor;\n            var isTransparent = fabric.util.isTransparent(ctx, x, y, this.targetFindTolerance);\n            return isTransparent;\n        },\n        /**\r\n     * takes an event and determines if selection key has been pressed\r\n     * @private\r\n     * @param {Event} e Event object\r\n     */ _isSelectionKeyPressed: function(e) {\n            var selectionKeyPressed = false;\n            if (Array.isArray(this.selectionKey)) {\n                selectionKeyPressed = !!this.selectionKey.find(function(key) {\n                    return e[key] === true;\n                });\n            } else {\n                selectionKeyPressed = e[this.selectionKey];\n            }\n            return selectionKeyPressed;\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     */ _shouldClearSelection: function(e, target) {\n            var activeObjects = this.getActiveObjects(), activeObject = this._activeObject;\n            return !target || target && activeObject && activeObjects.length > 1 && activeObjects.indexOf(target) === -1 && activeObject !== target && !this._isSelectionKeyPressed(e) || target && !target.evented || target && !target.selectable && activeObject && activeObject !== target;\n        },\n        /**\r\n     * centeredScaling from object can't override centeredScaling from canvas.\r\n     * this should be fixed, since object setting should take precedence over canvas.\r\n     * also this should be something that will be migrated in the control properties.\r\n     * as ability to define the origin of the transformation that the control provide.\r\n     * @private\r\n     * @param {fabric.Object} target\r\n     * @param {String} action\r\n     * @param {Boolean} altKey\r\n     */ _shouldCenterTransform: function(target, action, altKey) {\n            if (!target) {\n                return;\n            }\n            var centerTransform;\n            if (action === \"scale\" || action === \"scaleX\" || action === \"scaleY\" || action === \"resizing\") {\n                centerTransform = this.centeredScaling || target.centeredScaling;\n            } else if (action === \"rotate\") {\n                centerTransform = this.centeredRotation || target.centeredRotation;\n            }\n            return centerTransform ? !altKey : altKey;\n        },\n        /**\r\n     * should disappear before release 4.0\r\n     * @private\r\n     */ _getOriginFromCorner: function(target, corner) {\n            var origin = {\n                x: target.originX,\n                y: target.originY\n            };\n            if (corner === \"ml\" || corner === \"tl\" || corner === \"bl\") {\n                origin.x = \"right\";\n            } else if (corner === \"mr\" || corner === \"tr\" || corner === \"br\") {\n                origin.x = \"left\";\n            }\n            if (corner === \"tl\" || corner === \"mt\" || corner === \"tr\") {\n                origin.y = \"bottom\";\n            } else if (corner === \"bl\" || corner === \"mb\" || corner === \"br\") {\n                origin.y = \"top\";\n            }\n            return origin;\n        },\n        /**\r\n     * @private\r\n     * @param {Boolean} alreadySelected true if target is already selected\r\n     * @param {String} corner a string representing the corner ml, mr, tl ...\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} [target] inserted back to help overriding. Unused\r\n     */ _getActionFromCorner: function(alreadySelected, corner, e, target) {\n            if (!corner || !alreadySelected) {\n                return \"drag\";\n            }\n            var control = target.controls[corner];\n            return control.getActionName(e, control, target);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     */ _setupCurrentTransform: function(e, target, alreadySelected) {\n            if (!target) {\n                return;\n            }\n            var pointer = this.getPointer(e), corner = target.__corner, control = target.controls[corner], actionHandler = alreadySelected && corner ? control.getActionHandler(e, target, control) : fabric.controlsUtils.dragHandler, action = this._getActionFromCorner(alreadySelected, corner, e, target), origin = this._getOriginFromCorner(target, corner), altKey = e[this.centeredKey], transform = {\n                target: target,\n                action: action,\n                actionHandler: actionHandler,\n                corner: corner,\n                scaleX: target.scaleX,\n                scaleY: target.scaleY,\n                skewX: target.skewX,\n                skewY: target.skewY,\n                // used by transation\n                offsetX: pointer.x - target.left,\n                offsetY: pointer.y - target.top,\n                originX: origin.x,\n                originY: origin.y,\n                ex: pointer.x,\n                ey: pointer.y,\n                lastX: pointer.x,\n                lastY: pointer.y,\n                // unsure they are useful anymore.\n                // left: target.left,\n                // top: target.top,\n                theta: degreesToRadians(target.angle),\n                // end of unsure\n                width: target.width * target.scaleX,\n                shiftKey: e.shiftKey,\n                altKey: altKey,\n                original: fabric.util.saveObjectTransform(target)\n            };\n            if (this._shouldCenterTransform(target, action, altKey)) {\n                transform.originX = \"center\";\n                transform.originY = \"center\";\n            }\n            transform.original.originX = origin.x;\n            transform.original.originY = origin.y;\n            this._currentTransform = transform;\n            this._beforeTransform(e);\n        },\n        /**\r\n     * Set the cursor type of the canvas element\r\n     * @param {String} value Cursor type of the canvas element.\r\n     * @see http://www.w3.org/TR/css3-ui/#cursor\r\n     */ setCursor: function(value) {\n            this.upperCanvasEl.style.cursor = value;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx to draw the selection on\r\n     */ _drawSelection: function(ctx) {\n            var selector = this._groupSelector, viewportStart = new fabric.Point(selector.ex, selector.ey), start = fabric.util.transformPoint(viewportStart, this.viewportTransform), viewportExtent = new fabric.Point(selector.ex + selector.left, selector.ey + selector.top), extent = fabric.util.transformPoint(viewportExtent, this.viewportTransform), minX = Math.min(start.x, extent.x), minY = Math.min(start.y, extent.y), maxX = Math.max(start.x, extent.x), maxY = Math.max(start.y, extent.y), strokeOffset = this.selectionLineWidth / 2;\n            if (this.selectionColor) {\n                ctx.fillStyle = this.selectionColor;\n                ctx.fillRect(minX, minY, maxX - minX, maxY - minY);\n            }\n            if (!this.selectionLineWidth || !this.selectionBorderColor) {\n                return;\n            }\n            ctx.lineWidth = this.selectionLineWidth;\n            ctx.strokeStyle = this.selectionBorderColor;\n            minX += strokeOffset;\n            minY += strokeOffset;\n            maxX -= strokeOffset;\n            maxY -= strokeOffset;\n            // selection border\n            fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);\n            ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);\n        },\n        /**\r\n     * Method that determines what object we are clicking on\r\n     * the skipGroup parameter is for internal use, is needed for shift+click action\r\n     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target\r\n     * or the outside part of the corner.\r\n     * @param {Event} e mouse event\r\n     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through\r\n     * @return {fabric.Object} the target found\r\n     */ findTarget: function(e, skipGroup) {\n            if (this.skipTargetFind) {\n                return;\n            }\n            var ignoreZoom = true, pointer = this.getPointer(e, ignoreZoom), activeObject = this._activeObject, aObjects = this.getActiveObjects(), activeTarget, activeTargetSubs, isTouch = isTouchEvent(e), shouldLookForActive = aObjects.length > 1 && !skipGroup || aObjects.length === 1;\n            // first check current group (if one exists)\n            // active group does not check sub targets like normal groups.\n            // if active group just exits.\n            this.targets = [];\n            // if we hit the corner of an activeObject, let's return that.\n            if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {\n                return activeObject;\n            }\n            if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([\n                activeObject\n            ], pointer)) {\n                return activeObject;\n            }\n            if (aObjects.length === 1 && activeObject === this._searchPossibleTargets([\n                activeObject\n            ], pointer)) {\n                if (!this.preserveObjectStacking) {\n                    return activeObject;\n                } else {\n                    activeTarget = activeObject;\n                    activeTargetSubs = this.targets;\n                    this.targets = [];\n                }\n            }\n            var target = this._searchPossibleTargets(this._objects, pointer);\n            if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {\n                target = activeTarget;\n                this.targets = activeTargetSubs;\n            }\n            return target;\n        },\n        /**\r\n     * Checks point is inside the object.\r\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n     * @param {fabric.Object} obj Object to test against\r\n     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.\r\n     * @return {Boolean} true if point is contained within an area of given object\r\n     * @private\r\n     */ _checkTarget: function(pointer, obj, globalPointer) {\n            if (obj && obj.visible && obj.evented && // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html\n            // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html\n            obj.containsPoint(pointer)) {\n                if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {\n                    var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);\n                    if (!isTransparent) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        },\n        /**\r\n     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted\r\n     * @param {Array} [objects] objects array to look into\r\n     * @param {Object} [pointer] x,y object of point coordinates we want to check.\r\n     * @return {fabric.Object} object that contains pointer\r\n     * @private\r\n     */ _searchPossibleTargets: function(objects, pointer) {\n            // Cache all targets where their bounding box contains point.\n            var target, i = objects.length, subTarget;\n            // Do not check for currently grouped objects, since we check the parent group itself.\n            // until we call this function specifically to search inside the activeGroup\n            while(i--){\n                var objToCheck = objects[i];\n                var pointerToUse = objToCheck.group ? this._normalizePointer(objToCheck.group, pointer) : pointer;\n                if (this._checkTarget(pointerToUse, objToCheck, pointer)) {\n                    target = objects[i];\n                    if (target.subTargetCheck && target instanceof fabric.Group) {\n                        subTarget = this._searchPossibleTargets(target._objects, pointer);\n                        subTarget && this.targets.push(subTarget);\n                    }\n                    break;\n                }\n            }\n            return target;\n        },\n        /**\r\n     * Returns pointer coordinates without the effect of the viewport\r\n     * @param {Object} pointer with \"x\" and \"y\" number values\r\n     * @return {Object} object with \"x\" and \"y\" number values\r\n     */ restorePointerVpt: function(pointer) {\n            return fabric.util.transformPoint(pointer, fabric.util.invertTransform(this.viewportTransform));\n        },\n        /**\r\n     * Returns pointer coordinates relative to canvas.\r\n     * Can return coordinates with or without viewportTransform.\r\n     * ignoreZoom false gives back coordinates that represent\r\n     * the point clicked on canvas element.\r\n     * ignoreZoom true gives back coordinates after being processed\r\n     * by the viewportTransform ( sort of coordinates of what is displayed\r\n     * on the canvas where you are clicking.\r\n     * ignoreZoom true = HTMLElement coordinates relative to top,left\r\n     * ignoreZoom false, default = fabric space coordinates, the same used for shape position\r\n     * To interact with your shapes top and left you want to use ignoreZoom true\r\n     * most of the time, while ignoreZoom false will give you coordinates\r\n     * compatible with the object.oCoords system.\r\n     * of the time.\r\n     * @param {Event} e\r\n     * @param {Boolean} ignoreZoom\r\n     * @return {Object} object with \"x\" and \"y\" number values\r\n     */ getPointer: function(e, ignoreZoom) {\n            // return cached values if we are in the event processing chain\n            if (this._absolutePointer && !ignoreZoom) {\n                return this._absolutePointer;\n            }\n            if (this._pointer && ignoreZoom) {\n                return this._pointer;\n            }\n            var pointer = getPointer(e), upperCanvasEl = this.upperCanvasEl, bounds = upperCanvasEl.getBoundingClientRect(), boundsWidth = bounds.width || 0, boundsHeight = bounds.height || 0, cssScale;\n            if (!boundsWidth || !boundsHeight) {\n                if (\"top\" in bounds && \"bottom\" in bounds) {\n                    boundsHeight = Math.abs(bounds.top - bounds.bottom);\n                }\n                if (\"right\" in bounds && \"left\" in bounds) {\n                    boundsWidth = Math.abs(bounds.right - bounds.left);\n                }\n            }\n            this.calcOffset();\n            pointer.x = pointer.x - this._offset.left;\n            pointer.y = pointer.y - this._offset.top;\n            if (!ignoreZoom) {\n                pointer = this.restorePointerVpt(pointer);\n            }\n            var retinaScaling = this.getRetinaScaling();\n            if (retinaScaling !== 1) {\n                pointer.x /= retinaScaling;\n                pointer.y /= retinaScaling;\n            }\n            if (boundsWidth === 0 || boundsHeight === 0) {\n                // If bounds are not available (i.e. not visible), do not apply scale.\n                cssScale = {\n                    width: 1,\n                    height: 1\n                };\n            } else {\n                cssScale = {\n                    width: upperCanvasEl.width / boundsWidth,\n                    height: upperCanvasEl.height / boundsHeight\n                };\n            }\n            return {\n                x: pointer.x * cssScale.width,\n                y: pointer.y * cssScale.height\n            };\n        },\n        /**\r\n     * @private\r\n     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized\r\n     */ _createUpperCanvas: function() {\n            var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/, \"\"), lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;\n            // there is no need to create a new upperCanvas element if we have already one.\n            if (upperCanvasEl) {\n                upperCanvasEl.className = \"\";\n            } else {\n                upperCanvasEl = this._createCanvasElement();\n                this.upperCanvasEl = upperCanvasEl;\n            }\n            fabric.util.addClass(upperCanvasEl, \"upper-canvas \" + lowerCanvasClass);\n            this.wrapperEl.appendChild(upperCanvasEl);\n            this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);\n            this._applyCanvasStyle(upperCanvasEl);\n            this.contextTop = upperCanvasEl.getContext(\"2d\");\n        },\n        /**\r\n     * Returns context of top canvas where interactions are drawn\r\n     * @returns {CanvasRenderingContext2D}\r\n     */ getTopContext: function() {\n            return this.contextTop;\n        },\n        /**\r\n     * @private\r\n     */ _createCacheCanvas: function() {\n            this.cacheCanvasEl = this._createCanvasElement();\n            this.cacheCanvasEl.setAttribute(\"width\", this.width);\n            this.cacheCanvasEl.setAttribute(\"height\", this.height);\n            this.contextCache = this.cacheCanvasEl.getContext(\"2d\");\n        },\n        /**\r\n     * @private\r\n     */ _initWrapperElement: function() {\n            this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, \"div\", {\n                \"class\": this.containerClass\n            });\n            fabric.util.setStyle(this.wrapperEl, {\n                width: this.width + \"px\",\n                height: this.height + \"px\",\n                position: \"relative\"\n            });\n            fabric.util.makeElementUnselectable(this.wrapperEl);\n        },\n        /**\r\n     * @private\r\n     * @param {HTMLElement} element canvas element to apply styles on\r\n     */ _applyCanvasStyle: function(element) {\n            var width = this.width || element.width, height = this.height || element.height;\n            fabric.util.setStyle(element, {\n                position: \"absolute\",\n                width: width + \"px\",\n                height: height + \"px\",\n                left: 0,\n                top: 0,\n                \"touch-action\": this.allowTouchScrolling ? \"manipulation\" : \"none\",\n                \"-ms-touch-action\": this.allowTouchScrolling ? \"manipulation\" : \"none\"\n            });\n            element.width = width;\n            element.height = height;\n            fabric.util.makeElementUnselectable(element);\n        },\n        /**\r\n     * Copy the entire inline style from one element (fromEl) to another (toEl)\r\n     * @private\r\n     * @param {Element} fromEl Element style is copied from\r\n     * @param {Element} toEl Element copied style is applied to\r\n     */ _copyCanvasStyle: function(fromEl, toEl) {\n            toEl.style.cssText = fromEl.style.cssText;\n        },\n        /**\r\n     * Returns context of canvas where object selection is drawn\r\n     * @return {CanvasRenderingContext2D}\r\n     */ getSelectionContext: function() {\n            return this.contextTop;\n        },\n        /**\r\n     * Returns &lt;canvas> element on which object selection is drawn\r\n     * @return {HTMLCanvasElement}\r\n     */ getSelectionElement: function() {\n            return this.upperCanvasEl;\n        },\n        /**\r\n     * Returns currently active object\r\n     * @return {fabric.Object} active object\r\n     */ getActiveObject: function() {\n            return this._activeObject;\n        },\n        /**\r\n     * Returns an array with the current selected objects\r\n     * @return {fabric.Object} active object\r\n     */ getActiveObjects: function() {\n            var active = this._activeObject;\n            if (active) {\n                if (active.type === \"activeSelection\" && active._objects) {\n                    return active._objects.slice(0);\n                } else {\n                    return [\n                        active\n                    ];\n                }\n            }\n            return [];\n        },\n        /**\r\n     * @private\r\n     * @param {fabric.Object} obj Object that was removed\r\n     */ _onObjectRemoved: function(obj) {\n            // removing active object should fire \"selection:cleared\" events\n            if (obj === this._activeObject) {\n                this.fire(\"before:selection:cleared\", {\n                    target: obj\n                });\n                this._discardActiveObject();\n                this.fire(\"selection:cleared\", {\n                    target: obj\n                });\n                obj.fire(\"deselected\");\n            }\n            if (obj === this._hoveredTarget) {\n                this._hoveredTarget = null;\n                this._hoveredTargets = [];\n            }\n            this.callSuper(\"_onObjectRemoved\", obj);\n        },\n        /**\r\n     * @private\r\n     * Compares the old activeObject with the current one and fires correct events\r\n     * @param {fabric.Object} obj old activeObject\r\n     */ _fireSelectionEvents: function(oldObjects, e) {\n            var somethingChanged = false, objects = this.getActiveObjects(), added = [], removed = [];\n            oldObjects.forEach(function(oldObject) {\n                if (objects.indexOf(oldObject) === -1) {\n                    somethingChanged = true;\n                    oldObject.fire(\"deselected\", {\n                        e: e,\n                        target: oldObject\n                    });\n                    removed.push(oldObject);\n                }\n            });\n            objects.forEach(function(object) {\n                if (oldObjects.indexOf(object) === -1) {\n                    somethingChanged = true;\n                    object.fire(\"selected\", {\n                        e: e,\n                        target: object\n                    });\n                    added.push(object);\n                }\n            });\n            if (oldObjects.length > 0 && objects.length > 0) {\n                somethingChanged && this.fire(\"selection:updated\", {\n                    e: e,\n                    selected: added,\n                    deselected: removed\n                });\n            } else if (objects.length > 0) {\n                this.fire(\"selection:created\", {\n                    e: e,\n                    selected: added\n                });\n            } else if (oldObjects.length > 0) {\n                this.fire(\"selection:cleared\", {\n                    e: e,\n                    deselected: removed\n                });\n            }\n        },\n        /**\r\n     * Sets given object as the only active object on canvas\r\n     * @param {fabric.Object} object Object to set as an active one\r\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ setActiveObject: function(object, e) {\n            var currentActives = this.getActiveObjects();\n            this._setActiveObject(object, e);\n            this._fireSelectionEvents(currentActives, e);\n            return this;\n        },\n        /**\r\n     * This is a private method for now.\r\n     * This is supposed to be equivalent to setActiveObject but without firing\r\n     * any event. There is commitment to have this stay this way.\r\n     * This is the functional part of setActiveObject.\r\n     * @private\r\n     * @param {Object} object to set as active\r\n     * @param {Event} [e] Event (passed along when firing \"object:selected\")\r\n     * @return {Boolean} true if the selection happened\r\n     */ _setActiveObject: function(object, e) {\n            if (this._activeObject === object) {\n                return false;\n            }\n            if (!this._discardActiveObject(e, object)) {\n                return false;\n            }\n            if (object.onSelect({\n                e: e\n            })) {\n                return false;\n            }\n            this._activeObject = object;\n            return true;\n        },\n        /**\r\n     * This is a private method for now.\r\n     * This is supposed to be equivalent to discardActiveObject but without firing\r\n     * any events. There is commitment to have this stay this way.\r\n     * This is the functional part of discardActiveObject.\r\n     * @param {Event} [e] Event (passed along when firing \"object:deselected\")\r\n     * @param {Object} object to set as active\r\n     * @return {Boolean} true if the selection happened\r\n     * @private\r\n     */ _discardActiveObject: function(e, object) {\n            var obj = this._activeObject;\n            if (obj) {\n                // onDeselect return TRUE to cancel selection;\n                if (obj.onDeselect({\n                    e: e,\n                    object: object\n                })) {\n                    return false;\n                }\n                this._activeObject = null;\n            }\n            return true;\n        },\n        /**\r\n     * Discards currently active object and fire events. If the function is called by fabric\r\n     * as a consequence of a mouse event, the event is passed as a parameter and\r\n     * sent to the fire function for the custom events. When used as a method the\r\n     * e param does not have any application.\r\n     * @param {event} e\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ discardActiveObject: function(e) {\n            var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();\n            if (currentActives.length) {\n                this.fire(\"before:selection:cleared\", {\n                    target: activeObject,\n                    e: e\n                });\n            }\n            this._discardActiveObject(e);\n            this._fireSelectionEvents(currentActives, e);\n            return this;\n        },\n        /**\r\n     * Clears a canvas element and removes all event listeners\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ dispose: function() {\n            var wrapper = this.wrapperEl;\n            this.removeListeners();\n            wrapper.removeChild(this.upperCanvasEl);\n            wrapper.removeChild(this.lowerCanvasEl);\n            this.contextCache = null;\n            this.contextTop = null;\n            [\n                \"upperCanvasEl\",\n                \"cacheCanvasEl\"\n            ].forEach((function(element) {\n                fabric.util.cleanUpJsdomNode(this[element]);\n                this[element] = undefined;\n            }).bind(this));\n            if (wrapper.parentNode) {\n                wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);\n            }\n            delete this.wrapperEl;\n            fabric.StaticCanvas.prototype.dispose.call(this);\n            return this;\n        },\n        /**\r\n     * Clears all contexts (background, main, top) of an instance\r\n     * @return {fabric.Canvas} thisArg\r\n     * @chainable\r\n     */ clear: function() {\n            // this.discardActiveGroup();\n            this.discardActiveObject();\n            this.clearContext(this.contextTop);\n            return this.callSuper(\"clear\");\n        },\n        /**\r\n     * Draws objects' controls (borders/controls)\r\n     * @param {CanvasRenderingContext2D} ctx Context to render controls on\r\n     */ drawControls: function(ctx) {\n            var activeObject = this._activeObject;\n            if (activeObject) {\n                activeObject._renderControls(ctx);\n            }\n        },\n        /**\r\n     * @private\r\n     */ _toObject: function(instance, methodName, propertiesToInclude) {\n            //If the object is part of the current selection group, it should\n            //be transformed appropriately\n            //i.e. it should be serialised as it would appear if the selection group\n            //were to be destroyed.\n            var originalProperties = this._realizeGroupTransformOnObject(instance), object = this.callSuper(\"_toObject\", instance, methodName, propertiesToInclude);\n            //Undo the damage we did by changing all of its properties\n            this._unwindGroupTransformOnObject(instance, originalProperties);\n            return object;\n        },\n        /**\r\n     * Realises an object's group transformation on it\r\n     * @private\r\n     * @param {fabric.Object} [instance] the object to transform (gets mutated)\r\n     * @returns the original values of instance which were changed\r\n     */ _realizeGroupTransformOnObject: function(instance) {\n            if (instance.group && instance.group.type === \"activeSelection\" && this._activeObject === instance.group) {\n                var layoutProps = [\n                    \"angle\",\n                    \"flipX\",\n                    \"flipY\",\n                    \"left\",\n                    \"scaleX\",\n                    \"scaleY\",\n                    \"skewX\",\n                    \"skewY\",\n                    \"top\"\n                ];\n                //Copy all the positionally relevant properties across now\n                var originalValues = {};\n                layoutProps.forEach(function(prop) {\n                    originalValues[prop] = instance[prop];\n                });\n                fabric.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());\n                return originalValues;\n            } else {\n                return null;\n            }\n        },\n        /**\r\n     * Restores the changed properties of instance\r\n     * @private\r\n     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)\r\n     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject\r\n     */ _unwindGroupTransformOnObject: function(instance, originalValues) {\n            if (originalValues) {\n                instance.set(originalValues);\n            }\n        },\n        /**\r\n     * @private\r\n     */ _setSVGObject: function(markup, instance, reviver) {\n            //If the object is in a selection group, simulate what would happen to that\n            //object when the group is deselected\n            var originalProperties = this._realizeGroupTransformOnObject(instance);\n            this.callSuper(\"_setSVGObject\", markup, instance, reviver);\n            this._unwindGroupTransformOnObject(instance, originalProperties);\n        },\n        setViewportTransform: function(vpt) {\n            if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {\n                this._activeObject.clearContextTop();\n            }\n            fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);\n        }\n    });\n    // copying static properties manually to work around Opera's bug,\n    // where \"prototype\" property is enumerable and overrides existing prototype\n    for(var prop in fabric.StaticCanvas){\n        if (prop !== \"prototype\") {\n            fabric.Canvas[prop] = fabric.StaticCanvas[prop];\n        }\n    }\n})();\n(function() {\n    var addListener = fabric.util.addListener, removeListener = fabric.util.removeListener, RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1, addEventOptions = {\n        passive: false\n    };\n    function checkClick(e, value) {\n        return e.button && e.button === value - 1;\n    }\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n        /**\r\n     * Contains the id of the touch event that owns the fabric transform\r\n     * @type Number\r\n     * @private\r\n     */ mainTouchId: null,\n        /**\r\n     * Adds mouse listeners to canvas\r\n     * @private\r\n     */ _initEventListeners: function() {\n            // in case we initialized the class twice. This should not happen normally\n            // but in some kind of applications where the canvas element may be changed\n            // this is a workaround to having double listeners.\n            this.removeListeners();\n            this._bindEvents();\n            this.addOrRemove(addListener, \"add\");\n        },\n        /**\r\n     * return an event prefix pointer or mouse.\r\n     * @private\r\n     */ _getEventPrefix: function() {\n            return this.enablePointerEvents ? \"pointer\" : \"mouse\";\n        },\n        addOrRemove: function(functor, eventjsFunctor) {\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            functor(fabric.window, \"resize\", this._onResize);\n            functor(canvasElement, eventTypePrefix + \"down\", this._onMouseDown);\n            functor(canvasElement, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            functor(canvasElement, eventTypePrefix + \"out\", this._onMouseOut);\n            functor(canvasElement, eventTypePrefix + \"enter\", this._onMouseEnter);\n            functor(canvasElement, \"wheel\", this._onMouseWheel);\n            functor(canvasElement, \"contextmenu\", this._onContextMenu);\n            functor(canvasElement, \"dblclick\", this._onDoubleClick);\n            functor(canvasElement, \"dragover\", this._onDragOver);\n            functor(canvasElement, \"dragenter\", this._onDragEnter);\n            functor(canvasElement, \"dragleave\", this._onDragLeave);\n            functor(canvasElement, \"drop\", this._onDrop);\n            if (!this.enablePointerEvents) {\n                functor(canvasElement, \"touchstart\", this._onTouchStart, addEventOptions);\n            }\n            if (typeof eventjs !== \"undefined\" && eventjsFunctor in eventjs) {\n                eventjs[eventjsFunctor](canvasElement, \"gesture\", this._onGesture);\n                eventjs[eventjsFunctor](canvasElement, \"drag\", this._onDrag);\n                eventjs[eventjsFunctor](canvasElement, \"orientation\", this._onOrientationChange);\n                eventjs[eventjsFunctor](canvasElement, \"shake\", this._onShake);\n                eventjs[eventjsFunctor](canvasElement, \"longpress\", this._onLongPress);\n            }\n        },\n        /**\r\n     * Removes all event listeners\r\n     */ removeListeners: function() {\n            this.addOrRemove(removeListener, \"remove\");\n            // if you dispose on a mouseDown, before mouse up, you need to clean document to...\n            var eventTypePrefix = this._getEventPrefix();\n            removeListener(fabric.document, eventTypePrefix + \"up\", this._onMouseUp);\n            removeListener(fabric.document, \"touchend\", this._onTouchEnd, addEventOptions);\n            removeListener(fabric.document, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            removeListener(fabric.document, \"touchmove\", this._onMouseMove, addEventOptions);\n        },\n        /**\r\n     * @private\r\n     */ _bindEvents: function() {\n            if (this.eventsBound) {\n                // for any reason we pass here twice we do not want to bind events twice.\n                return;\n            }\n            this._onMouseDown = this._onMouseDown.bind(this);\n            this._onTouchStart = this._onTouchStart.bind(this);\n            this._onMouseMove = this._onMouseMove.bind(this);\n            this._onMouseUp = this._onMouseUp.bind(this);\n            this._onTouchEnd = this._onTouchEnd.bind(this);\n            this._onResize = this._onResize.bind(this);\n            this._onGesture = this._onGesture.bind(this);\n            this._onDrag = this._onDrag.bind(this);\n            this._onShake = this._onShake.bind(this);\n            this._onLongPress = this._onLongPress.bind(this);\n            this._onOrientationChange = this._onOrientationChange.bind(this);\n            this._onMouseWheel = this._onMouseWheel.bind(this);\n            this._onMouseOut = this._onMouseOut.bind(this);\n            this._onMouseEnter = this._onMouseEnter.bind(this);\n            this._onContextMenu = this._onContextMenu.bind(this);\n            this._onDoubleClick = this._onDoubleClick.bind(this);\n            this._onDragOver = this._onDragOver.bind(this);\n            this._onDragEnter = this._simpleEventHandler.bind(this, \"dragenter\");\n            this._onDragLeave = this._simpleEventHandler.bind(this, \"dragleave\");\n            this._onDrop = this._onDrop.bind(this);\n            this.eventsBound = true;\n        },\n        /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js gesture\r\n     * @param {Event} [self] Inner Event object\r\n     */ _onGesture: function(e, self) {\n            this.__onTransformGesture && this.__onTransformGesture(e, self);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js drag\r\n     * @param {Event} [self] Inner Event object\r\n     */ _onDrag: function(e, self) {\n            this.__onDrag && this.__onDrag(e, self);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on wheel event\r\n     */ _onMouseWheel: function(e) {\n            this.__onMouseWheel(e);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onMouseOut: function(e) {\n            var target = this._hoveredTarget;\n            this.fire(\"mouse:out\", {\n                target: target,\n                e: e\n            });\n            this._hoveredTarget = null;\n            target && target.fire(\"mouseout\", {\n                e: e\n            });\n            var _this = this;\n            this._hoveredTargets.forEach(function(_target) {\n                _this.fire(\"mouse:out\", {\n                    target: target,\n                    e: e\n                });\n                _target && target.fire(\"mouseout\", {\n                    e: e\n                });\n            });\n            this._hoveredTargets = [];\n            if (this._iTextInstances) {\n                this._iTextInstances.forEach(function(obj) {\n                    if (obj.isEditing) {\n                        obj.hiddenTextarea.focus();\n                    }\n                });\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseenter\r\n     */ _onMouseEnter: function(e) {\n            // This find target and consequent 'mouse:over' is used to\n            // clear old instances on hovered target.\n            // calling findTarget has the side effect of killing target.__corner.\n            // as a short term fix we are not firing this if we are currently transforming.\n            // as a long term fix we need to separate the action of finding a target with the\n            // side effects we added to it.\n            if (!this._currentTransform && !this.findTarget(e)) {\n                this.fire(\"mouse:over\", {\n                    target: null,\n                    e: e\n                });\n                this._hoveredTarget = null;\n                this._hoveredTargets = [];\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js orientation change\r\n     * @param {Event} [self] Inner Event object\r\n     */ _onOrientationChange: function(e, self) {\n            this.__onOrientationChange && this.__onOrientationChange(e, self);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js shake\r\n     * @param {Event} [self] Inner Event object\r\n     */ _onShake: function(e, self) {\n            this.__onShake && this.__onShake(e, self);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js shake\r\n     * @param {Event} [self] Inner Event object\r\n     */ _onLongPress: function(e, self) {\n            this.__onLongPress && this.__onLongPress(e, self);\n        },\n        /**\r\n     * prevent default to allow drop event to be fired\r\n     * @private\r\n     * @param {Event} [e] Event object fired on Event.js shake\r\n     */ _onDragOver: function(e) {\n            e.preventDefault();\n            var target = this._simpleEventHandler(\"dragover\", e);\n            this._fireEnterLeaveEvents(target, e);\n        },\n        /**\r\n     * `drop:before` is a an event that allow you to schedule logic\r\n     * before the `drop` event. Prefer `drop` event always, but if you need\r\n     * to run some drop-disabling logic on an event, since there is no way\r\n     * to handle event handlers ordering, use `drop:before`\r\n     * @param {Event} e\r\n     */ _onDrop: function(e) {\n            this._simpleEventHandler(\"drop:before\", e);\n            return this._simpleEventHandler(\"drop\", e);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onContextMenu: function(e) {\n            if (this.stopContextMenu) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n            return false;\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onDoubleClick: function(e) {\n            this._cacheTransformEventData(e);\n            this._handleEvent(e, \"dblclick\");\n            this._resetTransformEventData(e);\n        },\n        /**\r\n     * Return a the id of an event.\r\n     * returns either the pointerId or the identifier or 0 for the mouse event\r\n     * @private\r\n     * @param {Event} evt Event object\r\n     */ getPointerId: function(evt) {\n            var changedTouches = evt.changedTouches;\n            if (changedTouches) {\n                return changedTouches[0] && changedTouches[0].identifier;\n            }\n            if (this.enablePointerEvents) {\n                return evt.pointerId;\n            }\n            return -1;\n        },\n        /**\r\n     * Determines if an event has the id of the event that is considered main\r\n     * @private\r\n     * @param {evt} event Event object\r\n     */ _isMainEvent: function(evt) {\n            if (evt.isPrimary === true) {\n                return true;\n            }\n            if (evt.isPrimary === false) {\n                return false;\n            }\n            if (evt.type === \"touchend\" && evt.touches.length === 0) {\n                return true;\n            }\n            if (evt.changedTouches) {\n                return evt.changedTouches[0].identifier === this.mainTouchId;\n            }\n            return true;\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onTouchStart: function(e) {\n            e.preventDefault();\n            if (this.mainTouchId === null) {\n                this.mainTouchId = this.getPointerId(e);\n            }\n            this.__onMouseDown(e);\n            this._resetTransformEventData();\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            addListener(fabric.document, \"touchend\", this._onTouchEnd, addEventOptions);\n            addListener(fabric.document, \"touchmove\", this._onMouseMove, addEventOptions);\n            // Unbind mousedown to prevent double triggers from touch devices\n            removeListener(canvasElement, eventTypePrefix + \"down\", this._onMouseDown);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onMouseDown: function(e) {\n            this.__onMouseDown(e);\n            this._resetTransformEventData();\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            removeListener(canvasElement, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            addListener(fabric.document, eventTypePrefix + \"up\", this._onMouseUp);\n            addListener(fabric.document, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onTouchEnd: function(e) {\n            if (e.touches.length > 0) {\n                // if there are still touches stop here\n                return;\n            }\n            this.__onMouseUp(e);\n            this._resetTransformEventData();\n            this.mainTouchId = null;\n            var eventTypePrefix = this._getEventPrefix();\n            removeListener(fabric.document, \"touchend\", this._onTouchEnd, addEventOptions);\n            removeListener(fabric.document, \"touchmove\", this._onMouseMove, addEventOptions);\n            var _this = this;\n            if (this._willAddMouseDown) {\n                clearTimeout(this._willAddMouseDown);\n            }\n            this._willAddMouseDown = setTimeout(function() {\n                // Wait 400ms before rebinding mousedown to prevent double triggers\n                // from touch devices\n                addListener(_this.upperCanvasEl, eventTypePrefix + \"down\", _this._onMouseDown);\n                _this._willAddMouseDown = 0;\n            }, 400);\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseup\r\n     */ _onMouseUp: function(e) {\n            this.__onMouseUp(e);\n            this._resetTransformEventData();\n            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();\n            if (this._isMainEvent(e)) {\n                removeListener(fabric.document, eventTypePrefix + \"up\", this._onMouseUp);\n                removeListener(fabric.document, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n                addListener(canvasElement, eventTypePrefix + \"move\", this._onMouseMove, addEventOptions);\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousemove\r\n     */ _onMouseMove: function(e) {\n            !this.allowTouchScrolling && e.preventDefault && e.preventDefault();\n            this.__onMouseMove(e);\n        },\n        /**\r\n     * @private\r\n     */ _onResize: function() {\n            this.calcOffset();\n        },\n        /**\r\n     * Decides whether the canvas should be redrawn in mouseup and mousedown events.\r\n     * @private\r\n     * @param {Object} target\r\n     */ _shouldRender: function(target) {\n            var activeObject = this._activeObject;\n            if (!!activeObject !== !!target || activeObject && target && activeObject !== target) {\n                // this covers: switch of target, from target to no target, selection of target\n                // multiSelection with key and mouse\n                return true;\n            } else if (activeObject && activeObject.isEditing) {\n                // if we mouse up/down over a editing textbox a cursor change,\n                // there is no need to re render\n                return false;\n            }\n            return false;\n        },\n        /**\r\n     * Method that defines the actions when mouse is released on canvas.\r\n     * The method resets the currentTransform parameters, store the image corner\r\n     * position in the image object and render the canvas on top.\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseup\r\n     */ __onMouseUp: function(e) {\n            var target, transform = this._currentTransform, groupSelector = this._groupSelector, shouldRender = false, isClick = !groupSelector || groupSelector.left === 0 && groupSelector.top === 0;\n            this._cacheTransformEventData(e);\n            target = this._target;\n            this._handleEvent(e, \"up:before\");\n            // if right/middle click just fire events and return\n            // target undefined will make the _handleEvent search the target\n            if (checkClick(e, RIGHT_CLICK)) {\n                if (this.fireRightClick) {\n                    this._handleEvent(e, \"up\", RIGHT_CLICK, isClick);\n                }\n                return;\n            }\n            if (checkClick(e, MIDDLE_CLICK)) {\n                if (this.fireMiddleClick) {\n                    this._handleEvent(e, \"up\", MIDDLE_CLICK, isClick);\n                }\n                this._resetTransformEventData();\n                return;\n            }\n            if (this.isDrawingMode && this._isCurrentlyDrawing) {\n                this._onMouseUpInDrawingMode(e);\n                return;\n            }\n            if (!this._isMainEvent(e)) {\n                return;\n            }\n            if (transform) {\n                this._finalizeCurrentTransform(e);\n                shouldRender = transform.actionPerformed;\n            }\n            if (!isClick) {\n                var targetWasActive = target === this._activeObject;\n                this._maybeGroupObjects(e);\n                if (!shouldRender) {\n                    shouldRender = this._shouldRender(target) || !targetWasActive && target === this._activeObject;\n                }\n            }\n            var corner, pointer;\n            if (target) {\n                corner = target._findTargetCorner(this.getPointer(e, true), fabric.util.isTouchEvent(e));\n                if (target.selectable && target !== this._activeObject && target.activeOn === \"up\") {\n                    this.setActiveObject(target, e);\n                    shouldRender = true;\n                } else {\n                    var control = target.controls[corner], mouseUpHandler = control && control.getMouseUpHandler(e, target, control);\n                    if (mouseUpHandler) {\n                        pointer = this.getPointer(e);\n                        mouseUpHandler(e, transform, pointer.x, pointer.y);\n                    }\n                }\n                target.isMoving = false;\n            }\n            // if we are ending up a transform on a different control or a new object\n            // fire the original mouse up from the corner that started the transform\n            if (transform && (transform.target !== target || transform.corner !== corner)) {\n                var originalControl = transform.target && transform.target.controls[transform.corner], originalMouseUpHandler = originalControl && originalControl.getMouseUpHandler(e, target, control);\n                pointer = pointer || this.getPointer(e);\n                originalMouseUpHandler && originalMouseUpHandler(e, transform, pointer.x, pointer.y);\n            }\n            this._setCursorFromEvent(e, target);\n            this._handleEvent(e, \"up\", LEFT_CLICK, isClick);\n            this._groupSelector = null;\n            this._currentTransform = null;\n            // reset the target information about which corner is selected\n            target && (target.__corner = 0);\n            if (shouldRender) {\n                this.requestRenderAll();\n            } else if (!isClick) {\n                this.renderTop();\n            }\n        },\n        /**\r\n     * @private\r\n     * Handle event firing for target and subtargets\r\n     * @param {Event} e event from mouse\r\n     * @param {String} eventType event to fire (up, down or move)\r\n     * @return {Fabric.Object} target return the the target found, for internal reasons.\r\n     */ _simpleEventHandler: function(eventType, e) {\n            var target = this.findTarget(e), targets = this.targets, options = {\n                e: e,\n                target: target,\n                subTargets: targets\n            };\n            this.fire(eventType, options);\n            target && target.fire(eventType, options);\n            if (!targets) {\n                return target;\n            }\n            for(var i = 0; i < targets.length; i++){\n                targets[i].fire(eventType, options);\n            }\n            return target;\n        },\n        /**\r\n     * @private\r\n     * Handle event firing for target and subtargets\r\n     * @param {Event} e event from mouse\r\n     * @param {String} eventType event to fire (up, down or move)\r\n     * @param {fabric.Object} targetObj receiving event\r\n     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right\r\n     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.\r\n     */ _handleEvent: function(e, eventType, button, isClick) {\n            var target = this._target, targets = this.targets || [], options = {\n                e: e,\n                target: target,\n                subTargets: targets,\n                button: button || LEFT_CLICK,\n                isClick: isClick || false,\n                pointer: this._pointer,\n                absolutePointer: this._absolutePointer,\n                transform: this._currentTransform\n            };\n            if (eventType === \"up\") {\n                options.currentTarget = this.findTarget(e);\n                options.currentSubTargets = this.targets;\n            }\n            this.fire(\"mouse:\" + eventType, options);\n            target && target.fire(\"mouse\" + eventType, options);\n            for(var i = 0; i < targets.length; i++){\n                targets[i].fire(\"mouse\" + eventType, options);\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event\r\n     */ _finalizeCurrentTransform: function(e) {\n            var transform = this._currentTransform, target = transform.target, options = {\n                e: e,\n                target: target,\n                transform: transform,\n                action: transform.action\n            };\n            if (target._scaling) {\n                target._scaling = false;\n            }\n            target.setCoords();\n            if (transform.actionPerformed || this.stateful && target.hasStateChanged()) {\n                this._fire(\"modified\", options);\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ _onMouseDownInDrawingMode: function(e) {\n            this._isCurrentlyDrawing = true;\n            if (this.getActiveObject()) {\n                this.discardActiveObject(e).requestRenderAll();\n            }\n            var pointer = this.getPointer(e);\n            this.freeDrawingBrush.onMouseDown(pointer, {\n                e: e,\n                pointer: pointer\n            });\n            this._handleEvent(e, \"down\");\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mousemove\r\n     */ _onMouseMoveInDrawingMode: function(e) {\n            if (this._isCurrentlyDrawing) {\n                var pointer = this.getPointer(e);\n                this.freeDrawingBrush.onMouseMove(pointer, {\n                    e: e,\n                    pointer: pointer\n                });\n            }\n            this.setCursor(this.freeDrawingCursor);\n            this._handleEvent(e, \"move\");\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object fired on mouseup\r\n     */ _onMouseUpInDrawingMode: function(e) {\n            var pointer = this.getPointer(e);\n            this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({\n                e: e,\n                pointer: pointer\n            });\n            this._handleEvent(e, \"up\");\n        },\n        /**\r\n     * Method that defines the actions when mouse is clicked on canvas.\r\n     * The method inits the currentTransform parameters and renders all the\r\n     * canvas so the current image can be placed on the top canvas and the rest\r\n     * in on the container one.\r\n     * @private\r\n     * @param {Event} e Event object fired on mousedown\r\n     */ __onMouseDown: function(e) {\n            this._cacheTransformEventData(e);\n            this._handleEvent(e, \"down:before\");\n            var target = this._target;\n            // if right click just fire events\n            if (checkClick(e, RIGHT_CLICK)) {\n                if (this.fireRightClick) {\n                    this._handleEvent(e, \"down\", RIGHT_CLICK);\n                }\n                return;\n            }\n            if (checkClick(e, MIDDLE_CLICK)) {\n                if (this.fireMiddleClick) {\n                    this._handleEvent(e, \"down\", MIDDLE_CLICK);\n                }\n                return;\n            }\n            if (this.isDrawingMode) {\n                this._onMouseDownInDrawingMode(e);\n                return;\n            }\n            if (!this._isMainEvent(e)) {\n                return;\n            }\n            // ignore if some object is being transformed at this moment\n            if (this._currentTransform) {\n                return;\n            }\n            var pointer = this._pointer;\n            // save pointer for check in __onMouseUp event\n            this._previousPointer = pointer;\n            var shouldRender = this._shouldRender(target), shouldGroup = this._shouldGroup(e, target);\n            if (this._shouldClearSelection(e, target)) {\n                this.discardActiveObject(e);\n            } else if (shouldGroup) {\n                this._handleGrouping(e, target);\n                target = this._activeObject;\n            }\n            if (this.selection && (!target || !target.selectable && !target.isEditing && target !== this._activeObject)) {\n                this._groupSelector = {\n                    ex: this._absolutePointer.x,\n                    ey: this._absolutePointer.y,\n                    top: 0,\n                    left: 0\n                };\n            }\n            if (target) {\n                var alreadySelected = target === this._activeObject;\n                if (target.selectable && target.activeOn === \"down\") {\n                    this.setActiveObject(target, e);\n                }\n                var corner = target._findTargetCorner(this.getPointer(e, true), fabric.util.isTouchEvent(e));\n                target.__corner = corner;\n                if (target === this._activeObject && (corner || !shouldGroup)) {\n                    this._setupCurrentTransform(e, target, alreadySelected);\n                    var control = target.controls[corner], pointer = this.getPointer(e), mouseDownHandler = control && control.getMouseDownHandler(e, target, control);\n                    if (mouseDownHandler) {\n                        mouseDownHandler(e, this._currentTransform, pointer.x, pointer.y);\n                    }\n                }\n            }\n            this._handleEvent(e, \"down\");\n            // we must renderAll so that we update the visuals\n            (shouldRender || shouldGroup) && this.requestRenderAll();\n        },\n        /**\r\n     * reset cache form common information needed during event processing\r\n     * @private\r\n     */ _resetTransformEventData: function() {\n            this._target = null;\n            this._pointer = null;\n            this._absolutePointer = null;\n        },\n        /**\r\n     * Cache common information needed during event processing\r\n     * @private\r\n     * @param {Event} e Event object fired on event\r\n     */ _cacheTransformEventData: function(e) {\n            // reset in order to avoid stale caching\n            this._resetTransformEventData();\n            this._pointer = this.getPointer(e, true);\n            this._absolutePointer = this.restorePointerVpt(this._pointer);\n            this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;\n        },\n        /**\r\n     * @private\r\n     */ _beforeTransform: function(e) {\n            var t = this._currentTransform;\n            this.stateful && t.target.saveState();\n            this.fire(\"before:transform\", {\n                e: e,\n                transform: t\n            });\n        },\n        /**\r\n     * Method that defines the actions when mouse is hovering the canvas.\r\n     * The currentTransform parameter will define whether the user is rotating/scaling/translating\r\n     * an image or neither of them (only hovering). A group selection is also possible and would cancel\r\n     * all any other type of action.\r\n     * In case of an image transformation only the top canvas will be rendered.\r\n     * @private\r\n     * @param {Event} e Event object fired on mousemove\r\n     */ __onMouseMove: function(e) {\n            this._handleEvent(e, \"move:before\");\n            this._cacheTransformEventData(e);\n            var target, pointer;\n            if (this.isDrawingMode) {\n                this._onMouseMoveInDrawingMode(e);\n                return;\n            }\n            if (!this._isMainEvent(e)) {\n                return;\n            }\n            var groupSelector = this._groupSelector;\n            // We initially clicked in an empty area, so we draw a box for multiple selection\n            if (groupSelector) {\n                pointer = this._absolutePointer;\n                groupSelector.left = pointer.x - groupSelector.ex;\n                groupSelector.top = pointer.y - groupSelector.ey;\n                this.renderTop();\n            } else if (!this._currentTransform) {\n                target = this.findTarget(e) || null;\n                this._setCursorFromEvent(e, target);\n                this._fireOverOutEvents(target, e);\n            } else {\n                this._transformObject(e);\n            }\n            this._handleEvent(e, \"move\");\n            this._resetTransformEventData();\n        },\n        /**\r\n     * Manage the mouseout, mouseover events for the fabric object on the canvas\r\n     * @param {Fabric.Object} target the target where the target from the mousemove event\r\n     * @param {Event} e Event object fired on mousemove\r\n     * @private\r\n     */ _fireOverOutEvents: function(target, e) {\n            var _hoveredTarget = this._hoveredTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);\n            this.fireSyntheticInOutEvents(target, e, {\n                oldTarget: _hoveredTarget,\n                evtOut: \"mouseout\",\n                canvasEvtOut: \"mouse:out\",\n                evtIn: \"mouseover\",\n                canvasEvtIn: \"mouse:over\"\n            });\n            for(var i = 0; i < length; i++){\n                this.fireSyntheticInOutEvents(targets[i], e, {\n                    oldTarget: _hoveredTargets[i],\n                    evtOut: \"mouseout\",\n                    evtIn: \"mouseover\"\n                });\n            }\n            this._hoveredTarget = target;\n            this._hoveredTargets = this.targets.concat();\n        },\n        /**\r\n     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas\r\n     * @param {Fabric.Object} target the target where the target from the onDrag event\r\n     * @param {Event} e Event object fired on ondrag\r\n     * @private\r\n     */ _fireEnterLeaveEvents: function(target, e) {\n            var _draggedoverTarget = this._draggedoverTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);\n            this.fireSyntheticInOutEvents(target, e, {\n                oldTarget: _draggedoverTarget,\n                evtOut: \"dragleave\",\n                evtIn: \"dragenter\"\n            });\n            for(var i = 0; i < length; i++){\n                this.fireSyntheticInOutEvents(targets[i], e, {\n                    oldTarget: _hoveredTargets[i],\n                    evtOut: \"dragleave\",\n                    evtIn: \"dragenter\"\n                });\n            }\n            this._draggedoverTarget = target;\n        },\n        /**\r\n     * Manage the synthetic in/out events for the fabric objects on the canvas\r\n     * @param {Fabric.Object} target the target where the target from the supported events\r\n     * @param {Event} e Event object fired\r\n     * @param {Object} config configuration for the function to work\r\n     * @param {String} config.targetName property on the canvas where the old target is stored\r\n     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out\r\n     * @param {String} config.evtOut name of the event to fire for out\r\n     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in\r\n     * @param {String} config.evtIn name of the event to fire for in\r\n     * @private\r\n     */ fireSyntheticInOutEvents: function(target, e, config) {\n            var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires, targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;\n            if (targetChanged) {\n                inOpt = {\n                    e: e,\n                    target: target,\n                    previousTarget: oldTarget\n                };\n                outOpt = {\n                    e: e,\n                    target: oldTarget,\n                    nextTarget: target\n                };\n            }\n            inFires = target && targetChanged;\n            outFires = oldTarget && targetChanged;\n            if (outFires) {\n                canvasEvtOut && this.fire(canvasEvtOut, outOpt);\n                oldTarget.fire(config.evtOut, outOpt);\n            }\n            if (inFires) {\n                canvasEvtIn && this.fire(canvasEvtIn, inOpt);\n                target.fire(config.evtIn, inOpt);\n            }\n        },\n        /**\r\n     * Method that defines actions when an Event Mouse Wheel\r\n     * @param {Event} e Event object fired on mouseup\r\n     */ __onMouseWheel: function(e) {\n            this._cacheTransformEventData(e);\n            this._handleEvent(e, \"wheel\");\n            this._resetTransformEventData();\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event fired on mousemove\r\n     */ _transformObject: function(e) {\n            var pointer = this.getPointer(e), transform = this._currentTransform;\n            transform.reset = false;\n            transform.shiftKey = e.shiftKey;\n            transform.altKey = e[this.centeredKey];\n            this._performTransformAction(e, transform, pointer);\n            transform.actionPerformed && this.requestRenderAll();\n        },\n        /**\r\n     * @private\r\n     */ _performTransformAction: function(e, transform, pointer) {\n            var x = pointer.x, y = pointer.y, action = transform.action, actionPerformed = false, actionHandler = transform.actionHandler;\n            // this object could be created from the function in the control handlers\n            if (actionHandler) {\n                actionPerformed = actionHandler(e, transform, x, y);\n            }\n            if (action === \"drag\" && actionPerformed) {\n                transform.target.isMoving = true;\n                this.setCursor(transform.target.moveCursor || this.moveCursor);\n            }\n            transform.actionPerformed = transform.actionPerformed || actionPerformed;\n        },\n        /**\r\n     * @private\r\n     */ _fire: fabric.controlsUtils.fireEvent,\n        /**\r\n     * Sets the cursor depending on where the canvas is being hovered.\r\n     * Note: very buggy in Opera\r\n     * @param {Event} e Event object\r\n     * @param {Object} target Object that the mouse is hovering, if so.\r\n     */ _setCursorFromEvent: function(e, target) {\n            if (!target) {\n                this.setCursor(this.defaultCursor);\n                return false;\n            }\n            var hoverCursor = target.hoverCursor || this.hoverCursor, activeSelection = this._activeObject && this._activeObject.type === \"activeSelection\" ? this._activeObject : null, // only show proper corner when group selection is not active\n            corner = (!activeSelection || !activeSelection.contains(target)) && target._findTargetCorner(this.getPointer(e, true));\n            if (!corner) {\n                if (target.subTargetCheck) {\n                    // hoverCursor should come from top-most subTarget,\n                    // so we walk the array backwards\n                    this.targets.concat().reverse().map(function(_target) {\n                        hoverCursor = _target.hoverCursor || hoverCursor;\n                    });\n                }\n                this.setCursor(hoverCursor);\n            } else {\n                this.setCursor(this.getCornerCursor(corner, target, e));\n            }\n        },\n        /**\r\n     * @private\r\n     */ getCornerCursor: function(corner, target, e) {\n            var control = target.controls[corner];\n            return control.cursorStyleHandler(e, control, target);\n        }\n    });\n})();\n(function() {\n    var min = Math.min, max = Math.max;\n    fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {\n        /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     * @return {Boolean}\r\n     */ _shouldGroup: function(e, target) {\n            var activeObject = this._activeObject;\n            return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection && (activeObject !== target || activeObject.type === \"activeSelection\") && !target.onSelect({\n                e: e\n            });\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e Event object\r\n     * @param {fabric.Object} target\r\n     */ _handleGrouping: function(e, target) {\n            var activeObject = this._activeObject;\n            // avoid multi select when shift click on a corner\n            if (activeObject.__corner) {\n                return;\n            }\n            if (target === activeObject) {\n                // if it's a group, find target again, using activeGroup objects\n                target = this.findTarget(e, true);\n                // if even object is not found or we are on activeObjectCorner, bail out\n                if (!target || !target.selectable) {\n                    return;\n                }\n            }\n            if (activeObject && activeObject.type === \"activeSelection\") {\n                this._updateActiveSelection(target, e);\n            } else {\n                this._createActiveSelection(target, e);\n            }\n        },\n        /**\r\n     * @private\r\n     */ _updateActiveSelection: function(target, e) {\n            var activeSelection = this._activeObject, currentActiveObjects = activeSelection._objects.slice(0);\n            if (activeSelection.contains(target)) {\n                activeSelection.removeWithUpdate(target);\n                this._hoveredTarget = target;\n                this._hoveredTargets = this.targets.concat();\n                if (activeSelection.size() === 1) {\n                    // activate last remaining object\n                    this._setActiveObject(activeSelection.item(0), e);\n                }\n            } else {\n                activeSelection.addWithUpdate(target);\n                this._hoveredTarget = activeSelection;\n                this._hoveredTargets = this.targets.concat();\n            }\n            this._fireSelectionEvents(currentActiveObjects, e);\n        },\n        /**\r\n     * @private\r\n     */ _createActiveSelection: function(target, e) {\n            var currentActives = this.getActiveObjects(), group = this._createGroup(target);\n            this._hoveredTarget = group;\n            // ISSUE 4115: should we consider subTargets here?\n            // this._hoveredTargets = [];\n            // this._hoveredTargets = this.targets.concat();\n            this._setActiveObject(group, e);\n            this._fireSelectionEvents(currentActives, e);\n        },\n        /**\r\n     * @private\r\n     * @param {Object} target\r\n     */ _createGroup: function(target) {\n            var objects = this._objects, isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target), groupObjects = isActiveLower ? [\n                this._activeObject,\n                target\n            ] : [\n                target,\n                this._activeObject\n            ];\n            this._activeObject.isEditing && this._activeObject.exitEditing();\n            return new fabric.ActiveSelection(groupObjects, {\n                canvas: this\n            });\n        },\n        /**\r\n     * @private\r\n     * @param {Event} e mouse event\r\n     */ _groupSelectedObjects: function(e) {\n            var group = this._collectObjects(e), aGroup;\n            // do not create group for 1 element only\n            if (group.length === 1) {\n                this.setActiveObject(group[0], e);\n            } else if (group.length > 1) {\n                aGroup = new fabric.ActiveSelection(group.reverse(), {\n                    canvas: this\n                });\n                this.setActiveObject(aGroup, e);\n            }\n        },\n        /**\r\n     * @private\r\n     */ _collectObjects: function(e) {\n            var group = [], currentObject, x1 = this._groupSelector.ex, y1 = this._groupSelector.ey, x2 = x1 + this._groupSelector.left, y2 = y1 + this._groupSelector.top, selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)), selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)), allowIntersect = !this.selectionFullyContained, isClick = x1 === x2 && y1 === y2;\n            // we iterate reverse order to collect top first in case of click.\n            for(var i = this._objects.length; i--;){\n                currentObject = this._objects[i];\n                if (!currentObject || !currentObject.selectable || !currentObject.visible) {\n                    continue;\n                }\n                if (allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true) || currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) || allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true) || allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true)) {\n                    group.push(currentObject);\n                    // only add one object if it's a click\n                    if (isClick) {\n                        break;\n                    }\n                }\n            }\n            if (group.length > 1) {\n                group = group.filter(function(object) {\n                    return !object.onSelect({\n                        e: e\n                    });\n                });\n            }\n            return group;\n        },\n        /**\r\n     * @private\r\n     */ _maybeGroupObjects: function(e) {\n            if (this.selection && this._groupSelector) {\n                this._groupSelectedObjects(e);\n            }\n            this.setCursor(this.defaultCursor);\n            // clear selection and current transformation\n            this._groupSelector = null;\n        }\n    });\n})();\n(function() {\n    fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n        /**\r\n     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0\r\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}\r\n     * @example <caption>Generate jpeg dataURL with lower quality</caption>\r\n     * var dataURL = canvas.toDataURL({\r\n     *   format: 'jpeg',\r\n     *   quality: 0.8\r\n     * });\r\n     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>\r\n     * var dataURL = canvas.toDataURL({\r\n     *   format: 'png',\r\n     *   left: 100,\r\n     *   top: 100,\r\n     *   width: 200,\r\n     *   height: 200\r\n     * });\r\n     * @example <caption>Generate double scaled png dataURL</caption>\r\n     * var dataURL = canvas.toDataURL({\r\n     *   format: 'png',\r\n     *   multiplier: 2\r\n     * });\r\n     */ toDataURL: function(options) {\n            options || (options = {});\n            var format = options.format || \"png\", quality = options.quality || 1, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1), canvasEl = this.toCanvasElement(multiplier, options);\n            return fabric.util.toDataURL(canvasEl, format, quality);\n        },\n        /**\r\n     * Create a new HTMLCanvas element painted with the current canvas content.\r\n     * No need to resize the actual one or repaint it.\r\n     * Will transfer object ownership to a new canvas, paint it, and set everything back.\r\n     * This is an intermediary step used to get to a dataUrl but also it is useful to\r\n     * create quick image copies of a canvas without passing for the dataUrl string\r\n     * @param {Number} [multiplier] a zoom factor.\r\n     * @param {Object} [cropping] Cropping informations\r\n     * @param {Number} [cropping.left] Cropping left offset.\r\n     * @param {Number} [cropping.top] Cropping top offset.\r\n     * @param {Number} [cropping.width] Cropping width.\r\n     * @param {Number} [cropping.height] Cropping height.\r\n     */ toCanvasElement: function(multiplier, cropping) {\n            multiplier = multiplier || 1;\n            cropping = cropping || {};\n            var scaledWidth = (cropping.width || this.width) * multiplier, scaledHeight = (cropping.height || this.height) * multiplier, zoom = this.getZoom(), originalWidth = this.width, originalHeight = this.height, newZoom = zoom * multiplier, vp = this.viewportTransform, translateX = (vp[4] - (cropping.left || 0)) * multiplier, translateY = (vp[5] - (cropping.top || 0)) * multiplier, originalInteractive = this.interactive, newVp = [\n                newZoom,\n                0,\n                0,\n                newZoom,\n                translateX,\n                translateY\n            ], originalRetina = this.enableRetinaScaling, canvasEl = fabric.util.createCanvasElement(), originalContextTop = this.contextTop;\n            canvasEl.width = scaledWidth;\n            canvasEl.height = scaledHeight;\n            this.contextTop = null;\n            this.enableRetinaScaling = false;\n            this.interactive = false;\n            this.viewportTransform = newVp;\n            this.width = scaledWidth;\n            this.height = scaledHeight;\n            this.calcViewportBoundaries();\n            this.renderCanvas(canvasEl.getContext(\"2d\"), this._objects);\n            this.viewportTransform = vp;\n            this.width = originalWidth;\n            this.height = originalHeight;\n            this.calcViewportBoundaries();\n            this.interactive = originalInteractive;\n            this.enableRetinaScaling = originalRetina;\n            this.contextTop = originalContextTop;\n            return canvasEl;\n        }\n    });\n})();\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n    /**\r\n   * Populates canvas with data from the specified JSON.\r\n   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}\r\n   * @param {String|Object} json JSON string or object\r\n   * @param {Function} callback Callback, invoked when json is parsed\r\n   *                            and corresponding objects (e.g: {@link fabric.Image})\r\n   *                            are initialized\r\n   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.\r\n   * @return {fabric.Canvas} instance\r\n   * @chainable\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}\r\n   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}\r\n   * @example <caption>loadFromJSON</caption>\r\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));\r\n   * @example <caption>loadFromJSON with reviver</caption>\r\n   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {\r\n   *   // `o` = json object\r\n   *   // `object` = fabric.Object instance\r\n   *   // ... do some stuff ...\r\n   * });\r\n   */ loadFromJSON: function(json, callback, reviver) {\n        if (!json) {\n            return;\n        }\n        // serialize if it wasn't already\n        var serialized = typeof json === \"string\" ? JSON.parse(json) : fabric.util.object.clone(json);\n        var _this = this, clipPath = serialized.clipPath, renderOnAddRemove = this.renderOnAddRemove;\n        this.renderOnAddRemove = false;\n        delete serialized.clipPath;\n        this._enlivenObjects(serialized.objects, function(enlivenedObjects) {\n            _this.clear();\n            _this._setBgOverlay(serialized, function() {\n                if (clipPath) {\n                    _this._enlivenObjects([\n                        clipPath\n                    ], function(enlivenedCanvasClip) {\n                        _this.clipPath = enlivenedCanvasClip[0];\n                        _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\n                    });\n                } else {\n                    _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);\n                }\n            });\n        }, reviver);\n        return this;\n    },\n    /**\r\n   * @private\r\n   * @param {Object} serialized Object with background and overlay information\r\n   * @param {Array} restored canvas objects\r\n   * @param {Function} cached renderOnAddRemove callback\r\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n   */ __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {\n        var _this = this;\n        enlivenedObjects.forEach(function(obj, index) {\n            // we splice the array just in case some custom classes restored from JSON\n            // will add more object to canvas at canvas init.\n            _this.insertAt(obj, index);\n        });\n        this.renderOnAddRemove = renderOnAddRemove;\n        // remove parts i cannot set as options\n        delete serialized.objects;\n        delete serialized.backgroundImage;\n        delete serialized.overlayImage;\n        delete serialized.background;\n        delete serialized.overlay;\n        // this._initOptions does too many things to just\n        // call it. Normally loading an Object from JSON\n        // create the Object instance. Here the Canvas is\n        // already an instance and we are just loading things over it\n        this._setOptions(serialized);\n        this.renderAll();\n        callback && callback();\n    },\n    /**\r\n   * @private\r\n   * @param {Object} serialized Object with background and overlay information\r\n   * @param {Function} callback Invoked after all background and overlay images/patterns loaded\r\n   */ _setBgOverlay: function(serialized, callback) {\n        var loaded = {\n            backgroundColor: false,\n            overlayColor: false,\n            backgroundImage: false,\n            overlayImage: false\n        };\n        if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {\n            callback && callback();\n            return;\n        }\n        var cbIfLoaded = function() {\n            if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {\n                callback && callback();\n            }\n        };\n        this.__setBgOverlay(\"backgroundImage\", serialized.backgroundImage, loaded, cbIfLoaded);\n        this.__setBgOverlay(\"overlayImage\", serialized.overlayImage, loaded, cbIfLoaded);\n        this.__setBgOverlay(\"backgroundColor\", serialized.background, loaded, cbIfLoaded);\n        this.__setBgOverlay(\"overlayColor\", serialized.overlay, loaded, cbIfLoaded);\n    },\n    /**\r\n   * @private\r\n   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)\r\n   * @param {(Object|String)} value Value to set\r\n   * @param {Object} loaded Set loaded property to true if property is set\r\n   * @param {Object} callback Callback function to invoke after property is set\r\n   */ __setBgOverlay: function(property, value, loaded, callback) {\n        var _this = this;\n        if (!value) {\n            loaded[property] = true;\n            callback && callback();\n            return;\n        }\n        if (property === \"backgroundImage\" || property === \"overlayImage\") {\n            fabric.util.enlivenObjects([\n                value\n            ], function(enlivedObject) {\n                _this[property] = enlivedObject[0];\n                loaded[property] = true;\n                callback && callback();\n            });\n        } else {\n            this[\"set\" + fabric.util.string.capitalize(property, true)](value, function() {\n                loaded[property] = true;\n                callback && callback();\n            });\n        }\n    },\n    /**\r\n   * @private\r\n   * @param {Array} objects\r\n   * @param {Function} callback\r\n   * @param {Function} [reviver]\r\n   */ _enlivenObjects: function(objects, callback, reviver) {\n        if (!objects || objects.length === 0) {\n            callback && callback([]);\n            return;\n        }\n        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n            callback && callback(enlivenedObjects);\n        }, null, reviver);\n    },\n    /**\r\n   * @private\r\n   * @param {String} format\r\n   * @param {Function} callback\r\n   */ _toDataURL: function(format, callback) {\n        this.clone(function(clone) {\n            callback(clone.toDataURL(format));\n        });\n    },\n    /**\r\n   * @private\r\n   * @param {String} format\r\n   * @param {Number} multiplier\r\n   * @param {Function} callback\r\n   */ _toDataURLWithMultiplier: function(format, multiplier, callback) {\n        this.clone(function(clone) {\n            callback(clone.toDataURLWithMultiplier(format, multiplier));\n        });\n    },\n    /**\r\n   * Clones canvas instance\r\n   * @param {Object} [callback] Receives cloned instance as a first argument\r\n   * @param {Array} [properties] Array of properties to include in the cloned canvas and children\r\n   */ clone: function(callback, properties) {\n        var data = JSON.stringify(this.toJSON(properties));\n        this.cloneWithoutData(function(clone) {\n            clone.loadFromJSON(data, function() {\n                callback && callback(clone);\n            });\n        });\n    },\n    /**\r\n   * Clones canvas instance without cloning existing data.\r\n   * This essentially copies canvas dimensions, clipping properties, etc.\r\n   * but leaves data empty (so that you can populate it with your own)\r\n   * @param {Object} [callback] Receives cloned instance as a first argument\r\n   */ cloneWithoutData: function(callback) {\n        var el = fabric.util.createCanvasElement();\n        el.width = this.width;\n        el.height = this.height;\n        var clone = new fabric.Canvas(el);\n        if (this.backgroundImage) {\n            clone.setBackgroundImage(this.backgroundImage.src, function() {\n                clone.renderAll();\n                callback && callback(clone);\n            });\n            clone.backgroundImageOpacity = this.backgroundImageOpacity;\n            clone.backgroundImageStretch = this.backgroundImageStretch;\n        } else {\n            callback && callback(clone);\n        }\n    }\n});\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, clone = fabric.util.object.clone, toFixed = fabric.util.toFixed, capitalize = fabric.util.string.capitalize, degreesToRadians = fabric.util.degreesToRadians, objectCaching = !fabric.isLikelyNode, ALIASING_LIMIT = 2;\n    if (fabric.Object) {\n        return;\n    }\n    /**\r\n   * Root object class from which all 2d shape classes inherit from\r\n   * @class fabric.Object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}\r\n   * @see {@link fabric.Object#initialize} for constructor definition\r\n   *\r\n   * @fires added\r\n   * @fires removed\r\n   *\r\n   * @fires selected\r\n   * @fires deselected\r\n   * @fires modified\r\n   * @fires modified\r\n   * @fires moved\r\n   * @fires scaled\r\n   * @fires rotated\r\n   * @fires skewed\r\n   *\r\n   * @fires rotating\r\n   * @fires scaling\r\n   * @fires moving\r\n   * @fires skewing\r\n   *\r\n   * @fires mousedown\r\n   * @fires mouseup\r\n   * @fires mouseover\r\n   * @fires mouseout\r\n   * @fires mousewheel\r\n   * @fires mousedblclick\r\n   *\r\n   * @fires dragover\r\n   * @fires dragenter\r\n   * @fires dragleave\r\n   * @fires drop\r\n   */ fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */ {\n        /**\r\n     * Type of an object (rect, circle, path, etc.).\r\n     * Note that this property is meant to be read-only and not meant to be modified.\r\n     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.\r\n     * @type String\r\n     * @default\r\n     */ type: \"object\",\n        /**\r\n     * Horizontal origin of transformation of an object (one of \"left\", \"right\", \"center\")\r\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n     * @type String\r\n     * @default\r\n     */ originX: \"left\",\n        /**\r\n     * Vertical origin of transformation of an object (one of \"top\", \"bottom\", \"center\")\r\n     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups\r\n     * @type String\r\n     * @default\r\n     */ originY: \"top\",\n        /**\r\n     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}\r\n     * @type Number\r\n     * @default\r\n     */ top: 0,\n        /**\r\n     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}\r\n     * @type Number\r\n     * @default\r\n     */ left: 0,\n        /**\r\n     * Object width\r\n     * @type Number\r\n     * @default\r\n     */ width: 0,\n        /**\r\n     * Object height\r\n     * @type Number\r\n     * @default\r\n     */ height: 0,\n        /**\r\n     * Object scale factor (horizontal)\r\n     * @type Number\r\n     * @default\r\n     */ scaleX: 1,\n        /**\r\n     * Object scale factor (vertical)\r\n     * @type Number\r\n     * @default\r\n     */ scaleY: 1,\n        /**\r\n     * When true, an object is rendered as flipped horizontally\r\n     * @type Boolean\r\n     * @default\r\n     */ flipX: false,\n        /**\r\n     * When true, an object is rendered as flipped vertically\r\n     * @type Boolean\r\n     * @default\r\n     */ flipY: false,\n        /**\r\n     * Opacity of an object\r\n     * @type Number\r\n     * @default\r\n     */ opacity: 1,\n        /**\r\n     * Angle of rotation of an object (in degrees)\r\n     * @type Number\r\n     * @default\r\n     */ angle: 0,\n        /**\r\n     * Angle of skew on x axes of an object (in degrees)\r\n     * @type Number\r\n     * @default\r\n     */ skewX: 0,\n        /**\r\n     * Angle of skew on y axes of an object (in degrees)\r\n     * @type Number\r\n     * @default\r\n     */ skewY: 0,\n        /**\r\n     * Size of object's controlling corners (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */ cornerSize: 13,\n        /**\r\n     * Size of object's controlling corners when touch interaction is detected\r\n     * @type Number\r\n     * @default\r\n     */ touchCornerSize: 24,\n        /**\r\n     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)\r\n     * @type Boolean\r\n     * @default\r\n     */ transparentCorners: true,\n        /**\r\n     * Default cursor value used when hovering over this object on canvas\r\n     * @type String\r\n     * @default\r\n     */ hoverCursor: null,\n        /**\r\n     * Default cursor value used when moving this object on canvas\r\n     * @type String\r\n     * @default\r\n     */ moveCursor: null,\n        /**\r\n     * Padding between object and its controlling borders (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */ padding: 0,\n        /**\r\n     * Color of controlling borders of an object (when it's active)\r\n     * @type String\r\n     * @default\r\n     */ borderColor: \"rgb(178,204,255)\",\n        /**\r\n     * Array specifying dash pattern of an object's borders (hasBorder must be true)\r\n     * @since 1.6.2\r\n     * @type Array\r\n     */ borderDashArray: null,\n        /**\r\n     * Color of controlling corners of an object (when it's active)\r\n     * @type String\r\n     * @default\r\n     */ cornerColor: \"rgb(178,204,255)\",\n        /**\r\n     * Color of controlling corners of an object (when it's active and transparentCorners false)\r\n     * @since 1.6.2\r\n     * @type String\r\n     * @default\r\n     */ cornerStrokeColor: null,\n        /**\r\n     * Specify style of control, 'rect' or 'circle'\r\n     * @since 1.6.2\r\n     * @type String\r\n     */ cornerStyle: \"rect\",\n        /**\r\n     * Array specifying dash pattern of an object's control (hasBorder must be true)\r\n     * @since 1.6.2\r\n     * @type Array\r\n     */ cornerDashArray: null,\n        /**\r\n     * When true, this object will use center point as the origin of transformation\r\n     * when being scaled via the controls.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */ centeredScaling: false,\n        /**\r\n     * When true, this object will use center point as the origin of transformation\r\n     * when being rotated via the controls.\r\n     * <b>Backwards incompatibility note:</b> This property replaces \"centerTransform\" (Boolean).\r\n     * @since 1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */ centeredRotation: true,\n        /**\r\n     * Color of object's fill\r\n     * takes css colors https://www.w3.org/TR/css-color-3/\r\n     * @type String\r\n     * @default\r\n     */ fill: \"rgb(0,0,0)\",\n        /**\r\n     * Fill rule used to fill an object\r\n     * accepted values are nonzero, evenodd\r\n     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)\r\n     * @type String\r\n     * @default\r\n     */ fillRule: \"nonzero\",\n        /**\r\n     * Composite rule used for canvas globalCompositeOperation\r\n     * @type String\r\n     * @default\r\n     */ globalCompositeOperation: \"source-over\",\n        /**\r\n     * Background color of an object.\r\n     * takes css colors https://www.w3.org/TR/css-color-3/\r\n     * @type String\r\n     * @default\r\n     */ backgroundColor: \"\",\n        /**\r\n     * Selection Background color of an object. colored layer behind the object when it is active.\r\n     * does not mix good with globalCompositeOperation methods.\r\n     * @type String\r\n     * @default\r\n     */ selectionBackgroundColor: \"\",\n        /**\r\n     * When defined, an object is rendered via stroke and this property specifies its color\r\n     * takes css colors https://www.w3.org/TR/css-color-3/\r\n     * @type String\r\n     * @default\r\n     */ stroke: null,\n        /**\r\n     * Width of a stroke used to render this object\r\n     * @type Number\r\n     * @default\r\n     */ strokeWidth: 1,\n        /**\r\n     * Array specifying dash pattern of an object's stroke (stroke must be defined)\r\n     * @type Array\r\n     */ strokeDashArray: null,\n        /**\r\n     * Line offset of an object's stroke\r\n     * @type Number\r\n     * @default\r\n     */ strokeDashOffset: 0,\n        /**\r\n     * Line endings style of an object's stroke (one of \"butt\", \"round\", \"square\")\r\n     * @type String\r\n     * @default\r\n     */ strokeLineCap: \"butt\",\n        /**\r\n     * Corner style of an object's stroke (one of \"bevel\", \"round\", \"miter\")\r\n     * @type String\r\n     * @default\r\n     */ strokeLineJoin: \"miter\",\n        /**\r\n     * Maximum miter length (used for strokeLineJoin = \"miter\") of an object's stroke\r\n     * @type Number\r\n     * @default\r\n     */ strokeMiterLimit: 4,\n        /**\r\n     * Shadow object representing shadow of this shape\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */ shadow: null,\n        /**\r\n     * Opacity of object's controlling borders when object is active and moving\r\n     * @type Number\r\n     * @default\r\n     */ borderOpacityWhenMoving: 0.4,\n        /**\r\n     * Scale factor of object's controlling borders\r\n     * bigger number will make a thicker border\r\n     * border is 1, so this is basically a border thickness\r\n     * since there is no way to change the border itself.\r\n     * @type Number\r\n     * @default\r\n     */ borderScaleFactor: 1,\n        /**\r\n     * Minimum allowed scale value of an object\r\n     * @type Number\r\n     * @default\r\n     */ minScaleLimit: 0,\n        /**\r\n     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).\r\n     * But events still fire on it.\r\n     * @type Boolean\r\n     * @default\r\n     */ selectable: true,\n        /**\r\n     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4\r\n     * @type Boolean\r\n     * @default\r\n     */ evented: true,\n        /**\r\n     * When set to `false`, an object is not rendered on canvas\r\n     * @type Boolean\r\n     * @default\r\n     */ visible: true,\n        /**\r\n     * When set to `false`, object's controls are not displayed and can not be used to manipulate object\r\n     * @type Boolean\r\n     * @default\r\n     */ hasControls: true,\n        /**\r\n     * When set to `false`, object's controlling borders are not rendered\r\n     * @type Boolean\r\n     * @default\r\n     */ hasBorders: true,\n        /**\r\n     * When set to `true`, objects are \"found\" on canvas on per-pixel basis rather than according to bounding box\r\n     * @type Boolean\r\n     * @default\r\n     */ perPixelTargetFind: false,\n        /**\r\n     * When `false`, default object's values are not included in its serialization\r\n     * @type Boolean\r\n     * @default\r\n     */ includeDefaultValues: true,\n        /**\r\n     * When `true`, object horizontal movement is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockMovementX: false,\n        /**\r\n     * When `true`, object vertical movement is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockMovementY: false,\n        /**\r\n     * When `true`, object rotation is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockRotation: false,\n        /**\r\n     * When `true`, object horizontal scaling is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockScalingX: false,\n        /**\r\n     * When `true`, object vertical scaling is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockScalingY: false,\n        /**\r\n     * When `true`, object horizontal skewing is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockSkewingX: false,\n        /**\r\n     * When `true`, object vertical skewing is locked\r\n     * @type Boolean\r\n     * @default\r\n     */ lockSkewingY: false,\n        /**\r\n     * When `true`, object cannot be flipped by scaling into negative values\r\n     * @type Boolean\r\n     * @default\r\n     */ lockScalingFlip: false,\n        /**\r\n     * When `true`, object is not exported in OBJECT/JSON\r\n     * @since 1.6.3\r\n     * @type Boolean\r\n     * @default\r\n     */ excludeFromExport: false,\n        /**\r\n     * When `true`, object is cached on an additional canvas.\r\n     * When `false`, object is not cached unless necessary ( clipPath )\r\n     * default to true\r\n     * @since 1.7.0\r\n     * @type Boolean\r\n     * @default true\r\n     */ objectCaching: objectCaching,\n        /**\r\n     * When `true`, object properties are checked for cache invalidation. In some particular\r\n     * situation you may want this to be disabled ( spray brush, very big, groups)\r\n     * or if your application does not allow you to modify properties for groups child you want\r\n     * to disable it for groups.\r\n     * default to false\r\n     * since 1.7.0\r\n     * @type Boolean\r\n     * @default false\r\n     */ statefullCache: false,\n        /**\r\n     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled\r\n     * too much and will be redrawn with correct details at the end of scaling.\r\n     * this setting is performance and application dependant.\r\n     * default to true\r\n     * since 1.7.0\r\n     * @type Boolean\r\n     * @default true\r\n     */ noScaleCache: true,\n        /**\r\n     * When `false`, the stoke width will scale with the object.\r\n     * When `true`, the stroke will always match the exact pixel size entered for stroke width.\r\n     * this Property does not work on Text classes or drawing call that uses strokeText,fillText methods\r\n     * default to false\r\n     * @since 2.6.0\r\n     * @type Boolean\r\n     * @default false\r\n     * @type Boolean\r\n     * @default false\r\n     */ strokeUniform: false,\n        /**\r\n     * When set to `true`, object's cache will be rerendered next render call.\r\n     * since 1.7.0\r\n     * @type Boolean\r\n     * @default true\r\n     */ dirty: true,\n        /**\r\n     * keeps the value of the last hovered corner during mouse move.\r\n     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..\r\n     * It should be private, but there is no harm in using it as\r\n     * a read-only property.\r\n     * @type number|string|any\r\n     * @default 0\r\n     */ __corner: 0,\n        /**\r\n     * Determines if the fill or the stroke is drawn first (one of \"fill\" or \"stroke\")\r\n     * @type String\r\n     * @default\r\n     */ paintFirst: \"fill\",\n        /**\r\n     * When 'down', object is set to active on mousedown/touchstart\r\n     * When 'up', object is set to active on mouseup/touchend\r\n     * Experimental. Let's see if this breaks anything before supporting officially\r\n     * @private\r\n     * since 4.4.0\r\n     * @type String\r\n     * @default 'down'\r\n     */ activeOn: \"down\",\n        /**\r\n     * List of properties to consider when checking if state\r\n     * of an object is changed (fabric.Object#hasStateChanged)\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */ stateProperties: (\"top left width height scaleX scaleY flipX flipY originX originY transformMatrix \" + \"stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit \" + \"angle opacity fill globalCompositeOperation shadow visible backgroundColor \" + \"skewX skewY fillRule paintFirst clipPath strokeUniform\").split(\" \"),\n        /**\r\n     * List of properties to consider when checking if cache needs refresh\r\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n     * and refreshed at the next render\r\n     * @type Array\r\n     */ cacheProperties: (\"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform\" + \" strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath\").split(\" \"),\n        /**\r\n     * List of properties to consider for animating colors.\r\n     * @type Array\r\n     */ colorProperties: \"fill stroke backgroundColor\".split(\" \"),\n        /**\r\n     * a fabricObject that, without stroke define a clipping area with their shape. filled in black\r\n     * the clipPath object gets used when the object has rendered, and the context is placed in the center\r\n     * of the object cacheCanvas.\r\n     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'\r\n     * @type fabric.Object\r\n     */ clipPath: undefined,\n        /**\r\n     * Meaningful ONLY when the object is used as clipPath.\r\n     * if true, the clipPath will make the object clip to the outside of the clipPath\r\n     * since 2.4.0\r\n     * @type boolean\r\n     * @default false\r\n     */ inverted: false,\n        /**\r\n     * Meaningful ONLY when the object is used as clipPath.\r\n     * if true, the clipPath will have its top and left relative to canvas, and will\r\n     * not be influenced by the object transform. This will make the clipPath relative\r\n     * to the canvas, but clipping just a particular object.\r\n     * WARNING this is beta, this feature may change or be renamed.\r\n     * since 2.4.0\r\n     * @type boolean\r\n     * @default false\r\n     */ absolutePositioned: false,\n        /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */ initialize: function(options) {\n            if (options) {\n                this.setOptions(options);\n            }\n        },\n        /**\r\n     * Create a the canvas used to keep the cached copy of the object\r\n     * @private\r\n     */ _createCacheCanvas: function() {\n            this._cacheProperties = {};\n            this._cacheCanvas = fabric.util.createCanvasElement();\n            this._cacheContext = this._cacheCanvas.getContext(\"2d\");\n            this._updateCacheCanvas();\n            // if canvas gets created, is empty, so dirty.\n            this.dirty = true;\n        },\n        /**\r\n     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal\r\n     * and each side do not cross fabric.cacheSideLimit\r\n     * those numbers are configurable so that you can get as much detail as you want\r\n     * making bargain with performances.\r\n     * @param {Object} dims\r\n     * @param {Object} dims.width width of canvas\r\n     * @param {Object} dims.height height of canvas\r\n     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.width width of canvas\r\n     * @return {Object}.height height of canvas\r\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     */ _limitCacheSize: function(dims) {\n            var perfLimitSizeTotal = fabric.perfLimitSizeTotal, width = dims.width, height = dims.height, max = fabric.maxCacheSideLimit, min = fabric.minCacheSideLimit;\n            if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {\n                if (width < min) {\n                    dims.width = min;\n                }\n                if (height < min) {\n                    dims.height = min;\n                }\n                return dims;\n            }\n            var ar = width / height, limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal), capValue = fabric.util.capValue, x = capValue(min, limitedDims.x, max), y = capValue(min, limitedDims.y, max);\n            if (width > x) {\n                dims.zoomX /= width / x;\n                dims.width = x;\n                dims.capped = true;\n            }\n            if (height > y) {\n                dims.zoomY /= height / y;\n                dims.height = y;\n                dims.capped = true;\n            }\n            return dims;\n        },\n        /**\r\n     * Return the dimension and the zoom level needed to create a cache canvas\r\n     * big enough to host the object to be cached.\r\n     * @private\r\n     * @return {Object}.x width of object to be cached\r\n     * @return {Object}.y height of object to be cached\r\n     * @return {Object}.width width of canvas\r\n     * @return {Object}.height height of canvas\r\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     */ _getCacheCanvasDimensions: function() {\n            var objectScale = this.getTotalObjectScaling(), // caculate dimensions without skewing\n            dim = this._getTransformedDimensions(0, 0), neededX = dim.x * objectScale.scaleX / this.scaleX, neededY = dim.y * objectScale.scaleY / this.scaleY;\n            return {\n                // for sure this ALIASING_LIMIT is slightly creating problem\n                // in situation in which the cache canvas gets an upper limit\n                // also objectScale contains already scaleX and scaleY\n                width: neededX + ALIASING_LIMIT,\n                height: neededY + ALIASING_LIMIT,\n                zoomX: objectScale.scaleX,\n                zoomY: objectScale.scaleY,\n                x: neededX,\n                y: neededY\n            };\n        },\n        /**\r\n     * Update width and height of the canvas for cache\r\n     * returns true or false if canvas needed resize.\r\n     * @private\r\n     * @return {Boolean} true if the canvas has been resized\r\n     */ _updateCacheCanvas: function() {\n            var targetCanvas = this.canvas;\n            if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {\n                var target = targetCanvas._currentTransform.target, action = targetCanvas._currentTransform.action;\n                if (this === target && action.slice && action.slice(0, 5) === \"scale\") {\n                    return false;\n                }\n            }\n            var canvas = this._cacheCanvas, dims = this._limitCacheSize(this._getCacheCanvasDimensions()), minCacheSize = fabric.minCacheSideLimit, width = dims.width, height = dims.height, drawingWidth, drawingHeight, zoomX = dims.zoomX, zoomY = dims.zoomY, dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight, zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY, shouldRedraw = dimensionsChanged || zoomChanged, additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;\n            if (dimensionsChanged) {\n                var canvasWidth = this._cacheCanvas.width, canvasHeight = this._cacheCanvas.height, sizeGrowing = width > canvasWidth || height > canvasHeight, sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) && canvasWidth > minCacheSize && canvasHeight > minCacheSize;\n                shouldResizeCanvas = sizeGrowing || sizeShrinking;\n                if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {\n                    additionalWidth = width * 0.1;\n                    additionalHeight = height * 0.1;\n                }\n            }\n            if (this instanceof fabric.Text && this.path) {\n                shouldRedraw = true;\n                shouldResizeCanvas = true;\n                additionalWidth += this.getHeightOfLine(0) * this.zoomX;\n                additionalHeight += this.getHeightOfLine(0) * this.zoomY;\n            }\n            if (shouldRedraw) {\n                if (shouldResizeCanvas) {\n                    canvas.width = Math.ceil(width + additionalWidth);\n                    canvas.height = Math.ceil(height + additionalHeight);\n                } else {\n                    this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);\n                    this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);\n                }\n                drawingWidth = dims.x / 2;\n                drawingHeight = dims.y / 2;\n                this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;\n                this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;\n                this.cacheWidth = width;\n                this.cacheHeight = height;\n                this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);\n                this._cacheContext.scale(zoomX, zoomY);\n                this.zoomX = zoomX;\n                this.zoomY = zoomY;\n                return true;\n            }\n            return false;\n        },\n        /**\r\n     * Sets object's properties from options\r\n     * @param {Object} [options] Options object\r\n     */ setOptions: function(options) {\n            this._setOptions(options);\n            this._initGradient(options.fill, \"fill\");\n            this._initGradient(options.stroke, \"stroke\");\n            this._initPattern(options.fill, \"fill\");\n            this._initPattern(options.stroke, \"stroke\");\n        },\n        /**\r\n     * Transforms context when rendering an object\r\n     * @param {CanvasRenderingContext2D} ctx Context\r\n     */ transform: function(ctx) {\n            var needFullTransform = this.group && !this.group._transformDone || this.group && this.canvas && ctx === this.canvas.contextTop;\n            var m = this.calcTransformMatrix(!needFullTransform);\n            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n        },\n        /**\r\n     * Returns an object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS, object = {\n                type: this.type,\n                version: fabric.version,\n                originX: this.originX,\n                originY: this.originY,\n                left: toFixed(this.left, NUM_FRACTION_DIGITS),\n                top: toFixed(this.top, NUM_FRACTION_DIGITS),\n                width: toFixed(this.width, NUM_FRACTION_DIGITS),\n                height: toFixed(this.height, NUM_FRACTION_DIGITS),\n                fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,\n                stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,\n                strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),\n                strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,\n                strokeLineCap: this.strokeLineCap,\n                strokeDashOffset: this.strokeDashOffset,\n                strokeLineJoin: this.strokeLineJoin,\n                strokeUniform: this.strokeUniform,\n                strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),\n                scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),\n                scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),\n                angle: toFixed(this.angle, NUM_FRACTION_DIGITS),\n                flipX: this.flipX,\n                flipY: this.flipY,\n                opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),\n                shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,\n                visible: this.visible,\n                backgroundColor: this.backgroundColor,\n                fillRule: this.fillRule,\n                paintFirst: this.paintFirst,\n                globalCompositeOperation: this.globalCompositeOperation,\n                skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),\n                skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS)\n            };\n            if (this.clipPath && !this.clipPath.excludeFromExport) {\n                object.clipPath = this.clipPath.toObject(propertiesToInclude);\n                object.clipPath.inverted = this.clipPath.inverted;\n                object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;\n            }\n            fabric.util.populateWithProperties(this, object, propertiesToInclude);\n            if (!this.includeDefaultValues) {\n                object = this._removeDefaultValues(object);\n            }\n            return object;\n        },\n        /**\r\n     * Returns (dataless) object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */ toDatalessObject: function(propertiesToInclude) {\n            // will be overwritten by subclasses\n            return this.toObject(propertiesToInclude);\n        },\n        /**\r\n     * @private\r\n     * @param {Object} object\r\n     */ _removeDefaultValues: function(object) {\n            var prototype = fabric.util.getKlass(object.type).prototype, stateProperties = prototype.stateProperties;\n            stateProperties.forEach(function(prop) {\n                if (prop === \"left\" || prop === \"top\") {\n                    return;\n                }\n                if (object[prop] === prototype[prop]) {\n                    delete object[prop];\n                }\n                // basically a check for [] === []\n                if (Array.isArray(object[prop]) && Array.isArray(prototype[prop]) && object[prop].length === 0 && prototype[prop].length === 0) {\n                    delete object[prop];\n                }\n            });\n            return object;\n        },\n        /**\r\n     * Returns a string representation of an instance\r\n     * @return {String}\r\n     */ toString: function() {\n            return \"#<fabric.\" + capitalize(this.type) + \">\";\n        },\n        /**\r\n     * Return the object scale factor counting also the group scaling\r\n     * @return {Object} object with scaleX and scaleY properties\r\n     */ getObjectScaling: function() {\n            // if the object is a top level one, on the canvas, we go for simple aritmetic\n            // otherwise the complex method with angles will return approximations and decimals\n            // and will likely kill the cache when not needed\n            // https://github.com/fabricjs/fabric.js/issues/7157\n            if (!this.group) {\n                return {\n                    scaleX: this.scaleX,\n                    scaleY: this.scaleY\n                };\n            }\n            // if we are inside a group total zoom calculation is complex, we defer to generic matrices\n            var options = fabric.util.qrDecompose(this.calcTransformMatrix());\n            return {\n                scaleX: Math.abs(options.scaleX),\n                scaleY: Math.abs(options.scaleY)\n            };\n        },\n        /**\r\n     * Return the object scale factor counting also the group scaling, zoom and retina\r\n     * @return {Object} object with scaleX and scaleY properties\r\n     */ getTotalObjectScaling: function() {\n            var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;\n            if (this.canvas) {\n                var zoom = this.canvas.getZoom();\n                var retina = this.canvas.getRetinaScaling();\n                scaleX *= zoom * retina;\n                scaleY *= zoom * retina;\n            }\n            return {\n                scaleX: scaleX,\n                scaleY: scaleY\n            };\n        },\n        /**\r\n     * Return the object opacity counting also the group property\r\n     * @return {Number}\r\n     */ getObjectOpacity: function() {\n            var opacity = this.opacity;\n            if (this.group) {\n                opacity *= this.group.getObjectOpacity();\n            }\n            return opacity;\n        },\n        /**\r\n     * @private\r\n     * @param {String} key\r\n     * @param {*} value\r\n     * @return {fabric.Object} thisArg\r\n     */ _set: function(key, value) {\n            var shouldConstrainValue = key === \"scaleX\" || key === \"scaleY\", isChanged = this[key] !== value, groupNeedsUpdate = false;\n            if (shouldConstrainValue) {\n                value = this._constrainScale(value);\n            }\n            if (key === \"scaleX\" && value < 0) {\n                this.flipX = !this.flipX;\n                value *= -1;\n            } else if (key === \"scaleY\" && value < 0) {\n                this.flipY = !this.flipY;\n                value *= -1;\n            } else if (key === \"shadow\" && value && !(value instanceof fabric.Shadow)) {\n                value = new fabric.Shadow(value);\n            } else if (key === \"dirty\" && this.group) {\n                this.group.set(\"dirty\", value);\n            }\n            this[key] = value;\n            if (isChanged) {\n                groupNeedsUpdate = this.group && this.group.isOnACache();\n                if (this.cacheProperties.indexOf(key) > -1) {\n                    this.dirty = true;\n                    groupNeedsUpdate && this.group.set(\"dirty\", true);\n                } else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {\n                    this.group.set(\"dirty\", true);\n                }\n            }\n            return this;\n        },\n        /**\r\n     * This callback function is called by the parent group of an object every\r\n     * time a non-delegated property changes on the group. It is passed the key\r\n     * and value as parameters. Not adding in this function's signature to avoid\r\n     * Travis build error about unused variables.\r\n     */ setOnGroup: function() {\n        // implemented by sub-classes, as needed.\n        },\n        /**\r\n     * Retrieves viewportTransform from Object's canvas if possible\r\n     * @method getViewportTransform\r\n     * @memberOf fabric.Object.prototype\r\n     * @return {Array}\r\n     */ getViewportTransform: function() {\n            if (this.canvas && this.canvas.viewportTransform) {\n                return this.canvas.viewportTransform;\n            }\n            return fabric.iMatrix.concat();\n        },\n        /*\r\n     * @private\r\n     * return if the object would be visible in rendering\r\n     * @memberOf fabric.Object.prototype\r\n     * @return {Boolean}\r\n     */ isNotVisible: function() {\n            return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;\n        },\n        /**\r\n     * Renders an object on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ render: function(ctx) {\n            // do not render if width/height are zeros or object is not visible\n            if (this.isNotVisible()) {\n                return;\n            }\n            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n                return;\n            }\n            ctx.save();\n            this._setupCompositeOperation(ctx);\n            this.drawSelectionBackground(ctx);\n            this.transform(ctx);\n            this._setOpacity(ctx);\n            this._setShadow(ctx, this);\n            if (this.shouldCache()) {\n                this.renderCache();\n                this.drawCacheOnCanvas(ctx);\n            } else {\n                this._removeCacheCanvas();\n                this.dirty = false;\n                this.drawObject(ctx);\n                if (this.objectCaching && this.statefullCache) {\n                    this.saveState({\n                        propertySet: \"cacheProperties\"\n                    });\n                }\n            }\n            ctx.restore();\n        },\n        renderCache: function(options) {\n            options = options || {};\n            if (!this._cacheCanvas || !this._cacheContext) {\n                this._createCacheCanvas();\n            }\n            if (this.isCacheDirty()) {\n                this.statefullCache && this.saveState({\n                    propertySet: \"cacheProperties\"\n                });\n                this.drawObject(this._cacheContext, options.forClipping);\n                this.dirty = false;\n            }\n        },\n        /**\r\n     * Remove cacheCanvas and its dimensions from the objects\r\n     */ _removeCacheCanvas: function() {\n            this._cacheCanvas = null;\n            this._cacheContext = null;\n            this.cacheWidth = 0;\n            this.cacheHeight = 0;\n        },\n        /**\r\n     * return true if the object will draw a stroke\r\n     * Does not consider text styles. This is just a shortcut used at rendering time\r\n     * We want it to be an approximation and be fast.\r\n     * wrote to avoid extra caching, it has to return true when stroke happens,\r\n     * can guess when it will not happen at 100% chance, does not matter if it misses\r\n     * some use case where the stroke is invisible.\r\n     * @since 3.0.0\r\n     * @returns Boolean\r\n     */ hasStroke: function() {\n            return this.stroke && this.stroke !== \"transparent\" && this.strokeWidth !== 0;\n        },\n        /**\r\n     * return true if the object will draw a fill\r\n     * Does not consider text styles. This is just a shortcut used at rendering time\r\n     * We want it to be an approximation and be fast.\r\n     * wrote to avoid extra caching, it has to return true when fill happens,\r\n     * can guess when it will not happen at 100% chance, does not matter if it misses\r\n     * some use case where the fill is invisible.\r\n     * @since 3.0.0\r\n     * @returns Boolean\r\n     */ hasFill: function() {\n            return this.fill && this.fill !== \"transparent\";\n        },\n        /**\r\n     * When set to `true`, force the object to have its own cache, even if it is inside a group\r\n     * it may be needed when your object behave in a particular way on the cache and always needs\r\n     * its own isolated canvas to render correctly.\r\n     * Created to be overridden\r\n     * since 1.7.12\r\n     * @returns Boolean\r\n     */ needsItsOwnCache: function() {\n            if (this.paintFirst === \"stroke\" && this.hasFill() && this.hasStroke() && typeof this.shadow === \"object\") {\n                return true;\n            }\n            if (this.clipPath) {\n                return true;\n            }\n            return false;\n        },\n        /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * objectCaching is a global flag, wins over everything\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group outside is cached.\r\n     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.\r\n     * @return {Boolean}\r\n     */ shouldCache: function() {\n            this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache());\n            return this.ownCaching;\n        },\n        /**\r\n     * Check if this object or a child object will cast a shadow\r\n     * used by Group.shouldCache to know if child has a shadow recursively\r\n     * @return {Boolean}\r\n     */ willDrawShadow: function() {\n            return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);\n        },\n        /**\r\n     * Execute the drawing operation for an object clipPath\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {fabric.Object} clipPath\r\n     */ drawClipPathOnCache: function(ctx, clipPath) {\n            ctx.save();\n            // DEBUG: uncomment this line, comment the following\n            // ctx.globalAlpha = 0.4\n            if (clipPath.inverted) {\n                ctx.globalCompositeOperation = \"destination-out\";\n            } else {\n                ctx.globalCompositeOperation = \"destination-in\";\n            }\n            //ctx.scale(1 / 2, 1 / 2);\n            if (clipPath.absolutePositioned) {\n                var m = fabric.util.invertTransform(this.calcTransformMatrix());\n                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);\n            }\n            clipPath.transform(ctx);\n            ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);\n            ctx.drawImage(clipPath._cacheCanvas, -clipPath.cacheTranslationX, -clipPath.cacheTranslationY);\n            ctx.restore();\n        },\n        /**\r\n     * Execute the drawing operation for an object on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ drawObject: function(ctx, forClipping) {\n            var originalFill = this.fill, originalStroke = this.stroke;\n            if (forClipping) {\n                this.fill = \"black\";\n                this.stroke = \"\";\n                this._setClippingProperties(ctx);\n            } else {\n                this._renderBackground(ctx);\n            }\n            this._render(ctx);\n            this._drawClipPath(ctx, this.clipPath);\n            this.fill = originalFill;\n            this.stroke = originalStroke;\n        },\n        /**\r\n     * Prepare clipPath state and cache and draw it on instance's cache\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {fabric.Object} clipPath\r\n     */ _drawClipPath: function(ctx, clipPath) {\n            if (!clipPath) {\n                return;\n            }\n            // needed to setup a couple of variables\n            // path canvas gets overridden with this one.\n            // TODO find a better solution?\n            clipPath.canvas = this.canvas;\n            clipPath.shouldCache();\n            clipPath._transformDone = true;\n            clipPath.renderCache({\n                forClipping: true\n            });\n            this.drawClipPathOnCache(ctx, clipPath);\n        },\n        /**\r\n     * Paint the cached copy of the object on the target context.\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ drawCacheOnCanvas: function(ctx) {\n            ctx.scale(1 / this.zoomX, 1 / this.zoomY);\n            ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);\n        },\n        /**\r\n     * Check if cache is dirty\r\n     * @param {Boolean} skipCanvas skip canvas checks because this object is painted\r\n     * on parent canvas.\r\n     */ isCacheDirty: function(skipCanvas) {\n            if (this.isNotVisible()) {\n                return false;\n            }\n            if (this._cacheCanvas && this._cacheContext && !skipCanvas && this._updateCacheCanvas()) {\n                // in this case the context is already cleared.\n                return true;\n            } else {\n                if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged(\"cacheProperties\")) {\n                    if (this._cacheCanvas && this._cacheContext && !skipCanvas) {\n                        var width = this.cacheWidth / this.zoomX;\n                        var height = this.cacheHeight / this.zoomY;\n                        this._cacheContext.clearRect(-width / 2, -height / 2, width, height);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\r\n     * Draws a background for the object big as its untransformed dimensions\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderBackground: function(ctx) {\n            if (!this.backgroundColor) {\n                return;\n            }\n            var dim = this._getNonTransformedDimensions();\n            ctx.fillStyle = this.backgroundColor;\n            ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);\n            // if there is background color no other shadows\n            // should be casted\n            this._removeShadow(ctx);\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _setOpacity: function(ctx) {\n            if (this.group && !this.group._transformDone) {\n                ctx.globalAlpha = this.getObjectOpacity();\n            } else {\n                ctx.globalAlpha *= this.opacity;\n            }\n        },\n        _setStrokeStyles: function(ctx, decl) {\n            var stroke = decl.stroke;\n            if (stroke) {\n                ctx.lineWidth = decl.strokeWidth;\n                ctx.lineCap = decl.strokeLineCap;\n                ctx.lineDashOffset = decl.strokeDashOffset;\n                ctx.lineJoin = decl.strokeLineJoin;\n                ctx.miterLimit = decl.strokeMiterLimit;\n                if (stroke.toLive) {\n                    if (stroke.gradientUnits === \"percentage\" || stroke.gradientTransform || stroke.patternTransform) {\n                        // need to transform gradient in a pattern.\n                        // this is a slow process. If you are hitting this codepath, and the object\n                        // is not using caching, you should consider switching it on.\n                        // we need a canvas as big as the current object caching canvas.\n                        this._applyPatternForTransformedGradient(ctx, stroke);\n                    } else {\n                        // is a simple gradient or pattern\n                        ctx.strokeStyle = stroke.toLive(ctx, this);\n                        this._applyPatternGradientTransform(ctx, stroke);\n                    }\n                } else {\n                    // is a color\n                    ctx.strokeStyle = decl.stroke;\n                }\n            }\n        },\n        _setFillStyles: function(ctx, decl) {\n            var fill = decl.fill;\n            if (fill) {\n                if (fill.toLive) {\n                    ctx.fillStyle = fill.toLive(ctx, this);\n                    this._applyPatternGradientTransform(ctx, decl.fill);\n                } else {\n                    ctx.fillStyle = fill;\n                }\n            }\n        },\n        _setClippingProperties: function(ctx) {\n            ctx.globalAlpha = 1;\n            ctx.strokeStyle = \"transparent\";\n            ctx.fillStyle = \"#000000\";\n        },\n        /**\r\n     * @private\r\n     * Sets line dash\r\n     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on\r\n     * @param {Array} dashArray array representing dashes\r\n     */ _setLineDash: function(ctx, dashArray) {\n            if (!dashArray || dashArray.length === 0) {\n                return;\n            }\n            // Spec requires the concatenation of two copies the dash list when the number of elements is odd\n            if (1 & dashArray.length) {\n                dashArray.push.apply(dashArray, dashArray);\n            }\n            ctx.setLineDash(dashArray);\n        },\n        /**\r\n     * Renders controls and borders for the object\r\n     * the context here is not transformed\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} [styleOverride] properties to override the object style\r\n     */ _renderControls: function(ctx, styleOverride) {\n            var vpt = this.getViewportTransform(), matrix = this.calcTransformMatrix(), options, drawBorders, drawControls;\n            styleOverride = styleOverride || {};\n            drawBorders = typeof styleOverride.hasBorders !== \"undefined\" ? styleOverride.hasBorders : this.hasBorders;\n            drawControls = typeof styleOverride.hasControls !== \"undefined\" ? styleOverride.hasControls : this.hasControls;\n            matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);\n            options = fabric.util.qrDecompose(matrix);\n            ctx.save();\n            ctx.translate(options.translateX, options.translateY);\n            ctx.lineWidth = 1 * this.borderScaleFactor;\n            if (!this.group) {\n                ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n            }\n            if (this.flipX) {\n                options.angle -= 180;\n            }\n            ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));\n            if (styleOverride.forActiveSelection || this.group) {\n                drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);\n            } else {\n                drawBorders && this.drawBorders(ctx, styleOverride);\n            }\n            drawControls && this.drawControls(ctx, styleOverride);\n            ctx.restore();\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _setShadow: function(ctx) {\n            if (!this.shadow) {\n                return;\n            }\n            var shadow = this.shadow, canvas = this.canvas, scaling, multX = canvas && canvas.viewportTransform[0] || 1, multY = canvas && canvas.viewportTransform[3] || 1;\n            if (shadow.nonScaling) {\n                scaling = {\n                    scaleX: 1,\n                    scaleY: 1\n                };\n            } else {\n                scaling = this.getObjectScaling();\n            }\n            if (canvas && canvas._isRetinaScaling()) {\n                multX *= fabric.devicePixelRatio;\n                multY *= fabric.devicePixelRatio;\n            }\n            ctx.shadowColor = shadow.color;\n            ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant * (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;\n            ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;\n            ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _removeShadow: function(ctx) {\n            if (!this.shadow) {\n                return;\n            }\n            ctx.shadowColor = \"\";\n            ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} filler fabric.Pattern or fabric.Gradient\r\n     * @return {Object} offset.offsetX offset for text rendering\r\n     * @return {Object} offset.offsetY offset for text rendering\r\n     */ _applyPatternGradientTransform: function(ctx, filler) {\n            if (!filler || !filler.toLive) {\n                return {\n                    offsetX: 0,\n                    offsetY: 0\n                };\n            }\n            var t = filler.gradientTransform || filler.patternTransform;\n            var offsetX = -this.width / 2 + filler.offsetX || 0, offsetY = -this.height / 2 + filler.offsetY || 0;\n            if (filler.gradientUnits === \"percentage\") {\n                ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);\n            } else {\n                ctx.transform(1, 0, 0, 1, offsetX, offsetY);\n            }\n            if (t) {\n                ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);\n            }\n            return {\n                offsetX: offsetX,\n                offsetY: offsetY\n            };\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderPaintInOrder: function(ctx) {\n            if (this.paintFirst === \"stroke\") {\n                this._renderStroke(ctx);\n                this._renderFill(ctx);\n            } else {\n                this._renderFill(ctx);\n                this._renderStroke(ctx);\n            }\n        },\n        /**\r\n     * @private\r\n     * function that actually render something on the context.\r\n     * empty here to allow Obects to work on tests to benchmark fabric functionalites\r\n     * not related to rendering\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _render: function() {},\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderFill: function(ctx) {\n            if (!this.fill) {\n                return;\n            }\n            ctx.save();\n            this._setFillStyles(ctx, this);\n            if (this.fillRule === \"evenodd\") {\n                ctx.fill(\"evenodd\");\n            } else {\n                ctx.fill();\n            }\n            ctx.restore();\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderStroke: function(ctx) {\n            if (!this.stroke || this.strokeWidth === 0) {\n                return;\n            }\n            if (this.shadow && !this.shadow.affectStroke) {\n                this._removeShadow(ctx);\n            }\n            ctx.save();\n            if (this.strokeUniform && this.group) {\n                var scaling = this.getObjectScaling();\n                ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);\n            } else if (this.strokeUniform) {\n                ctx.scale(1 / this.scaleX, 1 / this.scaleY);\n            }\n            this._setLineDash(ctx, this.strokeDashArray);\n            this._setStrokeStyles(ctx, this);\n            ctx.stroke();\n            ctx.restore();\n        },\n        /**\r\n     * This function try to patch the missing gradientTransform on canvas gradients.\r\n     * transforming a context to transform the gradient, is going to transform the stroke too.\r\n     * we want to transform the gradient but not the stroke operation, so we create\r\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\r\n     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size\r\n     * is limited.\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {fabric.Gradient} filler a fabric gradient instance\r\n     */ _applyPatternForTransformedGradient: function(ctx, filler) {\n            var dims = this._limitCacheSize(this._getCacheCanvasDimensions()), pCanvas = fabric.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(), width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;\n            pCanvas.width = width;\n            pCanvas.height = height;\n            pCtx = pCanvas.getContext(\"2d\");\n            pCtx.beginPath();\n            pCtx.moveTo(0, 0);\n            pCtx.lineTo(width, 0);\n            pCtx.lineTo(width, height);\n            pCtx.lineTo(0, height);\n            pCtx.closePath();\n            pCtx.translate(width / 2, height / 2);\n            pCtx.scale(dims.zoomX / this.scaleX / retinaScaling, dims.zoomY / this.scaleY / retinaScaling);\n            this._applyPatternGradientTransform(pCtx, filler);\n            pCtx.fillStyle = filler.toLive(ctx);\n            pCtx.fill();\n            ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);\n            ctx.scale(retinaScaling * this.scaleX / dims.zoomX, retinaScaling * this.scaleY / dims.zoomY);\n            ctx.strokeStyle = pCtx.createPattern(pCanvas, \"no-repeat\");\n        },\n        /**\r\n     * This function is an helper for svg import. it returns the center of the object in the svg\r\n     * untransformed coordinates\r\n     * @private\r\n     * @return {Object} center point from element coordinates\r\n     */ _findCenterFromElement: function() {\n            return {\n                x: this.left + this.width / 2,\n                y: this.top + this.height / 2\n            };\n        },\n        /**\r\n     * This function is an helper for svg import. it decompose the transformMatrix\r\n     * and assign properties to object.\r\n     * untransformed coordinates\r\n     * @private\r\n     * @chainable\r\n     */ _assignTransformMatrixProps: function() {\n            if (this.transformMatrix) {\n                var options = fabric.util.qrDecompose(this.transformMatrix);\n                this.flipX = false;\n                this.flipY = false;\n                this.set(\"scaleX\", options.scaleX);\n                this.set(\"scaleY\", options.scaleY);\n                this.angle = options.angle;\n                this.skewX = options.skewX;\n                this.skewY = 0;\n            }\n        },\n        /**\r\n     * This function is an helper for svg import. it removes the transform matrix\r\n     * and set to object properties that fabricjs can handle\r\n     * @private\r\n     * @param {Object} preserveAspectRatioOptions\r\n     * @return {thisArg}\r\n     */ _removeTransformMatrix: function(preserveAspectRatioOptions) {\n            var center = this._findCenterFromElement();\n            if (this.transformMatrix) {\n                this._assignTransformMatrixProps();\n                center = fabric.util.transformPoint(center, this.transformMatrix);\n            }\n            this.transformMatrix = null;\n            if (preserveAspectRatioOptions) {\n                this.scaleX *= preserveAspectRatioOptions.scaleX;\n                this.scaleY *= preserveAspectRatioOptions.scaleY;\n                this.cropX = preserveAspectRatioOptions.cropX;\n                this.cropY = preserveAspectRatioOptions.cropY;\n                center.x += preserveAspectRatioOptions.offsetLeft;\n                center.y += preserveAspectRatioOptions.offsetTop;\n                this.width = preserveAspectRatioOptions.width;\n                this.height = preserveAspectRatioOptions.height;\n            }\n            this.setPositionByOrigin(center, \"center\", \"center\");\n        },\n        /**\r\n     * Clones an instance, using a callback method will work for every object.\r\n     * @param {Function} callback Callback is invoked with a clone as a first argument\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     */ clone: function(callback, propertiesToInclude) {\n            var objectForm = this.toObject(propertiesToInclude);\n            if (this.constructor.fromObject) {\n                this.constructor.fromObject(objectForm, callback);\n            } else {\n                fabric.Object._fromObject(\"Object\", objectForm, callback);\n            }\n        },\n        /**\r\n     * Creates an instance of fabric.Image out of an object\r\n     * makes use of toCanvasElement.\r\n     * Once this method was based on toDataUrl and loadImage, so it also had a quality\r\n     * and format option. toCanvasElement is faster and produce no loss of quality.\r\n     * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.\r\n     * toCanvasElement and then toBlob from the obtained canvas is also a good option.\r\n     * This method is sync now, but still support the callback because we did not want to break.\r\n     * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.\r\n     * @param {Function} callback callback, invoked with an instance as a first argument\r\n     * @param {Object} [options] for clone as image, passed to toDataURL\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n     * @return {fabric.Object} thisArg\r\n     */ cloneAsImage: function(callback, options) {\n            var canvasEl = this.toCanvasElement(options);\n            if (callback) {\n                callback(new fabric.Image(canvasEl));\n            }\n            return this;\n        },\n        /**\r\n     * Converts an object into a HTMLCanvas element\r\n     * @param {Object} options Options object\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n     * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object\r\n     */ toCanvasElement: function(options) {\n            options || (options = {});\n            var utils = fabric.util, origParams = utils.saveObjectTransform(this), originalGroup = this.group, originalShadow = this.shadow, abs = Math.abs, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);\n            delete this.group;\n            if (options.withoutTransform) {\n                utils.resetObjectTransform(this);\n            }\n            if (options.withoutShadow) {\n                this.shadow = null;\n            }\n            var el = fabric.util.createCanvasElement(), // skip canvas zoom and calculate with setCoords now.\n            boundingRect = this.getBoundingRect(true, true), shadow = this.shadow, scaling, shadowOffset = {\n                x: 0,\n                y: 0\n            }, shadowBlur, width, height;\n            if (shadow) {\n                shadowBlur = shadow.blur;\n                if (shadow.nonScaling) {\n                    scaling = {\n                        scaleX: 1,\n                        scaleY: 1\n                    };\n                } else {\n                    scaling = this.getObjectScaling();\n                }\n                // consider non scaling shadow.\n                shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX);\n                shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY);\n            }\n            width = boundingRect.width + shadowOffset.x;\n            height = boundingRect.height + shadowOffset.y;\n            // if the current width/height is not an integer\n            // we need to make it so.\n            el.width = Math.ceil(width);\n            el.height = Math.ceil(height);\n            var canvas = new fabric.StaticCanvas(el, {\n                enableRetinaScaling: false,\n                renderOnAddRemove: false,\n                skipOffscreen: false\n            });\n            if (options.format === \"jpeg\") {\n                canvas.backgroundColor = \"#fff\";\n            }\n            this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), \"center\", \"center\");\n            var originalCanvas = this.canvas;\n            canvas.add(this);\n            var canvasEl = canvas.toCanvasElement(multiplier || 1, options);\n            this.shadow = originalShadow;\n            this.set(\"canvas\", originalCanvas);\n            if (originalGroup) {\n                this.group = originalGroup;\n            }\n            this.set(origParams).setCoords();\n            // canvas.dispose will call image.dispose that will nullify the elements\n            // since this canvas is a simple element for the process, we remove references\n            // to objects in this way in order to avoid object trashing.\n            canvas._objects = [];\n            canvas.dispose();\n            canvas = null;\n            return canvasEl;\n        },\n        /**\r\n     * Converts an object into a data-url-like string\r\n     * @param {Object} options Options object\r\n     * @param {String} [options.format=png] The format of the output image. Either \"jpeg\" or \"png\"\r\n     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.\r\n     * @param {Number} [options.multiplier=1] Multiplier to scale by\r\n     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14\r\n     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14\r\n     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14\r\n     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14\r\n     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4\r\n     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4\r\n     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2\r\n     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format\r\n     */ toDataURL: function(options) {\n            options || (options = {});\n            return fabric.util.toDataURL(this.toCanvasElement(options), options.format || \"png\", options.quality || 1);\n        },\n        /**\r\n     * Returns true if specified type is identical to the type of an instance\r\n     * @param {String} type Type to check against\r\n     * @return {Boolean}\r\n     */ isType: function(type) {\n            return arguments.length > 1 ? Array.from(arguments).includes(this.type) : this.type === type;\n        },\n        /**\r\n     * Returns complexity of an instance\r\n     * @return {Number} complexity of this instance (is 1 unless subclassed)\r\n     */ complexity: function() {\n            return 1;\n        },\n        /**\r\n     * Returns a JSON representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} JSON\r\n     */ toJSON: function(propertiesToInclude) {\n            // delegate, not alias\n            return this.toObject(propertiesToInclude);\n        },\n        /**\r\n     * Sets \"angle\" of an instance with centered rotation\r\n     * @param {Number} angle Angle value (in degrees)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ rotate: function(angle) {\n            var shouldCenterOrigin = (this.originX !== \"center\" || this.originY !== \"center\") && this.centeredRotation;\n            if (shouldCenterOrigin) {\n                this._setOriginToCenter();\n            }\n            this.set(\"angle\", angle);\n            if (shouldCenterOrigin) {\n                this._resetOrigin();\n            }\n            return this;\n        },\n        /**\r\n     * Centers object horizontally on canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ centerH: function() {\n            this.canvas && this.canvas.centerObjectH(this);\n            return this;\n        },\n        /**\r\n     * Centers object horizontally on current viewport of canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ viewportCenterH: function() {\n            this.canvas && this.canvas.viewportCenterObjectH(this);\n            return this;\n        },\n        /**\r\n     * Centers object vertically on canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ centerV: function() {\n            this.canvas && this.canvas.centerObjectV(this);\n            return this;\n        },\n        /**\r\n     * Centers object vertically on current viewport of canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ viewportCenterV: function() {\n            this.canvas && this.canvas.viewportCenterObjectV(this);\n            return this;\n        },\n        /**\r\n     * Centers object vertically and horizontally on canvas to which is was added last\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ center: function() {\n            this.canvas && this.canvas.centerObject(this);\n            return this;\n        },\n        /**\r\n     * Centers object on current viewport of canvas to which it was added last.\r\n     * You might need to call `setCoords` on an object after centering, to update controls area.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ viewportCenter: function() {\n            this.canvas && this.canvas.viewportCenterObject(this);\n            return this;\n        },\n        /**\r\n     * Returns coordinates of a pointer relative to an object\r\n     * @param {Event} e Event to operate upon\r\n     * @param {Object} [pointer] Pointer to operate upon (instead of event)\r\n     * @return {Object} Coordinates of a pointer (x, y)\r\n     */ getLocalPointer: function(e, pointer) {\n            pointer = pointer || this.canvas.getPointer(e);\n            var pClicked = new fabric.Point(pointer.x, pointer.y), objectLeftTop = this._getLeftTopCoords();\n            if (this.angle) {\n                pClicked = fabric.util.rotatePoint(pClicked, objectLeftTop, degreesToRadians(-this.angle));\n            }\n            return {\n                x: pClicked.x - objectLeftTop.x,\n                y: pClicked.y - objectLeftTop.y\n            };\n        },\n        /**\r\n     * Sets canvas globalCompositeOperation for specific object\r\n     * custom composition operation for the particular object can be specified using globalCompositeOperation property\r\n     * @param {CanvasRenderingContext2D} ctx Rendering canvas context\r\n     */ _setupCompositeOperation: function(ctx) {\n            if (this.globalCompositeOperation) {\n                ctx.globalCompositeOperation = this.globalCompositeOperation;\n            }\n        },\n        /**\r\n     * cancel instance's running animations\r\n     * override if necessary to dispose artifacts such as `clipPath`\r\n     */ dispose: function() {\n            if (fabric.runningAnimations) {\n                fabric.runningAnimations.cancelByTarget(this);\n            }\n        }\n    });\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);\n    extend(fabric.Object.prototype, fabric.Observable);\n    /**\r\n   * Defines the number of fraction digits to use when serializing object values.\r\n   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.\r\n   * @static\r\n   * @memberOf fabric.Object\r\n   * @constant\r\n   * @type Number\r\n   */ fabric.Object.NUM_FRACTION_DIGITS = 2;\n    /**\r\n   * Defines which properties should be enlivened from the object passed to {@link fabric.Object._fromObject}\r\n   * @static\r\n   * @memberOf fabric.Object\r\n   * @constant\r\n   * @type string[]\r\n   */ fabric.Object.ENLIVEN_PROPS = [\n        \"clipPath\"\n    ];\n    fabric.Object._fromObject = function(className, object, callback, extraParam) {\n        var klass = fabric[className];\n        object = clone(object, true);\n        fabric.util.enlivenPatterns([\n            object.fill,\n            object.stroke\n        ], function(patterns) {\n            if (typeof patterns[0] !== \"undefined\") {\n                object.fill = patterns[0];\n            }\n            if (typeof patterns[1] !== \"undefined\") {\n                object.stroke = patterns[1];\n            }\n            fabric.util.enlivenObjectEnlivables(object, object, function() {\n                var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);\n                callback && callback(instance);\n            });\n        });\n    };\n    /**\r\n   * Unique id used internally when creating SVG elements\r\n   * @static\r\n   * @memberOf fabric.Object\r\n   * @type Number\r\n   */ fabric.Object.__uid = 0;\n})( true ? exports : 0);\n(function() {\n    var degreesToRadians = fabric.util.degreesToRadians, originXOffset = {\n        left: -0.5,\n        center: 0,\n        right: 0.5\n    }, originYOffset = {\n        top: -0.5,\n        center: 0,\n        bottom: 0.5\n    };\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\r\n     * Translates the coordinates from a set of origin to another (based on the object's dimensions)\r\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */ translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {\n            var x = point.x, y = point.y, offsetX, offsetY, dim;\n            if (typeof fromOriginX === \"string\") {\n                fromOriginX = originXOffset[fromOriginX];\n            } else {\n                fromOriginX -= 0.5;\n            }\n            if (typeof toOriginX === \"string\") {\n                toOriginX = originXOffset[toOriginX];\n            } else {\n                toOriginX -= 0.5;\n            }\n            offsetX = toOriginX - fromOriginX;\n            if (typeof fromOriginY === \"string\") {\n                fromOriginY = originYOffset[fromOriginY];\n            } else {\n                fromOriginY -= 0.5;\n            }\n            if (typeof toOriginY === \"string\") {\n                toOriginY = originYOffset[toOriginY];\n            } else {\n                toOriginY -= 0.5;\n            }\n            offsetY = toOriginY - fromOriginY;\n            if (offsetX || offsetY) {\n                dim = this._getTransformedDimensions();\n                x = point.x + offsetX * dim.x;\n                y = point.y + offsetY * dim.y;\n            }\n            return new fabric.Point(x, y);\n        },\n        /**\r\n     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)\r\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */ translateToCenterPoint: function(point, originX, originY) {\n            var p = this.translateToGivenOrigin(point, originX, originY, \"center\", \"center\");\n            if (this.angle) {\n                return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));\n            }\n            return p;\n        },\n        /**\r\n     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)\r\n     * @param {fabric.Point} center The point which corresponds to center of the object\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */ translateToOriginPoint: function(center, originX, originY) {\n            var p = this.translateToGivenOrigin(center, \"center\", \"center\", originX, originY);\n            if (this.angle) {\n                return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));\n            }\n            return p;\n        },\n        /**\r\n     * Returns the real center coordinates of the object\r\n     * @return {fabric.Point}\r\n     */ getCenterPoint: function() {\n            var leftTop = new fabric.Point(this.left, this.top);\n            return this.translateToCenterPoint(leftTop, this.originX, this.originY);\n        },\n        /**\r\n     * Returns the coordinates of the object based on center coordinates\r\n     * @param {fabric.Point} point The point which corresponds to the originX and originY params\r\n     * @return {fabric.Point}\r\n     */ // getOriginPoint: function(center) {\n        //   return this.translateToOriginPoint(center, this.originX, this.originY);\n        // },\n        /**\r\n     * Returns the coordinates of the object as if it has a different origin\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */ getPointByOrigin: function(originX, originY) {\n            var center = this.getCenterPoint();\n            return this.translateToOriginPoint(center, originX, originY);\n        },\n        /**\r\n     * Returns the point in local coordinates\r\n     * @param {fabric.Point} point The point relative to the global coordinate system\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {fabric.Point}\r\n     */ toLocalPoint: function(point, originX, originY) {\n            var center = this.getCenterPoint(), p, p2;\n            if (typeof originX !== \"undefined\" && typeof originY !== \"undefined\") {\n                p = this.translateToGivenOrigin(center, \"center\", \"center\", originX, originY);\n            } else {\n                p = new fabric.Point(this.left, this.top);\n            }\n            p2 = new fabric.Point(point.x, point.y);\n            if (this.angle) {\n                p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));\n            }\n            return p2.subtractEquals(p);\n        },\n        /**\r\n     * Returns the point in global coordinates\r\n     * @param {fabric.Point} The point relative to the local coordinate system\r\n     * @return {fabric.Point}\r\n     */ // toGlobalPoint: function(point) {\n        //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));\n        // },\n        /**\r\n     * Sets the position of the object taking into consideration the object's origin\r\n     * @param {fabric.Point} pos The new position of the object\r\n     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'\r\n     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'\r\n     * @return {void}\r\n     */ setPositionByOrigin: function(pos, originX, originY) {\n            var center = this.translateToCenterPoint(pos, originX, originY), position = this.translateToOriginPoint(center, this.originX, this.originY);\n            this.set(\"left\", position.x);\n            this.set(\"top\", position.y);\n        },\n        /**\r\n     * @param {String} to One of 'left', 'center', 'right'\r\n     */ adjustPosition: function(to) {\n            var angle = degreesToRadians(this.angle), hypotFull = this.getScaledWidth(), xFull = fabric.util.cos(angle) * hypotFull, yFull = fabric.util.sin(angle) * hypotFull, offsetFrom, offsetTo;\n            //TODO: this function does not consider mixed situation like top, center.\n            if (typeof this.originX === \"string\") {\n                offsetFrom = originXOffset[this.originX];\n            } else {\n                offsetFrom = this.originX - 0.5;\n            }\n            if (typeof to === \"string\") {\n                offsetTo = originXOffset[to];\n            } else {\n                offsetTo = to - 0.5;\n            }\n            this.left += xFull * (offsetTo - offsetFrom);\n            this.top += yFull * (offsetTo - offsetFrom);\n            this.setCoords();\n            this.originX = to;\n        },\n        /**\r\n     * Sets the origin/position of the object to it's center point\r\n     * @private\r\n     * @return {void}\r\n     */ _setOriginToCenter: function() {\n            this._originalOriginX = this.originX;\n            this._originalOriginY = this.originY;\n            var center = this.getCenterPoint();\n            this.originX = \"center\";\n            this.originY = \"center\";\n            this.left = center.x;\n            this.top = center.y;\n        },\n        /**\r\n     * Resets the origin/position of the object to it's original origin\r\n     * @private\r\n     * @return {void}\r\n     */ _resetOrigin: function() {\n            var originPoint = this.translateToOriginPoint(this.getCenterPoint(), this._originalOriginX, this._originalOriginY);\n            this.originX = this._originalOriginX;\n            this.originY = this._originalOriginY;\n            this.left = originPoint.x;\n            this.top = originPoint.y;\n            this._originalOriginX = null;\n            this._originalOriginY = null;\n        },\n        /**\r\n     * @private\r\n     */ _getLeftTopCoords: function() {\n            return this.translateToOriginPoint(this.getCenterPoint(), \"left\", \"top\");\n        }\n    });\n})();\n(function() {\n    function arrayFromCoords(coords) {\n        return [\n            new fabric.Point(coords.tl.x, coords.tl.y),\n            new fabric.Point(coords.tr.x, coords.tr.y),\n            new fabric.Point(coords.br.x, coords.br.y),\n            new fabric.Point(coords.bl.x, coords.bl.y)\n        ];\n    }\n    var util = fabric.util, degreesToRadians = util.degreesToRadians, multiplyMatrices = util.multiplyTransformMatrices, transformPoint = util.transformPoint;\n    util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\r\n     * Describe object's corner position in canvas element coordinates.\r\n     * properties are depending on control keys and padding the main controls.\r\n     * each property is an object with x, y and corner.\r\n     * The `corner` property contains in a similar manner the 4 points of the\r\n     * interactive area of the corner.\r\n     * The coordinates depends from the controls positionHandler and are used\r\n     * to draw and locate controls\r\n     * @memberOf fabric.Object.prototype\r\n     */ oCoords: null,\n        /**\r\n     * Describe object's corner position in canvas object absolute coordinates\r\n     * properties are tl,tr,bl,br and describe the four main corner.\r\n     * each property is an object with x, y, instance of Fabric.Point.\r\n     * The coordinates depends from this properties: width, height, scaleX, scaleY\r\n     * skewX, skewY, angle, strokeWidth, top, left.\r\n     * Those coordinates are useful to understand where an object is. They get updated\r\n     * with oCoords but they do not need to be updated when zoom or panning change.\r\n     * The coordinates get updated with @method setCoords.\r\n     * You can calculate them without updating with @method calcACoords();\r\n     * @memberOf fabric.Object.prototype\r\n     */ aCoords: null,\n        /**\r\n     * Describe object's corner position in canvas element coordinates.\r\n     * includes padding. Used of object detection.\r\n     * set and refreshed with setCoords.\r\n     * @memberOf fabric.Object.prototype\r\n     */ lineCoords: null,\n        /**\r\n     * storage for object transform matrix\r\n     */ ownMatrixCache: null,\n        /**\r\n     * storage for object full transform matrix\r\n     */ matrixCache: null,\n        /**\r\n     * custom controls interface\r\n     * controls are added by default_controls.js\r\n     */ controls: {},\n        /**\r\n     * return correct set of coordinates for intersection\r\n     * this will return either aCoords or lineCoords.\r\n     * @param {Boolean} absolute will return aCoords if true or lineCoords\r\n     * @return {Object} {tl, tr, br, bl} points\r\n     */ _getCoords: function(absolute, calculate) {\n            if (calculate) {\n                return absolute ? this.calcACoords() : this.calcLineCoords();\n            }\n            if (!this.aCoords || !this.lineCoords) {\n                this.setCoords(true);\n            }\n            return absolute ? this.aCoords : this.lineCoords;\n        },\n        /**\r\n     * return correct set of coordinates for intersection\r\n     * this will return either aCoords or lineCoords.\r\n     * The coords are returned in an array.\r\n     * @return {Array} [tl, tr, br, bl] of points\r\n     */ getCoords: function(absolute, calculate) {\n            return arrayFromCoords(this._getCoords(absolute, calculate));\n        },\n        /**\r\n     * Checks if object intersects with an area formed by 2 points\r\n     * @param {Object} pointTL top-left point of area\r\n     * @param {Object} pointBR bottom-right point of area\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object intersects with an area formed by 2 points\r\n     */ intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {\n            var coords = this.getCoords(absolute, calculate), intersection = fabric.Intersection.intersectPolygonRectangle(coords, pointTL, pointBR);\n            return intersection.status === \"Intersection\";\n        },\n        /**\r\n     * Checks if object intersects with another object\r\n     * @param {Object} other Object to test\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object intersects with another object\r\n     */ intersectsWithObject: function(other, absolute, calculate) {\n            var intersection = fabric.Intersection.intersectPolygonPolygon(this.getCoords(absolute, calculate), other.getCoords(absolute, calculate));\n            return intersection.status === \"Intersection\" || other.isContainedWithinObject(this, absolute, calculate) || this.isContainedWithinObject(other, absolute, calculate);\n        },\n        /**\r\n     * Checks if object is fully contained within area of another object\r\n     * @param {Object} other Object to test\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object is fully contained within area of another object\r\n     */ isContainedWithinObject: function(other, absolute, calculate) {\n            var points = this.getCoords(absolute, calculate), otherCoords = absolute ? other.aCoords : other.lineCoords, i = 0, lines = other._getImageLines(otherCoords);\n            for(; i < 4; i++){\n                if (!other.containsPoint(points[i], lines)) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        /**\r\n     * Checks if object is fully contained within area formed by 2 points\r\n     * @param {Object} pointTL top-left point of area\r\n     * @param {Object} pointBR bottom-right point of area\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object is fully contained within area formed by 2 points\r\n     */ isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {\n            var boundingRect = this.getBoundingRect(absolute, calculate);\n            return boundingRect.left >= pointTL.x && boundingRect.left + boundingRect.width <= pointBR.x && boundingRect.top >= pointTL.y && boundingRect.top + boundingRect.height <= pointBR.y;\n        },\n        /**\r\n     * Checks if point is inside the object\r\n     * @param {fabric.Point} point Point to check against\r\n     * @param {Object} [lines] object returned from @method _getImageLines\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if point is inside the object\r\n     */ containsPoint: function(point, lines, absolute, calculate) {\n            var coords = this._getCoords(absolute, calculate), lines = lines || this._getImageLines(coords), xPoints = this._findCrossPoints(point, lines);\n            // if xPoints is odd then point is inside the object\n            return xPoints !== 0 && xPoints % 2 === 1;\n        },\n        /**\r\n     * Checks if object is contained within the canvas with current viewportTransform\r\n     * the check is done stopping at first point that appears on screen\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords\r\n     * @return {Boolean} true if object is fully or partially contained within canvas\r\n     */ isOnScreen: function(calculate) {\n            if (!this.canvas) {\n                return false;\n            }\n            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n            var points = this.getCoords(true, calculate);\n            // if some point is on screen, the object is on screen.\n            if (points.some(function(point) {\n                return point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y;\n            })) {\n                return true;\n            }\n            // no points on screen, check intersection with absolute coordinates\n            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n                return true;\n            }\n            return this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n        },\n        /**\r\n     * Checks if the object contains the midpoint between canvas extremities\r\n     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen\r\n     * @private\r\n     * @param {Fabric.Point} pointTL Top Left point\r\n     * @param {Fabric.Point} pointBR Top Right point\r\n     * @param {Boolean} calculate use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if the object contains the point\r\n     */ _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {\n            // worst case scenario the object is so big that contains the screen\n            var centerPoint = {\n                x: (pointTL.x + pointBR.x) / 2,\n                y: (pointTL.y + pointBR.y) / 2\n            };\n            if (this.containsPoint(centerPoint, null, true, calculate)) {\n                return true;\n            }\n            return false;\n        },\n        /**\r\n     * Checks if object is partially contained within the canvas with current viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords\r\n     * @return {Boolean} true if object is partially contained within canvas\r\n     */ isPartiallyOnScreen: function(calculate) {\n            if (!this.canvas) {\n                return false;\n            }\n            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;\n            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {\n                return true;\n            }\n            var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {\n                return (point.x >= pointBR.x || point.x <= pointTL.x) && (point.y >= pointBR.y || point.y <= pointTL.y);\n            });\n            return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);\n        },\n        /**\r\n     * Method that returns an object with the object edges in it, given the coordinates of the corners\r\n     * @private\r\n     * @param {Object} oCoords Coordinates of the object corners\r\n     */ _getImageLines: function(oCoords) {\n            var lines = {\n                topline: {\n                    o: oCoords.tl,\n                    d: oCoords.tr\n                },\n                rightline: {\n                    o: oCoords.tr,\n                    d: oCoords.br\n                },\n                bottomline: {\n                    o: oCoords.br,\n                    d: oCoords.bl\n                },\n                leftline: {\n                    o: oCoords.bl,\n                    d: oCoords.tl\n                }\n            };\n            // // debugging\n            // if (this.canvas.contextTop) {\n            //   this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n            //\n            //   this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n            //\n            //   this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n            //\n            //   this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n            //   this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n            // }\n            return lines;\n        },\n        /**\r\n     * Helper method to determine how many cross points are between the 4 object edges\r\n     * and the horizontal line determined by a point on canvas\r\n     * @private\r\n     * @param {fabric.Point} point Point to check\r\n     * @param {Object} lines Coordinates of the object being evaluated\r\n     */ // remove yi, not used but left code here just in case.\n        _findCrossPoints: function(point, lines) {\n            var b1, b2, a1, a2, xi, xcount = 0, iLine;\n            for(var lineKey in lines){\n                iLine = lines[lineKey];\n                // optimisation 1: line below point. no cross\n                if (iLine.o.y < point.y && iLine.d.y < point.y) {\n                    continue;\n                }\n                // optimisation 2: line above point. no cross\n                if (iLine.o.y >= point.y && iLine.d.y >= point.y) {\n                    continue;\n                }\n                // optimisation 3: vertical line case\n                if (iLine.o.x === iLine.d.x && iLine.o.x >= point.x) {\n                    xi = iLine.o.x;\n                // yi = point.y;\n                } else {\n                    b1 = 0;\n                    b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);\n                    a1 = point.y - b1 * point.x;\n                    a2 = iLine.o.y - b2 * iLine.o.x;\n                    xi = -(a1 - a2) / (b1 - b2);\n                // yi = a1 + b1 * xi;\n                }\n                // dont count xi < point.x cases\n                if (xi >= point.x) {\n                    xcount += 1;\n                }\n                // optimisation 4: specific for square images\n                if (xcount === 2) {\n                    break;\n                }\n            }\n            return xcount;\n        },\n        /**\r\n     * Returns coordinates of object's bounding rectangle (left, top, width, height)\r\n     * the box is intended as aligned to axis of canvas.\r\n     * @param {Boolean} [absolute] use coordinates without viewportTransform\r\n     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords\r\n     * @return {Object} Object with left, top, width, height properties\r\n     */ getBoundingRect: function(absolute, calculate) {\n            var coords = this.getCoords(absolute, calculate);\n            return util.makeBoundingBoxFromPoints(coords);\n        },\n        /**\r\n     * Returns width of an object's bounding box counting transformations\r\n     * before 2.0 it was named getWidth();\r\n     * @return {Number} width value\r\n     */ getScaledWidth: function() {\n            return this._getTransformedDimensions().x;\n        },\n        /**\r\n     * Returns height of an object bounding box counting transformations\r\n     * before 2.0 it was named getHeight();\r\n     * @return {Number} height value\r\n     */ getScaledHeight: function() {\n            return this._getTransformedDimensions().y;\n        },\n        /**\r\n     * Makes sure the scale is valid and modifies it if necessary\r\n     * @private\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */ _constrainScale: function(value) {\n            if (Math.abs(value) < this.minScaleLimit) {\n                if (value < 0) {\n                    return -this.minScaleLimit;\n                } else {\n                    return this.minScaleLimit;\n                }\n            } else if (value === 0) {\n                return 0.0001;\n            }\n            return value;\n        },\n        /**\r\n     * Scales an object (equally by x and y)\r\n     * @param {Number} value Scale factor\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ scale: function(value) {\n            this._set(\"scaleX\", value);\n            this._set(\"scaleY\", value);\n            return this.setCoords();\n        },\n        /**\r\n     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)\r\n     * @param {Number} value New width value\r\n     * @param {Boolean} absolute ignore viewport\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ scaleToWidth: function(value, absolute) {\n            // adjust to bounding rect factor so that rotated shapes would fit as well\n            var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();\n            return this.scale(value / this.width / boundingRectFactor);\n        },\n        /**\r\n     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)\r\n     * @param {Number} value New height value\r\n     * @param {Boolean} absolute ignore viewport\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ scaleToHeight: function(value, absolute) {\n            // adjust to bounding rect factor so that rotated shapes would fit as well\n            var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();\n            return this.scale(value / this.height / boundingRectFactor);\n        },\n        calcLineCoords: function() {\n            var vpt = this.getViewportTransform(), padding = this.padding, angle = degreesToRadians(this.angle), cos = util.cos(angle), sin = util.sin(angle), cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP, cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();\n            var lineCoords = {\n                tl: transformPoint(aCoords.tl, vpt),\n                tr: transformPoint(aCoords.tr, vpt),\n                bl: transformPoint(aCoords.bl, vpt),\n                br: transformPoint(aCoords.br, vpt)\n            };\n            if (padding) {\n                lineCoords.tl.x -= cosPMinusSinP;\n                lineCoords.tl.y -= cosPSinP;\n                lineCoords.tr.x += cosPSinP;\n                lineCoords.tr.y -= cosPMinusSinP;\n                lineCoords.bl.x -= cosPSinP;\n                lineCoords.bl.y += cosPMinusSinP;\n                lineCoords.br.x += cosPMinusSinP;\n                lineCoords.br.y += cosPSinP;\n            }\n            return lineCoords;\n        },\n        calcOCoords: function() {\n            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), vpt = this.getViewportTransform(), startMatrix = multiplyMatrices(vpt, translateMatrix), finalMatrix = multiplyMatrices(startMatrix, rotateMatrix), finalMatrix = multiplyMatrices(finalMatrix, [\n                1 / vpt[0],\n                0,\n                0,\n                1 / vpt[3],\n                0,\n                0\n            ]), dim = this._calculateCurrentDimensions(), coords = {};\n            this.forEachControl(function(control, key, fabricObject) {\n                coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);\n            });\n            // debug code\n            // var canvas = this.canvas;\n            // setTimeout(function() {\n            //   canvas.contextTop.clearRect(0, 0, 700, 700);\n            //   canvas.contextTop.fillStyle = 'green';\n            //   Object.keys(coords).forEach(function(key) {\n            //     var control = coords[key];\n            //     canvas.contextTop.fillRect(control.x, control.y, 3, 3);\n            //   });\n            // }, 50);\n            return coords;\n        },\n        calcACoords: function() {\n            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix), dim = this._getTransformedDimensions(), w = dim.x / 2, h = dim.y / 2;\n            return {\n                // corners\n                tl: transformPoint({\n                    x: -w,\n                    y: -h\n                }, finalMatrix),\n                tr: transformPoint({\n                    x: w,\n                    y: -h\n                }, finalMatrix),\n                bl: transformPoint({\n                    x: -w,\n                    y: h\n                }, finalMatrix),\n                br: transformPoint({\n                    x: w,\n                    y: h\n                }, finalMatrix)\n            };\n        },\n        /**\r\n     * Sets corner and controls position coordinates based on current angle, width and height, left and top.\r\n     * oCoords are used to find the corners\r\n     * aCoords are used to quickly find an object on the canvas\r\n     * lineCoords are used to quickly find object during pointer events.\r\n     * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}\r\n     *\r\n     * @param {Boolean} [skipCorners] skip calculation of oCoords.\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ setCoords: function(skipCorners) {\n            this.aCoords = this.calcACoords();\n            // in case we are in a group, for how the inner group target check works,\n            // lineCoords are exactly aCoords. Since the vpt gets absorbed by the normalized pointer.\n            this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();\n            if (skipCorners) {\n                return this;\n            }\n            // set coordinates of the draggable boxes in the corners used to scale/rotate the image\n            this.oCoords = this.calcOCoords();\n            this._setCornerCoords && this._setCornerCoords();\n            return this;\n        },\n        /**\r\n     * calculate rotation matrix of an object\r\n     * @return {Array} rotation matrix for the object\r\n     */ _calcRotateMatrix: function() {\n            return util.calcRotateMatrix(this);\n        },\n        /**\r\n     * calculate the translation matrix for an object transform\r\n     * @return {Array} rotation matrix for the object\r\n     */ _calcTranslateMatrix: function() {\n            var center = this.getCenterPoint();\n            return [\n                1,\n                0,\n                0,\n                1,\n                center.x,\n                center.y\n            ];\n        },\n        transformMatrixKey: function(skipGroup) {\n            var sep = \"_\", prefix = \"\";\n            if (!skipGroup && this.group) {\n                prefix = this.group.transformMatrixKey(skipGroup) + sep;\n            }\n            ;\n            return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY + sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY + sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;\n        },\n        /**\r\n     * calculate transform matrix that represents the current transformations from the\r\n     * object's properties.\r\n     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations\r\n     * There are some situation in which this is useful to avoid the fake rotation.\r\n     * @return {Array} transform matrix for the object\r\n     */ calcTransformMatrix: function(skipGroup) {\n            var matrix = this.calcOwnMatrix();\n            if (skipGroup || !this.group) {\n                return matrix;\n            }\n            var key = this.transformMatrixKey(skipGroup), cache = this.matrixCache || (this.matrixCache = {});\n            if (cache.key === key) {\n                return cache.value;\n            }\n            if (this.group) {\n                matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);\n            }\n            cache.key = key;\n            cache.value = matrix;\n            return matrix;\n        },\n        /**\r\n     * calculate transform matrix that represents the current transformations from the\r\n     * object's properties, this matrix does not include the group transformation\r\n     * @return {Array} transform matrix for the object\r\n     */ calcOwnMatrix: function() {\n            var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});\n            if (cache.key === key) {\n                return cache.value;\n            }\n            var tMatrix = this._calcTranslateMatrix(), options = {\n                angle: this.angle,\n                translateX: tMatrix[4],\n                translateY: tMatrix[5],\n                scaleX: this.scaleX,\n                scaleY: this.scaleY,\n                skewX: this.skewX,\n                skewY: this.skewY,\n                flipX: this.flipX,\n                flipY: this.flipY\n            };\n            cache.key = key;\n            cache.value = util.composeMatrix(options);\n            return cache.value;\n        },\n        /*\r\n     * Calculate object dimensions from its properties\r\n     * @private\r\n     * @return {Object} .x width dimension\r\n     * @return {Object} .y height dimension\r\n     */ _getNonTransformedDimensions: function() {\n            var strokeWidth = this.strokeWidth, w = this.width + strokeWidth, h = this.height + strokeWidth;\n            return {\n                x: w,\n                y: h\n            };\n        },\n        /*\r\n     * Calculate object bounding box dimensions from its properties scale, skew.\r\n     * @param {Number} skewX, a value to override current skewX\r\n     * @param {Number} skewY, a value to override current skewY\r\n     * @private\r\n     * @return {Object} .x width dimension\r\n     * @return {Object} .y height dimension\r\n     */ _getTransformedDimensions: function(skewX, skewY) {\n            if (typeof skewX === \"undefined\") {\n                skewX = this.skewX;\n            }\n            if (typeof skewY === \"undefined\") {\n                skewY = this.skewY;\n            }\n            var dimensions, dimX, dimY, noSkew = skewX === 0 && skewY === 0;\n            if (this.strokeUniform) {\n                dimX = this.width;\n                dimY = this.height;\n            } else {\n                dimensions = this._getNonTransformedDimensions();\n                dimX = dimensions.x;\n                dimY = dimensions.y;\n            }\n            if (noSkew) {\n                return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);\n            }\n            var bbox = util.sizeAfterTransform(dimX, dimY, {\n                scaleX: this.scaleX,\n                scaleY: this.scaleY,\n                skewX: skewX,\n                skewY: skewY\n            });\n            return this._finalizeDimensions(bbox.x, bbox.y);\n        },\n        /*\r\n     * Calculate object bounding box dimensions from its properties scale, skew.\r\n     * @param Number width width of the bbox\r\n     * @param Number height height of the bbox\r\n     * @private\r\n     * @return {Object} .x finalized width dimension\r\n     * @return {Object} .y finalized height dimension\r\n     */ _finalizeDimensions: function(width, height) {\n            return this.strokeUniform ? {\n                x: width + this.strokeWidth,\n                y: height + this.strokeWidth\n            } : {\n                x: width,\n                y: height\n            };\n        },\n        /*\r\n     * Calculate object dimensions for controls box, including padding and canvas zoom.\r\n     * and active selection\r\n     * private\r\n     */ _calculateCurrentDimensions: function() {\n            var vpt = this.getViewportTransform(), dim = this._getTransformedDimensions(), p = transformPoint(dim, vpt, true);\n            return p.scalarAdd(2 * this.padding);\n        }\n    });\n})();\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\r\n   * Moves an object to the bottom of the stack of drawn objects\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ sendToBack: function() {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);\n        } else if (this.canvas) {\n            this.canvas.sendToBack(this);\n        }\n        return this;\n    },\n    /**\r\n   * Moves an object to the top of the stack of drawn objects\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ bringToFront: function() {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);\n        } else if (this.canvas) {\n            this.canvas.bringToFront(this);\n        }\n        return this;\n    },\n    /**\r\n   * Moves an object down in stack of drawn objects\r\n   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ sendBackwards: function(intersecting) {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);\n        } else if (this.canvas) {\n            this.canvas.sendBackwards(this, intersecting);\n        }\n        return this;\n    },\n    /**\r\n   * Moves an object up in stack of drawn objects\r\n   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ bringForward: function(intersecting) {\n        if (this.group) {\n            fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);\n        } else if (this.canvas) {\n            this.canvas.bringForward(this, intersecting);\n        }\n        return this;\n    },\n    /**\r\n   * Moves an object to specified level in stack of drawn objects\r\n   * @param {Number} index New position of object\r\n   * @return {fabric.Object} thisArg\r\n   * @chainable\r\n   */ moveTo: function(index) {\n        if (this.group && this.group.type !== \"activeSelection\") {\n            fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);\n        } else if (this.canvas) {\n            this.canvas.moveTo(this, index);\n        }\n        return this;\n    }\n});\n(function() {\n    var extend = fabric.util.object.extend, originalSet = \"stateProperties\";\n    /*\r\n    Depends on `stateProperties`\r\n  */ function saveProps(origin, destination, props) {\n        var tmpObj = {}, deep = true;\n        props.forEach(function(prop) {\n            tmpObj[prop] = origin[prop];\n        });\n        extend(origin[destination], tmpObj, deep);\n    }\n    function _isEqual(origValue, currentValue, firstPass) {\n        if (origValue === currentValue) {\n            // if the objects are identical, return\n            return true;\n        } else if (Array.isArray(origValue)) {\n            if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {\n                return false;\n            }\n            for(var i = 0, len = origValue.length; i < len; i++){\n                if (!_isEqual(origValue[i], currentValue[i])) {\n                    return false;\n                }\n            }\n            return true;\n        } else if (origValue && typeof origValue === \"object\") {\n            var keys = Object.keys(origValue), key;\n            if (!currentValue || typeof currentValue !== \"object\" || !firstPass && keys.length !== Object.keys(currentValue).length) {\n                return false;\n            }\n            for(var i = 0, len = keys.length; i < len; i++){\n                key = keys[i];\n                // since clipPath is in the statefull cache list and the clipPath objects\n                // would be iterated as an object, this would lead to possible infinite recursion\n                // we do not want to compare those.\n                if (key === \"canvas\" || key === \"group\") {\n                    continue;\n                }\n                if (!_isEqual(origValue[key], currentValue[key])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\r\n     * Returns true if object state (one of its state properties) was changed\r\n     * @param {String} [propertySet] optional name for the set of property we want to save\r\n     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called\r\n     */ hasStateChanged: function(propertySet) {\n            propertySet = propertySet || originalSet;\n            var dashedPropertySet = \"_\" + propertySet;\n            if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {\n                return true;\n            }\n            return !_isEqual(this[dashedPropertySet], this, true);\n        },\n        /**\r\n     * Saves state of an object\r\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n     * @return {fabric.Object} thisArg\r\n     */ saveState: function(options) {\n            var propertySet = options && options.propertySet || originalSet, destination = \"_\" + propertySet;\n            if (!this[destination]) {\n                return this.setupState(options);\n            }\n            saveProps(this, destination, this[propertySet]);\n            if (options && options.stateProperties) {\n                saveProps(this, destination, options.stateProperties);\n            }\n            return this;\n        },\n        /**\r\n     * Setups state of an object\r\n     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state\r\n     * @return {fabric.Object} thisArg\r\n     */ setupState: function(options) {\n            options = options || {};\n            var propertySet = options.propertySet || originalSet;\n            options.propertySet = propertySet;\n            this[\"_\" + propertySet] = {};\n            this.saveState(options);\n            return this;\n        }\n    });\n})();\n(function() {\n    var degreesToRadians = fabric.util.degreesToRadians;\n    fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n        /**\r\n     * Determines which corner has been clicked\r\n     * @private\r\n     * @param {Object} pointer The pointer indicating the mouse position\r\n     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found\r\n     */ _findTargetCorner: function(pointer, forTouch) {\n            // objects in group, anykind, are not self modificable,\n            // must not return an hovered corner.\n            if (!this.hasControls || this.group || !this.canvas || this.canvas._activeObject !== this) {\n                return false;\n            }\n            var ex = pointer.x, ey = pointer.y, xPoints, lines, keys = Object.keys(this.oCoords), j = keys.length - 1, i;\n            this.__corner = 0;\n            // cycle in reverse order so we pick first the one on top\n            for(; j >= 0; j--){\n                i = keys[j];\n                if (!this.isControlVisible(i)) {\n                    continue;\n                }\n                lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);\n                // // debugging\n                //\n                // this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);\n                //\n                // this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);\n                //\n                // this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);\n                //\n                // this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);\n                // this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);\n                xPoints = this._findCrossPoints({\n                    x: ex,\n                    y: ey\n                }, lines);\n                if (xPoints !== 0 && xPoints % 2 === 1) {\n                    this.__corner = i;\n                    return i;\n                }\n            }\n            return false;\n        },\n        /**\r\n     * Calls a function for each control. The function gets called,\r\n     * with the control, the object that is calling the iterator and the control's key\r\n     * @param {Function} fn function to iterate over the controls over\r\n     */ forEachControl: function(fn) {\n            for(var i in this.controls){\n                fn(this.controls[i], i, this);\n            }\n            ;\n        },\n        /**\r\n     * Sets the coordinates of the draggable boxes in the corners of\r\n     * the image used to scale/rotate it.\r\n     * note: if we would switch to ROUND corner area, all of this would disappear.\r\n     * everything would resolve to a single point and a pythagorean theorem for the distance\r\n     * @private\r\n     */ _setCornerCoords: function() {\n            var coords = this.oCoords;\n            for(var control in coords){\n                var controlObject = this.controls[control];\n                coords[control].corner = controlObject.calcCornerCoords(this.angle, this.cornerSize, coords[control].x, coords[control].y, false);\n                coords[control].touchCorner = controlObject.calcCornerCoords(this.angle, this.touchCornerSize, coords[control].x, coords[control].y, true);\n            }\n        },\n        /**\r\n     * Draws a colored layer behind the object, inside its selection borders.\r\n     * Requires public options: padding, selectionBackgroundColor\r\n     * this function is called when the context is transformed\r\n     * has checks to be skipped when the object is on a staticCanvas\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ drawSelectionBackground: function(ctx) {\n            if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this) {\n                return this;\n            }\n            ctx.save();\n            var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(), vpt = this.canvas.viewportTransform;\n            ctx.translate(center.x, center.y);\n            ctx.scale(1 / vpt[0], 1 / vpt[3]);\n            ctx.rotate(degreesToRadians(this.angle));\n            ctx.fillStyle = this.selectionBackgroundColor;\n            ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);\n            ctx.restore();\n            return this;\n        },\n        /**\r\n     * Draws borders of an object's bounding box.\r\n     * Requires public properties: width, height\r\n     * Requires public options: padding, borderColor\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @param {Object} styleOverride object to override the object style\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ drawBorders: function(ctx, styleOverride) {\n            styleOverride = styleOverride || {};\n            var wh = this._calculateCurrentDimensions(), strokeWidth = this.borderScaleFactor, width = wh.x + strokeWidth, height = wh.y + strokeWidth, hasControls = typeof styleOverride.hasControls !== \"undefined\" ? styleOverride.hasControls : this.hasControls, shouldStroke = false;\n            ctx.save();\n            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\n            ctx.strokeRect(-width / 2, -height / 2, width, height);\n            if (hasControls) {\n                ctx.beginPath();\n                this.forEachControl(function(control, key, fabricObject) {\n                    // in this moment, the ctx is centered on the object.\n                    // width and height of the above function are the size of the bbox.\n                    if (control.withConnection && control.getVisibility(fabricObject, key)) {\n                        // reset movement for each control\n                        shouldStroke = true;\n                        ctx.moveTo(control.x * width, control.y * height);\n                        ctx.lineTo(control.x * width + control.offsetX, control.y * height + control.offsetY);\n                    }\n                });\n                if (shouldStroke) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n            return this;\n        },\n        /**\r\n     * Draws borders of an object's bounding box when it is inside a group.\r\n     * Requires public properties: width, height\r\n     * Requires public options: padding, borderColor\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @param {object} options object representing current object parameters\r\n     * @param {Object} styleOverride object to override the object style\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ drawBordersInGroup: function(ctx, options, styleOverride) {\n            styleOverride = styleOverride || {};\n            var bbox = fabric.util.sizeAfterTransform(this.width, this.height, options), strokeWidth = this.strokeWidth, strokeUniform = this.strokeUniform, borderScaleFactor = this.borderScaleFactor, width = bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor, height = bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;\n            ctx.save();\n            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);\n            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;\n            ctx.strokeRect(-width / 2, -height / 2, width, height);\n            ctx.restore();\n            return this;\n        },\n        /**\r\n     * Draws corners of an object's bounding box.\r\n     * Requires public properties: width, height\r\n     * Requires public options: cornerSize, padding\r\n     * @param {CanvasRenderingContext2D} ctx Context to draw on\r\n     * @param {Object} styleOverride object to override the object style\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ drawControls: function(ctx, styleOverride) {\n            styleOverride = styleOverride || {};\n            ctx.save();\n            var retinaScaling = this.canvas.getRetinaScaling(), matrix, p;\n            ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);\n            ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;\n            if (!this.transparentCorners) {\n                ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;\n            }\n            this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);\n            this.setCoords();\n            if (this.group) {\n                // fabricJS does not really support drawing controls inside groups,\n                // this piece of code here helps having at least the control in places.\n                // If an application needs to show some objects as selected because of some UI state\n                // can still call Object._renderControls() on any object they desire, independently of groups.\n                // using no padding, circular controls and hiding the rotating cursor is higly suggested,\n                matrix = this.group.calcTransformMatrix();\n            }\n            this.forEachControl(function(control, key, fabricObject) {\n                p = fabricObject.oCoords[key];\n                if (control.getVisibility(fabricObject, key)) {\n                    if (matrix) {\n                        p = fabric.util.transformPoint(p, matrix);\n                    }\n                    control.render(ctx, p.x, p.y, styleOverride, fabricObject);\n                }\n            });\n            ctx.restore();\n            return this;\n        },\n        /**\r\n     * Returns true if the specified control is visible, false otherwise.\r\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n     * @returns {Boolean} true if the specified control is visible, false otherwise\r\n     */ isControlVisible: function(controlKey) {\n            return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);\n        },\n        /**\r\n     * Sets the visibility of the specified control.\r\n     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.\r\n     * @param {Boolean} visible true to set the specified control visible, false otherwise\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ setControlVisible: function(controlKey, visible) {\n            if (!this._controlsVisibility) {\n                this._controlsVisibility = {};\n            }\n            this._controlsVisibility[controlKey] = visible;\n            return this;\n        },\n        /**\r\n     * Sets the visibility state of object controls.\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it\r\n     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it\r\n     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it\r\n     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it\r\n     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it\r\n     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it\r\n     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it\r\n     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it\r\n     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ setControlsVisibility: function(options) {\n            options || (options = {});\n            for(var p in options){\n                this.setControlVisible(p, options[p]);\n            }\n            return this;\n        },\n        /**\r\n     * This callback function is called every time _discardActiveObject or _setActiveObject\r\n     * try to to deselect this object. If the function returns true, the process is cancelled\r\n     * @param {Object} [options] options sent from the upper functions\r\n     * @param {Event} [options.e] event if the process is generated by an event\r\n     */ onDeselect: function() {\n        // implemented by sub-classes, as needed.\n        },\n        /**\r\n     * This callback function is called every time _discardActiveObject or _setActiveObject\r\n     * try to to select this object. If the function returns true, the process is cancelled\r\n     * @param {Object} [options] options sent from the upper functions\r\n     * @param {Event} [options.e] event if the process is generated by an event\r\n     */ onSelect: function() {\n        // implemented by sub-classes, as needed.\n        }\n    });\n})();\nfabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {\n    /**\r\n   * Animation duration (in ms) for fx* methods\r\n   * @type Number\r\n   * @default\r\n   */ FX_DURATION: 500,\n    /**\r\n   * Centers object horizontally with animation.\r\n   * @param {fabric.Object} object Object to center\r\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n   * @param {Function} [callbacks.onComplete] Invoked on completion\r\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n   * @return {fabric.AnimationContext} context\r\n   */ fxCenterObjectH: function(object, callbacks) {\n        callbacks = callbacks || {};\n        var empty = function() {}, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;\n        return fabric.util.animate({\n            target: this,\n            startValue: object.left,\n            endValue: this.getCenterPoint().x,\n            duration: this.FX_DURATION,\n            onChange: function(value) {\n                object.set(\"left\", value);\n                _this.requestRenderAll();\n                onChange();\n            },\n            onComplete: function() {\n                object.setCoords();\n                onComplete();\n            }\n        });\n    },\n    /**\r\n   * Centers object vertically with animation.\r\n   * @param {fabric.Object} object Object to center\r\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n   * @param {Function} [callbacks.onComplete] Invoked on completion\r\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n   * @return {fabric.AnimationContext} context\r\n   */ fxCenterObjectV: function(object, callbacks) {\n        callbacks = callbacks || {};\n        var empty = function() {}, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;\n        return fabric.util.animate({\n            target: this,\n            startValue: object.top,\n            endValue: this.getCenterPoint().y,\n            duration: this.FX_DURATION,\n            onChange: function(value) {\n                object.set(\"top\", value);\n                _this.requestRenderAll();\n                onChange();\n            },\n            onComplete: function() {\n                object.setCoords();\n                onComplete();\n            }\n        });\n    },\n    /**\r\n   * Same as `fabric.Canvas#remove` but animated\r\n   * @param {fabric.Object} object Object to remove\r\n   * @param {Object} [callbacks] Callbacks object with optional \"onComplete\" and/or \"onChange\" properties\r\n   * @param {Function} [callbacks.onComplete] Invoked on completion\r\n   * @param {Function} [callbacks.onChange] Invoked on every step of animation\r\n   * @return {fabric.AnimationContext} context\r\n   */ fxRemove: function(object, callbacks) {\n        callbacks = callbacks || {};\n        var empty = function() {}, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;\n        return fabric.util.animate({\n            target: this,\n            startValue: object.opacity,\n            endValue: 0,\n            duration: this.FX_DURATION,\n            onChange: function(value) {\n                object.set(\"opacity\", value);\n                _this.requestRenderAll();\n                onChange();\n            },\n            onComplete: function() {\n                _this.remove(object);\n                onComplete();\n            }\n        });\n    }\n});\nfabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {\n    /**\r\n   * Animates object's properties\r\n   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)\r\n   * @param {Number|Object} value Value to animate property to (if string was given first) or options object\r\n   * @return {fabric.Object} thisArg\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}\r\n   * @return {fabric.AnimationContext | fabric.AnimationContext[]} animation context (or an array if passed multiple properties)\r\n   *\r\n   * As object — multiple properties\r\n   *\r\n   * object.animate({ left: ..., top: ... });\r\n   * object.animate({ left: ..., top: ... }, { duration: ... });\r\n   *\r\n   * As string — one property\r\n   *\r\n   * object.animate('left', ...);\r\n   * object.animate('left', { duration: ... });\r\n   *\r\n   */ animate: function() {\n        if (arguments[0] && typeof arguments[0] === \"object\") {\n            var propsToAnimate = [], prop, skipCallbacks, out = [];\n            for(prop in arguments[0]){\n                propsToAnimate.push(prop);\n            }\n            for(var i = 0, len = propsToAnimate.length; i < len; i++){\n                prop = propsToAnimate[i];\n                skipCallbacks = i !== len - 1;\n                out.push(this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks));\n            }\n            return out;\n        } else {\n            return this._animate.apply(this, arguments);\n        }\n    },\n    /**\r\n   * @private\r\n   * @param {String} property Property to animate\r\n   * @param {String} to Value to animate to\r\n   * @param {Object} [options] Options object\r\n   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked\r\n   */ _animate: function(property, to, options, skipCallbacks) {\n        var _this = this, propPair;\n        to = to.toString();\n        if (!options) {\n            options = {};\n        } else {\n            options = fabric.util.object.clone(options);\n        }\n        if (~property.indexOf(\".\")) {\n            propPair = property.split(\".\");\n        }\n        var propIsColor = _this.colorProperties.indexOf(property) > -1 || propPair && _this.colorProperties.indexOf(propPair[1]) > -1;\n        var currentValue = propPair ? this.get(propPair[0])[propPair[1]] : this.get(property);\n        if (!(\"from\" in options)) {\n            options.from = currentValue;\n        }\n        if (!propIsColor) {\n            if (~to.indexOf(\"=\")) {\n                to = currentValue + parseFloat(to.replace(\"=\", \"\"));\n            } else {\n                to = parseFloat(to);\n            }\n        }\n        var _options = {\n            target: this,\n            startValue: options.from,\n            endValue: to,\n            byValue: options.by,\n            easing: options.easing,\n            duration: options.duration,\n            abort: options.abort && function(value, valueProgress, timeProgress) {\n                return options.abort.call(_this, value, valueProgress, timeProgress);\n            },\n            onChange: function(value, valueProgress, timeProgress) {\n                if (propPair) {\n                    _this[propPair[0]][propPair[1]] = value;\n                } else {\n                    _this.set(property, value);\n                }\n                if (skipCallbacks) {\n                    return;\n                }\n                options.onChange && options.onChange(value, valueProgress, timeProgress);\n            },\n            onComplete: function(value, valueProgress, timeProgress) {\n                if (skipCallbacks) {\n                    return;\n                }\n                _this.setCoords();\n                options.onComplete && options.onComplete(value, valueProgress, timeProgress);\n            }\n        };\n        if (propIsColor) {\n            return fabric.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);\n        } else {\n            return fabric.util.animate(_options);\n        }\n    }\n});\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend;\n    if (fabric.Rect) {\n        fabric.warn(\"fabric.Rect is already defined\");\n        return;\n    }\n    /**\r\n   * Rectangle class\r\n   * @class fabric.Rect\r\n   * @extends fabric.Object\r\n   * @return {fabric.Rect} thisArg\r\n   * @see {@link fabric.Rect#initialize} for constructor definition\r\n   */ fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {\n        /**\r\n     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */ stateProperties: fabric.Object.prototype.stateProperties.concat(\"rx\", \"ry\"),\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"rect\",\n        /**\r\n     * Horizontal border radius\r\n     * @type Number\r\n     * @default\r\n     */ rx: 0,\n        /**\r\n     * Vertical border radius\r\n     * @type Number\r\n     * @default\r\n     */ ry: 0,\n        cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"rx\", \"ry\"),\n        /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */ initialize: function(options) {\n            this.callSuper(\"initialize\", options);\n            this._initRxRy();\n        },\n        /**\r\n     * Initializes rx/ry attributes\r\n     * @private\r\n     */ _initRxRy: function() {\n            if (this.rx && !this.ry) {\n                this.ry = this.rx;\n            } else if (this.ry && !this.rx) {\n                this.rx = this.ry;\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _render: function(ctx) {\n            // 1x1 case (used in spray brush) optimization was removed because\n            // with caching and higher zoom level this makes more damage than help\n            var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0, ry = this.ry ? Math.min(this.ry, this.height / 2) : 0, w = this.width, h = this.height, x = -this.width / 2, y = -this.height / 2, isRounded = rx !== 0 || ry !== 0, /* \"magic number\" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */ k = 1 - 0.5522847498;\n            ctx.beginPath();\n            ctx.moveTo(x + rx, y);\n            ctx.lineTo(x + w - rx, y);\n            isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);\n            ctx.lineTo(x + w, y + h - ry);\n            isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);\n            ctx.lineTo(x + rx, y + h);\n            isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);\n            ctx.lineTo(x, y + ry);\n            isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);\n            ctx.closePath();\n            this._renderPaintInOrder(ctx);\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            return this.callSuper(\"toObject\", [\n                \"rx\",\n                \"ry\"\n            ].concat(propertiesToInclude));\n        }\n    });\n    /**\r\n   * Returns {@link fabric.Rect} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Rect\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created\r\n   */ fabric.Rect.fromObject = function(object, callback) {\n        return fabric.Object._fromObject(\"Rect\", object, callback);\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, min = fabric.util.array.min, max = fabric.util.array.max, toFixed = fabric.util.toFixed, projectStrokeOnPoints = fabric.util.projectStrokeOnPoints;\n    if (fabric.Polyline) {\n        fabric.warn(\"fabric.Polyline is already defined\");\n        return;\n    }\n    /**\r\n   * Polyline class\r\n   * @class fabric.Polyline\r\n   * @extends fabric.Object\r\n   * @see {@link fabric.Polyline#initialize} for constructor definition\r\n   */ fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"polyline\",\n        /**\r\n     * Points array\r\n     * @type Array\r\n     * @default\r\n     */ points: null,\n        /**\r\n     * WARNING: Feature in progress\r\n     * Calculate the exact bounding box taking in account strokeWidth on acute angles\r\n     * this will be turned to true by default on fabric 6.0\r\n     * maybe will be left in as an optimization since calculations may be slow\r\n     * @deprecated\r\n     * @type Boolean\r\n     * @default false\r\n     */ exactBoundingBox: false,\n        cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"points\"),\n        /**\r\n     * Constructor\r\n     * @param {Array} points Array of points (where each point is an object with x and y)\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Polyline} thisArg\r\n     * @example\r\n     * var poly = new fabric.Polyline([\r\n     *     { x: 10, y: 10 },\r\n     *     { x: 50, y: 30 },\r\n     *     { x: 40, y: 70 },\r\n     *     { x: 60, y: 50 },\r\n     *     { x: 100, y: 150 },\r\n     *     { x: 40, y: 100 }\r\n     *   ], {\r\n     *   stroke: 'red',\r\n     *   left: 100,\r\n     *   top: 100\r\n     * });\r\n     */ initialize: function(points, options) {\n            options = options || {};\n            this.points = points || [];\n            this.callSuper(\"initialize\", options);\n            this._setPositionDimensions(options);\n        },\n        /**\r\n     * @private\r\n     */ _projectStrokeOnPoints: function() {\n            return projectStrokeOnPoints(this.points, this, true);\n        },\n        _setPositionDimensions: function(options) {\n            var calcDim = this._calcDimensions(options), correctLeftTop, correctSize = this.exactBoundingBox ? this.strokeWidth : 0;\n            this.width = calcDim.width - correctSize;\n            this.height = calcDim.height - correctSize;\n            if (!options.fromSVG) {\n                correctLeftTop = this.translateToGivenOrigin({\n                    // this looks bad, but is one way to keep it optional for now.\n                    x: calcDim.left - this.strokeWidth / 2 + correctSize / 2,\n                    y: calcDim.top - this.strokeWidth / 2 + correctSize / 2\n                }, \"left\", \"top\", this.originX, this.originY);\n            }\n            if (typeof options.left === \"undefined\") {\n                this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;\n            }\n            if (typeof options.top === \"undefined\") {\n                this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;\n            }\n            this.pathOffset = {\n                x: calcDim.left + this.width / 2 + correctSize / 2,\n                y: calcDim.top + this.height / 2 + correctSize / 2\n            };\n        },\n        /**\r\n     * Calculate the polygon min and max point from points array,\r\n     * returning an object with left, top, width, height to measure the\r\n     * polygon size\r\n     * @return {Object} object.left X coordinate of the polygon leftmost point\r\n     * @return {Object} object.top Y coordinate of the polygon topmost point\r\n     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point\r\n     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point\r\n     * @private\r\n     */ _calcDimensions: function() {\n            var points = this.exactBoundingBox ? this._projectStrokeOnPoints() : this.points, minX = min(points, \"x\") || 0, minY = min(points, \"y\") || 0, maxX = max(points, \"x\") || 0, maxY = max(points, \"y\") || 0, width = maxX - minX, height = maxY - minY;\n            return {\n                left: minX,\n                top: minY,\n                width: width,\n                height: height\n            };\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            return extend(this.callSuper(\"toObject\", propertiesToInclude), {\n                points: this.points.concat()\n            });\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ commonRender: function(ctx) {\n            var point, len = this.points.length, x = this.pathOffset.x, y = this.pathOffset.y;\n            if (!len || isNaN(this.points[len - 1].y)) {\n                // do not draw if no points or odd points\n                // NaN comes from parseFloat of a empty string in parser\n                return false;\n            }\n            ctx.beginPath();\n            ctx.moveTo(this.points[0].x - x, this.points[0].y - y);\n            for(var i = 0; i < len; i++){\n                point = this.points[i];\n                ctx.lineTo(point.x - x, point.y - y);\n            }\n            return true;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _render: function(ctx) {\n            if (!this.commonRender(ctx)) {\n                return;\n            }\n            this._renderPaintInOrder(ctx);\n        },\n        /**\r\n     * Returns complexity of an instance\r\n     * @return {Number} complexity of this instance\r\n     */ complexity: function() {\n            return this.get(\"points\").length;\n        }\n    });\n    /**\r\n   * Returns fabric.Polyline instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Polyline\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n   */ fabric.Polyline.fromObject = function(object, callback) {\n        return fabric.Object._fromObject(\"Polyline\", object, callback, \"points\");\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), min = fabric.util.array.min, max = fabric.util.array.max, extend = fabric.util.object.extend, clone = fabric.util.object.clone, toFixed = fabric.util.toFixed;\n    if (fabric.Path) {\n        fabric.warn(\"fabric.Path is already defined\");\n        return;\n    }\n    /**\r\n   * Path class\r\n   * @class fabric.Path\r\n   * @extends fabric.Object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}\r\n   * @see {@link fabric.Path#initialize} for constructor definition\r\n   */ fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"path\",\n        /**\r\n     * Array of path points\r\n     * @type Array\r\n     * @default\r\n     */ path: null,\n        cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"path\", \"fillRule\"),\n        stateProperties: fabric.Object.prototype.stateProperties.concat(\"path\"),\n        /**\r\n     * Constructor\r\n     * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Path} thisArg\r\n     */ initialize: function(path, options) {\n            options = clone(options || {});\n            delete options.path;\n            this.callSuper(\"initialize\", options);\n            this._setPath(path || [], options);\n        },\n        /**\r\n    * @private\r\n    * @param {Array|String} path Path data (sequence of coordinates and corresponding \"command\" tokens)\r\n    * @param {Object} [options] Options object\r\n    */ _setPath: function(path, options) {\n            this.path = fabric.util.makePathSimpler(Array.isArray(path) ? path : fabric.util.parsePath(path));\n            fabric.Polyline.prototype._setPositionDimensions.call(this, options || {});\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx context to render path on\r\n     */ _renderPathCommands: function(ctx) {\n            var current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, controlX = 0, controlY = 0, l = -this.pathOffset.x, t = -this.pathOffset.y;\n            ctx.beginPath();\n            for(var i = 0, len = this.path.length; i < len; ++i){\n                current = this.path[i];\n                switch(current[0]){\n                    case \"L\":\n                        x = current[1];\n                        y = current[2];\n                        ctx.lineTo(x + l, y + t);\n                        break;\n                    case \"M\":\n                        x = current[1];\n                        y = current[2];\n                        subpathStartX = x;\n                        subpathStartY = y;\n                        ctx.moveTo(x + l, y + t);\n                        break;\n                    case \"C\":\n                        x = current[5];\n                        y = current[6];\n                        controlX = current[3];\n                        controlY = current[4];\n                        ctx.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);\n                        break;\n                    case \"Q\":\n                        ctx.quadraticCurveTo(current[1] + l, current[2] + t, current[3] + l, current[4] + t);\n                        x = current[3];\n                        y = current[4];\n                        controlX = current[1];\n                        controlY = current[2];\n                        break;\n                    case \"z\":\n                    case \"Z\":\n                        x = subpathStartX;\n                        y = subpathStartY;\n                        ctx.closePath();\n                        break;\n                }\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx context to render path on\r\n     */ _render: function(ctx) {\n            this._renderPathCommands(ctx);\n            this._renderPaintInOrder(ctx);\n        },\n        /**\r\n     * Returns string representation of an instance\r\n     * @return {String} string representation of an instance\r\n     */ toString: function() {\n            return \"#<fabric.Path (\" + this.complexity() + '): { \"top\": ' + this.top + ', \"left\": ' + this.left + \" }>\";\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            return extend(this.callSuper(\"toObject\", propertiesToInclude), {\n                path: this.path.map(function(item) {\n                    return item.slice();\n                })\n            });\n        },\n        /**\r\n     * Returns dataless object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toDatalessObject: function(propertiesToInclude) {\n            var o = this.toObject([\n                \"sourcePath\"\n            ].concat(propertiesToInclude));\n            if (o.sourcePath) {\n                delete o.path;\n            }\n            return o;\n        },\n        /**\r\n     * Returns number representation of an instance complexity\r\n     * @return {Number} complexity of this instance\r\n     */ complexity: function() {\n            return this.path.length;\n        },\n        /**\r\n     * @private\r\n     */ _calcDimensions: function() {\n            var aX = [], aY = [], current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, bounds;\n            for(var i = 0, len = this.path.length; i < len; ++i){\n                current = this.path[i];\n                switch(current[0]){\n                    case \"L\":\n                        x = current[1];\n                        y = current[2];\n                        bounds = [];\n                        break;\n                    case \"M\":\n                        x = current[1];\n                        y = current[2];\n                        subpathStartX = x;\n                        subpathStartY = y;\n                        bounds = [];\n                        break;\n                    case \"C\":\n                        bounds = fabric.util.getBoundsOfCurve(x, y, current[1], current[2], current[3], current[4], current[5], current[6]);\n                        x = current[5];\n                        y = current[6];\n                        break;\n                    case \"Q\":\n                        bounds = fabric.util.getBoundsOfCurve(x, y, current[1], current[2], current[1], current[2], current[3], current[4]);\n                        x = current[3];\n                        y = current[4];\n                        break;\n                    case \"z\":\n                    case \"Z\":\n                        x = subpathStartX;\n                        y = subpathStartY;\n                        break;\n                }\n                bounds.forEach(function(point) {\n                    aX.push(point.x);\n                    aY.push(point.y);\n                });\n                aX.push(x);\n                aY.push(y);\n            }\n            var minX = min(aX) || 0, minY = min(aY) || 0, maxX = max(aX) || 0, maxY = max(aY) || 0, deltaX = maxX - minX, deltaY = maxY - minY;\n            return {\n                left: minX,\n                top: minY,\n                width: deltaX,\n                height: deltaY\n            };\n        }\n    });\n    /**\r\n   * Creates an instance of fabric.Path from an object\r\n   * @static\r\n   * @memberOf fabric.Path\r\n   * @param {Object} object\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created\r\n   */ fabric.Path.fromObject = function(object, callback) {\n        if (typeof object.sourcePath === \"string\") {\n            var pathUrl = object.sourcePath;\n            fabric.loadSVGFromURL(pathUrl, function(elements) {\n                var path = elements[0];\n                path.setOptions(object);\n                callback && callback(path);\n            });\n        } else {\n            fabric.Object._fromObject(\"Path\", object, callback, \"path\");\n        }\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), min = fabric.util.array.min, max = fabric.util.array.max;\n    if (fabric.Group) {\n        return;\n    }\n    /**\r\n   * Group class\r\n   * @class fabric.Group\r\n   * @extends fabric.Object\r\n   * @mixes fabric.Collection\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n   * @see {@link fabric.Group#initialize} for constructor definition\r\n   */ fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"group\",\n        /**\r\n     * Width of stroke\r\n     * @type Number\r\n     * @default\r\n     */ strokeWidth: 0,\n        /**\r\n     * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets\r\n     * @type Boolean\r\n     * @default\r\n     */ subTargetCheck: false,\n        /**\r\n     * Groups are container, do not render anything on theyr own, ence no cache properties\r\n     * @type Array\r\n     * @default\r\n     */ cacheProperties: [],\n        /**\r\n     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still\r\n     * available setting this boolean to true.\r\n     * @type Boolean\r\n     * @since 2.0.0\r\n     * @default\r\n     */ useSetOnGroup: false,\n        /**\r\n     * Constructor\r\n     * @param {Object} objects Group objects\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.\r\n     * @return {Object} thisArg\r\n     */ initialize: function(objects, options, isAlreadyGrouped) {\n            options = options || {};\n            this._objects = [];\n            // if objects enclosed in a group have been grouped already,\n            // we cannot change properties of objects.\n            // Thus we need to set options to group without objects,\n            isAlreadyGrouped && this.callSuper(\"initialize\", options);\n            this._objects = objects || [];\n            for(var i = this._objects.length; i--;){\n                this._objects[i].group = this;\n            }\n            if (!isAlreadyGrouped) {\n                var center = options && options.centerPoint;\n                // we want to set origins before calculating the bounding box.\n                // so that the topleft can be set with that in mind.\n                // if specific top and left are passed, are overwritten later\n                // with the callSuper('initialize', options)\n                if (options.originX !== undefined) {\n                    this.originX = options.originX;\n                }\n                if (options.originY !== undefined) {\n                    this.originY = options.originY;\n                }\n                // if coming from svg i do not want to calc bounds.\n                // i assume width and height are passed along options\n                center || this._calcBounds();\n                this._updateObjectsCoords(center);\n                delete options.centerPoint;\n                this.callSuper(\"initialize\", options);\n            } else {\n                this._updateObjectsACoords();\n            }\n            this.setCoords();\n        },\n        /**\r\n     * @private\r\n     */ _updateObjectsACoords: function() {\n            var skipControls = true;\n            for(var i = this._objects.length; i--;){\n                this._objects[i].setCoords(skipControls);\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change\r\n     */ _updateObjectsCoords: function(center) {\n            var center = center || this.getCenterPoint();\n            for(var i = this._objects.length; i--;){\n                this._updateObjectCoords(this._objects[i], center);\n            }\n        },\n        /**\r\n     * @private\r\n     * @param {Object} object\r\n     * @param {fabric.Point} center, current center of group.\r\n     */ _updateObjectCoords: function(object, center) {\n            var objectLeft = object.left, objectTop = object.top, skipControls = true;\n            object.set({\n                left: objectLeft - center.x,\n                top: objectTop - center.y\n            });\n            object.group = this;\n            object.setCoords(skipControls);\n        },\n        /**\r\n     * Returns string represenation of a group\r\n     * @return {String}\r\n     */ toString: function() {\n            return \"#<fabric.Group: (\" + this.complexity() + \")>\";\n        },\n        /**\r\n     * Adds an object to a group; Then recalculates group's dimension, position.\r\n     * @param {Object} object\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */ addWithUpdate: function(object) {\n            var nested = !!this.group;\n            this._restoreObjectsState();\n            fabric.util.resetObjectTransform(this);\n            if (object) {\n                if (nested) {\n                    // if this group is inside another group, we need to pre transform the object\n                    fabric.util.removeTransformFromObject(object, this.group.calcTransformMatrix());\n                }\n                this._objects.push(object);\n                object.group = this;\n                object._set(\"canvas\", this.canvas);\n            }\n            this._calcBounds();\n            this._updateObjectsCoords();\n            this.dirty = true;\n            if (nested) {\n                this.group.addWithUpdate();\n            } else {\n                this.setCoords();\n            }\n            return this;\n        },\n        /**\r\n     * Removes an object from a group; Then recalculates group's dimension, position.\r\n     * @param {Object} object\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */ removeWithUpdate: function(object) {\n            this._restoreObjectsState();\n            fabric.util.resetObjectTransform(this);\n            this.remove(object);\n            this._calcBounds();\n            this._updateObjectsCoords();\n            this.setCoords();\n            this.dirty = true;\n            return this;\n        },\n        /**\r\n     * @private\r\n     */ _onObjectAdded: function(object) {\n            this.dirty = true;\n            object.group = this;\n            object._set(\"canvas\", this.canvas);\n        },\n        /**\r\n     * @private\r\n     */ _onObjectRemoved: function(object) {\n            this.dirty = true;\n            delete object.group;\n        },\n        /**\r\n     * @private\r\n     */ _set: function(key, value) {\n            var i = this._objects.length;\n            if (this.useSetOnGroup) {\n                while(i--){\n                    this._objects[i].setOnGroup(key, value);\n                }\n            }\n            if (key === \"canvas\") {\n                while(i--){\n                    this._objects[i]._set(key, value);\n                }\n            }\n            fabric.Object.prototype._set.call(this, key, value);\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            var _includeDefaultValues = this.includeDefaultValues;\n            var objsToObject = this._objects.filter(function(obj) {\n                return !obj.excludeFromExport;\n            }).map(function(obj) {\n                var originalDefaults = obj.includeDefaultValues;\n                obj.includeDefaultValues = _includeDefaultValues;\n                var _obj = obj.toObject(propertiesToInclude);\n                obj.includeDefaultValues = originalDefaults;\n                return _obj;\n            });\n            var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);\n            obj.objects = objsToObject;\n            return obj;\n        },\n        /**\r\n     * Returns object representation of an instance, in dataless mode.\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} object representation of an instance\r\n     */ toDatalessObject: function(propertiesToInclude) {\n            var objsToObject, sourcePath = this.sourcePath;\n            if (sourcePath) {\n                objsToObject = sourcePath;\n            } else {\n                var _includeDefaultValues = this.includeDefaultValues;\n                objsToObject = this._objects.map(function(obj) {\n                    var originalDefaults = obj.includeDefaultValues;\n                    obj.includeDefaultValues = _includeDefaultValues;\n                    var _obj = obj.toDatalessObject(propertiesToInclude);\n                    obj.includeDefaultValues = originalDefaults;\n                    return _obj;\n                });\n            }\n            var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);\n            obj.objects = objsToObject;\n            return obj;\n        },\n        /**\r\n     * Renders instance on a given context\r\n     * @param {CanvasRenderingContext2D} ctx context to render instance on\r\n     */ render: function(ctx) {\n            this._transformDone = true;\n            this.callSuper(\"render\", ctx);\n            this._transformDone = false;\n        },\n        /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group is already cached.\r\n     * @return {Boolean}\r\n     */ shouldCache: function() {\n            var ownCache = fabric.Object.prototype.shouldCache.call(this);\n            if (ownCache) {\n                for(var i = 0, len = this._objects.length; i < len; i++){\n                    if (this._objects[i].willDrawShadow()) {\n                        this.ownCaching = false;\n                        return false;\n                    }\n                }\n            }\n            return ownCache;\n        },\n        /**\r\n     * Check if this object or a child object will cast a shadow\r\n     * @return {Boolean}\r\n     */ willDrawShadow: function() {\n            if (fabric.Object.prototype.willDrawShadow.call(this)) {\n                return true;\n            }\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                if (this._objects[i].willDrawShadow()) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\r\n     * Check if this group or its parent group are caching, recursively up\r\n     * @return {Boolean}\r\n     */ isOnACache: function() {\n            return this.ownCaching || this.group && this.group.isOnACache();\n        },\n        /**\r\n     * Execute the drawing operation for an object on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ drawObject: function(ctx) {\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                this._objects[i].render(ctx);\n            }\n            this._drawClipPath(ctx, this.clipPath);\n        },\n        /**\r\n     * Check if cache is dirty\r\n     */ isCacheDirty: function(skipCanvas) {\n            if (this.callSuper(\"isCacheDirty\", skipCanvas)) {\n                return true;\n            }\n            if (!this.statefullCache) {\n                return false;\n            }\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                if (this._objects[i].isCacheDirty(true)) {\n                    if (this._cacheCanvas) {\n                        // if this group has not a cache canvas there is nothing to clean\n                        var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;\n                        this._cacheContext.clearRect(-x / 2, -y / 2, x, y);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        },\n        /**\r\n     * Restores original state of each of group objects (original state is that which was before group was created).\r\n     * if the nested boolean is true, the original state will be restored just for the\r\n     * first group and not for all the group chain\r\n     * @private\r\n     * @param {Boolean} nested tell the function to restore object state up to the parent group and not more\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */ _restoreObjectsState: function() {\n            var groupMatrix = this.calcOwnMatrix();\n            this._objects.forEach(function(object) {\n                // instead of using _this = this;\n                fabric.util.addTransformToObject(object, groupMatrix);\n                delete object.group;\n                object.setCoords();\n            });\n            return this;\n        },\n        /**\r\n     * Destroys a group (restoring state of its objects)\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */ destroy: function() {\n            // when group is destroyed objects needs to get a repaint to be eventually\n            // displayed on canvas.\n            this._objects.forEach(function(object) {\n                object.set(\"dirty\", true);\n            });\n            return this._restoreObjectsState();\n        },\n        dispose: function() {\n            this.callSuper(\"dispose\");\n            this.forEachObject(function(object) {\n                object.dispose && object.dispose();\n            });\n            this._objects = [];\n        },\n        /**\r\n     * make a group an active selection, remove the group from canvas\r\n     * the group has to be on canvas for this to work.\r\n     * @return {fabric.ActiveSelection} thisArg\r\n     * @chainable\r\n     */ toActiveSelection: function() {\n            if (!this.canvas) {\n                return;\n            }\n            var objects = this._objects, canvas = this.canvas;\n            this._objects = [];\n            var options = this.toObject();\n            delete options.objects;\n            var activeSelection = new fabric.ActiveSelection([]);\n            activeSelection.set(options);\n            activeSelection.type = \"activeSelection\";\n            canvas.remove(this);\n            objects.forEach(function(object) {\n                object.group = activeSelection;\n                object.dirty = true;\n                canvas.add(object);\n            });\n            activeSelection.canvas = canvas;\n            activeSelection._objects = objects;\n            canvas._activeObject = activeSelection;\n            activeSelection.setCoords();\n            return activeSelection;\n        },\n        /**\r\n     * Destroys a group (restoring state of its objects)\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */ ungroupOnCanvas: function() {\n            return this._restoreObjectsState();\n        },\n        /**\r\n     * Sets coordinates of all objects inside group\r\n     * @return {fabric.Group} thisArg\r\n     * @chainable\r\n     */ setObjectsCoords: function() {\n            var skipControls = true;\n            this.forEachObject(function(object) {\n                object.setCoords(skipControls);\n            });\n            return this;\n        },\n        /**\r\n     * @private\r\n     */ _calcBounds: function(onlyWidthHeight) {\n            var aX = [], aY = [], o, prop, coords, props = [\n                \"tr\",\n                \"br\",\n                \"bl\",\n                \"tl\"\n            ], i = 0, iLen = this._objects.length, j, jLen = props.length;\n            for(; i < iLen; ++i){\n                o = this._objects[i];\n                coords = o.calcACoords();\n                for(j = 0; j < jLen; j++){\n                    prop = props[j];\n                    aX.push(coords[prop].x);\n                    aY.push(coords[prop].y);\n                }\n                o.aCoords = coords;\n            }\n            this._getBounds(aX, aY, onlyWidthHeight);\n        },\n        /**\r\n     * @private\r\n     */ _getBounds: function(aX, aY, onlyWidthHeight) {\n            var minXY = new fabric.Point(min(aX), min(aY)), maxXY = new fabric.Point(max(aX), max(aY)), top = minXY.y || 0, left = minXY.x || 0, width = maxXY.x - minXY.x || 0, height = maxXY.y - minXY.y || 0;\n            this.width = width;\n            this.height = height;\n            if (!onlyWidthHeight) {\n                // the bounding box always finds the topleft most corner.\n                // whatever is the group origin, we set up here the left/top position.\n                this.setPositionByOrigin({\n                    x: left,\n                    y: top\n                }, \"left\", \"top\");\n            }\n        }\n    });\n    /**\r\n   * Returns {@link fabric.Group} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Group\r\n   * @param {Object} object Object to create a group from\r\n   * @param {Function} [callback] Callback to invoke when an group instance is created\r\n   */ fabric.Group.fromObject = function(object, callback) {\n        var objects = object.objects, options = fabric.util.object.clone(object, true);\n        delete options.objects;\n        if (typeof objects === \"string\") {\n            // it has to be an url or something went wrong.\n            fabric.loadSVGFromURL(objects, function(elements) {\n                var group = fabric.util.groupSVGElements(elements, object, objects);\n                group.set(options);\n                callback && callback(group);\n            });\n            return;\n        }\n        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n            var options = fabric.util.object.clone(object, true);\n            delete options.objects;\n            fabric.util.enlivenObjectEnlivables(object, options, function() {\n                callback && callback(new fabric.Group(enlivenedObjects, options, true));\n            });\n        });\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {});\n    if (fabric.ActiveSelection) {\n        return;\n    }\n    /**\r\n   * Group class\r\n   * @class fabric.ActiveSelection\r\n   * @extends fabric.Group\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}\r\n   * @see {@link fabric.ActiveSelection#initialize} for constructor definition\r\n   */ fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */ {\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"activeSelection\",\n        /**\r\n     * Constructor\r\n     * @param {Object} objects ActiveSelection objects\r\n     * @param {Object} [options] Options object\r\n     * @return {Object} thisArg\r\n     */ initialize: function(objects, options) {\n            options = options || {};\n            this._objects = objects || [];\n            for(var i = this._objects.length; i--;){\n                this._objects[i].group = this;\n            }\n            if (options.originX) {\n                this.originX = options.originX;\n            }\n            if (options.originY) {\n                this.originY = options.originY;\n            }\n            this._calcBounds();\n            this._updateObjectsCoords();\n            fabric.Object.prototype.initialize.call(this, options);\n            this.setCoords();\n        },\n        /**\r\n     * Change te activeSelection to a normal group,\r\n     * High level function that automatically adds it to canvas as\r\n     * active object. no events fired.\r\n     * @since 2.0.0\r\n     * @return {fabric.Group}\r\n     */ toGroup: function() {\n            var objects = this._objects.concat();\n            this._objects = [];\n            var options = fabric.Object.prototype.toObject.call(this);\n            var newGroup = new fabric.Group([]);\n            delete options.type;\n            newGroup.set(options);\n            objects.forEach(function(object) {\n                object.canvas.remove(object);\n                object.group = newGroup;\n            });\n            newGroup._objects = objects;\n            if (!this.canvas) {\n                return newGroup;\n            }\n            var canvas = this.canvas;\n            canvas.add(newGroup);\n            canvas._activeObject = newGroup;\n            newGroup.setCoords();\n            return newGroup;\n        },\n        /**\r\n     * If returns true, deselection is cancelled.\r\n     * @since 2.0.0\r\n     * @return {Boolean} [cancel]\r\n     */ onDeselect: function() {\n            this.destroy();\n            return false;\n        },\n        /**\r\n     * Returns string representation of a group\r\n     * @return {String}\r\n     */ toString: function() {\n            return \"#<fabric.ActiveSelection: (\" + this.complexity() + \")>\";\n        },\n        /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * objectCaching is a global flag, wins over everything\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group outside is cached.\r\n     * @return {Boolean}\r\n     */ shouldCache: function() {\n            return false;\n        },\n        /**\r\n     * Check if this group or its parent group are caching, recursively up\r\n     * @return {Boolean}\r\n     */ isOnACache: function() {\n            return false;\n        },\n        /**\r\n     * Renders controls and borders for the object\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} [styleOverride] properties to override the object style\r\n     * @param {Object} [childrenOverride] properties to override the children overrides\r\n     */ _renderControls: function(ctx, styleOverride, childrenOverride) {\n            ctx.save();\n            ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;\n            this.callSuper(\"_renderControls\", ctx, styleOverride);\n            childrenOverride = childrenOverride || {};\n            if (typeof childrenOverride.hasControls === \"undefined\") {\n                childrenOverride.hasControls = false;\n            }\n            childrenOverride.forActiveSelection = true;\n            for(var i = 0, len = this._objects.length; i < len; i++){\n                this._objects[i]._renderControls(ctx, childrenOverride);\n            }\n            ctx.restore();\n        }\n    });\n    /**\r\n   * Returns {@link fabric.ActiveSelection} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.ActiveSelection\r\n   * @param {Object} object Object to create a group from\r\n   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created\r\n   */ fabric.ActiveSelection.fromObject = function(object, callback) {\n        fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {\n            delete object.objects;\n            callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));\n        });\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var extend = fabric.util.object.extend;\n    if (!global.fabric) {\n        global.fabric = {};\n    }\n    if (global.fabric.Image) {\n        fabric.warn(\"fabric.Image is already defined.\");\n        return;\n    }\n    /**\r\n   * Image class\r\n   * @class fabric.Image\r\n   * @extends fabric.Object\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}\r\n   * @see {@link fabric.Image#initialize} for constructor definition\r\n   */ fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"image\",\n        /**\r\n     * Width of a stroke.\r\n     * For image quality a stroke multiple of 2 gives better results.\r\n     * @type Number\r\n     * @default\r\n     */ strokeWidth: 0,\n        /**\r\n     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.\r\n     * This allows for relative urls as image src.\r\n     * @since 2.7.0\r\n     * @type Boolean\r\n     * @default\r\n     */ srcFromAttribute: false,\n        /**\r\n     * private\r\n     * contains last value of scaleX to detect\r\n     * if the Image got resized after the last Render\r\n     * @type Number\r\n     */ _lastScaleX: 1,\n        /**\r\n     * private\r\n     * contains last value of scaleY to detect\r\n     * if the Image got resized after the last Render\r\n     * @type Number\r\n     */ _lastScaleY: 1,\n        /**\r\n     * private\r\n     * contains last value of scaling applied by the apply filter chain\r\n     * @type Number\r\n     */ _filterScalingX: 1,\n        /**\r\n     * private\r\n     * contains last value of scaling applied by the apply filter chain\r\n     * @type Number\r\n     */ _filterScalingY: 1,\n        /**\r\n     * minimum scale factor under which any resizeFilter is triggered to resize the image\r\n     * 0 will disable the automatic resize. 1 will trigger automatically always.\r\n     * number bigger than 1 are not implemented yet.\r\n     * @type Number\r\n     */ minimumScaleTrigger: 0.5,\n        /**\r\n     * List of properties to consider when checking if\r\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */ stateProperties: fabric.Object.prototype.stateProperties.concat(\"cropX\", \"cropY\"),\n        /**\r\n     * List of properties to consider when checking if cache needs refresh\r\n     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single\r\n     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty\r\n     * and refreshed at the next render\r\n     * @type Array\r\n     */ cacheProperties: fabric.Object.prototype.cacheProperties.concat(\"cropX\", \"cropY\"),\n        /**\r\n     * key used to retrieve the texture representing this image\r\n     * @since 2.0.0\r\n     * @type String\r\n     * @default\r\n     */ cacheKey: \"\",\n        /**\r\n     * Image crop in pixels from original image size.\r\n     * @since 2.0.0\r\n     * @type Number\r\n     * @default\r\n     */ cropX: 0,\n        /**\r\n     * Image crop in pixels from original image size.\r\n     * @since 2.0.0\r\n     * @type Number\r\n     * @default\r\n     */ cropY: 0,\n        /**\r\n     * Indicates whether this canvas will use image smoothing when painting this image.\r\n     * Also influence if the cacheCanvas for this image uses imageSmoothing\r\n     * @since 4.0.0-beta.11\r\n     * @type Boolean\r\n     * @default\r\n     */ imageSmoothing: true,\n        /**\r\n     * Constructor\r\n     * Image can be initialized with any canvas drawable or a string.\r\n     * The string should be a url and will be loaded as an image.\r\n     * Canvas and Image element work out of the box, while videos require extra code to work.\r\n     * Please check video element events for seeking.\r\n     * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element\r\n     * @param {Object} [options] Options object\r\n     * @param {function} [callback] callback function to call after eventual filters applied.\r\n     * @return {fabric.Image} thisArg\r\n     */ initialize: function(element, options) {\n            options || (options = {});\n            this.filters = [];\n            this.cacheKey = \"texture\" + fabric.Object.__uid++;\n            this.callSuper(\"initialize\", options);\n            this._initElement(element, options);\n        },\n        /**\r\n     * Returns image element which this instance if based on\r\n     * @return {HTMLImageElement} Image element\r\n     */ getElement: function() {\n            return this._element || {};\n        },\n        /**\r\n     * Sets image element for this instance to a specified one.\r\n     * If filters defined they are applied to new image.\r\n     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.\r\n     * @param {HTMLImageElement} element\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Image} thisArg\r\n     * @chainable\r\n     */ setElement: function(element, options) {\n            this.removeTexture(this.cacheKey);\n            this.removeTexture(this.cacheKey + \"_filtered\");\n            this._element = element;\n            this._originalElement = element;\n            this._initConfig(options);\n            if (this.filters.length !== 0) {\n                this.applyFilters();\n            }\n            // resizeFilters work on the already filtered copy.\n            // we need to apply resizeFilters AFTER normal filters.\n            // applyResizeFilters is run more often than normal filters\n            // and is triggered by user interactions rather than dev code\n            if (this.resizeFilter) {\n                this.applyResizeFilters();\n            }\n            return this;\n        },\n        /**\r\n     * Delete a single texture if in webgl mode\r\n     */ removeTexture: function(key) {\n            var backend = fabric.filterBackend;\n            if (backend && backend.evictCachesForKey) {\n                backend.evictCachesForKey(key);\n            }\n        },\n        /**\r\n     * Delete textures, reference to elements and eventually JSDOM cleanup\r\n     */ dispose: function() {\n            this.callSuper(\"dispose\");\n            this.removeTexture(this.cacheKey);\n            this.removeTexture(this.cacheKey + \"_filtered\");\n            this._cacheContext = undefined;\n            [\n                \"_originalElement\",\n                \"_element\",\n                \"_filteredEl\",\n                \"_cacheCanvas\"\n            ].forEach((function(element) {\n                fabric.util.cleanUpJsdomNode(this[element]);\n                this[element] = undefined;\n            }).bind(this));\n        },\n        /**\r\n     * Get the crossOrigin value (of the corresponding image element)\r\n     */ getCrossOrigin: function() {\n            return this._originalElement && (this._originalElement.crossOrigin || null);\n        },\n        /**\r\n     * Returns original size of an image\r\n     * @return {Object} Object with \"width\" and \"height\" properties\r\n     */ getOriginalSize: function() {\n            var element = this.getElement();\n            return {\n                width: element.naturalWidth || element.width,\n                height: element.naturalHeight || element.height\n            };\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _stroke: function(ctx) {\n            if (!this.stroke || this.strokeWidth === 0) {\n                return;\n            }\n            var w = this.width / 2, h = this.height / 2;\n            ctx.beginPath();\n            ctx.moveTo(-w, -h);\n            ctx.lineTo(w, -h);\n            ctx.lineTo(w, h);\n            ctx.lineTo(-w, h);\n            ctx.lineTo(-w, -h);\n            ctx.closePath();\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            var filters = [];\n            this.filters.forEach(function(filterObj) {\n                if (filterObj) {\n                    filters.push(filterObj.toObject());\n                }\n            });\n            var object = extend(this.callSuper(\"toObject\", [\n                \"cropX\",\n                \"cropY\"\n            ].concat(propertiesToInclude)), {\n                src: this.getSrc(),\n                crossOrigin: this.getCrossOrigin(),\n                filters: filters\n            });\n            if (this.resizeFilter) {\n                object.resizeFilter = this.resizeFilter.toObject();\n            }\n            return object;\n        },\n        /**\r\n     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.\r\n     * @return {Boolean}\r\n     */ hasCrop: function() {\n            return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;\n        },\n        /**\r\n     * Returns source of an image\r\n     * @param {Boolean} filtered indicates if the src is needed for svg\r\n     * @return {String} Source of an image\r\n     */ getSrc: function(filtered) {\n            var element = filtered ? this._element : this._originalElement;\n            if (element) {\n                if (element.toDataURL) {\n                    return element.toDataURL();\n                }\n                if (this.srcFromAttribute) {\n                    return element.getAttribute(\"src\");\n                } else {\n                    return element.src;\n                }\n            } else {\n                return this.src || \"\";\n            }\n        },\n        /**\r\n     * Sets source of an image\r\n     * @param {String} src Source string (URL)\r\n     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)\r\n     * @param {Object} [options] Options object\r\n     * @param {String} [options.crossOrigin] crossOrigin value (one of \"\", \"anonymous\", \"use-credentials\")\r\n     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes\r\n     * @return {fabric.Image} thisArg\r\n     * @chainable\r\n     */ setSrc: function(src, callback, options) {\n            fabric.util.loadImage(src, function(img, isError) {\n                this.setElement(img, options);\n                this._setWidthHeight();\n                callback && callback(this, isError);\n            }, this, options && options.crossOrigin);\n            return this;\n        },\n        /**\r\n     * Returns string representation of an instance\r\n     * @return {String} String representation of an instance\r\n     */ toString: function() {\n            return '#<fabric.Image: { src: \"' + this.getSrc() + '\" }>';\n        },\n        applyResizeFilters: function() {\n            var filter = this.resizeFilter, minimumScale = this.minimumScaleTrigger, objectScale = this.getTotalObjectScaling(), scaleX = objectScale.scaleX, scaleY = objectScale.scaleY, elementToFilter = this._filteredEl || this._originalElement;\n            if (this.group) {\n                this.set(\"dirty\", true);\n            }\n            if (!filter || scaleX > minimumScale && scaleY > minimumScale) {\n                this._element = elementToFilter;\n                this._filterScalingX = 1;\n                this._filterScalingY = 1;\n                this._lastScaleX = scaleX;\n                this._lastScaleY = scaleY;\n                return;\n            }\n            if (!fabric.filterBackend) {\n                fabric.filterBackend = fabric.initFilterBackend();\n            }\n            var canvasEl = fabric.util.createCanvasElement(), cacheKey = this._filteredEl ? this.cacheKey + \"_filtered\" : this.cacheKey, sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;\n            canvasEl.width = sourceWidth;\n            canvasEl.height = sourceHeight;\n            this._element = canvasEl;\n            this._lastScaleX = filter.scaleX = scaleX;\n            this._lastScaleY = filter.scaleY = scaleY;\n            fabric.filterBackend.applyFilters([\n                filter\n            ], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);\n            this._filterScalingX = canvasEl.width / this._originalElement.width;\n            this._filterScalingY = canvasEl.height / this._originalElement.height;\n        },\n        /**\r\n     * Applies filters assigned to this image (from \"filters\" array) or from filter param\r\n     * @method applyFilters\r\n     * @param {Array} filters to be applied\r\n     * @param {Boolean} forResizing specify if the filter operation is a resize operation\r\n     * @return {thisArg} return the fabric.Image object\r\n     * @chainable\r\n     */ applyFilters: function(filters) {\n            filters = filters || this.filters || [];\n            filters = filters.filter(function(filter) {\n                return filter && !filter.isNeutralState();\n            });\n            this.set(\"dirty\", true);\n            // needs to clear out or WEBGL will not resize correctly\n            this.removeTexture(this.cacheKey + \"_filtered\");\n            if (filters.length === 0) {\n                this._element = this._originalElement;\n                this._filteredEl = null;\n                this._filterScalingX = 1;\n                this._filterScalingY = 1;\n                return this;\n            }\n            var imgElement = this._originalElement, sourceWidth = imgElement.naturalWidth || imgElement.width, sourceHeight = imgElement.naturalHeight || imgElement.height;\n            if (this._element === this._originalElement) {\n                // if the element is the same we need to create a new element\n                var canvasEl = fabric.util.createCanvasElement();\n                canvasEl.width = sourceWidth;\n                canvasEl.height = sourceHeight;\n                this._element = canvasEl;\n                this._filteredEl = canvasEl;\n            } else {\n                // clear the existing element to get new filter data\n                // also dereference the eventual resized _element\n                this._element = this._filteredEl;\n                this._filteredEl.getContext(\"2d\").clearRect(0, 0, sourceWidth, sourceHeight);\n                // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y\n                this._lastScaleX = 1;\n                this._lastScaleY = 1;\n            }\n            if (!fabric.filterBackend) {\n                fabric.filterBackend = fabric.initFilterBackend();\n            }\n            fabric.filterBackend.applyFilters(filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);\n            if (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) {\n                this._filterScalingX = this._element.width / this._originalElement.width;\n                this._filterScalingY = this._element.height / this._originalElement.height;\n            }\n            return this;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _render: function(ctx) {\n            fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\n            if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {\n                this.applyResizeFilters();\n            }\n            this._stroke(ctx);\n            this._renderPaintInOrder(ctx);\n        },\n        /**\r\n     * Paint the cached copy of the object on the target context.\r\n     * it will set the imageSmoothing for the draw operation\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ drawCacheOnCanvas: function(ctx) {\n            fabric.util.setImageSmoothing(ctx, this.imageSmoothing);\n            fabric.Object.prototype.drawCacheOnCanvas.call(this, ctx);\n        },\n        /**\r\n     * Decide if the object should cache or not. Create its own cache level\r\n     * needsItsOwnCache should be used when the object drawing method requires\r\n     * a cache step. None of the fabric classes requires it.\r\n     * Generally you do not cache objects in groups because the group outside is cached.\r\n     * This is the special image version where we would like to avoid caching where possible.\r\n     * Essentially images do not benefit from caching. They may require caching, and in that\r\n     * case we do it. Also caching an image usually ends in a loss of details.\r\n     * A full performance audit should be done.\r\n     * @return {Boolean}\r\n     */ shouldCache: function() {\n            return this.needsItsOwnCache();\n        },\n        _renderFill: function(ctx) {\n            var elementToDraw = this._element;\n            if (!elementToDraw) {\n                return;\n            }\n            var scaleX = this._filterScalingX, scaleY = this._filterScalingY, w = this.width, h = this.height, min = Math.min, max = Math.max, // crop values cannot be lesser than 0.\n            cropX = max(this.cropX, 0), cropY = max(this.cropY, 0), elWidth = elementToDraw.naturalWidth || elementToDraw.width, elHeight = elementToDraw.naturalHeight || elementToDraw.height, sX = cropX * scaleX, sY = cropY * scaleY, // the width height cannot exceed element width/height, starting from the crop offset.\n            sW = min(w * scaleX, elWidth - sX), sH = min(h * scaleY, elHeight - sY), x = -w / 2, y = -h / 2, maxDestW = min(w, elWidth / scaleX - cropX), maxDestH = min(h, elHeight / scaleY - cropY);\n            elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);\n        },\n        /**\r\n     * needed to check if image needs resize\r\n     * @private\r\n     */ _needsResize: function() {\n            var scale = this.getTotalObjectScaling();\n            return scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY;\n        },\n        /**\r\n     * @private\r\n     */ _resetWidthHeight: function() {\n            this.set(this.getOriginalSize());\n        },\n        /**\r\n     * The Image class's initialization method. This method is automatically\r\n     * called by the constructor.\r\n     * @private\r\n     * @param {HTMLImageElement|String} element The element representing the image\r\n     * @param {Object} [options] Options object\r\n     */ _initElement: function(element, options) {\n            this.setElement(fabric.util.getById(element), options);\n            fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);\n        },\n        /**\r\n     * @private\r\n     * @param {Object} [options] Options object\r\n     */ _initConfig: function(options) {\n            options || (options = {});\n            this.setOptions(options);\n            this._setWidthHeight(options);\n        },\n        /**\r\n     * @private\r\n     * @param {Array} filters to be initialized\r\n     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created\r\n     */ _initFilters: function(filters, callback) {\n            if (filters && filters.length) {\n                fabric.util.enlivenObjects(filters, function(enlivenedObjects) {\n                    callback && callback(enlivenedObjects);\n                }, \"fabric.Image.filters\");\n            } else {\n                callback && callback();\n            }\n        },\n        /**\r\n     * @private\r\n     * Set the width and the height of the image object, using the element or the\r\n     * options.\r\n     * @param {Object} [options] Object with width/height properties\r\n     */ _setWidthHeight: function(options) {\n            options || (options = {});\n            var el = this.getElement();\n            this.width = options.width || el.naturalWidth || el.width || 0;\n            this.height = options.height || el.naturalHeight || el.height || 0;\n        },\n        /**\r\n     * Calculate offset for center and scale factor for the image in order to respect\r\n     * the preserveAspectRatio attribute\r\n     * @private\r\n     * @return {Object}\r\n     */ parsePreserveAspectRatioAttribute: function() {\n            var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || \"\"), rWidth = this._element.width, rHeight = this._element.height, scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0, offset, pWidth = this.width, pHeight = this.height, parsedAttributes = {\n                width: pWidth,\n                height: pHeight\n            };\n            if (pAR && (pAR.alignX !== \"none\" || pAR.alignY !== \"none\")) {\n                if (pAR.meetOrSlice === \"meet\") {\n                    scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);\n                    offset = (pWidth - rWidth * scaleX) / 2;\n                    if (pAR.alignX === \"Min\") {\n                        offsetLeft = -offset;\n                    }\n                    if (pAR.alignX === \"Max\") {\n                        offsetLeft = offset;\n                    }\n                    offset = (pHeight - rHeight * scaleY) / 2;\n                    if (pAR.alignY === \"Min\") {\n                        offsetTop = -offset;\n                    }\n                    if (pAR.alignY === \"Max\") {\n                        offsetTop = offset;\n                    }\n                }\n                if (pAR.meetOrSlice === \"slice\") {\n                    scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);\n                    offset = rWidth - pWidth / scaleX;\n                    if (pAR.alignX === \"Mid\") {\n                        cropX = offset / 2;\n                    }\n                    if (pAR.alignX === \"Max\") {\n                        cropX = offset;\n                    }\n                    offset = rHeight - pHeight / scaleY;\n                    if (pAR.alignY === \"Mid\") {\n                        cropY = offset / 2;\n                    }\n                    if (pAR.alignY === \"Max\") {\n                        cropY = offset;\n                    }\n                    rWidth = pWidth / scaleX;\n                    rHeight = pHeight / scaleY;\n                }\n            } else {\n                scaleX = pWidth / rWidth;\n                scaleY = pHeight / rHeight;\n            }\n            return {\n                width: rWidth,\n                height: rHeight,\n                scaleX: scaleX,\n                scaleY: scaleY,\n                offsetLeft: offsetLeft,\n                offsetTop: offsetTop,\n                cropX: cropX,\n                cropY: cropY\n            };\n        }\n    });\n    /**\r\n   * Default CSS class name for canvas\r\n   * @static\r\n   * @type String\r\n   * @default\r\n   */ fabric.Image.CSS_CANVAS = \"canvas-img\";\n    /**\r\n   * Alias for getSrc\r\n   * @static\r\n   */ fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;\n    /**\r\n   * Creates an instance of fabric.Image from its object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} callback Callback to invoke when an image instance is created\r\n   */ fabric.Image.fromObject = function(_object, callback) {\n        var object = fabric.util.object.clone(_object);\n        fabric.util.loadImage(object.src, function(img, isError) {\n            if (isError) {\n                callback && callback(null, true);\n                return;\n            }\n            fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {\n                object.filters = filters || [];\n                fabric.Image.prototype._initFilters.call(object, [\n                    object.resizeFilter\n                ], function(resizeFilters) {\n                    object.resizeFilter = resizeFilters[0];\n                    fabric.util.enlivenObjectEnlivables(object, object, function() {\n                        var image = new fabric.Image(img, object);\n                        callback(image, false);\n                    });\n                });\n            });\n        }, null, object.crossOrigin);\n    };\n    /**\r\n   * Creates an instance of fabric.Image from an URL string\r\n   * @static\r\n   * @param {String} url URL to create an image from\r\n   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument). Second argument is a boolean indicating if an error occurred or not.\r\n   * @param {Object} [imgOptions] Options object\r\n   */ fabric.Image.fromURL = function(url, callback, imgOptions) {\n        fabric.util.loadImage(url, function(img, isError) {\n            callback && callback(new fabric.Image(img, imgOptions), isError);\n        }, null, imgOptions && imgOptions.crossOrigin);\n    };\n})( true ? exports : 0);\n(function() {\n    \"use strict\";\n    /**\r\n   * Tests if webgl supports certain precision\r\n   * @param {WebGL} Canvas WebGL context to test on\r\n   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'\r\n   * @returns {Boolean} Whether the user's browser WebGL supports given precision.\r\n   */ function testPrecision(gl, precision) {\n        var fragmentSource = \"precision \" + precision + \" float;\\nvoid main(){}\";\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n   * Indicate whether this filtering backend is supported by the user's browser.\r\n   * @param {Number} tileSize check if the tileSize is supported\r\n   * @returns {Boolean} Whether the user's browser supports WebGL.\r\n   */ fabric.isWebglSupported = function(tileSize) {\n        if (fabric.isLikelyNode) {\n            return false;\n        }\n        tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;\n        var canvas = document.createElement(\"canvas\");\n        var gl = canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n        var isSupported = false;\n        // eslint-disable-next-line\n        if (gl) {\n            fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n            isSupported = fabric.maxTextureSize >= tileSize;\n            var precisions = [\n                \"highp\",\n                \"mediump\",\n                \"lowp\"\n            ];\n            for(var i = 0; i < 3; i++){\n                if (testPrecision(gl, precisions[i])) {\n                    fabric.webGlPrecision = precisions[i];\n                    break;\n                }\n                ;\n            }\n        }\n        this.isSupported = isSupported;\n        return isSupported;\n    };\n    fabric.WebglFilterBackend = WebglFilterBackend;\n    /**\r\n   * WebGL filter backend.\r\n   */ function WebglFilterBackend(options) {\n        if (options && options.tileSize) {\n            this.tileSize = options.tileSize;\n        }\n        this.setupGLContext(this.tileSize, this.tileSize);\n        this.captureGPUInfo();\n    }\n    ;\n    WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */ {\n        tileSize: 2048,\n        /**\r\n     * Experimental. This object is a sort of repository of help layers used to avoid\r\n     * of recreating them during frequent filtering. If you are previewing a filter with\r\n     * a slider you probably do not want to create help layers every filter step.\r\n     * in this object there will be appended some canvases, created once, resized sometimes\r\n     * cleared never. Clearing is left to the developer.\r\n     **/ resources: {},\n        /**\r\n     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.\r\n     */ setupGLContext: function(width, height) {\n            this.dispose();\n            this.createWebGLCanvas(width, height);\n            // eslint-disable-next-line\n            this.aPosition = new Float32Array([\n                0,\n                0,\n                0,\n                1,\n                1,\n                0,\n                1,\n                1\n            ]);\n            this.chooseFastestCopyGLTo2DMethod(width, height);\n        },\n        /**\r\n     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using\r\n     * putImageData is faster than drawImage for that specific operation.\r\n     */ chooseFastestCopyGLTo2DMethod: function(width, height) {\n            var canMeasurePerf = typeof window.performance !== \"undefined\", canUseImageData;\n            try {\n                new ImageData(1, 1);\n                canUseImageData = true;\n            } catch (e) {\n                canUseImageData = false;\n            }\n            // eslint-disable-next-line no-undef\n            var canUseArrayBuffer = typeof ArrayBuffer !== \"undefined\";\n            // eslint-disable-next-line no-undef\n            var canUseUint8Clamped = typeof Uint8ClampedArray !== \"undefined\";\n            if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {\n                return;\n            }\n            var targetCanvas = fabric.util.createCanvasElement();\n            // eslint-disable-next-line no-undef\n            var imageBuffer = new ArrayBuffer(width * height * 4);\n            if (fabric.forceGLPutImageData) {\n                this.imageBuffer = imageBuffer;\n                this.copyGLTo2D = copyGLTo2DPutImageData;\n                return;\n            }\n            var testContext = {\n                imageBuffer: imageBuffer,\n                destinationWidth: width,\n                destinationHeight: height,\n                targetCanvas: targetCanvas\n            };\n            var startTime, drawImageTime, putImageDataTime;\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            startTime = window.performance.now();\n            copyGLTo2DDrawImage.call(testContext, this.gl, testContext);\n            drawImageTime = window.performance.now() - startTime;\n            startTime = window.performance.now();\n            copyGLTo2DPutImageData.call(testContext, this.gl, testContext);\n            putImageDataTime = window.performance.now() - startTime;\n            if (drawImageTime > putImageDataTime) {\n                this.imageBuffer = imageBuffer;\n                this.copyGLTo2D = copyGLTo2DPutImageData;\n            } else {\n                this.copyGLTo2D = copyGLTo2DDrawImage;\n            }\n        },\n        /**\r\n     * Create a canvas element and associated WebGL context and attaches them as\r\n     * class properties to the GLFilterBackend class.\r\n     */ createWebGLCanvas: function(width, height) {\n            var canvas = fabric.util.createCanvasElement();\n            canvas.width = width;\n            canvas.height = height;\n            var glOptions = {\n                alpha: true,\n                premultipliedAlpha: false,\n                depth: false,\n                stencil: false,\n                antialias: false\n            }, gl = canvas.getContext(\"webgl\", glOptions);\n            if (!gl) {\n                gl = canvas.getContext(\"experimental-webgl\", glOptions);\n            }\n            if (!gl) {\n                return;\n            }\n            gl.clearColor(0, 0, 0, 0);\n            // this canvas can fire webglcontextlost and webglcontextrestored\n            this.canvas = canvas;\n            this.gl = gl;\n        },\n        /**\r\n     * Attempts to apply the requested filters to the source provided, drawing the filtered output\r\n     * to the provided target canvas.\r\n     *\r\n     * @param {Array} filters The filters to apply.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.\r\n     * @param {Number} width The width of the source input.\r\n     * @param {Number} height The height of the source input.\r\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If\r\n     * omitted, caching will be skipped.\r\n     */ applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {\n            var gl = this.gl;\n            var cachedTexture;\n            if (cacheKey) {\n                cachedTexture = this.getCachedTexture(cacheKey, source);\n            }\n            var pipelineState = {\n                originalWidth: source.width || source.originalWidth,\n                originalHeight: source.height || source.originalHeight,\n                sourceWidth: width,\n                sourceHeight: height,\n                destinationWidth: width,\n                destinationHeight: height,\n                context: gl,\n                sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),\n                targetTexture: this.createTexture(gl, width, height),\n                originalTexture: cachedTexture || this.createTexture(gl, width, height, !cachedTexture && source),\n                passes: filters.length,\n                webgl: true,\n                aPosition: this.aPosition,\n                programCache: this.programCache,\n                pass: 0,\n                filterBackend: this,\n                targetCanvas: targetCanvas\n            };\n            var tempFbo = gl.createFramebuffer();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);\n            filters.forEach(function(filter) {\n                filter && filter.applyTo(pipelineState);\n            });\n            resizeCanvasIfNeeded(pipelineState);\n            this.copyGLTo2D(gl, pipelineState);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n            gl.deleteTexture(pipelineState.sourceTexture);\n            gl.deleteTexture(pipelineState.targetTexture);\n            gl.deleteFramebuffer(tempFbo);\n            targetCanvas.getContext(\"2d\").setTransform(1, 0, 0, 1, 0, 0);\n            return pipelineState;\n        },\n        /**\r\n     * Detach event listeners, remove references, and clean up caches.\r\n     */ dispose: function() {\n            if (this.canvas) {\n                this.canvas = null;\n                this.gl = null;\n            }\n            this.clearWebGLCaches();\n        },\n        /**\r\n     * Wipe out WebGL-related caches.\r\n     */ clearWebGLCaches: function() {\n            this.programCache = {};\n            this.textureCache = {};\n        },\n        /**\r\n     * Create a WebGL texture object.\r\n     *\r\n     * Accepts specific dimensions to initialize the texture to or a source image.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.\r\n     * @param {Number} width The width to initialize the texture at.\r\n     * @param {Number} height The height to initialize the texture.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.\r\n     * @returns {WebGLTexture}\r\n     */ createTexture: function(gl, width, height, textureImageSource) {\n            var texture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (textureImageSource) {\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);\n            } else {\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            }\n            return texture;\n        },\n        /**\r\n     * Can be optionally used to get a texture from the cache array\r\n     *\r\n     * If an existing texture is not found, a new texture is created and cached.\r\n     *\r\n     * @param {String} uniqueId A cache key to use to find an existing texture.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the\r\n     * texture cache entry if one does not already exist.\r\n     */ getCachedTexture: function(uniqueId, textureImageSource) {\n            if (this.textureCache[uniqueId]) {\n                return this.textureCache[uniqueId];\n            } else {\n                var texture = this.createTexture(this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);\n                this.textureCache[uniqueId] = texture;\n                return texture;\n            }\n        },\n        /**\r\n     * Clear out cached resources related to a source image that has been\r\n     * filtered previously.\r\n     *\r\n     * @param {String} cacheKey The cache key provided when the source image was filtered.\r\n     */ evictCachesForKey: function(cacheKey) {\n            if (this.textureCache[cacheKey]) {\n                this.gl.deleteTexture(this.textureCache[cacheKey]);\n                delete this.textureCache[cacheKey];\n            }\n        },\n        copyGLTo2D: copyGLTo2DDrawImage,\n        /**\r\n     * Attempt to extract GPU information strings from a WebGL context.\r\n     *\r\n     * Useful information when debugging or blacklisting specific GPUs.\r\n     *\r\n     * @returns {Object} A GPU info object with renderer and vendor strings.\r\n     */ captureGPUInfo: function() {\n            if (this.gpuInfo) {\n                return this.gpuInfo;\n            }\n            var gl = this.gl, gpuInfo = {\n                renderer: \"\",\n                vendor: \"\"\n            };\n            if (!gl) {\n                return gpuInfo;\n            }\n            var ext = gl.getExtension(\"WEBGL_debug_renderer_info\");\n            if (ext) {\n                var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);\n                var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);\n                if (renderer) {\n                    gpuInfo.renderer = renderer.toLowerCase();\n                }\n                if (vendor) {\n                    gpuInfo.vendor = vendor.toLowerCase();\n                }\n            }\n            this.gpuInfo = gpuInfo;\n            return gpuInfo;\n        }\n    };\n})();\nfunction resizeCanvasIfNeeded(pipelineState) {\n    var targetCanvas = pipelineState.targetCanvas, width = targetCanvas.width, height = targetCanvas.height, dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight;\n    if (width !== dWidth || height !== dHeight) {\n        targetCanvas.width = dWidth;\n        targetCanvas.height = dHeight;\n    }\n}\n/**\r\n * Copy an input WebGL canvas on to an output 2D canvas.\r\n *\r\n * The WebGL canvas is assumed to be upside down, with the top-left pixel of the\r\n * desired output image appearing in the bottom-left corner of the WebGL canvas.\r\n *\r\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n */ function copyGLTo2DDrawImage(gl, pipelineState) {\n    var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext(\"2d\");\n    ctx.translate(0, targetCanvas.height); // move it down again\n    ctx.scale(1, -1); // vertical flip\n    // where is my image on the big glcanvas?\n    var sourceY = glCanvas.height - targetCanvas.height;\n    ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0, targetCanvas.width, targetCanvas.height);\n}\n/**\r\n * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData\r\n * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).\r\n *\r\n * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.\r\n * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.\r\n * @param {Object} pipelineState The 2D target canvas to copy on to.\r\n */ function copyGLTo2DPutImageData(gl, pipelineState) {\n    var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext(\"2d\"), dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight, numBytes = dWidth * dHeight * 4;\n    // eslint-disable-next-line no-undef\n    var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);\n    // eslint-disable-next-line no-undef\n    var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);\n    gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);\n    var imgData = new ImageData(u8Clamped, dWidth, dHeight);\n    ctx.putImageData(imgData, 0, 0);\n}\n(function() {\n    \"use strict\";\n    var noop = function() {};\n    fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;\n    /**\r\n   * Canvas 2D filter backend.\r\n   */ function Canvas2dFilterBackend() {}\n    ;\n    Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */ {\n        evictCachesForKey: noop,\n        dispose: noop,\n        clearWebGLCaches: noop,\n        /**\r\n     * Experimental. This object is a sort of repository of help layers used to avoid\r\n     * of recreating them during frequent filtering. If you are previewing a filter with\r\n     * a slider you probably do not want to create help layers every filter step.\r\n     * in this object there will be appended some canvases, created once, resized sometimes\r\n     * cleared never. Clearing is left to the developer.\r\n     **/ resources: {},\n        /**\r\n     * Apply a set of filters against a source image and draw the filtered output\r\n     * to the provided destination canvas.\r\n     *\r\n     * @param {EnhancedFilter} filters The filter to apply.\r\n     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.\r\n     * @param {Number} sourceWidth The width of the source input.\r\n     * @param {Number} sourceHeight The height of the source input.\r\n     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.\r\n     */ applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {\n            var ctx = targetCanvas.getContext(\"2d\");\n            ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);\n            var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n            var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);\n            var pipelineState = {\n                sourceWidth: sourceWidth,\n                sourceHeight: sourceHeight,\n                imageData: imageData,\n                originalEl: sourceElement,\n                originalImageData: originalImageData,\n                canvasEl: targetCanvas,\n                ctx: ctx,\n                filterBackend: this\n            };\n            filters.forEach(function(filter) {\n                filter.applyTo(pipelineState);\n            });\n            if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {\n                targetCanvas.width = pipelineState.imageData.width;\n                targetCanvas.height = pipelineState.imageData.height;\n            }\n            ctx.putImageData(pipelineState.imageData, 0, 0);\n            return pipelineState;\n        }\n    };\n})();\n/**\r\n * @namespace fabric.Image.filters\r\n * @memberOf fabric.Image\r\n * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}\r\n * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n */ fabric.Image = fabric.Image || {};\nfabric.Image.filters = fabric.Image.filters || {};\n/**\r\n * Root filter class from which all filter classes inherit from\r\n * @class fabric.Image.filters.BaseFilter\r\n * @memberOf fabric.Image.filters\r\n */ fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {\n    /**\r\n   * Filter type\r\n   * @param {String} type\r\n   * @default\r\n   */ type: \"BaseFilter\",\n    /**\r\n   * Array of attributes to send with buffers. do not modify\r\n   * @private\r\n   */ vertexSource: \"attribute vec2 aPosition;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vTexCoord = aPosition;\\n\" + \"gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n\" + \"}\",\n    fragmentSource: \"precision highp float;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"void main() {\\n\" + \"gl_FragColor = texture2D(uTexture, vTexCoord);\\n\" + \"}\",\n    /**\r\n   * Constructor\r\n   * @param {Object} [options] Options object\r\n   */ initialize: function(options) {\n        if (options) {\n            this.setOptions(options);\n        }\n    },\n    /**\r\n   * Sets filter's properties from options\r\n   * @param {Object} [options] Options object\r\n   */ setOptions: function(options) {\n        for(var prop in options){\n            this[prop] = options[prop];\n        }\n    },\n    /**\r\n   * Compile this filter's shader program.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.\r\n   * @param {String} fragmentSource fragmentShader source for compilation\r\n   * @param {String} vertexSource vertexShader source for compilation\r\n   */ createProgram: function(gl, fragmentSource, vertexSource) {\n        fragmentSource = fragmentSource || this.fragmentSource;\n        vertexSource = vertexSource || this.vertexSource;\n        if (fabric.webGlPrecision !== \"highp\") {\n            fragmentSource = fragmentSource.replace(/precision highp float/g, \"precision \" + fabric.webGlPrecision + \" float\");\n        }\n        var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexSource);\n        gl.compileShader(vertexShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            throw new Error(// eslint-disable-next-line prefer-template\n            \"Vertex shader compile error for \" + this.type + \": \" + gl.getShaderInfoLog(vertexShader));\n        }\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragmentSource);\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            throw new Error(// eslint-disable-next-line prefer-template\n            \"Fragment shader compile error for \" + this.type + \": \" + gl.getShaderInfoLog(fragmentShader));\n        }\n        var program = gl.createProgram();\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            throw new Error(// eslint-disable-next-line prefer-template\n            'Shader link error for \"${this.type}\" ' + gl.getProgramInfoLog(program));\n        }\n        var attributeLocations = this.getAttributeLocations(gl, program);\n        var uniformLocations = this.getUniformLocations(gl, program) || {};\n        uniformLocations.uStepW = gl.getUniformLocation(program, \"uStepW\");\n        uniformLocations.uStepH = gl.getUniformLocation(program, \"uStepH\");\n        return {\n            program: program,\n            attributeLocations: attributeLocations,\n            uniformLocations: uniformLocations\n        };\n    },\n    /**\r\n   * Return a map of attribute names to WebGLAttributeLocation objects.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.\r\n   * @returns {Object} A map of attribute names to attribute locations.\r\n   */ getAttributeLocations: function(gl, program) {\n        return {\n            aPosition: gl.getAttribLocation(program, \"aPosition\")\n        };\n    },\n    /**\r\n   * Return a map of uniform names to WebGLUniformLocation objects.\r\n   *\r\n   * Intended to be overridden by subclasses.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.\r\n   * @returns {Object} A map of uniform names to uniform locations.\r\n   */ getUniformLocations: function() {\n        // in case i do not need any special uniform i need to return an empty object\n        return {};\n    },\n    /**\r\n   * Send attribute data from this filter to its shader program on the GPU.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {Object} attributeLocations A map of shader attribute names to their locations.\r\n   */ sendAttributeData: function(gl, attributeLocations, aPositionData) {\n        var attributeLocation = attributeLocations.aPosition;\n        var buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.enableVertexAttribArray(attributeLocation);\n        gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);\n    },\n    _setupFrameBuffer: function(options) {\n        var gl = options.context, width, height;\n        if (options.passes > 1) {\n            width = options.destinationWidth;\n            height = options.destinationHeight;\n            if (options.sourceWidth !== width || options.sourceHeight !== height) {\n                gl.deleteTexture(options.targetTexture);\n                options.targetTexture = options.filterBackend.createTexture(gl, width, height);\n            }\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, options.targetTexture, 0);\n        } else {\n            // draw last filter on canvas and not to framebuffer.\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.finish();\n        }\n    },\n    _swapTextures: function(options) {\n        options.passes--;\n        options.pass++;\n        var temp = options.targetTexture;\n        options.targetTexture = options.sourceTexture;\n        options.sourceTexture = temp;\n    },\n    /**\r\n   * Generic isNeutral implementation for one parameter based filters.\r\n   * Used only in image applyFilters to discard filters that will not have an effect\r\n   * on the image\r\n   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )\r\n   * @param {Object} options\r\n   **/ isNeutralState: function() {\n        var main = this.mainParameter, _class = fabric.Image.filters[this.type].prototype;\n        if (main) {\n            if (Array.isArray(_class[main])) {\n                for(var i = _class[main].length; i--;){\n                    if (this[main][i] !== _class[main][i]) {\n                        return false;\n                    }\n                }\n                return true;\n            } else {\n                return _class[main] === this[main];\n            }\n        } else {\n            return false;\n        }\n    },\n    /**\r\n   * Apply this filter to the input image data provided.\r\n   *\r\n   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Number} options.passes The number of filters remaining to be executed\r\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n   */ applyTo: function(options) {\n        if (options.webgl) {\n            this._setupFrameBuffer(options);\n            this.applyToWebGL(options);\n            this._swapTextures(options);\n        } else {\n            this.applyTo2d(options);\n        }\n    },\n    /**\r\n   * Retrieves the cached shader.\r\n   * @param {Object} options\r\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n   */ retrieveShader: function(options) {\n        if (!options.programCache.hasOwnProperty(this.type)) {\n            options.programCache[this.type] = this.createProgram(options.context);\n        }\n        return options.programCache[this.type];\n    },\n    /**\r\n   * Apply this filter using webgl.\r\n   *\r\n   * @param {Object} options\r\n   * @param {Number} options.passes The number of filters remaining to be executed\r\n   * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n   * @param {WebGLTexture} options.originalTexture The texture of the original input image.\r\n   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n   * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n   */ applyToWebGL: function(options) {\n        var gl = options.context;\n        var shader = this.retrieveShader(options);\n        if (options.pass === 0 && options.originalTexture) {\n            gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);\n        }\n        gl.useProgram(shader.program);\n        this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);\n        gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);\n        gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);\n        this.sendUniformData(gl, shader.uniformLocations);\n        gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    },\n    bindAdditionalTexture: function(gl, texture, textureUnit) {\n        gl.activeTexture(textureUnit);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        // reset active texture to 0 as usual\n        gl.activeTexture(gl.TEXTURE0);\n    },\n    unbindAdditionalTexture: function(gl, textureUnit) {\n        gl.activeTexture(textureUnit);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.activeTexture(gl.TEXTURE0);\n    },\n    getMainParameter: function() {\n        return this[this.mainParameter];\n    },\n    setMainParameter: function(value) {\n        this[this.mainParameter] = value;\n    },\n    /**\r\n   * Send uniform data from this filter to its shader program on the GPU.\r\n   *\r\n   * Intended to be overridden by subclasses.\r\n   *\r\n   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.\r\n   * @param {Object} uniformLocations A map of shader uniform names to their locations.\r\n   */ sendUniformData: function() {\n    // Intentionally left blank.  Override me in subclasses.\n    },\n    /**\r\n   * If needed by a 2d filter, this functions can create an helper canvas to be used\r\n   * remember that options.targetCanvas is available for use till end of chain.\r\n   */ createHelpLayer: function(options) {\n        if (!options.helpLayer) {\n            var helpLayer = document.createElement(\"canvas\");\n            helpLayer.width = options.sourceWidth;\n            helpLayer.height = options.sourceHeight;\n            options.helpLayer = helpLayer;\n        }\n    },\n    /**\r\n   * Returns object representation of an instance\r\n   * @return {Object} Object representation of an instance\r\n   */ toObject: function() {\n        var object = {\n            type: this.type\n        }, mainP = this.mainParameter;\n        if (mainP) {\n            object[mainP] = this[mainP];\n        }\n        return object;\n    },\n    /**\r\n   * Returns a JSON representation of an instance\r\n   * @return {Object} JSON\r\n   */ toJSON: function() {\n        // delegate, not alias\n        return this.toObject();\n    }\n});\nfabric.Image.filters.BaseFilter.fromObject = function(object, callback) {\n    var filter = new fabric.Image.filters[object.type](object);\n    callback && callback(filter);\n    return filter;\n};\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Color Matrix filter class\r\n   * @class fabric.Image.filters.ColorMatrix\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}\r\n   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}\r\n   * @example <caption>Kodachrome filter</caption>\r\n   * var filter = new fabric.Image.filters.ColorMatrix({\r\n   *  matrix: [\r\n       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,\r\n       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,\r\n       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,\r\n       0, 0, 0, 1, 0\r\n      ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"ColorMatrix\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"uniform mat4 uColorMatrix;\\n\" + \"uniform vec4 uConstants;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"color *= uColorMatrix;\\n\" + \"color += uConstants;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\r\n     * Colormatrix for pixels.\r\n     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n     * outside the -1, 1 range.\r\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n     * @param {Array} matrix array of 20 numbers.\r\n     * @default\r\n     */ matrix: [\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        mainParameter: \"matrix\",\n        /**\r\n     * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario\r\n     * to save some calculation\r\n     * @type Boolean\r\n     * @default true\r\n     */ colorsOnly: true,\n        /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */ initialize: function(options) {\n            this.callSuper(\"initialize\", options);\n            // create a new array instead mutating the prototype with push\n            this.matrix = this.matrix.slice(0);\n        },\n        /**\r\n     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, iLen = data.length, m = this.matrix, r, g, b, a, i, colorsOnly = this.colorsOnly;\n            for(i = 0; i < iLen; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                if (colorsOnly) {\n                    data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;\n                    data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;\n                    data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;\n                } else {\n                    a = data[i + 3];\n                    data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;\n                    data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;\n                    data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;\n                    data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;\n                }\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uColorMatrix: gl.getUniformLocation(program, \"uColorMatrix\"),\n                uConstants: gl.getUniformLocation(program, \"uConstants\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            var m = this.matrix, matrix = [\n                m[0],\n                m[1],\n                m[2],\n                m[3],\n                m[5],\n                m[6],\n                m[7],\n                m[8],\n                m[10],\n                m[11],\n                m[12],\n                m[13],\n                m[15],\n                m[16],\n                m[17],\n                m[18]\n            ], constants = [\n                m[4],\n                m[9],\n                m[14],\n                m[19]\n            ];\n            gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);\n            gl.uniform4fv(uniformLocations.uConstants, constants);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] function to invoke after filter creation\r\n   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix\r\n   */ fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Brightness filter class\r\n   * @class fabric.Image.filters.Brightness\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Brightness({\r\n   *   brightness: 0.05\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Brightness\",\n        /**\r\n     * Fragment source for the brightness program\r\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uBrightness;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"color.rgb += uBrightness;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\r\n     * Brightness value, from -1 to 1.\r\n     * translated to -255 to 255 for 2d\r\n     * 0.0039215686 is the part of 1 that get translated to 1 in 2d\r\n     * @param {Number} brightness\r\n     * @default\r\n     */ brightness: 0,\n        /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */ mainParameter: \"brightness\",\n        /**\r\n    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n    *\r\n    * @param {Object} options\r\n    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n    */ applyTo2d: function(options) {\n            if (this.brightness === 0) {\n                return;\n            }\n            var imageData = options.imageData, data = imageData.data, i, len = data.length, brightness = Math.round(this.brightness * 255);\n            for(i = 0; i < len; i += 4){\n                data[i] = data[i] + brightness;\n                data[i + 1] = data[i + 1] + brightness;\n                data[i + 2] = data[i + 2] + brightness;\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uBrightness: gl.getUniformLocation(program, \"uBrightness\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uBrightness, this.brightness);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness\r\n   */ fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Adapted from <a href=\"http://www.html5rocks.com/en/tutorials/canvas/imagefilters/\">html5rocks article</a>\r\n   * @class fabric.Image.filters.Convolute\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example <caption>Sharpen filter</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   matrix: [ 0, -1,  0,\r\n   *            -1,  5, -1,\r\n   *             0, -1,  0 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   * @example <caption>Blur filter</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   matrix: [ 1/9, 1/9, 1/9,\r\n   *             1/9, 1/9, 1/9,\r\n   *             1/9, 1/9, 1/9 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   * @example <caption>Emboss filter</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   matrix: [ 1,   1,  1,\r\n   *             1, 0.7, -1,\r\n   *            -1,  -1, -1 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   * @example <caption>Emboss filter with opaqueness</caption>\r\n   * var filter = new fabric.Image.filters.Convolute({\r\n   *   opaque: true,\r\n   *   matrix: [ 1,   1,  1,\r\n   *             1, 0.7, -1,\r\n   *            -1,  -1, -1 ]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */ filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Convolute\",\n        /*\r\n     * Opaque value (true/false)\r\n     */ opaque: false,\n        /*\r\n     * matrix for the filter, max 9x9\r\n     */ matrix: [\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            0\n        ],\n        /**\r\n     * Fragment source for the brightness program\r\n     */ fragmentSource: {\n            Convolute_3_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[9];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 3.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 3.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_3_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[9];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 3.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 3.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\",\n            Convolute_5_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[25];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 5.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 5.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_5_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[25];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 5.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 5.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\",\n            Convolute_7_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[49];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 7.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 7.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_7_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[49];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 7.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 7.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\",\n            Convolute_9_1: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[81];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 0);\\n\" + \"for (float h = 0.0; h < 9.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 9.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n\" + \"color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            Convolute_9_0: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uMatrix[81];\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0, 0, 0, 1);\\n\" + \"for (float h = 0.0; h < 9.0; h+=1.0) {\\n\" + \"for (float w = 0.0; w < 9.0; w+=1.0) {\\n\" + \"vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\n\" + \"color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n\" + \"}\\n\" + \"}\\n\" + \"float alpha = texture2D(uTexture, vTexCoord).a;\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.a = alpha;\\n\" + \"}\"\n        },\n        /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.Convolute.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Boolean} [options.opaque=false] Opaque value (true/false)\r\n     * @param {Array} [options.matrix] Filter matrix\r\n     */ /**\r\n    * Retrieves the cached shader.\r\n    * @param {Object} options\r\n    * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n    */ retrieveShader: function(options) {\n            var size = Math.sqrt(this.matrix.length);\n            var cacheKey = this.type + \"_\" + size + \"_\" + (this.opaque ? 1 : 0);\n            var shaderSource = this.fragmentSource[cacheKey];\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        /**\r\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, weights = this.matrix, side = Math.round(Math.sqrt(weights.length)), halfSide = Math.floor(side / 2), sw = imageData.width, sh = imageData.height, output = options.ctx.createImageData(sw, sh), dst = output.data, // go through the destination image pixels\n            alphaFac = this.opaque ? 1 : 0, r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx, cy;\n            for(y = 0; y < sh; y++){\n                for(x = 0; x < sw; x++){\n                    dstOff = (y * sw + x) * 4;\n                    // calculate the weighed sum of the source image pixels that\n                    // fall under the convolution matrix\n                    r = 0;\n                    g = 0;\n                    b = 0;\n                    a = 0;\n                    for(cy = 0; cy < side; cy++){\n                        for(cx = 0; cx < side; cx++){\n                            scy = y + cy - halfSide;\n                            scx = x + cx - halfSide;\n                            // eslint-disable-next-line max-depth\n                            if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {\n                                continue;\n                            }\n                            srcOff = (scy * sw + scx) * 4;\n                            wt = weights[cy * side + cx];\n                            r += data[srcOff] * wt;\n                            g += data[srcOff + 1] * wt;\n                            b += data[srcOff + 2] * wt;\n                            // eslint-disable-next-line max-depth\n                            if (!alphaFac) {\n                                a += data[srcOff + 3] * wt;\n                            }\n                        }\n                    }\n                    dst[dstOff] = r;\n                    dst[dstOff + 1] = g;\n                    dst[dstOff + 2] = b;\n                    if (!alphaFac) {\n                        dst[dstOff + 3] = a;\n                    } else {\n                        dst[dstOff + 3] = data[dstOff + 3];\n                    }\n                }\n            }\n            options.imageData = output;\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uMatrix: gl.getUniformLocation(program, \"uMatrix\"),\n                uOpaque: gl.getUniformLocation(program, \"uOpaque\"),\n                uHalfSize: gl.getUniformLocation(program, \"uHalfSize\"),\n                uSize: gl.getUniformLocation(program, \"uSize\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1fv(uniformLocations.uMatrix, this.matrix);\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function() {\n            return extend(this.callSuper(\"toObject\"), {\n                opaque: this.opaque,\n                matrix: this.matrix\n            });\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute\r\n   */ fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Grayscale image filter class\r\n   * @class fabric.Image.filters.Grayscale\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Grayscale();\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Grayscale\",\n        fragmentSource: {\n            average: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"float average = (color.r + color.b + color.g) / 3.0;\\n\" + \"gl_FragColor = vec4(average, average, average, color.a);\\n\" + \"}\",\n            lightness: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform int uMode;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 col = texture2D(uTexture, vTexCoord);\\n\" + \"float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\n\" + \"gl_FragColor = vec4(average, average, average, col.a);\\n\" + \"}\",\n            luminosity: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform int uMode;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 col = texture2D(uTexture, vTexCoord);\\n\" + \"float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\n\" + \"gl_FragColor = vec4(average, average, average, col.a);\\n\" + \"}\"\n        },\n        /**\r\n     * Grayscale mode, between 'average', 'lightness', 'luminosity'\r\n     * @param {String} type\r\n     * @default\r\n     */ mode: \"average\",\n        mainParameter: \"mode\",\n        /**\r\n     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, i, len = data.length, value, mode = this.mode;\n            for(i = 0; i < len; i += 4){\n                if (mode === \"average\") {\n                    value = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                } else if (mode === \"lightness\") {\n                    value = (Math.min(data[i], data[i + 1], data[i + 2]) + Math.max(data[i], data[i + 1], data[i + 2])) / 2;\n                } else if (mode === \"luminosity\") {\n                    value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];\n                }\n                data[i] = value;\n                data[i + 1] = value;\n                data[i + 2] = value;\n            }\n        },\n        /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ retrieveShader: function(options) {\n            var cacheKey = this.type + \"_\" + this.mode;\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                var shaderSource = this.fragmentSource[this.mode];\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uMode: gl.getUniformLocation(program, \"uMode\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            // default average mode.\n            var mode = 1;\n            gl.uniform1i(uniformLocations.uMode, mode);\n        },\n        /**\r\n     * Grayscale filter isNeutralState implementation\r\n     * The filter is never neutral\r\n     * on the image\r\n     **/ isNeutralState: function() {\n            return false;\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale\r\n   */ fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Invert filter class\r\n   * @class fabric.Image.filters.Invert\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Invert();\r\n   * object.filters.push(filter);\r\n   * object.applyFilters(canvas.renderAll.bind(canvas));\r\n   */ filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Invert\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform int uInvert;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"if (uInvert == 1) {\\n\" + \"gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n\" + \"} else {\\n\" + \"gl_FragColor = color;\\n\" + \"}\\n\" + \"}\",\n        /**\r\n     * Filter invert. if false, does nothing\r\n     * @param {Boolean} invert\r\n     * @default\r\n     */ invert: true,\n        mainParameter: \"invert\",\n        /**\r\n     * Apply the Invert operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, i, len = data.length;\n            for(i = 0; i < len; i += 4){\n                data[i] = 255 - data[i];\n                data[i + 1] = 255 - data[i + 1];\n                data[i + 2] = 255 - data[i + 2];\n            }\n        },\n        /**\r\n     * Invert filter isNeutralState implementation\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * @param {Object} options\r\n     **/ isNeutralState: function() {\n            return !this.invert;\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uInvert: gl.getUniformLocation(program, \"uInvert\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1i(uniformLocations.uInvert, this.invert);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert\r\n   */ fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Noise filter class\r\n   * @class fabric.Image.filters.Noise\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Noise({\r\n   *   noise: 700\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */ filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Noise\",\n        /**\r\n     * Fragment source for the noise program\r\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uStepH;\\n\" + \"uniform float uNoise;\\n\" + \"uniform float uSeed;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"float rand(vec2 co, float seed, float vScale) {\\n\" + \"return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n\" + \"}\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */ mainParameter: \"noise\",\n        /**\r\n     * Noise value, from\r\n     * @param {Number} noise\r\n     * @default\r\n     */ noise: 0,\n        /**\r\n     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */ applyTo2d: function(options) {\n            if (this.noise === 0) {\n                return;\n            }\n            var imageData = options.imageData, data = imageData.data, i, len = data.length, noise = this.noise, rand;\n            for(i = 0, len = data.length; i < len; i += 4){\n                rand = (0.5 - Math.random()) * noise;\n                data[i] += rand;\n                data[i + 1] += rand;\n                data[i + 2] += rand;\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uNoise: gl.getUniformLocation(program, \"uNoise\"),\n                uSeed: gl.getUniformLocation(program, \"uSeed\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uNoise, this.noise / 255);\n            gl.uniform1f(uniformLocations.uSeed, Math.random());\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function() {\n            return extend(this.callSuper(\"toObject\"), {\n                noise: this.noise\n            });\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise\r\n   */ fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Pixelate filter class\r\n   * @class fabric.Image.filters.Pixelate\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Pixelate({\r\n   *   blocksize: 8\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Pixelate\",\n        blocksize: 4,\n        mainParameter: \"blocksize\",\n        /**\r\n     * Fragment source for the Pixelate program\r\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uBlocksize;\\n\" + \"uniform float uStepW;\\n\" + \"uniform float uStepH;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"float blockW = uBlocksize * uStepW;\\n\" + \"float blockH = uBlocksize * uStepW;\\n\" + \"int posX = int(vTexCoord.x / blockW);\\n\" + \"int posY = int(vTexCoord.y / blockH);\\n\" + \"float fposX = float(posX);\\n\" + \"float fposY = float(posY);\\n\" + \"vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\n\" + \"vec4 color = texture2D(uTexture, squareCoords);\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\r\n     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, iLen = imageData.height, jLen = imageData.width, index, i, j, r, g, b, a, _i, _j, _iLen, _jLen;\n            for(i = 0; i < iLen; i += this.blocksize){\n                for(j = 0; j < jLen; j += this.blocksize){\n                    index = i * 4 * jLen + j * 4;\n                    r = data[index];\n                    g = data[index + 1];\n                    b = data[index + 2];\n                    a = data[index + 3];\n                    _iLen = Math.min(i + this.blocksize, iLen);\n                    _jLen = Math.min(j + this.blocksize, jLen);\n                    for(_i = i; _i < _iLen; _i++){\n                        for(_j = j; _j < _jLen; _j++){\n                            index = _i * 4 * jLen + _j * 4;\n                            data[index] = r;\n                            data[index + 1] = g;\n                            data[index + 2] = b;\n                            data[index + 3] = a;\n                        }\n                    }\n                }\n            }\n        },\n        /**\r\n     * Indicate when the filter is not gonna apply changes to the image\r\n     **/ isNeutralState: function() {\n            return this.blocksize === 1;\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uBlocksize: gl.getUniformLocation(program, \"uBlocksize\"),\n                uStepW: gl.getUniformLocation(program, \"uStepW\"),\n                uStepH: gl.getUniformLocation(program, \"uStepH\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate\r\n   */ fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), extend = fabric.util.object.extend, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Remove white filter class\r\n   * @class fabric.Image.filters.RemoveColor\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.RemoveColor({\r\n   *   threshold: 0.2,\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */ filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"RemoveColor\",\n        /**\r\n     * Color to remove, in any format understood by fabric.Color.\r\n     * @param {String} type\r\n     * @default\r\n     */ color: \"#FFFFFF\",\n        /**\r\n     * Fragment source for the brightness program\r\n     */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec4 uLow;\\n\" + \"uniform vec4 uHigh;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"gl_FragColor = texture2D(uTexture, vTexCoord);\\n\" + \"if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\n\" + \"gl_FragColor.a = 0.0;\\n\" + \"}\\n\" + \"}\",\n        /**\r\n     * distance to actual color, as value up or down from each r,g,b\r\n     * between 0 and 1\r\n     **/ distance: 0.02,\n        /**\r\n     * For color to remove inside distance, use alpha channel for a smoother deletion\r\n     * NOT IMPLEMENTED YET\r\n     **/ useAlpha: false,\n        /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.RemoveWhite.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Number} [options.color=#RRGGBB] Threshold value\r\n     * @param {Number} [options.distance=10] Distance value\r\n     */ /**\r\n     * Applies filter to canvas element\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, i, distance = this.distance * 255, r, g, b, source = new fabric.Color(this.color).getSource(), lowC = [\n                source[0] - distance,\n                source[1] - distance,\n                source[2] - distance\n            ], highC = [\n                source[0] + distance,\n                source[1] + distance,\n                source[2] + distance\n            ];\n            for(i = 0; i < data.length; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                if (r > lowC[0] && g > lowC[1] && b > lowC[2] && r < highC[0] && g < highC[1] && b < highC[2]) {\n                    data[i + 3] = 0;\n                }\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uLow: gl.getUniformLocation(program, \"uLow\"),\n                uHigh: gl.getUniformLocation(program, \"uHigh\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            var source = new fabric.Color(this.color).getSource(), distance = parseFloat(this.distance), lowC = [\n                0 + source[0] / 255 - distance,\n                0 + source[1] / 255 - distance,\n                0 + source[2] / 255 - distance,\n                1\n            ], highC = [\n                source[0] / 255 + distance,\n                source[1] / 255 + distance,\n                source[2] / 255 + distance,\n                1\n            ];\n            gl.uniform4fv(uniformLocations.uLow, lowC);\n            gl.uniform4fv(uniformLocations.uHigh, highC);\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function() {\n            return extend(this.callSuper(\"toObject\"), {\n                color: this.color,\n                distance: this.distance\n            });\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite\r\n   */ fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    var matrices = {\n        Brownie: [\n            0.59970,\n            0.34553,\n            -0.27082,\n            0,\n            0.186,\n            -0.03770,\n            0.86095,\n            0.15059,\n            0,\n            -0.1449,\n            0.24113,\n            -0.07441,\n            0.44972,\n            0,\n            -0.02965,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Vintage: [\n            0.62793,\n            0.32021,\n            -0.03965,\n            0,\n            0.03784,\n            0.02578,\n            0.64411,\n            0.03259,\n            0,\n            0.02926,\n            0.04660,\n            -0.08512,\n            0.52416,\n            0,\n            0.02023,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Kodachrome: [\n            1.12855,\n            -0.39673,\n            -0.03992,\n            0,\n            0.24991,\n            -0.16404,\n            1.08352,\n            -0.05498,\n            0,\n            0.09698,\n            -0.16786,\n            -0.56034,\n            1.60148,\n            0,\n            0.13972,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Technicolor: [\n            1.91252,\n            -0.85453,\n            -0.09155,\n            0,\n            0.04624,\n            -0.30878,\n            1.76589,\n            -0.10601,\n            0,\n            -0.27589,\n            -0.23110,\n            -0.75018,\n            1.84759,\n            0,\n            0.12137,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Polaroid: [\n            1.438,\n            -0.062,\n            -0.062,\n            0,\n            0,\n            -0.122,\n            1.378,\n            -0.122,\n            0,\n            0,\n            -0.016,\n            -0.016,\n            1.483,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        Sepia: [\n            0.393,\n            0.769,\n            0.189,\n            0,\n            0,\n            0.349,\n            0.686,\n            0.168,\n            0,\n            0,\n            0.272,\n            0.534,\n            0.131,\n            0,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0\n        ],\n        BlackWhite: [\n            1.5,\n            1.5,\n            1.5,\n            0,\n            -1,\n            1.5,\n            1.5,\n            1.5,\n            0,\n            -1,\n            1.5,\n            1.5,\n            1.5,\n            0,\n            -1,\n            0,\n            0,\n            0,\n            1,\n            0\n        ]\n    };\n    for(var key in matrices){\n        filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */ {\n            /**\r\n       * Filter type\r\n       * @param {String} type\r\n       * @default\r\n       */ type: key,\n            /**\r\n       * Colormatrix for the effect\r\n       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning\r\n       * outside the -1, 1 range.\r\n       * @param {Array} matrix array of 20 numbers.\r\n       * @default\r\n       */ matrix: matrices[key],\n            /**\r\n       * Lock the matrix export for this kind of static, parameter less filters.\r\n       */ mainParameter: false,\n            /**\r\n       * Lock the colormatrix on the color part, skipping alpha\r\n       */ colorsOnly: true\n        });\n        fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;\n    }\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Color Blend filter class\r\n   * @class fabric.Image.filter.BlendColor\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @example\r\n   * var filter = new fabric.Image.filters.BlendColor({\r\n   *  color: '#000',\r\n   *  mode: 'multiply'\r\n   * });\r\n   *\r\n   * var filter = new fabric.Image.filters.BlendImage({\r\n   *  image: fabricImageObject,\r\n   *  mode: 'multiply',\r\n   *  alpha: 0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */ filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */ {\n        type: \"BlendColor\",\n        /**\r\n     * Color to make the blend operation with. default to a reddish color since black or white\r\n     * gives always strong result.\r\n     * @type String\r\n     * @default\r\n     **/ color: \"#F95C63\",\n        /**\r\n     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,\r\n     * darken, lighten, overlay, exclusion, tint.\r\n     * @type String\r\n     * @default\r\n     **/ mode: \"multiply\",\n        /**\r\n     * alpha value. represent the strength of the blend color operation.\r\n     * @type Number\r\n     * @default\r\n     **/ alpha: 1,\n        /**\r\n     * Fragment source for the Multiply program\r\n     */ fragmentSource: {\n            multiply: \"gl_FragColor.rgb *= uColor.rgb;\\n\",\n            screen: \"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n\",\n            add: \"gl_FragColor.rgb += uColor.rgb;\\n\",\n            diff: \"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n\",\n            subtract: \"gl_FragColor.rgb -= uColor.rgb;\\n\",\n            lighten: \"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n\",\n            darken: \"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n\",\n            exclusion: \"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n\",\n            overlay: \"if (uColor.r < 0.5) {\\n\" + \"gl_FragColor.r *= 2.0 * uColor.r;\\n\" + \"} else {\\n\" + \"gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n\" + \"}\\n\" + \"if (uColor.g < 0.5) {\\n\" + \"gl_FragColor.g *= 2.0 * uColor.g;\\n\" + \"} else {\\n\" + \"gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n\" + \"}\\n\" + \"if (uColor.b < 0.5) {\\n\" + \"gl_FragColor.b *= 2.0 * uColor.b;\\n\" + \"} else {\\n\" + \"gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n\" + \"}\\n\",\n            tint: \"gl_FragColor.rgb *= (1.0 - uColor.a);\\n\" + \"gl_FragColor.rgb += uColor.rgb;\\n\"\n        },\n        /**\r\n     * build the fragment source for the filters, joining the common part with\r\n     * the specific one.\r\n     * @param {String} mode the mode of the filter, a key of this.fragmentSource\r\n     * @return {String} the source to be compiled\r\n     * @private\r\n     */ buildSource: function(mode) {\n            return \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec4 uColor;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"gl_FragColor = color;\\n\" + \"if (color.a > 0.0) {\\n\" + this.fragmentSource[mode] + \"}\\n\" + \"}\";\n        },\n        /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ retrieveShader: function(options) {\n            var cacheKey = this.type + \"_\" + this.mode, shaderSource;\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                shaderSource = this.buildSource(this.mode);\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        /**\r\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, iLen = data.length, tr, tg, tb, r, g, b, source, alpha1 = 1 - this.alpha;\n            source = new fabric.Color(this.color).getSource();\n            tr = source[0] * this.alpha;\n            tg = source[1] * this.alpha;\n            tb = source[2] * this.alpha;\n            for(var i = 0; i < iLen; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                switch(this.mode){\n                    case \"multiply\":\n                        data[i] = r * tr / 255;\n                        data[i + 1] = g * tg / 255;\n                        data[i + 2] = b * tb / 255;\n                        break;\n                    case \"screen\":\n                        data[i] = 255 - (255 - r) * (255 - tr) / 255;\n                        data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;\n                        data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;\n                        break;\n                    case \"add\":\n                        data[i] = r + tr;\n                        data[i + 1] = g + tg;\n                        data[i + 2] = b + tb;\n                        break;\n                    case \"diff\":\n                    case \"difference\":\n                        data[i] = Math.abs(r - tr);\n                        data[i + 1] = Math.abs(g - tg);\n                        data[i + 2] = Math.abs(b - tb);\n                        break;\n                    case \"subtract\":\n                        data[i] = r - tr;\n                        data[i + 1] = g - tg;\n                        data[i + 2] = b - tb;\n                        break;\n                    case \"darken\":\n                        data[i] = Math.min(r, tr);\n                        data[i + 1] = Math.min(g, tg);\n                        data[i + 2] = Math.min(b, tb);\n                        break;\n                    case \"lighten\":\n                        data[i] = Math.max(r, tr);\n                        data[i + 1] = Math.max(g, tg);\n                        data[i + 2] = Math.max(b, tb);\n                        break;\n                    case \"overlay\":\n                        data[i] = tr < 128 ? 2 * r * tr / 255 : 255 - 2 * (255 - r) * (255 - tr) / 255;\n                        data[i + 1] = tg < 128 ? 2 * g * tg / 255 : 255 - 2 * (255 - g) * (255 - tg) / 255;\n                        data[i + 2] = tb < 128 ? 2 * b * tb / 255 : 255 - 2 * (255 - b) * (255 - tb) / 255;\n                        break;\n                    case \"exclusion\":\n                        data[i] = tr + r - 2 * tr * r / 255;\n                        data[i + 1] = tg + g - 2 * tg * g / 255;\n                        data[i + 2] = tb + b - 2 * tb * b / 255;\n                        break;\n                    case \"tint\":\n                        data[i] = tr + r * alpha1;\n                        data[i + 1] = tg + g * alpha1;\n                        data[i + 2] = tb + b * alpha1;\n                }\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uColor: gl.getUniformLocation(program, \"uColor\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            var source = new fabric.Color(this.color).getSource();\n            source[0] = this.alpha * source[0] / 255;\n            source[1] = this.alpha * source[1] / 255;\n            source[2] = this.alpha * source[2] / 255;\n            source[3] = this.alpha;\n            gl.uniform4fv(uniformLocations.uColor, source);\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function() {\n            return {\n                type: this.type,\n                color: this.color,\n                mode: this.mode,\n                alpha: this.alpha\n            };\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor\r\n   */ fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Image Blend filter class\r\n   * @class fabric.Image.filter.BlendImage\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @example\r\n   * var filter = new fabric.Image.filters.BlendColor({\r\n   *  color: '#000',\r\n   *  mode: 'multiply'\r\n   * });\r\n   *\r\n   * var filter = new fabric.Image.filters.BlendImage({\r\n   *  image: fabricImageObject,\r\n   *  mode: 'multiply',\r\n   *  alpha: 0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */ filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */ {\n        type: \"BlendImage\",\n        /**\r\n     * Color to make the blend operation with. default to a reddish color since black or white\r\n     * gives always strong result.\r\n     **/ image: null,\n        /**\r\n     * Blend mode for the filter (one of \"multiply\", \"mask\")\r\n     * @type String\r\n     * @default\r\n     **/ mode: \"multiply\",\n        /**\r\n     * alpha value. represent the strength of the blend image operation.\r\n     * not implemented.\r\n     **/ alpha: 1,\n        vertexSource: \"attribute vec2 aPosition;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"varying vec2 vTexCoord2;\\n\" + \"uniform mat3 uTransformMatrix;\\n\" + \"void main() {\\n\" + \"vTexCoord = aPosition;\\n\" + \"vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\n\" + \"gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n\" + \"}\",\n        /**\r\n     * Fragment source for the Multiply program\r\n     */ fragmentSource: {\n            multiply: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform sampler2D uImage;\\n\" + \"uniform vec4 uColor;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"varying vec2 vTexCoord2;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"vec4 color2 = texture2D(uImage, vTexCoord2);\\n\" + \"color.rgba *= color2.rgba;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n            mask: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform sampler2D uImage;\\n\" + \"uniform vec4 uColor;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"varying vec2 vTexCoord2;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"vec4 color2 = texture2D(uImage, vTexCoord2);\\n\" + \"color.a = color2.a;\\n\" + \"gl_FragColor = color;\\n\" + \"}\"\n        },\n        /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ retrieveShader: function(options) {\n            var cacheKey = this.type + \"_\" + this.mode;\n            var shaderSource = this.fragmentSource[this.mode];\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);\n            }\n            return options.programCache[cacheKey];\n        },\n        applyToWebGL: function(options) {\n            // load texture to blend.\n            var gl = options.context, texture = this.createTexture(options.filterBackend, this.image);\n            this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);\n            this.callSuper(\"applyToWebGL\", options);\n            this.unbindAdditionalTexture(gl, gl.TEXTURE1);\n        },\n        createTexture: function(backend, image) {\n            return backend.getCachedTexture(image.cacheKey, image._element);\n        },\n        /**\r\n     * Calculate a transformMatrix to adapt the image to blend over\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ calculateMatrix: function() {\n            var image = this.image, width = image._element.width, height = image._element.height;\n            return [\n                1 / image.scaleX,\n                0,\n                0,\n                0,\n                1 / image.scaleY,\n                0,\n                -image.left / width,\n                -image.top / height,\n                1\n            ];\n        },\n        /**\r\n     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, resources = options.filterBackend.resources, data = imageData.data, iLen = data.length, width = imageData.width, height = imageData.height, tr, tg, tb, ta, r, g, b, a, canvas1, context, image = this.image, blendData;\n            if (!resources.blendImage) {\n                resources.blendImage = fabric.util.createCanvasElement();\n            }\n            canvas1 = resources.blendImage;\n            context = canvas1.getContext(\"2d\");\n            if (canvas1.width !== width || canvas1.height !== height) {\n                canvas1.width = width;\n                canvas1.height = height;\n            } else {\n                context.clearRect(0, 0, width, height);\n            }\n            context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);\n            context.drawImage(image._element, 0, 0, width, height);\n            blendData = context.getImageData(0, 0, width, height).data;\n            for(var i = 0; i < iLen; i += 4){\n                r = data[i];\n                g = data[i + 1];\n                b = data[i + 2];\n                a = data[i + 3];\n                tr = blendData[i];\n                tg = blendData[i + 1];\n                tb = blendData[i + 2];\n                ta = blendData[i + 3];\n                switch(this.mode){\n                    case \"multiply\":\n                        data[i] = r * tr / 255;\n                        data[i + 1] = g * tg / 255;\n                        data[i + 2] = b * tb / 255;\n                        data[i + 3] = a * ta / 255;\n                        break;\n                    case \"mask\":\n                        data[i + 3] = ta;\n                        break;\n                }\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uTransformMatrix: gl.getUniformLocation(program, \"uTransformMatrix\"),\n                uImage: gl.getUniformLocation(program, \"uImage\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            var matrix = this.calculateMatrix();\n            gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.\n            gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function() {\n            return {\n                type: this.type,\n                image: this.image && this.image.toObject(),\n                mode: this.mode,\n                alpha: this.alpha\n            };\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} callback to be invoked after filter creation\r\n   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage\r\n   */ fabric.Image.filters.BlendImage.fromObject = function(object, callback) {\n        fabric.Image.fromObject(object.image, function(image) {\n            var options = fabric.util.object.clone(object);\n            options.image = image;\n            callback(new fabric.Image.filters.BlendImage(options));\n        });\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), pow = Math.pow, floor = Math.floor, sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin, ceil = Math.ceil, filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Resize image filter class\r\n   * @class fabric.Image.filters.Resize\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Resize();\r\n   * object.filters.push(filter);\r\n   * object.applyFilters(canvas.renderAll.bind(canvas));\r\n   */ filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Resize\",\n        /**\r\n     * Resize type\r\n     * for webgl resizeType is just lanczos, for canvas2d can be:\r\n     * bilinear, hermite, sliceHack, lanczos.\r\n     * @param {String} resizeType\r\n     * @default\r\n     */ resizeType: \"hermite\",\n        /**\r\n     * Scale factor for resizing, x axis\r\n     * @param {Number} scaleX\r\n     * @default\r\n     */ scaleX: 1,\n        /**\r\n     * Scale factor for resizing, y axis\r\n     * @param {Number} scaleY\r\n     * @default\r\n     */ scaleY: 1,\n        /**\r\n     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos\r\n     * @param {Number} lanczosLobes\r\n     * @default\r\n     */ lanczosLobes: 3,\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uDelta: gl.getUniformLocation(program, \"uDelta\"),\n                uTaps: gl.getUniformLocation(program, \"uTaps\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [\n                1 / this.width,\n                0\n            ] : [\n                0,\n                1 / this.height\n            ]);\n            gl.uniform1fv(uniformLocations.uTaps, this.taps);\n        },\n        /**\r\n     * Retrieves the cached shader.\r\n     * @param {Object} options\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ retrieveShader: function(options) {\n            var filterWindow = this.getFilterWindow(), cacheKey = this.type + \"_\" + filterWindow;\n            if (!options.programCache.hasOwnProperty(cacheKey)) {\n                var fragmentShader = this.generateShader(filterWindow);\n                options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);\n            }\n            return options.programCache[cacheKey];\n        },\n        getFilterWindow: function() {\n            var scale = this.tempScale;\n            return Math.ceil(this.lanczosLobes / scale);\n        },\n        getTaps: function() {\n            var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale, filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);\n            for(var i = 1; i <= filterWindow; i++){\n                taps[i - 1] = lobeFunction(i * scale);\n            }\n            return taps;\n        },\n        /**\r\n     * Generate vertex and shader sources from the necessary steps numbers\r\n     * @param {Number} filterWindow\r\n     */ generateShader: function(filterWindow) {\n            var offsets = new Array(filterWindow), fragmentShader = this.fragmentSourceTOP, filterWindow;\n            for(var i = 1; i <= filterWindow; i++){\n                offsets[i - 1] = i + \".0 * uDelta\";\n            }\n            fragmentShader += \"uniform float uTaps[\" + filterWindow + \"];\\n\";\n            fragmentShader += \"void main() {\\n\";\n            fragmentShader += \"  vec4 color = texture2D(uTexture, vTexCoord);\\n\";\n            fragmentShader += \"  float sum = 1.0;\\n\";\n            offsets.forEach(function(offset, i) {\n                fragmentShader += \"  color += texture2D(uTexture, vTexCoord + \" + offset + \") * uTaps[\" + i + \"];\\n\";\n                fragmentShader += \"  color += texture2D(uTexture, vTexCoord - \" + offset + \") * uTaps[\" + i + \"];\\n\";\n                fragmentShader += \"  sum += 2.0 * uTaps[\" + i + \"];\\n\";\n            });\n            fragmentShader += \"  gl_FragColor = color / sum;\\n\";\n            fragmentShader += \"}\";\n            return fragmentShader;\n        },\n        fragmentSourceTOP: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec2 uDelta;\\n\" + \"varying vec2 vTexCoord;\\n\",\n        /**\r\n     * Apply the resize filter to the image\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ applyTo: function(options) {\n            if (options.webgl) {\n                options.passes++;\n                this.width = options.sourceWidth;\n                this.horizontal = true;\n                this.dW = Math.round(this.width * this.scaleX);\n                this.dH = options.sourceHeight;\n                this.tempScale = this.dW / this.width;\n                this.taps = this.getTaps();\n                options.destinationWidth = this.dW;\n                this._setupFrameBuffer(options);\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n                options.sourceWidth = options.destinationWidth;\n                this.height = options.sourceHeight;\n                this.horizontal = false;\n                this.dH = Math.round(this.height * this.scaleY);\n                this.tempScale = this.dH / this.height;\n                this.taps = this.getTaps();\n                options.destinationHeight = this.dH;\n                this._setupFrameBuffer(options);\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n                options.sourceHeight = options.destinationHeight;\n            } else {\n                this.applyTo2d(options);\n            }\n        },\n        isNeutralState: function() {\n            return this.scaleX === 1 && this.scaleY === 1;\n        },\n        lanczosCreate: function(lobes) {\n            return function(x) {\n                if (x >= lobes || x <= -lobes) {\n                    return 0.0;\n                }\n                if (x < 1.19209290E-07 && x > -1.19209290E-07) {\n                    return 1.0;\n                }\n                x *= Math.PI;\n                var xx = x / lobes;\n                return sin(x) / x * sin(xx) / xx;\n            };\n        },\n        /**\r\n     * Applies filter to canvas element\r\n     * @memberOf fabric.Image.filters.Resize.prototype\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} scaleX\r\n     * @param {Number} scaleY\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, scaleX = this.scaleX, scaleY = this.scaleY;\n            this.rcpScaleX = 1 / scaleX;\n            this.rcpScaleY = 1 / scaleY;\n            var oW = imageData.width, oH = imageData.height, dW = round(oW * scaleX), dH = round(oH * scaleY), newData;\n            if (this.resizeType === \"sliceHack\") {\n                newData = this.sliceByTwo(options, oW, oH, dW, dH);\n            } else if (this.resizeType === \"hermite\") {\n                newData = this.hermiteFastResize(options, oW, oH, dW, dH);\n            } else if (this.resizeType === \"bilinear\") {\n                newData = this.bilinearFiltering(options, oW, oH, dW, dH);\n            } else if (this.resizeType === \"lanczos\") {\n                newData = this.lanczosResize(options, oW, oH, dW, dH);\n            }\n            options.imageData = newData;\n        },\n        /**\r\n     * Filter sliceByTwo\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */ sliceByTwo: function(options, oW, oH, dW, dH) {\n            var imageData = options.imageData, mult = 0.5, doneW = false, doneH = false, stepW = oW * mult, stepH = oH * mult, resources = fabric.filterBackend.resources, tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;\n            if (!resources.sliceByTwo) {\n                resources.sliceByTwo = document.createElement(\"canvas\");\n            }\n            tmpCanvas = resources.sliceByTwo;\n            if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {\n                tmpCanvas.width = oW * 1.5;\n                tmpCanvas.height = oH;\n            }\n            ctx = tmpCanvas.getContext(\"2d\");\n            ctx.clearRect(0, 0, oW * 1.5, oH);\n            ctx.putImageData(imageData, 0, 0);\n            dW = floor(dW);\n            dH = floor(dH);\n            while(!doneW || !doneH){\n                oW = stepW;\n                oH = stepH;\n                if (dW < floor(stepW * mult)) {\n                    stepW = floor(stepW * mult);\n                } else {\n                    stepW = dW;\n                    doneW = true;\n                }\n                if (dH < floor(stepH * mult)) {\n                    stepH = floor(stepH * mult);\n                } else {\n                    stepH = dH;\n                    doneH = true;\n                }\n                ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);\n                sX = dX;\n                sY = dY;\n                dY += stepH;\n            }\n            return ctx.getImageData(sX, sY, dW, dH);\n        },\n        /**\r\n     * Filter lanczosResize\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */ lanczosResize: function(options, oW, oH, dW, dH) {\n            function process(u) {\n                var v, i, weight, idx, a, red, green, blue, alpha, fX, fY;\n                center.x = (u + 0.5) * ratioX;\n                icenter.x = floor(center.x);\n                for(v = 0; v < dH; v++){\n                    center.y = (v + 0.5) * ratioY;\n                    icenter.y = floor(center.y);\n                    a = 0;\n                    red = 0;\n                    green = 0;\n                    blue = 0;\n                    alpha = 0;\n                    for(i = icenter.x - range2X; i <= icenter.x + range2X; i++){\n                        if (i < 0 || i >= oW) {\n                            continue;\n                        }\n                        fX = floor(1000 * abs(i - center.x));\n                        if (!cacheLanc[fX]) {\n                            cacheLanc[fX] = {};\n                        }\n                        for(var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++){\n                            if (j < 0 || j >= oH) {\n                                continue;\n                            }\n                            fY = floor(1000 * abs(j - center.y));\n                            if (!cacheLanc[fX][fY]) {\n                                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);\n                            }\n                            weight = cacheLanc[fX][fY];\n                            if (weight > 0) {\n                                idx = (j * oW + i) * 4;\n                                a += weight;\n                                red += weight * srcData[idx];\n                                green += weight * srcData[idx + 1];\n                                blue += weight * srcData[idx + 2];\n                                alpha += weight * srcData[idx + 3];\n                            }\n                        }\n                    }\n                    idx = (v * dW + u) * 4;\n                    destData[idx] = red / a;\n                    destData[idx + 1] = green / a;\n                    destData[idx + 2] = blue / a;\n                    destData[idx + 3] = alpha / a;\n                }\n                if (++u < dW) {\n                    return process(u);\n                } else {\n                    return destImg;\n                }\n            }\n            var srcData = options.imageData.data, destImg = options.ctx.createImageData(dW, dH), destData = destImg.data, lanczos = this.lanczosCreate(this.lanczosLobes), ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY, range2X = ceil(ratioX * this.lanczosLobes / 2), range2Y = ceil(ratioY * this.lanczosLobes / 2), cacheLanc = {}, center = {}, icenter = {};\n            return process(0);\n        },\n        /**\r\n     * bilinearFiltering\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */ bilinearFiltering: function(options, oW, oH, dW, dH) {\n            var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl, color, offset = 0, origPix, ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, w4 = 4 * (oW - 1), img = options.imageData, pixels = img.data, destImage = options.ctx.createImageData(dW, dH), destPixels = destImage.data;\n            for(i = 0; i < dH; i++){\n                for(j = 0; j < dW; j++){\n                    x = floor(ratioX * j);\n                    y = floor(ratioY * i);\n                    xDiff = ratioX * j - x;\n                    yDiff = ratioY * i - y;\n                    origPix = 4 * (y * oW + x);\n                    for(chnl = 0; chnl < 4; chnl++){\n                        a = pixels[origPix + chnl];\n                        b = pixels[origPix + 4 + chnl];\n                        c = pixels[origPix + w4 + chnl];\n                        d = pixels[origPix + w4 + 4 + chnl];\n                        color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) + c * yDiff * (1 - xDiff) + d * xDiff * yDiff;\n                        destPixels[offset++] = color;\n                    }\n                }\n            }\n            return destImage;\n        },\n        /**\r\n     * hermiteFastResize\r\n     * @param {Object} canvasEl Canvas element to apply filter to\r\n     * @param {Number} oW Original Width\r\n     * @param {Number} oH Original Height\r\n     * @param {Number} dW Destination Width\r\n     * @param {Number} dH Destination Height\r\n     * @returns {ImageData}\r\n     */ hermiteFastResize: function(options, oW, oH, dW, dH) {\n            var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY, ratioWHalf = ceil(ratioW / 2), ratioHHalf = ceil(ratioH / 2), img = options.imageData, data = img.data, img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;\n            for(var j = 0; j < dH; j++){\n                for(var i = 0; i < dW; i++){\n                    var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0, gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;\n                    for(var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++){\n                        var dy = abs(centerY - (yy + 0.5)) / ratioHHalf, centerX = (i + 0.5) * ratioW, w0 = dy * dy;\n                        for(var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++){\n                            var dx = abs(centerX - (xx + 0.5)) / ratioWHalf, w = sqrt(w0 + dx * dx);\n                            /* eslint-disable max-depth */ if (w > 1 && w < -1) {\n                                continue;\n                            }\n                            //hermite filter\n                            weight = 2 * w * w * w - 3 * w * w + 1;\n                            if (weight > 0) {\n                                dx = 4 * (xx + yy * oW);\n                                //alpha\n                                gxA += weight * data[dx + 3];\n                                weightsAlpha += weight;\n                                //colors\n                                if (data[dx + 3] < 255) {\n                                    weight = weight * data[dx + 3] / 250;\n                                }\n                                gxR += weight * data[dx];\n                                gxG += weight * data[dx + 1];\n                                gxB += weight * data[dx + 2];\n                                weights += weight;\n                            }\n                        /* eslint-enable max-depth */ }\n                    }\n                    data2[x2] = gxR / weights;\n                    data2[x2 + 1] = gxG / weights;\n                    data2[x2 + 2] = gxB / weights;\n                    data2[x2 + 3] = gxA / weightsAlpha;\n                }\n            }\n            return img2;\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function() {\n            return {\n                type: this.type,\n                scaleX: this.scaleX,\n                scaleY: this.scaleY,\n                resizeType: this.resizeType,\n                lanczosLobes: this.lanczosLobes\n            };\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize\r\n   */ fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Contrast filter class\r\n   * @class fabric.Image.filters.Contrast\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Contrast({\r\n   *   contrast: 0.25\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Contrast\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uContrast;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\n\" + \"color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\r\n     * contrast value, range from -1 to 1.\r\n     * @param {Number} contrast\r\n     * @default 0\r\n     */ contrast: 0,\n        mainParameter: \"contrast\",\n        /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.Contrast.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)\r\n     */ /**\r\n      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.\r\n      *\r\n      * @param {Object} options\r\n      * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n      */ applyTo2d: function(options) {\n            if (this.contrast === 0) {\n                return;\n            }\n            var imageData = options.imageData, i, len, data = imageData.data, len = data.length, contrast = Math.floor(this.contrast * 255), contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));\n            for(i = 0; i < len; i += 4){\n                data[i] = contrastF * (data[i] - 128) + 128;\n                data[i + 1] = contrastF * (data[i + 1] - 128) + 128;\n                data[i + 2] = contrastF * (data[i + 2] - 128) + 128;\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uContrast: gl.getUniformLocation(program, \"uContrast\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uContrast, this.contrast);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast\r\n   */ fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Saturate filter class\r\n   * @class fabric.Image.filters.Saturation\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Saturation({\r\n   *   saturation: 1\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Saturation\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform float uSaturation;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"float rgMax = max(color.r, color.g);\\n\" + \"float rgbMax = max(rgMax, color.b);\\n\" + \"color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\n\" + \"color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\n\" + \"color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\n\" + \"gl_FragColor = color;\\n\" + \"}\",\n        /**\r\n     * Saturation value, from -1 to 1.\r\n     * Increases/decreases the color saturation.\r\n     * A value of 0 has no effect.\r\n     * \r\n     * @param {Number} saturation\r\n     * @default\r\n     */ saturation: 0,\n        mainParameter: \"saturation\",\n        /**\r\n     * Constructor\r\n     * @memberOf fabric.Image.filters.Saturate.prototype\r\n     * @param {Object} [options] Options object\r\n     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)\r\n     */ /**\r\n     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.\r\n     */ applyTo2d: function(options) {\n            if (this.saturation === 0) {\n                return;\n            }\n            var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.saturation, i, max;\n            for(i = 0; i < len; i += 4){\n                max = Math.max(data[i], data[i + 1], data[i + 2]);\n                data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;\n                data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;\n                data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uSaturation: gl.getUniformLocation(program, \"uSaturation\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform1f(uniformLocations.uSaturation, -this.saturation);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {Function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate\r\n   */ fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Blur filter class\r\n   * @class fabric.Image.filters.Blur\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Blur({\r\n   *   blur: 0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   * canvas.renderAll();\r\n   */ filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */ {\n        type: \"Blur\",\n        /*\r\n'gl_FragColor = vec4(0.0);',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',\r\n'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',\r\n'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',\r\n*/ /* eslint-disable max-len */ fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec2 uDelta;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"const float nSamples = 15.0;\\n\" + \"vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\n\" + \"float random(vec3 scale) {\\n\" + /* use the fragment position for a different seed per-pixel */ \"return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n\" + \"}\\n\" + \"void main() {\\n\" + \"vec4 color = vec4(0.0);\\n\" + \"float total = 0.0;\\n\" + \"float offset = random(v3offset);\\n\" + \"for (float t = -nSamples; t <= nSamples; t++) {\\n\" + \"float percent = (t + offset - 0.5) / nSamples;\\n\" + \"float weight = 1.0 - abs(percent);\\n\" + \"color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\n\" + \"total += weight;\\n\" + \"}\\n\" + \"gl_FragColor = color / total;\\n\" + \"}\",\n        /* eslint-enable max-len */ /**\r\n     * blur value, in percentage of image dimensions.\r\n     * specific to keep the image blur constant at different resolutions\r\n     * range between 0 and 1.\r\n     * @type Number\r\n     * @default\r\n     */ blur: 0,\n        mainParameter: \"blur\",\n        applyTo: function(options) {\n            if (options.webgl) {\n                // this aspectRatio is used to give the same blur to vertical and horizontal\n                this.aspectRatio = options.sourceWidth / options.sourceHeight;\n                options.passes++;\n                this._setupFrameBuffer(options);\n                this.horizontal = true;\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n                this._setupFrameBuffer(options);\n                this.horizontal = false;\n                this.applyToWebGL(options);\n                this._swapTextures(options);\n            } else {\n                this.applyTo2d(options);\n            }\n        },\n        applyTo2d: function(options) {\n            // paint canvasEl with current image data.\n            //options.ctx.putImageData(options.imageData, 0, 0);\n            options.imageData = this.simpleBlur(options);\n        },\n        simpleBlur: function(options) {\n            var resources = options.filterBackend.resources, canvas1, canvas2, width = options.imageData.width, height = options.imageData.height;\n            if (!resources.blurLayer1) {\n                resources.blurLayer1 = fabric.util.createCanvasElement();\n                resources.blurLayer2 = fabric.util.createCanvasElement();\n            }\n            canvas1 = resources.blurLayer1;\n            canvas2 = resources.blurLayer2;\n            if (canvas1.width !== width || canvas1.height !== height) {\n                canvas2.width = canvas1.width = width;\n                canvas2.height = canvas1.height = height;\n            }\n            var ctx1 = canvas1.getContext(\"2d\"), ctx2 = canvas2.getContext(\"2d\"), nSamples = 15, random, percent, j, i, blur = this.blur * 0.06 * 0.5;\n            // load first canvas\n            ctx1.putImageData(options.imageData, 0, 0);\n            ctx2.clearRect(0, 0, width, height);\n            for(i = -nSamples; i <= nSamples; i++){\n                random = (Math.random() - 0.5) / 4;\n                percent = i / nSamples;\n                j = blur * percent * width + random;\n                ctx2.globalAlpha = 1 - Math.abs(percent);\n                ctx2.drawImage(canvas1, j, random);\n                ctx1.drawImage(canvas2, 0, 0);\n                ctx2.globalAlpha = 1;\n                ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n            }\n            for(i = -nSamples; i <= nSamples; i++){\n                random = (Math.random() - 0.5) / 4;\n                percent = i / nSamples;\n                j = blur * percent * height + random;\n                ctx2.globalAlpha = 1 - Math.abs(percent);\n                ctx2.drawImage(canvas1, random, j);\n                ctx1.drawImage(canvas2, 0, 0);\n                ctx2.globalAlpha = 1;\n                ctx2.clearRect(0, 0, canvas2.width, canvas2.height);\n            }\n            options.ctx.drawImage(canvas1, 0, 0);\n            var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);\n            ctx1.globalAlpha = 1;\n            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n            return newImageData;\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                delta: gl.getUniformLocation(program, \"uDelta\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            var delta = this.chooseRightDelta();\n            gl.uniform2fv(uniformLocations.delta, delta);\n        },\n        /**\r\n     * choose right value of image percentage to blur with\r\n     * @returns {Array} a numeric array with delta values\r\n     */ chooseRightDelta: function() {\n            var blurScale = 1, delta = [\n                0,\n                0\n            ], blur;\n            if (this.horizontal) {\n                if (this.aspectRatio > 1) {\n                    // image is wide, i want to shrink radius horizontal\n                    blurScale = 1 / this.aspectRatio;\n                }\n            } else {\n                if (this.aspectRatio < 1) {\n                    // image is tall, i want to shrink radius vertical\n                    blurScale = this.aspectRatio;\n                }\n            }\n            blur = blurScale * this.blur * 0.12;\n            if (this.horizontal) {\n                delta[0] = blur;\n            } else {\n                delta[1] = blur;\n            }\n            return delta;\n        }\n    });\n    /**\r\n   * Deserialize a JSON definition of a BlurFilter into a concrete instance.\r\n   */ filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * Gamma filter class\r\n   * @class fabric.Image.filters.Gamma\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.Gamma({\r\n   *   gamma: [1, 0.5, 2.1]\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"Gamma\",\n        fragmentSource: \"precision highp float;\\n\" + \"uniform sampler2D uTexture;\\n\" + \"uniform vec3 uGamma;\\n\" + \"varying vec2 vTexCoord;\\n\" + \"void main() {\\n\" + \"vec4 color = texture2D(uTexture, vTexCoord);\\n\" + \"vec3 correction = (1.0 / uGamma);\\n\" + \"color.r = pow(color.r, correction.r);\\n\" + \"color.g = pow(color.g, correction.g);\\n\" + \"color.b = pow(color.b, correction.b);\\n\" + \"gl_FragColor = color;\\n\" + \"gl_FragColor.rgb *= color.a;\\n\" + \"}\",\n        /**\r\n     * Gamma array value, from 0.01 to 2.2.\r\n     * @param {Array} gamma\r\n     * @default\r\n     */ gamma: [\n            1,\n            1,\n            1\n        ],\n        /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */ mainParameter: \"gamma\",\n        /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */ initialize: function(options) {\n            this.gamma = [\n                1,\n                1,\n                1\n            ];\n            filters.BaseFilter.prototype.initialize.call(this, options);\n        },\n        /**\r\n     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.\r\n     *\r\n     * @param {Object} options\r\n     * @param {ImageData} options.imageData The Uint8Array to be filtered.\r\n     */ applyTo2d: function(options) {\n            var imageData = options.imageData, data = imageData.data, gamma = this.gamma, len = data.length, rInv = 1 / gamma[0], gInv = 1 / gamma[1], bInv = 1 / gamma[2], i;\n            if (!this.rVals) {\n                // eslint-disable-next-line\n                this.rVals = new Uint8Array(256);\n                // eslint-disable-next-line\n                this.gVals = new Uint8Array(256);\n                // eslint-disable-next-line\n                this.bVals = new Uint8Array(256);\n            }\n            // This is an optimization - pre-compute a look-up table for each color channel\n            // instead of performing these pow calls for each pixel in the image.\n            for(i = 0, len = 256; i < len; i++){\n                this.rVals[i] = Math.pow(i / 255, rInv) * 255;\n                this.gVals[i] = Math.pow(i / 255, gInv) * 255;\n                this.bVals[i] = Math.pow(i / 255, bInv) * 255;\n            }\n            for(i = 0, len = data.length; i < len; i += 4){\n                data[i] = this.rVals[data[i]];\n                data[i + 1] = this.gVals[data[i + 1]];\n                data[i + 2] = this.bVals[data[i + 2]];\n            }\n        },\n        /**\r\n     * Return WebGL uniform locations for this filter's shader.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {WebGLShaderProgram} program This filter's compiled shader program.\r\n     */ getUniformLocations: function(gl, program) {\n            return {\n                uGamma: gl.getUniformLocation(program, \"uGamma\")\n            };\n        },\n        /**\r\n     * Send data from this filter to its shader program's uniforms.\r\n     *\r\n     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.\r\n     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects\r\n     */ sendUniformData: function(gl, uniformLocations) {\n            gl.uniform3fv(uniformLocations.uGamma, this.gamma);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma\r\n   */ fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * A container class that knows how to apply a sequence of filters to an input image.\r\n   */ filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */ {\n        type: \"Composed\",\n        /**\r\n     * A non sparse array of filters to apply\r\n     */ subFilters: [],\n        /**\r\n     * Constructor\r\n     * @param {Object} [options] Options object\r\n     */ initialize: function(options) {\n            this.callSuper(\"initialize\", options);\n            // create a new array instead mutating the prototype with push\n            this.subFilters = this.subFilters.slice(0);\n        },\n        /**\r\n     * Apply this container's filters to the input image provided.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be applied.\r\n     */ applyTo: function(options) {\n            options.passes += this.subFilters.length - 1;\n            this.subFilters.forEach(function(filter) {\n                filter.applyTo(options);\n            });\n        },\n        /**\r\n     * Serialize this filter into JSON.\r\n     *\r\n     * @returns {Object} A JSON representation of this filter.\r\n     */ toObject: function() {\n            return fabric.util.object.extend(this.callSuper(\"toObject\"), {\n                subFilters: this.subFilters.map(function(filter) {\n                    return filter.toObject();\n                })\n            });\n        },\n        isNeutralState: function() {\n            return !this.subFilters.some(function(filter) {\n                return !filter.isNeutralState();\n            });\n        }\n    });\n    /**\r\n   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.\r\n   */ fabric.Image.filters.Composed.fromObject = function(object, callback) {\n        var filters = object.subFilters || [], subFilters = filters.map(function(filter) {\n            return new fabric.Image.filters[filter.type](filter);\n        }), instance = new fabric.Image.filters.Composed({\n            subFilters: subFilters\n        });\n        callback && callback(instance);\n        return instance;\n    };\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), filters = fabric.Image.filters, createClass = fabric.util.createClass;\n    /**\r\n   * HueRotation filter class\r\n   * @class fabric.Image.filters.HueRotation\r\n   * @memberOf fabric.Image.filters\r\n   * @extends fabric.Image.filters.BaseFilter\r\n   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition\r\n   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}\r\n   * @example\r\n   * var filter = new fabric.Image.filters.HueRotation({\r\n   *   rotation: -0.5\r\n   * });\r\n   * object.filters.push(filter);\r\n   * object.applyFilters();\r\n   */ filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */ {\n        /**\r\n     * Filter type\r\n     * @param {String} type\r\n     * @default\r\n     */ type: \"HueRotation\",\n        /**\r\n     * HueRotation value, from -1 to 1.\r\n     * the unit is radians\r\n     * @param {Number} myParameter\r\n     * @default\r\n     */ rotation: 0,\n        /**\r\n     * Describe the property that is the filter parameter\r\n     * @param {String} m\r\n     * @default\r\n     */ mainParameter: \"rotation\",\n        calculateMatrix: function() {\n            var rad = this.rotation * Math.PI, cos = fabric.util.cos(rad), sin = fabric.util.sin(rad), aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;\n            this.matrix = [\n                1,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0\n            ];\n            this.matrix[0] = cos + OneMinusCos / 3;\n            this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;\n            this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;\n            this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;\n            this.matrix[6] = cos + aThird * OneMinusCos;\n            this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;\n            this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;\n            this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;\n            this.matrix[12] = cos + aThird * OneMinusCos;\n        },\n        /**\r\n     * HueRotation isNeutralState implementation\r\n     * Used only in image applyFilters to discard filters that will not have an effect\r\n     * on the image\r\n     * @param {Object} options\r\n     **/ isNeutralState: function(options) {\n            this.calculateMatrix();\n            return filters.BaseFilter.prototype.isNeutralState.call(this, options);\n        },\n        /**\r\n     * Apply this filter to the input image data provided.\r\n     *\r\n     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Number} options.passes The number of filters remaining to be executed\r\n     * @param {Boolean} options.webgl Whether to use webgl to render the filter.\r\n     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.\r\n     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.\r\n     * @param {WebGLRenderingContext} options.context The GL context used for rendering.\r\n     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.\r\n     */ applyTo: function(options) {\n            this.calculateMatrix();\n            filters.BaseFilter.prototype.applyTo.call(this, options);\n        }\n    });\n    /**\r\n   * Returns filter instance from an object representation\r\n   * @static\r\n   * @param {Object} object Object to create an instance from\r\n   * @param {function} [callback] to be invoked after filter creation\r\n   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation\r\n   */ fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;\n})( true ? exports : 0);\n(function(global) {\n    \"use strict\";\n    var fabric = global.fabric || (global.fabric = {}), clone = fabric.util.object.clone;\n    if (fabric.Text) {\n        fabric.warn(\"fabric.Text is already defined\");\n        return;\n    }\n    var additionalProps = (\"fontFamily fontWeight fontSize text underline overline linethrough\" + \" textAlign fontStyle lineHeight textBackgroundColor charSpacing styles\" + \" direction path pathStartOffset pathSide pathAlign\").split(\" \");\n    /**\r\n   * Text class\r\n   * @class fabric.Text\r\n   * @extends fabric.Object\r\n   * @return {fabric.Text} thisArg\r\n   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}\r\n   * @see {@link fabric.Text#initialize} for constructor definition\r\n   */ fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {\n        /**\r\n     * Properties which when set cause object to change dimensions\r\n     * @type Array\r\n     * @private\r\n     */ _dimensionAffectingProps: [\n            \"fontSize\",\n            \"fontWeight\",\n            \"fontFamily\",\n            \"fontStyle\",\n            \"lineHeight\",\n            \"text\",\n            \"charSpacing\",\n            \"textAlign\",\n            \"styles\",\n            \"path\",\n            \"pathStartOffset\",\n            \"pathSide\",\n            \"pathAlign\"\n        ],\n        /**\r\n     * @private\r\n     */ _reNewline: /\\r?\\n/,\n        /**\r\n     * Use this regular expression to filter for whitespaces that is not a new line.\r\n     * Mostly used when text is 'justify' aligned.\r\n     * @private\r\n     */ _reSpacesAndTabs: /[ \\t\\r]/g,\n        /**\r\n     * Use this regular expression to filter for whitespace that is not a new line.\r\n     * Mostly used when text is 'justify' aligned.\r\n     * @private\r\n     */ _reSpaceAndTab: /[ \\t\\r]/,\n        /**\r\n     * Use this regular expression to filter consecutive groups of non spaces.\r\n     * Mostly used when text is 'justify' aligned.\r\n     * @private\r\n     */ _reWords: /\\S+/g,\n        /**\r\n     * Type of an object\r\n     * @type String\r\n     * @default\r\n     */ type: \"text\",\n        /**\r\n     * Font size (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */ fontSize: 40,\n        /**\r\n     * Font weight (e.g. bold, normal, 400, 600, 800)\r\n     * @type {(Number|String)}\r\n     * @default\r\n     */ fontWeight: \"normal\",\n        /**\r\n     * Font family\r\n     * @type String\r\n     * @default\r\n     */ fontFamily: \"Times New Roman\",\n        /**\r\n     * Text decoration underline.\r\n     * @type Boolean\r\n     * @default\r\n     */ underline: false,\n        /**\r\n     * Text decoration overline.\r\n     * @type Boolean\r\n     * @default\r\n     */ overline: false,\n        /**\r\n     * Text decoration linethrough.\r\n     * @type Boolean\r\n     * @default\r\n     */ linethrough: false,\n        /**\r\n     * Text alignment. Possible values: \"left\", \"center\", \"right\", \"justify\",\r\n     * \"justify-left\", \"justify-center\" or \"justify-right\".\r\n     * @type String\r\n     * @default\r\n     */ textAlign: \"left\",\n        /**\r\n     * Font style . Possible values: \"\", \"normal\", \"italic\" or \"oblique\".\r\n     * @type String\r\n     * @default\r\n     */ fontStyle: \"normal\",\n        /**\r\n     * Line height\r\n     * @type Number\r\n     * @default\r\n     */ lineHeight: 1.16,\n        /**\r\n     * Superscript schema object (minimum overlap)\r\n     * @type {Object}\r\n     * @default\r\n     */ superscript: {\n            size: 0.60,\n            baseline: -0.35 // baseline-shift factor (upwards)\n        },\n        /**\r\n     * Subscript schema object (minimum overlap)\r\n     * @type {Object}\r\n     * @default\r\n     */ subscript: {\n            size: 0.60,\n            baseline: 0.11 // baseline-shift factor (downwards)\n        },\n        /**\r\n     * Background color of text lines\r\n     * @type String\r\n     * @default\r\n     */ textBackgroundColor: \"\",\n        /**\r\n     * List of properties to consider when checking if\r\n     * state of an object is changed ({@link fabric.Object#hasStateChanged})\r\n     * as well as for history (undo/redo) purposes\r\n     * @type Array\r\n     */ stateProperties: fabric.Object.prototype.stateProperties.concat(additionalProps),\n        /**\r\n     * List of properties to consider when checking if cache needs refresh\r\n     * @type Array\r\n     */ cacheProperties: fabric.Object.prototype.cacheProperties.concat(additionalProps),\n        /**\r\n     * When defined, an object is rendered via stroke and this property specifies its color.\r\n     * <b>Backwards incompatibility note:</b> This property was named \"strokeStyle\" until v1.1.6\r\n     * @type String\r\n     * @default\r\n     */ stroke: null,\n        /**\r\n     * Shadow object representing shadow of this shape.\r\n     * <b>Backwards incompatibility note:</b> This property was named \"textShadow\" (String) until v1.2.11\r\n     * @type fabric.Shadow\r\n     * @default\r\n     */ shadow: null,\n        /**\r\n     * fabric.Path that the text should follow.\r\n     * since 4.6.0 the path will be drawn automatically.\r\n     * if you want to make the path visible, give it a stroke and strokeWidth or fill value\r\n     * if you want it to be hidden, assign visible = false to the path.\r\n     * This feature is in BETA, and SVG import/export is not yet supported.\r\n     * @type fabric.Path\r\n     * @example\r\n     * var textPath = new fabric.Text('Text on a path', {\r\n     *     top: 150,\r\n     *     left: 150,\r\n     *     textAlign: 'center',\r\n     *     charSpacing: -50,\r\n     *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {\r\n     *         strokeWidth: 1,\r\n     *         visible: false\r\n     *     }),\r\n     *     pathSide: 'left',\r\n     *     pathStartOffset: 0\r\n     * });\r\n     * @default\r\n     */ path: null,\n        /**\r\n     * Offset amount for text path starting position\r\n     * Only used when text has a path\r\n     * @type Number\r\n     * @default\r\n     */ pathStartOffset: 0,\n        /**\r\n     * Which side of the path the text should be drawn on.\r\n     * Only used when text has a path\r\n     * @type {String} 'left|right'\r\n     * @default\r\n     */ pathSide: \"left\",\n        /**\r\n     * How text is aligned to the path. This property determines\r\n     * the perpendicular position of each character relative to the path.\r\n     * (one of \"baseline\", \"center\", \"ascender\", \"descender\")\r\n     * This feature is in BETA, and its behavior may change\r\n     * @type String\r\n     * @default\r\n     */ pathAlign: \"baseline\",\n        /**\r\n     * @private\r\n     */ _fontSizeFraction: 0.222,\n        /**\r\n     * @private\r\n     */ offsets: {\n            underline: 0.10,\n            linethrough: -0.315,\n            overline: -0.88\n        },\n        /**\r\n     * Text Line proportion to font Size (in pixels)\r\n     * @type Number\r\n     * @default\r\n     */ _fontSizeMult: 1.13,\n        /**\r\n     * additional space between characters\r\n     * expressed in thousands of em unit\r\n     * @type Number\r\n     * @default\r\n     */ charSpacing: 0,\n        /**\r\n     * Object containing character styles - top-level properties -> line numbers,\r\n     * 2nd-level properties - character numbers\r\n     * @type Object\r\n     * @default\r\n     */ styles: null,\n        /**\r\n     * Reference to a context to measure text char or couple of chars\r\n     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas\r\n     * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every\r\n     * text object created.\r\n     * @type {CanvasRenderingContext2D}\r\n     * @default\r\n     */ _measuringContext: null,\n        /**\r\n     * Baseline shift, styles only, keep at 0 for the main text object\r\n     * @type {Number}\r\n     * @default\r\n     */ deltaY: 0,\n        /**\r\n     * WARNING: EXPERIMENTAL. NOT SUPPORTED YET\r\n     * determine the direction of the text.\r\n     * This has to be set manually together with textAlign and originX for proper\r\n     * experience.\r\n     * some interesting link for the future\r\n     * https://www.w3.org/International/questions/qa-bidi-unicode-controls\r\n     * @since 4.5.0\r\n     * @type {String} 'ltr|rtl'\r\n     * @default\r\n     */ direction: \"ltr\",\n        /**\r\n     * Array of properties that define a style unit (of 'styles').\r\n     * @type {Array}\r\n     * @default\r\n     */ _styleProperties: [\n            \"stroke\",\n            \"strokeWidth\",\n            \"fill\",\n            \"fontFamily\",\n            \"fontSize\",\n            \"fontWeight\",\n            \"fontStyle\",\n            \"underline\",\n            \"overline\",\n            \"linethrough\",\n            \"deltaY\",\n            \"textBackgroundColor\"\n        ],\n        /**\r\n     * contains characters bounding boxes\r\n     */ __charBounds: [],\n        /**\r\n     * use this size when measuring text. To avoid IE11 rounding errors\r\n     * @type {Number}\r\n     * @default\r\n     * @readonly\r\n     * @private\r\n     */ CACHE_FONT_SIZE: 400,\n        /**\r\n     * contains the min text width to avoid getting 0\r\n     * @type {Number}\r\n     * @default\r\n     */ MIN_TEXT_WIDTH: 2,\n        /**\r\n     * Constructor\r\n     * @param {String} text Text string\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Text} thisArg\r\n     */ initialize: function(text, options) {\n            this.styles = options ? options.styles || {} : {};\n            this.text = text;\n            this.__skipDimension = true;\n            this.callSuper(\"initialize\", options);\n            if (this.path) {\n                this.setPathInfo();\n            }\n            this.__skipDimension = false;\n            this.initDimensions();\n            this.setCoords();\n            this.setupState({\n                propertySet: \"_dimensionAffectingProps\"\n            });\n        },\n        /**\r\n     * If text has a path, it will add the extra information needed\r\n     * for path and text calculations\r\n     * @return {fabric.Text} thisArg\r\n     */ setPathInfo: function() {\n            var path = this.path;\n            if (path) {\n                path.segmentsInfo = fabric.util.getPathSegmentsInfo(path.path);\n            }\n        },\n        /**\r\n     * Return a context for measurement of text string.\r\n     * if created it gets stored for reuse\r\n     * this is for internal use, please do not use it\r\n     * @private\r\n     * @param {String} text Text string\r\n     * @param {Object} [options] Options object\r\n     * @return {fabric.Text} thisArg\r\n     */ getMeasuringContext: function() {\n            // if we did not return we have to measure something.\n            if (!fabric._measuringContext) {\n                fabric._measuringContext = this.canvas && this.canvas.contextCache || fabric.util.createCanvasElement().getContext(\"2d\");\n            }\n            return fabric._measuringContext;\n        },\n        /**\r\n     * @private\r\n     * Divides text into lines of text and lines of graphemes.\r\n     */ _splitText: function() {\n            var newLines = this._splitTextIntoLines(this.text);\n            this.textLines = newLines.lines;\n            this._textLines = newLines.graphemeLines;\n            this._unwrappedTextLines = newLines._unwrappedLines;\n            this._text = newLines.graphemeText;\n            return newLines;\n        },\n        /**\r\n     * Initialize or update text dimensions.\r\n     * Updates this.width and this.height with the proper values.\r\n     * Does not return dimensions.\r\n     */ initDimensions: function() {\n            if (this.__skipDimension) {\n                return;\n            }\n            this._splitText();\n            this._clearCache();\n            if (this.path) {\n                this.width = this.path.width;\n                this.height = this.path.height;\n            } else {\n                this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;\n                this.height = this.calcTextHeight();\n            }\n            if (this.textAlign.indexOf(\"justify\") !== -1) {\n                // once text is measured we need to make space fatter to make justified text.\n                this.enlargeSpaces();\n            }\n            this.saveState({\n                propertySet: \"_dimensionAffectingProps\"\n            });\n        },\n        /**\r\n     * Enlarge space boxes and shift the others\r\n     */ enlargeSpaces: function() {\n            var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                if (this.textAlign !== \"justify\" && (i === len - 1 || this.isEndOfWrapping(i))) {\n                    continue;\n                }\n                accumulatedSpace = 0;\n                line = this._textLines[i];\n                currentLineWidth = this.getLineWidth(i);\n                if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {\n                    numberOfSpaces = spaces.length;\n                    diffSpace = (this.width - currentLineWidth) / numberOfSpaces;\n                    for(var j = 0, jlen = line.length; j <= jlen; j++){\n                        charBound = this.__charBounds[i][j];\n                        if (this._reSpaceAndTab.test(line[j])) {\n                            charBound.width += diffSpace;\n                            charBound.kernedWidth += diffSpace;\n                            charBound.left += accumulatedSpace;\n                            accumulatedSpace += diffSpace;\n                        } else {\n                            charBound.left += accumulatedSpace;\n                        }\n                    }\n                }\n            }\n        },\n        /**\r\n     * Detect if the text line is ended with an hard break\r\n     * text and itext do not have wrapping, return false\r\n     * @return {Boolean}\r\n     */ isEndOfWrapping: function(lineIndex) {\n            return lineIndex === this._textLines.length - 1;\n        },\n        /**\r\n     * Detect if a line has a linebreak and so we need to account for it when moving\r\n     * and counting style.\r\n     * It return always for text and Itext.\r\n     * @return Number\r\n     */ missingNewlineOffset: function() {\n            return 1;\n        },\n        /**\r\n     * Returns string representation of an instance\r\n     * @return {String} String representation of text object\r\n     */ toString: function() {\n            return \"#<fabric.Text (\" + this.complexity() + '): { \"text\": \"' + this.text + '\", \"fontFamily\": \"' + this.fontFamily + '\" }>';\n        },\n        /**\r\n     * Return the dimension and the zoom level needed to create a cache canvas\r\n     * big enough to host the object to be cached.\r\n     * @private\r\n     * @param {Object} dim.x width of object to be cached\r\n     * @param {Object} dim.y height of object to be cached\r\n     * @return {Object}.width width of canvas\r\n     * @return {Object}.height height of canvas\r\n     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache\r\n     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache\r\n     */ _getCacheCanvasDimensions: function() {\n            var dims = this.callSuper(\"_getCacheCanvasDimensions\");\n            var fontSize = this.fontSize;\n            dims.width += fontSize * dims.zoomX;\n            dims.height += fontSize * dims.zoomY;\n            return dims;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _render: function(ctx) {\n            var path = this.path;\n            path && !path.isNotVisible() && path._render(ctx);\n            this._setTextStyles(ctx);\n            this._renderTextLinesBackground(ctx);\n            this._renderTextDecoration(ctx, \"underline\");\n            this._renderText(ctx);\n            this._renderTextDecoration(ctx, \"overline\");\n            this._renderTextDecoration(ctx, \"linethrough\");\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderText: function(ctx) {\n            if (this.paintFirst === \"stroke\") {\n                this._renderTextStroke(ctx);\n                this._renderTextFill(ctx);\n            } else {\n                this._renderTextFill(ctx);\n                this._renderTextStroke(ctx);\n            }\n        },\n        /**\r\n     * Set the font parameter of the context with the object properties or with charStyle\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Object} [charStyle] object with font style properties\r\n     * @param {String} [charStyle.fontFamily] Font Family\r\n     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )\r\n     * @param {String} [charStyle.fontWeight] Font weight\r\n     * @param {String} [charStyle.fontStyle] Font style (italic|normal)\r\n     */ _setTextStyles: function(ctx, charStyle, forMeasuring) {\n            ctx.textBaseline = \"alphabetical\";\n            if (this.path) {\n                switch(this.pathAlign){\n                    case \"center\":\n                        ctx.textBaseline = \"middle\";\n                        break;\n                    case \"ascender\":\n                        ctx.textBaseline = \"top\";\n                        break;\n                    case \"descender\":\n                        ctx.textBaseline = \"bottom\";\n                        break;\n                }\n            }\n            ctx.font = this._getFontDeclaration(charStyle, forMeasuring);\n        },\n        /**\r\n     * calculate and return the text Width measuring each line.\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @return {Number} Maximum width of fabric.Text object\r\n     */ calcTextWidth: function() {\n            var maxWidth = this.getLineWidth(0);\n            for(var i = 1, len = this._textLines.length; i < len; i++){\n                var currentLineWidth = this.getLineWidth(i);\n                if (currentLineWidth > maxWidth) {\n                    maxWidth = currentLineWidth;\n                }\n            }\n            return maxWidth;\n        },\n        /**\r\n     * @private\r\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {String} line Text to render\r\n     * @param {Number} left Left position of text\r\n     * @param {Number} top Top position of text\r\n     * @param {Number} lineIndex Index of a line in a text\r\n     */ _renderTextLine: function(method, ctx, line, left, top, lineIndex) {\n            this._renderChars(method, ctx, line, left, top, lineIndex);\n        },\n        /**\r\n     * Renders the text background for lines, taking care of style\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderTextLinesBackground: function(ctx) {\n            if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\")) {\n                return;\n            }\n            var heightOfLine, lineLeftOffset, originalFill = ctx.fillStyle, line, lastColor, leftOffset = this._getLeftOffset(), lineTopOffset = this._getTopOffset(), boxStart = 0, boxWidth = 0, charBox, currentColor, path = this.path, drawStart;\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                heightOfLine = this.getHeightOfLine(i);\n                if (!this.textBackgroundColor && !this.styleHas(\"textBackgroundColor\", i)) {\n                    lineTopOffset += heightOfLine;\n                    continue;\n                }\n                line = this._textLines[i];\n                lineLeftOffset = this._getLineLeftOffset(i);\n                boxWidth = 0;\n                boxStart = 0;\n                lastColor = this.getValueOfPropertyAt(i, 0, \"textBackgroundColor\");\n                for(var j = 0, jlen = line.length; j < jlen; j++){\n                    charBox = this.__charBounds[i][j];\n                    currentColor = this.getValueOfPropertyAt(i, j, \"textBackgroundColor\");\n                    if (path) {\n                        ctx.save();\n                        ctx.translate(charBox.renderLeft, charBox.renderTop);\n                        ctx.rotate(charBox.angle);\n                        ctx.fillStyle = currentColor;\n                        currentColor && ctx.fillRect(-charBox.width / 2, -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction), charBox.width, heightOfLine / this.lineHeight);\n                        ctx.restore();\n                    } else if (currentColor !== lastColor) {\n                        drawStart = leftOffset + lineLeftOffset + boxStart;\n                        if (this.direction === \"rtl\") {\n                            drawStart = this.width - drawStart - boxWidth;\n                        }\n                        ctx.fillStyle = lastColor;\n                        lastColor && ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);\n                        boxStart = charBox.left;\n                        boxWidth = charBox.width;\n                        lastColor = currentColor;\n                    } else {\n                        boxWidth += charBox.kernedWidth;\n                    }\n                }\n                if (currentColor && !path) {\n                    drawStart = leftOffset + lineLeftOffset + boxStart;\n                    if (this.direction === \"rtl\") {\n                        drawStart = this.width - drawStart - boxWidth;\n                    }\n                    ctx.fillStyle = currentColor;\n                    ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);\n                }\n                lineTopOffset += heightOfLine;\n            }\n            ctx.fillStyle = originalFill;\n            // if there is text background color no\n            // other shadows should be casted\n            this._removeShadow(ctx);\n        },\n        /**\r\n     * @private\r\n     * @param {Object} decl style declaration for cache\r\n     * @param {String} decl.fontFamily fontFamily\r\n     * @param {String} decl.fontStyle fontStyle\r\n     * @param {String} decl.fontWeight fontWeight\r\n     * @return {Object} reference to cache\r\n     */ getFontCache: function(decl) {\n            var fontFamily = decl.fontFamily.toLowerCase();\n            if (!fabric.charWidthsCache[fontFamily]) {\n                fabric.charWidthsCache[fontFamily] = {};\n            }\n            var cache = fabric.charWidthsCache[fontFamily], cacheProp = decl.fontStyle.toLowerCase() + \"_\" + (decl.fontWeight + \"\").toLowerCase();\n            if (!cache[cacheProp]) {\n                cache[cacheProp] = {};\n            }\n            return cache[cacheProp];\n        },\n        /**\r\n     * measure and return the width of a single character.\r\n     * possibly overridden to accommodate different measure logic or\r\n     * to hook some external lib for character measurement\r\n     * @private\r\n     * @param {String} _char, char to be measured\r\n     * @param {Object} charStyle style of char to be measured\r\n     * @param {String} [previousChar] previous char\r\n     * @param {Object} [prevCharStyle] style of previous char\r\n     */ _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {\n            // first i try to return from cache\n            var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle), previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char, stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth, fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;\n            if (previousChar && fontCache[previousChar] !== undefined) {\n                previousWidth = fontCache[previousChar];\n            }\n            if (fontCache[_char] !== undefined) {\n                kernedWidth = width = fontCache[_char];\n            }\n            if (stylesAreEqual && fontCache[couple] !== undefined) {\n                coupleWidth = fontCache[couple];\n                kernedWidth = coupleWidth - previousWidth;\n            }\n            if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {\n                var ctx = this.getMeasuringContext();\n                // send a TRUE to specify measuring font size CACHE_FONT_SIZE\n                this._setTextStyles(ctx, charStyle, true);\n            }\n            if (width === undefined) {\n                kernedWidth = width = ctx.measureText(_char).width;\n                fontCache[_char] = width;\n            }\n            if (previousWidth === undefined && stylesAreEqual && previousChar) {\n                previousWidth = ctx.measureText(previousChar).width;\n                fontCache[previousChar] = previousWidth;\n            }\n            if (stylesAreEqual && coupleWidth === undefined) {\n                // we can measure the kerning couple and subtract the width of the previous character\n                coupleWidth = ctx.measureText(couple).width;\n                fontCache[couple] = coupleWidth;\n                kernedWidth = coupleWidth - previousWidth;\n            }\n            return {\n                width: width * fontMultiplier,\n                kernedWidth: kernedWidth * fontMultiplier\n            };\n        },\n        /**\r\n     * Computes height of character at given position\r\n     * @param {Number} line the line index number\r\n     * @param {Number} _char the character index number\r\n     * @return {Number} fontSize of the character\r\n     */ getHeightOfChar: function(line, _char) {\n            return this.getValueOfPropertyAt(line, _char, \"fontSize\");\n        },\n        /**\r\n     * measure a text line measuring all characters.\r\n     * @param {Number} lineIndex line number\r\n     * @return {Number} Line width\r\n     */ measureLine: function(lineIndex) {\n            var lineInfo = this._measureLine(lineIndex);\n            if (this.charSpacing !== 0) {\n                lineInfo.width -= this._getWidthOfCharSpacing();\n            }\n            if (lineInfo.width < 0) {\n                lineInfo.width = 0;\n            }\n            return lineInfo;\n        },\n        /**\r\n     * measure every grapheme of a line, populating __charBounds\r\n     * @param {Number} lineIndex\r\n     * @return {Object} object.width total width of characters\r\n     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs\r\n     */ _measureLine: function(lineIndex) {\n            var width = 0, i, grapheme, line = this._textLines[lineIndex], prevGrapheme, graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length), positionInPath = 0, startingPoint, totalPathLength, path = this.path, reverse = this.pathSide === \"right\";\n            this.__charBounds[lineIndex] = lineBounds;\n            for(i = 0; i < line.length; i++){\n                grapheme = line[i];\n                graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);\n                lineBounds[i] = graphemeInfo;\n                width += graphemeInfo.kernedWidth;\n                prevGrapheme = grapheme;\n            }\n            // this latest bound box represent the last character of the line\n            // to simplify cursor handling in interactive mode.\n            lineBounds[i] = {\n                left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,\n                width: 0,\n                kernedWidth: 0,\n                height: this.fontSize\n            };\n            if (path) {\n                totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;\n                startingPoint = fabric.util.getPointOnPath(path.path, 0, path.segmentsInfo);\n                startingPoint.x += path.pathOffset.x;\n                startingPoint.y += path.pathOffset.y;\n                switch(this.textAlign){\n                    case \"left\":\n                        positionInPath = reverse ? totalPathLength - width : 0;\n                        break;\n                    case \"center\":\n                        positionInPath = (totalPathLength - width) / 2;\n                        break;\n                    case \"right\":\n                        positionInPath = reverse ? 0 : totalPathLength - width;\n                        break;\n                }\n                positionInPath += this.pathStartOffset * (reverse ? -1 : 1);\n                for(i = reverse ? line.length - 1 : 0; reverse ? i >= 0 : i < line.length; reverse ? i-- : i++){\n                    graphemeInfo = lineBounds[i];\n                    if (positionInPath > totalPathLength) {\n                        positionInPath %= totalPathLength;\n                    } else if (positionInPath < 0) {\n                        positionInPath += totalPathLength;\n                    }\n                    // it would probably much faster to send all the grapheme position for a line\n                    // and calculate path position/angle at once.\n                    this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);\n                    positionInPath += graphemeInfo.kernedWidth;\n                }\n            }\n            return {\n                width: width,\n                numOfSpaces: numOfSpaces\n            };\n        },\n        /**\r\n     * Calculate the angle  and the left,top position of the char that follow a path.\r\n     * It appends it to graphemeInfo to be reused later at rendering\r\n     * @private\r\n     * @param {Number} positionInPath to be measured\r\n     * @param {Object} graphemeInfo current grapheme box information\r\n     * @param {Object} startingPoint position of the point\r\n     */ _setGraphemeOnPath: function(positionInPath, graphemeInfo, startingPoint) {\n            var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2, path = this.path;\n            // we are at currentPositionOnPath. we want to know what point on the path is.\n            var info = fabric.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);\n            graphemeInfo.renderLeft = info.x - startingPoint.x;\n            graphemeInfo.renderTop = info.y - startingPoint.y;\n            graphemeInfo.angle = info.angle + (this.pathSide === \"right\" ? Math.PI : 0);\n        },\n        /**\r\n     * Measure and return the info of a single grapheme.\r\n     * needs the the info of previous graphemes already filled\r\n     * @private\r\n     * @param {String} grapheme to be measured\r\n     * @param {Number} lineIndex index of the line where the char is\r\n     * @param {Number} charIndex position in the line\r\n     * @param {String} [prevGrapheme] character preceding the one to be measured\r\n     */ _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {\n            var style = this.getCompleteStyleDeclaration(lineIndex, charIndex), prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : {}, info = this._measureChar(grapheme, style, prevGrapheme, prevStyle), kernedWidth = info.kernedWidth, width = info.width, charSpacing;\n            if (this.charSpacing !== 0) {\n                charSpacing = this._getWidthOfCharSpacing();\n                width += charSpacing;\n                kernedWidth += charSpacing;\n            }\n            var box = {\n                width: width,\n                left: 0,\n                height: style.fontSize,\n                kernedWidth: kernedWidth,\n                deltaY: style.deltaY\n            };\n            if (charIndex > 0 && !skipLeft) {\n                var previousBox = this.__charBounds[lineIndex][charIndex - 1];\n                box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;\n            }\n            return box;\n        },\n        /**\r\n     * Calculate height of line at 'lineIndex'\r\n     * @param {Number} lineIndex index of line to calculate\r\n     * @return {Number}\r\n     */ getHeightOfLine: function(lineIndex) {\n            if (this.__lineHeights[lineIndex]) {\n                return this.__lineHeights[lineIndex];\n            }\n            var line = this._textLines[lineIndex], // char 0 is measured before the line cycle because it nneds to char\n            // emptylines\n            maxHeight = this.getHeightOfChar(lineIndex, 0);\n            for(var i = 1, len = line.length; i < len; i++){\n                maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);\n            }\n            return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;\n        },\n        /**\r\n     * Calculate text box height\r\n     */ calcTextHeight: function() {\n            var lineHeight, height = 0;\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                lineHeight = this.getHeightOfLine(i);\n                height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;\n            }\n            return height;\n        },\n        /**\r\n     * @private\r\n     * @return {Number} Left offset\r\n     */ _getLeftOffset: function() {\n            return this.direction === \"ltr\" ? -this.width / 2 : this.width / 2;\n        },\n        /**\r\n     * @private\r\n     * @return {Number} Top offset\r\n     */ _getTopOffset: function() {\n            return -this.height / 2;\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {String} method Method name (\"fillText\" or \"strokeText\")\r\n     */ _renderTextCommon: function(ctx, method) {\n            ctx.save();\n            var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset();\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                var heightOfLine = this.getHeightOfLine(i), maxHeight = heightOfLine / this.lineHeight, leftOffset = this._getLineLeftOffset(i);\n                this._renderTextLine(method, ctx, this._textLines[i], left + leftOffset, top + lineHeights + maxHeight, i);\n                lineHeights += heightOfLine;\n            }\n            ctx.restore();\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderTextFill: function(ctx) {\n            if (!this.fill && !this.styleHas(\"fill\")) {\n                return;\n            }\n            this._renderTextCommon(ctx, \"fillText\");\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderTextStroke: function(ctx) {\n            if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {\n                return;\n            }\n            if (this.shadow && !this.shadow.affectStroke) {\n                this._removeShadow(ctx);\n            }\n            ctx.save();\n            this._setLineDash(ctx, this.strokeDashArray);\n            ctx.beginPath();\n            this._renderTextCommon(ctx, \"strokeText\");\n            ctx.closePath();\n            ctx.restore();\n        },\n        /**\r\n     * @private\r\n     * @param {String} method fillText or strokeText.\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Array} line Content of the line, splitted in an array by grapheme\r\n     * @param {Number} left\r\n     * @param {Number} top\r\n     * @param {Number} lineIndex\r\n     */ _renderChars: function(method, ctx, line, left, top, lineIndex) {\n            // set proper line offset\n            var lineHeight = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf(\"justify\") !== -1, actualStyle, nextStyle, charsToRender = \"\", charBox, boxWidth = 0, timeToRender, path = this.path, shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path, isLtr = this.direction === \"ltr\", sign = this.direction === \"ltr\" ? 1 : -1, drawingLeft, currentDirection = ctx.canvas.getAttribute(\"dir\");\n            ctx.save();\n            if (currentDirection !== this.direction) {\n                ctx.canvas.setAttribute(\"dir\", isLtr ? \"ltr\" : \"rtl\");\n                ctx.direction = isLtr ? \"ltr\" : \"rtl\";\n                ctx.textAlign = isLtr ? \"left\" : \"right\";\n            }\n            top -= lineHeight * this._fontSizeFraction / this.lineHeight;\n            if (shortCut) {\n                // render all the line in one pass without checking\n                // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);\n                this._renderChar(method, ctx, lineIndex, 0, line.join(\"\"), left, top, lineHeight);\n                ctx.restore();\n                return;\n            }\n            for(var i = 0, len = line.length - 1; i <= len; i++){\n                timeToRender = i === len || this.charSpacing || path;\n                charsToRender += line[i];\n                charBox = this.__charBounds[lineIndex][i];\n                if (boxWidth === 0) {\n                    left += sign * (charBox.kernedWidth - charBox.width);\n                    boxWidth += charBox.width;\n                } else {\n                    boxWidth += charBox.kernedWidth;\n                }\n                if (isJustify && !timeToRender) {\n                    if (this._reSpaceAndTab.test(line[i])) {\n                        timeToRender = true;\n                    }\n                }\n                if (!timeToRender) {\n                    // if we have charSpacing, we render char by char\n                    actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);\n                    nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);\n                    timeToRender = fabric.util.hasStyleChanged(actualStyle, nextStyle, false);\n                }\n                if (timeToRender) {\n                    if (path) {\n                        ctx.save();\n                        ctx.translate(charBox.renderLeft, charBox.renderTop);\n                        ctx.rotate(charBox.angle);\n                        this._renderChar(method, ctx, lineIndex, i, charsToRender, -boxWidth / 2, 0, lineHeight);\n                        ctx.restore();\n                    } else {\n                        drawingLeft = left;\n                        this._renderChar(method, ctx, lineIndex, i, charsToRender, drawingLeft, top, lineHeight);\n                    }\n                    charsToRender = \"\";\n                    actualStyle = nextStyle;\n                    left += sign * boxWidth;\n                    boxWidth = 0;\n                }\n            }\n            ctx.restore();\n        },\n        /**\r\n     * This function try to patch the missing gradientTransform on canvas gradients.\r\n     * transforming a context to transform the gradient, is going to transform the stroke too.\r\n     * we want to transform the gradient but not the stroke operation, so we create\r\n     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.\r\n     * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size\r\n     * is limited.\r\n     * @private\r\n     * @param {fabric.Gradient} filler a fabric gradient instance\r\n     * @return {CanvasPattern} a pattern to use as fill/stroke style\r\n     */ _applyPatternGradientTransformText: function(filler) {\n            var pCanvas = fabric.util.createCanvasElement(), pCtx, // TODO: verify compatibility with strokeUniform\n            width = this.width + this.strokeWidth, height = this.height + this.strokeWidth;\n            pCanvas.width = width;\n            pCanvas.height = height;\n            pCtx = pCanvas.getContext(\"2d\");\n            pCtx.beginPath();\n            pCtx.moveTo(0, 0);\n            pCtx.lineTo(width, 0);\n            pCtx.lineTo(width, height);\n            pCtx.lineTo(0, height);\n            pCtx.closePath();\n            pCtx.translate(width / 2, height / 2);\n            pCtx.fillStyle = filler.toLive(pCtx);\n            this._applyPatternGradientTransform(pCtx, filler);\n            pCtx.fill();\n            return pCtx.createPattern(pCanvas, \"no-repeat\");\n        },\n        handleFiller: function(ctx, property, filler) {\n            var offsetX, offsetY;\n            if (filler.toLive) {\n                if (filler.gradientUnits === \"percentage\" || filler.gradientTransform || filler.patternTransform) {\n                    // need to transform gradient in a pattern.\n                    // this is a slow process. If you are hitting this codepath, and the object\n                    // is not using caching, you should consider switching it on.\n                    // we need a canvas as big as the current object caching canvas.\n                    offsetX = -this.width / 2;\n                    offsetY = -this.height / 2;\n                    ctx.translate(offsetX, offsetY);\n                    ctx[property] = this._applyPatternGradientTransformText(filler);\n                    return {\n                        offsetX: offsetX,\n                        offsetY: offsetY\n                    };\n                } else {\n                    // is a simple gradient or pattern\n                    ctx[property] = filler.toLive(ctx, this);\n                    return this._applyPatternGradientTransform(ctx, filler);\n                }\n            } else {\n                // is a color\n                ctx[property] = filler;\n            }\n            return {\n                offsetX: 0,\n                offsetY: 0\n            };\n        },\n        _setStrokeStyles: function(ctx, decl) {\n            ctx.lineWidth = decl.strokeWidth;\n            ctx.lineCap = this.strokeLineCap;\n            ctx.lineDashOffset = this.strokeDashOffset;\n            ctx.lineJoin = this.strokeLineJoin;\n            ctx.miterLimit = this.strokeMiterLimit;\n            return this.handleFiller(ctx, \"strokeStyle\", decl.stroke);\n        },\n        _setFillStyles: function(ctx, decl) {\n            return this.handleFiller(ctx, \"fillStyle\", decl.fill);\n        },\n        /**\r\n     * @private\r\n     * @param {String} method\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @param {String} _char\r\n     * @param {Number} left Left coordinate\r\n     * @param {Number} top Top coordinate\r\n     * @param {Number} lineHeight Height of the line\r\n     */ _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {\n            var decl = this._getStyleDeclaration(lineIndex, charIndex), fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex), shouldFill = method === \"fillText\" && fullDecl.fill, shouldStroke = method === \"strokeText\" && fullDecl.stroke && fullDecl.strokeWidth, fillOffsets, strokeOffsets;\n            if (!shouldStroke && !shouldFill) {\n                return;\n            }\n            ctx.save();\n            shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));\n            shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));\n            ctx.font = this._getFontDeclaration(fullDecl);\n            if (decl && decl.textBackgroundColor) {\n                this._removeShadow(ctx);\n            }\n            if (decl && decl.deltaY) {\n                top += decl.deltaY;\n            }\n            shouldFill && ctx.fillText(_char, left - fillOffsets.offsetX, top - fillOffsets.offsetY);\n            shouldStroke && ctx.strokeText(_char, left - strokeOffsets.offsetX, top - strokeOffsets.offsetY);\n            ctx.restore();\n        },\n        /**\r\n     * Turns the character into a 'superior figure' (i.e. 'superscript')\r\n     * @param {Number} start selection start\r\n     * @param {Number} end selection end\r\n     * @returns {fabric.Text} thisArg\r\n     * @chainable\r\n     */ setSuperscript: function(start, end) {\n            return this._setScript(start, end, this.superscript);\n        },\n        /**\r\n     * Turns the character into an 'inferior figure' (i.e. 'subscript')\r\n     * @param {Number} start selection start\r\n     * @param {Number} end selection end\r\n     * @returns {fabric.Text} thisArg\r\n     * @chainable\r\n     */ setSubscript: function(start, end) {\n            return this._setScript(start, end, this.subscript);\n        },\n        /**\r\n     * Applies 'schema' at given position\r\n     * @private\r\n     * @param {Number} start selection start\r\n     * @param {Number} end selection end\r\n     * @param {Number} schema\r\n     * @returns {fabric.Text} thisArg\r\n     * @chainable\r\n     */ _setScript: function(start, end, schema) {\n            var loc = this.get2DCursorLocation(start, true), fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, \"fontSize\"), dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, \"deltaY\"), style = {\n                fontSize: fontSize * schema.size,\n                deltaY: dy + fontSize * schema.baseline\n            };\n            this.setSelectionStyles(style, start, end);\n            return this;\n        },\n        /**\r\n     * @private\r\n     * @param {Number} lineIndex index text line\r\n     * @return {Number} Line left offset\r\n     */ _getLineLeftOffset: function(lineIndex) {\n            var lineWidth = this.getLineWidth(lineIndex), lineDiff = this.width - lineWidth, textAlign = this.textAlign, direction = this.direction, isEndOfWrapping, leftOffset = 0, isEndOfWrapping = this.isEndOfWrapping(lineIndex);\n            if (textAlign === \"justify\" || textAlign === \"justify-center\" && !isEndOfWrapping || textAlign === \"justify-right\" && !isEndOfWrapping || textAlign === \"justify-left\" && !isEndOfWrapping) {\n                return 0;\n            }\n            if (textAlign === \"center\") {\n                leftOffset = lineDiff / 2;\n            }\n            if (textAlign === \"right\") {\n                leftOffset = lineDiff;\n            }\n            if (textAlign === \"justify-center\") {\n                leftOffset = lineDiff / 2;\n            }\n            if (textAlign === \"justify-right\") {\n                leftOffset = lineDiff;\n            }\n            if (direction === \"rtl\") {\n                leftOffset -= lineDiff;\n            }\n            return leftOffset;\n        },\n        /**\r\n     * @private\r\n     */ _clearCache: function() {\n            this.__lineWidths = [];\n            this.__lineHeights = [];\n            this.__charBounds = [];\n        },\n        /**\r\n     * @private\r\n     */ _shouldClearDimensionCache: function() {\n            var shouldClear = this._forceClearCache;\n            shouldClear || (shouldClear = this.hasStateChanged(\"_dimensionAffectingProps\"));\n            if (shouldClear) {\n                this.dirty = true;\n                this._forceClearCache = false;\n            }\n            return shouldClear;\n        },\n        /**\r\n     * Measure a single line given its index. Used to calculate the initial\r\n     * text bounding box. The values are calculated and stored in __lineWidths cache.\r\n     * @private\r\n     * @param {Number} lineIndex line number\r\n     * @return {Number} Line width\r\n     */ getLineWidth: function(lineIndex) {\n            if (this.__lineWidths[lineIndex] !== undefined) {\n                return this.__lineWidths[lineIndex];\n            }\n            var lineInfo = this.measureLine(lineIndex);\n            var width = lineInfo.width;\n            this.__lineWidths[lineIndex] = width;\n            return width;\n        },\n        _getWidthOfCharSpacing: function() {\n            if (this.charSpacing !== 0) {\n                return this.fontSize * this.charSpacing / 1000;\n            }\n            return 0;\n        },\n        /**\r\n     * Retrieves the value of property at given character position\r\n     * @param {Number} lineIndex the line number\r\n     * @param {Number} charIndex the character number\r\n     * @param {String} property the property name\r\n     * @returns the value of 'property'\r\n     */ getValueOfPropertyAt: function(lineIndex, charIndex, property) {\n            var charStyle = this._getStyleDeclaration(lineIndex, charIndex);\n            if (charStyle && typeof charStyle[property] !== \"undefined\") {\n                return charStyle[property];\n            }\n            return this[property];\n        },\n        /**\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ _renderTextDecoration: function(ctx, type) {\n            if (!this[type] && !this.styleHas(type)) {\n                return;\n            }\n            var heightOfLine, size, _size, lineLeftOffset, dy, _dy, line, lastDecoration, leftOffset = this._getLeftOffset(), topOffset = this._getTopOffset(), top, boxStart, boxWidth, charBox, currentDecoration, maxHeight, currentFill, lastFill, path = this.path, charSpacing = this._getWidthOfCharSpacing(), offsetY = this.offsets[type];\n            for(var i = 0, len = this._textLines.length; i < len; i++){\n                heightOfLine = this.getHeightOfLine(i);\n                if (!this[type] && !this.styleHas(type, i)) {\n                    topOffset += heightOfLine;\n                    continue;\n                }\n                line = this._textLines[i];\n                maxHeight = heightOfLine / this.lineHeight;\n                lineLeftOffset = this._getLineLeftOffset(i);\n                boxStart = 0;\n                boxWidth = 0;\n                lastDecoration = this.getValueOfPropertyAt(i, 0, type);\n                lastFill = this.getValueOfPropertyAt(i, 0, \"fill\");\n                top = topOffset + maxHeight * (1 - this._fontSizeFraction);\n                size = this.getHeightOfChar(i, 0);\n                dy = this.getValueOfPropertyAt(i, 0, \"deltaY\");\n                for(var j = 0, jlen = line.length; j < jlen; j++){\n                    charBox = this.__charBounds[i][j];\n                    currentDecoration = this.getValueOfPropertyAt(i, j, type);\n                    currentFill = this.getValueOfPropertyAt(i, j, \"fill\");\n                    _size = this.getHeightOfChar(i, j);\n                    _dy = this.getValueOfPropertyAt(i, j, \"deltaY\");\n                    if (path && currentDecoration && currentFill) {\n                        ctx.save();\n                        ctx.fillStyle = lastFill;\n                        ctx.translate(charBox.renderLeft, charBox.renderTop);\n                        ctx.rotate(charBox.angle);\n                        ctx.fillRect(-charBox.kernedWidth / 2, offsetY * _size + _dy, charBox.kernedWidth, this.fontSize / 15);\n                        ctx.restore();\n                    } else if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) && boxWidth > 0) {\n                        var drawStart = leftOffset + lineLeftOffset + boxStart;\n                        if (this.direction === \"rtl\") {\n                            drawStart = this.width - drawStart - boxWidth;\n                        }\n                        if (lastDecoration && lastFill) {\n                            ctx.fillStyle = lastFill;\n                            ctx.fillRect(drawStart, top + offsetY * size + dy, boxWidth, this.fontSize / 15);\n                        }\n                        boxStart = charBox.left;\n                        boxWidth = charBox.width;\n                        lastDecoration = currentDecoration;\n                        lastFill = currentFill;\n                        size = _size;\n                        dy = _dy;\n                    } else {\n                        boxWidth += charBox.kernedWidth;\n                    }\n                }\n                var drawStart = leftOffset + lineLeftOffset + boxStart;\n                if (this.direction === \"rtl\") {\n                    drawStart = this.width - drawStart - boxWidth;\n                }\n                ctx.fillStyle = currentFill;\n                currentDecoration && currentFill && ctx.fillRect(drawStart, top + offsetY * size + dy, boxWidth - charSpacing, this.fontSize / 15);\n                topOffset += heightOfLine;\n            }\n            // if there is text background color no\n            // other shadows should be casted\n            this._removeShadow(ctx);\n        },\n        /**\r\n     * return font declaration string for canvas context\r\n     * @param {Object} [styleObject] object\r\n     * @returns {String} font declaration formatted for canvas context.\r\n     */ _getFontDeclaration: function(styleObject, forMeasuring) {\n            var style = styleObject || this, family = this.fontFamily, fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;\n            var fontFamily = family === undefined || family.indexOf(\"'\") > -1 || family.indexOf(\",\") > -1 || family.indexOf('\"') > -1 || fontIsGeneric ? style.fontFamily : '\"' + style.fontFamily + '\"';\n            return [\n                // node-canvas needs \"weight style\", while browsers need \"style weight\"\n                // verify if this can be fixed in JSDOM\n                fabric.isLikelyNode ? style.fontWeight : style.fontStyle,\n                fabric.isLikelyNode ? style.fontStyle : style.fontWeight,\n                forMeasuring ? this.CACHE_FONT_SIZE + \"px\" : style.fontSize + \"px\",\n                fontFamily\n            ].join(\" \");\n        },\n        /**\r\n     * Renders text instance on a specified context\r\n     * @param {CanvasRenderingContext2D} ctx Context to render on\r\n     */ render: function(ctx) {\n            // do not render if object is not visible\n            if (!this.visible) {\n                return;\n            }\n            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {\n                return;\n            }\n            if (this._shouldClearDimensionCache()) {\n                this.initDimensions();\n            }\n            this.callSuper(\"render\", ctx);\n        },\n        /**\r\n     * Returns the text as an array of lines.\r\n     * @param {String} text text to split\r\n     * @returns {Array} Lines in the text\r\n     */ _splitTextIntoLines: function(text) {\n            var lines = text.split(this._reNewline), newLines = new Array(lines.length), newLine = [\n                \"\\n\"\n            ], newText = [];\n            for(var i = 0; i < lines.length; i++){\n                newLines[i] = fabric.util.string.graphemeSplit(lines[i]);\n                newText = newText.concat(newLines[i], newLine);\n            }\n            newText.pop();\n            return {\n                _unwrappedLines: newLines,\n                lines: lines,\n                graphemeText: newText,\n                graphemeLines: newLines\n            };\n        },\n        /**\r\n     * Returns object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            var allProperties = additionalProps.concat(propertiesToInclude);\n            var obj = this.callSuper(\"toObject\", allProperties);\n            obj.styles = fabric.util.stylesToArray(this.styles, this.text);\n            if (obj.path) {\n                obj.path = this.path.toObject();\n            }\n            return obj;\n        },\n        /**\r\n     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.\r\n     * @param {String|Object} key Property name or object (if object, iterate over the object properties)\r\n     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)\r\n     * @return {fabric.Object} thisArg\r\n     * @chainable\r\n     */ set: function(key, value) {\n            this.callSuper(\"set\", key, value);\n            var needsDims = false;\n            var isAddingPath = false;\n            if (typeof key === \"object\") {\n                for(var _key in key){\n                    if (_key === \"path\") {\n                        this.setPathInfo();\n                    }\n                    needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;\n                    isAddingPath = isAddingPath || _key === \"path\";\n                }\n            } else {\n                needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;\n                isAddingPath = key === \"path\";\n            }\n            if (isAddingPath) {\n                this.setPathInfo();\n            }\n            if (needsDims) {\n                this.initDimensions();\n                this.setCoords();\n            }\n            return this;\n        },\n        /**\r\n     * Returns complexity of an instance\r\n     * @return {Number} complexity\r\n     */ complexity: function() {\n            return 1;\n        }\n    });\n    /**\r\n   * Returns fabric.Text instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Text\r\n   * @param {Object} object plain js Object to create an instance from\r\n   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created\r\n   */ fabric.Text.fromObject = function(object, callback) {\n        var objectCopy = clone(object), path = object.path;\n        delete objectCopy.path;\n        return fabric.Object._fromObject(\"Text\", objectCopy, function(textInstance) {\n            textInstance.styles = fabric.util.stylesFromArray(object.styles, object.text);\n            if (path) {\n                fabric.Object._fromObject(\"Path\", path, function(pathInstance) {\n                    textInstance.set(\"path\", pathInstance);\n                    callback(textInstance);\n                }, \"path\");\n            } else {\n                callback(textInstance);\n            }\n        }, \"text\");\n    };\n    fabric.Text.genericFonts = [\n        \"sans-serif\",\n        \"serif\",\n        \"cursive\",\n        \"fantasy\",\n        \"monospace\"\n    ];\n    fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);\n})( true ? exports : 0);\n(function() {\n    fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */ {\n        /**\r\n     * Returns true if object has no styling or no styling in a line\r\n     * @param {Number} lineIndex , lineIndex is on wrapped lines.\r\n     * @return {Boolean}\r\n     */ isEmptyStyles: function(lineIndex) {\n            if (!this.styles) {\n                return true;\n            }\n            if (typeof lineIndex !== \"undefined\" && !this.styles[lineIndex]) {\n                return true;\n            }\n            var obj = typeof lineIndex === \"undefined\" ? this.styles : {\n                line: this.styles[lineIndex]\n            };\n            for(var p1 in obj){\n                for(var p2 in obj[p1]){\n                    // eslint-disable-next-line no-unused-vars\n                    for(var p3 in obj[p1][p2]){\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n        /**\r\n     * Returns true if object has a style property or has it ina specified line\r\n     * This function is used to detect if a text will use a particular property or not.\r\n     * @param {String} property to check for\r\n     * @param {Number} lineIndex to check the style on\r\n     * @return {Boolean}\r\n     */ styleHas: function(property, lineIndex) {\n            if (!this.styles || !property || property === \"\") {\n                return false;\n            }\n            if (typeof lineIndex !== \"undefined\" && !this.styles[lineIndex]) {\n                return false;\n            }\n            var obj = typeof lineIndex === \"undefined\" ? this.styles : {\n                0: this.styles[lineIndex]\n            };\n            // eslint-disable-next-line\n            for(var p1 in obj){\n                // eslint-disable-next-line\n                for(var p2 in obj[p1]){\n                    if (typeof obj[p1][p2][property] !== \"undefined\") {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        },\n        /**\r\n     * Check if characters in a text have a value for a property\r\n     * whose value matches the textbox's value for that property.  If so,\r\n     * the character-level property is deleted.  If the character\r\n     * has no other properties, then it is also deleted.  Finally,\r\n     * if the line containing that character has no other characters\r\n     * then it also is deleted.\r\n     *\r\n     * @param {string} property The property to compare between characters and text.\r\n     */ cleanStyle: function(property) {\n            if (!this.styles || !property || property === \"\") {\n                return false;\n            }\n            var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue, allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;\n            // eslint-disable-next-line\n            for(var p1 in obj){\n                letterCount = 0;\n                // eslint-disable-next-line\n                for(var p2 in obj[p1]){\n                    var styleObject = obj[p1][p2], stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);\n                    stylesCount++;\n                    if (stylePropertyHasBeenSet) {\n                        if (!stylePropertyValue) {\n                            stylePropertyValue = styleObject[property];\n                        } else if (styleObject[property] !== stylePropertyValue) {\n                            allStyleObjectPropertiesMatch = false;\n                        }\n                        if (styleObject[property] === this[property]) {\n                            delete styleObject[property];\n                        }\n                    } else {\n                        allStyleObjectPropertiesMatch = false;\n                    }\n                    if (Object.keys(styleObject).length !== 0) {\n                        letterCount++;\n                    } else {\n                        delete obj[p1][p2];\n                    }\n                }\n                if (letterCount === 0) {\n                    delete obj[p1];\n                }\n            }\n            // if every grapheme has the same style set then\n            // delete those styles and set it on the parent\n            for(var i = 0; i < this._textLines.length; i++){\n                graphemeCount += this._textLines[i].length;\n            }\n            if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {\n                this[property] = stylePropertyValue;\n                this.removeStyle(property);\n            }\n        },\n        /**\r\n     * Remove a style property or properties from all individual character styles\r\n     * in a text object.  Deletes the character style object if it contains no other style\r\n     * props.  Deletes a line style object if it contains no other character styles.\r\n     *\r\n     * @param {String} props The property to remove from character styles.\r\n     */ removeStyle: function(property) {\n            if (!this.styles || !property || property === \"\") {\n                return;\n            }\n            var obj = this.styles, line, lineNum, charNum;\n            for(lineNum in obj){\n                line = obj[lineNum];\n                for(charNum in line){\n                    delete line[charNum][property];\n                    if (Object.keys(line[charNum]).length === 0) {\n                        delete line[charNum];\n                    }\n                }\n                if (Object.keys(line).length === 0) {\n                    delete obj[lineNum];\n                }\n            }\n        },\n        /**\r\n     * @private\r\n     */ _extendStyles: function(index, styles) {\n            var loc = this.get2DCursorLocation(index);\n            if (!this._getLineStyle(loc.lineIndex)) {\n                this._setLineStyle(loc.lineIndex);\n            }\n            if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {\n                this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});\n            }\n            fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);\n        },\n        /**\r\n     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)\r\n     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.\r\n     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.\r\n     */ get2DCursorLocation: function(selectionStart, skipWrapping) {\n            if (typeof selectionStart === \"undefined\") {\n                selectionStart = this.selectionStart;\n            }\n            var lines = skipWrapping ? this._unwrappedTextLines : this._textLines, len = lines.length;\n            for(var i = 0; i < len; i++){\n                if (selectionStart <= lines[i].length) {\n                    return {\n                        lineIndex: i,\n                        charIndex: selectionStart\n                    };\n                }\n                selectionStart -= lines[i].length + this.missingNewlineOffset(i);\n            }\n            return {\n                lineIndex: i - 1,\n                charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart\n            };\n        },\n        /**\r\n     * Gets style of a current selection/cursor (at the start position)\r\n     * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.\r\n     * @param {Number} [startIndex] Start index to get styles at\r\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n     * @param {Boolean} [complete] get full style or not\r\n     * @return {Array} styles an array with one, zero or more Style objects\r\n     */ getSelectionStyles: function(startIndex, endIndex, complete) {\n            if (typeof startIndex === \"undefined\") {\n                startIndex = this.selectionStart || 0;\n            }\n            if (typeof endIndex === \"undefined\") {\n                endIndex = this.selectionEnd || startIndex;\n            }\n            var styles = [];\n            for(var i = startIndex; i < endIndex; i++){\n                styles.push(this.getStyleAtPosition(i, complete));\n            }\n            return styles;\n        },\n        /**\r\n     * Gets style of a current selection/cursor position\r\n     * @param {Number} position  to get styles at\r\n     * @param {Boolean} [complete] full style if true\r\n     * @return {Object} style Style object at a specified index\r\n     * @private\r\n     */ getStyleAtPosition: function(position, complete) {\n            var loc = this.get2DCursorLocation(position), style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) : this._getStyleDeclaration(loc.lineIndex, loc.charIndex);\n            return style || {};\n        },\n        /**\r\n     * Sets style of a current selection, if no selection exist, do not set anything.\r\n     * @param {Object} [styles] Styles object\r\n     * @param {Number} [startIndex] Start index to get styles at\r\n     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1\r\n     * @return {fabric.IText} thisArg\r\n     * @chainable\r\n     */ setSelectionStyles: function(styles, startIndex, endIndex) {\n            if (typeof startIndex === \"undefined\") {\n                startIndex = this.selectionStart || 0;\n            }\n            if (typeof endIndex === \"undefined\") {\n                endIndex = this.selectionEnd || startIndex;\n            }\n            for(var i = startIndex; i < endIndex; i++){\n                this._extendStyles(i, styles);\n            }\n            /* not included in _extendStyles to avoid clearing cache more than once */ this._forceClearCache = true;\n            return this;\n        },\n        /**\r\n     * get the reference, not a clone, of the style object for a given character\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @return {Object} style object\r\n     */ _getStyleDeclaration: function(lineIndex, charIndex) {\n            var lineStyle = this.styles && this.styles[lineIndex];\n            if (!lineStyle) {\n                return null;\n            }\n            return lineStyle[charIndex];\n        },\n        /**\r\n     * return a new object that contains all the style property for a character\r\n     * the object returned is newly created\r\n     * @param {Number} lineIndex of the line where the character is\r\n     * @param {Number} charIndex position of the character on the line\r\n     * @return {Object} style object\r\n     */ getCompleteStyleDeclaration: function(lineIndex, charIndex) {\n            var style = this._getStyleDeclaration(lineIndex, charIndex) || {}, styleObject = {}, prop;\n            for(var i = 0; i < this._styleProperties.length; i++){\n                prop = this._styleProperties[i];\n                styleObject[prop] = typeof style[prop] === \"undefined\" ? this[prop] : style[prop];\n            }\n            return styleObject;\n        },\n        /**\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @param {Object} style\r\n     * @private\r\n     */ _setStyleDeclaration: function(lineIndex, charIndex, style) {\n            this.styles[lineIndex][charIndex] = style;\n        },\n        /**\r\n     *\r\n     * @param {Number} lineIndex\r\n     * @param {Number} charIndex\r\n     * @private\r\n     */ _deleteStyleDeclaration: function(lineIndex, charIndex) {\n            delete this.styles[lineIndex][charIndex];\n        },\n        /**\r\n     * @param {Number} lineIndex\r\n     * @return {Boolean} if the line exists or not\r\n     * @private\r\n     */ _getLineStyle: function(lineIndex) {\n            return !!this.styles[lineIndex];\n        },\n        /**\r\n     * Set the line style to an empty object so that is initialized\r\n     * @param {Number} lineIndex\r\n     * @private\r\n     */ _setLineStyle: function(lineIndex) {\n            this.styles[lineIndex] = {};\n        },\n        /**\r\n     * @param {Number} lineIndex\r\n     * @private\r\n     */ _deleteLineStyle: function(lineIndex) {\n            delete this.styles[lineIndex];\n        }\n    });\n})();\n(function() {\n    var controlsUtils = fabric.controlsUtils, scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler, scaleStyleHandler = controlsUtils.scaleCursorStyleHandler, scalingEqually = controlsUtils.scalingEqually, scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX, scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY, scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName, objectControls = fabric.Object.prototype.controls;\n    objectControls.ml = new fabric.Control({\n        x: -0.5,\n        y: 0,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingXOrSkewingY,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.mr = new fabric.Control({\n        x: 0.5,\n        y: 0,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingXOrSkewingY,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.mb = new fabric.Control({\n        x: 0,\n        y: 0.5,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingYOrSkewingX,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.mt = new fabric.Control({\n        x: 0,\n        y: -0.5,\n        cursorStyleHandler: scaleSkewStyleHandler,\n        actionHandler: scalingYOrSkewingX,\n        getActionName: scaleOrSkewActionName\n    });\n    objectControls.tl = new fabric.Control({\n        x: -0.5,\n        y: -0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.tr = new fabric.Control({\n        x: 0.5,\n        y: -0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.bl = new fabric.Control({\n        x: -0.5,\n        y: 0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.br = new fabric.Control({\n        x: 0.5,\n        y: 0.5,\n        cursorStyleHandler: scaleStyleHandler,\n        actionHandler: scalingEqually\n    });\n    objectControls.mtr = new fabric.Control({\n        x: 0,\n        y: -0.5,\n        actionHandler: controlsUtils.rotationWithSnapping,\n        cursorStyleHandler: controlsUtils.rotationStyleHandler,\n        offsetY: -40,\n        withConnection: true,\n        actionName: \"rotate\"\n    });\n    if (fabric.Textbox) {\n        // this is breaking the prototype inheritance, no time / ideas to fix it.\n        // is important to document that if you want to have all objects to have a\n        // specific custom control, you have to add it to Object prototype and to Textbox\n        // prototype. The controls are shared as references. So changes to control `tr`\n        // can still apply to all objects if needed.\n        var textBoxControls = fabric.Textbox.prototype.controls = {};\n        textBoxControls.mtr = objectControls.mtr;\n        textBoxControls.tr = objectControls.tr;\n        textBoxControls.br = objectControls.br;\n        textBoxControls.tl = objectControls.tl;\n        textBoxControls.bl = objectControls.bl;\n        textBoxControls.mt = objectControls.mt;\n        textBoxControls.mb = objectControls.mb;\n        textBoxControls.mr = new fabric.Control({\n            x: 0.5,\n            y: 0,\n            actionHandler: controlsUtils.changeWidth,\n            cursorStyleHandler: scaleSkewStyleHandler,\n            actionName: \"resizing\"\n        });\n        textBoxControls.ml = new fabric.Control({\n            x: -0.5,\n            y: 0,\n            actionHandler: controlsUtils.changeWidth,\n            cursorStyleHandler: scaleSkewStyleHandler,\n            actionName: \"resizing\"\n        });\n    }\n})();\n(function() {\n    /** ERASER_START */ /**\r\n   * add `eraser` to enlivened props\r\n   */ fabric.Object.ENLIVEN_PROPS.push(\"eraser\");\n    var __drawClipPath = fabric.Object.prototype._drawClipPath;\n    var _needsItsOwnCache = fabric.Object.prototype.needsItsOwnCache;\n    var _toObject = fabric.Object.prototype.toObject;\n    var _getSvgCommons = fabric.Object.prototype.getSvgCommons;\n    var __createBaseClipPathSVGMarkup = fabric.Object.prototype._createBaseClipPathSVGMarkup;\n    var __createBaseSVGMarkup = fabric.Object.prototype._createBaseSVGMarkup;\n    fabric.Object.prototype.cacheProperties.push(\"eraser\");\n    fabric.Object.prototype.stateProperties.push(\"eraser\");\n    /**\r\n   * @fires erasing:end\r\n   */ fabric.util.object.extend(fabric.Object.prototype, {\n        /**\r\n     * Indicates whether this object can be erased by {@link fabric.EraserBrush}\r\n     * The `deep` option introduces fine grained control over a group's `erasable` property.\r\n     * When set to `deep` the eraser will erase nested objects if they are erasable, leaving the group and the other objects untouched.\r\n     * When set to `true` the eraser will erase the entire group. Once the group changes the eraser is propagated to its children for proper functionality.\r\n     * When set to `false` the eraser will leave all objects including the group untouched.\r\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\r\n     * @type boolean | 'deep'\r\n     * @default true\r\n     */ erasable: true,\n        /**\r\n     * @tutorial {@link http://fabricjs.com/erasing#eraser}\r\n     * @type fabric.Eraser\r\n     */ eraser: undefined,\n        /**\r\n     * @override\r\n     * @returns Boolean\r\n     */ needsItsOwnCache: function() {\n            return _needsItsOwnCache.call(this) || !!this.eraser;\n        },\n        /**\r\n     * draw eraser above clip path\r\n     * @override\r\n     * @private\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     * @param {fabric.Object} clipPath\r\n     */ _drawClipPath: function(ctx, clipPath) {\n            __drawClipPath.call(this, ctx, clipPath);\n            if (this.eraser) {\n                //  update eraser size to match instance\n                var size = this._getNonTransformedDimensions();\n                this.eraser.isType(\"eraser\") && this.eraser.set({\n                    width: size.x,\n                    height: size.y\n                });\n                __drawClipPath.call(this, ctx, this.eraser);\n            }\n        },\n        /**\r\n     * Returns an object representation of an instance\r\n     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output\r\n     * @return {Object} Object representation of an instance\r\n     */ toObject: function(propertiesToInclude) {\n            var object = _toObject.call(this, [\n                \"erasable\"\n            ].concat(propertiesToInclude));\n            if (this.eraser && !this.eraser.excludeFromExport) {\n                object.eraser = this.eraser.toObject(propertiesToInclude);\n            }\n            return object;\n        }\n    });\n    var __restoreObjectsState = fabric.Group.prototype._restoreObjectsState;\n    fabric.util.object.extend(fabric.Group.prototype, {\n        /**\r\n     * @private\r\n     * @param {fabric.Path} path\r\n     */ _addEraserPathToObjects: function(path) {\n            this._objects.forEach(function(object) {\n                fabric.EraserBrush.prototype._addPathToObjectEraser.call(fabric.EraserBrush.prototype, object, path);\n            });\n        },\n        /**\r\n     * Applies the group's eraser to its objects\r\n     * @tutorial {@link http://fabricjs.com/erasing#erasable_property}\r\n     */ applyEraserToObjects: function() {\n            var _this = this, eraser = this.eraser;\n            if (eraser) {\n                delete this.eraser;\n                var transform = _this.calcTransformMatrix();\n                eraser.clone(function(eraser) {\n                    var clipPath = _this.clipPath;\n                    eraser.getObjects(\"path\").forEach(function(path) {\n                        //  first we transform the path from the group's coordinate system to the canvas'\n                        var originalTransform = fabric.util.multiplyTransformMatrices(transform, path.calcTransformMatrix());\n                        fabric.util.applyTransformToObject(path, originalTransform);\n                        if (clipPath) {\n                            clipPath.clone(function(_clipPath) {\n                                var eraserPath = fabric.EraserBrush.prototype.applyClipPathToPath.call(fabric.EraserBrush.prototype, path, _clipPath, transform);\n                                _this._addEraserPathToObjects(eraserPath);\n                            }, [\n                                \"absolutePositioned\",\n                                \"inverted\"\n                            ]);\n                        } else {\n                            _this._addEraserPathToObjects(path);\n                        }\n                    });\n                });\n            }\n        },\n        /**\r\n     * Propagate the group's eraser to its objects, crucial for proper functionality of the eraser within the group and nested objects.\r\n     * @private\r\n     */ _restoreObjectsState: function() {\n            this.erasable === true && this.applyEraserToObjects();\n            return __restoreObjectsState.call(this);\n        }\n    });\n    /**\r\n   * An object's Eraser\r\n   * @private\r\n   * @class fabric.Eraser\r\n   * @extends fabric.Group\r\n   * @memberof fabric\r\n   */ fabric.Eraser = fabric.util.createClass(fabric.Group, {\n        /**\r\n     * @readonly\r\n     * @static\r\n     */ type: \"eraser\",\n        /**\r\n     * @default\r\n     */ originX: \"center\",\n        /**\r\n     * @default\r\n     */ originY: \"center\",\n        drawObject: function(ctx) {\n            ctx.save();\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n            ctx.restore();\n            this.callSuper(\"drawObject\", ctx);\n        },\n        /**\r\n     * eraser should retain size\r\n     * dimensions should not change when paths are added or removed\r\n     * handled by {@link fabric.Object#_drawClipPath}\r\n     * @override\r\n     * @private\r\n     */ _getBounds: function() {\n        //  noop\n        }\n    });\n    /**\r\n   * Returns {@link fabric.Eraser} instance from an object representation\r\n   * @static\r\n   * @memberOf fabric.Eraser\r\n   * @param {Object} object Object to create an Eraser from\r\n   * @param {Function} [callback] Callback to invoke when an eraser instance is created\r\n   */ fabric.Eraser.fromObject = function(object, callback) {\n        var objects = object.objects;\n        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {\n            var options = fabric.util.object.clone(object, true);\n            delete options.objects;\n            fabric.util.enlivenObjectEnlivables(object, options, function() {\n                callback && callback(new fabric.Eraser(enlivenedObjects, options, true));\n            });\n        });\n    };\n    var __renderOverlay = fabric.Canvas.prototype._renderOverlay;\n    /**\r\n   * @fires erasing:start\r\n   * @fires erasing:end\r\n   */ fabric.util.object.extend(fabric.Canvas.prototype, {\n        /**\r\n     * Used by {@link #renderAll}\r\n     * @returns boolean\r\n     */ isErasing: function() {\n            return this.isDrawingMode && this.freeDrawingBrush && this.freeDrawingBrush.type === \"eraser\" && this.freeDrawingBrush._isErasing;\n        },\n        /**\r\n     * While erasing the brush clips out the erasing path from canvas\r\n     * so we need to render it on top of canvas every render\r\n     * @param {CanvasRenderingContext2D} ctx\r\n     */ _renderOverlay: function(ctx) {\n            __renderOverlay.call(this, ctx);\n            if (this.isErasing() && !this.freeDrawingBrush.inverted) {\n                this.freeDrawingBrush._render();\n            }\n        }\n    });\n    /**\r\n   * EraserBrush class\r\n   * Supports selective erasing meaning that only erasable objects are affected by the eraser brush.\r\n   * Supports **inverted** erasing meaning that the brush can \"undo\" erasing.\r\n   *\r\n   * In order to support selective erasing, the brush clips the entire canvas\r\n   * and then draws all non-erasable objects over the erased path using a pattern brush so to speak (masking).\r\n   * If brush is **inverted** there is no need to clip canvas. The brush draws all erasable objects without their eraser.\r\n   * This achieves the desired effect of seeming to erase or unerase only erasable objects.\r\n   * After erasing is done the created path is added to all intersected objects' `eraser` property.\r\n   *\r\n   * In order to update the EraserBrush call `preparePattern`.\r\n   * It may come in handy when canvas changes during erasing (i.e animations) and you want the eraser to reflect the changes.\r\n   *\r\n   * @tutorial {@link http://fabricjs.com/erasing}\r\n   * @class fabric.EraserBrush\r\n   * @extends fabric.PencilBrush\r\n   * @memberof fabric\r\n   */ fabric.EraserBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.EraserBrush.prototype */ {\n        type: \"eraser\",\n        /**\r\n       * When set to `true` the brush will create a visual effect of undoing erasing\r\n       */ inverted: false,\n        /**\r\n       * @private\r\n       */ _isErasing: false,\n        /**\r\n       *\r\n       * @private\r\n       * @param {fabric.Object} object\r\n       * @returns boolean\r\n       */ _isErasable: function(object) {\n            return object.erasable !== false;\n        },\n        /**\r\n       * @private\r\n       * This is designed to support erasing a collection with both erasable and non-erasable objects.\r\n       * Iterates over collections to allow nested selective erasing.\r\n       * Prepares the pattern brush that will draw on the top context to achieve the desired visual effect.\r\n       * If brush is **NOT** inverted render all non-erasable objects.\r\n       * If brush is inverted render all erasable objects that have been erased with their clip path inverted.\r\n       * This will render the erased parts as if they were not erased.\r\n       *\r\n       * @param {fabric.Collection} collection\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       * @param {{ visibility: fabric.Object[], eraser: fabric.Object[], collection: fabric.Object[] }} restorationContext\r\n       */ _prepareCollectionTraversal: function(collection, ctx, restorationContext) {\n            collection.forEachObject(function(obj) {\n                if (obj.forEachObject && obj.erasable === \"deep\") {\n                    //  traverse\n                    this._prepareCollectionTraversal(obj, ctx, restorationContext);\n                } else if (!this.inverted && obj.erasable && obj.visible) {\n                    //  render only non-erasable objects\n                    obj.visible = false;\n                    collection.dirty = true;\n                    restorationContext.visibility.push(obj);\n                    restorationContext.collection.push(collection);\n                } else if (this.inverted && obj.visible) {\n                    //  render only erasable objects that were erased\n                    if (obj.erasable && obj.eraser) {\n                        obj.eraser.inverted = true;\n                        obj.dirty = true;\n                        collection.dirty = true;\n                        restorationContext.eraser.push(obj);\n                        restorationContext.collection.push(collection);\n                    } else {\n                        obj.visible = false;\n                        collection.dirty = true;\n                        restorationContext.visibility.push(obj);\n                        restorationContext.collection.push(collection);\n                    }\n                }\n            }, this);\n        },\n        /**\r\n       * Prepare the pattern for the erasing brush\r\n       * This pattern will be drawn on the top context, achieving a visual effect of erasing only erasable objects\r\n       * @todo decide how overlay color should behave when `inverted === true`, currently draws over it which is undesirable\r\n       * @private\r\n       */ preparePattern: function() {\n            if (!this._patternCanvas) {\n                this._patternCanvas = fabric.util.createCanvasElement();\n            }\n            var canvas = this._patternCanvas;\n            canvas.width = this.canvas.width;\n            canvas.height = this.canvas.height;\n            var patternCtx = canvas.getContext(\"2d\");\n            if (this.canvas._isRetinaScaling()) {\n                var retinaScaling = this.canvas.getRetinaScaling();\n                this.canvas.__initRetinaScaling(retinaScaling, canvas, patternCtx);\n            }\n            var backgroundImage = this.canvas.backgroundImage, bgErasable = backgroundImage && this._isErasable(backgroundImage), overlayImage = this.canvas.overlayImage, overlayErasable = overlayImage && this._isErasable(overlayImage);\n            if (!this.inverted && (backgroundImage && !bgErasable || !!this.canvas.backgroundColor)) {\n                if (bgErasable) {\n                    this.canvas.backgroundImage = undefined;\n                }\n                this.canvas._renderBackground(patternCtx);\n                if (bgErasable) {\n                    this.canvas.backgroundImage = backgroundImage;\n                }\n            } else if (this.inverted && backgroundImage && bgErasable) {\n                var color = this.canvas.backgroundColor;\n                this.canvas.backgroundColor = undefined;\n                this.canvas._renderBackground(patternCtx);\n                this.canvas.backgroundColor = color;\n            }\n            patternCtx.save();\n            patternCtx.transform.apply(patternCtx, this.canvas.viewportTransform);\n            var restorationContext = {\n                visibility: [],\n                eraser: [],\n                collection: []\n            };\n            this._prepareCollectionTraversal(this.canvas, patternCtx, restorationContext);\n            this.canvas._renderObjects(patternCtx, this.canvas._objects);\n            restorationContext.visibility.forEach(function(obj) {\n                obj.visible = true;\n            });\n            restorationContext.eraser.forEach(function(obj) {\n                obj.eraser.inverted = false;\n                obj.dirty = true;\n            });\n            restorationContext.collection.forEach(function(obj) {\n                obj.dirty = true;\n            });\n            patternCtx.restore();\n            if (!this.inverted && (overlayImage && !overlayErasable || !!this.canvas.overlayColor)) {\n                if (overlayErasable) {\n                    this.canvas.overlayImage = undefined;\n                }\n                __renderOverlay.call(this.canvas, patternCtx);\n                if (overlayErasable) {\n                    this.canvas.overlayImage = overlayImage;\n                }\n            } else if (this.inverted && overlayImage && overlayErasable) {\n                var color = this.canvas.overlayColor;\n                this.canvas.overlayColor = undefined;\n                __renderOverlay.call(this.canvas, patternCtx);\n                this.canvas.overlayColor = color;\n            }\n        },\n        /**\r\n       * Sets brush styles\r\n       * @private\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       */ _setBrushStyles: function(ctx) {\n            this.callSuper(\"_setBrushStyles\", ctx);\n            ctx.strokeStyle = \"black\";\n        },\n        /**\r\n       * **Customiztion**\r\n       *\r\n       * if you need the eraser to update on each render (i.e animating during erasing) override this method by **adding** the following (performance may suffer):\r\n       * @example\r\n       * ```\r\n       * if(ctx === this.canvas.contextTop) {\r\n       *  this.preparePattern();\r\n       * }\r\n       * ```\r\n       *\r\n       * @override fabric.BaseBrush#_saveAndTransform\r\n       * @param {CanvasRenderingContext2D} ctx\r\n       */ _saveAndTransform: function(ctx) {\n            this.callSuper(\"_saveAndTransform\", ctx);\n            this._setBrushStyles(ctx);\n            ctx.globalCompositeOperation = ctx === this.canvas.getContext() ? \"destination-out\" : \"source-over\";\n        },\n        /**\r\n       * We indicate {@link fabric.PencilBrush} to repaint itself if necessary\r\n       * @returns\r\n       */ needsFullRender: function() {\n            return true;\n        },\n        /**\r\n       *\r\n       * @param {fabric.Point} pointer\r\n       * @param {fabric.IEvent} options\r\n       * @returns\r\n       */ onMouseDown: function(pointer, options) {\n            if (!this.canvas._isMainEvent(options.e)) {\n                return;\n            }\n            this._prepareForDrawing(pointer);\n            // capture coordinates immediately\n            // this allows to draw dots (when movement never occurs)\n            this._captureDrawingPath(pointer);\n            //  prepare for erasing\n            this.preparePattern();\n            this._isErasing = true;\n            this.canvas.fire(\"erasing:start\");\n            this._render();\n        },\n        /**\r\n       * Rendering Logic:\r\n       * 1. Use brush to clip canvas by rendering it on top of canvas (unnecessary if `inverted === true`)\r\n       * 2. Render brush with canvas pattern on top context\r\n       *\r\n       */ _render: function() {\n            var ctx;\n            if (!this.inverted) {\n                //  clip canvas\n                ctx = this.canvas.getContext();\n                this.callSuper(\"_render\", ctx);\n            }\n            //  render brush and mask it with image of non erasables\n            ctx = this.canvas.contextTop;\n            this.canvas.clearContext(ctx);\n            this.callSuper(\"_render\", ctx);\n            ctx.save();\n            var t = this.canvas.getRetinaScaling(), s = 1 / t;\n            ctx.scale(s, s);\n            ctx.globalCompositeOperation = \"source-in\";\n            ctx.drawImage(this._patternCanvas, 0, 0);\n            ctx.restore();\n        },\n        /**\r\n       * Creates fabric.Path object\r\n       * @override\r\n       * @private\r\n       * @param {(string|number)[][]} pathData Path data\r\n       * @return {fabric.Path} Path to add on canvas\r\n       * @returns\r\n       */ createPath: function(pathData) {\n            var path = this.callSuper(\"createPath\", pathData);\n            path.globalCompositeOperation = this.inverted ? \"source-over\" : \"destination-out\";\n            path.stroke = this.inverted ? \"white\" : \"black\";\n            return path;\n        },\n        /**\r\n       * Utility to apply a clip path to a path.\r\n       * Used to preserve clipping on eraser paths in nested objects.\r\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\r\n       * @param {fabric.Path} path The eraser path in canvas coordinate plane\r\n       * @param {fabric.Object} clipPath The clipPath to apply to the path\r\n       * @param {number[]} clipPathContainerTransformMatrix The transform matrix of the object that the clip path belongs to\r\n       * @returns {fabric.Path} path with clip path\r\n       */ applyClipPathToPath: function(path, clipPath, clipPathContainerTransformMatrix) {\n            var pathInvTransform = fabric.util.invertTransform(path.calcTransformMatrix()), clipPathTransform = clipPath.calcTransformMatrix(), transform = clipPath.absolutePositioned ? pathInvTransform : fabric.util.multiplyTransformMatrices(pathInvTransform, clipPathContainerTransformMatrix);\n            //  when passing down a clip path it becomes relative to the parent\n            //  so we transform it acoordingly and set `absolutePositioned` to false\n            clipPath.absolutePositioned = false;\n            fabric.util.applyTransformToObject(clipPath, fabric.util.multiplyTransformMatrices(transform, clipPathTransform));\n            //  We need to clip `path` with both `clipPath` and it's own clip path if existing (`path.clipPath`)\n            //  so in turn `path` erases an object only where it overlaps with all it's clip paths, regardless of how many there are.\n            //  this is done because both clip paths may have nested clip paths of their own (this method walks down a collection => this may reccur),\n            //  so we can't assign one to the other's clip path property.\n            path.clipPath = path.clipPath ? fabric.util.mergeClipPaths(clipPath, path.clipPath) : clipPath;\n            return path;\n        },\n        /**\r\n       * Utility to apply a clip path to a path.\r\n       * Used to preserve clipping on eraser paths in nested objects.\r\n       * Called when a group has a clip path that should be applied to the path before applying erasing on the group's objects.\r\n       * @param {fabric.Path} path The eraser path\r\n       * @param {fabric.Object} object The clipPath to apply to path belongs to object\r\n       * @param {Function} callback Callback to be invoked with the cloned path after applying the clip path\r\n       */ clonePathWithClipPath: function(path, object, callback) {\n            var objTransform = object.calcTransformMatrix();\n            var clipPath = object.clipPath;\n            var _this = this;\n            path.clone(function(_path) {\n                clipPath.clone(function(_clipPath) {\n                    callback(_this.applyClipPathToPath(_path, _clipPath, objTransform));\n                }, [\n                    \"absolutePositioned\",\n                    \"inverted\"\n                ]);\n            });\n        },\n        /**\r\n       * Adds path to object's eraser, walks down object's descendants if necessary\r\n       *\r\n       * @fires erasing:end on object\r\n       * @param {fabric.Object} obj\r\n       * @param {fabric.Path} path\r\n       */ _addPathToObjectEraser: function(obj, path) {\n            var _this = this;\n            //  object is collection, i.e group\n            if (obj.forEachObject && obj.erasable === \"deep\") {\n                var targets = obj._objects.filter(function(_obj) {\n                    return _obj.erasable;\n                });\n                if (targets.length > 0 && obj.clipPath) {\n                    this.clonePathWithClipPath(path, obj, function(_path) {\n                        targets.forEach(function(_obj) {\n                            _this._addPathToObjectEraser(_obj, _path);\n                        });\n                    });\n                } else if (targets.length > 0) {\n                    targets.forEach(function(_obj) {\n                        _this._addPathToObjectEraser(_obj, path);\n                    });\n                }\n                return;\n            }\n            //  prepare eraser\n            var eraser = obj.eraser;\n            if (!eraser) {\n                eraser = new fabric.Eraser();\n                obj.eraser = eraser;\n            }\n            //  clone and add path\n            path.clone(function(path) {\n                // http://fabricjs.com/using-transformations\n                var desiredTransform = fabric.util.multiplyTransformMatrices(fabric.util.invertTransform(obj.calcTransformMatrix()), path.calcTransformMatrix());\n                fabric.util.applyTransformToObject(path, desiredTransform);\n                eraser.addWithUpdate(path);\n                obj.set(\"dirty\", true);\n                obj.fire(\"erasing:end\", {\n                    path: path\n                });\n                if (obj.group && Array.isArray(_this.__subTargets)) {\n                    _this.__subTargets.push(obj);\n                }\n            });\n        },\n        /**\r\n       * Add the eraser path to canvas drawables' clip paths\r\n       *\r\n       * @param {fabric.Canvas} source\r\n       * @param {fabric.Canvas} path\r\n       * @returns {Object} canvas drawables that were erased by the path\r\n       */ applyEraserToCanvas: function(path) {\n            var canvas = this.canvas;\n            var drawables = {};\n            [\n                \"backgroundImage\",\n                \"overlayImage\"\n            ].forEach(function(prop) {\n                var drawable = canvas[prop];\n                if (drawable && drawable.erasable) {\n                    this._addPathToObjectEraser(drawable, path);\n                    drawables[prop] = drawable;\n                }\n            }, this);\n            return drawables;\n        },\n        /**\r\n       * On mouseup after drawing the path on contextTop canvas\r\n       * we use the points captured to create an new fabric path object\r\n       * and add it to every intersected erasable object.\r\n       */ _finalizeAndAddPath: function() {\n            var ctx = this.canvas.contextTop, canvas = this.canvas;\n            ctx.closePath();\n            if (this.decimate) {\n                this._points = this.decimatePoints(this._points, this.decimate);\n            }\n            // clear\n            canvas.clearContext(canvas.contextTop);\n            this._isErasing = false;\n            var pathData = this._points && this._points.length > 1 ? this.convertPointsToSVGPath(this._points) : null;\n            if (!pathData || this._isEmptySVGPath(pathData)) {\n                canvas.fire(\"erasing:end\");\n                // do not create 0 width/height paths, as they are\n                // rendered inconsistently across browsers\n                // Firefox 4, for example, renders a dot,\n                // whereas Chrome 10 renders nothing\n                canvas.requestRenderAll();\n                return;\n            }\n            var path = this.createPath(pathData);\n            //  needed for `intersectsWithObject`\n            path.setCoords();\n            //  commense event sequence\n            canvas.fire(\"before:path:created\", {\n                path: path\n            });\n            // finalize erasing\n            var drawables = this.applyEraserToCanvas(path);\n            var _this = this;\n            this.__subTargets = [];\n            var targets = [];\n            canvas.forEachObject(function(obj) {\n                if (obj.erasable && obj.intersectsWithObject(path, true, true)) {\n                    _this._addPathToObjectEraser(obj, path);\n                    targets.push(obj);\n                }\n            });\n            //  fire erasing:end\n            canvas.fire(\"erasing:end\", {\n                path: path,\n                targets: targets,\n                subTargets: this.__subTargets,\n                drawables: drawables\n            });\n            delete this.__subTargets;\n            canvas.requestRenderAll();\n            this._resetShadow();\n            // fire event 'path' created\n            canvas.fire(\"path:created\", {\n                path: path\n            });\n        }\n    });\n/** ERASER_END */ })();\n\n\n/***/ }),\n\n/***/ 6734:\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 6907:\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 4866:\n/***/ (function() {\n\n/* (ignored) */\n\n/***/ })\n\n},\n/******/ function(__webpack_require__) { // webpackRuntimeModules\n/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }\n/******/ __webpack_require__.O(0, [774,937,866,609,980,445,617,943,50,888,179], function() { return __webpack_exec__(8312); });\n/******/ var __webpack_exports__ = __webpack_require__.O();\n/******/ _N_E = __webpack_exports__;\n/******/ }\n]);"],"names":["self","push","__unused_webpack_module","__unused_webpack_exports","__webpack_require__","window","__NEXT_P","__webpack_exports__","r","d","HomePage","jsx_runtime","head","head_default","n","react","CanvasContext","createContext","displayName","src_useCanvas","canvasId","_context_canvases_canvasId","context","useContext","canvases","ToolsContext","useTools","usePopper","es","index_esm","fa_index_esm","go_index_esm","gi_index_esm","io_index_esm","im_index_esm","CanvasTools","nameInputRef","useRef","fileInputRef","fileTypeRef","activeCanvas","backgroundColor","setBackgroundColor","selectedObjects","lockedObjects","lockSelection","unlockSelection","bringForward","sendBackward","duplicate","deleteSelection","undo","redo","canUndo","canRedo","brushColor","setBrushColor","brushSize","setBrushSize","hueRotate","setHueRotate","saturation","setSaturation","brightness","setBrightness","activeCanvasType","addImages","exportSkin","isDrawingMode","setDrawingMode","isMac","setIsMac","useState","commandKeyPrefix","referenceElement","setReferenceElement","popperElement","setPopperElement","arrowElement","setArrowElement","isBrushToolsOpen","setBrushToolsOpen","isFilterToolsOpen","setFilterToolsOpen","styles","attributes","D","modifiers","name","options","element","offset","length","isSelectionLocked","every","has","object","handleBackgroundColorChange","event","target","value","useEffect","navigator","platform","startsWith","userAgent","match","focus","jsxs","className","children","jsx","type","id","checked","onChange","htmlFor","Fragment","ref","imageUrl","Promise","resolve","reject","_event_target_files","inputFile","files","reader","FileReader","addEventListener","_event_target","result","readAsDataURL","accept","hidden","title","current","click","yAv","style","fontSize","undefined","disabled","isOpen","J76","popper","tabIndex","newFocusElement","relatedTarget","isFocusLeaving","currentTarget","contains","Math","round","Z","min","max","startPoint","Array","isArray","trackStyle","height","background","handleStyle","width","marginTop","borderColor","opacity","railStyle","border","concat","arrow","onClick","D5B","kUi","KhA","O9L","xvH","AMf","UIL","rks","Pvc","VUP","display","placeholder","size","format","config","config_default","fabric","WarriorContext","useWarrior","createFabricImage","url","Image","fromURL","crossOrigin","comlink","Worker_fn","Worker","p","useImageWorker","workerRef","functionsRef","useMemo","getFunctions","combineColorAndAlphaImageUrls","_len","arguments","args","_key","functions","removeAlphaFromArrayBuffer","convertArrayBufferAlphaToGrayscale","convertGrayscaleImageUrlToMetallicRoughness","worker","Ud","Yy","terminate","useSettings","canvasPadding","basePath","imageUrlToArrayBuffer","response","fetch","ok","arrayBuffer","publicRuntimeConfig","materials","ToolsProvider","param","_materialDefs_selectedMaterialIndex","_materialDef_size","actualModel","selectedModelType","selectedMaterialIndex","setSelectedMaterialIndex","materialDefs","materialDef","textureSize","hasMetallic","metallicFactor","roughnessFactor","setActiveCanvasType","setLockedObjects","Set","filterMap","setFilterMap","Map","setSelectedObjects","metallicCanvasId","canvas","notifyChange","metallicCanvas","filterChanges","setFilterChanges","getFilter","_filterMap_get","_name","getValue","get","i","firstValue","slice","selectedObject","setFilter","useCallback","newFilterMap","existingFilters","newFilters","set","key","filters","_newFilters_key","filterValue","HueRotation","rotation","Saturation","Brightness","applyFilters","newLockedObjects","add","lockMovementX","lockMovementY","lockScalingX","lockScalingY","lockRotation","delete","getActiveObject","_objects","sendBackwards","imageUrls","lastAddedImage","image","widthRatio","heightRatio","scale","scaleX","scaleY","grayscaleFilter","Grayscale","centerObject","setActiveObject","_copy_top","_copy_left","copy","clone","top","left","evented","forEachObject","setCoords","discardActiveObject","objects","getActiveObjects","remove","requestRenderAll","savePngFile","saveZipFile","createZipFile","all","e","then","bind","trim","materialExports","filter","map","_canvases_","_canvases_1","_materialDef_file","outputImageUrl","filename","colorCanvas","colorImageUrl","toDataURL","metallicImageUrl","file","materialExport","data","zip","camelCaseName","replace","a","b","toUpperCase","zipFileName","handleSelectionUpdated","on","off","freeDrawingBrush","color","Provider","CanvasBackdrop","CanvasProvider","setCanvases","registerCanvas","canvasInfo","unregisterCanvas","rest","CanvasInteractions","nudge","_object_top","_object_left","onDrop","preventDefault","items","dataTransfer","images","from","item","kind","droppedImageFile","getAsFile","onload","Boolean","onKeyDown","nodeName","ctrlKey","metaKey","altKey","shiftKey","CanvasToggle","ai_index_esm","WarriorSelector_publicRuntimeConfig","defaultSkins","customSkins","modelDefaults","WarriorSelector_materials","WarriorSelector","_defaultSkins_actualModel","_customSkins_actualModel","_customSkins_actualModel1","selectedModel","setSelectedModel","setSelectedModelType","selectedSkin","setSelectedSkin","setSelectedSkinType","setSelectedAnimation","setSkinImageUrls","setAnimationPaused","_defaultSkins_newSelectedModel","_customSkins_newSelectedModel","_modelDefaults_newSelectedModel","parentNode","selectedOptions","newSelectedModel","modelType","dataset","newModelHasSkin","includes","label","_parentNode_dataset_skinType","skinType","FjK","WarriorProvider_publicRuntimeConfig","WarriorProvider_materials","WarriorProvider_modelDefaults","baseSkinPath","getSkinImageUrls","selectedSkinType","base","reduce","skinImageUrls","_materialDef_file1","hasDefault","WarriorProvider","selectedAnimation","animationPaused","selectedModelUrl","defaultSkinImageUrls","dynamic","dynamic_default","EnvironmentContext","useEnvironment","SkinContext","useSkin","useModelViewer","useTexture","material","textureType","modelViewer","stale","updateTexture","setAlphaMode","pbrMetallicRoughness","setBaseColorFactor","alphaMode","alphaCutoff","baseColorFactor","emissiveFactor","emissiveTexture","textureUrl","setAlphaCutoff","setEmissiveFactor","setMetallicFactor","setRoughnessFactor","texture","createTexture","setTexture","Material","_getSkinImages","getSkinImages","Materials_publicRuntimeConfig","Materials_materials","Materials","model","_materialDefs_find","find","index","ModelViewer","loadableGenerated","webpack","ssr","WarriorViewer_publicRuntimeConfig","cameraOverrides","WarriorViewer","_cameraOverrides_selectedModel","_cameraOverrides_selectedModel1","environmentImageUrl","modelUrl","animationName","cameraOrbit","cameraTarget","fieldOfView","fov","EnvironmentSelector","selectedEnvironment","setSelectedEnvironment","AnimationSelector_publicRuntimeConfig","animations","animationLabels","animationLabelOverrides","AnimationSelector","_animations_actualModel","animationList","global","_animationLabelOverrides_actualModel","_animationLabelOverrides_actualModel_animationName","v$e","IWN","EnvironmentProvider","SkinProvider","materialSkins","setMaterialSkins","setters","setSkinImages","materialName","skinImages","setColorImageUrl","setMetallicImageUrl","getColorImageUrl","getMetallicImageUrl","MaterialSelector_publicRuntimeConfig","MaterialSelector_materials","MaterialSelector","_materialDef_label","parseInt","Canvas","baseImageUrl","defaultDrawingMode","canvasElementRef","setCanvas","handleChangeRef","trackChanges","undoHistory","setUndoHistory","redoHistory","setRedoHistory","handleChange","restoreState","currentState","renderOnAddRemove","clear","loadFromJSON","renderAll","nextState","isActive","changeTimer","Object","prototype","transparentCorners","cornerSize","cornerStyle","cornerColor","cornerStrokeColor","strokeWidth","perPixelTargetFind","preserveObjectStacking","targetFindTolerance","isSnapshotting","handleChangeWithCanvasArg","handleRender","clearTimeout","setTimeout","snapshot","snapshotCanvas","history","toJSON","dispose","calcOffset","addImage","selectable","hoverCursor","moveCursor","expectedWidth","expectedHeight","ImageLoaderContext","useImageLoader","defaultTextureSize","ColorCanvas","skinImageUrl","defaultSkinImageUrl","noAlphaImageUrl","setNoAlphaImageUrl","loadImage","generateImageUrl","err","canvasType","MetallicCanvas_defaultTextureSize","MetallicCanvas","alphaImageUrl","setAlphaImageUrl","runningChangeHandlers","MaterialCanvases_publicRuntimeConfig","MaterialCanvases_materials","MaterialCanvases","QueryClientProvider","ImageLoaderProvider","queryClient","NL","fetchQuery","queryKey","imageFetcher","pages_queryClient","S","defaultOptions","queries","queryFn","staleTime","Infinity","cacheTime","refetchOnWindowFocus","refetchOnReconnect","aH","client","ModelViewerContext","react__WEBPACK_IMPORTED_MODULE_0__","exports","extend","toFixed","capitalize","degreesToRadians","objectCaching","sqrt","atan2","pow","PiBy180","PiBy2","couldUseAttachEvent","touchEvents","parseEl","supportsOpacity","supportsFilters","reOpacity","setOpacity","controls","originXOffset","originYOffset","util","multiplyMatrices","transformPoint","createClass","floor","abs","sin","ceil","__drawClipPath","_needsItsOwnCache","_toObject","__restoreObjectsState","__renderOverlay","Buffer","version","document","HTMLDocument","Document","implementation","createHTMLDocument","virtualWindow","jsdom","JSDOM","decodeURIComponent","features","FetchExternalResources","resources","jsdomImplForWrapper","implForWrapper","nodeCanvas","DOMParser","copyGLTo2DDrawImage","gl","pipelineState","glCanvas","targetCanvas","ctx","getContext","translate","sourceY","drawImage","copyGLTo2DPutImageData","dWidth","destinationWidth","dHeight","destinationHeight","numBytes","u8","Uint8Array","imageBuffer","u8Clamped","Uint8ClampedArray","readPixels","RGBA","UNSIGNED_BYTE","imgData","ImageData","putImageData","isTouchSupported","maxTouchPoints","isLikelyNode","DPI","reNum","commaWsp","rePathCommand","reNonWord","fontPaths","iMatrix","svgNS","perfLimitSizeTotal","maxCacheSideLimit","minCacheSideLimit","charWidthsCache","disableStyleCopyPaste","enableGLFiltering","devicePixelRatio","webkitDevicePixelRatio","mozDevicePixelRatio","browserShadowBlurConstant","arcToSegmentsCache","boundsOfCurveCache","cachesBoundsOfCurve","forceGLPutImageData","initFilterBackend","isWebglSupported","console","log","maxTextureSize","WebglFilterBackend","tileSize","Canvas2dFilterBackend","_removeEventListener","eventName","handler","__eventListeners","eventListener","indexOf","array","fill","_once","_handler","apply","Observable","fire","listenersForEvent","len","call","prop","once","Collection","_onObjectAdded","insertAt","nonSplicing","splice","somethingRemoved","_onObjectRemoved","callback","getObjects","o","isEmpty","deep","some","obj","complexity","memo","CommonMethods","_setOptions","_initGradient","filler","property","colorStops","Gradient","_initPattern","source","Pattern","_setObject","_set","toggle","PI","cos","angle","sign","removeFromArray","idx","getRandomInt","random","degrees","radiansToDegrees","radians","rotatePoint","point","origin","newPoint","Point","x","y","v","rotateVector","addEquals","vector","createVector","to","calcAngleBetweenVectors","acos","hypot","getHatVector","multiply","getBisector","A","B","C","AB","AC","alpha","ro","projectStrokeOnPoints","points","openPath","coords","s","strokeUniformScalar","strokeUniform","getStrokeHatVector","scalar","forEach","miterVector","bisector","bisectorVector","strokeLineJoin","strokeMiterLimit","subtract","SQRT2","t","ignoreOffset","makeBoundingBoxFromPoints","transform","xPoints","minX","maxX","yPoints","minY","maxY","invertTransform","number","fractionDigits","parseFloat","Number","parseUnit","unit","exec","Text","DEFAULT_SVG_FONT_SIZE","falseFunction","getKlass","namespace","string","camelize","charAt","resolveNamespace","getSvgAttributes","parts","split","img","createImage","onLoadCallback","onerror","src","substring","loadImageInDom","div","createElement","position","appendChild","querySelector","removeChild","enlivenObjects","reviver","enlivenedObjects","numLoadedObjects","numTotalObjects","onLoaded","fromObject","error","enlivenObjectEnlivables","enlivenProps","ENLIVEN_PROPS","enlivedProps","enlivenPatterns","patterns","numLoadedPatterns","numPatterns","enlivenedPatterns","pattern","groupSVGElements","elements","path","centerPoint","Group","sourcePath","populateWithProperties","destination","properties","createCanvasElement","copyCanvasElement","newCanvas","canvasEl","quality","multiplyTransformMatrices","is2x2","qrDecompose","denom","skewX","skewY","translateX","translateY","calcRotateMatrix","theta","calcDimensionsMatrix","scaleMatrix","flipX","flipY","tan","composeMatrix","matrix","resetObjectTransform","rotate","saveObjectTransform","isTransparent","tolerance","_isTransparent","imageData","getImageData","l","temp","parsePreserveAspectRatioAttribute","attribute","align","meetOrSlice","alignX","alignY","aspectRatioAttrs","pop","clearFabricFontCache","fontFamily","toLowerCase","limitDimsByArea","ar","maximumArea","roughWidth","capValue","findScaleToFit","findScaleToCover","matrixToSVG","NUM_FRACTION_DIGITS","join","removeTransformFromObject","inverted","finalTransform","calcOwnMatrix","applyTransformToObject","addTransformToObject","center","setPositionByOrigin","sizeAfterTransform","dimX","dimY","transformMatrix","bbox","mergeClipPaths","c1","c2","calcTransformMatrix","clipPath","hasStyleChanged","prevStyle","thisStyle","forTextSpans","stroke","fontWeight","fontStyle","deltaY","overline","underline","linethrough","stylesToArray","text","textLines","charIndex","stylesArray","c","start","end","stylesFromArray","styleIndex","stylesObject","assign","_join","commandLengths","m","h","q","repeatedCommands","M","calcVectorAngle","ux","uy","vx","vy","ta","tb","calcLineLength","x1","y1","x2","y2","pathIterator","iterator","perc","tempP","tmpLen","getPathSegmentsInfo","tempInfo","angleFinder","totalLength","info","command","getPointOnCubicBezierIterator","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","pct","c3","c4","getTangentCubicIterator","invT","getPointOnQuadraticBezierIterator","getTangentQuadraticIterator","destX","destY","joinPath","pathData","segment","parsePath","pathString","currentPath","parsed","coordsStr","re","rNumber","rNumberCommaWsp","rFlagCommaWsp","regArcArgumentSequence","coordsParsed","j","jlen","isNaN","commandLength","repeatedCommand","k","klen","makePathSimpler","converted","previous","controlX","controlY","destinationPath","fromArcToBeziers","fx","fy","rx","ry","rot","large","sweep","segsNorm","arcToSegments","toX","toY","rotateX","th","sinTh","cosTh","fromX","fromY","px","py","rx2","ry2","py2","px2","pl","root","cx","cy","cx1","cy1","mTheta","dtheta","segments","mDelta","mT","th3","segmentToBezier","th2","costh2","sinth2","costh3","sinth3","tx","ty","getSmoothPathFromPoints","correction","p1","p2","multSignX","multSignY","manyPoints","eq","midPoint","midPointFrom","getBoundsOfCurve","x0","y0","x3","y3","argsString","t1","t2","b2ac","sqrtb2ac","tvalues","bounds","mt","getPointOnPath","distance","infos","segInfo","segPercent","lerp","findPercentageForDistance","nextLen","lastPerc","nextStep","transformPath","pathOffset","pathSegment","newSegment","byProperty","condition","invoke","method","value1","value2","Element","hasOwnProperty","character","firstLetterOnly","escapeXml","graphemeSplit","textstring","chr","graphemes","getWholeChar","str","code","charCodeAt","next","prev","emptyFunction","IS_DONTENUM_BUGGY","toString","addMethods","klass","parent","superclass","constructor","returnValue","valueOf","Subclass","callSuper","methodName","parentMethod","_this","superClassMethod","initialize","shift","subclasses","attachEvent","addListener","removeListener","removeEventListener","getPointer","touchProp","scroll","getScrollLeftTop","_evt","changedTouches","clientX","clientY","isTouchEvent","pointerType","currentStyle","hasLayout","zoom","test","setStyle","elementStyle","cssText","normalizedProperty","styleFloat","setProperty","selectProp","getElementStyle","sliceCanConvertNodelists","_slice","toArray","arrayLike","childNodes","makeElement","tagName","el","setAttribute","docElement","documentElement","body","scrollLeft","scrollTop","host","nodeType","arr","defaultView","getComputedStyle","attr","makeElementUnselectable","onselectstart","unselectable","makeElementSelectable","setImageSmoothing","imageSmoothingEnabled","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","getById","getElementById","addClass","wrapElement","wrapper","replaceChild","getElementOffset","docElem","scrollLeftTop","doc","ownerDocument","box","offsetAttributes","borderLeftWidth","borderTopWidth","paddingLeft","paddingTop","getBoundingClientRect","clientLeft","clientTop","getNodeCanvas","impl","_canvas","_image","cleanUpJsdomNode","_currentSrc","_attributes","_classList","emptyFn","request","onComplete","xhr","XMLHttpRequest","parameters","onreadystatechange","readyState","open","setRequestHeader","send","warn","RUNNING_ANIMATIONS","noop","defaultEasing","cancelAll","animation","cancel","cancelByCanvas","cancelled","cancelByTarget","findAnimationsByTarget","findAnimationIndex","cancelFunc","findAnimation","_requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","_cancelAnimFrame","cancelAnimationFrame","requestAnimFrame","animate","removeFromRegistry","runningAnimations","currentValue","startValue","completionRate","durationRate","timestamp","time","Date","duration","finish","abort","easing","isMany","endValue","byValue","onStart","tick","ticktime","currentTime","timePerc","_value","valuePerc","cancelAnimFrame","calculateColor","begin","pos","animateColor","fromColor","toColor","startColor","Color","getSource","endColor","originalOnComplete","originalOnChange","colorEasing","that","scalarAdd","scalarAddEquals","subtractEquals","scalarSubtract","scalarSubtractEquals","multiplyEquals","divide","divideEquals","lt","lte","gt","gte","distanceFrom","dx","dy","setXY","setX","setY","setFromPoint","swap","Intersection","status","appendPoint","appendPoints","intersectLineLine","a1","a2","b1","b2","uaT","ubT","uB","ua","ub","intersectLinePolygon","inter","intersectPolygonPolygon","points1","points2","intersectPolygonRectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","_tryParsingColor","setSource","hue2rgb","colorNameMap","sourceFromHex","sourceFromRgb","sourceFromHsl","_rgbToHsl","g","_source","toRgb","toRgba","toHsl","hsl","toHsla","toHex","toHexa","getAlpha","setAlpha","toGrayscale","average","currentAlpha","toBlackWhite","threshold","overlayWith","otherColor","otherSource","reRGBa","reHSLa","reHex","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","fromRgb","fromSource","fromRgba","fromHsl","fromHsla","fromHex","isShortNotation","isRGBa","oColor","scaleMap","skewMap","LEFT","RIGHT","BOTTOM","CENTER","opposite","bottom","right","findCornerQuadrant","fabricObject","control","cornerAngle","fireEvent","canvasOptions","scaleIsProportional","eventData","uniformIsToggled","uniScaleKey","uniformScaling","isTransformCentered","originX","originY","scalingIsForbidden","by","scaleProportionally","lockX","lockY","commonEventInfo","pointer","wrapWithFixedAnchor","actionHandler","getCenterPoint","constraint","translateToOriginPoint","actionPerformed","wrapWithFireEvent","getLocalPoint","corner","getZoom","padding","localPoint","toLocalPoint","offsetX","offsetY","targetHasOneFlip","compensateScaleForSkew","oppositeSkew","scaleToCompensate","axis","reference","newValue","_getTransformedDimensions","skewObjectX","newSkew","dimNoSkew","totalSkewSize","currentSkew","hasSkewed","dimBeforeSkewing","skewObjectY","scaleObject","dim","signX","signY","forbidScaling","gestureScale","lockScalingFlip","original","oldScaleX","oldScaleY","scaleCursorStyleHandler","skewCursorStyleHandler","lockSkewingY","lockSkewingX","scaleSkewCursorStyleHandler","altActionKey","rotationWithSnapping","pivotPoint","lastAngle","ey","ex","curAngle","hasRotated","snapAngle","snapThreshold","rightAngleLocked","leftAngleLocked","scalingEqually","scalingX","scalingY","scalingYOrSkewingX","skewHandlerX","scalingXOrSkewingY","skewHandlerY","changeWidth","strokePadding","multiplier","oldWidth","newWidth","localPointFromCenter","finalHandler","dragHandler","newLeft","newTop","moveX","moveY","scaleOrSkewActionName","isAlternative","rotationStyleHandler","cursorStyle","controlsUtils","renderCircleControl","styleOverride","xSize","sizeX","ySize","sizeY","myLeft","myTop","save","fillStyle","strokeStyle","lineWidth","beginPath","arc","restore","renderSquareControl","xSizeBy2","ySizeBy2","strokeRect","Control","visible","actionName","touchSizeX","touchSizeY","withConnection","mouseDownHandler","mouseUpHandler","getActionHandler","getMouseDownHandler","getMouseUpHandler","cursorStyleHandler","getActionName","getVisibility","controlKey","objectVisibility","_controlsVisibility","setVisibility","visibility","positionHandler","finalMatrix","calcCornerCoords","objectAngle","objectCornerSize","centerX","centerY","isTouch","cosHalfOffset","sinHalfOffset","cosHalfOffsetComp","sinHalfOffsetComp","controlTriangleAngle","cornerHypotenuse","newTheta","newThetaComp","tl","tr","bl","br","render","StaticCanvas","CANVAS_INIT_ERROR","renderAndResetBound","renderAndReset","requestRenderAllBound","_initStatic","backgroundImage","overlayColor","overlayImage","includeDefaultValues","stateful","controlsAboveOverlay","allowTouchScrolling","viewportTransform","backgroundVpt","overlayVpt","enableRetinaScaling","vptCoords","skipOffscreen","cb","_createLowerCanvas","_initOptions","interactive","_initRetinaScaling","setOverlayImage","setBackgroundImage","setOverlayColor","_isRetinaScaling","getRetinaScaling","scaleRatio","__initRetinaScaling","lowerCanvasEl","contextContainer","upperCanvasEl","contextTop","_offset","__setBgOverlayImage","__setBgOverlayColor","isError","instance","setOptions","_createCanvasElement","_originalCanvasStyle","_applyCanvasStyle","getWidth","getHeight","setWidth","setDimensions","setHeight","dimensions","cssValue","cssOnly","_setBackstoreDimension","hasLostContext","backstoreOnly","_setCssDimension","_isCurrentlyDrawing","_setBrushStyles","cacheCanvasEl","wrapperEl","setViewportTransform","vpt","activeObject","_activeObject","backgroundObject","overlayObject","group","calcViewportBoundaries","zoomToPoint","before","after","setZoom","absolutePan","relativePan","getElement","setupState","clearContext","clearRect","_hasITextHandlers","_mouseUpITextHandler","_iTextInstances","canvasToDrawOn","renderCanvas","isRendering","iVpt","cancelRequestedRender","_renderBackground","_renderObjects","drawControls","shouldCache","_transformDone","renderCache","forClipping","drawClipPathOnCanvas","_renderOverlay","globalCompositeOperation","zoomX","zoomY","_cacheCanvas","cacheTranslationX","cacheTranslationY","_renderBackgroundOrOverlay","needsVpt","moveTo","lineTo","closePath","toLive","gradientTransform","patternTransform","getCenter","centerObjectH","_centerObject","centerObjectV","viewportCenterObject","vpCenter","getVpCenter","viewportCenterObjectH","viewportCenterObjectV","toDatalessJSON","propertiesToInclude","toDatalessObject","toObject","_toObjectMethod","_toObjects","excludeFromExport","__serializeBgOverlay","originalValue","bgImage","bgColor","overlay","sendToBack","objs","activeSelection","unshift","bringToFront","intersecting","newIdx","objsMoved","_findNewLowerIndex","intersectsWithObject","isContainedWithinObject","_findNewUpperIndex","classList","DataURLExporter","EMPTY_JSON","supports","setLineDash","createPNGStream","createJPEGStream","opts","BaseBrush","shadow","strokeLineCap","strokeDashArray","limitedToCanvasSize","lineCap","miterLimit","lineJoin","_saveAndTransform","_setShadow","shadowColor","shadowBlur","blur","shadowOffsetX","shadowOffsetY","needsFullRender","_resetShadow","_isOutSideCanvas","PencilBrush","decimate","drawStraightLine","straightLineKey","_points","_hasStraightLine","_drawSegment","quadraticCurveTo","onMouseDown","_isMainEvent","_prepareForDrawing","_captureDrawingPath","_render","onMouseMove","oldEnd","onMouseUp","_finalizeAndAddPath","_reset","_addPoint","pointerPoint","convertPointsToSVGPath","_isEmptySVGPath","createPath","Path","affectStroke","Shadow","decimatePoints","adjustedDistance","lastPoint","newPoints","CircleBrush","drawDot","addPoint","dot","radius","originalRenderOnAddRemove","circles","circle","Circle","circleRadius","circleColor","SprayBrush","density","dotWidth","dotWidthVariance","randomOpacity","optimizeOverlapping","sprayChunks","addSprayChunk","sprayChunkPoints","rects","ilen","sprayChunk","rect","Rect","_getOptimizedRects","uniqueRects","uniqueRectsArray","globalAlpha","fillRect","PatternBrush","getPatternSrc","patternCanvas","patternCtx","getPatternSrcFunction","String","getPattern","createPattern","topLeft","_getLeftTopCoords","_initInteractive","_createCacheCanvas","centeredScaling","centeredRotation","centeredKey","selection","selectionKey","altSelectionKey","selectionColor","selectionDashArray","selectionBorderColor","selectionLineWidth","selectionFullyContained","defaultCursor","freeDrawingCursor","notAllowedCursor","containerClass","skipTargetFind","stopContextMenu","fireRightClick","fireMiddleClick","targets","enablePointerEvents","_hoveredTarget","_hoveredTargets","_currentTransform","_groupSelector","_initWrapperElement","_createUpperCanvas","_initEventListeners","_chooseObjectsToRender","objsToRender","activeGroupObjects","activeObjects","contextTopDirty","renderTopLayer","_drawSelection","renderTop","_normalizePointer","invertedM","vptPointer","restorePointerVpt","isTargetTransparent","normalizedPointer","targetRelativeX","targetRelativeY","_cacheContext","contextCache","originalColor","selectionBackgroundColor","_isSelectionKeyPressed","_shouldClearSelection","_shouldCenterTransform","action","centerTransform","_getOriginFromCorner","_getActionFromCorner","alreadySelected","_setupCurrentTransform","__corner","lastX","lastY","_beforeTransform","setCursor","cursor","selector","viewportStart","viewportExtent","extent","strokeOffset","_setLineDash","findTarget","skipGroup","activeTarget","activeTargetSubs","aObjects","shouldLookForActive","_findTargetCorner","_searchPossibleTargets","_checkTarget","globalPointer","containsPoint","isEditing","subTarget","objToCheck","pointerToUse","subTargetCheck","ignoreZoom","_absolutePointer","_pointer","cssScale","boundsWidth","boundsHeight","retinaScaling","lowerCanvasClass","_copyCanvasStyle","getTopContext","fromEl","toEl","getSelectionContext","getSelectionElement","active","_discardActiveObject","_fireSelectionEvents","oldObjects","somethingChanged","added","removed","oldObject","selected","deselected","currentActives","_setActiveObject","onSelect","onDeselect","removeListeners","_renderControls","originalProperties","_realizeGroupTransformOnObject","_unwindGroupTransformOnObject","originalValues","layoutProps","_setSVGObject","markup","clearContextTop","addEventOptions","passive","checkClick","button","mainTouchId","_bindEvents","addOrRemove","_getEventPrefix","functor","eventjsFunctor","canvasElement","eventTypePrefix","_onResize","_onMouseDown","_onMouseMove","_onMouseOut","_onMouseEnter","_onMouseWheel","_onContextMenu","_onDoubleClick","_onDragOver","_onDragEnter","_onDragLeave","_onDrop","_onTouchStart","eventjs","_onGesture","_onDrag","_onOrientationChange","_onShake","_onLongPress","_onMouseUp","_onTouchEnd","eventsBound","_simpleEventHandler","__onTransformGesture","__onDrag","__onMouseWheel","_target","hiddenTextarea","__onOrientationChange","__onShake","__onLongPress","_fireEnterLeaveEvents","stopPropagation","_cacheTransformEventData","_handleEvent","_resetTransformEventData","getPointerId","evt","identifier","pointerId","isPrimary","touches","__onMouseDown","__onMouseUp","_willAddMouseDown","__onMouseMove","_shouldRender","groupSelector","shouldRender","isClick","_onMouseUpInDrawingMode","_finalizeCurrentTransform","targetWasActive","_maybeGroupObjects","activeOn","isMoving","originalControl","originalMouseUpHandler","_setCursorFromEvent","eventType","subTargets","absolutePointer","currentSubTargets","_scaling","hasStateChanged","_fire","_onMouseDownInDrawingMode","_onMouseMoveInDrawingMode","_previousPointer","shouldGroup","_shouldGroup","_handleGrouping","saveState","_transformObject","_fireOverOutEvents","fireSyntheticInOutEvents","oldTarget","evtOut","canvasEvtOut","evtIn","canvasEvtIn","_draggedoverTarget","inOpt","outOpt","targetChanged","previousTarget","nextTarget","reset","_performTransformAction","getCornerCursor","reverse","_updateActiveSelection","_createActiveSelection","currentActiveObjects","removeWithUpdate","addWithUpdate","_createGroup","groupObjects","isActiveLower","exitEditing","ActiveSelection","_groupSelectedObjects","aGroup","_collectObjects","currentObject","selectionX1Y1","selectionX2Y2","allowIntersect","intersectsWithRect","isContainedWithinRect","toCanvasElement","cropping","scaledWidth","scaledHeight","originalWidth","originalHeight","newZoom","vp","originalInteractive","originalRetina","originalContextTop","json","serialized","JSON","parse","_enlivenObjects","_setBgOverlay","enlivenedCanvasClip","__setupCanvas","loaded","cbIfLoaded","__setBgOverlay","enlivedObject","_toDataURL","_toDataURLWithMultiplier","toDataURLWithMultiplier","stringify","cloneWithoutData","backgroundImageOpacity","backgroundImageStretch","touchCornerSize","borderDashArray","cornerDashArray","fillRule","strokeDashOffset","borderOpacityWhenMoving","borderScaleFactor","minScaleLimit","hasControls","hasBorders","statefullCache","noScaleCache","dirty","paintFirst","stateProperties","cacheProperties","colorProperties","absolutePositioned","_cacheProperties","_updateCacheCanvas","_limitCacheSize","dims","limitedDims","capped","_getCacheCanvasDimensions","objectScale","getTotalObjectScaling","neededX","neededY","drawingWidth","drawingHeight","minCacheSize","dimensionsChanged","cacheWidth","cacheHeight","zoomChanged","shouldRedraw","additionalWidth","additionalHeight","shouldResizeCanvas","canvasWidth","canvasHeight","sizeGrowing","getHeightOfLine","setTransform","needFullTransform","_removeDefaultValues","getObjectScaling","retina","getObjectOpacity","isChanged","groupNeedsUpdate","_constrainScale","isOnACache","setOnGroup","getViewportTransform","isNotVisible","isOnScreen","_setupCompositeOperation","drawSelectionBackground","_setOpacity","drawCacheOnCanvas","_removeCacheCanvas","drawObject","propertySet","isCacheDirty","hasStroke","hasFill","needsItsOwnCache","ownCaching","willDrawShadow","drawClipPathOnCache","originalFill","originalStroke","_setClippingProperties","_drawClipPath","skipCanvas","_getNonTransformedDimensions","_removeShadow","_setStrokeStyles","decl","lineDashOffset","gradientUnits","_applyPatternForTransformedGradient","_applyPatternGradientTransform","_setFillStyles","dashArray","drawBorders","forActiveSelection","drawBordersInGroup","scaling","multX","multY","nonScaling","_renderPaintInOrder","_renderStroke","_renderFill","pCtx","pCanvas","_findCenterFromElement","_assignTransformMatrixProps","_removeTransformMatrix","preserveAspectRatioOptions","cropX","cropY","offsetLeft","offsetTop","objectForm","_fromObject","cloneAsImage","utils","origParams","originalGroup","originalShadow","withoutTransform","withoutShadow","boundingRect","getBoundingRect","shadowOffset","originalCanvas","isType","shouldCenterOrigin","_setOriginToCenter","_resetOrigin","centerH","viewportCenterH","centerV","viewportCenterV","viewportCenter","getLocalPointer","pClicked","objectLeftTop","createAccessors","extraParam","__uid","translateToGivenOrigin","fromOriginX","fromOriginY","toOriginX","toOriginY","translateToCenterPoint","leftTop","getPointByOrigin","adjustPosition","offsetFrom","offsetTo","hypotFull","getScaledWidth","xFull","yFull","_originalOriginX","_originalOriginY","originPoint","oCoords","aCoords","lineCoords","ownMatrixCache","matrixCache","_getCoords","absolute","calculate","calcACoords","calcLineCoords","getCoords","pointTL","pointBR","intersection","other","otherCoords","lines","_getImageLines","_findCrossPoints","_containsCenterOfCanvas","isPartiallyOnScreen","allPointsAreOutside","topline","rightline","bottomline","leftline","xi","iLine","xcount","lineKey","getScaledHeight","scaleToWidth","boundingRectFactor","scaleToHeight","cosP","sinP","cosPSinP","cosPMinusSinP","calcOCoords","rotateMatrix","_calcRotateMatrix","translateMatrix","_calcTranslateMatrix","startMatrix","_calculateCurrentDimensions","forEachControl","w","skipCorners","_setCornerCoords","transformMatrixKey","prefix","cache","tMatrix","noSkew","_finalizeDimensions","originalSet","saveProps","props","tmpObj","dashedPropertySet","keys","_isEqual","origValue","firstPass","forTouch","isControlVisible","touchCorner","fn","controlObject","wh","shouldStroke","setControlVisible","setControlsVisibility","FX_DURATION","fxCenterObjectH","callbacks","empty","fxCenterObjectV","fxRemove","_animate","skipCallbacks","propsToAnimate","out","propPair","propIsColor","_options","valueProgress","timeProgress","_initRxRy","isRounded","bezierCurveTo","Polyline","exactBoundingBox","_setPositionDimensions","_projectStrokeOnPoints","correctLeftTop","calcDim","_calcDimensions","correctSize","fromSVG","commonRender","_setPath","_renderPathCommands","subpathStartX","subpathStartY","aX","aY","pathUrl","loadSVGFromURL","useSetOnGroup","isAlreadyGrouped","_updateObjectsACoords","_calcBounds","_updateObjectsCoords","_updateObjectCoords","objectLeft","objectTop","nested","_restoreObjectsState","_includeDefaultValues","objsToObject","originalDefaults","_obj","ownCache","groupMatrix","destroy","toActiveSelection","ungroupOnCanvas","setObjectsCoords","onlyWidthHeight","iLen","jLen","_getBounds","minXY","maxXY","toGroup","newGroup","childrenOverride","srcFromAttribute","_lastScaleX","_lastScaleY","_filterScalingX","_filterScalingY","minimumScaleTrigger","cacheKey","imageSmoothing","_initElement","_element","setElement","removeTexture","_originalElement","_initConfig","resizeFilter","applyResizeFilters","backend","filterBackend","evictCachesForKey","getCrossOrigin","getOriginalSize","naturalWidth","naturalHeight","_stroke","filterObj","getSrc","hasCrop","filtered","getAttribute","setSrc","_setWidthHeight","minimumScale","elementToFilter","_filteredEl","sourceWidth","sourceHeight","isNeutralState","imgElement","_needsResize","elementToDraw","elWidth","elHeight","sX","sY","sW","sH","maxDestW","maxDestH","_resetWidthHeight","CSS_CANVAS","_initFilters","pAR","preserveAspectRatio","rWidth","rHeight","pWidth","pHeight","parsedAttributes","getSvgSrc","_object","resizeFilters","imgOptions","setupGLContext","captureGPUInfo","isSupported","getParameter","MAX_TEXTURE_SIZE","precisions","testPrecision","precision","fragmentShader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","webGlPrecision","createWebGLCanvas","aPosition","Float32Array","chooseFastestCopyGLTo2DMethod","startTime","drawImageTime","canUseImageData","canMeasurePerf","performance","canUseArrayBuffer","ArrayBuffer","canUseUint8Clamped","copyGLTo2D","testContext","now","glOptions","premultipliedAlpha","depth","stencil","antialias","clearColor","cachedTexture","getCachedTexture","sourceTexture","targetTexture","originalTexture","passes","webgl","programCache","pass","tempFbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","applyTo","bindTexture","TEXTURE_2D","deleteTexture","deleteFramebuffer","clearWebGLCaches","textureCache","textureImageSource","texParameteri","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","uniqueId","gpuInfo","renderer","vendor","ext","getExtension","UNMASKED_RENDERER_WEBGL","UNMASKED_VENDOR_WEBGL","sourceElement","originalImageData","originalEl","BaseFilter","vertexSource","fragmentSource","createProgram","vertexShader","VERTEX_SHADER","getShaderInfoLog","program","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributeLocations","getAttributeLocations","uniformLocations","getUniformLocations","uStepW","getUniformLocation","uStepH","getAttribLocation","sendAttributeData","aPositionData","attributeLocation","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","STATIC_DRAW","_setupFrameBuffer","framebufferTexture2D","COLOR_ATTACHMENT0","_swapTextures","main","mainParameter","_class","applyToWebGL","applyTo2d","retrieveShader","shader","useProgram","uniform1f","sendUniformData","viewport","drawArrays","TRIANGLE_STRIP","bindAdditionalTexture","textureUnit","activeTexture","TEXTURE0","unbindAdditionalTexture","getMainParameter","setMainParameter","createHelpLayer","helpLayer","mainP","ColorMatrix","colorsOnly","uColorMatrix","uConstants","constants","uniformMatrix4fv","uniform4fv","uBrightness","Convolute","opaque","Convolute_3_1","Convolute_3_0","Convolute_5_1","Convolute_5_0","Convolute_7_1","Convolute_7_0","Convolute_9_1","Convolute_9_0","dstOff","scx","scy","srcOff","wt","weights","side","halfSide","sw","sh","output","createImageData","dst","alphaFac","uMatrix","uOpaque","uHalfSize","uSize","uniform1fv","lightness","luminosity","mode","uMode","uniform1i","Invert","invert","uInvert","Noise","noise","rand","uNoise","uSeed","Pixelate","blocksize","_i","_j","_iLen","_jLen","uBlocksize","RemoveColor","useAlpha","lowC","highC","uLow","uHigh","matrices","Brownie","Vintage","Kodachrome","Technicolor","Polaroid","Sepia","BlackWhite","BlendColor","screen","diff","lighten","darken","exclusion","tint","buildSource","tg","alpha1","uColor","BlendImage","mask","TEXTURE1","calculateMatrix","canvas1","blendData","blendImage","uTransformMatrix","uImage","uniformMatrix3fv","Resize","resizeType","lanczosLobes","uDelta","uTaps","uniform2fv","horizontal","taps","filterWindow","getFilterWindow","generateShader","tempScale","getTaps","lobeFunction","lanczosCreate","offsets","fragmentSourceTOP","dW","dH","lobes","xx","rcpScaleX","rcpScaleY","newData","oW","oH","sliceByTwo","hermiteFastResize","bilinearFiltering","lanczosResize","tmpCanvas","doneW","doneH","stepW","stepH","dX","dY","srcData","destImg","destData","lanczos","ratioX","ratioY","rcpRatioX","rcpRatioY","range2X","range2Y","cacheLanc","icenter","process","u","weight","fX","fY","xDiff","yDiff","chnl","origPix","w4","pixels","destImage","destPixels","ratioW","ratioH","ratioWHalf","ratioHHalf","img2","data2","weightsAlpha","gxR","gxG","gxB","gxA","yy","w0","Contrast","contrast","contrastF","uContrast","adjust","uSaturation","Blur","aspectRatio","simpleBlur","canvas2","blurLayer1","blurLayer2","percent","ctx1","ctx2","newImageData","delta","chooseRightDelta","blurScale","Gamma","gamma","rInv","gInv","bInv","rVals","gVals","bVals","uGamma","uniform3fv","Composed","subFilters","rad","aThird","aThirdSqtSin","OneMinusCos","additionalProps","_dimensionAffectingProps","_reNewline","_reSpacesAndTabs","_reSpaceAndTab","_reWords","textAlign","lineHeight","superscript","baseline","subscript","textBackgroundColor","pathStartOffset","pathSide","pathAlign","_fontSizeFraction","_fontSizeMult","charSpacing","_measuringContext","direction","_styleProperties","__charBounds","CACHE_FONT_SIZE","MIN_TEXT_WIDTH","__skipDimension","setPathInfo","initDimensions","segmentsInfo","getMeasuringContext","_splitText","newLines","_splitTextIntoLines","_textLines","graphemeLines","_unwrappedTextLines","_unwrappedLines","_text","graphemeText","_clearCache","calcTextWidth","cursorWidth","calcTextHeight","enlargeSpaces","diffSpace","currentLineWidth","numberOfSpaces","accumulatedSpace","line","charBound","spaces","isEndOfWrapping","getLineWidth","kernedWidth","lineIndex","missingNewlineOffset","_setTextStyles","_renderTextLinesBackground","_renderTextDecoration","_renderText","_renderTextStroke","_renderTextFill","charStyle","forMeasuring","textBaseline","font","_getFontDeclaration","maxWidth","_renderTextLine","_renderChars","styleHas","heightOfLine","lineLeftOffset","lastColor","charBox","currentColor","drawStart","leftOffset","_getLeftOffset","lineTopOffset","_getTopOffset","boxStart","boxWidth","_getLineLeftOffset","getValueOfPropertyAt","renderLeft","getFontCache","cacheProp","_measureChar","_char","previousChar","prevCharStyle","coupleWidth","previousWidth","fontCache","fontDeclaration","previousFontDeclaration","couple","stylesAreEqual","fontMultiplier","measureText","getHeightOfChar","measureLine","lineInfo","_measureLine","_getWidthOfCharSpacing","grapheme","prevGrapheme","graphemeInfo","startingPoint","totalPathLength","lineBounds","positionInPath","_getGraphemeBox","_setGraphemeOnPath","numOfSpaces","centerPosition","skipLeft","getCompleteStyleDeclaration","previousBox","__lineHeights","maxHeight","_renderTextCommon","lineHeights","isEmptyStyles","actualStyle","nextStyle","timeToRender","drawingLeft","isJustify","charsToRender","shortCut","isLtr","currentDirection","_renderChar","_applyPatternGradientTransformText","handleFiller","fillOffsets","strokeOffsets","_getStyleDeclaration","fullDecl","shouldFill","fillText","strokeText","setSuperscript","_setScript","setSubscript","schema","loc","get2DCursorLocation","setSelectionStyles","lineDiff","__lineWidths","_shouldClearDimensionCache","shouldClear","_forceClearCache","_size","_dy","lastDecoration","currentDecoration","currentFill","lastFill","topOffset","styleObject","family","fontIsGeneric","genericFonts","newLine","newText","allProperties","needsDims","isAddingPath","objectCopy","textInstance","pathInstance","p3","cleanStyle","letterCount","stylePropertyValue","stylesCount","allStyleObjectPropertiesMatch","graphemeCount","stylePropertyHasBeenSet","removeStyle","lineNum","charNum","_extendStyles","_getLineStyle","_setLineStyle","_setStyleDeclaration","selectionStart","skipWrapping","getSelectionStyles","startIndex","endIndex","complete","selectionEnd","getStyleAtPosition","lineStyle","_deleteStyleDeclaration","_deleteLineStyle","scaleSkewStyleHandler","scaleStyleHandler","objectControls","ml","mr","mb","mtr","Textbox","textBoxControls","getSvgCommons","_createBaseClipPathSVGMarkup","_createBaseSVGMarkup","erasable","eraser","_addEraserPathToObjects","EraserBrush","_addPathToObjectEraser","applyEraserToObjects","originalTransform","_clipPath","eraserPath","applyClipPathToPath","Eraser","isErasing","_isErasing","_isErasable","_prepareCollectionTraversal","collection","restorationContext","preparePattern","_patternCanvas","bgErasable","overlayErasable","clipPathContainerTransformMatrix","pathInvTransform","clipPathTransform","clonePathWithClipPath","objTransform","_path","desiredTransform","__subTargets","applyEraserToCanvas","drawables","drawable","O","_N_E"],"sourceRoot":""}